void sub_1DE933760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 104;
      v6 = *(_OWORD *)(v3 - 104);
      *(_QWORD *)(v4 - 88) = *(_QWORD *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v6;
      *(_QWORD *)(v3 - 96) = 0;
      *(_QWORD *)(v3 - 88) = 0;
      *(_QWORD *)(v3 - 104) = 0;
      v7 = *(_OWORD *)(v3 - 80);
      *(_QWORD *)(v4 - 64) = *(_QWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = v7;
      *(_QWORD *)(v3 - 72) = 0;
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 80) = 0;
      v8 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v8;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 104;
      v3 -= 104;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TacotronPhoneFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void TacotronPhoneFeature::TacotronPhoneFeature(std::string *this, __int128 *a2, __int128 *a3, int a4, int a5, std::string::value_type a6, std::string::value_type a7, std::string::value_type a8, float a9)
{
  __int128 v17;
  std::string *v18;
  __int128 v19;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v17 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v17;
  }
  v18 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v19 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[12] = a8;
  this[2].__r_.__value_.__s.__data_[13] = a6;
  this[2].__r_.__value_.__s.__data_[14] = a7;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a9;
  *(std::string::size_type *)((char *)&this[2].__r_.__value_.__r.__words[2] + 4) = 1065353216;
  HIDWORD(this[3].__r_.__value_.__r.__words[0]) = 0x800000;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_1DE933990(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(v2 + 6440);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v2);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &off_1EA92DE70;
  v2 = *(void **)(a1 + 6416);
  if (v2)
  {
    *(_QWORD *)(a1 + 6424) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 6392);
  if (v3)
  {
    *(_QWORD *)(a1 + 6400) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 6360);
  if (v4)
  {
    *(_QWORD *)(a1 + 6368) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 6336);
  if (v5)
  {
    *(_QWORD *)(a1 + 6344) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 6288);
  if (v6)
  {
    *(_QWORD *)(a1 + 6296) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 6184);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5808));
  v8 = (void **)(a1 + 5704);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 5680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 5664);
  kaldi::Matrix<float>::~Matrix(a1 + 5624);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5576);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5528);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5480);
  v8 = (void **)(a1 + 5456);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*(char *)(a1 + 5447) < 0)
    operator delete(*(void **)(a1 + 5424));
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 392);
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 136);
  v8 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 8);
  return a1;
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &off_1EA92DE90;
  v2 = *(void **)(a1 + 6416);
  if (v2)
  {
    *(_QWORD *)(a1 + 6424) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 6392);
  if (v3)
  {
    *(_QWORD *)(a1 + 6400) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 6360);
  if (v4)
  {
    *(_QWORD *)(a1 + 6368) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 6336);
  if (v5)
  {
    *(_QWORD *)(a1 + 6344) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 6288);
  if (v6)
  {
    *(_QWORD *)(a1 + 6296) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 6184);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5808));
  v8 = (void **)(a1 + 5704);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 5680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 5664);
  kaldi::Matrix<float>::~Matrix(a1 + 5624);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5576);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5528);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5480);
  v8 = (void **)(a1 + 5456);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*(char *)(a1 + 5447) < 0)
    operator delete(*(void **)(a1 + 5424));
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 392);
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 136);
  v8 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 8);
  return a1;
}

void kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this)
{
  if (*((_QWORD *)this + 589))
    utrans_close();
  kaldi::quasar::BPE::~BPE((kaldi::quasar::NNMTTransliterator *)((char *)this + 4728));
  if (*((char *)this + 4711) < 0)
    operator delete(*((void **)this + 586));
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(a1);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a1);
  JUMPOUT(0x1DF0ED014);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>(char ***a1, unsigned __int8 *a2)
{
  char **v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  int data;
  uint64_t **v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char **v20;
  nlohmann::detail::exception *exception;
  unint64_t v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  char **v26;
  uint64_t v27;
  char **v28;
  std::string v29;
  int v30;
  std::string v31;
  uint64_t v32;
  const void **v33;

  a1[1] = 0;
  v3 = (char **)(a1 + 1);
  a1[2] = 0;
  *a1 = (char **)(a1 + 1);
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v22 = *a2;
    if (v22 > 9)
      v23 = "number";
    else
      v23 = off_1EA94C758[v22];
    std::string::basic_string[abi:ne180100]<0>(&v31, v23);
    v24 = std::string::insert(&v31, 0, "type must be object, but is ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v29, exception);
  }
  v27 = 0;
  v28 = 0;
  v26 = (char **)&v27;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v8 = (_QWORD *)*v5;
  v6 = v5 + 1;
  v7 = v8;
  if (v8 == v6)
  {
    v18 = 0;
  }
  else
  {
    v9 = &v27;
    do
    {
      LODWORD(v31.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>((_BYTE *)v7 + 56, (int *)&v31);
      data = (int)v31.__r_.__value_.__l.__data_;
      if (*((char *)v7 + 55) < 0)
        std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v7[4], v7[5]);
      else
        v29 = *(std::string *)(v7 + 4);
      v30 = data;
      v11 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v26, v9, &v33, &v32, (const void **)&v29.__r_.__value_.__l.__data_);
      v12 = *v11;
      if (!*v11)
      {
        v12 = (uint64_t *)operator new(0x40uLL);
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
        v31.__r_.__value_.__s.__data_[16] = 0;
        v13 = (std::string *)(v12 + 4);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          v12[6] = v29.__r_.__value_.__r.__words[2];
        }
        *((_DWORD *)v12 + 14) = v30;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)&v26, (uint64_t)v33, v11, v12);
      }
      v14 = (uint64_t *)v12[1];
      if (v14)
      {
        do
        {
          v9 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v12[2];
          v15 = *v9 == (_QWORD)v12;
          v12 = v9;
        }
        while (!v15);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v16 = (_QWORD *)v7[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v7[2];
          v15 = *v17 == (_QWORD)v7;
          v7 = v17;
        }
        while (!v15);
      }
      v7 = v17;
    }
    while (v17 != v6);
    v18 = *v3;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v18);
  v19 = v27;
  *a1 = v26;
  a1[1] = (char **)v19;
  v20 = v28;
  a1[2] = v28;
  if (v20)
  {
    *(_QWORD *)(v19 + 16) = v3;
    v26 = (char **)&v27;
    v27 = 0;
    v28 = 0;
    v19 = 0;
  }
  else
  {
    *a1 = v3;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v19);
}

void sub_1DE934168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  char **v28;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v26, v27);
  if (a18 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a11);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v28);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  std::string::size_type *v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  const void **v8;
  char *v9;
  uint64_t **v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  nlohmann::detail::exception *exception;
  unint64_t v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  uint64_t v31;
  const void **v32;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (*a2 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v16 = *a2;
    if (v16 > 9)
      v17 = "number";
    else
      v17 = off_1EA94C758[v16];
    std::string::basic_string[abi:ne180100]<0>(&v20, v17);
    v18 = std::string::insert(&v20, 0, "type must be array, but is ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v24 = v18->__r_.__value_.__r.__words[2];
    v23 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v23, exception);
  }
  v28 = 0;
  v29 = 0;
  v27 = &v28;
  v23 = (unint64_t)a2;
  v24 = 0;
  v25 = 0;
  v26 = 0x8000000000000000;
  v5 = (std::string::size_type *)*((_QWORD *)a2 + 1);
  v24 = *v5;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v20.__r_.__value_.__r.__words[2] = 0;
  v21 = 0;
  v22 = 0x8000000000000000;
  v20.__r_.__value_.__r.__words[2] = v5[1];
  v6 = &v28;
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v23, (unsigned __int8 **)&v20))
  {
    v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v7, &v30);
    v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v27, v6, &v32, &v31, (const void **)&v30.__r_.__value_.__l.__data_);
    v9 = (char *)*v8;
    if (!*v8)
    {
      v10 = (uint64_t **)v8;
      v9 = (char *)operator new(0x38uLL);
      *(std::string *)(v9 + 32) = v30;
      memset(&v30, 0, sizeof(v30));
      std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v27, (uint64_t)v32, v10, (uint64_t *)v9);
    }
    v11 = (uint64_t *)*((_QWORD *)v9 + 1);
    if (v11)
    {
      do
      {
        v6 = v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v6 = (uint64_t *)*((_QWORD *)v9 + 2);
        v12 = *v6 == (_QWORD)v9;
        v9 = (char *)v6;
      }
      while (!v12);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v23);
  }
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  v13 = v28;
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v13;
  v14 = v29;
  *(_QWORD *)(a1 + 16) = v29;
  if (v14)
  {
    *(_QWORD *)(v13 + 16) = v4;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
    v13 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  std::__tree<std::string>::destroy((uint64_t)&v27, (char *)v13);
}

void sub_1DE934444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  uint64_t v28;
  uint64_t v29;

  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  std::__tree<std::string>::destroy((uint64_t)&a27, a28);
  std::__tree<std::string>::destroy(v28, *(char **)(v28 + 8));
  _Unwind_Resume(a1);
}

void NeuralRateChangeModule::~NeuralRateChangeModule(NeuralRateChangeModule *this)
{
  *(_QWORD *)this = &off_1EA920430;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA920430;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void NeuralRateChangeModule::process_data(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  float *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  int v32;
  const void **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float *v45;
  int v46;
  uint64_t v47;
  const void **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  const char *v53;
  double v54;
  int v55;
  unint64_t v56;
  float *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void *__p;
  float *v102;
  unint64_t v103;
  void **v104;
  _QWORD *v105;
  unint64_t v106;
  __int128 v107;
  unint64_t v108;
  void *v109[3];
  __int128 v110;
  __int128 v111;
  _BYTE v112[54];
  uint8_t buf[4];
  double v114;
  __int16 v115;
  double v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v6 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v99 = v5;
  v100 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (*(_BYTE *)v5)
  {
    v9 = a1[34];
    *(_QWORD *)(v9 + 8) = *(_QWORD *)v9;
    *(_QWORD *)(v9 + 24) = 0x3F80000000000000;
    *(_DWORD *)(v9 + 56) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v9 + 44) = _D0;
  }
  v14 = *(float **)(v5 + 80);
  v15 = *(_QWORD *)(v5 + 88) - (_QWORD)v14;
  if ((int)(v15 >> 2) < 1)
    goto LABEL_17;
  v16 = 0;
  v17 = (v15 >> 2);
  do
  {
    v18 = *v14;
    v19 = fabsf(*v14);
    if (*v14 <= 0.0 || v19 == INFINITY)
    {
      *v14 = 1.0;
      v18 = 1.0;
    }
    v16 |= v18 != 1.0;
    ++v14;
    --v17;
  }
  while (v17);
  if ((v16 & 1) != 0)
  {
    v21 = a1[34];
  }
  else
  {
LABEL_17:
    v21 = a1[34];
    if (*(float *)(v21 + 40) == 1.0)
      goto LABEL_110;
  }
  v97 = v5;
  v98 = v6;
  if (v6)
  {
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  LOWORD(v109[0]) = 257;
  BYTE2(v109[0]) = 0;
  *(_OWORD *)&v109[1] = 0u;
  v110 = 0u;
  v111 = 0u;
  memset(v112, 0, sizeof(v112));
  v107 = 0uLL;
  v108 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v24 = *(float *)(v21 + 24);
  v25 = (int)v24;
  v26 = *(_QWORD *)(v5 + 8);
  if ((int)v24 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v5 + 16) - v26) >> 3)))
  {
    v69 = 0;
    v68 = 0;
    v31 = *(float *)(v21 + 28);
  }
  else
  {
    do
    {
      v27 = *(_QWORD *)(v5 + 80);
      v28 = *(_QWORD *)(v5 + 88);
      v29 = 1.0;
      if (v27 != v28 && v25 < (int)((unint64_t)(v28 - v27) >> 2))
        v29 = *(float *)(v27 + 4 * v25);
      if (*(_BYTE *)(v21 + 60))
      {
        v30 = *(float *)(v21 + 36);
        if (v29 <= v30)
        {
          if (v29 >= *(float *)(v21 + 32))
            v31 = 1.0;
          else
            v31 = v29;
          if (v29 < *(float *)(v21 + 32))
            v29 = 1.0;
        }
        else
        {
          if (v30 >= (float)(v29 / v30))
            v31 = v29 / v30;
          else
            v31 = *(float *)(v21 + 36);
          v29 = v29 / v31;
        }
      }
      else
      {
        v31 = 1.0;
      }
      v32 = v25;
      v33 = (const void **)(v26 + 24 * v25);
      v34 = (_QWORD *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1) >= v108)
      {
        v36 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&v107, (uint64_t)v33);
      }
      else
      {
        **((_QWORD **)&v107 + 1) = 0;
        v34[1] = 0;
        v34[2] = 0;
        v35 = *(_QWORD *)(v26 + 24 * v25 + 8);
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v34, *v33, v35, (v35 - (uint64_t)*v33) >> 2);
        v36 = (uint64_t)(v34 + 3);
      }
      *((_QWORD *)&v107 + 1) = v36;
      v37 = v102;
      if ((unint64_t)v102 >= v103)
      {
        v39 = (float *)__p;
        v40 = ((char *)v102 - (_BYTE *)__p) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v42 = v103 - (_QWORD)__p;
        if ((uint64_t)(v103 - (_QWORD)__p) >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v103, v43);
          v39 = (float *)__p;
          v37 = v102;
        }
        else
        {
          v44 = 0;
        }
        v45 = (float *)&v44[4 * v40];
        *v45 = v29;
        v38 = v45 + 1;
        while (v37 != v39)
        {
          v46 = *((_DWORD *)v37-- - 1);
          *((_DWORD *)v45-- - 1) = v46;
        }
        __p = v45;
        v102 = v38;
        v103 = (unint64_t)&v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v102 = v29;
        v38 = v37 + 1;
      }
      v102 = v38;
      v5 = v97;
      v47 = *(_QWORD *)(v97 + 32);
      if (v47 != *(_QWORD *)(v97 + 40))
      {
        v48 = (const void **)(v47 + 24 * v32);
        v49 = v105;
        if ((unint64_t)v105 >= v106)
        {
          v51 = (_QWORD *)std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&v104, (uint64_t)v48);
        }
        else
        {
          *v105 = 0;
          v49[1] = 0;
          v49[2] = 0;
          v50 = *(_QWORD *)(v47 + 24 * v32 + 8);
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v49, *v48, v50, (v50 - (uint64_t)*v48) >> 2);
          v51 = v49 + 3;
        }
        v105 = v51;
      }
      if (v31 != *(float *)(v21 + 44))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v54 = *(float *)(v21 + 40);
          *(_DWORD *)buf = 134218240;
          v114 = v31;
          v115 = 2048;
          v116 = v54;
          _os_log_impl(&dword_1DE3F6000, v52, OS_LOG_TYPE_DEBUG, "NeuralRateChangeModule: Modify Mel-Spectrogram: local rate = %.2f, global rate: %.2f", buf, 0x16u);
        }
        Diagnostics::log(7, "NeuralRateChangeModule: Modify Mel-Spectrogram: local rate = %.2f, global rate: %.2f", v53, v31, *(float *)(v21 + 40));
      }
      if (v29 != *(float *)(v21 + 48))
      {
        v55 = (int)(float)(v24 * (float)*(int *)(v21 + 52));
        v57 = *(float **)(v21 + 8);
        v56 = *(_QWORD *)(v21 + 16);
        if ((unint64_t)v57 >= v56)
        {
          v59 = *(float **)v21;
          v60 = ((uint64_t)v57 - *(_QWORD *)v21) >> 3;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v62 = v56 - (_QWORD)v59;
          if (v62 >> 2 > v61)
            v61 = v62 >> 2;
          _CF = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8;
          v63 = 0x1FFFFFFFFFFFFFFFLL;
          if (!_CF)
            v63 = v61;
          if (v63)
          {
            v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v63);
            v59 = *(float **)v21;
            v57 = *(float **)(v21 + 8);
          }
          else
          {
            v64 = 0;
          }
          v65 = v63 + 8 * v60;
          *(_DWORD *)v65 = v55;
          *(float *)(v65 + 4) = v29;
          v66 = v65;
          if (v57 != v59)
          {
            do
            {
              v67 = *((_QWORD *)v57 - 1);
              v57 -= 2;
              *(_QWORD *)(v66 - 8) = v67;
              v66 -= 8;
            }
            while (v57 != v59);
            v59 = *(float **)v21;
          }
          v58 = (float *)(v65 + 8);
          *(_QWORD *)v21 = v66;
          *(_QWORD *)(v21 + 8) = v65 + 8;
          *(_QWORD *)(v21 + 16) = v63 + 8 * v64;
          if (v59)
            operator delete(v59);
        }
        else
        {
          *(_DWORD *)v57 = v55;
          v57[1] = v29;
          v58 = v57 + 2;
        }
        *(_QWORD *)(v21 + 8) = v58;
        v5 = v97;
      }
      v24 = v24 + (float)(v31 * *(float *)(v21 + 40));
      *(float *)(v21 + 44) = v31;
      *(float *)(v21 + 48) = v29;
      v25 = (int)v24;
      v26 = *(_QWORD *)(v5 + 8);
    }
    while ((int)v24 < (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v5 + 16) - v26) >> 3)));
    v69 = *((_QWORD *)&v107 + 1);
    v68 = v107;
  }
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v109[1], v68, v69, 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3));
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v112[24], (char *)__p, (uint64_t)v102, ((char *)v102 - (_BYTE *)__p) >> 2);
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v110 + 8, (uint64_t)v104, (uint64_t)v105, 0xAAAAAAAAAAAAAAABLL * ((void **)v105 - v104));
  *(float *)(v21 + 24) = v24
                       - (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3));
  *(float *)(v21 + 28) = v31;
  v70 = v109[1];
  v71 = v109[2];
  v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109[2] - (char *)v109[1]) >> 3);
  *(_DWORD *)(v21 + 56) -= 1431655765 * (((char *)v109[2] - (char *)v109[1]) >> 3);
  v73 = *(float **)(v5 + 80);
  if (v73 == *(float **)(v5 + 88))
  {
    v76 = (float)*(int *)(v5 + 104);
  }
  else
  {
    v74 = *v73;
    v75 = *(float *)(v21 + 36);
    if (*v73 <= v75)
    {
      if (v74 >= *(float *)(v21 + 32) && v74 <= v75)
        v74 = 1.0;
    }
    else
    {
      v74 = v74 / v75;
      if (v75 < v74)
        v74 = *(float *)(v21 + 36);
    }
    v76 = v74 * (float)*(int *)(v5 + 104);
  }
  *(_DWORD *)&v112[48] = (int)(float)(*(float *)(v21 + 40) * v76);
  if ((void **)v5 != v109)
  {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v5 + 8, (uint64_t)v70, (uint64_t)v71, v72);
    v78 = v97;
    if ((void **)v97 != v109)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v97 + 80), *(char **)&v112[24], *(uint64_t *)&v112[32], (uint64_t)(*(_QWORD *)&v112[32] - *(_QWORD *)&v112[24]) >> 2);
      *(_DWORD *)(v97 + 104) = *(_DWORD *)&v112[48];
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v78 + 32, *((uint64_t *)&v110 + 1), v111, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - *((_QWORD *)&v110 + 1)) >> 3));
    }
  }
  if (__p)
  {
    v102 = (float *)__p;
    operator delete(__p);
  }
  __p = &v104;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v104 = (void **)&v107;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v104);
  if (*(_QWORD *)&v112[24])
  {
    *(_QWORD *)&v112[32] = *(_QWORD *)&v112[24];
    operator delete(*(void **)&v112[24]);
  }
  *(_QWORD *)&v107 = v112;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  *(_QWORD *)&v107 = (char *)&v110 + 8;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  *(_QWORD *)&v107 = &v109[1];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  if (v6)
  {
    v79 = (unint64_t *)&v6->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_110:
  v81 = *a2;
  v82 = a1[34];
  memset(v109, 0, sizeof(v109));
  std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(v109, *(const void **)v82, *(_QWORD *)(v82 + 8), (uint64_t)(*(_QWORD *)(v82 + 8) - *(_QWORD *)v82) >> 3);
  v83 = (std::__shared_weak_count *)operator new(0x30uLL);
  v83->__shared_owners_ = 0;
  v84 = (unint64_t *)&v83->__shared_owners_;
  v83->__shared_weak_owners_ = 0;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9364F8;
  v83[1].std::__shared_count = *(std::__shared_count *)v109;
  v83[1].__shared_weak_owners_ = (uint64_t)v109[2];
  memset(v109, 0, sizeof(v109));
  *(_QWORD *)&v107 = v83 + 1;
  *((_QWORD *)&v107 + 1) = v83;
  Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v81, &v107);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
  }
  if (v109[0])
    operator delete(v109[0]);
  v86 = a2[1];
  v95 = *a2;
  v96 = (std::__shared_weak_count *)v86;
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 72))(a1, &v95);
  v89 = v96;
  if (v96)
  {
    v90 = (unint64_t *)&v96->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  *(_QWORD *)(a1[34] + 8) = *(_QWORD *)a1[34];
  v92 = v100;
  if (v100)
  {
    v93 = (unint64_t *)&v100->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_1DE934E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<RateMarker>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE934F80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<RateMarker>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9364F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<RateMarker>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9364F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<RateMarker>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

char *std::vector<RateMarker>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void WaveNetFeature::~WaveNetFeature(WaveNetFeature *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__shared_ptr_emplace<RateChanger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9322E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RateChanger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9322E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<RateChanger>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void NormAction_en_in::~NormAction_en_in(NormAction_en_in *this)
{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D108;
  v2 = (NormAction_en_in *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en_in *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D108;
  v2 = (NormAction_en_in *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en_in *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x1DF0ED014);
}

void NormAction::nexpand()
{
  abort();
}

void NormAction::digits()
{
  abort();
}

void NormAction::splt()
{
  abort();
}

BOOL NormAction_en_in::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  __int128 *v4;

  v2 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  while (strcmp((&NormAction_en_in::consume_next_token(std::string const&)::multipliers)[v2], v3))
  {
    if (++v2 == 4)
    {
      v4 = &xmmword_1EA94AF30;
      return v4 != &xmmword_1EA94AF30;
    }
  }
  v4 = (__int128 *)&(&NormAction_en_in::consume_next_token(std::string const&)::multipliers)[v2];
  return v4 != &xmmword_1EA94AF30;
}

void SoundStormPromptInference::prepare_inputs(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t i;
  std::string *v9;
  std::string::value_type *v10;
  std::string::size_type size;
  int v12;
  std::string *v13;
  std::string::value_type *v14;
  std::string::size_type v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::string v32;
  __int128 v33;
  std::string v34;
  _DWORD v35[2];
  std::string v36;
  _DWORD v37[2];
  uint64_t v38[3];

  v3 = (std::__shared_weak_count *)a2[1];
  v38[0] = *a2;
  v38[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SoundStormInference::prepare_inputs((uint64_t)a1, v38);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (a1[6])
  {
    for (i = 0; i < a1[6]; ++i)
    {
      std::to_string(&v36, i);
      v9 = std::string::insert(&v36, 0, "prompt_k_");
      v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
      size = v9->__r_.__value_.__l.__size_;
      v37[0] = v9->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
      v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      std::to_string(&v36, i);
      v13 = std::string::insert(&v36, 0, "prompt_v_");
      v14 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
      v15 = v13->__r_.__value_.__l.__size_;
      v35[0] = v13->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
      v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      v17 = a1[1];
      if (v12 < 0)
      {
        std::string::__init_copy_ctor_external(&v34, v10, size);
      }
      else
      {
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
        v34.__r_.__value_.__l.__size_ = size;
        LODWORD(v34.__r_.__value_.__r.__words[2]) = v37[0];
        *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v37 + 3);
        *((_BYTE *)&v34.__r_.__value_.__s + 23) = v12;
      }
      v18 = *(_OWORD *)(a1[7] + 16 * i);
      v33 = v18;
      if (*((_QWORD *)&v18 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      (*(void (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v17 + 8))(v17, &v34, &v33);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v24 = a1[1];
      if (v16 < 0)
      {
        std::string::__init_copy_ctor_external(&v32, v14, v15);
      }
      else
      {
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v32.__r_.__value_.__l.__size_ = v15;
        LODWORD(v32.__r_.__value_.__r.__words[2]) = v35[0];
        *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
        *((_BYTE *)&v32.__r_.__value_.__s + 23) = v16;
      }
      v25 = *(_OWORD *)(a1[10] + 16 * i);
      v31 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      (*(void (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v24 + 8))(v24, &v32, &v31);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((v16 & 0x80000000) == 0)
        {
LABEL_41:
          if (v12 < 0)
            goto LABEL_46;
          continue;
        }
      }
      else if ((v16 & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(v14);
      if (v12 < 0)
LABEL_46:
        operator delete(v10);
    }
  }
}

void sub_1DE935570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 104);
  _Unwind_Resume(a1);
}

void sub_1DE9355FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    JUMPOUT(0x1DE9355F0);
  JUMPOUT(0x1DE9355F4);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = *a1;
    if (v5 > 9)
      v6 = "number";
    else
      v6 = off_1EA94C758[v5];
    std::string::basic_string[abi:ne180100]<0>(&v9, v6);
    v7 = std::string::insert(&v9, 0, "cannot use operator[] with a string argument with ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)&v10, exception);
  }
  return std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a1 + 1), a2)+ 56;
}

void sub_1DE9356EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MatchPromptImpl::~MatchPromptImpl(void **this)
{
  *this = &off_1EA91DF40;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  FrontendModule::~FrontendModule(this);
}

{
  *this = &off_1EA91DF40;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t MatchPromptImpl::clear(MatchPromptImpl *this)
{
  uint64_t result;

  *((_BYTE *)this + 104) = 1;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void MatchPromptImpl::generate_tokens(MatchPromptImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  std::string::size_type v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  NSObject *v24;
  std::string *v25;
  const char *v26;
  std::string *p_p;
  const std::string *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::string __p;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::string v41;
  void *v42;
  char v43;
  __int16 v44;
  void *v45;
  _BYTE buf[24];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v32, *((_QWORD *)this + 2), 0);
    if ((_QWORD)v32)
    {
      if ((**((_QWORD **)this + 16)
         || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 18) + 72))(*((_QWORD *)this + 18)))
        && !**((_BYTE **)this + 17))
      {
        v2 = v32;
        if ((_QWORD *)(v2 + 8) == v3)
          v4 = 0;
        else
          v4 = v3[5] + 8;
        if ((_QWORD *)(v2 + 8) == v5)
          v6 = 0;
        else
          v6 = v5[5] + 8;
        if (!*((_BYTE *)this + 152) || *((_BYTE *)this + 153))
          goto LABEL_66;
        *((_BYTE *)this + 153) = 1;
        v7 = *(__int128 **)(*(_QWORD *)(v4 + 48) + 16);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          v41.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v8;
        }
        std::string::basic_string[abi:ne180100]<0>(&v42, &byte_1DEBD87CE);
        v44 = 0;
        v34[0] = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0x7FFFFFFF;
        v39 = 0;
        v40 = 0;
        v38 = 0;
        if ((MatchPromptImpl::match_generated_prompts((uint64_t)this, (uint64_t)&v41, (uint64_t)v34) & 1) != 0
          || (MatchPromptImpl::match_prompts((uint64_t)this, (std::basic_string<char16_t>::size_type)&v41, (uint64_t)v34) & 1) != 0)
        {
          MatchPromptImpl::log_prompt((uint64_t)v34, (uint64_t)&v41);
          do
          {
            while (1)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&__p, *((_QWORD *)this + 2), 0);
              v9 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
                (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
              size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v12 = __ldaxr(v11);
                while (__stlxr(v12 - 1, v11));
                if (!v12)
                  break;
              }
              if (!v9)
                goto LABEL_32;
            }
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
          while (v9);
LABEL_32:
          v13 = operator new(0x30uLL);
          *(_OWORD *)((char *)v13 + 8) = 0u;
          v13[2] = 0u;
          *((_QWORD *)v13 + 3) = v13 + 2;
          *(_QWORD *)v13 = &off_1EA932198;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13 + 24;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
          std::string::operator=((std::string *)(v4 + 24), *(const std::string **)(*(_QWORD *)(v4 + 48) + 16));
          *(_DWORD *)v4 = 1886547312;
          v14 = *(char *)(v4 + 47) < 0 ? *(_QWORD *)(v4 + 32) : *(unsigned __int8 *)(v4 + 47);
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = v14;
          v15 = __p.__r_.__value_.__r.__words[0];
          Agglomerate::set<TokenBasicItem>((uint64_t)__p.__r_.__value_.__l.__data_, (__int128 *)v4);
          *(_QWORD *)buf = &v45;
          v17 = v16[5];
          if (v17)
          {
            *(_BYTE *)(v17 + 8) = 1;
          }
          else
          {
            v18 = operator new();
            *(_QWORD *)v18 = &off_1EA923128;
            *(_BYTE *)(v18 + 8) = 1;
            v19 = v16[5];
            v16[5] = v18;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          Agglomerate::set<TokenPromptItem>(v15, (uint64_t)v34);
          std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, (__int128 *)&__p);
          *((_BYTE *)this + 153) = 0;
          *((_BYTE *)this + 8) = 1;
          v20 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v21 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v23 = 1;
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            Censor::global_plaintext(&__p, (uint64_t)&v41);
            v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v25;
            _os_log_impl(&dword_1DE3F6000, v24, OS_LOG_TYPE_DEBUG, "No prompts for whole input: %s", buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&__p, (uint64_t)&v41);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          Diagnostics::log(7, "No prompts for whole input: %s", v26, p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v23 = 0;
        }
        if (SHIBYTE(v40) < 0)
          operator delete(v38);
        if (v43 < 0)
          operator delete(v42);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if ((v23 & 1) == 0)
        {
LABEL_66:
          if (v6)
            v28 = (const std::string *)(v4 + 24);
          else
            v28 = *(const std::string **)(*(_QWORD *)(v4 + 48) + 16);
          if (!*((_BYTE *)this + 104) || (MatchPromptImpl::match_region((uint64_t)this, 1, v28) & 1) == 0)
            MatchPromptImpl::match_region((uint64_t)this, 0, v28);
        }
      }
      else
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v32);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      }
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
      *((_BYTE *)this + 153) = 0;
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
}

void sub_1DE935D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  std::pair<std::string,std::string>::~pair((uint64_t)&a26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::find<std::type_index>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::type_info::before[abi:ne180100](*(_QWORD *)(v3[4] + 8), v4);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::type_info::before[abi:ne180100](v4, *(_QWORD *)(v5[4] + 8)))
    return v2;
  return v5;
}

uint64_t MatchPromptImpl::match_region(uint64_t a1, int a2, const std::string *a3)
{
  std::string::size_type v4;
  std::string::size_type v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  char *v26;
  __int128 *v27;
  const char *v28;
  const char *v29;
  __int128 *p_p;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  int v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t *v48;
  int v49;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _OWORD *v59;
  uint64_t v60;
  std::string::size_type v61;
  NSObject *v62;
  std::string *v63;
  const char *v64;
  std::string *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  NSObject *v75;
  std::string *v76;
  const char *v77;
  std::string *v78;
  NSObject *v79;
  std::string *v80;
  const char *v81;
  std::string *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  std::string *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  std::string::size_type v107;
  char *v108;
  const std::string::value_type *v109;
  int v110;
  NSObject *v111;
  __int128 *v112;
  const char *v113;
  __int128 *v114;
  char *v115;
  unint64_t *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  const std::string::value_type *v135;
  std::string::size_type v136;
  char v138;
  int v139;
  _QWORD *v142;
  uint64_t v143;
  std::string v144;
  __int128 v145;
  std::string __b;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  char v150[8];
  uint64_t v151;
  uint64_t v152;
  int v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  std::string v157;
  std::string v158;
  __int16 v159;
  std::string v160;
  uint8_t v161[4];
  std::string *v162;
  __int128 v163;
  _BYTE buf[24];
  __int128 v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  __int128 v168;
  uint64_t v169;
  int v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  __int128 __p;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v187 = *MEMORY[0x1E0C80C00];
  memset(&v160, 0, sizeof(v160));
  v8 = -1;
  do
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&__p, *(_QWORD *)(a1 + 16), v7);
    v9 = __p;
    if (!(_QWORD)__p)
    {
      *(_BYTE *)(a1 + 104) = 1;
      v143 = v7;
LABEL_15:
      v17 = 0;
      v5 = v6 - v8;
      v4 = v8;
      goto LABEL_30;
    }
    if ((_QWORD *)(v9 + 8) == v10)
    {
      v12 = 0;
    }
    else
    {
      v11 = v10[5];
      v12 = v11 + 8;
      if (*(_DWORD *)(v11 + 8) != 1835102827)
      {
        v13 = *(_QWORD *)(v11 + 16);
        if (v13 < v8)
          v8 = *(_QWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 24) + v13;
        if (v6 <= v14)
          v6 = v14;
        size = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v160.__r_.__value_.__l.__size_;
        if (!size)
        {
          v16 = *(std::string **)(v11 + 56);
          if (TokenAttributes::is_prompt((TokenAttributes *)v16))
          {
            std::string::operator=(&v160, v16 + 8);
            v9 = __p;
          }
        }
      }
    }
    if ((_QWORD *)(v9 + 8) == v18)
    {
      v19 = v18;
      if (v19 == v20)
        goto LABEL_29;
      v21 = v20[5];
      if (a2)
      {
        v17 = 1;
        if (!*(_BYTE *)(v21 + 9))
          goto LABEL_30;
      }
      else
      {
        if (!*(_BYTE *)(v21 + 8))
        {
LABEL_29:
          v17 = 1;
          goto LABEL_30;
        }
        v17 = *(_BYTE *)(v21 + 9);
      }
      *(_BYTE *)(a1 + 104) = v17;
      v143 = v7 + 1;
      goto LABEL_15;
    }
    v4 = 0;
    v17 = 0;
    if (*(char *)(v12 + 47) < 0)
      v5 = *(_QWORD *)(v12 + 32);
    else
      v5 = *(unsigned __int8 *)(v12 + 47);
    v143 = 1;
LABEL_30:
    v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    ++v7;
  }
  while ((v17 & 1) != 0);
  std::string::basic_string(&v157, a3, v4, v5, (std::allocator<char> *)&__p);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v158, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v158 = v160;
  v159 = 0;
  v150[0] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0x7FFFFFFF;
  v155 = 0;
  v156 = 0;
  v154 = 0;
  if (v5
    && (a2 && (MatchPromptImpl::match_generated_prompts(a1, (uint64_t)&v157, (uint64_t)v150) & 1) != 0
     || (MatchPromptImpl::match_prompts(a1, (std::basic_string<char16_t>::size_type)&v157, (uint64_t)v150) & 1) != 0))
  {
    v139 = 1;
    goto LABEL_64;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext((std::string *)&__p, (uint64_t)&v157);
    v26 = a2 ? "sentence" : "phrase";
    v27 = (SBYTE7(v175) & 0x80u) == 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v26;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v27;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEBUG, "No prompts for %s: %s", buf, 0x16u);
    if (SBYTE7(v175) < 0)
      operator delete((void *)__p);
  }
  Censor::global_plaintext((std::string *)&__p, (uint64_t)&v157);
  if (a2)
    v29 = "sentence";
  else
    v29 = "phrase";
  if ((SBYTE7(v175) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  Diagnostics::log(7, "No prompts for %s: %s", v28, v29, p_p);
  if (SBYTE7(v175) < 0)
    operator delete((void *)__p);
  v139 = 0;
  v31 = 0;
  if ((a2 & 1) == 0)
  {
LABEL_64:
    v151 = v143;
    MEMORY[0x1DF0ECA80](&v158, "🔠");
    if (v143)
    {
      v32 = 0;
      v142 = (_QWORD *)(a1 + 32);
      v138 = v139;
      while (1)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(&v149, *(_QWORD *)(a1 + 16), 0);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
        v33 = v149;
        v35 = (_QWORD *)(v33 + 8);
        if ((_QWORD *)(v33 + 8) == v34)
          v36 = 0;
        else
          v36 = v34[5] + 8;
        if (v139)
        {
          v37 = *(_DWORD *)v36;
          if (*(_DWORD *)v36 != 1718909044)
          {
            if (v37 == 1886809699)
            {
LABEL_76:
              *(_DWORD *)v36 = 1886547312;
              goto LABEL_98;
            }
            if (v37 != 1952807028)
              goto LABEL_98;
          }
          if ((v138 & 1) != 0)
            Agglomerate::set<TokenPromptItem>(v33, (uint64_t)v150);
          v138 = 0;
          goto LABEL_76;
        }
        if (!*(_BYTE *)(a1 + 152))
          goto LABEL_88;
        v38 = *(_QWORD *)(v36 + 48);
        v39 = *(char *)(v38 + 167);
        if (v39 < 0)
        {
          if (*(_QWORD *)(v38 + 152) != 5)
            goto LABEL_88;
          v40 = *(int **)(v38 + 144);
        }
        else
        {
          v40 = (int *)(v38 + 144);
          if (v39 != 5)
            goto LABEL_88;
        }
        v41 = *v40;
        v42 = *((unsigned __int8 *)v40 + 4);
        if (v41 != 1818587251 || v42 != 108)
        {
LABEL_88:
          if (v35 != v44)
          {
            v45 = v44[5];
            v46 = (uint64_t *)(v45 + 8);
            v47 = *(char *)(v45 + 31);
            if ((v47 & 0x80000000) == 0)
            {
              if (v47 != 9)
                goto LABEL_98;
LABEL_94:
              v48 = (uint64_t *)*v46;
              v49 = *((unsigned __int8 *)v46 + 8);
              if (v48 != (uint64_t *)0x554F5F4C4C455053 || v49 != 84)
                goto LABEL_98;
              if (v35 == v100)
                v101 = 0;
              else
                v101 = v100[5] + 8;
              std::string::operator=(&v157, (const std::string *)(v101 + 24));
              if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v157.__r_.__value_.__l.__size_)
                {
                  v103 = (std::string *)v157.__r_.__value_.__r.__words[0];
                  if (*(_BYTE *)(v157.__r_.__value_.__r.__words[0] + v157.__r_.__value_.__l.__size_ - 1) == 95)
                  {
                    v102 = --v157.__r_.__value_.__l.__size_;
LABEL_210:
                    v103->__r_.__value_.__s.__data_[v102] = 0;
                  }
                }
              }
              else if (*((_BYTE *)&v157.__r_.__value_.__s + 23)
                     && *((_BYTE *)&v156 + HIBYTE(v157.__r_.__value_.__r.__words[2]) + 7) == 95)
              {
                v102 = HIBYTE(v157.__r_.__value_.__r.__words[2]) - 1;
                --*((_BYTE *)&v157.__r_.__value_.__s + 23);
                v103 = &v157;
                goto LABEL_210;
              }
              (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(buf, *(_QWORD *)(a1 + 16), 0);
              v104 = *(_QWORD *)buf;
              if (!*(_QWORD *)buf
              {
                v106 = 0;
              }
              else
              {
                v106 = v105[5] + 8;
              }
              if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 72))(*(_QWORD *)(a1 + 144)) & 1) == 0)
              {
                if (v106 && *(_DWORD *)v106 == 1886809699)
                {
                  v107 = *(unsigned __int8 *)(v106 + 47);
                  if (*(char *)(v106 + 47) < 0)
                  {
                    if (!*(_QWORD *)(v106 + 32))
                      goto LABEL_280;
                    v108 = *(char **)(v106 + 24);
                  }
                  else
                  {
                    v108 = (char *)(v106 + 24);
                    if (!*(_BYTE *)(v106 + 47))
                    {
LABEL_280:
                      v109 = ".";
                      goto LABEL_224;
                    }
                  }
                  if (memchr(".,", *v108, 3uLL))
                  {
                    if ((v107 & 0x80u) == 0)
                      v135 = (const std::string::value_type *)(v106 + 24);
                    else
                      v135 = *(const std::string::value_type **)(v106 + 24);
                    if ((v107 & 0x80u) == 0)
                      v136 = v107;
                    else
                      v136 = *(_QWORD *)(v106 + 32);
                    std::string::append(&v157, v135, v136);
                    v110 = 1;
                    goto LABEL_226;
                  }
                  v109 = ",";
                }
                else if (*(_QWORD *)buf)
                {
                  v109 = ",";
                }
                else
                {
                  v109 = ".";
                }
LABEL_224:
                std::string::append(&v157, v109);
              }
              v110 = 0;
LABEL_226:
              if ((MatchPromptImpl::match_generated_prompts(a1, (uint64_t)&v157, (uint64_t)v150) & 1) != 0
                || MatchPromptImpl::match_prompts(a1, (std::basic_string<char16_t>::size_type)&v157, (uint64_t)v150))
              {
                MatchPromptImpl::log_prompt((uint64_t)v150, (uint64_t)&v157);
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v111 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
                {
                  Censor::global_plaintext((std::string *)&__p, (uint64_t)&v157);
                  v112 = &__p;
                  if (SBYTE7(v175) < 0)
                    v112 = (__int128 *)__p;
                  LODWORD(v168) = 136315138;
                  *(_QWORD *)((char *)&v168 + 4) = v112;
                  _os_log_impl(&dword_1DE3F6000, v111, OS_LOG_TYPE_DEFAULT, "Spelling: [%s]", (uint8_t *)&v168, 0xCu);
                  if (SBYTE7(v175) < 0)
                    operator delete((void *)__p);
                }
                Censor::global_plaintext((std::string *)&__p, (uint64_t)&v157);
                v114 = &__p;
                if (SBYTE7(v175) < 0)
                  v114 = (__int128 *)__p;
                Diagnostics::log(5, "Spelling: [%s]", v113, v114);
                if (SBYTE7(v175) < 0)
                  operator delete((void *)__p);
                Agglomerate::set<TokenPromptItem>(v149, (uint64_t)v150);
                *(_DWORD *)v101 = 1886547312;
                if (v110)
                  *(_DWORD *)v106 = 1886547312;
              }
              if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 72))(*(_QWORD *)(a1 + 144)))
              {
                v115 = (char *)operator new(0x30uLL);
                *(_OWORD *)(v115 + 8) = 0u;
                v116 = (unint64_t *)(v115 + 8);
                *((_OWORD *)v115 + 2) = 0u;
                *(_QWORD *)v115 = &off_1EA932198;
                *((_QWORD *)v115 + 3) = v115 + 32;
                *(_QWORD *)&v168 = v115 + 24;
                *((_QWORD *)&v168 + 1) = v115;
                v117 = (std::__shared_weak_count *)operator new(0x30uLL);
                v118 = v117;
                *(_OWORD *)&v117->__shared_owners_ = 0u;
                p_shared_owners = (unint64_t *)&v117->__shared_owners_;
                v117->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
                *(_OWORD *)&v117[1].__shared_owners_ = 0u;
                v117[1].__vftable = (std::__shared_weak_count_vtbl *)&v117[1].__shared_owners_;
                __b.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117[1];
                __b.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
                *((_QWORD *)&__p + 1) = v115 + 24;
                *(_QWORD *)&v175 = v115;
                do
                  v120 = __ldxr(v116);
                while (__stxr(v120 + 1, v116));
                *((_QWORD *)&v175 + 1) = v117 + 1;
                *(_QWORD *)&v176 = v117;
                do
                  v121 = __ldxr(p_shared_owners);
                while (__stxr(v121 + 1, p_shared_owners));
                LOWORD(__p) = 257;
                Agglomerate::set<TokenPhrasingItem>(v149, (__int16 *)&__p);
                do
                  v122 = __ldaxr(p_shared_owners);
                while (__stlxr(v122 - 1, p_shared_owners));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
                v123 = (std::__shared_weak_count *)v175;
                if ((_QWORD)v175)
                {
                  v124 = (unint64_t *)(v175 + 8);
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                v126 = (std::__shared_weak_count *)__b.__r_.__value_.__l.__size_;
                if (__b.__r_.__value_.__l.__size_)
                {
                  v127 = (unint64_t *)(__b.__r_.__value_.__l.__size_ + 8);
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                v129 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
                if (*((_QWORD *)&v168 + 1))
                {
                  v130 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
              }
              v132 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v133 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 - 1, v133));
                if (!v134)
                {
                  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                  std::__shared_weak_count::__release_weak(v132);
                }
              }
              goto LABEL_98;
            }
            if (*(_QWORD *)(v45 + 16) == 9)
            {
              v46 = (uint64_t *)*v46;
              goto LABEL_94;
            }
          }
LABEL_98:
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v142, &v149);
          goto LABEL_99;
        }
        MEMORY[0x1DF0ECA80]();
        v54 = operator new();
        *(_OWORD *)(v54 + 8) = xmmword_1DED16B50;
        *(_DWORD *)(v54 + 24) = 0;
        *(_QWORD *)v54 = off_1EA931E38;
        v175 = 0u;
        v176 = 0u;
        __p = 0u;
        v177 = v54;
        v178 = 0u;
        v179 = 0u;
        v180 = 0u;
        v181 = 0u;
        v182 = 0u;
        v183 = 0u;
        v184 = 0u;
        v185 = 0u;
        v186 = 0;
        v55 = *(_QWORD *)(v36 + 24);
        v56 = *(char *)(v36 + 47);
        if (v56 >= 0)
          v55 = v36 + 24;
        v57 = *(_QWORD *)(v36 + 32);
        if (v56 >= 0)
          v57 = *(unsigned __int8 *)(v36 + 47);
        v147 = v55;
        v148 = v57 << 32;
        if ((_DWORD)v57)
          break;
LABEL_199:
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&__p);
LABEL_99:
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
        if (*((_QWORD *)&v149 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (++v32 == v143)
          goto LABEL_282;
      }
      v58 = 0;
      while (2)
      {
        *(_DWORD *)buf = UTFString::codepoint_iterator<std::string>::operator*(&v147);
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(&__b, (uint64_t)&__p, buf, &buf[4]);
        LOBYTE(v168) = 0;
        *((_QWORD *)&v168 + 1) = 0;
        v169 = 0;
        v170 = 0x7FFFFFFF;
        v172 = 0;
        v173 = 0;
        v171 = 0;
        std::string::operator=(&v157, &__b);
        if (MatchPromptImpl::match_generated_prompts(a1, (uint64_t)&v157, (uint64_t)&v168))
        {
          v59 = operator new(0x30uLL);
          *(_OWORD *)((char *)v59 + 8) = 0u;
          *(_QWORD *)v59 = &off_1EA932198;
          v59[2] = 0u;
          *((_QWORD *)v59 + 3) = v59 + 2;
          v60 = (uint64_t)v59 + 24;
          *(_QWORD *)&v145 = (char *)v59 + 24;
          *((_QWORD *)&v145 + 1) = v59;
          v167 = 0;
          v165 = 0u;
          v166 = 0u;
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v166 + 1, *(_QWORD *)(v36 + 48), *(_QWORD *)(v36 + 56));
          std::string::operator=((std::string *)&v165, &__b);
          *(_DWORD *)buf = 1886547312;
          v61 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v61 = __b.__r_.__value_.__l.__size_;
          *(_QWORD *)&buf[16] = v61;
          *(_QWORD *)&buf[8] = *(_QWORD *)(v36 + 8) + v58;
          Agglomerate::set<TokenBasicItem>(v60, (__int128 *)buf);
          Agglomerate::set<TokenPromptItem>(v60, (uint64_t)&v168);
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v142, &v145);
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v62 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            Censor::global_plaintext(&v144, (uint64_t)&__b);
            v63 = &v144;
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v63 = (std::string *)v144.__r_.__value_.__r.__words[0];
            LODWORD(v163) = 136315138;
            *(_QWORD *)((char *)&v163 + 4) = v63;
            _os_log_impl(&dword_1DE3F6000, v62, OS_LOG_TYPE_DEFAULT, "Spelling: [%s]", (uint8_t *)&v163, 0xCu);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v144, (uint64_t)&__b);
          v65 = &v144;
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v65 = (std::string *)v144.__r_.__value_.__r.__words[0];
          Diagnostics::log(5, "Spelling: [%s]", v64, v65);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          v66 = v167;
          if (v167)
          {
            v67 = (unint64_t *)&v167->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          if (SBYTE7(v166) < 0)
            operator delete((void *)v165);
          v69 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
          if (*((_QWORD *)&v145 + 1))
          {
            v70 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
LABEL_182:
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          goto LABEL_184;
        }
        v72 = operator new(0x30uLL);
        *(_OWORD *)((char *)v72 + 8) = 0u;
        *(_QWORD *)v72 = &off_1EA932198;
        v72[2] = 0u;
        *((_QWORD *)v72 + 3) = v72 + 2;
        *(_QWORD *)&v145 = (char *)v72 + 24;
        *((_QWORD *)&v145 + 1) = v72;
        v167 = 0;
        v165 = 0u;
        v166 = 0u;
        if (*(_BYTE *)(a1 + 154))
        {
          std::allocate_shared[abi:ne180100]<TokenAttributes,std::allocator<TokenAttributes>,TokenAttributes&,void>(&v163, *(_QWORD *)(v36 + 48));
          v73 = v163;
          MEMORY[0x1DF0ECA80](v163 + 144, "spell");
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v166 + 1, v73, *((uint64_t *)&v163 + 1));
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            Censor::global_plaintext(&v144, (uint64_t)&__b);
            v76 = &v144;
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v76 = (std::string *)v144.__r_.__value_.__r.__words[0];
            *(_DWORD *)v161 = 136315138;
            v162 = v76;
            _os_log_impl(&dword_1DE3F6000, v75, OS_LOG_TYPE_DEFAULT, "Not Spelling: [%s], and enable spell domain rules", v161, 0xCu);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v144, (uint64_t)&__b);
          v78 = &v144;
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v78 = (std::string *)v144.__r_.__value_.__r.__words[0];
          Diagnostics::log(5, "Not Spelling: [%s], and enable spell domain rules", v77, v78);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v144.__r_.__value_.__l.__data_);
            if (!v74)
              goto LABEL_166;
          }
          else if (!v74)
          {
            goto LABEL_166;
          }
          v83 = (unint64_t *)&v74->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        else
        {
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v166 + 1, *(_QWORD *)(v36 + 48), *(_QWORD *)(v36 + 56));
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            Censor::global_plaintext(&v144, (uint64_t)&__b);
            v80 = &v144;
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v80 = (std::string *)v144.__r_.__value_.__r.__words[0];
            LODWORD(v163) = 136315138;
            *(_QWORD *)((char *)&v163 + 4) = v80;
            _os_log_impl(&dword_1DE3F6000, v79, OS_LOG_TYPE_DEFAULT, "Not Spelling: [%s]", (uint8_t *)&v163, 0xCu);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v144, (uint64_t)&__b);
          v82 = &v144;
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v82 = (std::string *)v144.__r_.__value_.__r.__words[0];
          Diagnostics::log(5, "Not Spelling: [%s]", v81, v82);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
        }
LABEL_166:
        std::string::operator=((std::string *)&v165, &__b);
        *(_DWORD *)buf = 1952807028;
        v85 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v85 = __b.__r_.__value_.__l.__size_;
        *(_QWORD *)&buf[16] = v85;
        *(_QWORD *)&buf[8] = *(_QWORD *)(v36 + 8) + (int)v148;
        v86 = v145;
        Agglomerate::set<TokenBasicItem>(v145, (__int128 *)buf);
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
        v88 = v87[5];
        if (v88)
        {
          *(_BYTE *)(v88 + 8) = 1;
        }
        else
        {
          v89 = operator new();
          *(_QWORD *)v89 = &off_1EA923128;
          *(_BYTE *)(v89 + 8) = 1;
          v90 = v87[5];
          v87[5] = v89;
          if (v90)
            (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
        }
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v142, &v145);
        v91 = v167;
        if (v167)
        {
          v92 = (unint64_t *)&v167->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (SBYTE7(v166) < 0)
          operator delete((void *)v165);
        v69 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        if (*((_QWORD *)&v145 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v71 = __ldaxr(v94);
          while (__stlxr(v71 - 1, v94));
          goto LABEL_182;
        }
LABEL_184:
        if (SHIBYTE(v173) < 0)
          operator delete(v171);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
        v95 = *(unsigned __int8 *)(v147 + (int)v148);
        v96 = (v95 + 62);
        if (v95 <= 0xEF)
          v97 = 2;
        else
          v97 = 3;
        if (v95 <= 0xDF)
          v98 = v97;
        else
          v98 = v97 + 1;
        if (v96 >= 0x33)
          v98 = 1;
        v58 = v98 + v148;
        LODWORD(v148) = v98 + v148;
        v99 = *(unsigned __int8 *)(v36 + 47);
        if ((v99 & 0x80u) != 0)
          v99 = *(_DWORD *)(v36 + 32);
        if (v58 == v99)
          goto LABEL_199;
        continue;
      }
    }
LABEL_282:
    if ((v139 & 1) != 0)
      MatchPromptImpl::log_prompt((uint64_t)v150, (uint64_t)&v157);
    v31 = 1;
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v154);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  return v31;
}

void sub_1DE937160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a47 < 0)
    operator delete(__p);
  std::pair<std::string,std::string>::~pair((uint64_t)&a48);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<Agglomerate>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<Agglomerate>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<Agglomerate>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *i;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      a1[2] += 8;
      return;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v28 = 1;
      else
        v28 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v28);
      v30 = &v29[8 * (v28 >> 2)];
      v32 = &v29[8 * v31];
      v33 = (uint64_t *)a1[1];
      v6 = v30;
      v34 = a1[2] - (_QWORD)v33;
      if (v34)
      {
        v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        v35 = 8 * (v34 >> 3);
        v36 = &v29[8 * (v28 >> 2)];
        do
        {
          v37 = *v33++;
          *(_QWORD *)v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  v19 = a1[2];
  v20 = (v19 - a1[1]) >> 3;
  v21 = a1[3];
  v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(_QWORD *)&v49 = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v49);
      return;
    }
    *(_QWORD *)&v49 = operator new(0x1000uLL);
    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v49);
    v39 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v40 = *v39;
    v7 = (char *)(v39 + 1);
    v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_31;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v41 = 1;
      else
        v41 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v41);
      v30 = &v29[8 * (v41 >> 2)];
      v32 = &v29[8 * v42];
      v43 = (uint64_t *)a1[1];
      v6 = v30;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v29[8 * (v41 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1)
    v23 = 1;
  else
    v23 = v22 >> 2;
  v51 = a1 + 3;
  *(_QWORD *)&v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v23);
  *((_QWORD *)&v49 + 1) = v49 + 8 * v20;
  *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v50 + 1) = v49 + 8 * v24;
  v48 = operator new(0x1000uLL);
  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v49, &v48);
  for (i = (_QWORD *)a1[2];
        i != (_QWORD *)a1[1];
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  v26 = (char *)*a1;
  v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26)
    operator delete(v26);
}

void sub_1DE937600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t MatchPromptImpl::match_generated_prompts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 72))(*(_QWORD *)(a1 + 144));
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = (_QWORD *)(a2 + 24);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a2 + 24);
    if (v9 == -1)
      return 0;
    v10 = v9;
    MEMORY[0x1DF0ECA80](a3 + 32, "GPROMPT");
    *(_DWORD *)(a3 + 24) = v10;
    v11 = *(char *)(a2 + 47);
    if (v11 < 0)
    {
      if (*(_QWORD *)(a2 + 32) != 4)
      {
LABEL_10:
        v12 = 0;
        goto LABEL_11;
      }
      v8 = (_QWORD *)*v8;
    }
    else if (v11 != 4)
    {
      goto LABEL_10;
    }
    v12 = *(_DWORD *)v8 == -1600872464;
LABEL_11:
    *(_BYTE *)a3 = v12;
    return 1;
  }
  return result;
}

uint64_t MatchPromptImpl::match_prompts(uint64_t a1, std::basic_string<char16_t>::size_type a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  std::basic_string<char16_t>::size_type v15;
  const char *v16;
  __int128 v17;
  int v18;
  const char *v19;
  unint64_t v20;
  std::basic_string<char16_t> *p_pErrorCode;
  int32_t v22;
  std::string::size_type v23;
  std::string::size_type size;
  std::string::size_type v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int *v31;
  std::string *v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  size_t v56;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  NSObject *v61;
  const char *v62;
  int v63;
  unsigned int v64;
  int v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  std::string v69;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> pErrorCode;
  __int16 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 128);
  if (!*v3)
    return 0;
  v5 = *(char *)(a2 + 23);
  v6 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  if (v6 > 2 * v3[15])
    return 0;
  v11 = *(_QWORD *)(a1 + 112);
  if (v5 >= 0)
    v12 = (const char *)a2;
  else
    v12 = *(const char **)a2;
  LODWORD(pErrorCode.__r_.__value_.__l.__data_) = 0;
  u_strFromUTF8(0, 0, 0, v12, v6, (UErrorCode *)&pErrorCode);
  if (LODWORD(pErrorCode.__r_.__value_.__l.__data_) == 10)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      LODWORD(pErrorCode.__r_.__value_.__l.__data_) = 136315138;
      *(std::basic_string<char16_t>::size_type *)((char *)pErrorCode.__r_.__value_.__r.__words + 4) = v15;
      _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_ERROR, "Found Invalid UTF8 Input: %s", (uint8_t *)&pErrorCode, 0xCu);
    }
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const char *)a2;
    else
      v16 = *(const char **)a2;
    Diagnostics::log(3, "Found Invalid UTF8 Input: %s", v14, v16);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v17 = *(_OWORD *)a2;
      v69 = *(std::string *)a2;
    }
  }
  else
  {
    v18 = *(char *)(a2 + 23);
    if (v18 >= 0)
      v19 = (const char *)a2;
    else
      v19 = *(const char **)a2;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    UTFString::to_utf16(&__p, v19, v20);
    UTFTransliterator::transliterate(&pErrorCode, v11, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((pErrorCode.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_pErrorCode = &pErrorCode;
    else
      p_pErrorCode = (std::basic_string<char16_t> *)pErrorCode.__r_.__value_.__r.__words[0];
    if ((pErrorCode.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(pErrorCode.__r_.__value_.__r.__words[2]);
    else
      v22 = pErrorCode.__r_.__value_.__r.__words[1];
    UTFString::to_utf8(&v69, (const UChar *)p_pErrorCode, v22);
    if (SHIBYTE(pErrorCode.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pErrorCode.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  size = v69.__r_.__value_.__l.__size_;
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v25 = v69.__r_.__value_.__l.__size_;
  if (!v25)
  {
LABEL_110:
    v7 = 0;
    if ((v23 & 0x80) != 0)
      goto LABEL_111;
    return v7;
  }
  v26 = (char *)&v68 + 15;
  *(_QWORD *)&v17 = 136315906;
  v68 = v17;
  while (2)
  {
    v27 = *(_QWORD **)(a1 + 128);
    if ((v23 & 0x80u) == 0)
      size = v23;
    v28 = v27[6];
    v29 = (v27[7] - v28) >> 3;
    if (v29 >= size)
      v29 = size;
    if (v29)
    {
      v30 = 0;
      v31 = (int *)v27[12];
      v32 = &v69;
      if ((v23 & 0x80u) != 0)
        v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
      v33 = v29;
      do
      {
        v35 = v32->__r_.__value_.__s.__data_[0];
        v32 = (std::string *)((char *)v32 + 1);
        v34 = v35;
        v36 = *v31++;
        v30 += v36 * v34;
        --v33;
      }
      while (v33);
    }
    else
    {
      v30 = 0;
    }
    v37 = v29 - 1;
    v38 = (_QWORD *)(v27[9] + 40 * (v29 - 1));
    v39 = v38[1];
    if (!v39)
      goto LABEL_74;
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      v41 = v30;
      if (v39 <= v30)
        v41 = v30 % v39;
    }
    else
    {
      v41 = ((_DWORD)v39 - 1) & v30;
    }
    v42 = *(uint64_t ***)(*v38 + 8 * v41);
    if (!v42)
      goto LABEL_74;
    v43 = *v42;
    if (!*v42)
      goto LABEL_74;
    v44 = *(_QWORD *)(v28 + 8 * v37) + 4;
    while (1)
    {
      v45 = v43[1];
      if (v45 == v30)
        break;
      if (v40.u32[0] > 1uLL)
      {
        if (v45 >= v39)
          v45 %= v39;
      }
      else
      {
        v45 &= v39 - 1;
      }
      if (v45 != v41)
        goto LABEL_74;
LABEL_73:
      v43 = (uint64_t *)*v43;
      if (!v43)
        goto LABEL_74;
    }
    if (*((_DWORD *)v43 + 4) != v30)
      goto LABEL_73;
    v49 = v43;
    do
      v49 = (uint64_t *)*v49;
    while (v49 && *((_DWORD *)v49 + 4) == v30);
    if (v43 != v49)
    {
      v66 = v26;
      v67 = a3;
      while (1)
      {
        v50 = *((_DWORD *)v43 + 5);
        v51 = v44 + 48 * v50;
        v52 = *(unsigned int *)(v51 + 40);
        v53 = (*(_DWORD *)(v51 + 44) - v52);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        else
          v54 = v69.__r_.__value_.__l.__size_;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v69;
        else
          v55 = (std::string *)v69.__r_.__value_.__r.__words[0];
        if (v54 >= v53)
          v56 = (*(_DWORD *)(v51 + 44) - v52);
        else
          v56 = v54;
        if (!memcmp(v55, (const void *)(v27[2] + *(_QWORD *)(v27[4] + 24) + v52), v56) && v54 == v53)
        {
          v58 = v44 + 48 * v50;
          v60 = *(_DWORD *)(v58 + 36);
          v59 = (unsigned int *)(v58 + 36);
          if (v60 <= *(_DWORD *)(v27[5] + 4))
          {
            MEMORY[0x1DF0ECA80](v67 + 32, v44 + 48 * v50);
            *(_QWORD *)(v67 + 16) = *(_QWORD *)(v44 + 48 * v50 + 32);
            v7 = 1;
            if ((*((_BYTE *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
            {
LABEL_111:
              v47 = (std::string *)v69.__r_.__value_.__r.__words[0];
              goto LABEL_115;
            }
            return v7;
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            v63 = *(_DWORD *)(v44 + 48 * v50 + 32);
            v64 = *v59;
            v65 = *(_DWORD *)(v27[5] + 4);
            LODWORD(pErrorCode.__r_.__value_.__l.__data_) = v68;
            *(std::basic_string<char16_t>::size_type *)((char *)pErrorCode.__r_.__value_.__r.__words + 4) = v44 + 48 * v50;
            pErrorCode.__r_.__value_.__s.__data_[6] = 1024;
            *(_DWORD *)((char *)&pErrorCode.__r_.__value_.__r.__words[1] + 6) = v63;
            pErrorCode.__r_.__value_.__s.__data_[9] = 1024;
            HIDWORD(pErrorCode.__r_.__value_.__r.__words[2]) = v64;
            v72 = 1024;
            v73 = v65;
            _os_log_impl(&dword_1DE3F6000, v61, OS_LOG_TYPE_ERROR, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", (uint8_t *)&pErrorCode, 0x1Eu);
          }
          Diagnostics::log(3, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", v62, v44 + 48 * v50, *(unsigned int *)(v44 + 48 * v50 + 32), *v59, *(unsigned int *)(v27[5] + 4));
        }
        v43 = (uint64_t *)*v43;
        if (v43 == v49)
        {
          v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          v26 = v66;
          a3 = v67;
          break;
        }
      }
    }
LABEL_74:
    if ((v23 & 0x80) == 0)
    {
      if (v26[v23] == 46)
      {
        v46 = v23 - 1;
        *((_BYTE *)&v69.__r_.__value_.__s + 23) = v46 & 0x7F;
        v47 = &v69;
        goto LABEL_79;
      }
      return 0;
    }
    v47 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v69.__r_.__value_.__r.__words[0] + v69.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v46 = --v69.__r_.__value_.__l.__size_;
LABEL_79:
      v47->__r_.__value_.__s.__data_[v46] = 0;
      v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      size = v69.__r_.__value_.__l.__size_;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        v48 = v69.__r_.__value_.__l.__size_;
      if (!v48)
        goto LABEL_110;
      continue;
    }
    break;
  }
  v7 = 0;
LABEL_115:
  operator delete(v47);
  return v7;
}

void sub_1DE937ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Agglomerate::set<TokenPromptItem>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  void **v13;
  _OWORD v14[2];
  std::string v15;
  void *v16;

  v13 = &v16;
  v4 = v3[5];
  v5 = (_OWORD *)(a2 + 32);
  if (v4)
  {
    v13 = (void **)off_1EA922E88;
    v14[0] = *(_OWORD *)a2;
    *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)(a2 + 12);
    if (*(char *)(a2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *v5;
      v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    }
    v9 = v14[0];
    *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v14 + 12);
    *(_OWORD *)(v4 + 8) = v9;
    v10 = (void **)(v4 + 40);
    if (*(char *)(v4 + 63) < 0)
      operator delete(*v10);
    v11 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *(_QWORD *)(v4 + 56) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v11;
  }
  else
  {
    v6 = v3;
    v7 = operator new();
    *(_QWORD *)v7 = off_1EA922E88;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 20) = *(_OWORD *)(a2 + 12);
    v8 = (std::string *)(v7 + 40);
    if (*(char *)(a2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *v5;
      *(_QWORD *)(v7 + 56) = *(_QWORD *)(a2 + 48);
    }
    v12 = v6[5];
    v6[5] = v7;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_1DE938084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C40161C777DLL);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t UTFString::codepoint_iterator<std::string>::operator*(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *((int *)a1 + 2);
  v3 = *a1;
  v4 = *(char *)(*a1 + v2);
  result = *(unsigned __int8 *)(*a1 + v2);
  if (v4 < 0)
  {
    v6 = v2 + 1;
    v7 = *((_DWORD *)a1 + 3);
    if ((_DWORD)v2 + 1 != v7)
    {
      if (result < 0xE0)
      {
        if (result >= 0xC2)
        {
          v10 = result & 0x1F;
LABEL_11:
          v11 = *(unsigned __int8 *)(v3 + (int)v6) ^ 0x80;
          v12 = v11 | (v10 << 6);
          if (v11 <= 0x3F)
            return v12;
          else
            return 0xFFFFFFFFLL;
        }
      }
      else
      {
        if (result > 0xEF)
        {
          if ((result - 240) > 4)
            return 0xFFFFFFFFLL;
          v6 = *(unsigned __int8 *)(v3 + v6);
          if (((byte_1DED166DF[v6 >> 4] >> (result + 16)) & 1) == 0)
            return 0xFFFFFFFFLL;
          v13 = v2 + 2;
          if ((_DWORD)v2 + 2 == v7)
            return 0xFFFFFFFFLL;
          v9 = *(unsigned __int8 *)(v3 + v13) ^ 0x80;
          if (v9 > 0x3F)
            return 0xFFFFFFFFLL;
          LODWORD(v8) = v6 & 0x3F | (((_DWORD)result - 240) << 6);
          LODWORD(v6) = v13;
        }
        else
        {
          v8 = v4 & 0xF;
          if (((a00000000000000[v8] >> (*(_BYTE *)(v3 + v6) >> 5)) & 1) == 0)
            return 0xFFFFFFFFLL;
          v9 = *(_BYTE *)(v3 + v6) & 0x3F;
        }
        LODWORD(v6) = v6 + 1;
        if ((_DWORD)v6 != v7)
        {
          v10 = v9 | ((_DWORD)v8 << 6);
          goto LABEL_11;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(std::string *__b, uint64_t a2, char *a3, char *a4)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  std::string *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string *v40;
  int64_t v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 184) = 0;
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_62;
  v7 = a3;
  std::string::basic_string[abi:ne180100](__b, (a4 - a3) >> 1, 0);
  if (a4 == v7)
  {
    v23 = *(_OWORD *)(a2 + 136);
    v52 = *(_OWORD *)(a2 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a2 + 168);
    v54 = *(_OWORD *)(a2 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a2 + 72);
    v48 = *(_OWORD *)(a2 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a2 + 104);
    v50 = *(_OWORD *)(a2 + 88);
    v51 = v26;
  }
  else
  {
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(__b, v8, 0);
    v9 = *(_OWORD *)(a2 + 136);
    v52 = *(_OWORD *)(a2 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a2 + 168);
    v54 = *(_OWORD *)(a2 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a2 + 72);
    v48 = *(_OWORD *)(a2 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 104);
    size = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = __b;
    else
      v15 = (std::string *)__b->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __b->__r_.__value_.__l.__size_;
    v16 = (char *)v15 + size;
    v50 = *(_OWORD *)(a2 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, std::string *, char *, uint64_t *, __n128))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), &v48, v7, a4, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a2 + 184) += (v47 - v7) >> 2;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = __b;
      else
        v19 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(__b, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = __b;
      else
        v22 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v15 = (std::string *)((char *)v22 + v20);
      if ((v21 & 0x80u) != 0)
        v21 = __b->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a4)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = __b;
      else
        v27 = (std::string *)__b->__r_.__value_.__r.__words[0];
      std::string::resize(__b, (char *)v15 - (char *)v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(__b, v7, a4);
    }
    else
    {
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = __b;
      else
        v28 = (std::string *)__b->__r_.__value_.__r.__words[0];
      std::string::resize(__b, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  v30 = __b->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(__b, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = __b;
  else
    v35 = (std::string *)__b->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = __b->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)v43 + v42)
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = __b;
    else
      v40 = (std::string *)__b->__r_.__value_.__r.__words[0];
    v41 = v47 - (char *)v40;
    std::string::resize(__b, 2 * (v47 - (char *)v40), 0);
    v42 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = __b;
    else
      v43 = (std::string *)__b->__r_.__value_.__r.__words[0];
    v36 = (char *)v43 + v41;
    if ((v42 & 0x80u) != 0)
      v42 = __b->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = __b;
    else
      v45 = (std::string *)__b->__r_.__value_.__r.__words[0];
    std::string::resize(__b, v36 - (char *)v45, 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
    {
      *(_OWORD *)&__b->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      __b->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a2 + 8);
  if (!v44)
    goto LABEL_73;
  std::string::__init_copy_ctor_external(__b, *(const std::string::value_type **)a2, v44);
}

void sub_1DE938588(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Agglomerate::set<TokenBasicItem>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  void *v20;

  v14 = &v20;
  v4 = v3[5];
  if (v4)
  {
    Agglomerate::ItemHolder<TokenBasicItem>::ItemHolder((uint64_t)&v14, a2);
    v5 = v15;
    *(_QWORD *)(v4 + 24) = v16;
    *(_OWORD *)(v4 + 8) = v5;
    v6 = (void **)(v4 + 32);
    if (*(char *)(v4 + 55) < 0)
      operator delete(*v6);
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 48) = v18;
    *(_OWORD *)v6 = v7;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 56, &v19);
    v14 = (void **)off_1EA922D68;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = v3;
    v12 = operator new();
    Agglomerate::ItemHolder<TokenBasicItem>::ItemHolder(v12, a2);
    v13 = v11[5];
    v11[5] = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void sub_1DE938708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C405E6B009ALL);
  _Unwind_Resume(a1);
}

void TokenBasicItem::~TokenBasicItem(void **this)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

void std::allocate_shared[abi:ne180100]<TokenAttributes,std::allocator<TokenAttributes>,TokenAttributes&,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  char *v18;

  v4 = (char *)operator new(0x158uLL);
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA933158;
  v6 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v4 + 3) = *(_QWORD *)a2;
  v18 = v4 + 24;
  *((_QWORD *)v4 + 4) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v4 + 6) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 64), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v4 + 10) = *(_QWORD *)(a2 + 56);
  }
  *((_DWORD *)v5 + 22) = *(_DWORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 4, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    *((_OWORD *)v5 + 6) = *(_OWORD *)(a2 + 72);
    *((_QWORD *)v5 + 14) = *(_QWORD *)(a2 + 88);
  }
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 5, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 96);
    *((_QWORD *)v5 + 17) = *(_QWORD *)(a2 + 112);
  }
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 6, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    *((_OWORD *)v5 + 9) = *(_OWORD *)(a2 + 120);
    *((_QWORD *)v5 + 20) = *(_QWORD *)(a2 + 136);
  }
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 7, *(const std::string::value_type **)(a2 + 144), *(_QWORD *)(a2 + 152));
  }
  else
  {
    *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 144);
    *((_QWORD *)v5 + 23) = *(_QWORD *)(a2 + 160);
  }
  if (*(char *)(a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 8, *(const std::string::value_type **)(a2 + 168), *(_QWORD *)(a2 + 176));
  }
  else
  {
    *((_OWORD *)v5 + 12) = *(_OWORD *)(a2 + 168);
    *((_QWORD *)v5 + 26) = *(_QWORD *)(a2 + 184);
  }
  if (*(char *)(a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 9, *(const std::string::value_type **)(a2 + 192), *(_QWORD *)(a2 + 200));
  }
  else
  {
    *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 192);
    *((_QWORD *)v5 + 29) = *(_QWORD *)(a2 + 208);
  }
  v12 = *(_OWORD *)(a2 + 232);
  *((_OWORD *)v5 + 15) = *(_OWORD *)(a2 + 216);
  *((_OWORD *)v5 + 16) = v12;
  if (*(char *)(a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 272), *(const std::string::value_type **)(a2 + 248), *(_QWORD *)(a2 + 256));
  }
  else
  {
    *((_OWORD *)v5 + 17) = *(_OWORD *)(a2 + 248);
    *((_QWORD *)v5 + 36) = *(_QWORD *)(a2 + 264);
  }
  v13 = *(_QWORD *)(a2 + 280);
  *((_QWORD *)v5 + 37) = *(_QWORD *)(a2 + 272);
  *((_QWORD *)v5 + 38) = v13;
  v14 = *(_QWORD *)(a2 + 288);
  *((_QWORD *)v5 + 39) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::string *)(v5 + 320);
  if (*(char *)(a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a2 + 296), *(_QWORD *)(a2 + 304));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 296);
    *((_QWORD *)v5 + 42) = *(_QWORD *)(a2 + 312);
  }
  *a1 = v18;
  a1[1] = v5;
}

void sub_1DE938A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v21;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v13);
  if (*(char *)(v12 + 295) < 0)
    operator delete(*v17);
  if (*(char *)(v12 + 239) < 0)
    operator delete(*v16);
  if (*(char *)(v12 + 215) < 0)
    operator delete(*v15);
  if (*(char *)(v12 + 191) < 0)
    operator delete(*v19);
  if (*(char *)(v12 + 167) < 0)
    operator delete(*v18);
  if (*(char *)(v12 + 143) < 0)
    operator delete(*a10);
  if (*(char *)(v12 + 119) < 0)
    operator delete(*a11);
  if (*(char *)(v12 + 87) < 0)
    operator delete(*a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v12);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void MatchPromptImpl::log_prompt(uint64_t a1, uint64_t a2)
{
  std::string *p_p;
  std::string::size_type size;
  NSObject *v6;
  int v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *v10;
  int v11;
  int v12;
  int v13;
  std::string::size_type v14;
  const char *v15;
  std::string *v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string __p;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  memset(&v19, 0, sizeof(v19));
  if (*(_DWORD *)(a1 + 24) == 0x7FFFFFFF)
  {
    std::string::operator=(&v19, (const std::string *)(a1 + 32));
  }
  else
  {
    StringFormatter::StringFormatter((StringFormatter *)&__p, "#%04d", *(_DWORD *)(a1 + 24));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    MEMORY[0x1DF0ECA8C](&v19, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    v8 = v19.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&v18, a2);
    v9 = &v19;
    if (v7 < 0)
      v9 = (std::string *)v8;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v18;
    else
      v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    v11 = *(_DWORD *)(a1 + 16);
    v12 = *(_DWORD *)(a1 + 20);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_INFO, "Prompt   : \"%s\" Text: %s Unit range: [%u, %u)", (uint8_t *)&__p, 0x22u);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  v13 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  v14 = v19.__r_.__value_.__r.__words[0];
  Censor::global_plaintext(&__p, a2);
  v16 = &v19;
  if (v13 < 0)
    v16 = (std::string *)v14;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Prompt   : \"%s\" Text: %s Unit range: [%u, %u)", v15, v16, v17, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1DE938D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Agglomerate::set<TokenPhrasingItem>(uint64_t a1, __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  void *v31;

  v27 = &v31;
  v4 = v3[5];
  if (v4)
  {
    v27 = (void **)&off_1EA922FE8;
    v5 = *a2;
    v28 = *a2;
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v29 = *((_QWORD *)a2 + 1);
    *((_QWORD *)&v29 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *((_QWORD *)a2 + 4);
    *(_QWORD *)&v30 = *((_QWORD *)a2 + 3);
    *((_QWORD *)&v30 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_WORD *)(v4 + 8) = v5;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 16, &v29);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 32, &v30);
    v27 = (void **)&off_1EA922FE8;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v18 = v3;
    v19 = operator new();
    *(_QWORD *)v19 = &off_1EA922FE8;
    *(_WORD *)(v19 + 8) = *a2;
    v20 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(v19 + 16) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(v19 + 24) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(v19 + 32) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(v19 + 40) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = v18[5];
    v18[5] = v19;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
}

_QWORD *Agglomerate::ItemHolder<TokenPhrasingItem>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922FE8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void Agglomerate::ItemHolder<TokenPhrasingItem>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922FE8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<ChunkItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TokenAttributes>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 304);
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t Agglomerate::ItemHolder<TokenBasicItem>::ItemHolder(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a1 = off_1EA922D68;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

uint64_t Agglomerate::ItemHolder<TokenBasicItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922D68;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void Agglomerate::ItemHolder<TokenBasicItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922D68;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x1DF0ED014);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
}

void sub_1DE939268(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100]()
{
  MEMORY[0x1DF0ECEF4]();
  JUMPOUT(0x1DF0ED014);
}

uint64_t Agglomerate::ItemHolder<TokenPromptItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922E88;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void Agglomerate::ItemHolder<TokenPromptItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922E88;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x1DF0ED014);
}

BOOL TokenAttributes::is_prompt(TokenAttributes *this)
{
  char *v1;
  int v2;
  int v3;
  int v4;

  v1 = (char *)this + 144;
  v2 = *((char *)this + 167);
  if (v2 < 0)
  {
    if (*((_QWORD *)this + 19) != 6)
      return 0;
    v1 = *(char **)v1;
  }
  else if (v2 != 6)
  {
    return 0;
  }
  v3 = *(_DWORD *)v1;
  v4 = *((unsigned __int16 *)v1 + 2);
  return v3 == 1836020336 && v4 == 29808;
}

void std::__shared_ptr_emplace<MatchPromptImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MatchPromptImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MatchPromptImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SharedObjectPool::get_if<FrontendEnvironment>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE939484(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<PromptDatabase>(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  int8x8_t prime;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t **v81;
  unint64_t v82;
  uint8x8_t v83;
  unint64_t v84;
  uint8x8_t v85;
  uint64_t v86;
  uint64_t *i;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t *v93;
  int v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  _BOOL4 v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  unsigned int *v103;
  uint64_t v104;
  unint64_t v105;
  _DWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  int *v109;
  int v110;
  int *v111;
  int *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  int *v118;
  int v119;
  uint64_t v120;
  void **v121;
  uint64_t *v122;
  _QWORD *v123;
  uint64_t *v124;
  std::random_device v125[2];
  std::__shared_weak_count *v126;
  __int128 v127;
  void *v128;
  void **v129;

  v2 = (_QWORD **)(a1 + 168);
  {
    if (v2 == v3)
      return 0;
    else
      return v3[5] + 8;
  }
  *(_QWORD *)&v125[0].__padding_ = &v129;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  v7 = (_QWORD *)(v6 + 8);
  *(_QWORD *)v6 = &off_1EA922D28;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  v8 = (_QWORD *)(v6 + 56);
  *(_OWORD *)(v6 + 104) = 0u;
  v124 = (uint64_t *)(v6 + 80);
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 120) = 0;
  std::random_device::random_device[abi:ne180100](v125);
  v121 = (void **)(v6 + 104);
  v9 = MEMORY[0x1DF0ECD20](v125);
  v10 = v9 + ((v9 / 0x7FFFFFFF) | ((v9 / 0x7FFFFFFF) << 31));
  if (v10 <= 1)
    v10 = 1;
  *(_DWORD *)(v6 + 136) = v10;
  std::random_device::~random_device(v125);
  {
    if (v2 == v11)
      v12 = 0;
    else
      v12 = v11[5] + 8;
  }
  else
  {
    v129 = &v128;
    v14 = operator new();
    *(_QWORD *)v14 = &off_1EA922CE8;
    *(_BYTE *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 12) = -1;
    v15 = v13[5];
    v13[5] = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = v13[5];
    }
    v12 = v14 + 8;
  }
  *(_QWORD *)(v6 + 48) = v12;
  (*(void (**)(std::random_device *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 16))(v125, *(_QWORD *)(a1 + 96), 1886547316, 2);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v7, *(uint64_t *)&v125[0].__padding_, (uint64_t)v126);
  *(_OWORD *)(v6 + 24) = v127;
  v16 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v122 = v5;
  if (*v7)
  {
    v19 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 40) = v19;
    v123 = (_QWORD *)v6;
    if (*(_DWORD *)(v19 + 8))
    {
      v20 = 0;
      v21 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD **)(v6 + 64);
      do
      {
        v23 = (unsigned int *)(*(_QWORD *)(v6 + 24) + v21);
        v24 = *(_QWORD *)(v6 + 72);
        if ((unint64_t)v22 >= v24)
        {
          v26 = (_QWORD *)*v8;
          v27 = ((uint64_t)v22 - *v8) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v29 = v24 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v31 = (char *)operator new(8 * v30);
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[8 * v27];
          *(_QWORD *)v32 = v23;
          v25 = v32 + 8;
          if (v22 != v26)
          {
            do
            {
              v33 = *--v22;
              *((_QWORD *)v32 - 1) = v33;
              v32 -= 8;
            }
            while (v22 != v26);
            v22 = (_QWORD *)*v8;
          }
          v6 = (uint64_t)v123;
          v123[7] = v32;
          v123[8] = v25;
          v123[9] = &v31[8 * v30];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v22 = v23;
          v25 = v22 + 1;
        }
        *(_QWORD *)(v6 + 64) = v25;
        v21 += 48 * *v23 + 4;
        ++v20;
        v22 = v25;
      }
      while (v20 < *(_DWORD *)(*(_QWORD *)(v6 + 40) + 8));
    }
    else
    {
      v25 = *(_QWORD **)(v6 + 64);
    }
    v36 = (uint64_t)v25 - *(_QWORD *)(v6 + 56);
    v37 = v36 >> 3;
    v38 = *(_QWORD *)(v6 + 80);
    v39 = *(_QWORD *)(v6 + 88);
    v40 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - v38) >> 3);
    v41 = (v36 >> 3) - v40;
    if (v36 >> 3 <= v40)
    {
      if (v36 >> 3 < v40)
      {
        v60 = v38 + 40 * v37;
        while (v39 != v60)
        {
          v39 -= 40;
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v39);
        }
        *(_QWORD *)(v6 + 88) = v60;
      }
    }
    else
    {
      v42 = *(_QWORD *)(v6 + 96);
      if (0xCCCCCCCCCCCCCCCDLL * ((v42 - v39) >> 3) >= v41)
      {
        v61 = v39 + 40 * v41;
        do
        {
          *(_OWORD *)v39 = 0uLL;
          *(_OWORD *)(v39 + 16) = 0uLL;
          *(_DWORD *)(v39 + 32) = 1065353216;
          v39 += 40;
        }
        while (v39 != v61);
        *(_QWORD *)(v6 + 88) = v61;
      }
      else
      {
        if ((unint64_t)v36 >= 0x3333333333333331)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v43 = 0x999999999999999ALL * ((v42 - v38) >> 3);
        if (v43 <= v37)
          v43 = v36 >> 3;
        if (0xCCCCCCCCCCCCCCCDLL * ((v42 - v38) >> 3) >= 0x333333333333333)
          v44 = 0x666666666666666;
        else
          v44 = v43;
        if (v44 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v45 = (char *)operator new(40 * v44);
        v46 = &v45[8 * ((v39 - v38) >> 3)];
        v47 = &v45[40 * v37];
        v48 = v46;
        do
        {
          *(_OWORD *)v48 = 0uLL;
          *((_OWORD *)v48 + 1) = 0uLL;
          *((_DWORD *)v48 + 8) = 1065353216;
          v48 += 40;
        }
        while (v48 != v47);
        v49 = &v45[40 * v44];
        if (v39 != v38)
        {
          v50 = 0;
          do
          {
            v51 = &v46[v50];
            v52 = v39 + v50;
            v53 = *(_QWORD *)(v39 + v50 - 40);
            *(_QWORD *)(v52 - 40) = 0;
            *((_QWORD *)v51 - 5) = v53;
            *((_QWORD *)v51 - 4) = *(_QWORD *)(v39 + v50 - 32);
            *(_QWORD *)(v52 - 32) = 0;
            v54 = *(_QWORD *)(v39 + v50 - 24);
            *(_QWORD *)&v46[v50 - 24] = v54;
            v55 = *(_QWORD *)(v39 + v50 - 16);
            *((_QWORD *)v51 - 2) = v55;
            *((_DWORD *)v51 - 2) = *(_DWORD *)(v39 + v50 - 8);
            if (v55)
            {
              v56 = *(_QWORD *)(v54 + 8);
              v57 = *((_QWORD *)v51 - 4);
              if ((v57 & (v57 - 1)) != 0)
              {
                if (v56 >= v57)
                  v56 %= v57;
              }
              else
              {
                v56 &= v57 - 1;
              }
              *(_QWORD *)(v53 + 8 * v56) = &v46[v50 - 24];
              *(_QWORD *)(v39 + v50 - 24) = 0;
              *(_QWORD *)(v39 + v50 - 16) = 0;
            }
            v50 -= 40;
          }
          while (v39 + v50 != v38);
          v46 += v50;
        }
        v59 = *(void **)(v6 + 80);
        v58 = *(_QWORD *)(v6 + 88);
        *(_QWORD *)(v6 + 80) = v46;
        *(_QWORD *)(v6 + 88) = v47;
        *(_QWORD *)(v6 + 96) = v49;
        while ((void *)v58 != v59)
          v58 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v58 - 40);
        if (v59)
          operator delete(v59);
      }
    }
    v62 = *(_QWORD **)(v6 + 56);
    v63 = *(_QWORD **)(v6 + 64);
    if (v63 == v62)
    {
      v62 = *(_QWORD **)(v6 + 64);
      goto LABEL_177;
    }
    v64 = 0;
    while (1)
    {
      v65 = (_DWORD *)v62[v64];
      if (!*v65)
        goto LABEL_174;
      v66 = 0;
      do
      {
        v67 = *v124;
        v68 = operator new(0x18uLL);
        v69 = v67 + 40 * v64;
        *(_QWORD *)v68 = 0;
        v70 = v65[12 * v66 + 8];
        v68[4] = v70;
        v68[5] = v66;
        *((_QWORD *)v68 + 1) = v70;
        v71 = *(_QWORD *)(v69 + 8);
        v72 = (float)(unint64_t)(*(_QWORD *)(v69 + 24) + 1);
        v73 = *(float *)(v69 + 32);
        if (!v71 || (float)(v73 * (float)v71) < v72)
        {
          v74 = (v71 & (v71 - 1)) != 0;
          if (v71 < 3)
            v74 = 1;
          v75 = v74 | (2 * v71);
          v76 = vcvtps_u32_f32(v72 / v73);
          if (v75 <= v76)
            prime = (int8x8_t)v76;
          else
            prime = (int8x8_t)v75;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v71 = *(_QWORD *)(v69 + 8);
          }
          if (*(_QWORD *)&prime > v71)
            goto LABEL_213;
          if (*(_QWORD *)&prime >= v71)
            goto LABEL_127;
          v84 = vcvtps_u32_f32((float)*(unint64_t *)(v69 + 24) / *(float *)(v69 + 32));
          if (v71 < 3 || (v85 = (uint8x8_t)vcnt_s8((int8x8_t)v71), v85.i16[0] = vaddlv_u8(v85), v85.u32[0] > 1uLL))
          {
            v84 = std::__next_prime(v84);
          }
          else
          {
            v86 = 1 << -(char)__clz(v84 - 1);
            if (v84 >= 2)
              v84 = v86;
          }
          if (*(_QWORD *)&prime <= v84)
            prime = (int8x8_t)v84;
          if (*(_QWORD *)&prime >= v71)
          {
            v71 = *(_QWORD *)(v69 + 8);
            goto LABEL_127;
          }
          if (prime)
          {
LABEL_213:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v78 = operator new(8 * *(_QWORD *)&prime);
            v79 = *(void **)v69;
            *(_QWORD *)v69 = v78;
            if (v79)
              operator delete(v79);
            v80 = 0;
            *(int8x8_t *)(v69 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v69 + 8 * v80++) = 0;
            while (*(_QWORD *)&prime != v80);
            v81 = *(uint64_t ***)(v69 + 16);
            if (v81)
            {
              v82 = (unint64_t)v81[1];
              v83 = (uint8x8_t)vcnt_s8(prime);
              v83.i16[0] = vaddlv_u8(v83);
              if (v83.u32[0] > 1uLL)
              {
                if (v82 >= *(_QWORD *)&prime)
                  v82 %= *(_QWORD *)&prime;
              }
              else
              {
                v82 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)v69 + 8 * v82) = v69 + 16;
              for (i = *v81; *v81; i = *v81)
              {
                v88 = i[1];
                if (v83.u32[0] > 1uLL)
                {
                  if (v88 >= *(_QWORD *)&prime)
                    v88 %= *(_QWORD *)&prime;
                }
                else
                {
                  v88 &= *(_QWORD *)&prime - 1;
                }
                if (v88 == v82)
                {
                  v81 = (uint64_t **)i;
                }
                else
                {
                  v89 = i;
                  if (*(_QWORD *)(*(_QWORD *)v69 + 8 * v88))
                  {
                    do
                    {
                      v90 = v89;
                      v89 = (uint64_t *)*v89;
                    }
                    while (v89 && *((_DWORD *)i + 4) == *((_DWORD *)v89 + 4));
                    *v81 = v89;
                    *v90 = **(_QWORD **)(*(_QWORD *)v69 + 8 * v88);
                    **(_QWORD **)(*(_QWORD *)v69 + 8 * v88) = i;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v69 + 8 * v88) = v81;
                    v81 = (uint64_t **)i;
                    v82 = v88;
                  }
                }
              }
            }
            v71 = (unint64_t)prime;
          }
          else
          {
            v102 = *(void **)v69;
            *(_QWORD *)v69 = 0;
            if (v102)
              operator delete(v102);
            v71 = 0;
            *(_QWORD *)(v69 + 8) = 0;
          }
        }
LABEL_127:
        v91 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
        v91.i16[0] = vaddlv_u8(v91);
        if (v91.u32[0] > 1uLL)
        {
          v92 = v70;
          if (v71 <= v70)
            v92 = v70 % v71;
        }
        else
        {
          v92 = ((_DWORD)v71 - 1) & v70;
        }
        v93 = *(uint64_t **)(*(_QWORD *)v69 + 8 * v92);
        if (v93)
        {
          v94 = 0;
          do
          {
            v95 = v93;
            v93 = (uint64_t *)*v93;
            if (!v93)
              break;
            v96 = v93[1];
            if (v91.u32[0] > 1uLL)
            {
              v97 = v93[1];
              if (v96 >= v71)
                v97 = v96 % v71;
            }
            else
            {
              v97 = v96 & (v71 - 1);
            }
            if (v97 != v92)
              break;
            v98 = v96 == v70 && *((_DWORD *)v93 + 4) == v68[4];
            v99 = v94 & !v98;
            v94 |= v98;
          }
          while (v99 != 1);
        }
        else
        {
          v95 = 0;
        }
        v100 = *((_QWORD *)v68 + 1);
        if (v91.u32[0] > 1uLL)
        {
          if (v100 >= v71)
            v100 %= v71;
        }
        else
        {
          v100 &= v71 - 1;
        }
        if (!v95)
        {
          *(_QWORD *)v68 = *(_QWORD *)(v69 + 16);
          *(_QWORD *)(v69 + 16) = v68;
          *(_QWORD *)(*(_QWORD *)v69 + 8 * v100) = v69 + 16;
          if (!*(_QWORD *)v68)
            goto LABEL_163;
          v101 = *(_QWORD *)(*(_QWORD *)v68 + 8);
          if (v91.u32[0] > 1uLL)
          {
            if (v101 >= v71)
              v101 %= v71;
          }
          else
          {
            v101 &= v71 - 1;
          }
LABEL_162:
          *(_QWORD *)(*(_QWORD *)v69 + 8 * v101) = v68;
          goto LABEL_163;
        }
        *(_QWORD *)v68 = *v95;
        *v95 = v68;
        if (*(_QWORD *)v68)
        {
          v101 = *(_QWORD *)(*(_QWORD *)v68 + 8);
          if (v91.u32[0] > 1uLL)
          {
            if (v101 >= v71)
              v101 %= v71;
          }
          else
          {
            v101 &= v71 - 1;
          }
          if (v101 != v100)
            goto LABEL_162;
        }
LABEL_163:
        ++*(_QWORD *)(v69 + 24);
        ++v66;
        v62 = (_QWORD *)*v8;
        v65 = *(_DWORD **)(*v8 + 8 * v64);
      }
      while (v66 < *v65);
      v63 = (_QWORD *)v123[8];
LABEL_174:
      if (++v64 >= (unint64_t)(v63 - v62))
      {
LABEL_177:
        v6 = (uint64_t)v123;
        v123[16] = 0;
        v103 = (unsigned int *)*(v63 - 1);
        v104 = *v103;
        if ((_DWORD)v104)
        {
          v105 = 0;
          v106 = v103 + 12;
          do
          {
            if (v105 <= (*v106 - *(v106 - 1)))
              v105 = (*v106 - *(v106 - 1));
            v106 += 12;
            --v104;
          }
          while (v104);
          v123[16] = v105;
        }
        if (v63 != v62)
        {
          v107 = 0;
          v108 = v123 + 15;
          v109 = (int *)v123[14];
          v110 = 1;
          do
          {
            if ((unint64_t)v109 >= *v108)
            {
              v112 = (int *)*v121;
              v113 = ((char *)v109 - (_BYTE *)*v121) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v115 = *v108 - (_QWORD)v112;
              if (v115 >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v123 + 15), v116);
                v112 = (int *)v123[13];
                v109 = (int *)v123[14];
              }
              else
              {
                v117 = 0;
              }
              v118 = (int *)&v117[4 * v113];
              *v118 = v110;
              v111 = v118 + 1;
              while (v109 != v112)
              {
                v119 = *--v109;
                *--v118 = v119;
              }
              v123[13] = v118;
              v123[14] = v111;
              v123[15] = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *v109 = v110;
              v111 = v109 + 1;
            }
            v123[14] = v111;
            v110 *= *(_DWORD *)(v123[5] + 12);
            ++v107;
            v109 = v111;
          }
          while (v107 < (uint64_t)(v123[8] - v123[7]) >> 3);
        }
        goto LABEL_202;
      }
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v125[0].__padding_) = 0;
    _os_log_impl(&dword_1DE3F6000, v34, OS_LOG_TYPE_DEBUG, "prmt file for voice is not present.", (uint8_t *)v125, 2u);
  }
  Diagnostics::log(7, "prmt file for voice is not present.", v35);
LABEL_202:
  v120 = v122[5];
  v122[5] = v6;
  if (v120)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
    v6 = v122[5];
  }
  return v6 + 8;
}

void sub_1DE93A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, void **a14, void **a15)
{
  void **v15;
  uint64_t v16;
  void *v18;
  void *v19;

  v18 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v16 + 112) = v18;
    operator delete(v18);
  }
  a15 = a14;
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&a15);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v16 + 64) = v19;
    operator delete(v19);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a10);
  MEMORY[0x1DF0ED014](v16, 0x10F1C402AB85B93);
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14[2];

  v2 = (_QWORD *)(a1 + 168);
  {
    if (v2 == v3)
      return 0;
    else
      return v3[5] + 8;
  }
  else
  {
    v14[0] = (uint64_t *)&v13;
    v6 = (_QWORD *)operator new();
    *v6 = &off_1EA922F28;
    v7 = *(uint64_t **)(a1 + 104);
    v14[0] = *(uint64_t **)(a1 + 96);
    v14[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    GeneratedPromptDB::GeneratedPromptDB((uint64_t)(v6 + 1), (uint64_t *)v14, *(_QWORD *)(a1 + 128));
    if (v7)
    {
      v10 = (unint64_t *)(v7 + 1);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t *))(*v7 + 16))(v7);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
      }
    }
    v12 = v5[5];
    v5[5] = (uint64_t)v6;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v6 = (_QWORD *)v5[5];
    }
    return (uint64_t)(v6 + 1);
  }
}

void sub_1DE93A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1DF0ED014](v3, 0x10A1C4054680CF9);
  _Unwind_Resume(a1);
}

uint64_t *UTFTransliterator::UTFTransliterator(uint64_t *a1, char *a2, char *a3)
{
  void *__p[2];
  char v7;
  void *__dst[2];
  char v9;

  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, a2);
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, a3);
  UTFTransliterator::UTFTransliterator(a1, (uint64_t)__dst, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_1DE93A31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(_QWORD *__dst, char *__src)
{
  unint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_WORD *)__src)
  {
    v4 = 0;
    do
      v5 = &__src[2 * v4++];
    while (*((_WORD *)v5 + 1));
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v4 >= 0xB)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v4 | 3) != 0xB)
        v7 = v4 | 3;
      v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v7 + 1);
      __dst[1] = v4;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v6;
    }
    else
    {
      *((_BYTE *)__dst + 23) = v4;
      v6 = __dst;
      if (!v4)
        goto LABEL_9;
    }
    memmove(v6, __src, 2 * v4);
    goto LABEL_14;
  }
  v4 = 0;
  *((_BYTE *)__dst + 23) = 0;
LABEL_9:
  v6 = __dst;
LABEL_14:
  *((_WORD *)v6 + v4) = 0;
  return __dst;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void std::__shared_ptr_emplace<UTFTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UTFTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<UTFTransliterator>::__on_zero_shared(uint64_t a1)
{
  UTFTransliterator::~UTFTransliterator((UTFTransliterator *)(a1 + 24));
}

void Agglomerate::ItemHolder<PromptConfig>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<GeneratedPromptDB>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922F28;
  GeneratedPromptDB::~GeneratedPromptDB((GeneratedPromptDB *)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<GeneratedPromptDB>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922F28;
  GeneratedPromptDB::~GeneratedPromptDB((GeneratedPromptDB *)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1DE93A568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *Agglomerate::ItemHolder<PromptDatabase>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922D28;
  PromptDatabase::~PromptDatabase((PromptDatabase *)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<PromptDatabase>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922D28;
  PromptDatabase::~PromptDatabase((PromptDatabase *)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void PromptDatabase::~PromptDatabase(PromptDatabase *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 72);
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void MatchPromptPersistentModule::~MatchPromptPersistentModule(void **this)
{
  *this = &off_1EA921438;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921438;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

_DWORD *PromptDatabase::find_prompt_by_id(uint64_t a1, std::string *this, int a3)
{
  unint64_t size;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v9;
  char *v10;
  char *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  size_t v16;
  std::string *v17;
  BOOL v18;
  NSObject *v19;
  const char *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  uint64_t v38;
  uint8_t buf[4];
  _DWORD *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5 == v4)
    return 0;
  v6 = a3;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = *(int **)(v5 - 8);
    v5 -= 8;
    v14 = v12 + 1;
    v13 = *v12;
    if (*v12)
    {
      v38 = v5;
      v15 = &v14[12 * v13];
      while (std::string::compare(this, (const std::string::value_type *)v14))
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (size == -1)
LABEL_62:
            std::string::__throw_out_of_range[abi:ne180100]();
          v17 = (std::string *)this->__r_.__value_.__r.__words[0];
          if (this->__r_.__value_.__l.__size_ >= size)
            v16 = size;
          else
            v16 = this->__r_.__value_.__l.__size_;
        }
        else
        {
          if (size == -1)
            goto LABEL_62;
          if (HIBYTE(this->__r_.__value_.__r.__words[2]) >= size)
            v16 = size;
          else
            v16 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          v17 = this;
        }
        v18 = !memcmp(v17, v14, v16) && v16 >= size;
        if (v18)
        {
          if (v14[9] <= *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4))
          {
            if (!v6)
              goto LABEL_59;
            if (v10 >= v11)
            {
              v24 = (v10 - v9) >> 3;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if ((v11 - v9) >> 2 > v25)
                v25 = (v11 - v9) >> 2;
              if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8)
                v26 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v26 = v25;
              if (v26)
              {
                if (v26 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v27 = (char *)operator new(8 * v26);
              }
              else
              {
                v27 = 0;
              }
              v28 = &v27[8 * v24];
              *(_QWORD *)v28 = v14;
              v29 = v28 + 8;
              while (v10 != v9)
              {
                v30 = *((_QWORD *)v10 - 1);
                v10 -= 8;
                *((_QWORD *)v28 - 1) = v30;
                v28 -= 8;
              }
              v11 = &v27[8 * v26];
              if (v9)
                operator delete(v9);
              v9 = v28;
              v10 = v29;
              v6 = a3;
            }
            else
            {
              *(_QWORD *)v10 = v14;
              v10 += 8;
            }
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v21 = v14[8];
              v22 = v14[9];
              v23 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
              *(_DWORD *)buf = 136315906;
              v41 = v14;
              v42 = 1024;
              v43 = v21;
              v44 = 1024;
              v45 = v22;
              v46 = 1024;
              v47 = v23;
              _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_ERROR, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", buf, 0x1Eu);
            }
            Diagnostics::log(3, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", v20, v14, v14[8], v14[9], *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4));
          }
        }
        v14 += 12;
        if (v14 == v15)
        {
          v4 = *(_QWORD *)(a1 + 48);
          v5 = v38;
          goto LABEL_51;
        }
      }
      goto LABEL_59;
    }
LABEL_51:
    ;
  }
  while (v5 != v4);
  if (v9 != v10)
  {
    v31 = *(_DWORD *)(a1 + 128);
    v32 = v31 / 0xADC8;
    v33 = 48271 * (v31 % 0xADC8);
    v32 *= 3399;
    v18 = v33 >= v32;
    v34 = v33 - v32;
    if (v18)
      v35 = 0;
    else
      v35 = 0x7FFFFFFF;
    v36 = v35 + v34;
    *(_DWORD *)(a1 + 128) = v36;
    v14 = *(_DWORD **)&v9[8 * (v36 % ((v10 - v9) >> 3))];
    goto LABEL_60;
  }
  v14 = 0;
LABEL_59:
  if (!v9)
    return v14;
LABEL_60:
  operator delete(v9);
  return v14;
}

void sub_1DE93AA90(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void Pronounce_FSTImpl::~Pronounce_FSTImpl(void **this)
{
  *this = &off_1EA91EE18;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  FrontendModule::~FrontendModule(this);
}

{
  *this = &off_1EA91EE18;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void Pronounce_FSTImpl::generate_tokens(Pronounce_FSTImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _BYTE *v17;
  NSObject *v18;
  std::string *v19;
  const char *v20;
  std::string *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  int v28;
  std::string::size_type v29;
  const char *v30;
  std::string *v31;
  std::string *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *exception;
  std::string __p;
  char v38;
  void *v39;
  char v40;
  std::string v41;
  __int128 v42;
  void *v43[2];
  __int128 v44;
  __int128 v45;
  _BYTE v46[12];
  __int16 v47;
  std::string *v48;
  std::string buf;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 32);
  while (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v45, *((_QWORD *)this + 2), 0);
    v3 = v45;
    if (!(_QWORD)v45)
    {
      *((_BYTE *)this + 8) = 1;
      goto LABEL_68;
    }
    v4 = *((_QWORD *)this + 2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v42 = v4;
    *((_QWORD *)&v42 + 1) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v10 = v45;
    if ((_QWORD *)(v10 + 8) == v11)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v42, "TokenBasicItem is not generated in previous modules.");
      MEMORY[0x1DF0EC99C](exception, &v42);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v12 = v11[5];
    if ((_QWORD *)(v10 + 8) != v13)
    {
      v14 = v13[5];
      if (*(char *)(v14 + 31) < 0)
      {
        if (*(_QWORD *)(v14 + 16))
        {
LABEL_19:
          v15 = (_QWORD *)(v14 + 8);
          *(_OWORD *)v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          v16 = *(char *)(v14 + 31);
          if (v16 < 0)
          {
            if (*(_QWORD *)(v14 + 16) != 1)
              goto LABEL_37;
            v17 = (_BYTE *)*v15;
          }
          else
          {
            v17 = (_BYTE *)(v14 + 8);
            if (v16 != 1)
            {
LABEL_37:
              v22 = *((_QWORD *)this + 13);
              std::string::basic_string[abi:ne180100]<0>(&__p, "g2p_rules");
              (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, _QWORD *))(*(_QWORD *)v22 + 8))(&buf, v22, &__p, v15);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                Censor::global_plaintext(&__p, (uint64_t)v15);
                v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                v25 = __p.__r_.__value_.__r.__words[0];
                Censor::global_plaintext(&v41, (uint64_t)&buf);
                p_p = &__p;
                if (v24 < 0)
                  p_p = (std::string *)v25;
                v27 = &v41;
                if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v27 = (std::string *)v41.__r_.__value_.__r.__words[0];
                *(_DWORD *)v46 = 136315394;
                *(_QWORD *)&v46[4] = p_p;
                v47 = 2080;
                v48 = v27;
                _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_DEBUG, "#Pronounce_FST: %s -> %s", v46, 0x16u);
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v41.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              Censor::global_plaintext(&__p, (uint64_t)v15);
              v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v29 = __p.__r_.__value_.__r.__words[0];
              Censor::global_plaintext(&v41, (uint64_t)&buf);
              v31 = &__p;
              if (v28 < 0)
                v31 = (std::string *)v29;
              v32 = &v41;
              if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
              Diagnostics::log(7, "#Pronounce_FST: %s -> %s", v30, v31, v32);
              if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v41.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__s.__data_[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__l.__size_, &byte_1DEBD87CE);
              std::string::basic_string[abi:ne180100]<0>(&v39, &byte_1DEBD87CE);
              create_pronunciation_with_phone_sequence((uint64_t *)&v41, &buf, (uint64_t)&__p);
              std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v42, (uint64_t *)v41.__r_.__value_.__l.__data_, (uint64_t *)v41.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v41.__r_.__value_.__l.__size_ - v41.__r_.__value_.__r.__words[0]) >> 3));
              *(_QWORD *)v46 = &v41;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
              std::string::operator=((std::string *)&v43[1], (const std::string *)(v12 + 32));
              if (v40 < 0)
                operator delete(v39);
              if (v38 < 0)
                operator delete((void *)__p.__r_.__value_.__l.__size_);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_64;
            }
          }
          if (*v17 != 42)
            goto LABEL_37;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            Censor::global_plaintext(&__p, v12 + 32);
            v19 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
            _os_log_impl(&dword_1DE3F6000, v18, OS_LOG_TYPE_ERROR, "Unknown pronunciation for token '%s', replace with silence.", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&__p, v12 + 32);
          v21 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
          Diagnostics::log(3, "Unknown pronunciation for token '%s', replace with silence.", v20, v21);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          create_silence((uint64_t *)&__p);
          std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v42, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_64:
          Agglomerate::set<TokenPronunciationItem>(v45, (uint64_t)&v42);
          if (SHIBYTE(v44) < 0)
            operator delete(v43[1]);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
      }
      else if (*(_BYTE *)(v14 + 31))
      {
        goto LABEL_19;
      }
    }
    std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v45);
LABEL_68:
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_72;
    v34 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (!v3)
        return;
    }
    else
    {
LABEL_72:
      if (!v3)
        return;
    }
  }
}

void sub_1DE93B12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  TokenPronunciationItem::~TokenPronunciationItem(&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v40 - 176);
  _Unwind_Resume(a1);
}

void sub_1DE93B24C()
{
  JUMPOUT(0x1DE93B244);
}

void create_silence(uint64_t *a1)
{
  std::string *v2;
  std::string *v3;
  std::string *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string **v13;
  __int128 v14;
  _QWORD v15[2];
  char v16;
  std::string *v17;
  std::string *v18;
  void **v19;
  std::string **v20;
  std::string **v21;
  unint64_t v22;
  uint64_t *v23;
  void *v24[2];
  std::string::size_type v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v26 = 0;
  v27 = 0;
  std::string::basic_string[abi:ne180100]<0>(v24, "sil");
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v15[1] = &v28;
  v16 = 0;
  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  v28 = v2;
  v29 = v2;
  v30 = v2 + 1;
  v17 = v2;
  v18 = v2;
  v19 = (void **)&v30;
  v20 = &v17;
  v21 = &v18;
  LOBYTE(v22) = 0;
  if (SHIBYTE(v25) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)v24[0], (std::string::size_type)v24[1]);
    v3 = v18;
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
    v2->__r_.__value_.__r.__words[2] = v25;
  }
  v4 = v3 + 1;
  v18 = v4;
  LOBYTE(v22) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v19);
  v29 = v4;
  __p = 0;
  v32 = 0;
  v33 = 0;
  v15[0] = 0;
  v14 = 0uLL;
  v19 = (void **)&v14;
  LOBYTE(v20) = 0;
  *(_QWORD *)&v14 = operator new(0x40uLL);
  *((_QWORD *)&v14 + 1) = v14;
  v15[0] = v14 + 64;
  *((_QWORD *)&v14 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable*>((uint64_t)v15, (uint64_t)&v26, (uint64_t)&v34, v14);
  v5 = a1[2];
  v6 = (_QWORD *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = a1 + 2;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v11);
    else
      v12 = 0;
    v13 = (std::string **)(v11 + 24 * v8);
    v19 = (void **)v11;
    v20 = v13;
    v22 = v11 + 24 * v12;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)v13 = v14;
    v13[2] = (std::string *)v15[0];
    v14 = 0uLL;
    v15[0] = 0;
    v21 = v13 + 3;
    std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(a1, &v19);
    v7 = (_QWORD *)a1[1];
    std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *(_OWORD *)v6 = v14;
    v6[2] = v15[0];
    v14 = 0uLL;
    v15[0] = 0;
    v7 = v6 + 3;
    a1[1] = (uint64_t)(v6 + 3);
  }
  a1[1] = (uint64_t)v7;
  v19 = (void **)&v14;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  v19 = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
}

void sub_1DE93B4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;

  v31 = v30;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a16);
  a30 = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a26 < 0)
    operator delete(__p);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  void **v20;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      v11 = (void **)a1[1];
      v12 = (void *)*a1;
      if (v11 != (void **)v10)
      {
        do
        {
          v11 -= 3;
          v20 = v11;
          std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v20);
        }
        while (v11 != (void **)v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](a1, v15);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v9, a2, a3, (_QWORD *)a1[1]);
    goto LABEL_16;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 3) < a4)
  {
    v17 = &a2[(a1[1] - v10) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Word *,PhonemeRepresentation::Word *,PhonemeRepresentation::Word *>(a2, v17, v10);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v9, v17, a3, (_QWORD *)a1[1]);
LABEL_16:
    a1[1] = (uint64_t)v16;
    return;
  }
  v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Word *,PhonemeRepresentation::Word *,PhonemeRepresentation::Word *>(a2, a3, v10);
  v19 = (void **)a1[1];
  while (v19 != (void **)v18)
  {
    v19 -= 3;
    v20 = v19;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
  a1[1] = v18;
}

void sub_1DE93B72C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE93B734(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void create_pronunciation_with_phone_sequence(uint64_t *a1, std::string *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  std::vector<std::string>::pointer begin;
  unint64_t i;
  std::string *v22;
  uint64_t *v23;
  std::string *v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  int v29;
  std::string::size_type v30;
  std::string::size_type v31;
  uint64_t v32;
  std::string::size_type size;
  uint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  __int128 v46;
  NSObject *v47;
  const char *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string::size_type v52;
  std::string::size_type v53;
  __int128 v54;
  std::string::size_type v55;
  std::string::pointer data;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  __int128 v63;
  int v64;
  int v65;
  unint64_t v66;
  std::string::size_type *v67;
  uint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string::size_type v72;
  char v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  _OWORD *v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  __int128 v98;
  std::vector<std::string> v99;
  char v100;
  std::string v101;
  char *v102;
  uint64_t v103;
  std::string v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v103 = (uint64_t)(a1 + 2);
  v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(1uLL);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  v101.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  v102 = (char *)&v6[3 * v7];
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v6 + 3);
  std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(a1, &v101);
  v8 = a1[1];
  std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&v101);
  a1[1] = v8;
  split_by_delimiter(&v99, a2, 0x20u);
  if (v99.__end_ != v99.__begin_)
  {
    v9 = (uint64_t *)*a1;
    v10 = *(_OWORD **)(*a1 + 8);
    v11 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v10 >= v11)
    {
      v14 = ((uint64_t)v10 - *v9) >> 6;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 58)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = v11 - *v9;
      if (v16 >> 5 > v15)
        v15 = v16 >> 5;
      v17 = (char *)((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0 ? 0x3FFFFFFFFFFFFFFLL : v15);
      v103 = *a1 + 16;
      if (v17)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>((unint64_t)v17);
      else
        v18 = 0;
      v19 = &v17[64 * v14];
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v101.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      v102 = &v17[64 * v18];
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 + 64);
      std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer(v9, &v101);
      v12 = (_OWORD *)v9[1];
      std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)&v101);
      v13 = *a1;
    }
    else
    {
      v10[2] = 0u;
      v10[3] = 0u;
      *v10 = 0u;
      v10[1] = 0u;
      v12 = v10 + 4;
      v9[1] = (uint64_t)(v10 + 4);
      v13 = (uint64_t)v9;
    }
    v9[1] = (uint64_t)v12;
    MEMORY[0x1DF0ECA80](*(_QWORD *)(v13 + 8) - 24, &byte_1DEBD87CE);
    begin = v99.__begin_;
    if (v99.__end_ != v99.__begin_)
    {
      for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_ - (char *)v99.__begin_) >> 3); ++i)
      {
        v22 = &begin[i];
        v23 = (uint64_t *)*a1;
        v24 = *(std::string **)(*a1 + 8);
        v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
        if (v25 < 0)
        {
          if (v22->__r_.__value_.__l.__size_ != 1)
            goto LABEL_29;
          v26 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        else
        {
          v26 = &begin[i];
          if (v25 != 1)
            goto LABEL_29;
        }
        if (v26->__r_.__value_.__s.__data_[0] != 46
          || (v27 = v24[-2].__r_.__value_.__l.__size_, v24[-2].__r_.__value_.__r.__words[0] == v27))
        {
LABEL_29:
          if (!*(_BYTE *)a3)
            goto LABEL_85;
          v30 = std::string::find(v22, 59, 0);
          if (v30 != -1)
          {
            v31 = v30;
            std::string::basic_string(&v101, v22, 0, v30, (std::allocator<char> *)&v100);
            v32 = *(unsigned __int8 *)(a3 + 55);
            if ((v32 & 0x80u) != 0)
              v32 = *(_QWORD *)(a3 + 40);
            if (v32)
              std::string::operator=(&v101, (const std::string *)(a3 + 32));
            size = HIBYTE(v101.__r_.__value_.__r.__words[2]);
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v101.__r_.__value_.__l.__size_;
            if (!size)
              std::string::operator=(&v101, (const std::string *)(a3 + 8));
            v34 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0)
              v35 = v24[-1].__r_.__value_.__l.__size_;
            else
              v35 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
            if (!v35)
            {
              v41 = &v101;
              goto LABEL_65;
            }
            if ((v34 & 0x80u) == 0)
              v39 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
            else
              v39 = v24[-1].__r_.__value_.__l.__size_;
            v40 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v40 = v101.__r_.__value_.__l.__size_;
            v41 = (std::string *)(a3 + 8);
            if (v39 == v40)
            {
              if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v101;
              else
                v42 = (std::string *)v101.__r_.__value_.__r.__words[0];
              if ((v34 & 0x80) != 0)
              {
                v82 = memcmp(v24[-1].__r_.__value_.__l.__data_, v42, v24[-1].__r_.__value_.__l.__size_);
                v41 = (std::string *)(a3 + 8);
                if (v82)
                  goto LABEL_65;
              }
              else if (*((_BYTE *)&v24[-1].__r_.__value_.__s + 23))
              {
                v43 = v24 - 1;
                while (v43->__r_.__value_.__s.__data_[0] == v42->__r_.__value_.__s.__data_[0])
                {
                  v43 = (std::string *)((char *)v43 + 1);
                  v42 = (std::string *)((char *)v42 + 1);
                  if (!--v34)
                    goto LABEL_66;
                }
                v41 = (std::string *)(a3 + 8);
                goto LABEL_65;
              }
            }
            else
            {
LABEL_65:
              std::string::operator=(v24 - 1, v41);
            }
LABEL_66:
            v44 = v31 + 1;
            if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
              v45 = v22->__r_.__value_.__l.__size_;
            else
              v45 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
            if (v44 >= v45)
            {
              if (v44 != v45)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                {
                  v49 = (std::string::size_type)v22;
                  if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
                    v49 = v22->__r_.__value_.__r.__words[0];
                  LODWORD(v104.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = v49;
                  _os_log_impl(&dword_1DE3F6000, v47, OS_LOG_TYPE_ERROR, "Is phone(from G2P) missing: %s?", (uint8_t *)&v104, 0xCu);
                }
                v50 = v22;
                if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
                  v50 = (std::string *)v22->__r_.__value_.__r.__words[0];
                Diagnostics::log(3, "Is phone(from G2P) missing: %s?", v48, v50);
                MEMORY[0x1DF0ECA80](v22, &byte_1DEBD87CE);
              }
            }
            else
            {
              std::string::basic_string(&v104, v22, v44, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v100);
              if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
                operator delete(v22->__r_.__value_.__l.__data_);
              v46 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
              v22->__r_.__value_.__r.__words[2] = v104.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v46;
            }
            if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
              operator delete(v101.__r_.__value_.__l.__data_);
LABEL_85:
            if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v104, v22->__r_.__value_.__l.__data_, v22->__r_.__value_.__l.__size_);
            }
            else
            {
              v51 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
              v104.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v51;
            }
            v52 = v24[-2].__r_.__value_.__r.__words[2];
            v53 = v24[-2].__r_.__value_.__l.__size_;
            if (v53 >= v52)
            {
              data = v24[-2].__r_.__value_.__l.__data_;
              v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (_QWORD)data) >> 3);
              v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)data) >> 3);
              if (2 * v59 > v58)
                v58 = 2 * v59;
              if (v59 >= 0x555555555555555)
                v60 = 0xAAAAAAAAAAAAAAALL;
              else
                v60 = v58;
              v103 = (uint64_t)&v24[-2].__r_.__value_.__r.__words[2];
              if (v60)
                v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v60);
              else
                v61 = 0;
              v62 = v60 + 24 * v57;
              v101.__r_.__value_.__r.__words[0] = v60;
              v101.__r_.__value_.__l.__size_ = v62;
              v102 = (char *)(v60 + 24 * v61);
              v63 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
              *(_QWORD *)(v62 + 16) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
              *(_OWORD *)v62 = v63;
              memset(&v104, 0, sizeof(v104));
              v101.__r_.__value_.__r.__words[2] = v62 + 24;
              std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer((uint64_t *)&v24[-2], &v101);
              v55 = v24[-2].__r_.__value_.__l.__size_;
              std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer((uint64_t)&v101);
            }
            else
            {
              v54 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
              *(_QWORD *)(v53 + 16) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
              *(_OWORD *)v53 = v54;
              memset(&v104, 0, sizeof(v104));
              v55 = v53 + 24;
              v24[-2].__r_.__value_.__l.__size_ = v53 + 24;
            }
            v24[-2].__r_.__value_.__l.__size_ = v55;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            split_by_delimiter((std::vector<std::string> *)&v101, v22, 0x5Fu);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 3) >= 2)
            {
              v64 = *(char *)(v101.__r_.__value_.__l.__size_ - 1);
              if (v64 < 0)
              {
                if (*(_QWORD *)(v101.__r_.__value_.__l.__size_ - 16) != 1)
                  goto LABEL_111;
                v65 = **(char **)(v101.__r_.__value_.__l.__size_ - 24);
                if (v65 < 48)
                  goto LABEL_111;
              }
              else
              {
                if (v64 != 1)
                  goto LABEL_111;
                v65 = *(char *)(v101.__r_.__value_.__l.__size_ - 24);
                if (v65 <= 47)
                  goto LABEL_111;
              }
              if (v65 <= 0x39u)
                *(_DWORD *)(*(_QWORD *)(*a1 + 8) - 60) = std::stoi((const std::string *)(v101.__r_.__value_.__r.__words[0] + 24), 0, 10);
            }
LABEL_111:
            v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
            goto LABEL_112;
          }
          v36 = *(unsigned __int8 *)(a3 + 55);
          if ((v36 & 0x80u) != 0)
            v36 = *(_QWORD *)(a3 + 40);
          v37 = v36 == 0;
          v38 = a3 + 32;
          if (v37)
            v38 = a3 + 8;
          if (*(char *)(v38 + 23) < 0)
            std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v38, *(_QWORD *)(v38 + 8));
          else
            v101 = *(std::string *)v38;
          v69 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0)
            v70 = v24[-1].__r_.__value_.__l.__size_;
          else
            v70 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
          if (!v70)
          {
            v74 = &v101;
            goto LABEL_137;
          }
          if ((v69 & 0x80u) == 0)
            v71 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
          else
            v71 = v24[-1].__r_.__value_.__l.__size_;
          v72 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          v73 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v72 = v101.__r_.__value_.__l.__size_;
          v74 = (std::string *)(a3 + 8);
          if (v71 == v72)
          {
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v75 = &v101;
            else
              v75 = (std::string *)v101.__r_.__value_.__r.__words[0];
            if ((v69 & 0x80) != 0)
            {
              v83 = memcmp(v24[-1].__r_.__value_.__l.__data_, v75, v24[-1].__r_.__value_.__l.__size_);
              v74 = (std::string *)(a3 + 8);
              if (v83)
                goto LABEL_137;
            }
            else if (*((_BYTE *)&v24[-1].__r_.__value_.__s + 23))
            {
              v76 = v24 - 1;
              while (v76->__r_.__value_.__s.__data_[0] == v75->__r_.__value_.__s.__data_[0])
              {
                v76 = (std::string *)((char *)v76 + 1);
                v75 = (std::string *)((char *)v75 + 1);
                if (!--v69)
                  goto LABEL_138;
              }
              v74 = (std::string *)(a3 + 8);
              goto LABEL_137;
            }
          }
          else
          {
LABEL_137:
            std::string::operator=(v24 - 1, v74);
            v73 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          }
LABEL_138:
          if (v73 < 0)
            goto LABEL_84;
          goto LABEL_85;
        }
        v28 = (_QWORD *)(v27 - 24);
        v29 = *(char *)(v27 - 1);
        if (v29 < 0)
        {
          if (*(_QWORD *)(v27 - 16) != 1)
            goto LABEL_114;
          v28 = (_QWORD *)*v28;
        }
        else if (v29 != 1)
        {
          goto LABEL_114;
        }
        if (*(_BYTE *)v28 == 35)
          goto LABEL_29;
LABEL_114:
        v66 = v23[2];
        if ((unint64_t)v24 >= v66)
        {
          v77 = ((uint64_t)v24 - *v23) >> 6;
          if ((unint64_t)(v77 + 1) >> 58)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v78 = v66 - *v23;
          v79 = v78 >> 5;
          if (v78 >> 5 <= (unint64_t)(v77 + 1))
            v79 = v77 + 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFC0)
            v80 = 0x3FFFFFFFFFFFFFFLL;
          else
            v80 = v79;
          v103 = (uint64_t)(v23 + 2);
          if (v80)
            v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(v80);
          else
            v81 = 0;
          v84 = (_OWORD *)(v80 + (v77 << 6));
          v101.__r_.__value_.__r.__words[0] = v80;
          v101.__r_.__value_.__l.__size_ = (std::string::size_type)v84;
          v102 = (char *)(v80 + (v81 << 6));
          *v84 = 0u;
          v84[1] = 0u;
          v84[2] = 0u;
          v84[3] = 0u;
          v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v84 + 4);
          std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer(v23, &v101);
          v67 = (std::string::size_type *)v23[1];
          std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)&v101);
          v68 = *a1;
        }
        else
        {
          *(_OWORD *)&v24[1].__r_.__value_.__r.__words[1] = 0u;
          *(_OWORD *)&v24[2].__r_.__value_.__l.__data_ = 0u;
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = 0u;
          *(_OWORD *)&v24->__r_.__value_.__r.__words[2] = 0u;
          v67 = &v24[2].__r_.__value_.__r.__words[2];
          v68 = (uint64_t)v23;
          v23[1] = (uint64_t)&v24[2].__r_.__value_.__r.__words[2];
        }
        v23[1] = (uint64_t)v67;
        MEMORY[0x1DF0ECA80](*(_QWORD *)(v68 + 8) - 24, &byte_1DEBD87CE);
        v85 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
        if (v85 < 0)
        {
          if (v22->__r_.__value_.__l.__size_ == 1)
          {
            v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
LABEL_159:
            if (v22->__r_.__value_.__s.__data_[0] == 35)
            {
              v86 = *(_QWORD *)(*a1 + 8);
              std::string::basic_string[abi:ne180100]<0>(&v104, "#");
              v87 = *(_QWORD *)(v86 - 32);
              v88 = *(_QWORD *)(v86 - 40);
              if (v88 >= v87)
              {
                v91 = *(_QWORD *)(v86 - 48);
                v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - v91) >> 3);
                v93 = v92 + 1;
                if (v92 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - v91) >> 3);
                if (2 * v94 > v93)
                  v93 = 2 * v94;
                if (v94 >= 0x555555555555555)
                  v95 = 0xAAAAAAAAAAAAAAALL;
                else
                  v95 = v93;
                v103 = v86 - 32;
                if (v95)
                  v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v95);
                else
                  v96 = 0;
                v97 = v95 + 24 * v92;
                v101.__r_.__value_.__r.__words[0] = v95;
                v101.__r_.__value_.__l.__size_ = v97;
                v102 = (char *)(v95 + 24 * v96);
                v98 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
                *(_QWORD *)(v97 + 16) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
                *(_OWORD *)v97 = v98;
                memset(&v104, 0, sizeof(v104));
                v101.__r_.__value_.__r.__words[2] = v97 + 24;
                std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer((uint64_t *)(v86 - 48), &v101);
                v90 = *(_QWORD *)(v86 - 40);
                std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer((uint64_t)&v101);
              }
              else
              {
                v89 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
                *(_QWORD *)(v88 + 16) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
                *(_OWORD *)v88 = v89;
                memset(&v104, 0, sizeof(v104));
                v90 = v88 + 24;
                *(_QWORD *)(v86 - 40) = v88 + 24;
              }
              *(_QWORD *)(v86 - 40) = v90;
              if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v104.__r_.__value_.__l.__data_);
            }
          }
        }
        else if (v85 == 1)
        {
          goto LABEL_159;
        }
LABEL_112:
        begin = v99.__begin_;
      }
    }
  }
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
}

void sub_1DE93C134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void Agglomerate::set<TokenPronunciationItem>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void ***v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void **v16;

  v10 = &v16;
  v4 = v3[5];
  if (v4)
  {
    Agglomerate::ItemHolder<TokenPronunciationItem>::ItemHolder((uint64_t)&v10, a2);
    if ((void ****)v4 != &v10)
      std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)(v4 + 8), v11, v12, 0xAAAAAAAAAAAAAAABLL * (v12 - v11));
    v5 = (void **)(v4 + 32);
    if (*(char *)(v4 + 55) < 0)
      operator delete(*v5);
    v6 = v13;
    *(_QWORD *)(v4 + 48) = v14;
    *(_OWORD *)v5 = v6;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
    *(_OWORD *)(v4 + 56) = v15;
    v10 = (void ***)off_1EA9230C8;
    v16 = (void **)&v11;
    std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
  else
  {
    v7 = v3;
    v8 = operator new();
    Agglomerate::ItemHolder<TokenPronunciationItem>::ItemHolder(v8, a2);
    v9 = v7[5];
    v7[5] = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void sub_1DE93C2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C4017BDD84ALL);
  _Unwind_Resume(a1);
}

void TokenPronunciationItem::~TokenPronunciationItem(void **this)
{
  void **v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t Agglomerate::ItemHolder<TokenPronunciationItem>::ItemHolder(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA9230C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((_QWORD *)(a1 + 8), *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_1DE93C418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenPronunciationItem>::~ItemHolder(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1EA9230C8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)(a1 + 8);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void Agglomerate::ItemHolder<TokenPronunciationItem>::~ItemHolder(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_1EA9230C8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = (void **)(a1 + 8);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE93C54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v4, *v6, v6[1], (v6[1] - *v6) >> 6);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DE93C654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v2 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

_QWORD *std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<PhonemeRepresentation::Syllable>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE93C800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

char *std::vector<PhonemeRepresentation::Syllable>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      v10 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + v7 + 8);
      *(_QWORD *)v8 = v10;
      *(_QWORD *)(a4 + v7 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      std::vector<PhonemeRepresentation::Phoneme>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::string *)(a4 + v7 + 16), *(__int128 **)(a2 + v7 + 16), *(__int128 **)(a2 + v7 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v7 + 24) - *(_QWORD *)(a2 + v7 + 16)) >> 3));
      v11 = (std::string *)(a4 + v7 + 40);
      v12 = (const std::string::value_type **)(a2 + v7 + 40);
      if (*(char *)(a2 + v7 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(a2 + v7 + 48));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DE93C99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  while (v3 != v2)
  {
    v3 -= 64;
    std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<PhonemeRepresentation::Phoneme>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1DE93CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1DE93CB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

void std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void split_by_delimiter(std::vector<std::string> *a1, std::string *__str, unsigned __int8 a3)
{
  std::string::size_type v6;
  std::allocator<std::string> *p_end_cap;
  int v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  int v24;
  std::string *v25;
  std::vector<std::string>::pointer v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  int v36;
  char v37;
  std::string v38;
  std::__split_buffer<std::string> __v;

  v6 = 0;
  a1->__end_cap_.__value_ = 0;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  a1->__begin_ = 0;
  a1->__end_ = 0;
  v8 = a3;
LABEL_2:
  v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  size = __str->__r_.__value_.__l.__size_;
  if ((v9 & 0x80u) == 0)
    v11 = __str;
  else
    v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v12 = v6;
  if ((v9 & 0x80) != 0)
  {
    while (v12 < size)
    {
LABEL_9:
      if (v11->__r_.__value_.__s.__data_[v12] == v8)
      {
        std::string::basic_string(&v38, __str, v6, v12 - v6, (std::allocator<char> *)&v37);
        end = a1->__end_;
        value = a1->__end_cap_.__value_;
        if (end >= value)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
          v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a1->__begin_) >> 3);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v17;
          __v.__end_cap_.__value_ = p_end_cap;
          if (v19)
            v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v19);
          else
            v20 = 0;
          v21 = v20 + v16;
          __v.__first_ = v20;
          __v.__begin_ = v21;
          __v.__end_cap_.__value_ = &v20[v19];
          v22 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          memset(&v38, 0, sizeof(v38));
          __v.__end_ = v21 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
          v23 = a1->__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v24 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          a1->__end_ = v23;
          if (v24 < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
        }
        else
        {
          v15 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
          end->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
          a1->__end_ = end + 1;
        }
        v6 = v12 + 1;
        goto LABEL_2;
      }
      ++v12;
      if ((v9 & 0x80) == 0)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    if (v12 < v9)
      goto LABEL_9;
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  std::string::basic_string(&v38, __str, v6, size - v6, (std::allocator<char> *)&v37);
  v26 = a1->__end_;
  v25 = a1->__end_cap_.__value_;
  if (v26 >= v25)
  {
    v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)a1->__begin_) >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)a1->__begin_) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x555555555555555)
      v31 = 0xAAAAAAAAAAAAAAALL;
    else
      v31 = v29;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v31)
      v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v31);
    else
      v32 = 0;
    v33 = v32 + v28;
    __v.__first_ = v32;
    __v.__begin_ = v33;
    __v.__end_cap_.__value_ = &v32[v31];
    v34 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    v33->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
    memset(&v38, 0, sizeof(v38));
    __v.__end_ = v33 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    v35 = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v36 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
    a1->__end_ = v35;
    if (v36 < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  else
  {
    v27 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    v26->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    a1->__end_ = v26 + 1;
  }
}

void sub_1DE93CF90(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::__split_buffer<std::string> *a9, uint64_t a10, void *__pa, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 24;
      v6 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  int v9;
  __n128 result;

  while (a3 != a5)
  {
    v8 = *(_QWORD *)(a3 - 64);
    a3 -= 64;
    v9 = *(_DWORD *)(a3 + 8);
    *(_QWORD *)(a7 - 64) = v8;
    a7 -= 64;
    *(_DWORD *)(a7 + 8) = v9;
    *(_QWORD *)(a7 + 24) = 0;
    *(_QWORD *)(a7 + 32) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    *(_OWORD *)(a7 + 16) = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a7 + 32) = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    result = *(__n128 *)(a3 + 40);
    *(_QWORD *)(a7 + 56) = *(_QWORD *)(a3 + 56);
    *(__n128 *)(a7 + 40) = result;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  return result;
}

double std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  __int128 v8;
  double result;

  while (a3 != a5)
  {
    *(_QWORD *)(a7 - 24) = 0;
    *(_QWORD *)(a7 - 16) = 0;
    a7 -= 24;
    *(_QWORD *)(a7 + 16) = 0;
    v8 = *(_OWORD *)(a3 - 3);
    a3 -= 3;
    result = *(double *)&v8;
    *(_OWORD *)a7 = v8;
    *(_QWORD *)(a7 + 16) = a3[2];
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Word *,PhonemeRepresentation::Word *,PhonemeRepresentation::Word *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (v5 != (uint64_t *)a3)
        std::vector<PhonemeRepresentation::Syllable>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(a3, *v5, v5[1], (v5[1] - *v5) >> 6);
      v5 += 3;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<PhonemeRepresentation::Syllable>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    std::vector<PhonemeRepresentation::Syllable>::__vdeallocate((void **)a1);
    if (a4 >> 58)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<PhonemeRepresentation::Syllable>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = a2 + (v14 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *>(a2, v15, (uint64_t)v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *>(a2, a3, (uint64_t)v9);
  for (i = *(_QWORD *)(a1 + 8); i != v16; std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](i))
    i -= 64;
  *(_QWORD *)(a1 + 8) = v16;
}

void sub_1DE93D3A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE93D3A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v5 = a1 + 16;
    do
    {
      v7 = v5 - 16;
      v6 = *(_QWORD *)(v5 - 16);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v5 - 8);
      *(_QWORD *)a3 = v6;
      if (a3 != v5 - 16)
        std::vector<PhonemeRepresentation::Phoneme>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::vector<std::string> *)(a3 + 16), *(std::string **)v5, *(__int128 **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v5 + 24));
      a3 += 64;
      v5 += 64;
    }
    while (v7 + 64 != a2);
  }
  return a3;
}

void std::vector<PhonemeRepresentation::Syllable>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 64;
        std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<PhonemeRepresentation::Phoneme>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1DE93D648(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<PhonemeRepresentation::Syllable>::construct[abi:ne180100]<PhonemeRepresentation::Syllable,PhonemeRepresentation::Syllable const&>(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t *std::vector<PhonemeRepresentation::Word>::push_back[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[5];

  v3 = result;
  v4 = result + 2;
  v5 = result[2];
  v6 = (_QWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *result) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v14[4] = v4;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 24 * v8);
    v14[0] = v11;
    v14[1] = v13;
    v14[3] = v11 + 24 * v12;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)v13 = *(_OWORD *)a2;
    v13[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v14[2] = v13 + 3;
    std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(v3, v14);
    v7 = (_QWORD *)v3[1];
    result = (uint64_t *)std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v6[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v7 = v6 + 3;
  }
  v3[1] = (uint64_t)v7;
  return result;
}

void PhonemeRepresentation::Syllable::~Syllable(void **this)
{
  void **v2;

  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<PhonemeRepresentation::Syllable>::construct[abi:ne180100]<PhonemeRepresentation::Syllable,PhonemeRepresentation::Syllable const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<PhonemeRepresentation::Phoneme>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::string *)(a1 + 16), (__int128 *)a2[2], (__int128 *)a2[3], 0xAAAAAAAAAAAAAAABLL * ((a2[3] - a2[2]) >> 3));
  v5 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)a2[5], a2[6]);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1DE93D8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<FSTGrammar>::reset[abi:ne180100]<FSTGrammar,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA936AA8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DE93D9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<FSTGrammar *,std::shared_ptr<FSTGrammar>::__shared_ptr_default_delete<FSTGrammar,FSTGrammar>,std::allocator<FSTGrammar>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<FSTGrammar *,std::shared_ptr<FSTGrammar>::__shared_ptr_default_delete<FSTGrammar,FSTGrammar>,std::allocator<FSTGrammar>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<FSTGrammar *,std::shared_ptr<FSTGrammar>::__shared_ptr_default_delete<FSTGrammar,FSTGrammar>,std::allocator<FSTGrammar>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<Pronounce_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Pronounce_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Pronounce_FSTImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void JoinPronunciationsImpl::~JoinPronunciationsImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void JoinPronunciationsImpl::generate_tokens(JoinPronunciationsImpl *this)
{
  JoinPronunciationsImpl *v1;
  char v2;
  uint64_t v3;
  std::string::size_type size;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  std::string::size_type v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  int v14;
  const std::string::value_type *p_buf;
  std::string::size_type v16;
  std::string::pointer data;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  const std::string *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  int v98;
  std::string *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  __int128 v111;
  std::string v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  __int128 buf;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;

  v1 = this;
  v2 = 0;
  v119 = *MEMORY[0x1E0C80C00];
  v96 = (_QWORD *)((char *)this + 32);
  v113 = 0;
  v114 = 0;
  memset(&v112, 0, sizeof(v112));
  while (!*((_BYTE *)v1 + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v1 + 2) + 16))(&v111, *((_QWORD *)v1 + 2), 0);
    if ((_QWORD)v111)
    {
      if ((v2 & (v3 != 0)) != 1)
        goto LABEL_8;
      size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v112.__r_.__value_.__l.__size_;
      if (size)
      {
LABEL_8:
        (*(void (**)(_QWORD))(**((_QWORD **)v1 + 2) + 32))(*((_QWORD *)v1 + 2));
        v5 = v111;
        if ((_QWORD *)(v5 + 8) == v6 || (v7 = *(_DWORD *)(v6[5] + 8), v7 == 1853189228))
        {
          v98 = 0;
        }
        else if (v7 == 1952807028)
        {
          v8 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v8 = v112.__r_.__value_.__l.__size_;
          if (v8)
          {
            if ((_QWORD *)(v5 + 8) != v9)
            {
              v10 = v9[5];
              v11 = v113;
              if ((_QWORD *)(v11 + 8) == v12)
                v13 = 0;
              else
                v13 = (std::string *)(v12[5] + 8);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v112.__r_.__value_.__l.__data_, (const void **)(v10 + 32), (uint64_t)&buf);
              if (v116 >= 0)
                p_buf = (const std::string::value_type *)&buf;
              else
                p_buf = (const std::string::value_type *)buf;
              if (v116 >= 0)
                v16 = HIBYTE(v116);
              else
                v16 = *((_QWORD *)&buf + 1);
              std::string::append(v13 + 1, p_buf, v16);
              if (SHIBYTE(v116) < 0)
                operator delete((void *)buf);
              data = v13[2].__r_.__value_.__l.__data_;
              v18 = &data[v13[2].__r_.__value_.__l.__size_];
              if ((unint64_t)v18 <= *(_QWORD *)(v10 + 64) + *(_QWORD *)(v10 + 56))
                v18 = (char *)(*(_QWORD *)(v10 + 64) + *(_QWORD *)(v10 + 56));
              v13[2].__r_.__value_.__l.__size_ = v18 - data;
              v19 = (uint64_t *)v13->__r_.__value_.__r.__words[0];
              v20 = (uint64_t *)v13->__r_.__value_.__l.__size_;
              if ((uint64_t *)v13->__r_.__value_.__l.__data_ == v20)
              {
                v108 = 0;
                v109 = 0;
                v110 = 0;
                std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(&v108, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3));
              }
              else
              {
                v21 = *(_QWORD *)(v10 + 8);
                v22 = *(_QWORD *)(v10 + 16);
                v109 = 0;
                v110 = 0;
                v108 = 0;
                std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(&v108, v19, v20, 0xAAAAAAAAAAAAAAABLL * (v20 - v19));
                if (v21 != v22)
                {
                  v99 = v13;
                  v95 = v10;
                  v23 = *(_QWORD *)(v10 + 8);
                  v25 = *(uint64_t **)v23;
                  v24 = *(_QWORD *)(v23 + 8);
                  v26 = v24 - *(_QWORD *)v23;
                  if (v26 < 1)
                    goto LABEL_72;
                  v27 = v109;
                  v28 = v26 >> 6;
                  v29 = *(v109 - 3);
                  v30 = *(v109 - 2);
                  v31 = (uint64_t)(v30 - v29) >> 6;
                  v32 = v29 + ((v30 - v29) & 0xFFFFFFFFFFFFFFC0);
                  v33 = *(v109 - 1);
                  v105 = v109 - 1;
                  if (v28 <= (uint64_t)(v33 - v30) >> 6)
                  {
                    v93 = *(v109 - 3);
                    v94 = (uint64_t)(v30 - v29) >> 6;
                    v38 = (uint64_t)(v30 - v32) >> 6;
                    if (v38 >= v28)
                    {
                      v106 = (uint64_t)&v25[8 * v28];
                      v39 = *(v109 - 2);
                    }
                    else
                    {
                      v106 = (uint64_t)&v25[8 * v38];
                      v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable*>((uint64_t)(v109 - 1), v106, v24, v30);
                      *(v27 - 2) = v39;
                      if ((uint64_t)(v30 - v32) < 1)
                        goto LABEL_72;
                    }
                    v40 = v39 - (v28 << 6);
                    v41 = v39;
                    while (v40 < v30)
                    {
                      v42 = *(_QWORD *)v40;
                      *(_DWORD *)(v41 + 8) = *(_DWORD *)(v40 + 8);
                      *(_QWORD *)v41 = v42;
                      *(_QWORD *)(v41 + 24) = 0;
                      *(_QWORD *)(v41 + 32) = 0;
                      *(_QWORD *)(v41 + 16) = 0;
                      *(_OWORD *)(v41 + 16) = *(_OWORD *)(v40 + 16);
                      *(_QWORD *)(v41 + 32) = *(_QWORD *)(v40 + 32);
                      *(_QWORD *)(v40 + 16) = 0;
                      *(_QWORD *)(v40 + 24) = 0;
                      *(_QWORD *)(v40 + 32) = 0;
                      v43 = *(_OWORD *)(v40 + 40);
                      *(_QWORD *)(v41 + 56) = *(_QWORD *)(v40 + 56);
                      *(_OWORD *)(v41 + 40) = v43;
                      *(_QWORD *)(v40 + 48) = 0;
                      *(_QWORD *)(v40 + 56) = 0;
                      *(_QWORD *)(v40 + 40) = 0;
                      v41 += 64;
                      v40 += 64;
                    }
                    v44 = v32 + (v28 << 6);
                    *(v27 - 2) = v41;
                    if (v39 != v44)
                    {
                      v45 = 0;
                      v46 = (v39 - v44) >> 6;
                      v100 = v93 + (v94 << 6) + (v46 << 6);
                      v103 = -64 * v46;
                      do
                      {
                        v47 = v100 + v45;
                        v48 = v39;
                        v49 = v39 + v45;
                        v50 = *(_QWORD *)(v100 + v45 - 64);
                        *(_DWORD *)(v49 - 56) = *(_DWORD *)(v100 + v45 - 56);
                        *(_QWORD *)(v49 - 64) = v50;
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v39 + v45 - 48));
                        *(_OWORD *)(v49 - 48) = *(_OWORD *)(v100 + v45 - 48);
                        *(_QWORD *)(v49 - 32) = *(_QWORD *)(v100 + v45 - 32);
                        *(_QWORD *)(v47 - 48) = 0;
                        *(_QWORD *)(v47 - 40) = 0;
                        *(_QWORD *)(v47 - 32) = 0;
                        v51 = (void **)(v49 - 24);
                        if (*(char *)(v49 - 1) < 0)
                          operator delete(*v51);
                        v45 -= 64;
                        v52 = *(_OWORD *)(v47 - 24);
                        *(_QWORD *)(v49 - 8) = *(_QWORD *)(v47 - 8);
                        *(_OWORD *)v51 = v52;
                        *(_BYTE *)(v47 - 1) = 0;
                        *(_BYTE *)(v47 - 24) = 0;
                        v39 = v48;
                      }
                      while (v103 != v45);
                    }
                    if (v25 != (uint64_t *)v106)
                    {
                      v53 = v93 + (v94 << 6) + 16;
                      v54 = v25 + 3;
                      do
                      {
                        v55 = v54 - 3;
                        v56 = *((_DWORD *)v54 - 4);
                        *(_QWORD *)(v53 - 16) = *(v54 - 3);
                        *(_DWORD *)(v53 - 8) = v56;
                        if ((uint64_t *)(v53 - 16) != v54 - 3)
                          std::vector<PhonemeRepresentation::Phoneme>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::vector<std::string> *)v53, (std::string *)*(v54 - 1), (__int128 *)*v54, 0xAAAAAAAAAAAAAAABLL * ((*v54 - *(v54 - 1)) >> 3));
                        std::string::operator=((std::string *)(v53 + 24), (const std::string *)(v54 + 2));
                        v53 += 64;
                        v54 += 8;
                      }
                      while (v55 + 8 != (uint64_t *)v106);
                    }
                  }
                  else
                  {
                    v34 = v31 + v28;
                    if ((unint64_t)(v31 + v28) >> 58)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v35 = v33 - v29;
                    if (v35 >> 5 > v34)
                      v34 = v35 >> 5;
                    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFC0)
                      v36 = 0x3FFFFFFFFFFFFFFLL;
                    else
                      v36 = v34;
                    v118 = v109 - 1;
                    v102 = v109;
                    if (v36)
                      v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(v36);
                    else
                      v37 = 0;
                    v57 = v36 + (v31 << 6);
                    *(_QWORD *)&buf = v36;
                    *((_QWORD *)&buf + 1) = v57;
                    v116 = v57;
                    v117 = v36 + (v37 << 6);
                    v58 = v28 << 6;
                    v59 = v57 + (v28 << 6);
                    do
                    {
                      std::allocator<PhonemeRepresentation::Syllable>::construct[abi:ne180100]<PhonemeRepresentation::Syllable,PhonemeRepresentation::Syllable const&>(v57, v25);
                      v57 += 64;
                      v25 += 8;
                      v58 -= 64;
                    }
                    while (v58);
                    v116 = v59;
                    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>>((uint64_t)v105, v32, v32, *(v102 - 3), *(v102 - 3), *((uint64_t *)&buf + 1), *((uint64_t *)&buf + 1));
                    *((_QWORD *)&buf + 1) = v60;
                    v61 = *(v102 - 2);
                    v62 = v116;
                    if (v32 != v61)
                    {
                      do
                      {
                        v63 = *(_QWORD *)v32;
                        *(_DWORD *)(v62 + 8) = *(_DWORD *)(v32 + 8);
                        *(_QWORD *)v62 = v63;
                        *(_QWORD *)(v62 + 24) = 0;
                        *(_QWORD *)(v62 + 32) = 0;
                        *(_QWORD *)(v62 + 16) = 0;
                        *(_OWORD *)(v62 + 16) = *(_OWORD *)(v32 + 16);
                        *(_QWORD *)(v62 + 32) = *(_QWORD *)(v32 + 32);
                        *(_QWORD *)(v32 + 16) = 0;
                        *(_QWORD *)(v32 + 24) = 0;
                        *(_QWORD *)(v32 + 32) = 0;
                        v64 = *(_OWORD *)(v32 + 40);
                        *(_QWORD *)(v62 + 56) = *(_QWORD *)(v32 + 56);
                        *(_OWORD *)(v62 + 40) = v64;
                        *(_QWORD *)(v32 + 48) = 0;
                        *(_QWORD *)(v32 + 56) = 0;
                        *(_QWORD *)(v32 + 40) = 0;
                        v62 += 64;
                        v32 += 64;
                      }
                      while (v32 != v61);
                      v60 = *((_QWORD *)&buf + 1);
                    }
                    v116 = v62;
                    v65 = *(v102 - 3);
                    *(v102 - 3) = v60;
                    *((_QWORD *)&buf + 1) = v65;
                    v66 = *(v102 - 2);
                    *(v102 - 2) = v116;
                    v116 = v66;
                    v67 = *(v102 - 1);
                    *(v102 - 1) = v117;
                    v117 = v67;
                    *(_QWORD *)&buf = *((_QWORD *)&buf + 1);
                    std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)&buf);
                  }
LABEL_72:
                  std::vector<PhonemeRepresentation::Word>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PhonemeRepresentation::Word const*>,std::__wrap_iter<PhonemeRepresentation::Word const*>>((uint64_t *)&v108, (uint64_t)v109, (uint64_t *)(*(_QWORD *)(v95 + 8) + 24), *(uint64_t **)(v95 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v95 + 16) - (*(_QWORD *)(v95 + 8) + 24)) >> 3));
                  v13 = v99;
                }
              }
              if (v13 != (std::string *)&v108)
                std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v13, v108, v109, 0xAAAAAAAAAAAAAAABLL * (v109 - v108));
              *(_QWORD *)&buf = &v108;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            }
          }
          else if (v3)
          {
            std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v113, v5, *((uint64_t *)&v111 + 1));
          }
          v68 = v111;
          if ((_QWORD *)(v68 + 8) == v69)
            v70 = 0;
          else
            v70 = (const std::string *)(v69[5] + 8);
          std::string::operator=(&v112, v70 + 1);
          v98 = 0;
          v5 = v111;
        }
        else
        {
          v98 = 1;
        }
        if ((_QWORD *)(v5 + 8) != v71)
        {
          v72 = v71[5];
          v73 = *(_QWORD **)(v72 + 8);
          v101 = *(_QWORD **)(v72 + 16);
          if (v73 != v101)
          {
            v74 = **((_QWORD **)this + 13) + 192;
            do
            {
              v76 = *v73;
              v75 = v73[1];
              v104 = v73;
              v107 = v75;
              while (v76 != v75)
              {
                v77 = *(_QWORD *)(v76 + 16);
                if (*(_QWORD *)(v76 + 24) != v77)
                {
                  v78 = 0;
                  do
                  {
                    if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v74, (const void **)(v77 + 24 * v78)))
                    {
                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                      v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                      {
                        v81 = *(_QWORD *)(v76 + 16) + 24 * v78;
                        if (*(char *)(v81 + 23) < 0)
                          v81 = *(_QWORD *)v81;
                        LODWORD(buf) = 136315138;
                        *(_QWORD *)((char *)&buf + 4) = v81;
                      }
                      v82 = *(_QWORD *)(v76 + 16) + 24 * v78;
                      if (*(char *)(v82 + 23) < 0)
                        v82 = *(_QWORD *)v82;
                      v83 = *(_QWORD *)(v76 + 24);
                      v84 = *(_QWORD *)(v76 + 16) + 24 * v78;
                      v85 = v84 + 24;
                      if (v84 + 24 != v83)
                      {
                        do
                        {
                          if (*(char *)(v84 + 23) < 0)
                            operator delete(*(void **)v84);
                          *(_OWORD *)v84 = *(_OWORD *)(v84 + 24);
                          *(_QWORD *)(v84 + 16) = *(_QWORD *)(v84 + 40);
                          *(_BYTE *)(v84 + 47) = 0;
                          v86 = v84 + 48;
                          *(_BYTE *)(v84 + 24) = 0;
                          v84 += 24;
                        }
                        while (v86 != v83);
                        v85 = *(_QWORD *)(v76 + 24);
                      }
                      while (v85 != v84)
                      {
                        if (*(char *)(v85 - 1) < 0)
                          operator delete(*(void **)(v85 - 24));
                        v85 -= 24;
                      }
                      *(_QWORD *)(v76 + 24) = v84;
                      --v78;
                    }
                    else
                    {
                      v84 = *(_QWORD *)(v76 + 24);
                    }
                    ++v78;
                    v77 = *(_QWORD *)(v76 + 16);
                  }
                  while (v78 < 0xAAAAAAAAAAAAAAABLL * ((v84 - v77) >> 3));
                }
                v76 += 64;
                v75 = v107;
              }
              v73 = v104 + 3;
            }
            while (v104 + 3 != v101);
          }
        }
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v96, &v111);
        v1 = this;
        v2 = 1;
        v14 = v98;
        goto LABEL_111;
      }
      v2 = 1;
      v14 = 1;
    }
    else
    {
      v14 = 1;
      *((_BYTE *)v1 + 8) = 1;
    }
LABEL_111:
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (!*((_QWORD *)&v111 + 1))
      goto LABEL_115;
    v88 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
      if (v14)
        break;
    }
    else
    {
LABEL_115:
      if (v14)
        break;
    }
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  v90 = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_1DE93E448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v33 - 16) = v34;
  *(_QWORD *)(v35 - 152) = &a22;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 152));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__erase_unique<std::type_index>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;

  v3 = (uint64_t *)(a1 + 1);
  v2 = a1[1];
  if (v2)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = (uint64_t *)(a1 + 1);
    v7 = a1[1];
    do
    {
      v8 = std::type_info::before[abi:ne180100](*(_QWORD *)(v7[4] + 8), v5);
      v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)v7;
        v6 = v7;
      }
      v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && !std::type_info::before[abi:ne180100](v5, *(_QWORD *)(v6[4] + 8)))
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      v14 = v6[5];
      v6[5] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      operator delete(v6);
    }
  }
}

void MapPronunciationsImpl::~MapPronunciationsImpl(void **this)
{
  *this = off_1EA91FEB8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  FrontendModule::~FrontendModule(this);
}

{
  *this = off_1EA91FEB8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void MapPronunciationsImpl::generate_tokens(MapPronunciationsImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  if (*((_BYTE *)this + 8))
    return;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v21, *((_QWORD *)this + 2), 0);
  v2 = v21;
  if (!(_QWORD)v21)
  {
    *((_BYTE *)this + 8) = 1;
    goto LABEL_28;
  }
  if ((_QWORD *)(v2 + 8) != v3)
  {
    v4 = v3[5];
    v7 = *(_DWORD *)(v4 + 8);
    v6 = (int *)(v4 + 8);
    v5 = v7;
    if (v7 == 1718642798)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      MapPronunciationsImpl::translate_pronunciation((uint64_t)this, v2, (uint64_t)v6);
      if (!v8)
      {
        v13 = 1885892462;
        goto LABEL_26;
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      v13 = 1885892462;
      if (v17)
        goto LABEL_26;
      goto LABEL_23;
    }
    if (v5 == 1718909044)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      MapPronunciationsImpl::translate_pronunciation((uint64_t)this, v2, (uint64_t)v6);
      if (!v8)
      {
        v13 = 1952807028;
        goto LABEL_26;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      v13 = 1952807028;
      if (v12)
        goto LABEL_26;
LABEL_23:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
LABEL_26:
      *v6 = v13;
    }
  }
  std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v21);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
LABEL_28:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1DE93E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void MapPronunciationsImpl::translate_pronunciation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 *environment;
  __int128 *v9;
  uint64_t *v10;
  _QWORD *shared_component;
  const std::string::value_type **v12;
  std::string::size_type v13;
  uint64_t v14;
  size_t size;
  std::string *v16;
  std::string *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  void *v26[2];
  char v27;
  std::string v28;
  void *v29[2];
  char v30;

  if ((_QWORD *)(a2 + 8) == v6)
    return;
  v7 = v6[5];
  environment = EnvironmentBroker::get_environment(*(uint64_t ***)(a1 + 144), (__int128 *)(*(_QWORD *)(a3 + 48) + 40));
  if (environment == **(__int128 ***)(*(_QWORD *)(a1 + 144) + 24))
    return;
  v9 = environment;
  v10 = (uint64_t *)(v7 + 8);
  shared_component = (_QWORD *)FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>((uint64_t)environment);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*shared_component + 24))(v29, *shared_component, v7 + 8);
  v12 = (const std::string::value_type **)v9 + 3;
  if (*((char *)v9 + 47) < 0)
  {
    v13 = *((_QWORD *)v9 + 4);
    if (v13)
    {
      std::string::__init_copy_ctor_external(&v28, *v12, v13);
      goto LABEL_9;
    }
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v28, "internal");
    goto LABEL_9;
  }
  if (!*((_BYTE *)v9 + 47))
    goto LABEL_8;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)v12;
  v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 5);
LABEL_9:
  v14 = *(_QWORD *)(a1 + 128);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    size = v28.__r_.__value_.__l.__size_;
  v16 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, size + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v28;
    else
      v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    memmove(v16, v17, size);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + size) = 58;
  v18 = *((char *)v9 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)v9;
  else
    v19 = *(const std::string::value_type **)v9;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v9 + 23);
  else
    v20 = *((_QWORD *)v9 + 1);
  v21 = std::string::append(&v23, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v25 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v14 + 24))(v26, v14, v29, __p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  (*(void (**)(void **__return_ptr, _QWORD, void **))(***(_QWORD ***)(a1 + 136) + 16))(__p, **(_QWORD **)(a1 + 136), v26);
  if (v10 != (uint64_t *)__p)
    std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v10, (uint64_t *)__p[0], (uint64_t *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
}

void sub_1DE93EAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  a10 = &a16;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 **v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v2 = (_QWORD *)(a1 + 168);
  {
    if (v2 == v3)
      return 0;
    else
      return v3[5] + 8;
  }
  v45 = &v40;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1EA922E08;
  v6[1] = 0;
  v7 = v6 + 1;
  v6[2] = 0;
  v8 = (uint64_t *)(a1 + 24);
  v9 = *(char *)(a1 + 47);
  if (v9 < 0)
  {
    if (*(_QWORD *)(a1 + 32) != 7)
    {
LABEL_14:
      v13 = operator new();
      *(_QWORD *)(v13 + 152) = 0;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_DWORD *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_QWORD *)(v13 + 144) = v13 + 152;
      *(_QWORD *)(v13 + 176) = 0;
      *(_QWORD *)(v13 + 160) = 0;
      *(_QWORD *)(v13 + 168) = v13 + 176;
      *(_QWORD *)(v13 + 208) = 0;
      *(_QWORD *)(v13 + 200) = 0;
      *(_QWORD *)(v13 + 184) = 0;
      *(_QWORD *)(v13 + 192) = v13 + 200;
      *(_BYTE *)(v13 + 216) = 0;
      *(_QWORD *)v13 = &off_1EA91FF70;
      v14 = (_QWORD *)operator new();
      *v14 = &off_1EA936B18;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = v13;
      v15 = (std::__shared_weak_count *)v6[2];
      v6[1] = v13;
      v6[2] = v14;
      if (!v15)
        goto LABEL_23;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      goto LABEL_17;
    }
    v8 = (uint64_t *)*v8;
  }
  else if (v9 != 7)
  {
    goto LABEL_14;
  }
  v10 = *(_DWORD *)v8;
  v11 = *(_DWORD *)((char *)v8 + 3);
  if (v10 != 1634938232 || v11 != 1634757985)
    goto LABEL_14;
  v18 = operator new();
  *(_QWORD *)(v18 + 152) = 0;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_DWORD *)(v18 + 40) = 0;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_QWORD *)(v18 + 144) = v18 + 152;
  *(_QWORD *)(v18 + 176) = 0;
  *(_QWORD *)(v18 + 160) = 0;
  *(_QWORD *)(v18 + 168) = v18 + 176;
  *(_QWORD *)(v18 + 208) = 0;
  *(_QWORD *)(v18 + 200) = 0;
  *(_QWORD *)(v18 + 184) = 0;
  *(_QWORD *)(v18 + 192) = v18 + 200;
  *(_BYTE *)(v18 + 216) = 0;
  *(_QWORD *)v18 = &off_1EA91FFB0;
  v19 = (_QWORD *)operator new();
  *v19 = &off_1EA936B50;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v18;
  v15 = (std::__shared_weak_count *)v6[2];
  v6[1] = v18;
  v6[2] = v19;
  if (!v15)
    goto LABEL_23;
  v20 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v20);
  while (__stlxr(v17 - 1, v20));
LABEL_17:
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_23:
  v21 = *(unsigned __int8 *)(a1 + 144);
  v45 = (unsigned __int8 **)(a1 + 144);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0x8000000000000000;
  if (v21 == 1)
  {
    v23 = *(_QWORD *)(a1 + 152);
    v24 = v23 + 8;
    v46 = (char *)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 8);
    if (!v25)
      goto LABEL_33;
    v26 = v23 + 8;
    do
    {
      v27 = std::string::compare((const std::string *)(v25 + 32), "phonemes");
      v28 = (uint64_t *)(v25 + 8);
      if (v27 >= 0)
      {
        v28 = (uint64_t *)v25;
        v26 = v25;
      }
      v25 = *v28;
    }
    while (*v28);
    if (v26 == v24 || std::string::compare((const std::string *)(v26 + 32), "phonemes") >= 1)
LABEL_33:
      v26 = v24;
    v46 = (char *)v26;
    v21 = *(unsigned __int8 *)(a1 + 144);
  }
  else
  {
    if (v21 == 2)
    {
      v22 = *(_QWORD *)(a1 + 152);
      v47 = *(_QWORD *)(v22 + 8);
      v40 = (unsigned __int8 *)(a1 + 144);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0x8000000000000000;
LABEL_39:
      v42 = *(_QWORD *)(v22 + 8);
      goto LABEL_42;
    }
    v49 = 1;
  }
  v40 = (unsigned __int8 *)(a1 + 144);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0x8000000000000000;
  if (v21 == 1)
  {
    v41 = *(_QWORD *)(a1 + 152) + 8;
  }
  else
  {
    if (v21 == 2)
    {
      v22 = *(_QWORD *)(a1 + 152);
      goto LABEL_39;
    }
    v44 = 1;
  }
LABEL_42:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v45, &v40))
  {
    goto LABEL_65;
  }
  v29 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 144, "phonemes");
  v30 = (uint64_t *)v29;
  v31 = *v7;
  if (*v29 != 1)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&v45, v29);
    v37 = (uint64_t *)(v31 + 144);
    if ((unsigned __int8 ***)(v31 + 144) != &v45)
      goto LABEL_63;
    goto LABEL_64;
  }
  v32 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v29, "vowels");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&v45, v32);
  if ((unsigned __int8 ***)(v31 + 144) != &v45)
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v31 + 144), v45, &v46);
  *(_BYTE *)(v31 + 216) = 1;
  std::__tree<std::string>::destroy((uint64_t)&v45, v46);
  v33 = *v7;
  v34 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v30, "others");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&v45, v34);
  if ((unsigned __int8 ***)(v33 + 168) != &v45)
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v33 + 168), v45, &v46);
  *(_BYTE *)(v33 + 216) = 1;
  std::__tree<std::string>::destroy((uint64_t)&v45, v46);
  v45 = (unsigned __int8 **)v30;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0x8000000000000000;
  v35 = *(unsigned __int8 *)v30;
  if (v35 == 1)
  {
    v46 = (char *)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v30[1], "marks");
    v35 = *(unsigned __int8 *)v30;
  }
  else
  {
    if (v35 == 2)
    {
      v36 = *(_QWORD *)(v30[1] + 8);
      v47 = v36;
      v40 = (unsigned __int8 *)v30;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0x8000000000000000;
LABEL_58:
      v42 = v36;
      goto LABEL_61;
    }
    v49 = 1;
  }
  v40 = (unsigned __int8 *)v30;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0x8000000000000000;
  if (v35 == 1)
  {
    v41 = v30[1] + 8;
  }
  else
  {
    if (v35 == 2)
    {
      v36 = *(_QWORD *)(v30[1] + 8);
      goto LABEL_58;
    }
    v44 = 1;
  }
LABEL_61:
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v45, &v40))
  {
    v31 = *v7;
    v38 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v30, "marks");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&v45, v38);
    v37 = (uint64_t *)(v31 + 192);
    if ((unsigned __int8 ***)(v31 + 192) != &v45)
LABEL_63:
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v37, v45, &v46);
LABEL_64:
    *(_BYTE *)(v31 + 216) = 1;
    std::__tree<std::string>::destroy((uint64_t)&v45, v46);
  }
LABEL_65:
  v39 = v5[5];
  v5[5] = (uint64_t)v6;
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v6 = (_QWORD *)v5[5];
  }
  return (uint64_t)(v6 + 1);
}

void sub_1DE93F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;

  std::__tree<std::string>::destroy((uint64_t)&a14, a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v16);
  MEMORY[0x1DF0ED014](v15, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<PhonemeEncoding>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922E08;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<PhonemeEncoding>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922E08;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<JoinPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<JoinPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<JoinPronunciationsImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void JoinPronunciationsPersistentModule::~JoinPronunciationsPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<MapPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MapPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MapPronunciationsImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t FrontendEnvironment::get_shared_component_instance<TranslatePhonemes>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void **v9;

  v2 = (_QWORD *)(a1 + 168);
  {
    if (v2 == v3)
      return 0;
    else
      return v3[5] + 8;
  }
  else
  {
    v9 = &v8;
    v6 = (_QWORD *)operator new();
    *v6 = &off_1EA923008;
    v6[1] = &off_1EA91EF70;
    v6[2] = 0;
    v6[3] = 0;
    UTFRegex::UTFRegex((UTFRegex *)(v6 + 4), "\\s+");
    std::string::basic_string[abi:ne180100]<0>(v6 + 7, " ");
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), 1885892461, 1);
    v7 = v5[5];
    v5[5] = (uint64_t)v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (_QWORD *)v5[5];
    }
    return (uint64_t)(v6 + 1);
  }
}

void sub_1DE93F49C(_Unwind_Exception *a1)
{
  uint64_t v1;
  UTFRegex *v2;
  void **v3;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  UTFRegex::~UTFRegex(v2);
  MEMORY[0x1DF0ED014](v1, 0x10F3C4081FEF63BLL);
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  char **v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;

  v2 = (_QWORD *)(a1 + 168);
  {
    if (v2 == v3)
      return 0;
    else
      return v3[5] + 8;
  }
  else
  {
    v23 = &v22;
    v6 = operator new();
    *(_QWORD *)v6 = &off_1EA922F08;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (char **)(v6 + 32);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 8) = v6 + 16;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    v23 = (void **)a1;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 8), (const void **)a1, (__int128 **)&v23)[7] = 0;
    v9 = *(_QWORD **)(v6 + 40);
    v8 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v7) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v7;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v14);
      else
        v15 = 0;
      v16 = (_QWORD *)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      *v16 = a1;
      v10 = v16 + 1;
      v19 = *(char **)(v6 + 32);
      v18 = *(char **)(v6 + 40);
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v7;
      }
      *(_QWORD *)(v6 + 32) = v16;
      *(_QWORD *)(v6 + 40) = v10;
      *(_QWORD *)(v6 + 48) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = a1;
      v10 = v9 + 1;
    }
    *(_QWORD *)(v6 + 40) = v10;
    v21 = v5[5];
    v5[5] = v6;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v6 = v5[5];
    }
    return v6 + 8;
  }
}

void sub_1DE93F6A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v1 + 16));
  MEMORY[0x1DF0ED014](v1, 0x10A1C4041524607);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<EnvironmentBroker>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922F08;
  EnvironmentBroker::~EnvironmentBroker((EnvironmentBroker *)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<EnvironmentBroker>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA922F08;
  EnvironmentBroker::~EnvironmentBroker((EnvironmentBroker *)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<TranslatePhonemes>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923008;
  TranslatePhonemes::~TranslatePhonemes((TranslatePhonemes *)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<TranslatePhonemes>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923008;
  TranslatePhonemes::~TranslatePhonemes((TranslatePhonemes *)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void MapPronunciationsPersistentModule::~MapPronunciationsPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

float ParseAttr::parse_timedesignation(const std::string *a1)
{
  char v2;
  int64_t size;
  const std::string *v4;
  char *v5;
  int64_t v6;
  std::string *v7;
  char *v8;
  std::string *v9;
  char *v10;
  double v12;
  double v14;
  void *v15;
  void *v16;
  std::string v17;
  char v18;

  v2 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v2 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  v5 = (char *)v4 + size;
  if (size > 1)
  {
    v6 = size;
    v7 = (std::string *)v4;
    do
    {
      v8 = (char *)memchr(v7, 109, v6 - 1);
      if (!v8)
        break;
      if (*(_WORD *)v8 == 29549)
      {
        if (v8 == v5 || v8 - (char *)v4 == -1)
          break;
        std::string::basic_string(&v17, a1, 0, v8 - (char *)v4, (std::allocator<char> *)&v18);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v17.__r_.__value_.__r.__words[0];
          v14 = atof(v17.__r_.__value_.__l.__data_);
          operator delete(v16);
        }
        else
        {
          v14 = atof((const char *)&v17);
        }
        return v14 / 1000.0;
      }
      v7 = (std::string *)(v8 + 1);
      v6 = v5 - (char *)v7;
    }
    while (v5 - (char *)v7 > 1);
  }
  if (size >= 1)
  {
    v9 = (std::string *)v4;
    do
    {
      v10 = (char *)memchr(v9, 115, size);
      if (!v10)
        break;
      if (*v10 == 115)
      {
        if (v10 == v5 || v10 - (char *)v4 == -1)
          return nan(&byte_1DEBD87CE);
        std::string::basic_string(&v17, a1, 0, v10 - (char *)v4, (std::allocator<char> *)&v18);
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return atof((const char *)&v17);
        v15 = (void *)v17.__r_.__value_.__r.__words[0];
        v12 = atof(v17.__r_.__value_.__l.__data_);
        operator delete(v15);
        return v12;
      }
      v9 = (std::string *)(v10 + 1);
      size = v5 - (char *)v9;
    }
    while (v5 - (char *)v9 >= 1);
  }
  return nan(&byte_1DEBD87CE);
}

uint64_t ParseAttr::parse_prosodic_level(const void **a1, const void *a2, uint64_t a3)
{
  const void *v3;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const char **v8;
  const char **v9;
  uint64_t v10;
  const void **v11;
  const char **i;
  size_t v13;
  size_t v14;
  const void **v15;
  const char **v17;
  const char **v18;
  uint64_t v19;

  v3 = (const void *)*((unsigned __int8 *)a1 + 23);
  if ((char)v3 < 0)
    v3 = a1[1];
  if (!v3)
    return 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<char const*>::__init_with_size[abi:ne180100]<char const**,char const**>(&v17, a2, a3, (a3 - (uint64_t)a2) >> 3);
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = a1[1];
  if ((v5 & 0x80u) == 0)
    v7 = (const void *)*((unsigned __int8 *)a1 + 23);
  else
    v7 = a1[1];
  v8 = v17;
  if (v7)
  {
    v9 = v18;
    if (v17 != v18)
    {
      v10 = 0;
      v11 = (const void **)*a1;
      for (i = v17; i != v9; ++i)
      {
        v13 = strlen(*i);
        v14 = v13;
        if ((v5 & 0x80) != 0)
        {
          if ((const void *)v13 == v6)
          {
            v15 = v11;
            if (v6 == (const void *)-1)
              std::string::__throw_out_of_range[abi:ne180100]();
LABEL_15:
            if (!memcmp(v15, *i, v14))
              goto LABEL_18;
          }
        }
        else
        {
          v15 = a1;
          if (v14 == v5)
            goto LABEL_15;
        }
        v10 = (v10 + 1);
      }
    }
  }
  v10 = 4;
LABEL_18:
  if (v8)
  {
    v18 = v8;
    operator delete(v8);
  }
  return v10;
}

_QWORD *std::vector<char const*>::__init_with_size[abi:ne180100]<char const**,char const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE93FB18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ParseAttr::parse_prosodic_spec(std::string *a1, const void *a2, uint64_t a3, char *a4, int a5)
{
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  std::string *v12;
  int64_t size;
  int v14;
  char *v15;
  std::string *v16;
  char *v17;
  int v18;
  int64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  void *v29;
  std::string *v30;
  double v31;
  uint64_t v32;
  std::string *v33;
  char *v34;
  std::string *v35;
  char *v36;
  double v37;
  int v38;
  int64_t v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v43;
  int v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  double v49;
  double v50;
  void *v51;
  float v52;
  void *v53;
  void *v54;
  std::string v55;
  void *__p;
  void *v57;
  uint64_t v58;
  char v59;

  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<char const*>::__init_with_size[abi:ne180100]<char const**,char const**>(&__p, a2, a3, (a3 - (uint64_t)a2) >> 3);
  v8 = ParseAttr::parse_prosodic_level((const void **)&a1->__r_.__value_.__l.__data_, __p, (uint64_t)v57);
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
  v9 = 0.0;
  if (v8 == 4)
  {
    v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v14 = *(unsigned __int8 *)a1->__r_.__value_.__l.__data_;
      if (v14 == 43 || v14 == 45)
      {
        size = a1->__r_.__value_.__l.__size_;
        goto LABEL_11;
      }
    }
    else
    {
      v11 = a1->__r_.__value_.__s.__data_[0];
      if (v11 == 43 || v11 == 45)
      {
        v12 = a1;
        size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
LABEL_11:
        if (size >= 1)
        {
          v15 = (char *)v12 + size;
          v16 = v12;
          do
          {
            v17 = (char *)memchr(v16, 37, size);
            if (!v17)
              break;
            if (*v17 == 37)
            {
              if (v17 == v15 || v17 - (char *)v12 == -1)
                break;
              std::string::basic_string(&v55, a1, 0, v17 - (char *)v12, (std::allocator<char> *)&v59);
              v28 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
              v29 = (void *)v55.__r_.__value_.__r.__words[0];
              if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v30 = &v55;
              else
                v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
              v31 = atof((const char *)v30) / 100.0 + 1.0;
              if (v28 < 0)
                operator delete(v29);
              v9 = v31;
LABEL_89:
              v8 = 2;
              return v8 | ((unint64_t)LODWORD(v9) << 32);
            }
            v16 = (std::string *)(v17 + 1);
            size = v15 - (char *)v16;
          }
          while (v15 - (char *)v16 >= 1);
        }
        if (a5)
        {
          v32 = a1->__r_.__value_.__l.__size_;
          if ((v10 & 0x80u) != 0)
          {
            v33 = (std::string *)a1->__r_.__value_.__r.__words[0];
          }
          else
          {
            v32 = v10;
            v33 = a1;
          }
          if (v32 >= 2)
          {
            v34 = (char *)v33 + v32;
            v35 = v33;
            do
            {
              v36 = (char *)memchr(v35, 115, v32 - 1);
              if (!v36)
                break;
              if (*(_WORD *)v36 == 29811)
              {
                if (v36 == v34 || v36 - (char *)v33 == -1)
                  break;
                std::string::basic_string(&v55, a1, 0, v36 - (char *)v33, (std::allocator<char> *)&v59);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                {
                  v51 = (void *)v55.__r_.__value_.__r.__words[0];
                  v37 = atof(v55.__r_.__value_.__l.__data_);
                  operator delete(v51);
                }
                else
                {
                  v37 = atof((const char *)&v55);
                }
                v52 = v37 / 12.0;
                v9 = exp2f(v52);
                goto LABEL_89;
              }
              v35 = (std::string *)(v36 + 1);
              v32 = v34 - (char *)v35;
            }
            while (v34 - (char *)v35 >= 2);
          }
        }
        v38 = a4[23];
        if (v38 >= 0)
          v39 = a4[23];
        else
          v39 = *((_QWORD *)a4 + 1);
        if (v39)
        {
          if (v38 < 0)
            a4 = *(char **)a4;
          v40 = (v10 & 0x80u) == 0 ? (unsigned __int8 **)a1 : (unsigned __int8 **)a1->__r_.__value_.__r.__words[0];
          v41 = (unsigned __int8 *)((v10 & 0x80u) == 0 ? v10 : a1->__r_.__value_.__l.__size_);
          if ((uint64_t)v41 >= v39)
          {
            v43 = &v41[(_QWORD)v40];
            v44 = *a4;
            v45 = v40;
            do
            {
              v46 = &v41[-v39];
              if (v46 == (unsigned __int8 *)-1)
                break;
              v47 = (unsigned __int8 *)memchr(v45, v44, (size_t)(v46 + 1));
              if (!v47)
                break;
              v48 = v47;
              if (!memcmp(v47, a4, v39))
              {
                v8 = 0;
                if (v48 != v43 && v48 - (unsigned __int8 *)v40 != -1)
                {
                  std::string::basic_string(&v55, a1, 0, v48 - (unsigned __int8 *)v40, (std::allocator<char> *)&v59);
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v53 = (void *)v55.__r_.__value_.__r.__words[0];
                    v49 = atof(v55.__r_.__value_.__l.__data_);
                    operator delete(v53);
                  }
                  else
                  {
                    v49 = atof((const char *)&v55);
                  }
                  v9 = v49;
                  v8 = 3;
                }
                return v8 | ((unint64_t)LODWORD(v9) << 32);
              }
              v45 = (unsigned __int8 **)(v48 + 1);
              v41 = (unsigned __int8 *)(v43 - (v48 + 1));
            }
            while ((uint64_t)v41 >= v39);
          }
        }
LABEL_71:
        v8 = 0;
        return v8 | ((unint64_t)LODWORD(v9) << 32);
      }
    }
    v18 = a4[23];
    if (v18 >= 0)
      v19 = a4[23];
    else
      v19 = *((_QWORD *)a4 + 1);
    if (v19)
    {
      if (v18 < 0)
        a4 = *(char **)a4;
      v20 = (v10 & 0x80u) == 0 ? (unsigned __int8 **)a1 : (unsigned __int8 **)a1->__r_.__value_.__r.__words[0];
      v21 = (v10 & 0x80u) == 0
          ? (unsigned __int8 *)HIBYTE(a1->__r_.__value_.__r.__words[2])
          : (unsigned __int8 *)a1->__r_.__value_.__l.__size_;
      if ((uint64_t)v21 >= v19)
      {
        v22 = &v21[(_QWORD)v20];
        v23 = *a4;
        v24 = v20;
        while (1)
        {
          v25 = &v21[-v19];
          if (v25 == (unsigned __int8 *)-1)
            break;
          v26 = (unsigned __int8 *)memchr(v24, v23, (size_t)(v25 + 1));
          if (!v26)
            break;
          v27 = v26;
          if (!memcmp(v26, a4, v19))
          {
            v8 = 0;
            if (v27 != v22 && v27 - (unsigned __int8 *)v20 != -1)
            {
              std::string::basic_string(&v55, a1, 0, v27 - (unsigned __int8 *)v20, (std::allocator<char> *)&v59);
              if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
              {
                v54 = (void *)v55.__r_.__value_.__r.__words[0];
                v50 = atof(v55.__r_.__value_.__l.__data_);
                operator delete(v54);
              }
              else
              {
                v50 = atof((const char *)&v55);
              }
              v9 = v50;
              v8 = 4;
            }
            return v8 | ((unint64_t)LODWORD(v9) << 32);
          }
          v24 = (unsigned __int8 **)(v27 + 1);
          v21 = (unsigned __int8 *)(v22 - (v27 + 1));
          if ((uint64_t)v21 < v19)
            goto LABEL_71;
        }
      }
    }
    goto LABEL_71;
  }
  return v8 | ((unint64_t)LODWORD(v9) << 32);
}

void sub_1DE93FF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ParseAttr::parse_emphasis(const void **a1)
{
  _OWORD *v2;
  unsigned int v3;

  v2 = operator new(0x58uLL);
  v2[2] = xmmword_1EA94AF50;
  v2[3] = off_1EA94AF60;
  v2[4] = xmmword_1EA94AF70;
  *((_QWORD *)v2 + 10) = &byte_1DEBD87CE;
  *v2 = xmmword_1EA94AF30;
  v2[1] = *(_OWORD *)&off_1EA94AF40;
  v3 = ParseAttr::parse_prosodic_level(a1, v2, (uint64_t)v2 + 88);
  operator delete(v2);
  if ((v3 | 4) == 4)
    return 0;
  else
    return v3;
}

void sub_1DE94000C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t ParseAttr::parse_pitch(std::string *a1)
{
  _OWORD *v2;
  unint64_t v3;
  void *__p[2];
  char v6;

  v2 = operator new(0x58uLL);
  v2[2] = xmmword_1EA94B108;
  v2[3] = *(_OWORD *)&off_1EA94B118;
  v2[4] = xmmword_1EA94B128;
  *((_QWORD *)v2 + 10) = "x-high";
  *v2 = xmmword_1EA94B0E8;
  v2[1] = *(_OWORD *)&off_1EA94B0F8;
  std::string::basic_string[abi:ne180100]<0>(__p, "Hz");
  v3 = ParseAttr::parse_prosodic_spec(a1, v2, (uint64_t)v2 + 88, (char *)__p, 1);
  if (v6 < 0)
    operator delete(__p[0]);
  operator delete(v2);
  return v3;
}

void sub_1DE9400C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

unint64_t ParseAttr::parse_rate(std::string *a1)
{
  _OWORD *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  void *__p[2];
  char v8;

  v2 = operator new(0x58uLL);
  v2[2] = xmmword_1EA94B058;
  v2[3] = *(_OWORD *)&off_1EA94B068;
  v2[4] = xmmword_1EA94B078;
  *((_QWORD *)v2 + 10) = "x-fast";
  *v2 = xmmword_1EA94B038;
  v2[1] = *(_OWORD *)&off_1EA94B048;
  std::string::basic_string[abi:ne180100]<0>(__p, "%");
  v3 = ParseAttr::parse_prosodic_spec(a1, v2, (uint64_t)v2 + 88, (char *)__p, 0);
  v4 = v3;
  v5 = HIDWORD(v3);
  if (v8 < 0)
    operator delete(__p[0]);
  operator delete(v2);
  if (v4 - 2 >= 2 && v4)
  {
    if (v4 == 4)
    {
      *(float *)&v5 = *(float *)&v5 / 100.0;
      v4 = 2;
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void sub_1DE9401D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

unint64_t ParseAttr::parse_volume(std::string *a1)
{
  _OWORD *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  void *__p[2];
  char v9;

  v2 = operator new(0x58uLL);
  v2[2] = xmmword_1EA94B0B0;
  v2[3] = *(_OWORD *)&off_1EA94B0C0;
  v2[4] = xmmword_1EA94B0D0;
  *((_QWORD *)v2 + 10) = "x-loud";
  *v2 = xmmword_1EA94B090;
  v2[1] = *(_OWORD *)&off_1EA94B0A0;
  std::string::basic_string[abi:ne180100]<0>(__p, "dB");
  v3 = ParseAttr::parse_prosodic_spec(a1, v2, (uint64_t)v2 + 88, (char *)__p, 0);
  v4 = v3;
  v5 = HIDWORD(v3);
  if (v9 < 0)
    operator delete(__p[0]);
  operator delete(v2);
  if (v4 == 4)
    v6 = 2;
  else
    v6 = v4;
  switch(v6)
  {
    case 0u:
    case 2u:
    case 4u:
      v6 = 0;
      break;
    case 3u:
      v5 = COERCE_UNSIGNED_INT(__exp10f(*(float *)&v5 / 10.0));
      v6 = 2;
      break;
    default:
      return v6 | (v5 << 32);
  }
  return v6 | (v5 << 32);
}

void sub_1DE9402FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

double ParseAttr::label_duration(ParseAttr *this, float a2)
{
  double result;
  __int128 v5;
  uint64_t v6;

  if (fabsf(a2) == INFINITY)
  {
    std::string::basic_string[abi:ne180100]<0>(this, &byte_1DEBD87CE);
  }
  else
  {
    if (a2 > 0.0 && a2 < 1.0)
      StringFormatter::StringFormatter((StringFormatter *)&v5, "%.0fms");
    else
      StringFormatter::StringFormatter((StringFormatter *)&v5, "%.3gs");
    result = *(double *)&v5;
    *(_OWORD *)this = v5;
    *((_QWORD *)this + 2) = v6;
  }
  return result;
}

double ParseAttr::label_pitch(_QWORD *a1, uint64_t a2)
{
  float v4;
  double result;
  char *v6;
  void *v7;
  float v8;
  __int128 v9;
  uint64_t v10;

  v4 = *((float *)&a2 + 1);
  switch((_DWORD)a2)
  {
    case 4:
      StringFormatter::StringFormatter((StringFormatter *)&v9, "%.1fHz");
      goto LABEL_18;
    case 3:
      if (fabsf(*((float *)&a2 + 1)) < 0.001)
        goto LABEL_9;
      StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.1fHz");
LABEL_18:
      result = *(double *)&v9;
      *(_OWORD *)a1 = v9;
      a1[2] = v10;
      return result;
    case 2:
      if (fabsf(*((float *)&a2 + 1) + -1.0) >= 0.001)
      {
        if (fmodf(*((float *)&a2 + 1), 0.01) >= 0.001)
        {
          v8 = logf(v4) / 0.057762;
          if (fmodf(v8, 0.5) >= 0.01)
            StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.1f%%");
          else
            StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.0fst");
        }
        else
        {
          StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.0f%%");
        }
        goto LABEL_18;
      }
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
      return result;
  }
  v6 = (char *)operator new(0x58uLL);
  v7 = v6;
  *((_OWORD *)v6 + 2) = xmmword_1EA94B108;
  *((_OWORD *)v6 + 3) = *(_OWORD *)&off_1EA94B118;
  *((_OWORD *)v6 + 4) = xmmword_1EA94B128;
  *((_QWORD *)v6 + 10) = "x-high";
  *(_OWORD *)v6 = xmmword_1EA94B0E8;
  *((_OWORD *)v6 + 1) = *(_OWORD *)&off_1EA94B0F8;
  if (a2 > 0xAuLL)
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
  else
    std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&v6[(8 * a2) & 0x7FFFFFFFFLL]);
  operator delete(v7);
  return result;
}

void sub_1DE940600(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ParseAttr::label_rate(_QWORD *a1, uint64_t a2)
{
  char *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;

  if ((_DWORD)a2 == 2)
  {
    if (fabsf(*((float *)&a2 + 1) + -1.0) >= 0.001)
    {
      StringFormatter::StringFormatter((StringFormatter *)&v6, "%.1f%%", (float)(*((float *)&a2 + 1) * 100.0));
      *(_OWORD *)a1 = v6;
      a1[2] = v7;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
    }
  }
  else
  {
    v4 = (char *)operator new(0x58uLL);
    v5 = v4;
    *((_OWORD *)v4 + 2) = xmmword_1EA94B058;
    *((_OWORD *)v4 + 3) = *(_OWORD *)&off_1EA94B068;
    *((_OWORD *)v4 + 4) = xmmword_1EA94B078;
    *((_QWORD *)v4 + 10) = "x-fast";
    *(_OWORD *)v4 = xmmword_1EA94B038;
    *((_OWORD *)v4 + 1) = *(_OWORD *)&off_1EA94B048;
    if (a2 > 0xAuLL)
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
    else
      std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&v4[(8 * a2) & 0x7FFFFFFFFLL]);
    operator delete(v5);
  }
}

void sub_1DE940744(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ParseAttr::label_volume(_QWORD *a1, uint64_t a2)
{
  char *v4;
  void *v5;
  float v6;
  __int128 v7;
  uint64_t v8;

  if ((_DWORD)a2 == 2)
  {
    if (fabsf(*((float *)&a2 + 1) + -1.0) >= 0.001)
    {
      v6 = log10f(*((float *)&a2 + 1));
      StringFormatter::StringFormatter((StringFormatter *)&v7, "%+.1fdB", v6 * 10.0);
      *(_OWORD *)a1 = v7;
      a1[2] = v8;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
    }
  }
  else
  {
    v4 = (char *)operator new(0x58uLL);
    v5 = v4;
    *((_OWORD *)v4 + 2) = xmmword_1EA94B0B0;
    *((_OWORD *)v4 + 3) = *(_OWORD *)&off_1EA94B0C0;
    *((_OWORD *)v4 + 4) = xmmword_1EA94B0D0;
    *((_QWORD *)v4 + 10) = "x-loud";
    *(_OWORD *)v4 = xmmword_1EA94B090;
    *((_OWORD *)v4 + 1) = *(_OWORD *)&off_1EA94B0A0;
    if (a2 > 0xAuLL)
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
    else
      std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&v4[(8 * a2) & 0x7FFFFFFFFLL]);
    operator delete(v5);
  }
}

void sub_1DE940888(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void NormAction_fr::~NormAction_fr(NormAction_fr *this)
{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D228;
  v2 = (NormAction_fr *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D228;
  v2 = (NormAction_fr *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x1DF0ED014);
}

void NormAction_fr::cardinal(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::basic_string<char16_t>::size_type v8;
  UChar32 v9;
  int v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  std::basic_string<char16_t>::size_type v14;
  std::basic_string<char16_t>::size_type v15;
  int v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  std::basic_string<char16_t> *v20;
  uint64_t v21;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> *p_p;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v8 = v7 >= 0 ? a2 : *(_QWORD *)a2;
    __p.__r_.__value_.__r.__words[0] = v8;
    __p.__r_.__value_.__l.__size_ = v6 << 32;
    v9 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p);
    if (!u_isdigit(v9))
    {
      NormAction::roman(a3, a1, (char *)a2);
      return;
    }
  }
  if (*(_DWORD *)(a1 + 88) == 1178946889)
  {
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = (const char *)a2;
    else
      v11 = *(const char **)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    UTFString::to_utf16(&__p, v11, v12);
    v13 = unum_parseInt64();
    v14 = a1 + 48;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v13;
  }
  else
  {
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = (const char *)a2;
    else
      v17 = *(const char **)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    UTFString::to_utf16(&__p, v17, v18);
    v19 = unum_parseInt64();
    v14 = a1 + 56;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v19;
  }
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_1EA931C98;
  __p.__r_.__value_.__l.__size_ = v14;
  __p.__r_.__value_.__r.__words[2] = v15;
  p_p = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  v20 = p_p;
  if (p_p == &__p)
  {
    v21 = 4;
    v20 = &__p;
  }
  else
  {
    if (!p_p)
      return;
    v21 = 5;
  }
  (*(void (**)(void))(v20->__r_.__value_.__r.__words[0] + 8 * v21))();
}

void sub_1DE940B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **v16;
  void **p_p;
  uint64_t v19;

  p_p = a16;
  if (a16 == v16)
  {
    v19 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*((void (**)(void))*p_p + v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void NormAction_fr::ordinal(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::basic_string<char16_t>::size_type v8;
  UChar32 v9;
  int v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  std::basic_string<char16_t>::size_type v14;
  std::basic_string<char16_t>::size_type v15;
  int v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  std::basic_string<char16_t> *v20;
  uint64_t v21;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> *p_p;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v8 = v7 >= 0 ? a2 : *(_QWORD *)a2;
    __p.__r_.__value_.__r.__words[0] = v8;
    __p.__r_.__value_.__l.__size_ = v6 << 32;
    v9 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p);
    if (!u_isdigit(v9))
    {
      NormAction::roman(a3, a1, (char *)a2);
      return;
    }
  }
  if (*(_DWORD *)(a1 + 88) == 1178946889)
  {
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = (const char *)a2;
    else
      v11 = *(const char **)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    UTFString::to_utf16(&__p, v11, v12);
    v13 = unum_parseInt64();
    v14 = a1 + 64;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v13;
  }
  else
  {
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = (const char *)a2;
    else
      v17 = *(const char **)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    UTFString::to_utf16(&__p, v17, v18);
    v19 = unum_parseInt64();
    v14 = a1 + 72;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v19;
  }
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_1EA931C98;
  __p.__r_.__value_.__l.__size_ = v14;
  __p.__r_.__value_.__r.__words[2] = v15;
  p_p = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  v20 = p_p;
  if (p_p == &__p)
  {
    v21 = 4;
    v20 = &__p;
  }
  else
  {
    if (!p_p)
      return;
    v21 = 5;
  }
  (*(void (**)(void))(v20->__r_.__value_.__r.__words[0] + 8 * v21))();
}

void sub_1DE940E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **v16;
  void **p_p;
  uint64_t v19;

  p_p = a16;
  if (a16 == v16)
  {
    v19 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*((void (**)(void))*p_p + v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void NormAction_fr::normalize(_QWORD **a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X2>, std::string *a4@<X8>)
{
  int v8;
  BOOL v9;
  int *v10;
  int v11;
  int v12;
  std::string::size_type size;
  std::string *v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  NSObject *v20;
  std::string *v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  uint64_t *v25;
  std::string v26;
  uint8_t buf[4];
  std::string *v28;
  __int16 v29;
  uint64_t v30;
  std::string __p;
  std::string *p_p;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  NormAction::normalize(a1, a2, (char *)a3, &v26);
  v8 = *((char *)a3 + 23);
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 != 7)
      goto LABEL_20;
    v9 = *(_DWORD *)a3 == 1229145412 && *(_DWORD *)((char *)a3 + 3) == 1279348041;
    v10 = (int *)a3;
    if (!v9)
      goto LABEL_7;
LABEL_19:
    NormAction_fr::decimal((uint64_t)a4, (uint64_t)a1, a2);
    goto LABEL_52;
  }
  if (a3[1] != 7)
    goto LABEL_20;
  v10 = (int *)*a3;
  if (*(_DWORD *)*a3 == 1229145412 && *(_DWORD *)(*a3 + 3) == 1279348041)
    goto LABEL_19;
LABEL_7:
  v11 = *v10;
  v12 = *(int *)((char *)v10 + 3);
  if (v11 == 1163152969 && v12 == 1380271941)
    goto LABEL_51;
LABEL_20:
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  if (size)
    v16 = &v26;
  else
    v16 = a2;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA92E280;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)MEMORY[0x1E0DE5A30];
  p_p = &__p;
  v17 = UTFString::for_all<std::string>((uint64_t)v16, &__p);
  v18 = p_p;
  if (p_p == &__p)
  {
    v19 = 4;
    v18 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(v18->__r_.__value_.__r.__words[0] + 8 * v19))();
LABEL_30:
  if (!v17)
  {
LABEL_51:
    *a4 = v26;
    memset(&v26, 0, sizeof(v26));
    goto LABEL_52;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    Censor::global_plaintext(&__p, (uint64_t)a2);
    v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
    *(_DWORD *)buf = 136315394;
    v28 = v21;
    v29 = 2080;
    v30 = v22;
    _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_ERROR, "NormAction_fr(%s, %s) normalized to digits.", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, (uint64_t)a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (*((char *)a3 + 23) >= 0)
    v25 = a3;
  else
    v25 = (uint64_t *)*a3;
  Diagnostics::log(3, "NormAction_fr(%s, %s) normalized to digits.", v23, v24, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ((void (*)(_QWORD **, std::string *))(*a1)[2])(a1, a2);
LABEL_52:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1DE94118C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NormAction_fr::normalize(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string::size_type a3@<X2>, std::string *a4@<X8>)
{
  int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  char v22;
  std::string v23;
  std::string v24;

  v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 7)
    {
LABEL_10:
      NormAction::normalize(a1, a2, a3, a4);
      return;
    }
    v8 = *(int **)a3;
  }
  else
  {
    v8 = (int *)a3;
    if (v7 != 7)
      goto LABEL_10;
  }
  v9 = *v8;
  v10 = *(int *)((char *)v8 + 3);
  if (v9 != 1229145412 || v10 != 1279348041)
    goto LABEL_10;
  v12 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v21, "CARDINAL");
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 80))(&v23, a1, v12, v21);
  v13 = std::string::append(&v23, " virgule ");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  NormAction_fr::decimal((uint64_t)__p, a1, (std::string *)(*a2 + 24));
  if ((v20 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v16 = v20;
  else
    v16 = (std::string::size_type)__p[1];
  v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_1DE941374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL NormAction_fr::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  char **v4;

  v2 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  while (strcmp(NormAction_fr::consume_next_token(std::string const&)::multipliers[v2], v3))
  {
    if (++v2 == 3)
    {
      v4 = NormAction_es::consume_next_token(std::string const&)::multipliers;
      return v4 != NormAction_es::consume_next_token(std::string const&)::multipliers;
    }
  }
  v4 = &NormAction_fr::consume_next_token(std::string const&)::multipliers[v2];
  return v4 != NormAction_es::consume_next_token(std::string const&)::multipliers;
}

void NormAction_fr::set_context(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v8;
  int v10;
  _WORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  BOOL v32;
  const void *v33;
  size_t v34;
  int *v36;
  int v37;
  NSObject *v38;
  int v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *p_p;
  const char *v43;
  int v44;
  std::string::size_type v45;
  const char *v46;
  std::string *p_buf;
  std::string *v48;
  const char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  std::string __p;
  std::string v58;
  std::string buf;
  const char *v60;
  uint64_t v61;

  v4 = (uint64_t)a2;
  v5 = a1;
  v61 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    v8 = a2[1];
    if (v8 != (unsigned __int16 *)2)
    {
      if (v8 != (unsigned __int16 *)7)
        goto LABEL_22;
      if (*(_DWORD *)*a2 != -1016236690 || *(_DWORD *)((char *)*a2 + 3) != 1869785539)
        goto LABEL_22;
      goto LABEL_72;
    }
    v11 = *a2;
    v10 = **a2;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 != 2)
    {
      if (v6 != 7)
        goto LABEL_22;
      if (*(_DWORD *)a2 != -1016236690 || *(_DWORD *)((char *)a2 + 3) != 1869785539)
        goto LABEL_22;
LABEL_72:
      v37 = 1296126787;
      goto LABEL_76;
    }
    v10 = *(unsigned __int16 *)a2;
    v11 = a2;
  }
  if (v10 == 25964)
    goto LABEL_72;
  if (*v11 == 24940)
  {
    v37 = 1178946889;
    goto LABEL_76;
  }
LABEL_22:
  v12 = *(_QWORD **)(a1 + 80);
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 8);
  if (v13)
  {
    v14 = v12[4];
    if (!v14)
      goto LABEL_32;
    v15 = v12 + 4;
    do
    {
      v16 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v12 + 5), (const void **)(v14 + 32), (const void **)a3);
      v17 = (uint64_t *)(v14 + 8);
      if (!v16)
      {
        v17 = (uint64_t *)v14;
        v15 = (_QWORD *)v14;
      }
      v14 = *v17;
    }
    while (*v17);
    if (v15 == v12 + 4
      || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v12 + 5), (const void **)a3, (const void **)v15 + 4))
    {
LABEL_32:
      v18 = *(unsigned __int8 *)(a3 + 23);
      v19 = *(_QWORD *)(a3 + 8);
      if ((v18 & 0x80u) == 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      v51 = v5;
      v52 = v20;
      v21 = v20 - 1;
      v50 = v12;
      v54 = *v12;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3) < v21)
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3);
      if (v21)
      {
        v56 = *(char **)a3;
        v53 = v4;
        while (1)
        {
          v55 = v21 - 1;
          v22 = (uint64_t *)(v54 + 24 * (v21 - 1));
          v24 = *v22;
          v23 = v22[1];
          if (*v22 != v23)
            break;
LABEL_69:
          v21 = v55;
          v4 = v53;
          if (!v55)
            goto LABEL_70;
        }
        v25 = v52 - v21;
        if (v18 - (v52 - v21) >= v21)
          v26 = v21;
        else
          v26 = v18 - (v52 - v21);
        if (v19 - v25 >= v21)
          v27 = v21;
        else
          v27 = v19 - v25;
        while (1)
        {
          v28 = *(char *)(v24 + 23);
          v29 = v28 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(_QWORD *)(v24 + 8);
          if ((v18 & 0x80) != 0)
          {
            v32 = v29 != -1 && v19 >= v25;
            v30 = v27;
            v31 = v56;
            if (!v32)
LABEL_105:
              std::string::__throw_out_of_range[abi:ne180100]();
          }
          else
          {
            if (v18 < v25)
              goto LABEL_105;
            v30 = v26;
            v31 = (char *)a3;
            if (v29 == -1)
              goto LABEL_105;
          }
          v33 = v28 >= 0 ? (const void *)v24 : *(const void **)v24;
          v34 = v30 >= v29 ? v29 : v30;
          if (!memcmp(&v31[v25], v33, v34) && v30 == v29)
            break;
          v24 += 32;
          if (v24 == v23)
            goto LABEL_69;
        }
        v36 = (int *)(v24 + 24);
        v5 = v51;
        v4 = v53;
      }
      else
      {
LABEL_70:
        v5 = v51;
        v36 = (int *)(v50 + 6);
      }
    }
    else
    {
      v36 = (int *)(v15 + 7);
    }
  }
  else
  {
    v36 = (int *)(v12 + 6);
  }
  v37 = *v36;
LABEL_76:
  *(_DWORD *)(v5 + 88) = v37;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&v58, v4);
    v39 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
    v40 = v58.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&__p, a3);
    v41 = &v58;
    if (v39 < 0)
      v41 = (std::string *)v40;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)(v5 + 88) == 1178946889)
      v43 = "FEMI";
    else
      v43 = "MASC";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v60 = v43;
    _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_DEBUG, "Gender %s _ %s -> %s", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&buf, v4);
  v44 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  v45 = buf.__r_.__value_.__r.__words[0];
  Censor::global_plaintext(&v58, a3);
  p_buf = &buf;
  if (v44 < 0)
    p_buf = (std::string *)v45;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v58;
  else
    v48 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if (*(_DWORD *)(v5 + 88) == 1178946889)
    v49 = "FEMI";
  else
    v49 = "MASC";
  Diagnostics::log(7, "Gender %s _ %s -> %s", v46, p_buf, v48, v49);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1DE9418FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NormAction_fr::set_context(NormAction_fr *this, int a2)
{
  NSObject *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 22) = a2;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    if (*((_DWORD *)this + 22) == 1178946889)
      v5 = "FEMI";
    else
      v5 = "MASC";
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_DEBUG, "Gender _ -> %s", buf, 0xCu);
  }
  if (*((_DWORD *)this + 22) == 1178946889)
    v6 = "FEMI";
  else
    v6 = "MASC";
  return Diagnostics::log(7, "Gender _ -> %s", v4, v6);
}

void NormAction_fr::decimal(uint64_t a1, uint64_t a2, std::string *__str)
{
  std::string::size_type size;
  int v7;
  std::string::size_type v8;
  std::string *v9;
  void *v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  void *v17[2];
  char v18;
  std::string v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  char v23;
  std::string v24;
  std::string v25;
  std::string v26;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = (char)size;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_13;
  v8 = 0;
  v9 = v7 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
  while (v9->__r_.__value_.__s.__data_[v8] == 48)
  {
    if (size == ++v8)
    {
      v8 = size;
      break;
    }
  }
  if (!v8)
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&v26, "CARDINAL");
    (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a2 + 80))(a2, __str, &v26);
LABEL_14:
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)v26.__r_.__value_.__r.__words[0];
LABEL_16:
      operator delete(v10);
      return;
    }
    return;
  }
  if (v8 == size)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "DIGITS");
    (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a2 + 80))(a2, __str, &v26);
    goto LABEL_14;
  }
  std::string::basic_string(&v24, __str, 0, v8, (std::allocator<char> *)v22);
  std::string::basic_string[abi:ne180100]<0>(v22, "DIGITS");
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)a2 + 80))(&v25, a2, &v24, v22);
  v11 = std::string::append(&v25, " ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&v19, __str, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v17);
  std::string::basic_string[abi:ne180100]<0>(v17, "CARDINAL");
  (*(void (**)(void **__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)a2 + 80))(__p, a2, &v19, v17);
  if ((v21 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v14 = v21;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&v26, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)v24.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
}

void sub_1DE941CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  if (*(char *)(v38 - 65) < 0)
    operator delete(*(void **)(v38 - 88));
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

uint64_t UTFString::for_all<std::string>(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v19 = 0;
  }
  v15 = v3;
  v16 = v4 << 32;
  if ((_DWORD)v4)
  {
    v6 = 0;
    do
    {
      v17 = UTFString::codepoint_iterator<std::string>::operator*(&v15);
      if (!v19)
        std::__throw_bad_function_call[abi:ne180100]();
      v7 = (*(uint64_t (**)(_BYTE *, int *))(*(_QWORD *)v19 + 48))(v19, &v17);
      if (!(_DWORD)v7)
        break;
      v8 = *(unsigned __int8 *)(v3 + v6);
      v9 = (v8 + 62);
      v10 = v8 <= 0xEF ? 2 : 3;
      v11 = v8 <= 0xDF ? v10 : v10 + 1;
      if (v9 >= 0x33)
        v11 = 1;
      v6 += v11;
      LODWORD(v16) = v6;
    }
    while (v6 != (_DWORD)v4);
  }
  else
  {
    v7 = 1;
  }
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
    goto LABEL_31;
  }
  if (v19)
  {
    v13 = 5;
LABEL_31:
    (*(void (**)(_QWORD *, _QWORD *))(*v12 + 8 * v13))(v12, a2);
  }
  return v7;
}

void sub_1DE941EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA92E280;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA92E280;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned int (**)(_QWORD))(a1 + 8))(*a2) != 0;
}

uint64_t std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::target_type()
{
}

void std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA931C98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA931C98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::operator()()
{
  return unum_formatInt64();
}

uint64_t std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::target_type()
{
}

uint64_t Agglomerate::ItemHolder<GenderRules>::~ItemHolder(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &off_1EA922CC8;
  v2 = (void **)(a1 + 8);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 40));
  v4 = v2;
  std::vector<std::vector<std::pair<std::string,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void Agglomerate::ItemHolder<GenderRules>::~ItemHolder(uint64_t a1)
{
  void **v1;
  void **v2;

  *(_QWORD *)a1 = &off_1EA922CC8;
  v1 = (void **)(a1 + 8);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 40));
  v2 = v1;
  std::vector<std::vector<std::pair<std::string,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1DF0ED014);
}

uint64_t FrontendModuleBroker::standard_frontend_pipeline(std::string *a1, uint64_t a2)
{
  std::string::size_type size;
  NSObject *v5;
  const char *v6;
  std::string *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  std::string *v11;
  uint64_t *v12;
  _BYTE __p[12];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "pipeline");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)(a2 + 144), (const void **)__p, a1);
  if (v15 < 0)
    operator delete(*(void **)__p);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (size)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = a1;
      else
        v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v7;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEBUG, "Using standard processing pipeline: %s", __p, 0xCu);
    }
    v8 = "Using standard processing pipeline: %s";
    v9 = 7;
  }
  else
  {
    MEMORY[0x1DF0ECA80](a1, "audio,tokenize,override,match_prompt,normalize,punctuate,part_of_speech,phrasing,sentence,pronounce,count");
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = a1;
      else
        v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v11;
      _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_INFO, "No front end pipeline found in configuration file, using (obsolete) system default: %s", __p, 0xCu);
    }
    v8 = "No front end pipeline found in configuration file, using (obsolete) system default: %s";
    v9 = 6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = (uint64_t *)a1;
  else
    v12 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  return Diagnostics::log(v9, v8, v6, v12);
}

void sub_1DE94236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

uint64_t FrontendModuleBroker::instance(FrontendModuleBroker *this)
{
  unsigned __int8 v1;

  {
    NeverDestructed<FrontendModuleBroker>::NeverDestructed<>();
  }
  return FrontendModuleBroker::instance(void)::broker_instance;
}

void sub_1DE9423F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void NeverDestructed<FrontendModuleBroker>::NeverDestructed<>()
{
  FrontendModuleBroker *v0;

  v0 = (FrontendModuleBroker *)operator new();
  FrontendModuleBroker::FrontendModuleBroker(v0);
  FrontendModuleBroker::instance(void)::broker_instance = (uint64_t)v0;
}

void sub_1DE942450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1032C4085FAB6A4);
  _Unwind_Resume(a1);
}

void FrontendModuleBroker::FrontendModuleBroker(FrontendModuleBroker *this)
{
  _QWORD *v2;
  std::string *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  std::string *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  std::string *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  std::string *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  std::string *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  std::string *v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  std::string *v39;
  void **v40;
  uint64_t v41;
  _QWORD *v42;
  std::string *v43;
  void **v44;
  uint64_t v45;
  _QWORD *v46;
  std::string *v47;
  void **v48;
  uint64_t v49;
  _QWORD *v50;
  std::string *v51;
  void **v52;
  uint64_t v53;
  _QWORD *v54;
  std::string *v55;
  void **v56;
  uint64_t v57;
  _QWORD *v58;
  std::string *v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  std::string *v63;
  void **v64;
  uint64_t v65;
  _QWORD *v66;
  std::string *v67;
  void **v68;
  uint64_t v69;
  _QWORD *v70;
  std::string *v71;
  void **v72;
  uint64_t v73;
  _QWORD *v74;
  std::string *v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  std::string *v79;
  void **v80;
  uint64_t v81;
  _QWORD *v82;
  std::string *v83;
  void **v84;
  uint64_t v85;
  _QWORD *v86;
  std::string *v87;
  void **v88;
  uint64_t v89;
  _QWORD *v90;
  std::string *v91;
  void **v92;
  uint64_t v93;
  _QWORD *v94;
  std::string *v95;
  void **v96;
  uint64_t v97;
  _QWORD *v98;
  std::string *v99;
  void **v100;
  uint64_t v101;
  _QWORD *v102;
  std::string *v103;
  void **v104;
  uint64_t v105;
  _QWORD *v106;
  std::string *v107;
  void **v108;
  uint64_t v109;
  _QWORD *v110;
  std::string *v111;
  void **v112;
  uint64_t v113;
  _QWORD *v114;
  std::string *v115;
  void **v116;
  uint64_t v117;
  _QWORD *v118;
  std::string *v119;
  void **v120;
  uint64_t v121;
  _QWORD *v122;
  std::string *v123;
  void **v124;
  uint64_t v125;
  _QWORD *v126;
  std::string *v127;
  void **v128;
  uint64_t v129;
  _QWORD *v130;
  std::string *v131;
  void **v132;
  uint64_t v133;
  _QWORD *v134;
  std::string *v135;
  void **v136;
  uint64_t v137;
  _QWORD *v138;
  std::string *v139;
  void **v140;
  uint64_t v141;
  _QWORD *v142;
  std::string *v143;
  void **v144;
  uint64_t v145;
  _QWORD *v146;
  std::string *v147;
  void **v148;
  uint64_t v149;
  _QWORD *v150;
  std::string *v151;
  void **v152;
  uint64_t v153;
  _QWORD *v154;
  std::string *v155;
  void **v156;
  uint64_t v157;
  _QWORD *v158;
  std::string *v159;
  void **v160;
  uint64_t v161;
  _QWORD *v162;
  std::string *v163;
  void **v164;
  uint64_t v165;
  _QWORD *v166;
  std::string *v167;
  void **v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  void **v172;
  uint64_t v173;
  _QWORD *v174;
  std::string *v175;
  void **v176;
  uint64_t v177;
  _QWORD *v178;
  std::string *v179;
  void **v180;
  uint64_t v181;
  _QWORD *v182;
  std::string *v183;
  void **v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  void *__p[2];
  char v189;
  std::string v190;
  std::string v191;
  _QWORD v192[3];
  _QWORD *v193;
  void *v194[2];
  char v195;
  void **v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v190, "source");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text source module");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FA38;
  v3 = (std::string *)(v2 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v2[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v2;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 1, v194);
  v4 = v196;
  if (v196 == v194)
  {
    v5 = 4;
    v4 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_12;
    v5 = 5;
  }
  (*((void (**)(void))*v4 + v5))();
LABEL_12:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "parse");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse legacy or SSML text");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v6 = operator new(0x20uLL);
  *v6 = off_1EA9305E8;
  v7 = (std::string *)(v6 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v6[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v6;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v8 = v196;
  if (v196 == v194)
  {
    v9 = 4;
    v8 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_29;
    v9 = 5;
  }
  (*((void (**)(void))*v8 + v9))();
LABEL_29:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "parse_ssml");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse SSML 1.1 compliant text");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v10 = operator new(0x20uLL);
  *v10 = off_1EA930850;
  v11 = (std::string *)(v10 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v10[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v10;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v12 = v196;
  if (v196 == v194)
  {
    v13 = 4;
    v12 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_46;
    v13 = 5;
  }
  (*((void (**)(void))*v12 + v13))();
LABEL_46:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "parse_legacy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse Vocalizer Expressive compliant text");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v14 = operator new(0x20uLL);
  *v14 = off_1EA92FB98;
  v15 = (std::string *)(v14 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v14[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v14;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v16 = v196;
  if (v196 == v194)
  {
    v17 = 4;
    v16 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_63;
    v17 = 5;
  }
  (*((void (**)(void))*v16 + v17))();
LABEL_63:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "transliterate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transliterate text, like full/half-width conversion");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v18 = operator new(0x20uLL);
  *v18 = off_1EA92FF08;
  v19 = (std::string *)(v18 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v19, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v18[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v18;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v20 = v196;
  if (v196 == v194)
  {
    v21 = 4;
    v20 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_80;
    v21 = 5;
  }
  (*((void (**)(void))*v20 + v21))();
LABEL_80:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "filter_text");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filter text to get valid characters only");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v22 = operator new(0x20uLL);
  *v22 = off_1EA92F988;
  v23 = (std::string *)(v22 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v23, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v22[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v22;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v24 = v196;
  if (v196 == v194)
  {
    v25 = 4;
    v24 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_97;
    v25 = 5;
  }
  (*((void (**)(void))*v24 + v25))();
LABEL_97:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "replace_text_fst");
  std::string::basic_string[abi:ne180100]<0>(__p, "Replace regex matched text with FST evaluation");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v26 = operator new(0x20uLL);
  *v26 = off_1EA930220;
  v27 = (std::string *)(v26 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v26[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v26;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v28 = v196;
  if (v196 == v194)
  {
    v29 = 4;
    v28 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v29 = 5;
  }
  (*((void (**)(void))*v28 + v29))();
LABEL_114:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "audio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decide between audio and alternative context");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v30 = operator new(0x20uLL);
  *v30 = off_1EA92FA90;
  v31 = (std::string *)(v30 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v31, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v30[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v30;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v32 = v196;
  if (v196 == v194)
  {
    v33 = 4;
    v32 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_131;
    v33 = 5;
  }
  (*((void (**)(void))*v32 + v33))();
LABEL_131:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "switch_language");
  std::string::basic_string[abi:ne180100]<0>(__p, "Handle material in secondary languages");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v34 = operator new(0x20uLL);
  *v34 = off_1EA9300C0;
  v35 = (std::string *)(v34 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v35, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v34[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v34;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v36 = v196;
  if (v196 == v194)
  {
    v37 = 4;
    v36 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_148;
    v37 = 5;
  }
  (*((void (**)(void))*v36 + v37))();
LABEL_148:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "switch_language_mecab");
  std::string::basic_string[abi:ne180100]<0>(__p, "Handle English text embedded in Chinese");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v38 = operator new(0x20uLL);
  *v38 = off_1EA930538;
  v39 = (std::string *)(v38 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v39, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v38[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v38;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v40 = v196;
  if (v196 == v194)
  {
    v41 = 4;
    v40 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_165;
    v41 = 5;
  }
  (*((void (**)(void))*v40 + v41))();
LABEL_165:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "tokenize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up text into tokens");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v42 = operator new(0x20uLL);
  *v42 = off_1EA9307A0;
  v43 = (std::string *)(v42 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v43, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v42[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v42;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v44 = v196;
  if (v196 == v194)
  {
    v45 = 4;
    v44 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_182;
    v45 = 5;
  }
  (*((void (**)(void))*v44 + v45))();
LABEL_182:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "tokenize_mecab");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up text into words based on MeCab, suitable for Asian languages like Chinese, Korean, etc.");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v46 = operator new(0x20uLL);
  *v46 = off_1EA930170;
  v47 = (std::string *)(v46 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v47, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v46[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v46;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v48 = v196;
  if (v196 == v194)
  {
    v49 = 4;
    v48 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_199;
    v49 = 5;
  }
  (*((void (**)(void))*v48 + v49))();
LABEL_199:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "tokenize_hanzi");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up hanzi characters into space characters");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v50 = operator new(0x20uLL);
  *v50 = off_1EA930118;
  v51 = (std::string *)(v50 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v51, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v50[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v50;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v52 = v196;
  if (v196 == v194)
  {
    v53 = 4;
    v52 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_216;
    v53 = 5;
  }
  (*((void (**)(void))*v52 + v53))();
LABEL_216:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "tokenize_fallback");
  std::string::basic_string[abi:ne180100]<0>(__p, "Provide extra fallback functionalities like transliteration and filtering");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v54 = operator new(0x20uLL);
  *v54 = off_1EA9303D8;
  v55 = (std::string *)(v54 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v55, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v54[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v54;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v56 = v196;
  if (v196 == v194)
  {
    v57 = 4;
    v56 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_233;
    v57 = 5;
  }
  (*((void (**)(void))*v56 + v57))();
LABEL_233:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "break_sentence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Find sentence breaks");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v58 = operator new(0x20uLL);
  *v58 = off_1EA92FE00;
  v59 = (std::string *)(v58 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v59, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v58[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v58;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v60 = v196;
  if (v196 == v194)
  {
    v61 = 4;
    v60 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_250;
    v61 = 5;
  }
  (*((void (**)(void))*v60 + v61))();
LABEL_250:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "breaks_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break sentence");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v62 = operator new(0x20uLL);
  *v62 = off_1EA9306F0;
  v63 = (std::string *)(v62 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v63, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v62[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v62;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v64 = v196;
  if (v196 == v194)
  {
    v65 = 4;
    v64 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_267;
    v65 = 5;
  }
  (*((void (**)(void))*v64 + v65))();
LABEL_267:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "override");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v66 = operator new(0x20uLL);
  *v66 = off_1EA92FE58;
  v67 = (std::string *)(v66 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v67, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v67->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v66[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v66;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v68 = v196;
  if (v196 == v194)
  {
    v69 = 4;
    v68 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_284;
    v69 = 5;
  }
  (*((void (**)(void))*v68 + v69))();
LABEL_284:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "override_log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules, with logging");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v70 = operator new(0x20uLL);
  *v70 = off_1EA9302D0;
  v71 = (std::string *)(v70 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v71, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v70[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v70;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v72 = v196;
  if (v196 == v194)
  {
    v73 = 4;
    v72 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_301;
    v73 = 5;
  }
  (*((void (**)(void))*v72 + v73))();
LABEL_301:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "override_debug");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules, with interactive debugging");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v74 = operator new(0x20uLL);
  *v74 = off_1EA930488;
  v75 = (std::string *)(v74 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v75, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v74[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v74;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v76 = v196;
  if (v196 == v194)
  {
    v77 = 4;
    v76 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_318;
    v77 = 5;
  }
  (*((void (**)(void))*v76 + v77))();
LABEL_318:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "match_prompt");
  std::string::basic_string[abi:ne180100]<0>(__p, "Match text for prompts and provide units");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v78 = operator new(0x20uLL);
  *v78 = off_1EA92FAE8;
  v79 = (std::string *)(v78 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v79, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v78[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v78;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v80 = v196;
  if (v196 == v194)
  {
    v81 = 4;
    v80 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_335;
    v81 = 5;
  }
  (*((void (**)(void))*v80 + v81))();
LABEL_335:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "normalize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Translate text into a sequence of regular words");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v82 = operator new(0x20uLL);
  *v82 = off_1EA9307F8;
  v83 = (std::string *)(v82 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v83, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v82[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v82;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v84 = v196;
  if (v196 == v194)
  {
    v85 = 4;
    v84 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_352;
    v85 = 5;
  }
  (*((void (**)(void))*v84 + v85))();
LABEL_352:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "punctuate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine whether punctuation is phrase ending or not");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v86 = operator new(0x20uLL);
  *v86 = off_1EA930900;
  v87 = (std::string *)(v86 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v87, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v87->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v86[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v86;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v88 = v196;
  if (v196 == v194)
  {
    v89 = 4;
    v88 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_369;
    v89 = 5;
  }
  (*((void (**)(void))*v88 + v89))();
LABEL_369:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "part_of_speech");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine part of speech");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v90 = operator new(0x20uLL);
  *v90 = off_1EA92FD50;
  v91 = (std::string *)(v90 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v91, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v91->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v90[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v90;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v92 = v196;
  if (v196 == v194)
  {
    v93 = 4;
    v92 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_386;
    v93 = 5;
  }
  (*((void (**)(void))*v92 + v93))();
LABEL_386:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "phrasing");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v94 = operator new(0x20uLL);
  *v94 = off_1EA930748;
  v95 = (std::string *)(v94 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v95, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v95->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v94[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v94;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v96 = v196;
  if (v196 == v194)
  {
    v97 = 4;
    v96 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_403;
    v97 = 5;
  }
  (*((void (**)(void))*v96 + v97))();
LABEL_403:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "phrasing_token");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries based on token");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v98 = operator new(0x20uLL);
  *v98 = off_1EA930010;
  v99 = (std::string *)(v98 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v99, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v99->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v98[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v98;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v100 = v196;
  if (v196 == v194)
  {
    v101 = 4;
    v100 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_420;
    v101 = 5;
  }
  (*((void (**)(void))*v100 + v101))();
LABEL_420:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "sentence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine sentence type");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v102 = operator new(0x20uLL);
  *v102 = off_1EA930278;
  v103 = (std::string *)(v102 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v103, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v103->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v102[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v102;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v104 = v196;
  if (v196 == v194)
  {
    v105 = 4;
    v104 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_437;
    v105 = 5;
  }
  (*((void (**)(void))*v104 + v105))();
LABEL_437:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "pronounce");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate language-appropriate phonemes");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v106 = operator new(0x20uLL);
  *v106 = off_1EA9308A8;
  v107 = (std::string *)(v106 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v107, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v107->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v106[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v106;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v108 = v196;
  if (v196 == v194)
  {
    v109 = 4;
    v108 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_454;
    v109 = 5;
  }
  (*((void (**)(void))*v108 + v109))();
LABEL_454:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "pronounce_fst");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate token phonemes using FST");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v110 = operator new(0x20uLL);
  *v110 = off_1EA92FEB0;
  v111 = (std::string *)(v110 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v111, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v111->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v110[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v110;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v112 = v196;
  if (v196 == v194)
  {
    v113 = 4;
    v112 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_471;
    v113 = 5;
  }
  (*((void (**)(void))*v112 + v113))();
LABEL_471:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "pronounce_rule");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate phonemes using fast rewriter");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v114 = operator new(0x20uLL);
  *v114 = off_1EA930068;
  v115 = (std::string *)(v114 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v115, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v115->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v114[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v114;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v116 = v196;
  if (v196 == v194)
  {
    v117 = 4;
    v116 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_488;
    v117 = 5;
  }
  (*((void (**)(void))*v116 + v117))();
LABEL_488:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "trim_utterance");
  std::string::basic_string[abi:ne180100]<0>(__p, "Implement trimming attributes");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v118 = operator new(0x20uLL);
  *v118 = off_1EA92FF60;
  v119 = (std::string *)(v118 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v119, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v119->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v118[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v118;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v120 = v196;
  if (v196 == v194)
  {
    v121 = 4;
    v120 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_505;
    v121 = 5;
  }
  (*((void (**)(void))*v120 + v121))();
LABEL_505:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "amend_phonemes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply rule-based fix-ups to pronunciations, using multiple-word context");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v122 = operator new(0x20uLL);
  *v122 = off_1EA92FDA8;
  v123 = (std::string *)(v122 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v123, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v123->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v122[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v122;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v124 = v196;
  if (v196 == v194)
  {
    v125 = 4;
    v124 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_522;
    v125 = 5;
  }
  (*((void (**)(void))*v124 + v125))();
LABEL_522:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "map_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map pronunciations between languages");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v126 = operator new(0x20uLL);
  *v126 = off_1EA930380;
  v127 = (std::string *)(v126 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v127, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v127->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v126[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v126;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v128 = v196;
  if (v196 == v194)
  {
    v129 = 4;
    v128 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_539;
    v129 = 5;
  }
  (*((void (**)(void))*v128 + v129))();
LABEL_539:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "join_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Join pronunciations of connected words");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v130 = operator new(0x20uLL);
  *v130 = off_1EA930430;
  v131 = (std::string *)(v130 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v131, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v131->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v130[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v130;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v132 = v196;
  if (v196 == v194)
  {
    v133 = 4;
    v132 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_556;
    v133 = 5;
  }
  (*((void (**)(void))*v132 + v133))();
LABEL_556:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "rewrite");
  std::string::basic_string[abi:ne180100]<0>(__p, "rewrite input using fast rewriter");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v134 = operator new(0x20uLL);
  *v134 = off_1EA930698;
  v135 = (std::string *)(v134 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v135, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v135->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v134[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v134;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v136 = v196;
  if (v196 == v194)
  {
    v137 = 4;
    v136 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_573;
    v137 = 5;
  }
  (*((void (**)(void))*v136 + v137))();
LABEL_573:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "normalize_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based text normalization");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v138 = operator new(0x20uLL);
  *v138 = off_1EA92FB40;
  v139 = (std::string *)(v138 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v139, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v139->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v138[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v138;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v140 = v196;
  if (v196 == v194)
  {
    v141 = 4;
    v140 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_590;
    v141 = 5;
  }
  (*((void (**)(void))*v140 + v141))();
LABEL_590:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "pronounce_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based pronunciation");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v142 = operator new(0x20uLL);
  *v142 = off_1EA92FBF0;
  v143 = (std::string *)(v142 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v143, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v143->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v142[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v142;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v144 = v196;
  if (v196 == v194)
  {
    v145 = 4;
    v144 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_607;
    v145 = 5;
  }
  (*((void (**)(void))*v144 + v145))();
LABEL_607:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "markup");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle markup");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v146 = operator new(0x20uLL);
  *v146 = off_1EA930640;
  v147 = (std::string *)(v146 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v147, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v147->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v146[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v146;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v148 = v196;
  if (v196 == v194)
  {
    v149 = 4;
    v148 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_624;
    v149 = 5;
  }
  (*((void (**)(void))*v148 + v149))();
LABEL_624:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "hydra_udct");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle hydra user dictionary");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v150 = operator new(0x20uLL);
  *v150 = off_1EA92FCF8;
  v151 = (std::string *)(v150 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v151, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v151->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v150[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v150;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v152 = v196;
  if (v196 == v194)
  {
    v153 = 4;
    v152 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_641;
    v153 = 5;
  }
  (*((void (**)(void))*v152 + v153))();
LABEL_641:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "count");
  std::string::basic_string[abi:ne180100]<0>(__p, "Count phonemes, syllables, words, and phrases");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v154 = operator new(0x20uLL);
  *v154 = off_1EA930328;
  v155 = (std::string *)(v154 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v155, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v155->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v154[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v154;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v156 = v196;
  if (v196 == v194)
  {
    v157 = 4;
    v156 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_658;
    v157 = 5;
  }
  (*((void (**)(void))*v156 + v157))();
LABEL_658:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "extract");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract features");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v158 = operator new(0x20uLL);
  *v158 = off_1EA9301C8;
  v159 = (std::string *)(v158 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v159, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v159->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v158[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v158;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v160 = v196;
  if (v196 == v194)
  {
    v161 = 4;
    v160 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_675;
    v161 = 5;
  }
  (*((void (**)(void))*v160 + v161))();
LABEL_675:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "extract_table");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract features to text table");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v162 = operator new(0x20uLL);
  *v162 = off_1EA9304E0;
  v163 = (std::string *)(v162 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v163, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v163->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v162[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v162;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v164 = v196;
  if (v196 == v194)
  {
    v165 = 4;
    v164 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_692;
    v165 = 5;
  }
  (*((void (**)(void))*v164 + v165))();
LABEL_692:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "extract_gryphront");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract gryphront-style features");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v166 = operator new(0x20uLL);
  *v166 = off_1EA930590;
  v167 = (std::string *)(v166 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v167, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v167->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v166[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v166;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v168 = v196;
  if (v196 == v194)
  {
    v169 = 4;
    v168 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_709;
    v169 = 5;
  }
  (*((void (**)(void))*v168 + v169))();
LABEL_709:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "inject_json");
  std::string::basic_string[abi:ne180100]<0>(__p, "Reconstruct data structures from JSON dump");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v170 = operator new(0x20uLL);
  *v170 = off_1EA92F9E0;
  v171 = (std::string *)(v170 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v171, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v171->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v170[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v170;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v172 = v196;
  if (v196 == v194)
  {
    v173 = 4;
    v172 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_726;
    v173 = 5;
  }
  (*((void (**)(void))*v172 + v173))();
LABEL_726:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "dump_json");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dump tokens and attributes as JSON");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v174 = operator new(0x20uLL);
  *v174 = off_1EA92FC48;
  v175 = (std::string *)(v174 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v175, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v175->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v174[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v174;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v176 = v196;
  if (v196 == v194)
  {
    v177 = 4;
    v176 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_743;
    v177 = 5;
  }
  (*((void (**)(void))*v176 + v177))();
LABEL_743:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "dump_ssml");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dump input as SSML");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v178 = operator new(0x20uLL);
  *v178 = off_1EA92FCA0;
  v179 = (std::string *)(v178 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v179, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v179->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v178[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v178;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v180 = v196;
  if (v196 == v194)
  {
    v181 = 4;
    v180 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_760;
    v181 = 5;
  }
  (*((void (**)(void))*v180 + v181))();
LABEL_760:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v190, "dump_legacy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dump input in Vocalizer Expressive compliant format");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v191 = v190;
  v196 = 0;
  v182 = operator new(0x20uLL);
  *v182 = off_1EA92FFB8;
  v183 = (std::string *)(v182 + 1);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v183, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v183->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    v182[3] = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v196 = (void **)v182;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v190, (uint64_t)__p, 0, v194);
  v184 = v196;
  if (v196 == v194)
  {
    v185 = 4;
    v184 = v194;
  }
  else
  {
    if (!v196)
      goto LABEL_777;
    v185 = 5;
  }
  (*((void (**)(void))*v184 + v185))();
LABEL_777:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v189 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v194, "process");
  std::string::basic_string[abi:ne180100]<0>(&v191, "Standard processing pipeline");
  v192[0] = &off_1EA930958;
  v192[1] = this;
  v193 = v192;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)v194, (uint64_t)&v191, 1, v192);
  v186 = v193;
  if (v193 == v192)
  {
    v187 = 4;
    v186 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_788;
    v187 = 5;
  }
  (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_788:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v195 < 0)
    operator delete(v194[0]);
}

void sub_1DE94543C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v31;
  _QWORD **v32;
  void **v33;
  void *v34;

  v34 = v31;
  operator delete(v34);
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v30 + 47) < 0)
    operator delete(*v33);
  std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(*v32);
  _Unwind_Resume(a1);
}

void FrontendModuleBroker::register_module(uint64_t **a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void **v12;
  void **v13;
  const void **v14;
  char *v15;
  std::string *v16;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;
  std::string v25;
  char v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v25 = *(std::string *)a3;
  v26 = a4;
  v9 = v27;
  v10 = a5[3];
  if (v10)
  {
    if ((_QWORD *)v10 == a5)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v27);
      goto LABEL_9;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  v28 = (_QWORD *)v10;
LABEL_9:
  v11 = (char *)a1[1];
  v12 = (void **)(a1 + 1);
  v13 = (void **)(a1 + 1);
  if (!v11)
    goto LABEL_18;
  v12 = (void **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      v13 = (void **)v11;
      v14 = (const void **)(v11 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2, (const void **)v11 + 4))break;
      v11 = (char *)*v13;
      v12 = v13;
      if (!*v13)
        goto LABEL_18;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v14, (const void **)a2))
      break;
    v12 = v13 + 1;
    v11 = (char *)v13[1];
    if (!v11)
      goto LABEL_18;
  }
  v15 = (char *)*v12;
  if (!*v12)
  {
LABEL_18:
    v15 = (char *)operator new(0x78uLL);
    v23[0] = v15;
    v23[1] = a1 + 1;
    v24 = 0;
    v16 = (std::string *)(v15 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v15 + 6) = *(_QWORD *)(a2 + 16);
    }
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    v24 = 1;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v12 = v15;
    v17 = (uint64_t *)**a1;
    v18 = (uint64_t *)v15;
    if (v17)
    {
      *a1 = v17;
      v18 = (uint64_t *)*v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v23[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  }
  v19 = (void **)(v15 + 56);
  if (v15[79] < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *((_QWORD *)v15 + 9) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  v15[80] = v26;
  v20 = (char *)*((_QWORD *)v15 + 14);
  *((_QWORD *)v15 + 14) = 0;
  if (v20 == v15 + 88)
  {
    v21 = 4;
    v20 = v15 + 88;
  }
  else
  {
    if (!v20)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_31:
  if (!v28)
  {
    *((_QWORD *)v15 + 14) = 0;
    goto LABEL_40;
  }
  if (v28 != v27)
  {
    *((_QWORD *)v15 + 14) = v28;
    v28 = 0;
    goto LABEL_40;
  }
  *((_QWORD *)v15 + 14) = v15 + 88;
  (*(void (**)(_QWORD *, char *))(v27[0] + 24))(v27, v15 + 88);
  if (v28 == v27)
  {
    v22 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_40;
    v22 = 5;
    v9 = v28;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v22))(v9);
LABEL_40:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1DE945C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,FrontendModuleBroker::ModuleData>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,FrontendModuleBroker::ModuleData>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void FrontendModuleBroker::ModuleData::~ModuleData(FrontendModuleBroker::ModuleData *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,FrontendModuleBroker::ModuleData>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA930958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA930958;
  a2[1] = v2;
  return result;
}

void std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::string::size_type v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string v18;
  std::string __p;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  v8 = *(_QWORD *)(a1 + 8);
  FrontendModuleBroker::standard_frontend_pipeline(&__p, *a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v18 = __p;
  v16 = v6;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  FrontendModuleBroker::create(a4, v8, (const char *)&v18, (uint64_t)&v16, v7);
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DE945FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (a22 < 0)
    operator delete(__p);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

void FrontendModuleBroker::create(_OWORD *a1, uint64_t a2, const char *a3, uint64_t a4, std::string::size_type a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  std::string *v15;
  const void *p_p;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::chrono::steady_clock::time_point v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  void *v44;
  std::chrono::steady_clock::time_point v45;
  void *v46;
  std::chrono::steady_clock::time_point v47;
  const char *v48;
  int v49;
  void *exception;
  const char *v51;
  void *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char __s1[8];
  char v60;
  std::string v61;
  void *__p;
  size_t v63;
  uint64_t v64;
  char *__stringp;
  _BYTE buf[24];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (a3[23] < 0)
    a3 = *(const char **)a3;
  v64 = 0;
  __stringp = strdup(a3);
  __p = 0;
  v63 = 0;
  v54 = __stringp;
  if (!__stringp)
  {
    *a1 = *(_OWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return;
  }
  v53 = a1;
  v9 = a2 + 8;
  do
  {
    v10 = strsep(&__stringp, ",");
    v11 = MEMORY[0x1DF0ECA80](&__p, v10);
    v12 = *(unsigned __int8 *)(v11 + 23);
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      break;
    v13 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a2, (const void **)&__p);
    if (*(char *)(a2 + 47) < 0)
    {
      if (*(_QWORD *)(a2 + 32))
      {
LABEL_12:
        if (v64 >= 0)
          v14 = HIBYTE(v64);
        else
          v14 = v63;
        std::string::basic_string[abi:ne180100]((uint64_t)&v61, v14 + 1);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v61;
        else
          v15 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if (v14)
        {
          if (v64 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v15, p_p, v14);
        }
        *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 95;
        v17 = *(char *)(a2 + 47);
        if (v17 >= 0)
          v18 = (const std::string::value_type *)(a2 + 24);
        else
          v18 = *(const std::string::value_type **)(a2 + 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a2 + 47);
        else
          v19 = *(_QWORD *)(a2 + 32);
        v20 = std::string::append(&v61, v18, v19);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        v22 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a2, (const void **)buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (v9 != v22)
          v13 = v22;
      }
    }
    else if (*(_BYTE *)(a2 + 47))
    {
      goto LABEL_12;
    }
    if (v13 == v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v51 = (const char *)&__p;
      if (v64 < 0)
        v51 = (const char *)__p;
      MEMORY[0x1DF0EC99C](exception, buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (*(_QWORD *)a4)
    {
      if (*(_BYTE *)(v13 + 80))
      {
        v52 = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)buf, "FrontendModuleBroker: Multiple text source in pipeline\n");
        MEMORY[0x1DF0EC99C](v52, buf);
        __cxa_throw(v52, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
    }
    else if (!*(_BYTE *)(v13 + 80))
    {
      std::string::basic_string[abi:ne180100]<0>(__s1, "source");
      v23 = *(std::__shared_weak_count **)(a4 + 8);
      v57 = *(_QWORD *)a4;
      v58 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      FrontendModuleBroker::create(buf, a2, __s1, &v57, a5);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a4, (__int128 *)buf);
      v26 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v58;
      if (v58)
      {
        v30 = (unint64_t *)&v58->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v60 < 0)
        operator delete(*(void **)__s1);
    }
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v33 = *(std::__shared_weak_count **)(a4 + 8);
    v55 = *(_QWORD *)a4;
    v56 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v61.__r_.__value_.__r.__words[0] = a5;
    v36 = *(_QWORD *)(v13 + 112);
    if (!v36)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, std::string *))(*(_QWORD *)v36 + 48))(buf, v36, &v55, &v61);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a4, (__int128 *)buf);
    v37 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v38 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v56;
    if (v56)
    {
      v41 = (unint64_t *)&v56->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      if (v64 >= 0)
        v44 = &__p;
      else
        v44 = __p;
      v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = (double)((v45.__d_.__rep_ - v32.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    }
    if (v64 >= 0)
      v46 = &__p;
    else
      v46 = __p;
    v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(6, "Init latency (%s): %.3f s", v48, v46, (double)((v47.__d_.__rep_ - v32.__d_.__rep_) / 1000000) / 1000.0);
  }
  while (__stringp);
  v49 = SHIBYTE(v64);
  free(v54);
  *v53 = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (v49 < 0)
    operator delete(__p);
}

void sub_1DE946638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FFB8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FFB8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FFB8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9467C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FFB8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __n128 v10;
  const std::string *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 v17;
  __n128 v18;

  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = UnparseLegacy::create(&v18, v6, v7);
  v11 = (const std::string *)(a1 + 8);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v10);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::string::operator=((std::string *)(v18.n128_u64[0] + 80), v11);
  v14 = v18;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v17 = v14;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v14 = v17;
    }
  }
  *a3 = v14;
}

void sub_1DE94694C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FCA0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FCA0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FCA0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE946B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FCA0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const std::string *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __n128 result;
  void *exception;
  _BYTE v28[24];

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v28, "UnparseSSML::create() needs non-NULL upstream argument");
    MEMORY[0x1DF0EC99C](exception, v28);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v9 = operator new(0xB8uLL);
  v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1EA933200;
  v11 = (unint64_t)(v9 + 3);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    do
      v15 = __ldxr(v12);
    while (__stxr(v15 + 1, v12));
  }
  UnparserModule::UnparserModule((uint64_t)(v9 + 3), v6, v5);
  v16 = (const std::string *)(a1 + 8);
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)(v10 + 24) = &off_1EA91CA98;
    *(_QWORD *)(v10 + 128) = &unk_1EA91CB00;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)(v10 + 24) = &off_1EA91E4C8;
    *(_QWORD *)(v10 + 128) = &unk_1EA91E530;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v22 = (unint64_t *)&v5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_QWORD *)(v10 + 24) = &off_1EA91E4C8;
    *(_QWORD *)(v10 + 128) = &unk_1EA91E530;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0;
  }
  std::string::operator=((std::string *)(v10 + 104), v16);
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a3 = result;
  return result;
}

void sub_1DE946E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v16;
  int v17;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v21 = (unint64_t *)&v15->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FC48;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FC48;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FC48;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9470D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FC48;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const std::string *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 result;
  void *exception;
  _BYTE v30[24];

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v30, "UnparseJSON::create() needs non-NULL upstream argument");
    MEMORY[0x1DF0EC99C](exception, v30);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v11 = operator new(0x110uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA9331C8;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
  }
  UnparserModule::UnparserModule((uint64_t)(v11 + 3), v7, v6);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *(_QWORD *)(v12 + 24) = &off_1EA91CA18;
    *(_QWORD *)(v12 + 128) = &unk_1EA91CA80;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(v12 + 24) = &off_1EA91CA18;
    *(_QWORD *)(v12 + 128) = &unk_1EA91CA80;
  }
  *(_QWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 24) = &off_1EA91E448;
  *(_QWORD *)(v12 + 128) = &unk_1EA91E4B0;
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 184) = v12 + 192;
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_QWORD *)(v12 + 208) = v12 + 216;
  *(_BYTE *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 256) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 160) = v12 + 168;
  v22 = (const std::string *)(a1 + 8);
  *(_QWORD *)(v12 + 152) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v8);
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v22);
  if (v6)
  {
    v26 = (unint64_t *)&v6->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE947420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v16;
  int v17;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v21 = (unint64_t *)&v15->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F9E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F9E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F9E0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94770C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F9E0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  const std::string *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 result;
  uint8_t v30[16];

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_ERROR, "InjectJSON::create() ignored non-NULL upstream argument", v30, 2u);
    }
    Diagnostics::log(3, "InjectJSON::create() ignored non-NULL upstream argument", v12);
  }
  v13 = operator new(0x168uLL);
  v14 = (unint64_t)v13;
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1EA9329E8;
  v15 = v13 + 3;
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
  }
  ParserModule::ParserModule((uint64_t)(v13 + 3), v7, v6);
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v15 = off_1EA91C318;
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *v15 = off_1EA91C318;
  }
  *(_QWORD *)(v14 + 24) = &off_1EA91D928;
  *(_QWORD *)(v14 + 264) = 0;
  *(_QWORD *)(v14 + 240) = 0;
  *(_QWORD *)(v14 + 224) = 0;
  *(_QWORD *)(v14 + 232) = v14 + 240;
  *(_QWORD *)(v14 + 248) = 0;
  *(_QWORD *)(v14 + 256) = v14 + 264;
  *(_QWORD *)(v14 + 288) = 0;
  *(_QWORD *)(v14 + 296) = 0;
  *(_QWORD *)(v14 + 272) = 0;
  *(_QWORD *)(v14 + 280) = v14 + 288;
  *(_BYTE *)(v14 + 304) = 0;
  *(_OWORD *)(v14 + 312) = 0u;
  *(_OWORD *)(v14 + 328) = 0u;
  *(_QWORD *)(v14 + 344) = 0;
  *(_QWORD *)(v14 + 352) = 0x8000000000000000;
  *(_QWORD *)(v14 + 216) = 0;
  v23 = (const std::string *)(a1 + 8);
  *(_QWORD *)(v14 + 208) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v8);
  if (v6)
  {
    v24 = (unint64_t *)&v6->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v14 + 104), v23);
  if (v6)
  {
    v27 = (unint64_t *)&v6->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v15;
  result.n128_u64[1] = v14;
  *a4 = result;
  return result;
}

void sub_1DE947A7C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930590;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930590;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930590;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE947D50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930590;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 result;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x3C8uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA9344D0;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  ExtractFeaturesToTarget::ExtractFeaturesToTarget(v11 + 3, v7, v6, v8);
  v16 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v16);
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE947F44(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9304E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9304E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9304E0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE948150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9304E0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  const std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x3C8uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA9341C0;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  ExtractFeaturesToTarget::ExtractFeaturesToTarget(v11 + 3, v7, v6, v8);
  v17 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *(_QWORD *)(v12 + 24) = &off_1EA920188;
    *(_QWORD *)(v12 + 952) = &unk_1EA920280;
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v21 = (unint64_t *)&v6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(v12 + 24) = &off_1EA920188;
    *(_QWORD *)(v12 + 952) = &unk_1EA920280;
  }
  std::string::operator=((std::string *)(v12 + 104), v17);
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE9483B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9301C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9301C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9301C8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9485E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9301C8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  const std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x3D0uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA9348C0;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  ExtractFeaturesImpl::ExtractFeaturesImpl((uint64_t)(v11 + 3), v7, v6, v8);
  v17 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *(_QWORD *)(v12 + 24) = &off_1EA920D48;
    *(_QWORD *)(v12 + 952) = 0;
    *(_QWORD *)(v12 + 968) = 0;
    *(_QWORD *)(v12 + 960) = 0;
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v21 = (unint64_t *)&v6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(v12 + 24) = &off_1EA920D48;
    *(_QWORD *)(v12 + 952) = 0;
    *(_QWORD *)(v12 + 968) = 0;
    *(_QWORD *)(v12 + 960) = 0;
  }
  std::string::operator=((std::string *)(v12 + 104), v17);
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE948850(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930328;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930328;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930328;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE948A88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930328;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  const std::string *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __n128 result;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (char *)operator new(0xC0uLL);
  v10 = (unint64_t)v9;
  *((_QWORD *)v9 + 1) = 0;
  v11 = (const std::string *)(a1 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA933F58;
  v12 = v9 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v9 + 3) = off_1EA91D8E0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA91EC18;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)(v10 + 24) = &off_1EA91FCE0;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_QWORD *)(v10 + 176) = 0;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v22 = (unint64_t *)&v5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 3) = &off_1EA91FCE0;
    *((_OWORD *)v9 + 8) = 0u;
    *((_OWORD *)v9 + 9) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    *((_QWORD *)v9 + 22) = 0;
  }
  std::string::operator=((std::string *)(v10 + 104), v11);
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v10;
  *a3 = result;
  return result;
}

void sub_1DE948D7C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FCF8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FCF8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FCF8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE948F40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FCF8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  const std::string *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type size;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  __n128 *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  const void *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t **v67;
  NSObject *v68;
  const char *v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t *v74;
  std::string *v75;
  __int128 v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  __n128 result;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  __int128 *p_p;
  __int128 __p;
  char v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = operator new(0x190uLL);
  v11 = (unint64_t)v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1EA9332E0;
  v12 = v10 + 3;
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v10 + 3), v5, v6, v7);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v12 = off_1EA91CD48;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *v12 = off_1EA91CD48;
  }
  *(_QWORD *)(v11 + 24) = &off_1EA91E730;
  *(_QWORD *)(v11 + 368) = 0;
  *(_QWORD *)(v11 + 376) = 0;
  __p = 0uLL;
  v20 = (uint64_t *)(v11 + 216);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 216, &__p);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)(v11 + 392) = 1;
  size = v7[5].__r_.__value_.__l.__size_;
  v25 = *(std::__shared_weak_count **)(size + 24);
  if (!v25 || (v99 = std::__shared_weak_count::lock(v25)) == 0)
  {
    v41 = 0;
    goto LABEL_68;
  }
  if (!*(_QWORD *)(size + 16))
  {
LABEL_67:
    v41 = v99;
    goto LABEL_68;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hydra_udct");
  v26 = v7[5].__r_.__value_.__l.__size_;
  v27 = (std::__shared_weak_count *)v7[5].__r_.__value_.__r.__words[2];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v26 + 24);
  if (!v30)
  {
    v38 = 0;
    v37 = 0;
    if (!v27)
      goto LABEL_52;
    goto LABEL_48;
  }
  v31 = a4;
  v32 = std::__shared_weak_count::lock(v30);
  if (v32)
  {
    v33 = v32;
    v34 = *(_QWORD *)(v26 + 16);
    if (v34
      && (v35 = v34 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v34 + 8), (unsigned __int8 *)&__p)))
    {
      p_p = &__p;
      v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, (unsigned __int8 *)&__p, &p_p);
      v37 = *((_QWORD *)v36 + 5);
      v38 = (std::__shared_weak_count *)*((_QWORD *)v36 + 6);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
    }
    else
    {
      v38 = 0;
      v37 = 0;
    }
    v42 = (unint64_t *)&v33->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  a4 = v31;
  if (v27)
  {
LABEL_48:
    v44 = (unint64_t *)&v27->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_52:
  if (v105 < 0)
    operator delete((void *)__p);
  v47 = *(_QWORD *)(v37 + 296);
  v46 = *(_QWORD *)(v37 + 304);
  if (v46)
  {
    v48 = (unint64_t *)(v46 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(std::__shared_weak_count **)(v11 + 376);
  *(_QWORD *)(v11 + 368) = v47;
  *(_QWORD *)(v11 + 376) = v46;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v11 + 216), *(_QWORD *)(v37 + 312), *(_QWORD *)(v37 + 320));
  *(_BYTE *)(v11 + 384) = *(_BYTE *)(v37 + 328);
  *(_QWORD *)(v11 + 392) = *(_QWORD *)(v37 + 336);
  if (!v38)
    goto LABEL_67;
  v53 = (unint64_t *)&v38->__shared_owners_;
  v41 = v99;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_68:
  v55 = *(const void **)(v11 + 40);
  if (v55)
  {
    if (v56)
    {
      v95 = v12;
      v96 = v6;
      v98 = *(std::__shared_weak_count **)(v11 + 48);
      if (v98)
      {
        v57 = (unint64_t *)&v98->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v100 = v41;
      v59 = (_QWORD *)*((_QWORD *)v56 + 24);
      v97 = (std::__shared_weak_count *)*((_QWORD *)v56 + 25);
      if (v97)
      {
        v60 = (unint64_t *)&v97->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v64 = (_QWORD *)*v59;
      v63 = v59 + 1;
      v62 = v64;
      if (v64 != v63)
      {
        do
        {
          v65 = (__int128 *)(v62 + 4);
          v66 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*v20, (const void **)v62 + 4);
          v67 = (uint64_t **)*v20;
          if (*v20 + 8 == v66)
          {
            v71 = v66;
            v72 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(*v20, &p_p, (const void **)v62 + 4);
            if (!*v72)
            {
              v73 = v72;
              v74 = (uint64_t *)operator new(0x48uLL);
              *(_QWORD *)&__p = v74;
              *((_QWORD *)&__p + 1) = v71;
              v104 = 0;
              v75 = (std::string *)(v74 + 4);
              if (*((char *)v62 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(v75, (const std::string::value_type *)v62[4], v62[5]);
              }
              else
              {
                v76 = *v65;
                v74[6] = v62[6];
                *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
              }
              v74[7] = v62[7];
              v77 = v62[8];
              v74[8] = v77;
              if (v77)
              {
                v78 = (unint64_t *)(v77 + 8);
                do
                  v79 = __ldxr(v78);
                while (__stxr(v79 + 1, v78));
              }
              v104 = 1;
              std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v67, (uint64_t)p_p, v73, v74);
              *(_QWORD *)&__p = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
            }
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v68 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v70 = (__int128 *)(v62 + 4);
              if (*((char *)v62 + 55) < 0)
                v70 = *(__int128 **)v65;
              LODWORD(__p) = 136315138;
              *(_QWORD *)((char *)&__p + 4) = v70;
              _os_log_impl(&dword_1DE3F6000, v68, OS_LOG_TYPE_ERROR, "[UDCT]Overwrite rules from upstream: %s", (uint8_t *)&__p, 0xCu);
            }
            if (*((char *)v62 + 55) < 0)
              v65 = *(__int128 **)v65;
            Diagnostics::log(3, "[UDCT]Overwrite rules from upstream: %s", v69, v65);
          }
          v80 = (_QWORD *)v62[1];
          if (v80)
          {
            do
            {
              v81 = v80;
              v80 = (_QWORD *)*v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              v81 = (_QWORD *)v62[2];
              v82 = *v81 == (_QWORD)v62;
              v62 = v81;
            }
            while (!v82);
          }
          v62 = v81;
        }
        while (v81 != v63);
      }
      v12 = v95;
      v6 = v96;
      v41 = v100;
      if (v97)
      {
        v83 = (unint64_t *)&v97->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      if (v98)
      {
        v85 = (unint64_t *)&v98->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
  }
  if (v41)
  {
    v87 = (unint64_t *)&v41->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v6)
  {
    v89 = (unint64_t *)&v6->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v91 = __ldaxr(v89);
    while (__stlxr(v91 - 1, v89));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(a1 + 8));
  if (v6)
  {
    v92 = (unint64_t *)&v6->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE94976C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, FrontendNNModule *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void **v32;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v31)
  {
    v36 = (unint64_t *)&v31->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (a28 < 0)
    operator delete(__p);
  v38 = (unint64_t *)&a17->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v28[15].__shared_owners_);
  FrontendNNModule::~FrontendNNModule(v32);
  if (v29)
  {
    v40 = (unint64_t *)&v29->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v42);
  if (v29)
  {
    v43 = (unint64_t *)&v29->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    v45 = (unint64_t *)&v29->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930640;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930640;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930640;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE949B88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930640;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const std::string *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 result;
  __n128 *v55;
  void *__p[2];
  char v57;
  void **v58;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x1A0uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA932160;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v11 + 3), v7, v6, v8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = off_1EA922640;
  MEMORY[0x1DF0ECA80](v12 + 128, "Markup");
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = &off_1EA91C378;
  *(_QWORD *)(v12 + 368) = 0;
  *(_QWORD *)(v12 + 376) = 0;
  *(_QWORD *)(v12 + 400) = 0;
  *(_QWORD *)(v12 + 408) = 0;
  size = v8[5].__r_.__value_.__l.__size_;
  v23 = *(std::__shared_weak_count **)(size + 24);
  if (!v23 || (v24 = std::__shared_weak_count::lock(v23)) == 0)
  {
    *(_QWORD *)(v12 + 384) = 0;
    *(_BYTE *)(v12 + 392) = 0;
    goto LABEL_58;
  }
  v25 = v24;
  if (*(_QWORD *)(size + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "markup");
    v26 = v8[5].__r_.__value_.__l.__size_;
    v27 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(std::__shared_weak_count **)(v26 + 24);
    if (v30)
    {
      v55 = a4;
      v31 = std::__shared_weak_count::lock(v30);
      if (v31)
      {
        v32 = v31;
        v33 = *(_QWORD *)(v26 + 16);
        if (v33
          && (v34 = v33 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v33 + 8), (unsigned __int8 *)__p)))
        {
          v58 = __p;
          v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)__p, (__int128 **)&v58);
          v36 = *((_QWORD *)v35 + 5);
          v37 = (std::__shared_weak_count *)*((_QWORD *)v35 + 6);
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
        }
        else
        {
          v37 = 0;
          v36 = 0;
        }
        v40 = (unint64_t *)&v32->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      else
      {
        v37 = 0;
        v36 = 0;
      }
      a4 = v55;
      if (!v27)
        goto LABEL_47;
    }
    else
    {
      v37 = 0;
      v36 = 0;
      if (!v27)
      {
LABEL_47:
        if (v57 < 0)
          operator delete(__p[0]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 368), *(_QWORD *)(v36 + 296), *(_QWORD *)(v36 + 304));
        if (v37)
        {
          v44 = (unint64_t *)&v37->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        goto LABEL_54;
      }
    }
    v42 = (unint64_t *)&v27->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_47;
  }
LABEL_54:
  *(_QWORD *)(v12 + 384) = 0;
  *(_BYTE *)(v12 + 392) = 0;
  v46 = (unint64_t *)&v25->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_58:
  v48 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v49 = (unint64_t *)&v6->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v48);
  if (v6)
  {
    v52 = (unint64_t *)&v6->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94A024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v27 = (unint64_t *)&v19->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v17[16].__shared_weak_owners_);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a10);
  FrontendNNModule::~FrontendNNModule(v18);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v31);
  if (v16)
  {
    v32 = (unint64_t *)&v16->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v34 = (unint64_t *)&v16->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FBF0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FBF0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FBF0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94A378(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FBF0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  const std::string *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  __n128 result;
  __n128 *v83;
  void *__p[2];
  char v85;
  void **v86;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x1B0uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA933040;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v11 + 3), v7, v6, v8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = off_1EA91C7A0;
  MEMORY[0x1DF0ECA80](v12 + 128, "PronounceNN");
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = off_1EA91E240;
  *(_QWORD *)(v12 + 376) = 0;
  *(_QWORD *)(v12 + 384) = 0;
  *(_QWORD *)(v12 + 368) = 0;
  *(_OWORD *)(v12 + 400) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  size = v8[5].__r_.__value_.__l.__size_;
  v23 = *(std::__shared_weak_count **)(size + 24);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      if (*(_QWORD *)(size + 16))
      {
        v83 = a4;
        std::string::basic_string[abi:ne180100]<0>(__p, "pronounce_nn");
        v26 = v8[5].__r_.__value_.__l.__size_;
        v27 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = *(std::__shared_weak_count **)(v26 + 24);
        if (v30 && (v31 = std::__shared_weak_count::lock(v30)) != 0)
        {
          v32 = v31;
          v33 = *(_QWORD *)(v26 + 16);
          if (v33
            && (v34 = v33 + 8,
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v33 + 8), (unsigned __int8 *)__p)))
          {
            v86 = __p;
            v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)__p, (__int128 **)&v86);
            v37 = *((_QWORD *)v35 + 5);
            v36 = (std::__shared_weak_count *)*((_QWORD *)v35 + 6);
            if (v36)
            {
              v38 = (unint64_t *)&v36->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
          }
          else
          {
            v36 = 0;
            v37 = 0;
          }
          v40 = (unint64_t *)&v32->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
        if (v27)
        {
          v42 = (unint64_t *)&v27->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v85 < 0)
          operator delete(__p[0]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 216), *(_QWORD *)(v37 + 448), *(_QWORD *)(v37 + 456));
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 232), *(_QWORD *)(v37 + 296), *(_QWORD *)(v37 + 304));
        *(_WORD *)(v12 + 392) = *(_WORD *)(v37 + 416);
        std::string::operator=((std::string *)(v12 + 368), (const std::string *)(v37 + 392));
        a4 = v83;
        v45 = *(_QWORD *)(v37 + 464);
        v44 = *(_QWORD *)(v37 + 472);
        if (v44)
        {
          v46 = (unint64_t *)(v44 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = *(std::__shared_weak_count **)(v12 + 408);
        *(_QWORD *)(v12 + 400) = v45;
        *(_QWORD *)(v12 + 408) = v44;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 416), *(_QWORD *)(v37 + 480), *(_QWORD *)(v37 + 488));
        std::string::operator=((std::string *)(v12 + 176), (const std::string *)(v37 + 424));
        v52 = *(_QWORD *)(v37 + 312);
        v51 = *(_QWORD *)(v37 + 320);
        if (v51)
        {
          v53 = (unint64_t *)(v51 + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        v55 = *(std::__shared_weak_count **)(v12 + 256);
        *(_QWORD *)(v12 + 248) = v52;
        *(_QWORD *)(v12 + 256) = v51;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v59 = *(_QWORD *)(v37 + 328);
        v58 = *(_QWORD *)(v37 + 336);
        if (v58)
        {
          v60 = (unint64_t *)(v58 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = *(std::__shared_weak_count **)(v12 + 272);
        *(_QWORD *)(v12 + 264) = v59;
        *(_QWORD *)(v12 + 272) = v58;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 280), *(_QWORD *)(v37 + 344), *(_QWORD *)(v37 + 352));
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 296), *(_QWORD *)(v37 + 360), *(_QWORD *)(v37 + 368));
        v66 = *(_QWORD *)(v37 + 376);
        v65 = *(_QWORD *)(v37 + 384);
        if (v65)
        {
          v67 = (unint64_t *)(v65 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = *(std::__shared_weak_count **)(v12 + 320);
        *(_QWORD *)(v12 + 312) = v66;
        *(_QWORD *)(v12 + 320) = v65;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        if (v36)
        {
          v72 = (unint64_t *)&v36->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v74 = (unint64_t *)&v25->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v76 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v77 = (unint64_t *)&v6->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v79 = __ldaxr(v77);
    while (__stlxr(v79 - 1, v77));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v76);
  if (v6)
  {
    v80 = (unint64_t *)&v6->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94A9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  void **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (a18 < 0)
    operator delete(__p);
  v29 = (unint64_t *)&v21->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19 + 400);
  if (*(char *)(v19 + 391) < 0)
    operator delete(*a11);
  FrontendNNModule::~FrontendNNModule(v20);
  if (v18)
  {
    v31 = (unint64_t *)&v18->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v19);
  operator delete(v33);
  if (v18)
  {
    v34 = (unint64_t *)&v18->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v36 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FB40;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FB40;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FB40;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94AD58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FB40;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const std::string *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 result;
  __n128 *v55;
  void *__p[2];
  char v57;
  void **v58;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x170uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA932EF0;
  v13 = v11 + 3;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v11 + 3), v7, v6, v8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = off_1EA91C658;
  MEMORY[0x1DF0ECA80](v12 + 128, "NormalizeNN");
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *v13 = &off_1EA91DFD0;
  size = v8[5].__r_.__value_.__l.__size_;
  v23 = *(std::__shared_weak_count **)(size + 24);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      if (!*(_QWORD *)(size + 16))
      {
LABEL_53:
        v46 = (unint64_t *)&v25->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_57;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "normalize_nn");
      v26 = v8[5].__r_.__value_.__l.__size_;
      v27 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(std::__shared_weak_count **)(v26 + 24);
      if (v30)
      {
        v55 = a4;
        v31 = std::__shared_weak_count::lock(v30);
        if (v31)
        {
          v32 = v31;
          v33 = *(_QWORD *)(v26 + 16);
          if (v33
            && (v34 = v33 + 8,
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v33 + 8), (unsigned __int8 *)__p)))
          {
            v58 = __p;
            v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)__p, (__int128 **)&v58);
            v36 = *((_QWORD *)v35 + 5);
            v37 = (std::__shared_weak_count *)*((_QWORD *)v35 + 6);
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
          }
          else
          {
            v37 = 0;
            v36 = 0;
          }
          v40 = (unint64_t *)&v32->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        else
        {
          v37 = 0;
          v36 = 0;
        }
        a4 = v55;
        if (!v27)
          goto LABEL_46;
      }
      else
      {
        v37 = 0;
        v36 = 0;
        if (!v27)
        {
LABEL_46:
          if (v57 < 0)
            operator delete(__p[0]);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 216), *(_QWORD *)(v36 + 296), *(_QWORD *)(v36 + 304));
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 232), *(_QWORD *)(v36 + 312), *(_QWORD *)(v36 + 320));
          std::string::operator=((std::string *)(v12 + 176), (const std::string *)(v36 + 328));
          if (v37)
          {
            v44 = (unint64_t *)&v37->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          goto LABEL_53;
        }
      }
      v42 = (unint64_t *)&v27->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      goto LABEL_46;
    }
  }
LABEL_57:
  v48 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v49 = (unint64_t *)&v6->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v48);
  if (v6)
  {
    v52 = (unint64_t *)&v6->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94B1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v27 = (unint64_t *)&v19->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  FrontendNNModule::~FrontendNNModule(v18);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v31);
  if (v16)
  {
    v32 = (unint64_t *)&v16->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v34 = (unint64_t *)&v16->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930698;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930698;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930698;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94B564(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930698;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const std::string *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 result;
  __n128 *v55;
  void *__p[2];
  char v57;
  void **v58;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x180uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA932320;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v11 + 3), v7, v6, v8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = off_1EA922798;
  MEMORY[0x1DF0ECA80](v12 + 128, "Rewrite");
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = &off_1EA91C900;
  *(_QWORD *)(v12 + 368) = 0;
  *(_QWORD *)(v12 + 376) = 0;
  size = v8[5].__r_.__value_.__l.__size_;
  v23 = *(std::__shared_weak_count **)(size + 24);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      if (!*(_QWORD *)(size + 16))
      {
LABEL_53:
        v46 = (unint64_t *)&v25->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_57;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "rewrite");
      v26 = v8[5].__r_.__value_.__l.__size_;
      v27 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(std::__shared_weak_count **)(v26 + 24);
      if (v30)
      {
        v55 = a4;
        v31 = std::__shared_weak_count::lock(v30);
        if (v31)
        {
          v32 = v31;
          v33 = *(_QWORD *)(v26 + 16);
          if (v33
            && (v34 = v33 + 8,
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v33 + 8), (unsigned __int8 *)__p)))
          {
            v58 = __p;
            v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)__p, (__int128 **)&v58);
            v36 = (uint64_t *)*((_QWORD *)v35 + 5);
            v37 = (std::__shared_weak_count *)*((_QWORD *)v35 + 6);
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
          }
          else
          {
            v37 = 0;
            v36 = 0;
          }
          v40 = (unint64_t *)&v32->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        else
        {
          v37 = 0;
          v36 = 0;
        }
        a4 = v55;
        if (!v27)
          goto LABEL_46;
      }
      else
      {
        v37 = 0;
        v36 = 0;
        if (!v27)
        {
LABEL_46:
          if (v57 < 0)
            operator delete(__p[0]);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 216), v36[37], v36[38]);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 368), v36[39], v36[40]);
          if (v37)
          {
            v44 = (unint64_t *)&v37->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          goto LABEL_53;
        }
      }
      v42 = (unint64_t *)&v27->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      goto LABEL_46;
    }
  }
LABEL_57:
  v48 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v49 = (unint64_t *)&v6->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v48);
  if (v6)
  {
    v52 = (unint64_t *)&v6->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94B9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v27 = (unint64_t *)&v19->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a10);
  FrontendNNModule::~FrontendNNModule(v18);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v31);
  if (v16)
  {
    v32 = (unint64_t *)&v16->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v34 = (unint64_t *)&v16->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930430;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930430;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930430;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94BD3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930430;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  const std::string *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __n128 result;
  std::__shared_weak_count *v54;
  void *__p[2];
  char v56;
  void **v57;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0x88uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA934230;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91F290;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91F290;
  }
  *v13 = &off_1EA920308;
  v22 = *(_QWORD *)(v8 + 128);
  v23 = *(std::__shared_weak_count **)(v22 + 24);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      if (!*(_QWORD *)(v22 + 16))
      {
LABEL_54:
        v45 = (unint64_t *)&v25->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "join_pronunciations");
      v27 = *(_QWORD *)(v8 + 128);
      v26 = *(std::__shared_weak_count **)(v8 + 136);
      if (v26)
      {
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(std::__shared_weak_count **)(v27 + 24);
      if (!v30 || (v31 = std::__shared_weak_count::lock(v30)) == 0)
      {
        v35 = 0;
        v36 = 0;
LABEL_42:
        if (v26)
        {
          v41 = (unint64_t *)&v26->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (v56 < 0)
          operator delete(__p[0]);
        *(_QWORD *)(v12 + 128) = *(_QWORD *)(v36 + 296);
        if (v35)
        {
          v43 = (unint64_t *)&v35->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        goto LABEL_54;
      }
      v32 = *(_QWORD *)(v27 + 16);
      v54 = v31;
      if (v32)
      {
        v33 = v32 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v32 + 8), (unsigned __int8 *)__p))
        {
          v57 = __p;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)__p, (__int128 **)&v57);
          v36 = *((_QWORD *)v34 + 5);
          v35 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          if (v35)
          {
            v37 = (unint64_t *)&v35->__shared_owners_;
            v31 = v54;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
LABEL_38:
            v39 = (unint64_t *)&v31->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v54);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v31 = v54;
        goto LABEL_38;
      }
      v35 = 0;
      v36 = 0;
      goto LABEL_38;
    }
  }
LABEL_58:
  v47 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v48 = (unint64_t *)&v6->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v47);
  if (v6)
  {
    v51 = (unint64_t *)&v6->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94C1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v26 = (unint64_t *)&v19->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16)
  {
    v28 = (unint64_t *)&v16->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v30);
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930380;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930380;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930380;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94C4A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930380;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::string::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  const std::string *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __n128 result;
  std::__shared_weak_count *v53;
  __n128 *v54;
  _QWORD *v55;
  void *__p[2];
  char v57;
  void **v58;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0xB0uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA934070;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91ECC8;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91ECC8;
  }
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 24) = off_1EA91FEB8;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  size = v8[5].__r_.__value_.__l.__size_;
  v23 = *(std::__shared_weak_count **)(size + 24);
  if (!v23)
  {
    v24 = 0;
    goto LABEL_56;
  }
  v24 = std::__shared_weak_count::lock(v23);
  if (v24 && *(_QWORD *)(size + 16))
  {
    v54 = a4;
    v55 = v13;
    std::string::basic_string[abi:ne180100]<0>(__p, "map_pronunciations");
    v25 = v8[5].__r_.__value_.__l.__size_;
    v26 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(std::__shared_weak_count **)(v25 + 24);
    if (!v29 || (v30 = std::__shared_weak_count::lock(v29)) == 0)
    {
      v35 = 0;
      v34 = 0;
LABEL_43:
      if (v26)
      {
        v40 = (unint64_t *)&v26->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v57 < 0)
        operator delete(__p[0]);
      *(_OWORD *)(v12 + 152) = *(_OWORD *)(v34 + 296);
      *(_QWORD *)(v12 + 168) = *(_QWORD *)(v34 + 312);
      a4 = v54;
      if (v35)
      {
        v42 = (unint64_t *)&v35->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v13 = v55;
      goto LABEL_56;
    }
    v31 = *(_QWORD *)(v25 + 16);
    v53 = v30;
    if (v31)
    {
      v32 = v31 + 8;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)__p))
      {
        v58 = __p;
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)__p, (__int128 **)&v58);
        v34 = *((_QWORD *)v33 + 5);
        v35 = (std::__shared_weak_count *)*((_QWORD *)v33 + 6);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          v30 = v53;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
LABEL_39:
          v38 = (unint64_t *)&v30->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v53);
          }
          goto LABEL_43;
        }
      }
      else
      {
        v35 = 0;
        v34 = 0;
      }
      v30 = v53;
      goto LABEL_39;
    }
    v35 = 0;
    v34 = 0;
    goto LABEL_39;
  }
LABEL_56:
  std::string::operator=((std::string *)(v12 + 128), v8);
  v44 = (const std::string *)(a1 + 8);
  if (v24)
  {
    v45 = (unint64_t *)&v24->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v6)
  {
    v47 = (unint64_t *)&v6->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v44);
  if (v6)
  {
    v50 = (unint64_t *)&v6->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94C980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  void **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (a18 < 0)
    operator delete(__p);
  v28 = (unint64_t *)&v21->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (*(char *)(v19 + 151) < 0)
    operator delete(*v20);
  FrontendModule::~FrontendModule(a12);
  if (v18)
  {
    v30 = (unint64_t *)&v18->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v19);
  operator delete(v32);
  if (v18)
  {
    v33 = (unint64_t *)&v18->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v35 = (unint64_t *)&v18->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FDA8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FDA8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FDA8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94CC68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FDA8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  const std::string *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type size;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __n128 result;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  void *__p[2];
  char v62;
  void **v63;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xC0uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA9334D8;
  v12 = v10 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA91D020;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA91D020;
  }
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 24) = off_1EA91EB00;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 168) = 0;
  *(_QWORD *)(v11 + 176) = 0;
  *(_BYTE *)(v11 + 184) = 1;
  size = v7[5].__r_.__value_.__l.__size_;
  v22 = *(std::__shared_weak_count **)(size + 24);
  if (!v22)
  {
    v23 = 0;
    goto LABEL_64;
  }
  v23 = std::__shared_weak_count::lock(v22);
  if (v23 && *(_QWORD *)(size + 16))
  {
    v59 = v12;
    std::string::basic_string[abi:ne180100]<0>(__p, "amend_phonemes");
    v24 = v7[5].__r_.__value_.__l.__size_;
    v25 = (std::__shared_weak_count *)v7[5].__r_.__value_.__r.__words[2];
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = *(std::__shared_weak_count **)(v24 + 24);
    if (!v28 || (v29 = std::__shared_weak_count::lock(v28)) == 0)
    {
      v33 = 0;
      v34 = 0;
LABEL_43:
      if (v25)
      {
        v39 = (unint64_t *)&v25->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v62 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(v11 + 128) = *(_QWORD *)(v34 + 296);
      v42 = *(_QWORD *)(v34 + 304);
      v41 = *(_QWORD *)(v34 + 312);
      if (v41)
      {
        v43 = (unint64_t *)(v41 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = *(std::__shared_weak_count **)(v11 + 144);
      *(_QWORD *)(v11 + 136) = v42;
      *(_QWORD *)(v11 + 144) = v41;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      *(_DWORD *)(v11 + 152) = *(_DWORD *)(v34 + 320);
      if (v33)
      {
        v48 = (unint64_t *)&v33->__shared_owners_;
        v12 = v59;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      else
      {
        v12 = v59;
      }
      goto LABEL_64;
    }
    v30 = *(_QWORD *)(v24 + 16);
    v58 = v29;
    if (v30)
    {
      v31 = v30 + 8;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v30 + 8), (unsigned __int8 *)__p))
      {
        v63 = __p;
        v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (unsigned __int8 *)__p, (__int128 **)&v63);
        v34 = *((_QWORD *)v32 + 5);
        v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 6);
        if (v33)
        {
          v35 = (unint64_t *)&v33->__shared_owners_;
          v29 = v58;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
LABEL_39:
          v37 = (unint64_t *)&v29->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v58);
          }
          goto LABEL_43;
        }
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      v29 = v58;
      goto LABEL_39;
    }
    v33 = 0;
    v34 = 0;
    goto LABEL_39;
  }
LABEL_64:
  std::string::operator=((std::string *)(v11 + 160), v7);
  if (v23)
  {
    v50 = (unint64_t *)&v23->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v5)
  {
    v52 = (unint64_t *)&v5->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v54 = __ldaxr(v52);
    while (__stlxr(v54 - 1, v52));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(a1 + 8));
  if (v5)
  {
    v55 = (unint64_t *)&v5->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE94D1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&a9->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (a18 < 0)
    operator delete(__p);
  v29 = (unint64_t *)&v22->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (*(char *)(v19 + 183) < 0)
    operator delete(*v21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  FrontendModule::~FrontendModule(a10);
  if (v18)
  {
    v31 = (unint64_t *)&v18->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v19);
  operator delete(v33);
  if (v18)
  {
    v34 = (unint64_t *)&v18->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v36 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FF60;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FF60;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FF60;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94D4AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FF60;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  FrontendModule *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  const std::string *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 result;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (char *)operator new(0x88uLL);
  v10 = (unint64_t)v9;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA933858;
  v11 = (FrontendModule *)(v9 + 24);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    do
      v15 = __ldxr(v12);
    while (__stxr(v15 + 1, v12));
    *((_QWORD *)v9 + 3) = off_1EA91D8E0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = v5;
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *((_QWORD *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)v11 = off_1EA91D6B0;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 3) = off_1EA91D6B0;
  }
  *(_QWORD *)(v10 + 24) = &off_1EA91F008;
  *(_DWORD *)(v10 + 128) = 0;
  *(_BYTE *)(v10 + 132) = 0;
  FrontendModule::delete_tokens(v11);
  *(_BYTE *)(v10 + 32) = 0;
  v21 = *(_QWORD *)(v10 + 40);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  v22 = (const std::string *)(a1 + 8);
  if (v5)
  {
    v23 = (unint64_t *)&v5->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v10 + 104), v22);
  if (v5)
  {
    v26 = (unint64_t *)&v5->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a3 = result;
  return result;
}

void sub_1DE94D7B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  FrontendModule::~FrontendModule(v3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v7);
  if (v1)
  {
    v8 = (unint64_t *)&v1->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v10 = (unint64_t *)&v1->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930068;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930068;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930068;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94D9C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930068;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const std::string *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 result;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *__p;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xD0uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA933A88;
  v12 = v10 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
  }
  *v12 = off_1EA91DB88;
  v19 = *(unsigned __int8 *)(v7 + 144);
  __p = (void *)(v7 + 144);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0x8000000000000000;
  if (v19 == 1)
  {
    v53 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(v7 + 152), "pronounce");
    v19 = *(unsigned __int8 *)(v7 + 144);
  }
  else
  {
    if (v19 == 2)
    {
      v20 = *(_QWORD *)(v7 + 152);
      v54 = *(_QWORD *)(v20 + 8);
      v48 = (unint64_t)(v7 + 144);
      v49 = 0;
      v50 = 0;
      v51 = 0x8000000000000000;
LABEL_24:
      v49 = *(_QWORD *)(v20 + 8);
      goto LABEL_27;
    }
    v56 = 1;
  }
  v48 = (unint64_t)(v7 + 144);
  v49 = 0;
  v50 = 0;
  v51 = 0x8000000000000000;
  if (v19 == 1)
  {
    *((_QWORD *)&v48 + 1) = *(_QWORD *)(v7 + 152) + 8;
  }
  else
  {
    if (v19 == 2)
    {
      v20 = *(_QWORD *)(v7 + 152);
      goto LABEL_24;
    }
    v51 = 1;
  }
LABEL_27:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v48))
  {
    *(_BYTE *)(v11 + 128) = 0;
  }
  else
  {
    v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7 + 144, "pronounce");
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentence_level");
    LOBYTE(v48) = 0;
    *(_BYTE *)(v11 + 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v21, (const void **)&__p, (unsigned __int8 *)&v48);
    if (SHIBYTE(v54) < 0)
      operator delete(__p);
  }
  __p = (void *)(v7 + 144);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0x8000000000000000;
  v22 = *(unsigned __int8 *)(v7 + 144);
  if (v22 == 1)
  {
    v53 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(v7 + 152), "pronounce");
    v22 = *(unsigned __int8 *)(v7 + 144);
  }
  else
  {
    if (v22 == 2)
    {
      v23 = *(_QWORD *)(v7 + 152);
      v54 = *(_QWORD *)(v23 + 8);
      v48 = (unint64_t)(v7 + 144);
      v49 = 0;
      v50 = 0;
      v51 = 0x8000000000000000;
LABEL_39:
      v49 = *(_QWORD *)(v23 + 8);
      goto LABEL_42;
    }
    v56 = 1;
  }
  v48 = (unint64_t)(v7 + 144);
  v49 = 0;
  v50 = 0;
  v51 = 0x8000000000000000;
  if (v22 == 1)
  {
    *((_QWORD *)&v48 + 1) = *(_QWORD *)(v7 + 152) + 8;
  }
  else
  {
    if (v22 == 2)
    {
      v23 = *(_QWORD *)(v7 + 152);
      goto LABEL_39;
    }
    v51 = 1;
  }
LABEL_42:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v48))
  {
    *(_BYTE *)(v11 + 129) = 0;
  }
  else
  {
    v24 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7 + 144, "pronounce");
    std::string::basic_string[abi:ne180100]<0>(&__p, "pitch");
    LOBYTE(v48) = 0;
    *(_BYTE *)(v11 + 129) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v24, (const void **)&__p, (unsigned __int8 *)&v48);
    if (SHIBYTE(v54) < 0)
      operator delete(__p);
  }
  if (v5)
  {
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_OWORD *)(v11 + 192) = 0u;
  *(_QWORD *)(v11 + 24) = &off_1EA91F348;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 96) + 32))(&__p, *(_QWORD *)(v7 + 96), 1718776943, 0);
  FastRewriter::create(&v48, (std::string::value_type *)&__p);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 160, &v48);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 24))(*(_QWORD *)(v11 + 160));
  if (*(_BYTE *)(v11 + 128))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 96) + 32))(&v48, *(_QWORD *)(v7 + 96), 1718776677, 0);
    FastRewriter::create(&v47, (std::string::value_type *)&v48);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 176, &v47);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 176) + 24))(*(_QWORD *)(v11 + 176));
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  if (*(_BYTE *)(v11 + 129))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 96) + 32))(&v48, *(_QWORD *)(v7 + 96), 1718775913, 0);
    FastRewriter::create(&v47, (std::string::value_type *)&v48);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 192, &v47);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 192) + 24))(*(_QWORD *)(v11 + 192));
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  *(_QWORD *)(v11 + 136) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v7);
  v48 = 0uLL;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 144, &v48);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (const std::string *)(a1 + 8);
  if (SHIBYTE(v54) < 0)
    operator delete(__p);
  if (v5)
  {
    v40 = (unint64_t *)&v5->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), v39);
  if (v5)
  {
    v43 = (unint64_t *)&v5->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE94E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  if (a26 < 0)
    operator delete(__p);
  FrontendModule::~FrontendModule(a10);
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v33);
  if (v26)
  {
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v36 = (unint64_t *)&v26->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FEB0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FEB0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FEB0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94E410(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FEB0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  const std::string *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 result;
  void *__p[2];
  char v31;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0x90uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA933708;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91D540;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91D540;
  }
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 24) = &off_1EA91EE18;
  *(_QWORD *)(v12 + 136) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v8 + 96) + 32))(__p, *(_QWORD *)(v8 + 96), 1731358822, 0);
  v22 = FSTGrammar::create((const char *)__p, 0);
  std::shared_ptr<FSTGrammar>::reset[abi:ne180100]<FSTGrammar,void>(v12 + 128, v22);
  v23 = (const std::string *)(a1 + 8);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v24 = (unint64_t *)&v6->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v23);
  if (v6)
  {
    v27 = (unint64_t *)&v6->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE94E74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9308A8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9308A8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9308A8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94E980(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9308A8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __n128 result;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t v65;
  uint64_t v67;
  void *__p[2];
  char v69;
  void **v70;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (char *)operator new(0xF0uLL);
  v10 = (unint64_t)v9;
  *((_QWORD *)v9 + 1) = 0;
  v11 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA932780;
  v12 = v9 + 24;
  v65 = (unint64_t)(v9 + 24);
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v9 + 3) = off_1EA91D8E0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v4;
    *((_QWORD *)v9 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA922C38;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v4;
    *((_QWORD *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 3) = off_1EA922C38;
  }
  *(_OWORD *)(v10 + 216) = 0u;
  *(_QWORD *)(v10 + 128) = &unk_1EA91D4D0;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_QWORD *)(v10 + 24) = &off_1EA91D480;
  *(_OWORD *)(v10 + 200) = 0u;
  v67 = v6;
  v21 = *(_QWORD *)(v6 + 128);
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  if (v22)
  {
    v63 = std::__shared_weak_count::lock(v22);
    if (v63)
    {
      if (!*(_QWORD *)(v21 + 16))
      {
LABEL_57:
        v42 = (unint64_t *)&v63->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        goto LABEL_61;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "pronounce");
      v24 = *(_QWORD *)(v67 + 128);
      v23 = *(std::__shared_weak_count **)(v67 + 136);
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = *(std::__shared_weak_count **)(v24 + 24);
      if (!v27)
      {
        v62 = 0;
        v33 = 0;
        goto LABEL_45;
      }
      v60 = v23;
      v28 = std::__shared_weak_count::lock(v27);
      if (!v28)
      {
        v62 = 0;
        v33 = 0;
LABEL_44:
        v23 = v60;
LABEL_45:
        if (v23)
        {
          v38 = (unint64_t *)&v23->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            v61 = v23;
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        if (v69 < 0)
          operator delete(__p[0]);
        *(_QWORD *)(v10 + 232) = v33[49];
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v10 + 168), v33[41], v33[42]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v10 + 152), v33[39], v33[40]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v10 + 136), v33[37], v33[38]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v10 + 184), v33[43], v33[44]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v10 + 200), v33[45], v33[46]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v10 + 216), v33[47], v33[48]);
        if (v62)
        {
          v40 = (unint64_t *)&v62->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        goto LABEL_57;
      }
      v29 = *(_QWORD *)(v24 + 16);
      v59 = v28;
      if (v29)
      {
        v30 = v29 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v29 + 8), (unsigned __int8 *)__p))
        {
          v70 = __p;
          v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (unsigned __int8 *)__p, (__int128 **)&v70);
          v33 = (uint64_t *)*((_QWORD *)v31 + 5);
          v32 = *((_QWORD *)v31 + 6);
          if (v32)
          {
            v62 = (std::__shared_weak_count *)*((_QWORD *)v31 + 6);
            v34 = (unint64_t *)(v32 + 8);
            v28 = v59;
            v23 = v60;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
            goto LABEL_40;
          }
          v62 = 0;
        }
        else
        {
          v62 = 0;
          v33 = 0;
        }
        v28 = v59;
        v23 = v60;
      }
      else
      {
        v62 = 0;
        v33 = 0;
        v23 = v60;
      }
LABEL_40:
      v36 = (unint64_t *)&v28->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (v37)
        goto LABEL_45;
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v59);
      goto LABEL_44;
    }
  }
LABEL_61:
  if (v5)
  {
    v44 = (unint64_t *)&v5->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v46 = *(_QWORD *)(v67 + 128);
  if (v46)
  {
    __p[0] = (void *)(v10 + 128);
    __p[1] = (void *)v10;
    do
      v47 = __ldxr(v11);
    while (__stxr(v47 + 1, v11));
    std::recursive_mutex::lock((std::recursive_mutex *)(v46 + 56));
    Agglomerate::set<std::shared_ptr<PLSHandler>>(v46 + 32, (__int128 *)__p);
    v48 = (std::__shared_weak_count *)__p[1];
    __p[0] = 0;
    __p[1] = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v46 + 56));
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v52 = (unint64_t *)((char *)__p[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  if (v5)
  {
    v54 = (unint64_t *)&v5->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v10 + 104), (const std::string *)(a1 + 8));
  if (v5)
  {
    v56 = (unint64_t *)&v5->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = v65;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_1DE94EFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a11)
  {
    v34 = (unint64_t *)&a11->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a24 < 0)
    operator delete(__p);
  v36 = (unint64_t *)&a13->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  FrontendModule::~FrontendModule(a16);
  if (v27)
  {
    v38 = (unint64_t *)&v27->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v40);
  if (v27)
  {
    v41 = (unint64_t *)&v27->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    v43 = (unint64_t *)&v27->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930278;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930278;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930278;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94F32C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930278;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  _BOOL4 v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  FrontendModule *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __n128 v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __n128 v58;
  unint64_t *v59;
  __n128 v60;
  const std::string *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __n128 result;
  __n128 v67;
  std::string v68;
  std::string __str;
  char v70;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v11 = *v8;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
  }
  std::string::basic_string(&v68, &__str, 0, 3uLL, (std::allocator<char> *)&v70);
  if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) != 3)
      goto LABEL_41;
    if (LOWORD(v68.__r_.__value_.__l.__data_) != 28261 || v68.__r_.__value_.__s.__data_[2] != 45)
      goto LABEL_41;
LABEL_23:
    if (v6)
    {
      v15 = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = operator new(0x88uLL);
    v18 = v17;
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_1EA9343F0;
    v19 = (FrontendModule *)(v17 + 3);
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldxr(v20);
      while (__stxr(v22 + 1, v20));
      do
        v23 = __ldxr(v20);
      while (__stxr(v23 + 1, v20));
    }
    ClassifySentence::ClassifySentence((uint64_t)(v17 + 3), v7, v6);
    if (v6)
    {
      v24 = (unint64_t *)&v6->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      *(_QWORD *)v19 = off_1EA91F4F8;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      *(_QWORD *)v19 = off_1EA91F4F8;
    }
    v18[3] = &off_1EA920698;
    *((_WORD *)v18 + 64) = 1;
    FrontendModule::delete_tokens(v19);
    *((_BYTE *)v18 + 32) = 0;
    v49 = v18[5];
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
    if (!v6)
      goto LABEL_114;
    v50 = (unint64_t *)&v6->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v52.n128_u64[0] = (unint64_t)v19;
    v52.n128_u64[1] = (unint64_t)v18;
    v67 = v52;
    v53 = (unint64_t *)&v6->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    goto LABEL_112;
  }
  if (v68.__r_.__value_.__l.__size_ == 3)
  {
    v14 = *(_WORD *)v68.__r_.__value_.__l.__data_ != 28261 || *(_BYTE *)(v68.__r_.__value_.__r.__words[0] + 2) != 45;
    operator delete(v68.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_41;
    goto LABEL_23;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
LABEL_41:
  std::string::basic_string(&v68, &__str, 0, 3uLL, (std::allocator<char> *)&v70);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v68.__r_.__value_.__l.__size_ != 3)
    {
      operator delete(v68.__r_.__value_.__l.__data_);
LABEL_75:
      v40 = operator new(0x88uLL);
      v18 = v40;
      v40[1] = 0;
      v40[2] = 0;
      *v40 = &off_1EA933D60;
      v19 = (FrontendModule *)(v40 + 3);
      if (v6)
      {
        v41 = (unint64_t *)&v6->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        do
          v43 = __ldxr(v41);
        while (__stxr(v43 + 1, v41));
      }
      ClassifySentence::ClassifySentence((uint64_t)(v40 + 3), v7, v6);
      if (v6)
      {
        v44 = (unint64_t *)&v6->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v18[3] = &off_1EA91F9A8;
      *((_WORD *)v18 + 64) = 1;
      FrontendModule::delete_tokens(v19);
      *((_BYTE *)v18 + 32) = 0;
      v46 = v18[5];
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
      if (v6)
      {
        v47 = (unint64_t *)&v6->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
LABEL_114:
      v60.n128_u64[0] = (unint64_t)v19;
      v60.n128_u64[1] = (unint64_t)v18;
      v67 = v60;
      goto LABEL_115;
    }
    v29 = *(_WORD *)v68.__r_.__value_.__l.__data_ != 29286 || *(_BYTE *)(v68.__r_.__value_.__r.__words[0] + 2) != 45;
    operator delete(v68.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_75;
  }
  else
  {
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) != 3)
      goto LABEL_75;
    if (LOWORD(v68.__r_.__value_.__l.__data_) != 29286 || v68.__r_.__value_.__s.__data_[2] != 45)
      goto LABEL_75;
  }
  if (v6)
  {
    v30 = (unint64_t *)&v6->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = operator new(0x88uLL);
  v18 = v32;
  v32[1] = 0;
  v32[2] = 0;
  *v32 = &off_1EA934428;
  v19 = (FrontendModule *)(v32 + 3);
  if (v6)
  {
    v33 = (unint64_t *)&v6->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    do
      v35 = __ldxr(v33);
    while (__stxr(v35 + 1, v33));
    do
      v36 = __ldxr(v33);
    while (__stxr(v36 + 1, v33));
  }
  ClassifySentence::ClassifySentence((uint64_t)(v32 + 3), v7, v6);
  if (v6)
  {
    v37 = (unint64_t *)&v6->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *(_QWORD *)v19 = off_1EA91F540;
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)v19 = off_1EA91F540;
  }
  v18[3] = &off_1EA9206E0;
  *((_WORD *)v18 + 64) = 0;
  FrontendModule::delete_tokens(v19);
  *((_BYTE *)v18 + 32) = 0;
  v55 = v18[5];
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
  if (!v6)
    goto LABEL_114;
  v56 = (unint64_t *)&v6->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v58.n128_u64[0] = (unint64_t)v19;
  v58.n128_u64[1] = (unint64_t)v18;
  v67 = v58;
  v59 = (unint64_t *)&v6->__shared_owners_;
  do
    v54 = __ldaxr(v59);
  while (__stlxr(v54 - 1, v59));
LABEL_112:
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_115:
  v61 = (const std::string *)(a1 + 8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6)
  {
    v62 = (unint64_t *)&v6->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v67.n128_u64[0] + 80), v61);
  if (v6)
  {
    v64 = (unint64_t *)&v6->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result = v67;
  *a4 = v67;
  return result;
}

void sub_1DE94FA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  void **v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  FrontendModule::~FrontendModule(v21);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v25);
  if (v19)
  {
    v26 = (unint64_t *)&v19->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (a19 < 0)
    operator delete(__p);
  if (v19)
  {
    v28 = (unint64_t *)&v19->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v30 = (unint64_t *)&v19->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930010;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930010;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930010;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE94FE4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930010;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __n128 result;
  std::__shared_weak_count *v53;
  unint64_t v55;
  void *__p[2];
  char v57;
  void **v58;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xC0uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA933C48;
  v12 = v10 + 24;
  v55 = (unint64_t)(v10 + 24);
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA91D9F8;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA91D9F8;
  }
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_QWORD *)(v11 + 24) = &off_1EA91F7B8;
  *(_OWORD *)(v11 + 160) = 0u;
  v21 = *(_QWORD *)(v7 + 128);
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      v24 = v23;
      if (!*(_QWORD *)(v21 + 16))
      {
LABEL_54:
        v45 = (unint64_t *)&v24->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "phrasing_token");
      v25 = *(_QWORD *)(v7 + 128);
      v26 = *(std::__shared_weak_count **)(v7 + 136);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(std::__shared_weak_count **)(v25 + 24);
      if (!v29 || (v30 = std::__shared_weak_count::lock(v29)) == 0)
      {
        v34 = 0;
        v35 = 0;
LABEL_42:
        if (v26)
        {
          v41 = (unint64_t *)&v26->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (v57 < 0)
          operator delete(__p[0]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v11 + 128), v35[37], v35[38]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v11 + 144), v35[39], v35[40]);
        if (v34)
        {
          v43 = (unint64_t *)&v34->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        goto LABEL_54;
      }
      v31 = *(_QWORD *)(v25 + 16);
      if (v31)
      {
        v53 = v30;
        v32 = v31 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)__p))
        {
          v58 = __p;
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)__p, (__int128 **)&v58);
          v35 = (uint64_t *)*((_QWORD *)v33 + 5);
          v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 6);
          if (v34)
          {
            v36 = (unint64_t *)&v34->__shared_owners_;
            v30 = v53;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
LABEL_38:
            v38 = (unint64_t *)&v30->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              v40 = v30;
              ((void (*)(void))v30->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v40);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v34 = 0;
          v35 = 0;
        }
        v30 = v53;
        goto LABEL_38;
      }
      v34 = 0;
      v35 = 0;
      goto LABEL_38;
    }
  }
LABEL_58:
  if (v5)
  {
    v47 = (unint64_t *)&v5->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(a1 + 8));
  if (v5)
  {
    v50 = (unint64_t *)&v5->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = v55;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE950338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;

  p_shared_owners = (unint64_t *)&a9->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  if (v24)
  {
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a18 < 0)
    operator delete(__p);
  v30 = (unint64_t *)&v21->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  FrontendModule::~FrontendModule(a12);
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v34);
  if (v18)
  {
    v35 = (unint64_t *)&v18->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v37 = (unint64_t *)&v18->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930748;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930748;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930748;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE950620(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930748;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __n128 result;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  char v65;
  void **v66;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xE0uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA9323C8;
  v12 = (unint64_t)(v10 + 24);
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)v12 = off_1EA922A00;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA922A00;
  }
  *(_OWORD *)(v11 + 176) = 0u;
  *(_QWORD *)(v11 + 24) = &off_1EA91CEE0;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  v21 = *(_QWORD *)(v7 + 128);
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  if (!v22)
  {
    v23 = 0;
    goto LABEL_65;
  }
  v23 = std::__shared_weak_count::lock(v22);
  if (v23 && *(_QWORD *)(v21 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phrasing");
    v25 = *(_QWORD *)(v7 + 128);
    v24 = *(unint64_t **)(v7 + 136);
    if (v24)
    {
      v26 = v24 + 1;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = *(std::__shared_weak_count **)(v25 + 24);
    if (!v28)
    {
      v33 = 0;
      v34 = 0;
      goto LABEL_45;
    }
    v61 = v24;
    v29 = std::__shared_weak_count::lock(v28);
    if (!v29)
    {
      v33 = 0;
      v34 = 0;
LABEL_44:
      v24 = v61;
LABEL_45:
      if (v24)
      {
        v39 = v24 + 1;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          v62 = v33;
          v41 = (std::__shared_weak_count *)v24;
          (*(void (**)(unint64_t *))(*v24 + 16))(v24);
          v42 = v41;
          v33 = v62;
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v65 < 0)
        operator delete(__p[0]);
      v44 = *(_QWORD *)(v34 + 296);
      v43 = *(_QWORD *)(v34 + 304);
      if (v43)
      {
        v45 = (unint64_t *)(v43 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = *(std::__shared_weak_count **)(v11 + 136);
      *(_QWORD *)(v11 + 128) = v44;
      *(_QWORD *)(v11 + 136) = v43;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (v33)
      {
        v50 = (unint64_t *)&v33->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      goto LABEL_65;
    }
    v30 = *(_QWORD *)(v25 + 16);
    v60 = v29;
    if (v30)
    {
      v31 = v30 + 8;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v30 + 8), (unsigned __int8 *)__p))
      {
        v66 = __p;
        v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (unsigned __int8 *)__p, (__int128 **)&v66);
        v34 = *((_QWORD *)v32 + 5);
        v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 6);
        if (v33)
        {
          v35 = (unint64_t *)&v33->__shared_owners_;
          v29 = v60;
          v24 = v61;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          goto LABEL_40;
        }
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      v29 = v60;
      v24 = v61;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v24 = v61;
    }
LABEL_40:
    v37 = (unint64_t *)&v29->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (v38)
      goto LABEL_45;
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v60);
    goto LABEL_44;
  }
LABEL_65:
  (*(void (**)(unint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (v23)
  {
    v52 = (unint64_t *)&v23->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v5)
  {
    v54 = (unint64_t *)&v5->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 - 1, v54));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(a1 + 8));
  if (v5)
  {
    v57 = (unint64_t *)&v5->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = v12;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE950B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *shared_owners;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a11)
  {
    v29 = (unint64_t *)&a11->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a20 < 0)
    operator delete(__p);
  v31 = (unint64_t *)&v25->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  shared_owners = (void *)v21[8].__shared_owners_;
  if (shared_owners)
  {
    v21[8].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  FrontendModule::~FrontendModule(v22);
  if (v20)
  {
    v34 = (unint64_t *)&v20->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v36);
  if (v20)
  {
    v37 = (unint64_t *)&v20->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v39 = (unint64_t *)&v20->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FD50;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FD50;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FD50;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE950E9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FD50;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  const std::string *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __n128 result;
  std::__shared_weak_count *v60;
  __n128 *v61;
  void *__p[2];
  char v63;
  void **v64;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0xA8uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA9333C0;
  v13 = (unint64_t)(v11 + 24);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *(_QWORD *)v13 = off_1EA91CE98;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91CE98;
  }
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 24) = &off_1EA91E920;
  *(_QWORD *)(v12 + 136) = 0;
  v22 = *(_QWORD *)(v8 + 128);
  v23 = *(std::__shared_weak_count **)(v22 + 24);
  if (!v23)
  {
    v24 = 0;
    goto LABEL_64;
  }
  v24 = std::__shared_weak_count::lock(v23);
  if (v24 && *(_QWORD *)(v22 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "part_of_speech");
    v26 = *(_QWORD *)(v8 + 128);
    v25 = *(std::__shared_weak_count **)(v8 + 136);
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(std::__shared_weak_count **)(v26 + 24);
    v61 = a4;
    if (!v29 || (v30 = std::__shared_weak_count::lock(v29)) == 0)
    {
      v34 = 0;
      v35 = 0;
LABEL_43:
      if (v25)
      {
        v40 = (unint64_t *)&v25->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v63 < 0)
        operator delete(__p[0]);
      v43 = v35[37];
      v42 = v35[38];
      if (v42)
      {
        v44 = (unint64_t *)(v42 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = *(std::__shared_weak_count **)(v12 + 136);
      *(_QWORD *)(v12 + 128) = v43;
      *(_QWORD *)(v12 + 136) = v42;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      *(_QWORD *)(v12 + 144) = v35[39];
      if (v34)
      {
        v49 = (unint64_t *)&v34->__shared_owners_;
        a4 = v61;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      else
      {
        a4 = v61;
      }
      goto LABEL_64;
    }
    v31 = *(_QWORD *)(v26 + 16);
    v60 = v30;
    if (v31)
    {
      v32 = v31 + 8;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)__p))
      {
        v64 = __p;
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)__p, (__int128 **)&v64);
        v35 = (_QWORD *)*((_QWORD *)v33 + 5);
        v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 6);
        if (v34)
        {
          v36 = (unint64_t *)&v34->__shared_owners_;
          v30 = v60;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
LABEL_39:
          v38 = (unint64_t *)&v30->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v60);
          }
          goto LABEL_43;
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
      v30 = v60;
      goto LABEL_39;
    }
    v34 = 0;
    v35 = 0;
    goto LABEL_39;
  }
LABEL_64:
  (*(void (**)(unint64_t))(*(_QWORD *)v13 + 24))(v13);
  v51 = (const std::string *)(a1 + 8);
  if (v24)
  {
    v52 = (unint64_t *)&v24->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v6)
  {
    v54 = (unint64_t *)&v6->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 - 1, v54));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v51);
  if (v6)
  {
    v57 = (unint64_t *)&v6->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE9513CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&a9->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v27 = (unint64_t *)&v20->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19);
  FrontendModule::~FrontendModule(v18);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v31);
  if (v16)
  {
    v32 = (unint64_t *)&v16->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v34 = (unint64_t *)&v16->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930900;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930900;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930900;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9516A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930900;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  const std::string *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __n128 result;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (char *)operator new(0x88uLL);
  v10 = (unint64_t)v9;
  v11 = (const std::string *)(a1 + 8);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA9327F0;
  v12 = v9 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v9 + 3) = off_1EA91D8E0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA922C80;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)(v10 + 24) = &off_1EA91D588;
    *(_BYTE *)(v10 + 128) = 0;
    *(_DWORD *)(v10 + 132) = 1853189228;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v22 = (unint64_t *)&v5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 3) = &off_1EA91D588;
    v9[128] = 0;
    *((_DWORD *)v9 + 33) = 1853189228;
  }
  std::string::operator=((std::string *)(v10 + 104), v11);
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v10;
  *a3 = result;
  return result;
}

void sub_1DE951998(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9307F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9307F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9307F8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE951B5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9307F8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  const std::string *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __n128 result;
  unint64_t v63;
  void *__p[2];
  char v65;
  void **v66;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0x98uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA932710;
  v12 = v10 + 24;
  v63 = (unint64_t)(v10 + 24);
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA922B30;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA922B30;
  }
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 24) = &off_1EA91D390;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  v21 = *(_QWORD *)(v7 + 128);
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      v24 = v23;
      if (!*(_QWORD *)(v21 + 16))
      {
LABEL_62:
        v53 = (unint64_t *)&v24->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        goto LABEL_66;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "normalize");
      v25 = *(_QWORD *)(v7 + 128);
      v26 = *(std::__shared_weak_count **)(v7 + 136);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(std::__shared_weak_count **)(v25 + 24);
      if (!v29 || (v30 = std::__shared_weak_count::lock(v29)) == 0)
      {
        v36 = 0;
        v35 = 0;
LABEL_42:
        if (v26)
        {
          v42 = (unint64_t *)&v26->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (v65 < 0)
          operator delete(__p[0]);
        v45 = *(_QWORD *)(v35 + 296);
        v44 = *(_QWORD *)(v35 + 304);
        if (v44)
        {
          v46 = (unint64_t *)(v44 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = *(std::__shared_weak_count **)(v11 + 136);
        *(_QWORD *)(v11 + 128) = v45;
        *(_QWORD *)(v11 + 136) = v44;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v36)
        {
          v51 = (unint64_t *)&v36->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        goto LABEL_62;
      }
      v31 = *(_QWORD *)(v25 + 16);
      if (v31)
      {
        v32 = v30;
        v33 = v31 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)__p))
        {
          v66 = __p;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)__p, (__int128 **)&v66);
          v35 = *((_QWORD *)v34 + 5);
          v36 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            v30 = v32;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
LABEL_38:
            v39 = (unint64_t *)&v30->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              v41 = v30;
              ((void (*)(void))v30->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v41);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v36 = 0;
          v35 = 0;
        }
        v30 = v32;
        goto LABEL_38;
      }
      v36 = 0;
      v35 = 0;
      goto LABEL_38;
    }
  }
LABEL_66:
  v55 = (const std::string *)(a1 + 8);
  if (v5)
  {
    v56 = (unint64_t *)&v5->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), v55);
  if (v5)
  {
    v59 = (unint64_t *)&v5->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = v63;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE952070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD **v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;

  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v28 = (unint64_t *)&v19->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__forward_list_base<std::shared_ptr<Agglomerate>>::clear(v22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  FrontendModule::~FrontendModule(a10);
  if (v16)
  {
    v30 = (unint64_t *)&v16->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v32);
  if (v16)
  {
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v35 = (unint64_t *)&v16->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FAE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FAE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FAE8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE952340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FAE8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int8x16_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __n128 result;
  _QWORD *v62;
  __n128 *v63;
  void **p_p;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *__p;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xB8uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA932E80;
  v12 = v10 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA91C610;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA91C610;
  }
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 24) = &off_1EA91DF40;
  *(_QWORD *)(v11 + 144) = 0;
  v21 = *(_QWORD *)(v7 + 128);
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  if (!v22)
  {
    v23 = 0;
    goto LABEL_64;
  }
  v23 = std::__shared_weak_count::lock(v22);
  if (v23 && *(_QWORD *)(v21 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "match_prompt");
    v24 = *(_QWORD *)(v7 + 128);
    v25 = *(std::__shared_weak_count **)(v7 + 136);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = *(std::__shared_weak_count **)(v24 + 24);
    v63 = a4;
    if (v28)
    {
      v62 = v12;
      v29 = std::__shared_weak_count::lock(v28);
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)(v24 + 16);
        if (v31
          && (v32 = v31 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)&__p)))
        {
          p_p = &__p;
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)&__p, (__int128 **)&p_p);
          v34 = (int8x16_t *)*((_QWORD *)v33 + 5);
          v35 = (std::__shared_weak_count *)*((_QWORD *)v33 + 6);
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
        }
        else
        {
          v35 = 0;
          v34 = 0;
        }
        v38 = (unint64_t *)&v30->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      else
      {
        v35 = 0;
        v34 = 0;
      }
      v12 = v62;
      if (!v25)
        goto LABEL_48;
    }
    else
    {
      v35 = 0;
      v34 = 0;
      if (!v25)
      {
LABEL_48:
        if (SHIBYTE(v72) < 0)
          operator delete(__p);
        *(_QWORD *)(v11 + 152) = v34[18].i64[1];
        *(int8x16_t *)(v11 + 160) = vextq_s8(v34[19], v34[19], 8uLL);
        *(_BYTE *)(v11 + 176) = v34[20].i8[0];
        v43 = v34[20].i64[1];
        v42 = v34[21].i64[0];
        if (v42)
        {
          v44 = (unint64_t *)(v42 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = *(std::__shared_weak_count **)(v11 + 144);
        *(_QWORD *)(v11 + 136) = v43;
        *(_QWORD *)(v11 + 144) = v42;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (v35)
        {
          v49 = (unint64_t *)&v35->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        a4 = v63;
        goto LABEL_64;
      }
    }
    v40 = (unint64_t *)&v25->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    goto LABEL_48;
  }
LABEL_64:
  *(_BYTE *)(v11 + 128) = 1;
  *(_WORD *)(v11 + 177) = 0;
  v51 = *(unsigned __int8 *)(v7 + 144);
  __p = (void *)(v7 + 144);
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0x8000000000000000;
  if (v51 == 1)
  {
    v71 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(v7 + 152), "match_prompt");
    v51 = *(unsigned __int8 *)(v7 + 144);
  }
  else
  {
    if (v51 == 2)
    {
      v52 = *(_QWORD *)(v7 + 152);
      v72 = *(_QWORD *)(v52 + 8);
      p_p = (void **)(v7 + 144);
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0x8000000000000000;
      goto LABEL_72;
    }
    v74 = 1;
  }
  p_p = (void **)(v7 + 144);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0x8000000000000000;
  if (v51 == 1)
  {
    v66 = *(_QWORD *)(v7 + 152) + 8;
    goto LABEL_75;
  }
  if (v51 != 2)
  {
    v69 = 1;
    goto LABEL_75;
  }
  v52 = *(_QWORD *)(v7 + 152);
LABEL_72:
  v67 = *(_QWORD *)(v52 + 8);
LABEL_75:
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&p_p))
  {
    v53 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7 + 144, "match_prompt");
    std::string::basic_string[abi:ne180100]<0>(&__p, "enable_domain_rules_if_spell_failed");
    LOBYTE(p_p) = 0;
    *(_BYTE *)(v11 + 178) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v53, (const void **)&__p, (unsigned __int8 *)&p_p);
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
  }
  if (v23)
  {
    v54 = (unint64_t *)&v23->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v5)
  {
    v56 = (unint64_t *)&v5->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(a1 + 8));
  if (v5)
  {
    v59 = (unint64_t *)&v5->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE952994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;

  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (a23 < 0)
    operator delete(__p);
  v34 = (unint64_t *)&v25->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26);
  FrontendModule::~FrontendModule(a10);
  if (v23)
  {
    v36 = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v38);
  if (v23)
  {
    v39 = (unint64_t *)&v23->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    v41 = (unint64_t *)&v23->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930488;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930488;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930488;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE952C94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930488;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const std::string *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  void *__p[2];
  char v27;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x1E8uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA934310;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  OverrideRulesLogImpl::OverrideRulesLogImpl(v11 + 3, v7, v6, v8);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = &off_1EA9204A0;
  *(_QWORD *)(v12 + 448) = &unk_1EA920540;
  *(_QWORD *)(v12 + 472) = 0;
  *(_QWORD *)(v12 + 480) = 0;
  *(_QWORD *)(v12 + 464) = 0;
  *(_DWORD *)(v12 + 456) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "override");
  Debuggable::register_debuggable((__int128 *)__p, v12 + 448);
  v19 = (const std::string *)(a1 + 8);
  if (v27 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v19);
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE952F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9302D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9302D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9302D0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE953198(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9302D0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 result;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x1C0uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA933DD0;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  OverrideRulesLogImpl::OverrideRulesLogImpl(v11 + 3, v7, v6, v8);
  v16 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v16);
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE95338C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FE58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FE58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FE58;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE953598(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FE58;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 result;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = operator new(0x1A8uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA9336D0;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  OverrideRulesImpl::OverrideRulesImpl((uint64_t)(v11 + 3), v7, v6, v8);
  v16 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v16);
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE9537B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9306F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9306F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9306F0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9539C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9306F0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  const std::string *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __n128 result;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  __n128 *v56;
  unint64_t v57;
  void *__p[2];
  char v59;
  void **v60;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x250uLL);
  v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1EA932390;
  v13 = (unint64_t)(v11 + 3);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v11 + 3), v7, v6, v8);
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = off_1EA9228F0;
  MEMORY[0x1DF0ECA80](v12 + 128, "BreaksNN");
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 24) = &off_1EA91CB88;
  *(_OWORD *)(v12 + 376) = 0u;
  *(_OWORD *)(v12 + 392) = 0u;
  *(_QWORD *)(v12 + 560) = 0;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_OWORD *)(v12 + 464) = 0u;
  *(_OWORD *)(v12 + 480) = 0u;
  *(_OWORD *)(v12 + 496) = 0u;
  *(_OWORD *)(v12 + 512) = 0u;
  *(_OWORD *)(v12 + 528) = 0u;
  *(_OWORD *)(v12 + 544) = 0u;
  size = v8[5].__r_.__value_.__l.__size_;
  v23 = *(std::__shared_weak_count **)(size + 24);
  if (!v23 || (v24 = std::__shared_weak_count::lock(v23)) == 0)
  {
    v25 = 0;
    *(_BYTE *)(v12 + 408) = 0;
    goto LABEL_34;
  }
  v25 = v24;
  v26 = *(_QWORD *)(size + 16);
  *(_BYTE *)(v12 + 408) = 0;
  if (v26)
  {
    v56 = a4;
    v57 = v13;
    std::string::basic_string[abi:ne180100]<0>(__p, "breaks_nn");
    v27 = v8[5].__r_.__value_.__l.__size_;
    v28 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(std::__shared_weak_count **)(v27 + 24);
    if (!v31 || (v32 = std::__shared_weak_count::lock(v31)) == 0)
    {
      v36 = 0;
      v37 = 0;
LABEL_61:
      if (v28)
      {
        v51 = (unint64_t *)&v28->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v59 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(v12 + 368) = *(_QWORD *)(v37 + 328);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 392), *(_QWORD *)(v37 + 296), *(_QWORD *)(v37 + 304));
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 376), *(_QWORD *)(v37 + 312), *(_QWORD *)(v37 + 320));
      *(_BYTE *)(v12 + 408) = *(_BYTE *)(v37 + 336);
      a4 = v56;
      if (v36)
      {
        v53 = (unint64_t *)&v36->__shared_owners_;
        v13 = v57;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      else
      {
        v13 = v57;
      }
      goto LABEL_34;
    }
    v33 = *(_QWORD *)(v27 + 16);
    v55 = v32;
    if (v33)
    {
      v34 = v33 + 8;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v33 + 8), (unsigned __int8 *)__p))
      {
        v60 = __p;
        v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)__p, (__int128 **)&v60);
        v37 = *((_QWORD *)v35 + 5);
        v36 = (std::__shared_weak_count *)*((_QWORD *)v35 + 6);
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          v32 = v55;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
LABEL_57:
          v49 = (unint64_t *)&v32->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v55);
          }
          goto LABEL_61;
        }
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      v32 = v55;
      goto LABEL_57;
    }
    v36 = 0;
    v37 = 0;
    goto LABEL_57;
  }
LABEL_34:
  std::string::operator=((std::string *)(v12 + 416), v8);
  v40 = (const std::string *)(a1 + 8);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v12 + 440), (uint64_t)v8[3].__r_.__value_.__l.__data_, v8[3].__r_.__value_.__l.__size_);
  *(_QWORD *)(v12 + 584) = 0;
  *(_OWORD *)(v12 + 568) = 0u;
  if (v25)
  {
    v41 = (unint64_t *)&v25->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v6)
  {
    v43 = (unint64_t *)&v6->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v45 = __ldaxr(v43);
    while (__stlxr(v45 - 1, v43));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v40);
  if (v6)
  {
    v46 = (unint64_t *)&v6->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE953F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  void **v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v26)
  {
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a22 < 0)
    operator delete(__p);
  v33 = (unint64_t *)&v25->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  __p = (void *)(v24 + 528);
  std::vector<std::pair<unsigned long,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v24 + 527) < 0)
    operator delete(*(void **)(v24 + 504));
  std::deque<std::tuple<std::string,std::vector<std::pair<unsigned long,std::string>>,unsigned long,std::bitset<3ul>>>::~deque[abi:ne180100](v23 + 432);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a16);
  if (*(char *)(v24 + 439) < 0)
    operator delete(*v27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  FrontendNNModule::~FrontendNNModule(a12);
  if (v22)
  {
    v35 = (unint64_t *)&v22->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v24);
  operator delete(v37);
  if (v22)
  {
    v38 = (unint64_t *)&v22->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    v40 = (unint64_t *)&v22->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FE00;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FE00;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FE00;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9542B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FE00;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  UTFRegex **v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  std::string *p_p;
  std::string::size_type size;
  UText *v41;
  UText *v42;
  std::basic_string<char16_t>::size_type v43;
  std::basic_string<char16_t>::size_type v44;
  std::basic_string<char16_t> *v45;
  int v46;
  std::basic_string<char16_t> *v47;
  std::basic_string<char16_t>::size_type v48;
  void *v49;
  std::basic_string<char16_t>::size_type v50;
  std::basic_string<char16_t>::size_type v51;
  char v52;
  std::basic_string<char16_t> *v53;
  int32_t v54;
  NSObject *v55;
  const char *v56;
  std::string *v57;
  std::string *v58;
  uint64_t v59;
  UTFRegex *v60;
  std::basic_string<char16_t> *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  NSObject *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __n128 result;
  char *v77;
  __n128 *v78;
  std::__shared_weak_count *v79;
  std::string __p;
  URegularExpression *regexp[3];
  std::basic_string<char16_t> v83;
  __int128 status;
  char *v85;
  uint64_t v86;
  std::basic_string<char16_t> v87;
  std::basic_string<char16_t> v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0x188uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA9335B8;
  v12 = v10 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA91D068;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)(v11 + 136) = 0;
    v21 = (UTFRegex **)(v11 + 136);
    *(_QWORD *)(v11 + 24) = &off_1EA91EBB8;
    v22 = (char *)(v11 + 144);
    v23 = (unint64_t *)&v5->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  else
  {
    *((_QWORD *)v10 + 17) = 0;
    v21 = (UTFRegex **)(v10 + 136);
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    v22 = v10 + 144;
    *((_QWORD *)v10 + 3) = &off_1EA91EBB8;
  }
  *(_OWORD *)(v11 + 152) = xmmword_1DED16B60;
  *(_QWORD *)(v11 + 144) = off_1EA922890;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_OWORD *)(v11 + 280) = 0u;
  LODWORD(status) = 0;
  utext_setup((UText *)(v11 + 152), 0, (UErrorCode *)&status);
  *(_QWORD *)(v11 + 208) = &UTFText::UTFTEXT_FUNCS;
  *(_QWORD *)(v11 + 224) = v22;
  *(_QWORD *)(v11 + 144) = &off_1EA91E3E8;
  *(_QWORD *)(v11 + 296) = v6;
  *(_QWORD *)(v11 + 304) = v5;
  if (v5)
  {
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)(v11 + 384) = 0;
  *(_OWORD *)(v11 + 352) = 0u;
  *(_OWORD *)(v11 + 368) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_QWORD *)(v11 + 208) = &UTFText::UTFTEXT_FUNCS;
  *(_QWORD *)(v11 + 224) = v22;
  *(_DWORD *)(v11 + 312) = 0;
  *(_BYTE *)(v11 + 316) = 0;
  *(_DWORD *)(v11 + 160) |= 2u;
  if (v5)
  {
    v27 = (unint64_t *)&v5->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v29 = ubrk_open();
  *(_QWORD *)(v11 + 128) = v29;
  if (v29)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 96) + 16))(&status, *(_QWORD *)(v7 + 96), 1935831659, 1);
    if ((_QWORD)status)
    {
      v30 = (std::__shared_weak_count *)*((_QWORD *)&status + 1);
      if (*((_QWORD *)&status + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&status + 1) + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v79 = v30;
      v77 = v22;
      v78 = a4;
      v33 = v85;
      v34 = v86;
      memset(&v83, 0, sizeof(v83));
      UTFRegex::UTFRegex((uint64_t)regexp, word_1DED1F11E);
      if (v33)
      {
        v35 = &v33[v34];
        do
        {
          v36 = memchr(v33, 10, v35 - v33);
          v37 = v36;
          if (v36)
            v38 = v36 - v33;
          else
            v38 = v35 - v33;
          std::string::basic_string[abi:ne180100](&__p, v33, v38);
          LODWORD(v88.__r_.__value_.__l.__data_) = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v41 = utext_openUTF8(0, (const char *)p_p, size, (UErrorCode *)&v88);
          if (SLODWORD(v88.__r_.__value_.__l.__data_) <= 0)
            v42 = v41;
          else
            v42 = 0;
          UTFRegex::set_text((UTFRegex *)regexp, v42, 1);
          LODWORD(v88.__r_.__value_.__l.__data_) = 0;
          if (!uregex_matches(regexp[0], -1, (UErrorCode *)&v88))
            goto LABEL_68;
          v43 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v43 = v83.__r_.__value_.__l.__size_;
          if (v43)
          {
            UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v87, regexp, 1);
            std::basic_string<char16_t>::insert(&v87, (std::basic_string<char16_t>::size_type)L"|", (const std::basic_string<char16_t>::value_type *)1, v44);
            v88 = v87;
            v45 = (std::basic_string<char16_t> *)v87.__r_.__value_.__r.__words[0];
            memset(&v87, 0, sizeof(v87));
            v46 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = &v88;
            else
              v47 = v45;
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v48 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            else
              v48 = v88.__r_.__value_.__l.__size_;
            std::basic_string<char16_t>::append(&v83, (const std::basic_string<char16_t>::value_type *)v47, v48);
            if (v46 < 0)
              operator delete(v45);
            if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_68;
            v49 = (void *)v87.__r_.__value_.__r.__words[0];
          }
          else
          {
            UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v88, regexp, 1);
            std::basic_string<char16_t>::insert(&v88, (std::basic_string<char16_t>::size_type)L"(?:", (const std::basic_string<char16_t>::value_type *)3, v50);
            v87.__r_.__value_.__r.__words[0] = v88.__r_.__value_.__l.__size_;
            v51 = v88.__r_.__value_.__r.__words[0];
            *(std::basic_string<char16_t>::size_type *)((char *)v87.__r_.__value_.__r.__words + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&v88.__r_.__value_.__r.__words[1] + 7);
            v52 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            memset(&v88, 0, sizeof(v88));
            if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v83.__r_.__value_.__r.__words[0] = v51;
              v83.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
              *(std::basic_string<char16_t>::size_type *)((char *)&v83.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v87.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&v83.__r_.__value_.__s + 23) = v52;
              goto LABEL_68;
            }
            operator delete(v83.__r_.__value_.__l.__data_);
            v83.__r_.__value_.__r.__words[0] = v51;
            v83.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
            *(std::basic_string<char16_t>::size_type *)((char *)&v83.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v87.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v83.__r_.__value_.__s + 23) = v52;
            if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_68;
            v49 = (void *)v88.__r_.__value_.__r.__words[0];
          }
          operator delete(v49);
LABEL_68:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v33 = v37 + 1;
        }
        while (v37);
      }
      std::basic_string<char16_t>::append(&v83, L")", 1uLL);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v83;
      else
        v53 = (std::basic_string<char16_t> *)v83.__r_.__value_.__r.__words[0];
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      else
        v54 = v83.__r_.__value_.__r.__words[1];
      UTFString::to_utf8(&__p, (const UChar *)v53, v54);
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      a4 = v78;
      v55 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        v57 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v88.__r_.__value_.__l.__data_) = 136315138;
        *(std::basic_string<char16_t>::size_type *)((char *)v88.__r_.__value_.__r.__words + 4) = (std::basic_string<char16_t>::size_type)v57;
        _os_log_impl(&dword_1DE3F6000, v55, OS_LOG_TYPE_DEBUG, "Sentence break exceptions: %s", (uint8_t *)&v88, 0xCu);
      }
      v58 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      Diagnostics::log(7, "Sentence break exceptions: %s", v56, v58, v77);
      v59 = operator new();
      v60 = (UTFRegex *)v59;
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v83;
      else
        v61 = (std::basic_string<char16_t> *)v83.__r_.__value_.__r.__words[0];
      UTFRegex::UTFRegex(v59, (UChar *)v61);
      std::unique_ptr<UTFRegex>::reset[abi:ne180100](v21, v60);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      UTFRegex::~UTFRegex((UTFRegex *)regexp);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (v79)
      {
        v62 = (unint64_t *)&v79->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&status + 1);
    if (*((_QWORD *)&status + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&status + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v68 = u_errorName(U_ZERO_ERROR);
      LODWORD(status) = 136315138;
      *(_QWORD *)((char *)&status + 4) = v68;
      _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_ERROR, "Unable to open sentence break iterator: %s", (uint8_t *)&status, 0xCu);
    }
    v69 = u_errorName(U_ZERO_ERROR);
    Diagnostics::log(3, "Unable to open sentence break iterator: %s", v70, v69);
  }
  if (v5)
  {
    v71 = (unint64_t *)&v5->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v73 = __ldaxr(v71);
    while (__stlxr(v73 - 1, v71));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(a1 + 8));
  if (v5)
  {
    v74 = (unint64_t *)&v5->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE954BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, TokenStreamText *a10, uint64_t a11, uint64_t a12, uint64_t a13, FrontendModule *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34)
{
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  UTFRegex **v36;
  TokenStreamText *v37;
  void **v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  TokenStreamText::~TokenStreamText(v37);
  std::unique_ptr<UTFRegex>::reset[abi:ne180100](v36, 0);
  FrontendModule::~FrontendModule(v38);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v42);
  if (v34)
  {
    v43 = (unint64_t *)&v34->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    v45 = (unint64_t *)&v34->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9303D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9303D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9303D8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE955048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9303D8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  std::string *p_p;
  std::string::size_type size;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  std::string::value_type *v30;
  std::string::size_type v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __n128 result;
  std::string::value_type *v50;
  FrontendModule *v53;
  std::string v54;
  void *v55[2];
  char v56;
  std::string __p;
  std::string __dst;
  uint64_t v59;
  unint64_t v60;
  std::string buf;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = *a3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (char *)operator new(0x90uLL);
  v10 = (unint64_t)v9;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA934150;
  v53 = (FrontendModule *)(v9 + 24);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v9 + 3) = off_1EA91D8E0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v5;
    *((_QWORD *)v9 + 6) = v4;
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    *((_QWORD *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    *(_QWORD *)v53 = off_1EA91EF28;
    v18 = (unint64_t *)&v4->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v5;
    *((_QWORD *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 3) = off_1EA91EF28;
  }
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 24) = &off_1EA9200D0;
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100]((UTFTransliterator **)(v10 + 128), 0);
  v20 = *(unsigned __int8 *)(v6 + 144);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  buf.__r_.__value_.__r.__words[2] = 0;
  v62 = 0;
  v63 = 0x8000000000000000;
  if (v20 == 1)
  {
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [18]>(*(_QWORD *)(v6 + 152));
    v20 = *(unsigned __int8 *)(v6 + 144);
  }
  else
  {
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(v6 + 152);
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 8);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
      __dst.__r_.__value_.__r.__words[2] = 0;
      v59 = 0;
      v60 = 0x8000000000000000;
LABEL_29:
      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 8);
      goto LABEL_32;
    }
    v63 = 1;
  }
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  __dst.__r_.__value_.__r.__words[2] = 0;
  v59 = 0;
  v60 = 0x8000000000000000;
  if (v20 == 1)
  {
    __dst.__r_.__value_.__l.__size_ = *(_QWORD *)(v6 + 152) + 8;
  }
  else
  {
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(v6 + 152);
      goto LABEL_29;
    }
    v60 = 1;
  }
LABEL_32:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__dst))
  {
    goto LABEL_53;
  }
  memset(&buf, 0, sizeof(buf));
  v22 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6 + 144, "tokenize_fallback");
  std::string::basic_string[abi:ne180100]<0>(v55, "transliterate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v22, (const void **)v55, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  UTFString::to_utf16((std::basic_string<char16_t> *)&__dst, (const char *)p_p, size);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  buf = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!buf.__r_.__value_.__l.__size_)
    {
LABEL_52:
      operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_53;
    }
  }
  else if (!*((_BYTE *)&buf.__r_.__value_.__s + 23))
  {
    goto LABEL_53;
  }
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, "T");
  v25 = (uint64_t *)operator new();
  UTFTransliterator::UTFTransliterator(v25, (uint64_t)&__dst, (uint64_t)&buf);
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100]((UTFTransliterator **)(v10 + 128), (UTFTransliterator *)v25);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_52;
LABEL_53:
  *(_QWORD *)(v10 + 136) = 0;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  buf.__r_.__value_.__r.__words[2] = 0;
  v62 = 0;
  v63 = 0x8000000000000000;
  v26 = *(unsigned __int8 *)(v6 + 144);
  if (v26 == 1)
  {
    v28 = *(_QWORD *)(v6 + 152);
    buf.__r_.__value_.__l.__size_ = v28 + 8;
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [18]>(v28);
    v26 = *(unsigned __int8 *)(v6 + 144);
  }
  else
  {
    if (v26 == 2)
    {
      v27 = *(_QWORD *)(v6 + 152);
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 8);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
      __dst.__r_.__value_.__r.__words[2] = 0;
      v59 = 0;
      v60 = 0x8000000000000000;
LABEL_61:
      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 8);
      goto LABEL_64;
    }
    v63 = 1;
  }
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  __dst.__r_.__value_.__r.__words[2] = 0;
  v59 = 0;
  v60 = 0x8000000000000000;
  if (v26 == 1)
  {
    __dst.__r_.__value_.__l.__size_ = *(_QWORD *)(v6 + 152) + 8;
  }
  else
  {
    if (v26 == 2)
    {
      v27 = *(_QWORD *)(v6 + 152);
      goto LABEL_61;
    }
    v60 = 1;
  }
LABEL_64:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__dst))
  {
    goto LABEL_91;
  }
  v29 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6 + 144, "tokenize_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__dst, "filter");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v29, (const void **)&__dst.__r_.__value_.__l.__data_, &buf);
  v31 = buf.__r_.__value_.__l.__size_;
  v30 = (std::string::value_type *)buf.__r_.__value_.__r.__words[0];
  v32 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  LODWORD(v55[0]) = buf.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v55 + 3) = *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[2] + 3);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0)
      goto LABEL_67;
LABEL_70:
    if (!v31)
      goto LABEL_90;
    goto LABEL_71;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v32 < 0)
    goto LABEL_70;
LABEL_67:
  if (v32)
  {
LABEL_71:
    v50 = v30;
    *(_QWORD *)(v10 + 136) = uset_openEmpty();
    if (v32 < 0)
    {
      std::string::__init_copy_ctor_external(&v54, v30, v31);
    }
    else
    {
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v54.__r_.__value_.__l.__size_ = v31;
      LODWORD(v54.__r_.__value_.__r.__words[2]) = v55[0];
      *(_DWORD *)((char *)&v54.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v55 + 3);
      *((_BYTE *)&v54.__r_.__value_.__s + 23) = v32;
    }
    UTFString::split(&__dst, &v54, 0x2Cu, 0);
    v34 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
    v33 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8);
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_ != v33)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "-");
        UTFString::split_pair(&__p, v34, (char *)&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v35 = *(_QWORD *)(v10 + 136);
        v36 = std::stoi(*(const std::string **)__p.__r_.__value_.__l.__data_, 0, 10);
        v37 = std::stoi(*(const std::string **)(__p.__r_.__value_.__r.__words[0] + 16), 0, 10);
        MEMORY[0x1DF0EDFF8](v35, v36, v37);
        v38 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v34 += 24;
      }
      while (v34 != v33);
    }
    v41 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    v30 = v50;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v42 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v32 & 0x80000000) == 0)
        goto LABEL_91;
    }
    else if ((v32 & 0x80000000) == 0)
    {
      goto LABEL_91;
    }
LABEL_90:
    operator delete(v30);
  }
LABEL_91:
  if (v4)
  {
    v44 = (unint64_t *)&v4->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::string::operator=((std::string *)(v10 + 104), (const std::string *)(a1 + 8));
  if (v4)
  {
    v47 = (unint64_t *)&v4->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  result.n128_u64[0] = (unint64_t)v53;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_1DE95593C()
{
  JUMPOUT(0x1DE955A6CLL);
}

void sub_1DE955944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  MEMORY[0x1DF0ED014](v37, 0x80C40B8603338);
  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 121) < 0)
    JUMPOUT(0x1DE955A84);
  JUMPOUT(0x1DE955A88);
}

void sub_1DE9559E8()
{
  unint64_t *v0;
  unint64_t v1;

  do
    v1 = __ldaxr(v0);
  while (__stlxr(v1 - 1, v0));
  if (v1)
    JUMPOUT(0x1DE955B14);
  JUMPOUT(0x1DE955AFCLL);
}

void sub_1DE955A04()
{
  JUMPOUT(0x1DE955A88);
}

void sub_1DE955A10()
{
  JUMPOUT(0x1DE955ADCLL);
}

void sub_1DE955A18()
{
  std::__shared_weak_count *v0;
  std::__shared_weak_count *v1;
  UTFTransliterator **v2;
  int v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _Unwind_Exception *v14;
  void *v15;
  void **v16;
  void *v17;
  char v18;
  std::__shared_weak_count *v19;

  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)())v19->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v18 < 0)
    operator delete(v17);
  if (v3 < 0)
    operator delete(v15);
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](v2, 0);
  FrontendModule::~FrontendModule(v16);
  if (v0)
  {
    v7 = (unint64_t *)&v0->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v9);
  if (v0)
  {
    v10 = (unint64_t *)&v0->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
    v12 = (unint64_t *)&v0->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  _Unwind_Resume(v14);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930118;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930118;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930118;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE955C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930118;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  const std::string *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 result;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (char *)operator new(0x80uLL);
  v10 = (unint64_t)v9;
  *((_QWORD *)v9 + 1) = 0;
  v11 = (const std::string *)(a1 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA932C50;
  v12 = v9 + 24;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    *((_QWORD *)v9 + 3) = off_1EA91D8E0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = v5;
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    do
      v17 = __ldaxr(v13);
    while (__stlxr(v17 - 1, v13));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = &off_1EA91DC68;
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v6;
    *((_QWORD *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 3) = &off_1EA91DC68;
  }
  std::string::operator=((std::string *)(v10 + 104), v11);
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = (unint64_t)v12;
  result.n128_u64[1] = v10;
  *a3 = result;
  return result;
}

void sub_1DE955F0C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930170;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930170;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930170;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9560D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930170;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  const std::string *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 result;
  void *exception;
  std::string *v39;
  __int128 v40;
  std::string v41;
  std::vector<std::string> v42;
  std::vector<std::string> *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *__p;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0xB0uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA933B30;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
  }
  *v13 = off_1EA91DCB0;
  v20 = *(unsigned __int8 *)(v8 + 144);
  __p = (void *)(v8 + 144);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0x8000000000000000;
  if (v20 == 1)
  {
    v50 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(v8 + 152), "mecab");
    v20 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(v8 + 152);
      v51 = *(_QWORD *)(v21 + 8);
      v44 = (void *)(v8 + 144);
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0x8000000000000000;
LABEL_24:
      v46 = *(_QWORD *)(v21 + 8);
      goto LABEL_27;
    }
    v53 = 1;
  }
  v44 = (void *)(v8 + 144);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0x8000000000000000;
  if (v20 == 1)
  {
    v45 = *(_QWORD *)(v8 + 152) + 8;
  }
  else
  {
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(v8 + 152);
      goto LABEL_24;
    }
    v48 = 1;
  }
LABEL_27:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v44))
  {
    *(_QWORD *)(v12 + 128) = 0;
  }
  else
  {
    v22 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "mecab");
    std::string::basic_string[abi:ne180100]<0>(&__p, "pron");
    LODWORD(v44) = 0;
    *(_QWORD *)(v12 + 128) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v22, (const void **)&__p, (unsigned int *)&v44);
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
  }
  __p = (void *)(v8 + 144);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0x8000000000000000;
  v23 = *(unsigned __int8 *)(v8 + 144);
  if (v23 == 1)
  {
    v50 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(v8 + 152), "mecab");
    v23 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v23 == 2)
    {
      v24 = *(_QWORD *)(v8 + 152);
      v51 = *(_QWORD *)(v24 + 8);
      v44 = (void *)(v8 + 144);
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0x8000000000000000;
LABEL_39:
      v46 = *(_QWORD *)(v24 + 8);
      goto LABEL_42;
    }
    v53 = 1;
  }
  v44 = (void *)(v8 + 144);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0x8000000000000000;
  if (v23 == 1)
  {
    v45 = *(_QWORD *)(v8 + 152) + 8;
  }
  else
  {
    if (v23 == 2)
    {
      v24 = *(_QWORD *)(v8 + 152);
      goto LABEL_39;
    }
    v48 = 1;
  }
LABEL_42:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v44))
  {
    *(_QWORD *)(v12 + 136) = 0;
  }
  else
  {
    v25 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "mecab");
    std::string::basic_string[abi:ne180100]<0>(&__p, "pitch");
    LODWORD(v44) = 0;
    *(_QWORD *)(v12 + 136) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v25, (const void **)&__p, (unsigned int *)&v44);
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
  }
  if (v6)
  {
    v26 = (unint64_t *)&v6->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(v12 + 152) = 0;
  *(_QWORD *)(v12 + 24) = off_1EA91F448;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v8 + 96) + 32))(&__p, *(_QWORD *)(v8 + 96), 1835361122, 0);
  std::operator+<char>();
  if (v46 >= 0)
    v28 = &v44;
  else
    v28 = v44;
  v29 = MEMORY[0x1DF0ED740](v28);
  *(_QWORD *)(v12 + 144) = v29;
  if (!v29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v39 = std::string::append(&v41, "'");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v42.__end_cap_.__value_ = (std::string *)v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__begin_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1DF0EC9E4](exception, &v42);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 96) + 72))(&v41, *(_QWORD *)(v8 + 96), 1835233389, 1);
  v30 = v41.__r_.__value_.__s.__data_[0];
  if (v41.__r_.__value_.__s.__data_[0])
  {
    if (v41.__r_.__value_.__s.__data_[0] != 2)
    {
      if (v41.__r_.__value_.__s.__data_[0] == 1 && !*(_QWORD *)(v41.__r_.__value_.__l.__size_ + 16))
      {
        v30 = 1;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (*(_QWORD *)v41.__r_.__value_.__l.__size_ != *(_QWORD *)(v41.__r_.__value_.__l.__size_ + 8))
    {
LABEL_61:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v42, (unsigned __int8 *)&v41);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v12 + 152));
      *(std::vector<std::string> *)(v12 + 152) = v42;
      memset(&v42, 0, sizeof(v42));
      v43 = &v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      v30 = v41.__r_.__value_.__s.__data_[0];
      goto LABEL_62;
    }
    v30 = 2;
  }
LABEL_62:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v41.__r_.__value_.__l.__size_, v30);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
  v31 = (const std::string *)(a1 + 8);
  if (SHIBYTE(v51) < 0)
    operator delete(__p);
  if (v6)
  {
    v32 = (unint64_t *)&v6->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v31);
  if (v6)
  {
    v35 = (unint64_t *)&v6->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE95679C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  void **v38;
  void *v39;
  int v40;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (a28 < 0)
        operator delete(a23);
      if (a36 < 0)
        operator delete(a31);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
      FrontendModule::~FrontendModule(v38);
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      std::__shared_weak_count::~__shared_weak_count(v37);
      operator delete(v44);
      if (v36)
      {
        v45 = (unint64_t *)&v36->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        v47 = (unint64_t *)&v36->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void sub_1DE956998()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1DE956990);
  JUMPOUT(0x1DE956928);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9307A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9307A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9307A0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE956AD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9307A0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 result;
  uint64_t v61;
  unint64_t v63;
  void *__p[2];
  char v65;
  void **v66;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xD8uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA9324A8;
  v12 = v10 + 24;
  v63 = (unint64_t)(v10 + 24);
  v61 = a1;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v5;
    do
      v17 = __ldxr(v13);
    while (__stxr(v17 + 1, v13));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *v12 = off_1EA922AA0;
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA922AA0;
  }
  *(_OWORD *)(v11 + 200) = 0u;
  *(_QWORD *)(v11 + 24) = &off_1EA91CFD8;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_WORD *)(v11 + 160) = 256;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  v21 = *(_QWORD *)(v7 + 128);
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      v24 = v23;
      if (!*(_QWORD *)(v21 + 16))
      {
LABEL_62:
        v53 = (unint64_t *)&v24->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        goto LABEL_66;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenize");
      v25 = *(_QWORD *)(v7 + 128);
      v26 = *(std::__shared_weak_count **)(v7 + 136);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(std::__shared_weak_count **)(v25 + 24);
      if (!v29 || (v30 = std::__shared_weak_count::lock(v29)) == 0)
      {
        v36 = 0;
        v35 = 0;
LABEL_42:
        if (v26)
        {
          v42 = (unint64_t *)&v26->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (v65 < 0)
          operator delete(__p[0]);
        v45 = *(_QWORD *)(v35 + 296);
        v44 = *(_QWORD *)(v35 + 304);
        if (v44)
        {
          v46 = (unint64_t *)(v44 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = *(std::__shared_weak_count **)(v11 + 208);
        *(_QWORD *)(v11 + 200) = v45;
        *(_QWORD *)(v11 + 208) = v44;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v36)
        {
          v51 = (unint64_t *)&v36->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        goto LABEL_62;
      }
      v31 = *(_QWORD *)(v25 + 16);
      if (v31)
      {
        v32 = v30;
        v33 = v31 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)__p))
        {
          v66 = __p;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)__p, (__int128 **)&v66);
          v35 = *((_QWORD *)v34 + 5);
          v36 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            v30 = v32;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
LABEL_38:
            v39 = (unint64_t *)&v30->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              v41 = v30;
              ((void (*)(void))v30->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v41);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v36 = 0;
          v35 = 0;
        }
        v30 = v32;
        goto LABEL_38;
      }
      v36 = 0;
      v35 = 0;
      goto LABEL_38;
    }
  }
LABEL_66:
  if (v5)
  {
    v55 = (unint64_t *)&v5->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)(v61 + 8));
  if (v5)
  {
    v58 = (unint64_t *)&v5->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result.n128_u64[0] = v63;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE957004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (a18 < 0)
    operator delete(__p);
  v31 = (unint64_t *)&v21->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  FrontendModule::~FrontendModule(a12);
  if (v18)
  {
    v33 = (unint64_t *)&v18->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v35);
  if (v18)
  {
    v36 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v38 = (unint64_t *)&v18->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930538;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930538;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930538;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9572DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930538;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t **shared_component;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 *environment;
  const std::string *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 result;
  void *__p[2];
  char v40;
  void *v41;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0x90uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA934818;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91FB20;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91FB20;
  }
  *(_QWORD *)(v12 + 24) = &off_1EA920C20;
  *(_QWORD *)(v12 + 128) = 0;
  *(_BYTE *)(v12 + 136) = 0;
  v22 = *(_QWORD *)(v8 + 184);
  shared_component = (uint64_t **)FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v22);
  v25 = *(_QWORD **)(v22 + 168);
  v24 = (_QWORD *)(v22 + 168);
  {
    if (v24 == v26)
      v27 = 0;
    else
      v27 = v26[5] + 8;
  }
  else
  {
    __p[0] = &v41;
    v29 = (_QWORD *)operator new();
    v29[3] = 0;
    v29[2] = 0;
    *v29 = &off_1EA922E68;
    v29[1] = v29 + 2;
    v30 = v28[5];
    v28[5] = (uint64_t)v29;
    if (v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v29 = (_QWORD *)v28[5];
    }
    v27 = (uint64_t)(v29 + 1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "en-US");
  environment = EnvironmentBroker::get_environment(shared_component, (__int128 *)__p);
  if (v40 < 0)
    operator delete(__p[0]);
  v32 = (const std::string *)(a1 + 8);
  *(_QWORD *)(v12 + 128) = SideChainBroker::get_side_chain(v27, (std::string::size_type)environment);
  if (v6)
  {
    v33 = (unint64_t *)&v6->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v32);
  if (v6)
  {
    v36 = (unint64_t *)&v6->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE9576E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  void **v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  FrontendModule::~FrontendModule(v16);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v20);
  if (v14)
  {
    v21 = (unint64_t *)&v14->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9300C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9300C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9300C0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE95791C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9300C0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  const std::string *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __n128 result;
  std::__shared_weak_count *v54;
  void *__p[2];
  char v56;
  void **v57;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0x90uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA933AF8;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91DBD0;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91DBD0;
  }
  *v13 = &off_1EA91F400;
  v22 = *(_QWORD *)(v8 + 128);
  v23 = *(std::__shared_weak_count **)(v22 + 24);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      if (!*(_QWORD *)(v22 + 16))
      {
LABEL_54:
        v45 = (unint64_t *)&v25->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "switch_language");
      v27 = *(_QWORD *)(v8 + 128);
      v26 = *(std::__shared_weak_count **)(v8 + 136);
      if (v26)
      {
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(std::__shared_weak_count **)(v27 + 24);
      if (!v30 || (v31 = std::__shared_weak_count::lock(v30)) == 0)
      {
        v35 = 0;
        v36 = 0;
LABEL_42:
        if (v26)
        {
          v41 = (unint64_t *)&v26->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (v56 < 0)
          operator delete(__p[0]);
        *(_OWORD *)(v12 + 128) = *(_OWORD *)(v36 + 296);
        if (v35)
        {
          v43 = (unint64_t *)&v35->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        goto LABEL_54;
      }
      v32 = *(_QWORD *)(v27 + 16);
      v54 = v31;
      if (v32)
      {
        v33 = v32 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v32 + 8), (unsigned __int8 *)__p))
        {
          v57 = __p;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)__p, (__int128 **)&v57);
          v36 = *((_QWORD *)v34 + 5);
          v35 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          if (v35)
          {
            v37 = (unint64_t *)&v35->__shared_owners_;
            v31 = v54;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
LABEL_38:
            v39 = (unint64_t *)&v31->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v54);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v31 = v54;
        goto LABEL_38;
      }
      v35 = 0;
      v36 = 0;
      goto LABEL_38;
    }
  }
LABEL_58:
  v47 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v48 = (unint64_t *)&v6->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v47);
  if (v6)
  {
    v51 = (unint64_t *)&v6->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE957DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v26 = (unint64_t *)&v19->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16)
  {
    v28 = (unint64_t *)&v16->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v30);
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FA90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FA90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FA90;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE958088(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FA90;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  const std::string *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __n128 result;
  std::__shared_weak_count *v54;
  void *__p[2];
  char v56;
  void **v57;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0x90uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA932DA0;
  v13 = v11 + 24;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91C5C8;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91C5C8;
  }
  *v13 = &off_1EA91DE40;
  v22 = *(_QWORD *)(v8 + 128);
  v23 = *(std::__shared_weak_count **)(v22 + 24);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      if (!*(_QWORD *)(v22 + 16))
      {
LABEL_54:
        v45 = (unint64_t *)&v25->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "audio");
      v27 = *(_QWORD *)(v8 + 128);
      v26 = *(std::__shared_weak_count **)(v8 + 136);
      if (v26)
      {
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(std::__shared_weak_count **)(v27 + 24);
      if (!v30 || (v31 = std::__shared_weak_count::lock(v30)) == 0)
      {
        v35 = 0;
        v36 = 0;
LABEL_42:
        if (v26)
        {
          v41 = (unint64_t *)&v26->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (v56 < 0)
          operator delete(__p[0]);
        *(_OWORD *)(v12 + 128) = *(_OWORD *)(v36 + 296);
        if (v35)
        {
          v43 = (unint64_t *)&v35->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        goto LABEL_54;
      }
      v32 = *(_QWORD *)(v27 + 16);
      v54 = v31;
      if (v32)
      {
        v33 = v32 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v32 + 8), (unsigned __int8 *)__p))
        {
          v57 = __p;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)__p, (__int128 **)&v57);
          v36 = *((_QWORD *)v34 + 5);
          v35 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          if (v35)
          {
            v37 = (unint64_t *)&v35->__shared_owners_;
            v31 = v54;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
LABEL_38:
            v39 = (unint64_t *)&v31->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v54);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v31 = v54;
        goto LABEL_38;
      }
      v35 = 0;
      v36 = 0;
      goto LABEL_38;
    }
  }
LABEL_58:
  v47 = (const std::string *)(a1 + 8);
  if (v6)
  {
    v48 = (unint64_t *)&v6->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), v47);
  if (v6)
  {
    v51 = (unint64_t *)&v6->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE95852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  p_shared_owners = (unint64_t *)&a10->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v26 = (unint64_t *)&v19->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16)
  {
    v28 = (unint64_t *)&v16->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v30);
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930220;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930220;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930220;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9587F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930220;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _OWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  __n128 result;
  nlohmann::detail::exception *exception;
  char *v102;
  std::string *v103;
  std::string *v104;
  __int128 v105;
  std::string *__str;
  unint64_t v108;
  void **v109;
  char *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  void *__p[2];
  char v117;
  unsigned __int8 *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE v128[24];
  _QWORD **v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  __int128 v133;
  char *v134;
  _BYTE *v135;
  _BYTE v136[32];
  _BYTE *v137;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  v111 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA933CB8;
  v11 = v10 + 24;
  v110 = v10;
  v108 = (unint64_t)(v10 + 24);
  if (v111)
  {
    v12 = (unint64_t *)&v111->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    do
      v15 = __ldxr(v12);
    while (__stxr(v15 + 1, v12));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v111;
    do
      v16 = __ldxr(v12);
    while (__stxr(v16 + 1, v12));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v17 = __ldaxr(v12);
    while (__stlxr(v17 - 1, v12));
    if (!v17)
    {
      v18 = v10 + 24;
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      v11 = v18;
      v10 = v110;
    }
    *v11 = off_1EA91E330;
    v19 = (unint64_t *)&v111->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      v10 = v110;
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA91E330;
  }
  *((_OWORD *)v10 + 8) = 0u;
  v21 = v10 + 128;
  *((_QWORD *)v21 - 13) = &off_1EA91F848;
  v22 = (uint64_t)(v21 + 24);
  *((_OWORD *)v21 + 1) = 0u;
  v109 = (void **)v21;
  *((_QWORD *)v21 + 4) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 96) + 32))(__p, *(_QWORD *)(v7 + 96), 1920231009, 0);
  v23 = FSTGrammar::create((const char *)__p, 0);
  std::shared_ptr<FSTGrammar>::reset[abi:ne180100]<FSTGrammar,void>(v22, v23);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 96) + 72))(&v114, *(_QWORD *)(v7 + 96), 1920234092, 0);
  v112 = 0uLL;
  v113 = 0;
  if (v114 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    if (v114 > 9uLL)
      v102 = "number";
    else
      v102 = off_1EA94C758[v114];
    v103 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v132, v102);
    v104 = std::string::insert(v103, 0, "type must be array, but is ");
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    *(_QWORD *)&v136[16] = *((_QWORD *)&v104->__r_.__value_.__l + 2);
    *(_OWORD *)v136 = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)v136, exception);
  }
  memset(v128, 0, sizeof(v128));
  v24 = v115[1];
  v25 = v24 - *v115;
  if (v24 == *v115)
  {
    v123 = (unsigned __int8 *)&v114;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = 0x8000000000000000;
    goto LABEL_28;
  }
  if (v25 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v137 = &v128[16];
  *(_QWORD *)v136 = std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v25 >> 4);
  *(_QWORD *)&v136[8] = *(_QWORD *)v136;
  *(_QWORD *)&v136[16] = *(_QWORD *)v136;
  *(_QWORD *)&v136[24] = *(_QWORD *)v136 + 24 * v26;
  v27 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::string>>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>>((uint64_t)&v128[16], *(uint64_t *)&v128[8], *(uint64_t *)&v128[8], *(uint64_t *)v128, *(uint64_t *)v128, *(uint64_t *)v136, *(uint64_t *)v136);
  v28 = *(_OWORD *)v128;
  *(_QWORD *)v128 = v27;
  v29 = *(_QWORD *)&v128[16];
  v30 = *(_OWORD *)&v136[16];
  *(_OWORD *)&v136[8] = v28;
  *(_OWORD *)&v128[8] = v30;
  *(_QWORD *)&v136[24] = v29;
  *(_QWORD *)v136 = v28;
  std::__split_buffer<std::map<std::string,std::string>>::~__split_buffer((uint64_t)v136);
  v123 = (unsigned __int8 *)&v114;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0x8000000000000000;
  if (!(_BYTE)v114)
  {
    v127 = 1;
LABEL_31:
    v118 = (unsigned __int8 *)&v114;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v122 = 1;
    goto LABEL_32;
  }
  if (v114 == 2)
  {
LABEL_28:
    v125 = *v115;
    v118 = (unsigned __int8 *)&v114;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v122 = 0x8000000000000000;
    v120 = v115[1];
    goto LABEL_32;
  }
  if (v114 != 1)
  {
    v127 = 0;
    goto LABEL_31;
  }
  v124 = *v115;
  v120 = 0;
  v121 = 0;
  v122 = 0x8000000000000000;
  v118 = (unsigned __int8 *)&v114;
  v119 = v115 + 1;
LABEL_32:
  __str = (std::string *)(a1 + 8);
  v31 = *(_QWORD **)&v128[8];
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v123, &v118))
  {
    v32 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(&v123);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(&v129, v32);
    v33 = *(_OWORD *)v128;
    v34 = (uint64_t)v31 - *(_QWORD *)v128;
    v35 = ((uint64_t)v31 - *(_QWORD *)v128) / 24;
    v36 = (_QWORD *)(*(_QWORD *)v128 + 24 * v35);
    if (*(_QWORD *)&v128[8] >= *(_QWORD *)&v128[16])
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v128[8] - *(_QWORD *)v128) >> 3) + 1;
      if (v52 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v128[16] - *(_QWORD *)v128) >> 3) > v52)
        v52 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v128[16] - *(_QWORD *)v128) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v128[16] - *(_QWORD *)v128) >> 3) >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      v135 = &v128[16];
      if (v53)
        v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v53);
      else
        v54 = 0;
      v58 = (_QWORD *)(v53 + 24 * v35);
      v132 = (char *)v53;
      *(_QWORD *)&v133 = v58;
      *((_QWORD *)&v133 + 1) = v58;
      v134 = (char *)(v53 + 24 * v54);
      if (v35 == v54)
      {
        if (v34 < 1)
        {
          if (v31 == (_QWORD *)v33)
            v60 = 1;
          else
            v60 = 2 * v35;
          v137 = v135;
          v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v60);
          v63 = &v61[24 * (v60 >> 2)];
          v64 = v133;
          v65 = *((_QWORD *)&v133 + 1) - v133;
          if (*((_QWORD *)&v133 + 1) == (_QWORD)v133)
          {
            v75 = vdupq_n_s64(v133);
            v68 = &v61[24 * (v60 >> 2)];
          }
          else
          {
            v66 = 0;
            v67 = v65 / 24;
            v68 = &v63[24 * (v65 / 24)];
            v69 = 24 * v67;
            do
            {
              v70 = (uint64_t *)&v63[v66];
              *v70 = *(_QWORD *)(v64 + v66);
              v71 = (uint64_t *)(v64 + v66 + 8);
              v72 = *v71;
              *(_QWORD *)&v63[v66 + 8] = *v71;
              v73 = (uint64_t)&v63[v66 + 8];
              v74 = *(_QWORD *)(v64 + v66 + 16);
              v70[2] = v74;
              if (v74)
              {
                *(_QWORD *)(v72 + 16) = v73;
                *(_QWORD *)(v64 + v66) = v71;
                *v71 = 0;
                *(_QWORD *)(v64 + v66 + 16) = 0;
              }
              else
              {
                *v70 = v73;
              }
              v66 += 24;
            }
            while (v69 != v66);
            v75 = (int64x2_t)v133;
          }
          v76 = v132;
          v77 = v134;
          v132 = v61;
          *(_QWORD *)&v133 = &v61[24 * (v60 >> 2)];
          *(int64x2_t *)&v136[8] = v75;
          *((_QWORD *)&v133 + 1) = v68;
          v134 = &v61[24 * v62];
          *(_QWORD *)v136 = v76;
          *(_QWORD *)&v136[24] = v77;
          std::__split_buffer<std::map<std::string,std::string>>::~__split_buffer((uint64_t)v136);
          v58 = (_QWORD *)*((_QWORD *)&v133 + 1);
        }
        else
        {
          v59 = v35 + 2;
          if (v35 >= -1)
            v59 = v35 + 1;
          v58 -= 3 * (v59 >> 1);
          *(_QWORD *)&v133 = v58;
          *((_QWORD *)&v133 + 1) = v58;
        }
      }
      *v58 = v129;
      v78 = v130;
      v58[1] = v130;
      v79 = v58 + 1;
      v80 = v131;
      v58[2] = v131;
      if (v80)
      {
        v78[2] = v79;
        v129 = &v130;
        v130 = 0;
        v131 = 0;
      }
      else
      {
        *v58 = v79;
      }
      v81 = (_QWORD *)v133;
      *((_QWORD *)&v133 + 1) += 24;
      *(_QWORD *)&v133 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::string>>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>>((uint64_t)&v128[16], (uint64_t)v36, (uint64_t)v36, *(uint64_t *)v128, *(uint64_t *)v128, v133, v133);
      v82 = *(_QWORD **)&v128[8];
      v83 = *((_QWORD *)&v133 + 1);
      if (v36 != *(_QWORD **)&v128[8])
      {
        v84 = 0;
        do
        {
          v85 = (uint64_t *)(v83 + v84 * 8);
          *v85 = v36[v84];
          v86 = &v36[v84 + 1];
          v87 = *v86;
          *(_QWORD *)(v83 + v84 * 8 + 8) = *v86;
          v88 = v83 + v84 * 8 + 8;
          v89 = v36[v84 + 2];
          v85[2] = v89;
          if (v89)
          {
            *(_QWORD *)(v87 + 16) = v88;
            v36[v84] = v86;
            *v86 = 0;
            v36[v84 + 2] = 0;
          }
          else
          {
            *v85 = v88;
          }
          v84 += 3;
        }
        while (&v36[v84] != v82);
        v83 += v84 * 8;
        v36 = *(_QWORD **)&v128[8];
      }
      v90 = *(char **)v128;
      v91 = *(char **)&v128[16];
      *(_QWORD *)v128 = v133;
      *(_QWORD *)&v128[8] = v83;
      *(_QWORD *)&v128[16] = v134;
      *((_QWORD *)&v133 + 1) = v36;
      v134 = v91;
      v132 = v90;
      *(_QWORD *)&v133 = v90;
      std::__split_buffer<std::map<std::string,std::string>>::~__split_buffer((uint64_t)&v132);
      v36 = v81;
    }
    else if (v36 == *(_QWORD **)&v128[8])
    {
      *v36 = v129;
      v55 = v130;
      v36[1] = v130;
      v56 = v36 + 1;
      v57 = v131;
      v36[2] = v131;
      if (v57)
      {
        v55[2] = v56;
        v129 = &v130;
        v130 = 0;
        v131 = 0;
      }
      else
      {
        *v36 = v56;
      }
      *(_QWORD *)&v128[8] = v36 + 3;
    }
    else
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v128[8] - (_QWORD)(v36 + 3)) >> 3);
      v38 = *(_QWORD *)&v128[8] - 24;
      v39 = *(_QWORD *)&v128[8];
      if (*(_QWORD *)&v128[8] >= 0x18uLL)
      {
        v40 = 0;
        v41 = *(_QWORD *)v128 + 8 * ((uint64_t)(*(_QWORD *)&v128[8] - (_QWORD)(v36 + 3)) >> 3) + 24 * v35;
        do
        {
          v42 = (uint64_t *)(*((_QWORD *)&v33 + 1) + v40);
          *v42 = *(_QWORD *)(v41 + v40);
          v43 = (uint64_t *)(v41 + v40 + 8);
          v44 = *v43;
          *(_QWORD *)(*((_QWORD *)&v33 + 1) + v40 + 8) = *v43;
          v45 = *((_QWORD *)&v33 + 1) + v40 + 8;
          v46 = *(_QWORD *)(v41 + v40 + 16);
          v42[2] = v46;
          if (v46)
          {
            *(_QWORD *)(v44 + 16) = v45;
            *(_QWORD *)(v41 + v40) = v43;
            *v43 = 0;
            *(_QWORD *)(v41 + v40 + 16) = 0;
          }
          else
          {
            *v42 = v45;
          }
          v40 += 24;
        }
        while ((unint64_t)(v41 + v40) < *((_QWORD *)&v33 + 1));
        v39 = *((_QWORD *)&v33 + 1) + v40;
      }
      *(_QWORD *)&v128[8] = v39;
      if (*((_QWORD **)&v33 + 1) != v36 + 3)
      {
        v47 = 24 * v37;
        v48 = v33 + 24 * v35 - 24;
        do
        {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(v38, (_QWORD *)(v48 + v47));
          v38 -= 24;
          v47 -= 24;
        }
        while (v47);
      }
      v49 = v36 + 1;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v36, (_QWORD *)v36[1]);
      *v36 = v129;
      v50 = v130;
      v36[1] = v130;
      v51 = v131;
      v36[2] = v131;
      if (v51)
      {
        v50[2] = v49;
        v129 = &v130;
        v130 = 0;
        v131 = 0;
      }
      else
      {
        *v36 = v49;
      }
    }
    v31 = v36 + 3;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v129, v130);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v123);
  }
  std::vector<std::map<std::string,std::string>>::__vdeallocate((void **)&v112);
  v112 = *(_OWORD *)v128;
  v113 = *(_QWORD *)&v128[16];
  memset(v128, 0, sizeof(v128));
  *(_QWORD *)v136 = v128;
  std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
  std::vector<std::map<std::string,std::string>>::__vdeallocate(v109);
  *((_OWORD *)v110 + 8) = v112;
  *((_QWORD *)v110 + 18) = v113;
  v113 = 0;
  v112 = 0uLL;
  *(_QWORD *)v136 = &v112;
  std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v115, v114);
  if (v117 < 0)
    operator delete(__p[0]);
  v92 = v110;
  v93 = v111;
  if (v111)
  {
    v94 = (unint64_t *)&v111->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      v92 = v110;
    }
    do
      v96 = __ldaxr(v94);
    while (__stlxr(v96 - 1, v94));
    v93 = v111;
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      v92 = v110;
    }
  }
  std::string::operator=((std::string *)((char *)v92 + 104), __str);
  v97 = (unint64_t)v110;
  if (v93)
  {
    v98 = (unint64_t *)&v93->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      v97 = (unint64_t)v110;
    }
  }
  result.n128_u64[0] = v108;
  result.n128_u64[1] = v97;
  *a4 = result;
  return result;
}

void sub_1DE959264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, FrontendModule *a15, uint64_t a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  unint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  do
    v41 = __ldaxr(a10);
  while (__stlxr(v41 - 1, a10));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F988;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F988;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F988;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE959588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F988;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  char *v33;
  unsigned int v34;
  int v35;
  _QWORD *v36;
  uint64_t *v37;
  std::string::size_type v38;
  unsigned int *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  char *v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  int64_t v63;
  char *v64;
  char *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __n128 result;
  nlohmann::detail::exception *exception;
  unint64_t v73;
  char *v74;
  std::string *v75;
  __int128 v76;
  std::string *__str;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86[8];
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  std::string v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unsigned int *v98;
  _QWORD v99[2];
  unsigned int v100[3];

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  v80 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0x98uLL);
  v11 = (unint64_t)v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA932DD8;
  v79 = v10 + 24;
  if (v80)
  {
    v12 = (unint64_t *)&v80->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    v15 = (unint64_t *)&v80->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    *((_QWORD *)v10 + 3) = off_1EA91D8E0;
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = v80;
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
    *((_QWORD *)v10 + 15) = 0;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    *v79 = off_1EA91C2D0;
    v19 = (unint64_t *)&v80->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  else
  {
    v10[32] = 0;
    *((_QWORD *)v10 + 5) = v6;
    *((_QWORD *)v10 + 6) = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 3) = off_1EA91C2D0;
  }
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 24) = &off_1EA91DE88;
  *(_BYTE *)(v11 + 128) = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 96) + 72))(&v88, *(_QWORD *)(v7 + 96), 1718903655, 0);
  v21 = *(unsigned __int8 *)(v11 + 128);
  *(_BYTE *)(v11 + 128) = v88;
  LOBYTE(v88) = v21;
  v22 = *(uint64_t **)(v11 + 136);
  *(_QWORD *)(v11 + 136) = v89;
  v89 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v89, v21);
  *(_QWORD *)(v11 + 144) = uset_openEmpty();
  v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v11 + 128), "charset_range");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v86, (uint64_t)v23);
  v81 = v86;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0x8000000000000000;
  __str = (std::string *)(a1 + 8);
  if (v86[0])
  {
    if (v86[0] == 2)
    {
      v83 = *v87;
    }
    else if (v86[0] == 1)
    {
      v82 = *v87;
    }
    else
    {
      v85 = 0;
    }
  }
  else
  {
    v85 = 1;
  }
  v24 = v11;
  while (1)
  {
    v94 = 0;
    v95 = 0;
    *((_QWORD *)&v93 + 1) = 0;
    *(_QWORD *)&v93 = v86;
    v96 = 0x8000000000000000;
    if (v86[0] == 2)
    {
      v94 = v87[1];
    }
    else if (v86[0] == 1)
    {
      *((_QWORD *)&v93 + 1) = v87 + 1;
    }
    else
    {
      v96 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v81, (unsigned __int8 **)&v93))
    {
      break;
    }
    v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v81);
    v26 = v25;
    if (*v25 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v73 = *v26;
      if (v73 > 9)
        v74 = "number";
      else
        v74 = off_1EA94C758[v73];
      std::string::basic_string[abi:ne180100]<0>(&v90, v74);
      v75 = std::string::insert(&v90, 0, "type must be array, but is ");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v94 = v75->__r_.__value_.__r.__words[2];
      v93 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v93, exception);
    }
    v97 = 0;
    v98 = 0;
    v99[0] = 0;
    v27 = *v25;
    if (*v25)
    {
      if (v27 != 1)
      {
        if (v27 == 2)
        {
          v28 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v25 + 1) + 8) - **((_QWORD **)v25 + 1)) >> 4;
          if (!v28)
            goto LABEL_50;
LABEL_42:
          if (v28 >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        else
        {
          v28 = 1;
        }
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v28);
        v31 = (unsigned int *)v97;
        v32 = v98;
        v33 = v29;
        while (v32 != v31)
        {
          v34 = *--v32;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v97 = v33;
        v98 = (unsigned int *)v29;
        v99[0] = &v29[4 * v30];
        if (v31)
          operator delete(v31);
        goto LABEL_50;
      }
      v28 = *(_QWORD *)(*((_QWORD *)v25 + 1) + 16);
      if (!v28)
        goto LABEL_50;
      goto LABEL_42;
    }
LABEL_50:
    v94 = 0;
    v95 = 0;
    v93 = (unint64_t)v26;
    v96 = 0x8000000000000000;
    v35 = *v26;
    if (!*v26)
    {
      v96 = 1;
LABEL_57:
      v91 = 0;
      *(_OWORD *)&v90.__r_.__value_.__r.__words[1] = 0uLL;
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      v92 = 1;
      goto LABEL_58;
    }
    if (v35 == 2)
    {
      v37 = (uint64_t *)*((_QWORD *)v26 + 1);
      v94 = *v37;
      v91 = 0;
      *(_OWORD *)&v90.__r_.__value_.__r.__words[1] = 0uLL;
      v92 = 0x8000000000000000;
      v38 = v37[1];
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      v90.__r_.__value_.__r.__words[2] = v38;
    }
    else
    {
      if (v35 != 1)
      {
        v96 = 0;
        goto LABEL_57;
      }
      v36 = (_QWORD *)*((_QWORD *)v26 + 1);
      *((_QWORD *)&v93 + 1) = *v36;
      v91 = 0;
      v92 = 0x8000000000000000;
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      *(_OWORD *)&v90.__r_.__value_.__r.__words[1] = (unint64_t)(v36 + 1);
    }
LABEL_58:
    v39 = v98;
    while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v93, (unsigned __int8 **)&v90))
    {
      v40 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v93);
      v100[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v40, v100);
      v41 = v100[0];
      v42 = (char *)v98;
      if ((unint64_t)v98 >= v99[0])
      {
        v46 = v97;
        v47 = (((char *)v98 - v97) >> 2) + 1;
        if (v47 >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v48 = v99[0] - (_QWORD)v97;
        if ((uint64_t)(v99[0] - (_QWORD)v97) >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v49);
        else
          v50 = 0;
        v51 = (char *)v39 - v46;
        v52 = ((char *)v39 - v46) >> 2;
        v53 = (unsigned int *)&v50[4 * v52];
        v54 = &v50[4 * v49];
        if (v52 == v49)
        {
          if (v51 < 1)
          {
            if (v39 == (unsigned int *)v46)
              v56 = 1;
            else
              v56 = v51 >> 1;
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v56);
            v53 = (unsigned int *)&v57[v56 & 0xFFFFFFFFFFFFFFFCLL];
            v54 = &v57[4 * v58];
            if (v50)
              operator delete(v50);
          }
          else
          {
            if (v52 >= -1)
              v55 = v52 + 1;
            else
              v55 = v52 + 2;
            v53 -= v55 >> 1;
          }
        }
        *v53 = v41;
        v59 = (unsigned int *)v97;
        v60 = v53;
        if (v97 != (char *)v39)
        {
          v61 = v39;
          v60 = v53;
          do
          {
            v62 = *--v61;
            *--v60 = v62;
          }
          while (v61 != v59);
        }
        v63 = (char *)v98 - (char *)v39;
        if (v98 != v39)
          memmove(v53 + 1, v39, (char *)v98 - (char *)v39);
        v64 = v97;
        v97 = (char *)v60;
        v98 = (unsigned int *)((char *)v53 + v63 + 4);
        v99[0] = v54;
        if (v64)
          operator delete(v64);
        v39 = v53;
        v11 = v24;
      }
      else if (v39 == v98)
      {
        *v39 = v100[0];
        v98 = v39 + 1;
      }
      else
      {
        v43 = (char *)(v98 - 1);
        v44 = v98;
        while (v43 < v42)
        {
          v45 = *(_DWORD *)v43;
          v43 += 4;
          *v44++ = v45;
        }
        v98 = v44;
        if (v42 != (char *)(v39 + 1))
          memmove(&v42[-4 * ((v42 - (char *)(v39 + 1)) >> 2)], v39, v42 - (char *)(v39 + 1));
        *v39 = v41;
      }
      ++v39;
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v93);
    }
    v65 = v97;
    MEMORY[0x1DF0EDFF8](*(_QWORD *)(v11 + 144), *(unsigned int *)v97, *((unsigned int *)v97 + 1));
    operator delete(v65);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v81);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v87, v86[0]);
  if (v80)
  {
    v66 = (unint64_t *)&v80->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    do
      v68 = __ldaxr(v66);
    while (__stlxr(v68 - 1, v66));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  std::string::operator=((std::string *)(v11 + 104), __str);
  if (v80)
  {
    v69 = (unint64_t *)&v80->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  result.n128_u64[0] = (unint64_t)v79;
  result.n128_u64[1] = v11;
  *a4 = result;
  return result;
}

void sub_1DE959E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, FrontendModule *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__shared_weak_count *v35;
  unint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  do
    v37 = __ldaxr(a10);
  while (__stlxr(v37 - 1, a10));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FF08;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FF08;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FF08;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE95A148(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FF08;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  __n128 result;
  __n128 *v70;
  unint64_t v71;
  void *__p[2];
  char v73;
  void **v74;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0xA0uLL);
  v12 = (unint64_t)v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA933820;
  v13 = v11 + 24;
  v71 = (unint64_t)(v11 + 24);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    do
      v17 = __ldxr(v14);
    while (__stxr(v17 + 1, v14));
    *((_QWORD *)v11 + 3) = off_1EA91D8E0;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = v6;
    do
      v18 = __ldxr(v14);
    while (__stxr(v18 + 1, v14));
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    do
      v19 = __ldaxr(v14);
    while (__stlxr(v19 - 1, v14));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *v13 = off_1EA91D660;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    v22 = a1;
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v22 = a1;
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = v7;
    *((_QWORD *)v11 + 6) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 3) = off_1EA91D660;
  }
  *(_OWORD *)(v12 + 144) = 0u;
  *(_QWORD *)(v12 + 24) = &off_1EA91EFB8;
  *(_OWORD *)(v12 + 128) = 0u;
  v23 = *(_QWORD *)(v8 + 128);
  v24 = *(std::__shared_weak_count **)(v23 + 24);
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    if (v25)
    {
      v26 = v25;
      if (!*(_QWORD *)(v23 + 16))
      {
LABEL_70:
        v62 = (unint64_t *)&v26->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        goto LABEL_74;
      }
      v70 = a4;
      std::string::basic_string[abi:ne180100]<0>(__p, "transliterate");
      v27 = *(_QWORD *)(v8 + 128);
      v28 = *(std::__shared_weak_count **)(v8 + 136);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = *(std::__shared_weak_count **)(v27 + 24);
      if (!v31 || (v32 = std::__shared_weak_count::lock(v31)) == 0)
      {
        v38 = 0;
        v37 = 0;
LABEL_42:
        if (v28)
        {
          v44 = (unint64_t *)&v28->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (v73 < 0)
          operator delete(__p[0]);
        v47 = v37[37];
        v46 = v37[38];
        if (v46)
        {
          v48 = (unint64_t *)(v46 + 8);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v50 = *(std::__shared_weak_count **)(v12 + 136);
        *(_QWORD *)(v12 + 128) = v47;
        *(_QWORD *)(v12 + 136) = v46;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v54 = v37[39];
        v53 = v37[40];
        if (v53)
        {
          v55 = (unint64_t *)(v53 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v57 = *(std::__shared_weak_count **)(v12 + 152);
        *(_QWORD *)(v12 + 144) = v54;
        *(_QWORD *)(v12 + 152) = v53;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        a4 = v70;
        if (v38)
        {
          v60 = (unint64_t *)&v38->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        goto LABEL_70;
      }
      v33 = *(_QWORD *)(v27 + 16);
      if (v33)
      {
        v34 = v32;
        v35 = v33 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v33 + 8), (unsigned __int8 *)__p))
        {
          v74 = __p;
          v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, (unsigned __int8 *)__p, (__int128 **)&v74);
          v37 = (_QWORD *)*((_QWORD *)v36 + 5);
          v38 = (std::__shared_weak_count *)*((_QWORD *)v36 + 6);
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            v32 = v34;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
LABEL_38:
            v41 = (unint64_t *)&v32->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              v43 = v32;
              ((void (*)(void))v32->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v43);
            }
            goto LABEL_42;
          }
        }
        else
        {
          v38 = 0;
          v37 = 0;
        }
        v32 = v34;
        goto LABEL_38;
      }
      v38 = 0;
      v37 = 0;
      goto LABEL_38;
    }
  }
LABEL_74:
  if (v6)
  {
    v64 = (unint64_t *)&v6->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::operator=((std::string *)(v12 + 104), (const std::string *)(v22 + 8));
  if (v6)
  {
    v67 = (unint64_t *)&v6->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v71;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_1DE95A6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;

  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v21)
  {
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v28 = (unint64_t *)&v19->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  FrontendModule::~FrontendModule(a10);
  if (v16)
  {
    v30 = (unint64_t *)&v16->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v32);
  if (v16)
  {
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v35 = (unint64_t *)&v16->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FB98;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FB98;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FB98;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE95A990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FB98;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 v12;
  const std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9 = *a3;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = ParseLegacy::create(&v20, v7, v8, v9);
  v13 = (const std::string *)(a1 + 8);
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v12);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::string::operator=((std::string *)(v20.n128_u64[0] + 80), v13);
  v16 = v20;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = v16;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v16 = v19;
    }
  }
  *a4 = v16;
}

void sub_1DE95AB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930850;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930850;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930850;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE95ACE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930850;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 v12;
  const std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9 = *a3;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = ParseSSML::create(&v20, v7, v8, v9);
  v13 = (const std::string *)(a1 + 8);
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v12);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::string::operator=((std::string *)(v20.n128_u64[0] + 80), v13);
  v16 = v20;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = v16;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v16 = v19;
    }
  }
  *a4 = v16;
}

void sub_1DE95AE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9305E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9305E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9305E8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE95B040(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9305E8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 v12;
  const std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9 = *a3;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = Parse::create(&v20, v7, v8, v9);
  v13 = (const std::string *)(a1 + 8);
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v12);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::string::operator=((std::string *)(v20.n128_u64[0] + 80), v13);
  v16 = v20;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = v16;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v16 = v19;
    }
  }
  *a4 = v16;
}

void sub_1DE95B1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FA38;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92FA38;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92FA38;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE95B398(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92FA38;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 v12;
  const std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9 = *a3;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = TextSource::create(&v20, v7, v8, v9);
  v13 = (const std::string *)(a1 + 8);
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v12);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::string::operator=((std::string *)(v20.n128_u64[0] + 80), v13);
  v16 = v20;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = v16;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v16 = v19;
    }
  }
  *a4 = v16;
}

void sub_1DE95B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

void ReplaceText_FSTImpl::~ReplaceText_FSTImpl(void **this)
{
  void **v2;
  void **v3;

  *this = &off_1EA91F848;
  v2 = this + 13;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  v3 = v2;
  std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  FrontendModule::~FrontendModule(this);
}

{
  void **v2;
  void **v3;

  *this = &off_1EA91F848;
  v2 = this + 13;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  v3 = v2;
  std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void ReplaceText_FSTImpl::generate_tokens(ReplaceText_FSTImpl *this)
{
  ReplaceText_FSTImpl *v1;
  _QWORD *v2;
  void *v3;
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string::size_type v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const std::string *v19;
  uint64_t *v20;
  uint64_t v21;
  const char *v22;
  int32_t v23;
  int v24;
  const char *v25;
  int64_t v26;
  UText *v27;
  UText *v28;
  int32_t v29;
  int v30;
  std::string::size_type v31;
  std::string::size_type v32;
  NSObject *v33;
  int v34;
  std::string::size_type v35;
  void *v36;
  _QWORD *v37;
  ReplaceText_FSTImpl *v38;
  int v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *p_p;
  std::string::size_type *v43;
  int v44;
  std::string::size_type v45;
  const char *v46;
  std::string *p_status;
  std::string *v48;
  void **v49;
  std::string::size_type v50;
  NSObject *v51;
  std::string *v52;
  const char *v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type *v66;
  std::string __p;
  std::string v68;
  void *v69[2];
  unsigned __int8 v70;
  std::string v71;
  __int128 v72;
  std::string status;
  std::string *v74;
  _BYTE buf[24];
  uint64_t v76;

  v1 = this;
  v58 = (_QWORD *)((char *)this + 32);
  v76 = *MEMORY[0x1E0C80C00];
  v2 = &unk_1F044B000;
  v3 = &unk_1F044B000;
  do
  {
    if (*((_BYTE *)v1 + 8))
      break;
    v4 = *((_QWORD *)v1 + 2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
    status.__r_.__value_.__r.__words[0] = v4;
    status.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v4 + 16))(&v72, v4, 0);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v59 = v72;
    if ((_QWORD)v72)
    {
      v10 = *((_QWORD *)v1 + 2);
      v11 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
      status.__r_.__value_.__r.__words[0] = v10;
      status.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10 + 32))(v10);
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v16 = v72;
      if ((_QWORD *)(v16 + 8) == v17)
        v18 = 0;
      else
        v18 = v17[5] + 8;
      v19 = (const std::string *)(v18 + 24);
      v20 = (uint64_t *)*((_QWORD *)v1 + 13);
      v60 = (uint64_t *)*((_QWORD *)v1 + 14);
      v62 = v18;
      v63 = (std::string *)(v18 + 24);
      if (v20 != v60)
      {
        do
        {
          v21 = *v20;
          v66 = (std::string::size_type *)(*v20 + 56);
          if (*(char *)(*v20 + 79) >= 0)
            v22 = (const char *)(*v20 + 56);
          else
            v22 = *(const char **)(*v20 + 56);
          UTFRegex::UTFRegex((UTFRegex *)buf, v22);
          v61 = v20;
          v23 = 0;
          v64 = v21 + 32;
          v65 = v21;
          while (1)
          {
            LODWORD(v71.__r_.__value_.__l.__data_) = 0;
            LODWORD(status.__r_.__value_.__l.__data_) = 0;
            v24 = *(char *)(v18 + 47);
            v25 = v24 >= 0 ? (const char *)v19 : *(const char **)(v18 + 24);
            v26 = v24 >= 0 ? *(unsigned __int8 *)(v18 + 47) : *(_QWORD *)(v18 + 32);
            v27 = utext_openUTF8(0, v25, v26, (UErrorCode *)&status);
            v28 = SLODWORD(status.__r_.__value_.__l.__data_) <= 0 ? v27 : 0;
            UTFRegex::set_text((UTFRegex *)buf, v28, 1);
            if (!uregex_find(*(URegularExpression **)buf, v23, (UErrorCode *)&v71))
              break;
            LODWORD(status.__r_.__value_.__l.__data_) = 0;
            v29 = uregex_start(*(URegularExpression **)buf, 0, (UErrorCode *)&status);
            LODWORD(status.__r_.__value_.__l.__data_) = 0;
            v23 = uregex_end(*(URegularExpression **)buf, 0, (UErrorCode *)&status);
            v30 = v23 - v29;
            if (v23 == v29)
            {
              v23 = v29 + 1;
            }
            else
            {
              v31 = v29;
              v32 = v30;
              std::string::basic_string(&v71, v19, v29, v30, (std::allocator<char> *)&status);
              (*(void (**)(void **__return_ptr, _QWORD, uint64_t, std::string *))(**((_QWORD **)v1 + 16) + 8))(v69, *((_QWORD *)v1 + 16), v64, &v71);
              if (v2[443] != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v33 = *((_QWORD *)v3 + 442);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                v34 = *(char *)(v21 + 79);
                v35 = (std::string::size_type)v66;
                if (v34 < 0)
                  v35 = *v66;
                Censor::global_plaintext(&v68, (uint64_t)&v71);
                v36 = v3;
                v37 = v2;
                v38 = v1;
                v39 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
                v40 = v68.__r_.__value_.__r.__words[0];
                Censor::global_plaintext(&__p, (uint64_t)v69);
                v41 = &v68;
                if (v39 < 0)
                  v41 = (std::string *)v40;
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(status.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)status.__r_.__value_.__r.__words + 4) = v35;
                WORD2(status.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&status.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v41;
                HIWORD(status.__r_.__value_.__r.__words[2]) = 2080;
                v74 = p_p;
                _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_DEBUG, "Hit pattern: %s, Matched: %s, Replaced: %s", (uint8_t *)&status, 0x20u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v1 = v38;
                v21 = v65;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v68.__r_.__value_.__l.__data_);
                v2 = v37;
                v3 = v36;
              }
              v43 = v66;
              if (*(char *)(v21 + 79) < 0)
                v43 = (std::string::size_type *)*v66;
              Censor::global_plaintext(&status, (uint64_t)&v71);
              v44 = SHIBYTE(status.__r_.__value_.__r.__words[2]);
              v45 = status.__r_.__value_.__r.__words[0];
              Censor::global_plaintext(&v68, (uint64_t)v69);
              if (v44 >= 0)
                p_status = &status;
              else
                p_status = (std::string *)v45;
              v48 = &v68;
              if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v48 = (std::string *)v68.__r_.__value_.__r.__words[0];
              Diagnostics::log(7, "Hit pattern: %s, Matched: %s, Replaced: %s", v46, v43, p_status, v48);
              if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v68.__r_.__value_.__l.__data_);
              v19 = v63;
              v21 = v65;
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
                operator delete(status.__r_.__value_.__l.__data_);
              if ((v70 & 0x80u) == 0)
                v49 = v69;
              else
                v49 = (void **)v69[0];
              if ((v70 & 0x80u) == 0)
                v50 = v70;
              else
                v50 = (std::string::size_type)v69[1];
              std::string::replace(v63, v31, v32, (const std::string::value_type *)v49, v50);
              if ((char)v70 < 0)
                operator delete(v69[0]);
              v18 = v62;
              if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v71.__r_.__value_.__l.__data_);
            }
          }
          UTFRegex::~UTFRegex((UTFRegex *)buf);
          v20 = v61 + 3;
        }
        while (v61 + 3 != v60);
      }
      if (v2[443] != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v51 = *((_QWORD *)v3 + 442);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        Censor::global_plaintext(&status, (uint64_t)v19);
        v52 = (status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &status
            : (std::string *)status.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v52;
        _os_log_impl(&dword_1DE3F6000, v51, OS_LOG_TYPE_DEBUG, "#ReplaceText_FST: %s", buf, 0xCu);
        if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
          operator delete(status.__r_.__value_.__l.__data_);
      }
      Censor::global_plaintext(&status, (uint64_t)v19);
      if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &status;
      else
        v54 = (std::string *)status.__r_.__value_.__r.__words[0];
      Diagnostics::log(7, "#ReplaceText_FST: %s", v53, v54);
      if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
        operator delete(status.__r_.__value_.__l.__data_);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v58, &v72);
    }
    else
    {
      *((_BYTE *)v1 + 8) = 1;
    }
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  while (v59);
}

void sub_1DE95BCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;

  v43 = *(std::__shared_weak_count **)(v41 - 168);
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::map<std::string,std::string>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  nlohmann::detail::exception *exception;
  unint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  std::string v27;
  std::string __p;
  std::string v29;
  uint64_t v30;
  const void **v31;

  a1[1] = 0;
  v4 = (_QWORD **)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v20 = *a2;
    if (v20 > 9)
      v21 = "number";
    else
      v21 = off_1EA94C758[v20];
    std::string::basic_string[abi:ne180100]<0>(&v29, v21);
    v22 = std::string::insert(&v29, 0, "type must be object, but is ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v27, exception);
  }
  v25 = 0;
  v26 = 0;
  v24 = (uint64_t *)&v25;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v8 = (_QWORD *)*v5;
  v6 = v5 + 1;
  v7 = v8;
  if (v8 == v6)
  {
    v16 = 0;
  }
  else
  {
    v9 = (uint64_t *)&v25;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)(v7 + 7), &v29);
      if (*((char *)v7 + 55) < 0)
        std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v7[4], v7[5]);
      else
        v27 = *(std::string *)(v7 + 4);
      __p = v29;
      v10 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v24, v9, &v31, &v30, (const void **)&v27.__r_.__value_.__l.__data_);
      v11 = *v10;
      if (!*v10)
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)&v24, (uint64_t)&v27, (uint64_t)&v29);
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v24, (uint64_t)v31, v10, (uint64_t *)v29.__r_.__value_.__l.__data_);
        v11 = (uint64_t *)v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v29, 0);
      }
      v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          v9 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v13 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (!v13);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v13 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v13);
      }
      v7 = v15;
    }
    while (v15 != v6);
    v16 = *v4;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)a1, v16);
  v17 = v25;
  *a1 = v24;
  a1[1] = v17;
  v18 = v26;
  a1[2] = v26;
  if (v18)
  {
    v17[2] = v4;
    v24 = (uint64_t *)&v25;
    v25 = 0;
    v26 = 0;
    v17 = 0;
  }
  else
  {
    *a1 = v4;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v24, v17);
}

void sub_1DE95C114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v28, *(_QWORD **)(v28 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t std::__split_buffer<std::map<std::string,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::string>>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a7;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      *(_QWORD *)(v9 - 24) = *(_QWORD *)(a3 + v8 - 24);
      v10 = (uint64_t *)(a3 + v8 - 16);
      v11 = *v10;
      *(_QWORD *)(a7 + v8 - 16) = *v10;
      v12 = a7 + v8 - 16;
      v13 = *(_QWORD *)(a3 + v8 - 8);
      *(_QWORD *)(v9 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 + v8 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 + v8 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v9 - 24) = v12;
      }
      v8 -= 24;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

void std::__shared_ptr_emplace<ReplaceText_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ReplaceText_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ReplaceText_FSTImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void FilterText_Impl::~FilterText_Impl(uint64_t **this)
{
  *this = (uint64_t *)&off_1EA91DE88;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 14, *((unsigned __int8 *)this + 104));
  FrontendModule::~FrontendModule((void **)this);
}

{
  *this = (uint64_t *)&off_1EA91DE88;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 14, *((unsigned __int8 *)this + 104));
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x1DF0ED014);
}

void FilterText_Impl::generate_tokens(FilterText_Impl *this)
{
  std::string::size_type v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  std::string::size_type size;
  int v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string *p_str;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  NSObject *v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *p_p;
  int v34;
  std::string::size_type v35;
  const char *v36;
  std::string *v37;
  std::string *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  std::string __p;
  std::string v44;
  std::string __str;
  std::string v46;
  __int128 v47;
  uint8_t buf[4];
  std::string *v49;
  __int16 v50;
  std::string *v51;
  uint64_t v52;

  v42 = (_QWORD *)((char *)this + 32);
  v52 = *MEMORY[0x1E0C80C00];
  while (!*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 2);
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v46.__r_.__value_.__r.__words[0] = v2;
    v46.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v2 + 16))(&v47, v2, 0);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v8 = v47;
    if ((_QWORD)v47)
    {
      v9 = *((_QWORD *)this + 2);
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v46.__r_.__value_.__r.__words[0] = v9;
      v46.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 32))(v9);
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v15 = v47;
      if ((_QWORD *)(v15 + 8) == v16)
        v17 = 0;
      else
        v17 = v16[5] + 8;
      v18 = (std::string *)(v17 + 24);
      if (*(char *)(v17 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v17 + 24), *(_QWORD *)(v17 + 32));
      }
      else
      {
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v46.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 40);
      }
      memset(&__str, 0, sizeof(__str));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v46;
      else
        v19 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        size = v46.__r_.__value_.__l.__size_;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v44.__r_.__value_.__l.__size_ = size << 32;
      if ((_DWORD)size)
      {
        v21 = 0;
        do
        {
          v22 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v44);
          if (MEMORY[0x1DF0EE010](*((_QWORD *)this + 15), v22))
          {
            UTFString::push_back_codepoint<std::string>(&__str, v22);
          }
          else
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v23 = __str.__r_.__value_.__l.__size_;
            std::string::resize(&__str, (uint64_t)((v23 << 32) + 0x100000000) >> 32, 0);
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            p_str->__r_.__value_.__s.__data_[(int)v23] = 32;
          }
          v25 = v19->__r_.__value_.__s.__data_[v21];
          v26 = (v25 + 62);
          if (v25 <= 0xEF)
            v27 = 2;
          else
            v27 = 3;
          if (v25 <= 0xDF)
            v28 = v27;
          else
            v28 = v27 + 1;
          if (v26 >= 0x33)
            v28 = 1;
          v21 += v28;
          LODWORD(v44.__r_.__value_.__r.__words[1]) = v21;
        }
        while (v21 != (_DWORD)size);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        Censor::global_plaintext(&v44, (uint64_t)&v46);
        v30 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
        v31 = v44.__r_.__value_.__r.__words[0];
        Censor::global_plaintext(&__p, (uint64_t)&__str);
        v32 = &v44;
        if (v30 < 0)
          v32 = (std::string *)v31;
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        v49 = v32;
        v50 = 2080;
        v51 = p_p;
        _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_DEBUG, "#[FilterText]\nIn :%s\nOut:%s", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
      }
      Censor::global_plaintext(&v44, (uint64_t)&v46);
      v34 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
      v35 = v44.__r_.__value_.__r.__words[0];
      Censor::global_plaintext(&__p, (uint64_t)&__str);
      v37 = &v44;
      if (v34 < 0)
        v37 = (std::string *)v35;
      v38 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      Diagnostics::log(7, "#[FilterText]\nIn :%s\nOut:%s", v36, v37, v38);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      std::string::operator=(v18, &__str);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v42, &v47);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
    }
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (!*((_QWORD *)&v47 + 1))
      goto LABEL_79;
    v40 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (!v8)
        return;
    }
    else
    {
LABEL_79:
      if (!v8)
        return;
    }
  }
}

void sub_1DE95C82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void UTFString::push_back_codepoint<std::string>(std::string *this, unsigned int a2)
{
  std::string::size_type size;
  std::string *v5;
  int v6;
  int v7;
  int v8;
  std::string *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  std::string *v13;
  std::string *v14;

  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  if (a2 >= 0x80)
  {
    if (a2 >= 0x800)
    {
      if (a2 >> 11 >= 0x1B)
      {
        v8 = 3;
        if (a2 >= 0x10000)
          v8 = 4;
        if (a2 - 1114112 >= 0xFFEFE000)
          v7 = v8;
        else
          v7 = 0;
      }
      else
      {
        v7 = 3;
      }
      std::string::resize(this, v7 + (int)size, 0);
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = this;
      else
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (a2 >= 0x10000)
      {
        v9->__r_.__value_.__s.__data_[(int)size] = (a2 >> 18) | 0xF0;
        v10 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
        if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = this;
        else
          v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        v11 = (size << 32) + 0x100000000;
        v12 = size + 2;
      }
      else
      {
        v10 = (a2 >> 12) | 0xFFFFFFE0;
        v11 = size << 32;
        v12 = size + 1;
      }
      LODWORD(size) = v12;
      v9->__r_.__value_.__s.__data_[v11 >> 32] = v10;
      v6 = (a2 >> 6) & 0x3F | 0x80;
    }
    else
    {
      std::string::resize(this, (int)size + 2, 0);
      v6 = (a2 >> 6) | 0xC0;
    }
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = this;
    else
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v13->__r_.__value_.__s.__data_[(int)size] = v6;
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = this;
    else
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v14->__r_.__value_.__s.__data_[(int)size + 1] = a2 & 0x3F | 0x80;
  }
  else
  {
    std::string::resize(this, (int)size + 1, 0);
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = this;
    else
      v5 = (std::string *)this->__r_.__value_.__r.__words[0];
    v5->__r_.__value_.__s.__data_[(int)size] = a2;
  }
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(_BYTE *result, unsigned int *a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = *v2;
      if (v5 > 9)
        v6 = "number";
      else
        v6 = off_1EA94C758[v5];
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v10, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1DE95CB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<FilterText_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FilterText_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FilterText_Impl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0x8000000000000000;
  v2 = *a2;
  if (*a2)
  {
    if (v2 == 2)
    {
      v6 = **((_QWORD **)a2 + 1);
    }
    else if (v2 == 1)
    {
      v5 = **((_QWORD **)a2 + 1);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 1;
  }
  return nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::iteration_proxy_value(a1, (uint64_t)&v4);
}

uint64_t nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0x8000000000000000;
  v2 = *a2;
  if (v2 == 2)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v2 == 1)
  {
    v5 = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v8 = 1;
  }
  return nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::iteration_proxy_value(a1, (uint64_t)&v4);
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key(unsigned __int8 **a1)
{
  int v2;
  unint64_t v3;
  void **v4;
  std::string v6;

  v2 = **a1;
  if (v2 == 1)
    return nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)a1);
  if (v2 != 2)
    return (uint64_t)(a1 + 10);
  v3 = (unint64_t)a1[5];
  if ((unsigned __int8 *)v3 != a1[6])
  {
    v4 = (void **)(a1 + 7);
    std::to_string(&v6, v3);
    if (*((char *)a1 + 79) < 0)
      operator delete(*v4);
    *(_OWORD *)v4 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
    a1[9] = (unsigned __int8 *)v6.__r_.__value_.__r.__words[2];
    a1[6] = a1[5];
  }
  return (uint64_t)(a1 + 7);
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::~iteration_proxy_value(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  nlohmann::detail::exception *exception;
  unint64_t v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  unint64_t v33;
  std::string v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;

  if (*a1)
  {
    if (*a1 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v29 = *a1;
      if (v29 > 9)
        v30 = "number";
      else
        v30 = off_1EA94C758[v29];
      std::string::basic_string[abi:ne180100]<0>(&v34, v30);
      v31 = std::string::insert(&v34, 0, "cannot use operator[] with a numeric argument with ");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v36 = v31->__r_.__value_.__r.__words[2];
      v35 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(305, (uint64_t)&v35, exception);
    }
    v4 = (uint64_t *)*((_QWORD *)a1 + 1);
    v5 = *v4;
  }
  else
  {
    *a1 = 2;
    v4 = (uint64_t *)operator new(0x18uLL);
    v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *((_QWORD *)a1 + 1) = v4;
  }
  v6 = (unsigned __int8 *)v4[1];
  v7 = (uint64_t)&v6[-v5] >> 4;
  if (v7 <= a2)
  {
    v34.__r_.__value_.__s.__data_[0] = 0;
    v34.__r_.__value_.__l.__size_ = 0;
    v8 = a2 - v7 + 1;
    if (a2 - v7 != -1)
    {
      v9 = v4[2];
      v10 = v4[1];
      if (v8 <= (uint64_t)(v9 - v10) >> 4)
      {
        v16 = v10 - (_QWORD)v6;
        v17 = a2 - v7 + 1;
        if (v8 <= (uint64_t)(v10 - (_QWORD)v6) >> 4)
          goto LABEL_20;
        v18 = 0;
        v17 = v16 >> 4;
        v33 = v10 + 16 * (v8 - (v16 >> 4));
        v19 = 16 * a2 - 16 * (v7 + (v16 >> 4)) + 16;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v10 + v18, (uint64_t)&v34);
          v18 += 16;
        }
        while (v19 != v18);
        v4[1] = v33;
        if ((unsigned __int8 *)v10 != v6)
        {
LABEL_20:
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range((uint64_t)v4, (uint64_t)v6, v10, (uint64_t)&v6[16 * v8]);
          v20 = &v34;
          if (v6 <= (unsigned __int8 *)&v34)
          {
            if (v4[1] <= (unint64_t)&v34)
              v21 = 0;
            else
              v21 = a2 - v7 + 1;
            v20 = (std::string *)((char *)&v34 + 16 * v21);
          }
          do
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35, (uint64_t)v20);
            v22 = *v6;
            *v6 = v35;
            LOBYTE(v35) = v22;
            v23 = *((_QWORD *)v6 + 1);
            *((_QWORD *)v6 + 1) = *((_QWORD *)&v35 + 1);
            *((_QWORD *)&v35 + 1) = v23;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35 + 1, v22);
            v6 += 16;
            --v17;
          }
          while (v17);
        }
      }
      else
      {
        v11 = *v4;
        v12 = v8 + ((uint64_t)(v10 - *v4) >> 4);
        if (v12 >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - v11;
        if (v13 >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        v38 = v4 + 2;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v4 + 2), v14);
        else
          v15 = 0;
        v24 = (uint64_t)&v15[16 * ((uint64_t)&v6[-v11] >> 4)];
        *(_QWORD *)&v35 = v15;
        *((_QWORD *)&v35 + 1) = v24;
        v36 = v24;
        v37 = &v15[16 * v14];
        v25 = v24 + 16 * v8;
        v26 = 16 * a2 - 16 * v7 + 16;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v24, (uint64_t)&v34);
          v24 += 16;
          v26 -= 16;
        }
        while (v26);
        v36 = v25;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v4, &v35, (uint64_t)v6);
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v35);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v34.__r_.__value_.__l.__size_, v34.__r_.__value_.__s.__data_[0]);
    v5 = **((_QWORD **)a1 + 1);
  }
  return v5 + 16 * a2;
}

void sub_1DE95D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20)
{
  uint64_t **v20;

  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v20, a12);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<std::string,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 + v5 - a4;
  v7 = v5;
  while (v6 < a3)
  {
    *(_BYTE *)v7 = *(_BYTE *)v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    *(_BYTE *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v7 += 16;
    v6 += 16;
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v5 != a4)
  {
    v8 = (uint64_t **)(v5 - 8);
    v9 = 16 * ((v5 - a4) >> 4);
    do
    {
      v10 = a2 + v9;
      v11 = *(_BYTE *)(a2 + v9 - 16);
      v12 = *(uint64_t **)(a2 + v9 - 8);
      *(_BYTE *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      v13 = *((unsigned __int8 *)v8 - 8);
      *((_BYTE *)v8 - 8) = v11;
      v14 = *v8;
      *v8 = v12;
      v8 -= 2;
      v15 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v13);
      v9 -= 16;
    }
    while (v9);
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v6 = a2[1];
  v7 = a1 + 2;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  v9 = a1[1];
  v10 = a2[2];
  v17 = v10;
  v18 = v10;
  v15[0] = v7;
  v15[1] = &v17;
  v15[2] = &v18;
  if (v9 != v3)
  {
    do
    {
      *(_BYTE *)v10 = *(_BYTE *)v3;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v3 + 8);
      *(_BYTE *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v10 += 16;
      v3 += 16;
    }
    while (v3 != v9);
    v18 = v10;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  a2[2] = v10;
  v11 = *a1;
  *a1 = a2[1];
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return v6;
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(uint64_t a1)
{
  nlohmann::detail::exception *exception;
  _QWORD v3[3];

  if (**(_BYTE **)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create(207, (uint64_t)v3, exception);
  }
  return *(_QWORD *)(a1 + 8) + 32;
}

void sub_1DE95D51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::iteration_proxy_value(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "0");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), &byte_1DEBD87CE);
  return a1;
}

void NormAction_es::~NormAction_es(NormAction_es *this)
{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D198;
  v2 = (NormAction_es *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D198;
  v2 = (NormAction_es *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x1DF0ED014);
}

std::basic_string<char16_t> *NormAction_es::cardinal@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::basic_string<char16_t>::size_type v8;
  std::basic_string<char16_t> *result;
  uint64_t v10;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> *p_p;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v6 = v5;
  }
  UTFString::to_utf16(&__p, a2, v6);
  v7 = unum_parseInt64();
  v8 = a1 + 56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_1EA931C98;
  __p.__r_.__value_.__l.__size_ = v8;
  __p.__r_.__value_.__r.__words[2] = v7;
  p_p = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  result = p_p;
  if (p_p == &__p)
  {
    v10 = 4;
    result = &__p;
  }
  else
  {
    if (!p_p)
      return result;
    v10 = 5;
  }
  return (std::basic_string<char16_t> *)(*(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 8 * v10))();
}

void sub_1DE95D78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **v16;
  void **p_p;
  uint64_t v19;

  p_p = a16;
  if (a16 == v16)
  {
    v19 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*((void (**)(void))*p_p + v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *NormAction_es::ordinal@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::basic_string<char16_t>::size_type v8;
  std::basic_string<char16_t> *result;
  uint64_t v10;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> *p_p;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v6 = v5;
  }
  UTFString::to_utf16(&__p, a2, v6);
  v7 = unum_parseInt64();
  v8 = a1 + 64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_1EA931C98;
  __p.__r_.__value_.__l.__size_ = v8;
  __p.__r_.__value_.__r.__words[2] = v7;
  p_p = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  result = p_p;
  if (p_p == &__p)
  {
    v10 = 4;
    result = &__p;
  }
  else
  {
    if (!p_p)
      return result;
    v10 = 5;
  }
  return (std::basic_string<char16_t> *)(*(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 8 * v10))();
}

void sub_1DE95D908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **v16;
  void **p_p;
  uint64_t v19;

  p_p = a16;
  if (a16 == v16)
  {
    v19 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*((void (**)(void))*p_p + v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void NormAction_es::normalize(_QWORD **a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v7;
  int *v8;
  int v9;
  int v10;
  void *__p[2];
  char v13;

  v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 7)
    {
LABEL_10:
      NormAction::normalize(a1, a2, (char *)a3, a4);
      return;
    }
    v8 = *(int **)a3;
  }
  else
  {
    v8 = (int *)a3;
    if (v7 != 7)
      goto LABEL_10;
  }
  v9 = *v8;
  v10 = *(int *)((char *)v8 + 3);
  if (v9 != 1347962190 || v10 != 1145979216)
    goto LABEL_10;
  std::string::basic_string[abi:ne180100]<0>(__p, "CARDINAL");
  NormAction::normalize(a1, a2, (char *)__p, a4);
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1DE95DA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NormAction_es::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  char **v4;

  v2 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  while (strcmp(NormAction_es::consume_next_token(std::string const&)::multipliers[v2], v3))
  {
    if (++v2 == 3)
    {
      v4 = off_1EA94B170;
      return v4 != off_1EA94B170;
    }
  }
  v4 = &NormAction_es::consume_next_token(std::string const&)::multipliers[v2];
  return v4 != off_1EA94B170;
}

void UTFRegex::UTFRegex(UTFRegex *this, const char *pattern)
{
  URegularExpression *v4;
  void *exception;
  const char *v6;
  void *v7;
  _BYTE v8[28];
  UErrorCode status;
  UParseError pe;

  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  status = U_ZERO_ERROR;
  v4 = uregex_openC(pattern, 0, &pe, &status);
  *(_QWORD *)this = v4;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v6 = pattern;
    v7 = exception;
    StringFormatter::StringFormatter((StringFormatter *)v8, "Illegal regex %s at offset %d\n", v6, pe.offset);
    MEMORY[0x1DF0EC99C](v7, v8);
    __cxa_throw(v7, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
}

void sub_1DE95DB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t UTFRegex::UTFRegex(uint64_t a1, UChar *pattern)
{
  URegularExpression *v4;
  const UChar *p_p;
  int32_t v7;
  void *exception;
  std::string *v9;
  void *__p;
  uint64_t v11;
  unsigned __int8 v12;
  std::string v13;
  UErrorCode status;
  UParseError pe;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  status = U_ZERO_ERROR;
  v4 = uregex_open(pattern, -1, 0, &pe, &status);
  *(_QWORD *)a1 = v4;
  if (!v4)
  {
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, (char *)pattern);
    if ((v12 & 0x80u) == 0)
      p_p = (const UChar *)&__p;
    else
      p_p = (const UChar *)__p;
    if ((v12 & 0x80u) == 0)
      v7 = v12;
    else
      v7 = v11;
    UTFString::to_utf8(&v13, p_p, v7);
    if ((char)v12 < 0)
      operator delete(__p);
    exception = __cxa_allocate_exception(0x10uLL);
    v9 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Illegal regex %s at offset %d\n", (const char *)v9, pe.offset);
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return a1;
}

void sub_1DE95DCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a22 < 0)
        operator delete(a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void UTFRegex::UTFRegex(UTFRegex *this, const UTFRegex *regexp)
{
  URegularExpression *v3;
  void *exception;
  _BYTE v5[28];
  UErrorCode status;

  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  status = U_ZERO_ERROR;
  v3 = uregex_clone(regexp, &status);
  *(_QWORD *)this = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v5, "Failed to clone regex");
    MEMORY[0x1DF0EC99C](exception, v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
}

void sub_1DE95DDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void UTFRegex::~UTFRegex(UTFRegex *this)
{
  URegularExpression *v2;
  UText *v3;

  v2 = *(URegularExpression **)this;
  if (v2)
    uregex_close(v2);
  v3 = (UText *)*((_QWORD *)this + 2);
  if (v3)
  {
    if (*((_BYTE *)this + 8))
      utext_close(v3);
  }
}

BOOL UTFRegex::search(URegularExpression **this)
{
  int32_t v2;
  UErrorCode status;

  status = U_ZERO_ERROR;
  v2 = uregex_end(*this, 0, &status);
  status = U_ZERO_ERROR;
  return uregex_find(*this, v2, &status) != 0;
}

void UTFRegex::set_text(UTFRegex *this, UText *text, char a3)
{
  UText *v6;
  void *exception;
  _BYTE v8[28];
  UErrorCode status;

  status = U_ZERO_ERROR;
  v6 = (UText *)*((_QWORD *)this + 2);
  if (v6 && *((_BYTE *)this + 8))
    utext_close(v6);
  *((_QWORD *)this + 2) = text;
  *((_BYTE *)this + 8) = a3;
  uregex_setUText(*(URegularExpression **)this, text, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v8, "Failed regex match set text");
    MEMORY[0x1DF0EC99C](exception, v8);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  uregex_reset(*(URegularExpression **)this, -1, &status);
}

void sub_1DE95DF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void HydraAdapterModule::~HydraAdapterModule(void **this)
{
  *this = off_1EA91F220;
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  Module::~Module((Module *)this);
}

{
  *this = off_1EA91F220;
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  Module::~Module((Module *)this);
  JUMPOUT(0x1DF0ED014);
}

void HydraAdapterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  _BOOL4 v16;
  unsigned __int8 *v17;
  UTFRegex *v19;
  const char *v20;
  int v21;
  const char *v22;
  int64_t v23;
  UText *v24;
  UText *v25;
  URegularExpression **v26;
  int32_t v27;
  URegularExpression **v28;
  int32_t v29;
  std::string::size_type size;
  char *v31;
  char *v32;
  char *v33;
  std::string::size_type v34;
  int v35;
  std::string::size_type v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  std::string *p_str;
  unsigned int v42;
  unint64_t v44;
  std::string *v45;
  uint64_t v46;
  std::string *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  std::string::size_type *v52;
  char *v53;
  char *v54;
  std::string::size_type v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  std::string::size_type v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  std::string::size_type *v70;
  std::string::size_type v71;
  std::__shared_weak_count *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  NSObject *v77;
  const char *v78;
  std::string *v79;
  std::string *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  NSObject *v86;
  const char *v87;
  std::string *v88;
  std::string *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  std::string::size_type v93;
  NSObject *v94;
  const char *v95;
  std::string *v96;
  std::string *p_status;
  std::string *v98;
  std::string *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  NSObject *v104;
  const char *v105;
  std::string *v106;
  std::string *v107;
  uint64_t *v108;
  NSObject *v109;
  const char *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  UTFRegex *v115;
  const char *v116;
  int64_t v117;
  UText *v118;
  UText *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  uint64_t *v123;
  int v124;
  size_t v125;
  std::string::size_type v126;
  const void *v127;
  size_t v128;
  size_t v129;
  size_t v130;
  const void *v131;
  std::string::size_type v132;
  uint64_t *v133;
  const void *v134;
  size_t v135;
  std::string *v137;
  int v138;
  size_t v139;
  size_t v140;
  const void *v141;
  const void *v142;
  size_t v143;
  std::string::size_type v144;
  std::string::size_type v145;
  const void *v146;
  size_t v147;
  std::string::size_type v149;
  unint64_t v150;
  int v151;
  std::string::size_type v152;
  BOOL v153;
  std::string::size_type v154;
  std::string::size_type v155;
  std::string::size_type v156;
  std::string::size_type v157;
  std::string::size_type v158;
  const void *v159;
  size_t v160;
  __int128 **i;
  std::string::size_type v163;
  __int128 *v164;
  __int128 *v165;
  std::string::size_type v166;
  __int128 v167;
  std::string *p_buf;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string *v171;
  std::string::size_type v172;
  NSObject *v173;
  std::string *v174;
  const char *v175;
  std::string *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  std::string::size_type v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t *v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t **v211;
  std::string::size_type v212;
  uint64_t *v213[2];
  uint64_t *v214[2];
  uint64_t *v215[2];
  uint64_t *v216[2];
  std::string __str;
  std::string status;
  std::string buf;
  std::string v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v3 + 16);
  v211 = (uint64_t **)v4;
  v212 = (std::string::size_type)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  SharedObjectPool::get<TrackSubstitutions>(&v209, *(_QWORD *)(a1 + 168));
  TrackSubstitutions::reset_text(v209, v4 + 96);
  v207 = (uint64_t *)v4;
  v208 = v5;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  v11 = (v10 - 1);
  if ((int)v10 - 1 < 0)
  {
LABEL_19:
    memset(&__str, 0, sizeof(__str));
    v19 = *(UTFRegex **)(a1 + 304);
    LODWORD(v220.__r_.__value_.__l.__data_) = 0;
    v20 = *(const char **)(v4 + 72);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    v21 = *(char *)(v4 + 95);
    if (v21 >= 0)
      v22 = (const char *)(v4 + 72);
    else
      v22 = v20;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(v4 + 95);
    else
      v23 = *(_QWORD *)(v4 + 80);
    v24 = utext_openUTF8(0, v22, v23, (UErrorCode *)&status);
    if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0)
      v25 = v24;
    else
      v25 = 0;
    UTFRegex::set_text(v19, v25, 1);
    if (uregex_find(*(URegularExpression **)v19, -1, (UErrorCode *)&v220))
    {
      v26 = *(URegularExpression ***)(a1 + 304);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      v27 = uregex_start(*v26, 1, (UErrorCode *)&status);
      v28 = *(URegularExpression ***)(a1 + 304);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      v29 = uregex_end(*v28, 1, (UErrorCode *)&status);
      std::string::basic_string(&status, (const std::string *)(v4 + 72), v27, v29 - v27, (std::allocator<char> *)&v220);
      __str = status;
    }
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v109 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(status.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v109, OS_LOG_TYPE_DEBUG, "Append default eos because of missing punctuation in the input", (uint8_t *)&status, 2u);
      }
      Diagnostics::log(7, "Append default eos because of missing punctuation in the input", v110);
      v220.__r_.__value_.__r.__words[0] = v4;
      v220.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      if (v5)
      {
        v111 = (unint64_t *)&v5->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      std::string::basic_string[abi:ne180100]<0>(&status, ".");
      HydraAdapterModule::append_eos((uint64_t **)&v220, (uint64_t)&status);
      if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
        operator delete(status.__r_.__value_.__l.__data_);
      if (v5)
      {
        v113 = (unint64_t *)&v5->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      goto LABEL_225;
    }
    v202 = v5;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    while (1)
    {
      v36 = v34;
      v37 = *std::string::at(&__str, v34);
      if ((v37 & 0x80000000) == 0 || (v37 + 62) <= 0x32u)
        break;
      v38 = 1;
LABEL_64:
      v35 += v38;
      v34 = v35;
      if (v32 >= v33)
      {
        v48 = (v32 - v31) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if ((v33 - v31) >> 3 > v49)
          v49 = (v33 - v31) >> 3;
        if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF0)
          v50 = 0xFFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
        {
          if (v50 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = (char *)operator new(16 * v50);
        }
        else
        {
          v51 = 0;
        }
        v52 = (std::string::size_type *)&v51[16 * v48];
        *v52 = v36;
        v52[1] = v35;
        if (v32 == v31)
        {
          v54 = &v51[16 * v48];
        }
        else
        {
          v53 = &v51[16 * v48];
          do
          {
            v54 = v53 - 16;
            *((_OWORD *)v53 - 1) = *((_OWORD *)v32 - 1);
            v32 -= 16;
            v53 -= 16;
          }
          while (v32 != v31);
        }
        v33 = &v51[16 * v50];
        v32 = (char *)(v52 + 2);
        if (v31)
          operator delete(v31);
        v31 = v54;
      }
      else
      {
        *(_QWORD *)v32 = v36;
        *((_QWORD *)v32 + 1) = v35;
        v32 += 16;
      }
      v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v55 = __str.__r_.__value_.__l.__size_;
      if (v55 <= v35)
      {
        v58 = v32 - v31;
        if (v32 != v31)
        {
          v59 = 0;
          v60 = 0;
          v61 = v58 >> 4;
          v62 = (v58 >> 4) + 1;
          do
          {
            if (v61 <= v60)
LABEL_443:
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v63 = v60;
            v64 = *(_QWORD *)&v31[16 * v60];
            v65 = v62;
            do
            {
              v66 = v65 - 2;
              if (v65 - 2 < v63)
                goto LABEL_108;
              if (v61 <= v66)
                goto LABEL_443;
              v67 = *(_QWORD *)(a1 + 272);
              std::string::basic_string(&status, &__str, v64, *(_QWORD *)&v31[16 * v66 + 8] - v64, (std::allocator<char> *)&v220);
              v68 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v67, (const void **)&status.__r_.__value_.__l.__data_);
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
                operator delete(status.__r_.__value_.__l.__data_);
              --v65;
            }
            while (*(_QWORD *)(a1 + 272) + 8 == v68);
            v69 = v65 - v63;
            if (v65 != v63)
            {
              v83 = v59 + v69 - 1;
              if (v61 <= v83 || v61 <= v59)
LABEL_445:
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              std::string::basic_string(&status, &__str, *(_QWORD *)&v31[16 * v59], *(_QWORD *)&v31[16 * v83 + 8] - *(_QWORD *)&v31[16 * v59], (std::allocator<char> *)&v220);
              v84 = std::map<std::string,std::string>::at(*(_QWORD *)(a1 + 272), (const void **)&status.__r_.__value_.__l.__data_);
              if (*(char *)(v84 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)v84, *(_QWORD *)(v84 + 8));
              }
              else
              {
                v85 = *(_OWORD *)v84;
                v220.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 16);
                *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v85;
              }
              if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v93 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
              else
                v93 = v220.__r_.__value_.__l.__size_;
              if (v93)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v94 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  v96 = &v220;
                  if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v96 = (std::string *)v220.__r_.__value_.__r.__words[0];
                  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_status = &status;
                  else
                    p_status = (std::string *)status.__r_.__value_.__r.__words[0];
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_status;
                }
                v98 = &v220;
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v98 = (std::string *)v220.__r_.__value_.__r.__words[0];
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v99 = &status;
                else
                  v99 = (std::string *)status.__r_.__value_.__r.__words[0];
                v213[0] = v207;
                v213[1] = (uint64_t *)v208;
                if (v208)
                {
                  v100 = &v208->__shared_owners_;
                  do
                    v101 = __ldxr((unint64_t *)v100);
                  while (__stxr(v101 + 1, (unint64_t *)v100));
                }
                HydraAdapterModule::append_eos(v213, (uint64_t)&v220);
                if (v208)
                {
                  v102 = &v208->__shared_owners_;
                  do
                    v103 = __ldaxr((unint64_t *)v102);
                  while (__stlxr(v103 - 1, (unint64_t *)v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                    std::__shared_weak_count::__release_weak(v208);
                  }
                }
              }
              else
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v104 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v106 = &status;
                  else
                    v106 = (std::string *)status.__r_.__value_.__r.__words[0];
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v106;
                }
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v107 = &status;
                else
                  v107 = (std::string *)status.__r_.__value_.__r.__words[0];
              }
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v220.__r_.__value_.__l.__data_);
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
                operator delete(status.__r_.__value_.__l.__data_);
              goto LABEL_208;
            }
LABEL_108:
            if (v61 <= v59)
              goto LABEL_445;
            v70 = (std::string::size_type *)&v31[16 * v59];
            v71 = v70[1] - *v70;
            std::string::basic_string(&status, &__str, *v70, v71, (std::allocator<char> *)&v220);
            if (v71 == 1)
            {
              if (*(_BYTE *)(a1 + 346))
              {
                v72 = v208;
                v216[0] = v207;
                v216[1] = (uint64_t *)v208;
                if (v208)
                {
                  v73 = &v208->__shared_owners_;
                  do
                    v74 = __ldxr((unint64_t *)v73);
                  while (__stxr(v74 + 1, (unint64_t *)v73));
                }
                HydraAdapterModule::append_eos(v216, (uint64_t)&status);
                if (!v208)
                  goto LABEL_205;
                v75 = &v208->__shared_owners_;
                do
                  v76 = __ldaxr((unint64_t *)v75);
                while (__stlxr(v76 - 1, (unint64_t *)v75));
                goto LABEL_203;
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v86 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v88 = &status;
                else
                  v88 = (std::string *)status.__r_.__value_.__r.__words[0];
                LODWORD(v220.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v220.__r_.__value_.__r.__words + 4) = (std::string::size_type)v88;
              }
              if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v89 = &status;
              else
                v89 = (std::string *)status.__r_.__value_.__r.__words[0];
              v72 = v208;
              v215[0] = v207;
              v215[1] = (uint64_t *)v208;
              if (v208)
              {
                v90 = &v208->__shared_owners_;
                do
                  v91 = __ldxr((unint64_t *)v90);
                while (__stxr(v91 + 1, (unint64_t *)v90));
              }
              std::string::basic_string[abi:ne180100]<0>(&v220, ".");
              HydraAdapterModule::append_eos(v215, (uint64_t)&v220);
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v220.__r_.__value_.__l.__data_);
                if (v208)
                {
LABEL_201:
                  v108 = &v208->__shared_owners_;
                  do
                    v76 = __ldaxr((unint64_t *)v108);
                  while (__stlxr(v76 - 1, (unint64_t *)v108));
                  goto LABEL_203;
                }
              }
              else if (v208)
              {
                goto LABEL_201;
              }
            }
            else
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v79 = &status;
                else
                  v79 = (std::string *)status.__r_.__value_.__r.__words[0];
                LODWORD(v220.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v220.__r_.__value_.__r.__words + 4) = (std::string::size_type)v79;
              }
              if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v80 = &status;
              else
                v80 = (std::string *)status.__r_.__value_.__r.__words[0];
              v72 = v208;
              v214[0] = v207;
              v214[1] = (uint64_t *)v208;
              if (v208)
              {
                v81 = &v208->__shared_owners_;
                do
                  v82 = __ldxr((unint64_t *)v81);
                while (__stxr(v82 + 1, (unint64_t *)v81));
              }
              std::string::basic_string[abi:ne180100]<0>(&v220, ".");
              HydraAdapterModule::append_eos(v214, (uint64_t)&v220);
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v220.__r_.__value_.__l.__data_);
                if (v208)
                {
LABEL_155:
                  v92 = &v208->__shared_owners_;
                  do
                    v76 = __ldaxr((unint64_t *)v92);
                  while (__stlxr(v76 - 1, (unint64_t *)v92));
LABEL_203:
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
              }
              else if (v208)
              {
                goto LABEL_155;
              }
            }
LABEL_205:
            if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
              operator delete(status.__r_.__value_.__l.__data_);
            v69 = 1;
LABEL_208:
            v60 = v63 + v69;
            v59 = v63 + v69;
          }
          while (v61 > v59);
        }
        v5 = v202;
        if (v31)
          operator delete(v31);
LABEL_225:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_241;
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      LODWORD(v39) = v35 + 1;
      v42 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + v34);
      if ((v42 + 62) >= 0x33u || __str.__r_.__value_.__l.__size_ == (int)v39)
        goto LABEL_63;
      v40 = (int)v39;
    }
    else
    {
      LODWORD(v39) = v35 + 1;
      v40 = v35 + 1;
      p_str = &__str;
      v42 = __str.__r_.__value_.__s.__data_[v34];
      if ((v42 + 11) < 0xCDu || HIBYTE(__str.__r_.__value_.__r.__words[2]) == (uint64_t)(int)v39)
        goto LABEL_63;
    }
    v44 = p_str->__r_.__value_.__s.__data_[v40];
    if ((v42 & 0xF0) == 0xE0)
    {
      if (((a00000000000000[v42 & 0xF] >> (v44 >> 5)) & 1) != 0)
      {
        v39 = v35 + 2;
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (__str.__r_.__value_.__l.__size_ != v39)
          {
            v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
            goto LABEL_94;
          }
        }
        else if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != v39)
        {
          v45 = &__str;
LABEL_94:
          v56 = v45->__r_.__value_.__s.__data_[v39];
          v57 = v35 + 3;
LABEL_95:
          if (v56 < -64)
            LODWORD(v39) = v57;
        }
      }
    }
    else
    {
      if (v42 <= 0xDF)
      {
        if ((char)v44 < -64)
          LODWORD(v39) = v35 + 2;
        goto LABEL_63;
      }
      if (((byte_1DED166DF[v44 >> 4] >> (v42 & 7)) & 1) != 0)
      {
        v39 = v35 + 2;
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (__str.__r_.__value_.__l.__size_ == v39)
            goto LABEL_63;
          v47 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + v39) > -65)
            goto LABEL_63;
          LODWORD(v39) = v35 + 3;
          if (__str.__r_.__value_.__l.__size_ == v35 + 3)
            goto LABEL_63;
          v46 = (int)v39;
        }
        else
        {
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == v39)
            goto LABEL_63;
          if (__str.__r_.__value_.__s.__data_[v39] >= -64)
            goto LABEL_63;
          LODWORD(v39) = v35 + 3;
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == (uint64_t)(v35 + 3))
            goto LABEL_63;
          v46 = (int)v39;
          v47 = &__str;
        }
        v56 = v47->__r_.__value_.__s.__data_[v46];
        v57 = v35 + 4;
        goto LABEL_95;
      }
    }
LABEL_63:
    v38 = v39 - v35;
    goto LABEL_64;
  }
  v12 = v11 + 1;
  v13 = *(_QWORD *)v4 + 216 * v11;
  while (1)
  {
    if (v10 <= v11)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    if (!*(_BYTE *)(v13 + 24))
      break;
LABEL_17:
    v13 -= 216;
    if (v12-- <= 1)
      goto LABEL_19;
  }
  v14 = *(char *)(v13 + 23);
  v15 = *(unsigned __int8 *)(v13 + 23);
  v16 = v14 < 0;
  if ((v14 & 0x80000000) == 0)
  {
    v17 = (unsigned __int8 *)v13;
    if ((_DWORD)v15 != 1)
    {
      v16 = 0;
      goto LABEL_228;
    }
    goto LABEL_16;
  }
  if (*(_QWORD *)(v13 + 8) == 1)
  {
    v17 = *(unsigned __int8 **)v13;
LABEL_16:
    if (*v17 != 35)
      goto LABEL_228;
    goto LABEL_17;
  }
  v16 = 1;
LABEL_228:
  if (*(_BYTE *)(a1 + 347))
  {
    v115 = *(UTFRegex **)(a1 + 304);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    if (v16)
      v116 = *(const char **)v13;
    else
      v116 = (const char *)v13;
    if (v16)
      v117 = *(_QWORD *)(v13 + 8);
    else
      v117 = v15;
    v118 = utext_openUTF8(0, v116, v117, (UErrorCode *)&status);
    if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0)
      v119 = v118;
    else
      v119 = 0;
    UTFRegex::set_text(v115, v119, 1);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    if (!uregex_matches(*(URegularExpression **)v115, -1, (UErrorCode *)&status))
      goto LABEL_19;
  }
  else if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(**(_QWORD **)(a1 + 288), *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8), (unsigned __int8 **)v13) == *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8))
  {
    goto LABEL_19;
  }
LABEL_241:
  if (v5)
  {
    v120 = (unint64_t *)&v5->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v122 = (std::string::size_type)v211;
  if (*(_BYTE *)(a1 + 345))
  {
    v123 = *v211;
    v204 = v211[1];
    if (*v211 != v204)
    {
      while (2)
      {
        *((_DWORD *)v123 + 38) = 0;
        v124 = *(char *)(a1 + 343);
        v125 = *(unsigned __int8 *)(a1 + 343);
        if (v124 < 0)
          v126 = *(_QWORD *)(a1 + 328);
        else
          v126 = *(unsigned __int8 *)(a1 + 343);
        if (*(_BYTE *)(a1 + 344))
        {
          v127 = *(const void **)(a1 + 320);
          v128 = *(_QWORD *)(a1 + 328);
          if (v124 >= 0)
            v129 = *(unsigned __int8 *)(a1 + 343);
          else
            v129 = *(_QWORD *)(a1 + 328);
          if (*((char *)v123 + 23) < 0)
          {
            if (v129 == -1)
              goto LABEL_448;
            v131 = (const void *)*v123;
            if (v123[1] >= v126)
              v130 = v126;
            else
              v130 = v123[1];
          }
          else
          {
            if (v129 == -1)
              goto LABEL_448;
            if (*((unsigned __int8 *)v123 + 23) >= v126)
              v130 = v126;
            else
              v130 = *((unsigned __int8 *)v123 + 23);
            v131 = v123;
          }
          if (v124 >= 0)
            v134 = (const void *)(a1 + 320);
          else
            v134 = *(const void **)(a1 + 320);
          if (v130 >= v129)
            v135 = v129;
          else
            v135 = v130;
          if (!memcmp(v131, v134, v135) && v130 == v129)
          {
            std::string::erase((std::string *)v123, 0, v126);
            v125 = *(unsigned __int8 *)(a1 + 343);
            v127 = *(const void **)(a1 + 320);
            v128 = *(_QWORD *)(a1 + 328);
            LOBYTE(v124) = *(_BYTE *)(a1 + 343);
          }
          v137 = (std::string *)(v123 + 12);
          v138 = (char)v124;
          if ((v124 & 0x80u) == 0)
            v139 = v125;
          else
            v139 = v128;
          if (*((char *)v123 + 119) < 0)
          {
            if (v139 == -1)
              goto LABEL_448;
            v141 = (const void *)v123[12];
            if (v123[13] >= v126)
              v140 = v126;
            else
              v140 = v123[13];
          }
          else
          {
            if (v139 == -1)
              goto LABEL_448;
            if (*((unsigned __int8 *)v123 + 119) >= v126)
              v140 = v126;
            else
              v140 = *((unsigned __int8 *)v123 + 119);
            v141 = v123 + 12;
          }
          if (v138 >= 0)
            v142 = (const void *)(a1 + 320);
          else
            v142 = v127;
          if (v140 >= v139)
            v143 = v139;
          else
            v143 = v140;
          if (!memcmp(v141, v142, v143) && v140 == v139)
          {
            v144 = 0;
            goto LABEL_355;
          }
          goto LABEL_356;
        }
        if (*((char *)v123 + 23) < 0)
        {
          v132 = v123[1];
          if (v132 > v126)
          {
            if (v124 < 0)
              v125 = *(_QWORD *)(a1 + 328);
            if (v125 == -1)
LABEL_448:
              std::string::__throw_out_of_range[abi:ne180100]();
            v133 = (uint64_t *)*v123;
LABEL_310:
            v145 = v132 - v126;
            if (v124 >= 0)
              v146 = (const void *)(a1 + 320);
            else
              v146 = *(const void **)(a1 + 320);
            if (v126 >= v125)
              v147 = v125;
            else
              v147 = v126;
            if (!memcmp((char *)v133 + v145, v146, v147) && v126 == v125)
              std::string::erase((std::string *)v123, v145, v126);
          }
        }
        else
        {
          v132 = *((unsigned __int8 *)v123 + 23);
          if (v126 < v132)
          {
            if (v124 < 0)
              v125 = *(_QWORD *)(a1 + 328);
            if (v125 == -1)
              goto LABEL_448;
            v133 = v123;
            goto LABEL_310;
          }
        }
        v149 = *((unsigned __int8 *)v123 + 119);
        if (*((char *)v123 + 119) < 0)
          v150 = v123[13];
        else
          v150 = *((unsigned __int8 *)v123 + 119);
        v144 = v150 - v126;
        if (v150 > v126)
        {
          v137 = (std::string *)(v123 + 12);
          v151 = *(char *)(a1 + 343);
          v152 = v151 >= 0 ? *(unsigned __int8 *)(a1 + 343) : *(_QWORD *)(a1 + 328);
          if ((v149 & 0x80) != 0)
          {
            if (v152 == -1)
              goto LABEL_448;
            v157 = v123[13];
            v153 = v157 >= v144;
            v158 = v157 - v144;
            if (!v153)
              goto LABEL_448;
            v155 = v158 >= v126 ? v126 : v158;
            v156 = v137->__r_.__value_.__r.__words[0];
          }
          else
          {
            v153 = v149 >= v144;
            v154 = v149 - v144;
            if (!v153 || v152 == -1)
              goto LABEL_448;
            v155 = v154 >= v126 ? v126 : v154;
            v156 = (std::string::size_type)(v123 + 12);
          }
          v159 = v151 >= 0 ? (const void *)(a1 + 320) : *(const void **)(a1 + 320);
          v160 = v155 >= v152 ? v152 : v155;
          if (!memcmp((const void *)(v156 + v144), v159, v160) && v155 == v152)
LABEL_355:
            std::string::erase(v137, v144, v126);
        }
LABEL_356:
        v123 += 27;
        if (v123 == v204)
        {
          v122 = (std::string::size_type)v211;
          break;
        }
        continue;
      }
    }
  }
  memset(&__str, 0, sizeof(__str));
  FrontendFeatureLogModuleInternal::phoneme_by_words_hydra((FrontendFeatureLogModuleInternal *)&v220, *(const FrontendFeature **)v122, *(_QWORD *)(v122 + 8));
  v163 = v220.__r_.__value_.__l.__size_;
  for (i = (__int128 **)v220.__r_.__value_.__r.__words[0]; i != (__int128 **)v163; i += 3)
  {
    memset(&status, 0, sizeof(status));
    v164 = *i;
    v165 = i[1];
    while (v164 != v165)
    {
      v166 = HIBYTE(status.__r_.__value_.__r.__words[2]);
      if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v166 = status.__r_.__value_.__l.__size_;
      if (v166)
      {
        std::operator+<char>();
      }
      else if (*((char *)v164 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v164, *((_QWORD *)v164 + 1));
      }
      else
      {
        v167 = *v164;
        buf.__r_.__value_.__r.__words[2] = *((_QWORD *)v164 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v167;
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v169 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v169 = buf.__r_.__value_.__l.__size_;
      std::string::append(&status, (const std::string::value_type *)p_buf, v169);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v164 = (__int128 *)((char *)v164 + 24);
    }
    v170 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v170 = __str.__r_.__value_.__l.__size_;
    if (v170)
    {
      std::operator+<char>();
    }
    else if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, status.__r_.__value_.__l.__data_, status.__r_.__value_.__l.__size_);
    }
    else
    {
      buf = status;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &buf;
    else
      v171 = (std::string *)buf.__r_.__value_.__r.__words[0];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    else
      v172 = buf.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v171, v172);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
      operator delete(status.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v173 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&status, (uint64_t)&__str);
    v174 = (status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &status
         : (std::string *)status.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v174;
    _os_log_impl(&dword_1DE3F6000, v173, OS_LOG_TYPE_DEFAULT, "Hydra Adapter: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
      operator delete(status.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&status, (uint64_t)&__str);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v176 = &status;
  else
    v176 = (std::string *)status.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Hydra Adapter: %s", v175, v176);
  if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
    operator delete(status.__r_.__value_.__l.__data_);
  v177 = *a2;
  status.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v179 = v178[5];
  if (v179)
  {
    status.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923288;
    status.__r_.__value_.__l.__size_ = v122;
    status.__r_.__value_.__r.__words[2] = v212;
    if (v212)
    {
      v180 = (unint64_t *)(v212 + 8);
      do
        v181 = __ldxr(v180);
      while (__stxr(v181 + 1, v180));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v179 + 8, (__int128 *)&status.__r_.__value_.__r.__words[1]);
    status.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923288;
    v182 = (std::__shared_weak_count *)status.__r_.__value_.__r.__words[2];
    if (status.__r_.__value_.__r.__words[2])
    {
      v183 = (unint64_t *)(status.__r_.__value_.__r.__words[2] + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
  }
  else
  {
    v185 = (_QWORD *)operator new();
    *v185 = &off_1EA923288;
    v185[1] = v122;
    v186 = v212;
    v185[2] = v212;
    if (v186)
    {
      v187 = (unint64_t *)(v186 + 8);
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    v189 = v178[5];
    v178[5] = (uint64_t)v185;
    if (v189)
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  }
  v190 = a2[1];
  v205 = *a2;
  v206 = (std::__shared_weak_count *)v190;
  if (v190)
  {
    v191 = (unint64_t *)(v190 + 8);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v205);
  v193 = v206;
  if (v206)
  {
    v194 = (unint64_t *)&v206->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  status.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&status);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v196 = v210;
  if (v210)
  {
    v197 = (unint64_t *)&v210->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = (std::__shared_weak_count *)v212;
  if (v212)
  {
    v200 = (unint64_t *)(v212 + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
}

void sub_1DE95F488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 169) < 0)
    operator delete(*(void **)(v40 - 192));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v40 - 128);
  if (a40 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get<TrackSubstitutions>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  void **v24;
  __int128 v25;
  void *v26;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    goto LABEL_20;
  }
  v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933B68;
  v6[1].__shared_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1].__shared_owners_;
  v6[1].__shared_weak_owners_ = 0;
  v6[2].__vftable = 0;
  v6[2].__shared_owners_ = 0;
  v6[2].__shared_weak_owners_ = 0;
  v23 = v6;
  v24 = &v26;
  v9 = v8[5];
  if (!v9)
  {
    v14 = (_QWORD *)operator new();
    *v14 = &off_1EA9233C8;
    v14[1] = v6 + 1;
    v14[2] = v6;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = v8[5];
    v8[5] = (uint64_t)v14;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_16;
  }
  v24 = (void **)&off_1EA9233C8;
  *(_QWORD *)&v25 = v6 + 1;
  *((_QWORD *)&v25 + 1) = v6;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 8, &v25);
  v24 = (void **)&off_1EA9233C8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v6 = v23;
  if (v23)
  {
LABEL_16:
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_20:
  v20 = *(_QWORD *)(*(_QWORD *)v19 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v19 + 8);
  a1[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE95F848(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void HydraAdapterModule::append_eos(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  std::string::size_type v11;
  __int128 v12;
  __int128 v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  std::string *v20;
  std::string *v21;
  std::string::size_type size;
  uint64_t *v23;
  uint64_t v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p;
  char v37;
  std::string v38;
  uint64_t v39;
  __int128 v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void **v48;

  v2 = *a1;
  v3 = 1749801491 * ((unint64_t)((*a1)[1] - **a1) >> 3) - 1;
  if ((v3 & 0x80000000) != 0)
  {
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&v38, " ");
    std::string::append(&v38, "#");
    std::operator+<char>();
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v32;
    else
      v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      size = v32.__r_.__value_.__l.__size_;
    std::string::append(&v38, (const std::string::value_type *)v21, size);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v23 = *a1;
    v24 = (*a1)[4];
    if ((*a1)[3] != v24)
    {
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v38;
      else
        v25 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        v26 = v38.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v24 - 120), (const std::string::value_type *)v25, v26);
      v27 = *(char *)(a2 + 23);
      if (v27 >= 0)
        v28 = (const std::string::value_type *)a2;
      else
        v28 = *(const std::string::value_type **)a2;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(a2 + 23);
      else
        v29 = *(_QWORD *)(a2 + 8);
      std::string::append((std::string *)(v23[4] - 96), v28, v29);
      *(_DWORD *)(v23[4] - 132) += 2;
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  else
  {
    while (1)
    {
      v4 = *v2;
      if (0x84BDA12F684BDA13 * ((v2[1] - *v2) >> 3) <= v3)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v5 = v3;
      v6 = v4 + 216 * v3;
      v7 = *(_QWORD *)(v6 + 72);
      v8 = *(_QWORD *)(v6 + 80);
      if (v7 != v8)
      {
        v9 = (__int128 *)(v7 + 8);
        do
        {
          v10 = (uint64_t)v9 - 8;
          v11 = *((_QWORD *)v9 - 1);
          v38.__r_.__value_.__r.__words[0] = v11;
          if (*((char *)v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v38.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
            LODWORD(v11) = v38.__r_.__value_.__l.__data_;
          }
          else
          {
            v12 = *v9;
            v39 = *((_QWORD *)v9 + 2);
            *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = v12;
          }
          v13 = *(__int128 *)((char *)v9 + 24);
          v41 = *((_WORD *)v9 + 20);
          v40 = v13;
          if (SHIBYTE(v39) < 0)
            operator delete((void *)v38.__r_.__value_.__l.__size_);
          if ((_DWORD)v11 == 9)
            break;
          v9 = (__int128 *)((char *)v9 + 56);
        }
        while (v10 + 56 != v8);
        if ((_DWORD)v11 == 9)
          break;
      }
      if (!*(_BYTE *)(v4 + 216 * v5 + 24))
      {
        v14 = *(char *)(v6 + 23);
        if (v14 < 0)
        {
          if (*(_QWORD *)(v6 + 8) != 1)
            goto LABEL_22;
          v15 = *(_BYTE **)v6;
        }
        else
        {
          v15 = (_BYTE *)v6;
          if (v14 != 1)
            goto LABEL_22;
        }
        if (*v15 != 35)
        {
LABEL_22:
          PhoneFeature::PhoneFeature(&v38, (const PhoneFeature *)v6);
          MEMORY[0x1DF0ECA80](&v38, "#");
          MEMORY[0x1DF0ECA80](&v44, "#");
          v16 = v42;
          for (i = v43; i != v16; i -= 56)
          {
            if (*(char *)(i - 25) < 0)
              operator delete(*(void **)(i - 48));
          }
          v43 = v16;
          PhoneFeature::PhoneFeature(&v32, (const PhoneFeature *)v6);
          std::string::operator=(&v32, (const std::string *)a2);
          std::string::operator=(&v35, (const std::string *)a2);
          v18 = v33;
          for (j = v34; j != v18; j -= 56)
          {
            if (*(char *)(j - 25) < 0)
              operator delete(*(void **)(j - 48));
          }
          v34 = v18;
          v20 = std::vector<PhoneFeature>::insert(v2, (std::string *)(*v2 + 216 * v5 + 216), &v38);
          std::vector<PhoneFeature>::insert(v2, v20 + 9, &v32);
          if (v37 < 0)
            operator delete(__p);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          v48 = (void **)&v33;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v48);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (v47 < 0)
            operator delete(v46);
          if (v45 < 0)
            operator delete(v44);
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
          goto LABEL_44;
        }
      }
      v3 = v5 - 1;
      if (v5 <= 0)
        goto LABEL_44;
    }
  }
}

void sub_1DE95FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  PhoneFeature::~PhoneFeature(&__p);
  PhoneFeature::~PhoneFeature(&a41);
  _Unwind_Resume(a1);
}

void PhoneFeature::PhoneFeature(std::string *this, const PhoneFeature *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(_OWORD *)((char *)a2 + 24);
  v6 = *(_OWORD *)((char *)a2 + 40);
  v7 = *(_OWORD *)((char *)a2 + 52);
  this[3].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)((char *)this[2].__r_.__value_.__r.__words + 4) = v7;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(this[3].__r_.__value_.__r.__words, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  v9 = this + 5;
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *((_OWORD *)a2 + 9);
  v11 = *((_OWORD *)a2 + 10);
  v12 = *((_OWORD *)a2 + 11);
  v13 = *((_OWORD *)a2 + 12);
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 52);
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v12;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v13;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v11;
}

void sub_1DE95FE34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 119) < 0)
    operator delete(*v3);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::string *std::vector<PhoneFeature>::insert(uint64_t *a1, std::string *this, std::string *a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  std::string *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v43;
  std::string *v44[2];
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  uint64_t *v48;

  v4 = this;
  v7 = *a1;
  v6 = (std::string *)a1[1];
  v8 = (uint64_t)this - *a1;
  v9 = 0x84BDA12F684BDA13 * (v8 >> 3);
  v11 = a1 + 2;
  v10 = a1[2];
  if ((unint64_t)v6 >= v10)
  {
    v19 = 0x84BDA12F684BDA13 * (((uint64_t)v6 - v7) >> 3) + 1;
    if (v19 > 0x12F684BDA12F684)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = 0x84BDA12F684BDA13 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x97B425ED097B42)
      v21 = 0x12F684BDA12F684;
    else
      v21 = v19;
    v45 = v11;
    if (v21)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v21);
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
    v24 = (std::string *)&v23[8 * (v8 >> 3)];
    *(_QWORD *)&v43 = v23;
    *((_QWORD *)&v43 + 1) = v24;
    v44[0] = v24;
    v44[1] = (std::string *)&v23[216 * v22];
    if (v9 == v22)
    {
      if (v8 < 1)
      {
        if ((std::string *)v7 == v4)
          v26 = 1;
        else
          v26 = 0x97B425ED097B426 * (v8 >> 3);
        v48 = v11;
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v26);
        v28 = &v27[216 * (v26 >> 2)];
        *(_QWORD *)&v46 = v27;
        *((_QWORD *)&v46 + 1) = v28;
        *((_QWORD *)&v47 + 1) = &v27[216 * v29];
        v30 = (__int128 *)*((_QWORD *)&v43 + 1);
        if (v44[0] != *((std::string **)&v43 + 1))
        {
          v31 = &v28[(unint64_t)v44[0] - *((_QWORD *)&v43 + 1)];
          do
          {
            v32 = *v30;
            *((_QWORD *)v28 + 2) = *((_QWORD *)v30 + 2);
            *(_OWORD *)v28 = v32;
            *((_QWORD *)v30 + 1) = 0;
            *((_QWORD *)v30 + 2) = 0;
            *(_QWORD *)v30 = 0;
            v33 = *(__int128 *)((char *)v30 + 24);
            v34 = *(__int128 *)((char *)v30 + 40);
            *(_OWORD *)(v28 + 52) = *(__int128 *)((char *)v30 + 52);
            *(_OWORD *)(v28 + 40) = v34;
            *(_OWORD *)(v28 + 24) = v33;
            *((_QWORD *)v28 + 10) = 0;
            *((_QWORD *)v28 + 11) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 72) = *(__int128 *)((char *)v30 + 72);
            *((_QWORD *)v28 + 11) = *((_QWORD *)v30 + 11);
            *((_QWORD *)v30 + 9) = 0;
            *((_QWORD *)v30 + 10) = 0;
            *((_QWORD *)v30 + 11) = 0;
            v35 = v30[6];
            *((_QWORD *)v28 + 14) = *((_QWORD *)v30 + 14);
            *((_OWORD *)v28 + 6) = v35;
            *((_QWORD *)v30 + 13) = 0;
            *((_QWORD *)v30 + 14) = 0;
            *((_QWORD *)v30 + 12) = 0;
            v36 = *(__int128 *)((char *)v30 + 120);
            *((_QWORD *)v28 + 17) = *((_QWORD *)v30 + 17);
            *(_OWORD *)(v28 + 120) = v36;
            *((_QWORD *)v30 + 16) = 0;
            *((_QWORD *)v30 + 17) = 0;
            *((_QWORD *)v30 + 15) = 0;
            *((_OWORD *)v28 + 9) = v30[9];
            v38 = v30[11];
            v37 = v30[12];
            v39 = v30[10];
            *((_DWORD *)v28 + 52) = *((_DWORD *)v30 + 52);
            *((_OWORD *)v28 + 11) = v38;
            *((_OWORD *)v28 + 12) = v37;
            *((_OWORD *)v28 + 10) = v39;
            v28 += 216;
            v30 = (__int128 *)((char *)v30 + 216);
          }
          while (v28 != v31);
          v28 = v31;
        }
        *(_QWORD *)&v47 = v28;
        v40 = v43;
        v41 = *(_OWORD *)v44;
        v43 = v46;
        *(_OWORD *)v44 = v47;
        v46 = v40;
        v47 = v41;
        std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v46);
        v24 = v44[0];
      }
      else
      {
        v25 = v9 + 2;
        if (v9 >= -1)
          v25 = v9 + 1;
        v24 -= 9 * (v25 >> 1);
        *((_QWORD *)&v43 + 1) = v24;
        v44[0] = v24;
      }
    }
    PhoneFeature::PhoneFeature(v24, (const PhoneFeature *)a3);
    v44[0] += 9;
    v4 = (std::string *)std::vector<PhoneFeature>::__swap_out_circular_buffer(a1, &v43, (uint64_t)v4);
    std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v43);
  }
  else if (this == v6)
  {
    PhoneFeature::PhoneFeature(this, (const PhoneFeature *)a3);
    a1[1] = (uint64_t)&v4[9];
  }
  else
  {
    std::vector<PhoneFeature>::__move_range((uint64_t)a1, (uint64_t)this, (unint64_t)v6, (uint64_t)&this[9]);
    if (v4 <= a3)
      a3 += 9 * (a1[1] > (unint64_t)a3);
    std::string::operator=(v4, a3);
    v12 = v7 + 8 * (v8 >> 3);
    v13 = *(_OWORD *)((char *)a3[2].__r_.__value_.__r.__words + 4);
    v14 = *(_OWORD *)&a3[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v12 + 24) = *(_OWORD *)&a3[1].__r_.__value_.__l.__data_;
    *(_OWORD *)(v12 + 40) = v14;
    *(_OWORD *)(v12 + 52) = v13;
    if (v4 != a3)
      std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(v7 + 8 * (v8 >> 3) + 72), (uint64_t)a3[3].__r_.__value_.__l.__data_, a3[3].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3[3].__r_.__value_.__l.__size_ - a3[3].__r_.__value_.__r.__words[0]) >> 3));
    v15 = v7 + 8 * (v8 >> 3);
    std::string::operator=((std::string *)(v15 + 96), a3 + 4);
    std::string::operator=((std::string *)(v15 + 120), a3 + 5);
    *(_OWORD *)(v15 + 144) = *(_OWORD *)&a3[6].__r_.__value_.__l.__data_;
    v17 = *(_OWORD *)&a3[7].__r_.__value_.__r.__words[1];
    v16 = *(_OWORD *)&a3[8].__r_.__value_.__l.__data_;
    v18 = *(_OWORD *)&a3[6].__r_.__value_.__r.__words[2];
    *(_DWORD *)(v15 + 208) = a3[8].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v15 + 176) = v17;
    *(_OWORD *)(v15 + 192) = v16;
    *(_OWORD *)(v15 + 160) = v18;
  }
  return v4;
}

void sub_1DE9601FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

void PhoneFeature::~PhoneFeature(void **this)
{
  void **v2;

  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this + 9;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

__n128 std::vector<PhoneFeature>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void **v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = (__int128 *)(a2 + v4 - a4);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *v6;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v7 = v8;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      v9 = *(__int128 *)((char *)v6 + 24);
      v10 = *(__int128 *)((char *)v6 + 40);
      *(_OWORD *)(v7 + 52) = *(__int128 *)((char *)v6 + 52);
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      *(_OWORD *)(v7 + 72) = *(__int128 *)((char *)v6 + 72);
      *(_QWORD *)(v7 + 88) = *((_QWORD *)v6 + 11);
      *((_QWORD *)v6 + 9) = 0;
      *((_QWORD *)v6 + 10) = 0;
      *((_QWORD *)v6 + 11) = 0;
      v11 = v6[6];
      *(_QWORD *)(v7 + 112) = *((_QWORD *)v6 + 14);
      *(_OWORD *)(v7 + 96) = v11;
      *((_QWORD *)v6 + 13) = 0;
      *((_QWORD *)v6 + 14) = 0;
      *((_QWORD *)v6 + 12) = 0;
      v12 = *(__int128 *)((char *)v6 + 120);
      *(_QWORD *)(v7 + 136) = *((_QWORD *)v6 + 17);
      *(_OWORD *)(v7 + 120) = v12;
      *((_QWORD *)v6 + 16) = 0;
      *((_QWORD *)v6 + 17) = 0;
      *((_QWORD *)v6 + 15) = 0;
      *(_OWORD *)(v7 + 144) = v6[9];
      v14 = v6[11];
      result = (__n128)v6[12];
      v15 = v6[10];
      *(_DWORD *)(v7 + 208) = *((_DWORD *)v6 + 52);
      *(_OWORD *)(v7 + 176) = v14;
      *(__n128 *)(v7 + 192) = result;
      *(_OWORD *)(v7 + 160) = v15;
      v7 += 216;
      v6 = (__int128 *)((char *)v6 + 216);
    }
    while ((unint64_t)v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v16 = 0;
    v17 = -8 * ((v4 - a4) >> 3);
    do
    {
      v18 = v4 + v16;
      v19 = (void **)(v4 + v16 - 216);
      if (*(char *)(v4 + v16 - 193) < 0)
        operator delete(*v19);
      v20 = v5 + v16;
      v21 = (__int128 *)(v5 + v16 - 216);
      v22 = *v21;
      *(_QWORD *)(v4 + v16 - 200) = *(_QWORD *)(v5 + v16 - 200);
      *(_OWORD *)v19 = v22;
      *(_BYTE *)(v5 + v16 - 193) = 0;
      *(_BYTE *)v21 = 0;
      v23 = *(_OWORD *)(v5 + v16 - 192);
      v24 = *(_OWORD *)(v5 + v16 - 176);
      *(_OWORD *)(v18 - 164) = *(_OWORD *)(v5 + v16 - 164);
      *(_OWORD *)(v18 - 192) = v23;
      *(_OWORD *)(v18 - 176) = v24;
      std::vector<MarkerRecord>::__vdeallocate((uint64_t *)(v18 - 144));
      *(_OWORD *)(v18 - 144) = *(_OWORD *)(v5 + v16 - 144);
      *(_QWORD *)(v18 - 128) = *(_QWORD *)(v5 + v16 - 128);
      *(_QWORD *)(v20 - 144) = 0;
      *(_QWORD *)(v20 - 136) = 0;
      *(_QWORD *)(v20 - 128) = 0;
      v25 = v18 - 120;
      if (*(char *)(v18 - 97) < 0)
        operator delete(*(void **)v25);
      v26 = v5 + v16;
      v27 = *(_OWORD *)(v20 - 120);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v20 - 104);
      *(_OWORD *)v25 = v27;
      *(_BYTE *)(v5 + v16 - 97) = 0;
      *(_BYTE *)(v20 - 120) = 0;
      v28 = v4 + v16;
      v29 = (void **)(v4 + v16 - 96);
      if (*(char *)(v4 + v16 - 73) < 0)
        operator delete(*v29);
      v30 = *(_OWORD *)(v26 - 96);
      *(_QWORD *)(v4 + v16 - 80) = *(_QWORD *)(v26 - 80);
      *(_OWORD *)v29 = v30;
      *(_BYTE *)(v26 - 73) = 0;
      *(_BYTE *)(v26 - 96) = 0;
      *(_OWORD *)(v28 - 72) = *(_OWORD *)(v26 - 72);
      result = *(__n128 *)(v26 - 56);
      v31 = *(_OWORD *)(v26 - 40);
      v32 = *(_OWORD *)(v26 - 24);
      *(_DWORD *)(v28 - 8) = *(_DWORD *)(v26 - 8);
      *(_OWORD *)(v28 - 24) = v32;
      *(_OWORD *)(v28 - 40) = v31;
      *(__n128 *)(v28 - 56) = result;
      v16 -= 216;
    }
    while (v17 != v16);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a1);
}

uint64_t std::vector<PhoneFeature>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a3;
  v6 = a2[1];
  v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhoneFeature>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v7;
  v8 = a1[1];
  v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      v10 = *(_OWORD *)v3;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v11 = *(_OWORD *)(v3 + 24);
      v12 = *(_OWORD *)(v3 + 40);
      *(_OWORD *)(v9 + 52) = *(_OWORD *)(v3 + 52);
      *(_OWORD *)(v9 + 40) = v12;
      *(_OWORD *)(v9 + 24) = v11;
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v9 + 72) = 0;
      *(_OWORD *)(v9 + 72) = *(_OWORD *)(v3 + 72);
      *(_QWORD *)(v9 + 88) = *(_QWORD *)(v3 + 88);
      *(_QWORD *)(v3 + 72) = 0;
      *(_QWORD *)(v3 + 80) = 0;
      *(_QWORD *)(v3 + 88) = 0;
      v13 = *(_OWORD *)(v3 + 96);
      *(_QWORD *)(v9 + 112) = *(_QWORD *)(v3 + 112);
      *(_OWORD *)(v9 + 96) = v13;
      *(_QWORD *)(v3 + 104) = 0;
      *(_QWORD *)(v3 + 112) = 0;
      *(_QWORD *)(v3 + 96) = 0;
      v14 = *(_OWORD *)(v3 + 120);
      *(_QWORD *)(v9 + 136) = *(_QWORD *)(v3 + 136);
      *(_OWORD *)(v9 + 120) = v14;
      *(_QWORD *)(v3 + 128) = 0;
      *(_QWORD *)(v3 + 136) = 0;
      *(_QWORD *)(v3 + 120) = 0;
      *(_OWORD *)(v9 + 144) = *(_OWORD *)(v3 + 144);
      v16 = *(_OWORD *)(v3 + 176);
      v15 = *(_OWORD *)(v3 + 192);
      v17 = *(_OWORD *)(v3 + 160);
      *(_DWORD *)(v9 + 208) = *(_DWORD *)(v3 + 208);
      *(_OWORD *)(v9 + 176) = v16;
      *(_OWORD *)(v9 + 192) = v15;
      *(_OWORD *)(v9 + 160) = v17;
      v9 += 216;
      v3 += 216;
    }
    while (v3 != v8);
    v7 = a2[1];
  }
  a2[2] = v9;
  v18 = *a1;
  *a1 = v7;
  a2[1] = v18;
  v19 = a1[1];
  a1[1] = a2[2];
  a2[2] = v19;
  v20 = a1[2];
  a1[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__split_buffer<PhoneFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    std::allocator<PhoneFeature>::destroy[abi:ne180100](i - 216);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhoneFeature>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  for (result = a7; a3 != a5; a3 -= 216)
  {
    v8 = *(_OWORD *)(a3 - 216);
    *(_QWORD *)(result - 200) = *(_QWORD *)(a3 - 200);
    *(_OWORD *)(result - 216) = v8;
    *(_QWORD *)(a3 - 208) = 0;
    *(_QWORD *)(a3 - 200) = 0;
    *(_QWORD *)(a3 - 216) = 0;
    v9 = *(_OWORD *)(a3 - 192);
    v10 = *(_OWORD *)(a3 - 176);
    *(_OWORD *)(result - 164) = *(_OWORD *)(a3 - 164);
    *(_OWORD *)(result - 192) = v9;
    *(_OWORD *)(result - 176) = v10;
    *(_QWORD *)(result - 136) = 0;
    *(_QWORD *)(result - 128) = 0;
    *(_QWORD *)(result - 144) = 0;
    *(_OWORD *)(result - 144) = *(_OWORD *)(a3 - 144);
    *(_QWORD *)(result - 128) = *(_QWORD *)(a3 - 128);
    *(_QWORD *)(a3 - 144) = 0;
    *(_QWORD *)(a3 - 136) = 0;
    *(_QWORD *)(a3 - 128) = 0;
    v11 = *(_OWORD *)(a3 - 120);
    *(_QWORD *)(result - 104) = *(_QWORD *)(a3 - 104);
    *(_OWORD *)(result - 120) = v11;
    *(_QWORD *)(a3 - 112) = 0;
    *(_QWORD *)(a3 - 104) = 0;
    *(_QWORD *)(a3 - 120) = 0;
    v12 = *(_OWORD *)(a3 - 96);
    *(_QWORD *)(result - 80) = *(_QWORD *)(a3 - 80);
    *(_OWORD *)(result - 96) = v12;
    *(_QWORD *)(a3 - 88) = 0;
    *(_QWORD *)(a3 - 80) = 0;
    *(_QWORD *)(a3 - 96) = 0;
    *(_OWORD *)(result - 72) = *(_OWORD *)(a3 - 72);
    v13 = *(_OWORD *)(a3 - 40);
    v14 = *(_OWORD *)(a3 - 24);
    v15 = *(_DWORD *)(a3 - 8);
    *(_OWORD *)(result - 56) = *(_OWORD *)(a3 - 56);
    *(_DWORD *)(result - 8) = v15;
    *(_OWORD *)(result - 24) = v14;
    *(_OWORD *)(result - 40) = v13;
    result -= 216;
  }
  return result;
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<TrackSubstitutions>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9233C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<TrackSubstitutions>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9233C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA936B88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DE960864(_Unwind_Exception *exception_object)
{
  UTFRegex *v1;

  if (v1)
  {
    UTFRegex::~UTFRegex(v1);
    MEMORY[0x1DF0ED014]();
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(std::string *a1, unsigned __int8 *a2, const void **a3, __int128 **a4)
{
  int v7;
  unsigned __int8 *v8;
  nlohmann::detail::exception *exception;
  unint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v20;

  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = *a2;
    if (v10 > 9)
      v11 = "number";
    else
      v11 = off_1EA94C758[v10];
    std::string::basic_string[abi:ne180100]<0>(&v14, v11);
    v12 = std::string::insert(&v14, 0, "cannot use value() with ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18 = v12->__r_.__value_.__r.__words[2];
    v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v17, exception);
  }
  *(_QWORD *)&v17 = a2;
  v18 = 0;
  v19 = 0;
  v20 = 0x8000000000000000;
  *((_QWORD *)&v17 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a2 + 1), a3);
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v14.__r_.__value_.__r.__words[2] = 0;
  v15 = 0;
  v16 = 0x8000000000000000;
  v7 = *a2;
  if (v7 == 2)
  {
    v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v14.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v16 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v17, (unsigned __int8 **)&v14))
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  }
  else
  {
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)a1, v8);
  }
}

void sub_1DE960A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(std::vector<std::string> *a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  std::vector<std::string>::pointer end;
  unsigned __int8 *v8;
  __int128 v9;
  std::vector<std::string>::pointer begin;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  int64_t v15;
  std::__split_buffer<std::string>::pointer v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::__split_buffer<std::string>::pointer v21;
  int64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  int64x2_t v28;
  std::string *first;
  std::string *value;
  __int128 v31;
  std::vector<std::string>::pointer v32;
  nlohmann::detail::exception *exception;
  unint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  std::vector<std::string> v48;
  std::string __p;
  std::__split_buffer<std::string> __v;
  std::__split_buffer<std::string> v51;

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  if (*a2 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v34 = *a2;
    if (v34 > 9)
      v35 = "number";
    else
      v35 = off_1EA94C758[v34];
    std::string::basic_string[abi:ne180100]<0>(&__v, v35);
    v36 = std::string::insert((std::string *)&__v, 0, "type must be array, but is ");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v51.__end_ = (std::__split_buffer<std::string>::pointer)v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__first_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v51, exception);
  }
  memset(&v48, 0, sizeof(v48));
  std::vector<std::string>::reserve(&v48, (uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 4);
  v43 = a2;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0x8000000000000000;
  v4 = *a2;
  if (!*a2)
  {
    v47 = 1;
LABEL_9:
    v38 = a2;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 1;
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 1);
    v45 = *v6;
    v38 = a2;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0x8000000000000000;
    v40 = v6[1];
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    v47 = 0;
    goto LABEL_9;
  }
  v5 = (uint64_t *)*((_QWORD *)a2 + 1);
  v44 = *v5;
  v40 = 0;
  v41 = 0;
  v42 = 0x8000000000000000;
  v38 = a2;
  v39 = v5 + 1;
LABEL_10:
  end = v48.__end_;
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v43, &v38))
  {
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(&v43);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v8, &__p);
    if (v48.__end_ >= v48.__end_cap_.__value_)
    {
      begin = v48.__begin_;
      v11 = 1 - 0x5555555555555555 * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) > v11)
        v11 = 0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v11;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v48.__end_cap_;
      if (v12)
        v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v48.__end_cap_, v12);
      else
        v13 = 0;
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      v16 = (std::string *)((char *)v13 + 8 * (((char *)end - (char *)begin) >> 3));
      __v.__first_ = v13;
      __v.__begin_ = v16;
      __v.__end_ = v16;
      __v.__end_cap_.__value_ = &v13[v12];
      if (v15 == v12)
      {
        if ((char *)end - (char *)begin < 1)
        {
          if (end == begin)
            v18 = 1;
          else
            v18 = 0x5555555555555556 * (((char *)end - (char *)begin) >> 3);
          v51.__end_cap_.__value_ = __v.__end_cap_.__value_;
          v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)__v.__end_cap_.__value_, v18);
          v21 = __v.__begin_;
          v22 = (char *)__v.__end_ - (char *)__v.__begin_;
          if (__v.__end_ == __v.__begin_)
          {
            v28 = vdupq_n_s64((unint64_t)__v.__begin_);
            v24 = &v19[v18 >> 2];
          }
          else
          {
            v23 = v22 / 24;
            v24 = &v19[(v18 >> 2) + v22 / 24];
            v25 = 24 * v23;
            v26 = &v19[v18 >> 2];
            do
            {
              v27 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
              v26->__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
              ++v26;
              v21->__r_.__value_.__l.__size_ = 0;
              v21->__r_.__value_.__r.__words[2] = 0;
              v21->__r_.__value_.__r.__words[0] = 0;
              ++v21;
              v25 -= 24;
            }
            while (v25);
            v28 = *(int64x2_t *)&__v.__begin_;
          }
          first = __v.__first_;
          value = __v.__end_cap_.__value_;
          __v.__first_ = v19;
          __v.__begin_ = &v19[v18 >> 2];
          *(int64x2_t *)&v51.__begin_ = v28;
          __v.__end_ = v24;
          __v.__end_cap_.__value_ = &v19[v20];
          v51.__first_ = first;
          v51.__end_cap_.__value_ = value;
          std::__split_buffer<std::string>::~__split_buffer(&v51);
          v16 = __v.__end_;
        }
        else
        {
          if (v15 >= -1)
            v17 = v15 + 1;
          else
            v17 = v15 + 2;
          v16 -= v17 >> 1;
          __v.__begin_ = v16;
          __v.__end_ = v16;
        }
      }
      v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v16->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v31;
      memset(&__p, 0, sizeof(__p));
      ++__v.__end_;
      v32 = std::vector<std::string>::__swap_out_circular_buffer(&v48, &__v, end);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      end = v32 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else if (end == v48.__end_)
    {
      v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v14;
      ++end;
      memset(&__p, 0, sizeof(__p));
      v48.__end_ = end;
    }
    else
    {
      std::vector<std::string>::__move_range(&v48, end, v48.__end_, end + 1);
      if (SHIBYTE(end->__r_.__value_.__r.__words[2]) < 0)
        operator delete(end->__r_.__value_.__l.__data_);
      v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
      ++end;
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v43);
  }
  std::vector<std::string>::__vdeallocate(a1);
  *a1 = v48;
  memset(&v48, 0, sizeof(v48));
  v51.__first_ = (std::__split_buffer<std::string>::pointer)&v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_1DE960F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__split_buffer<std::string> *a21,void **a22,uint64_t a23,uint64_t a24,void *__pa,uint64_t a26,uint64_t a27,void ***a28)
{
  a28 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1DE961054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1DE961110(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

UTFRegex *std::unique_ptr<UTFRegex>::reset[abi:ne180100](UTFRegex **a1, UTFRegex *a2)
{
  UTFRegex *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    UTFRegex::~UTFRegex(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

void std::__shared_ptr_pointer<UTFRegex *,std::shared_ptr<UTFRegex>::__shared_ptr_default_delete<UTFRegex,UTFRegex>,std::allocator<UTFRegex>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

UTFRegex *std::__shared_ptr_pointer<UTFRegex *,std::shared_ptr<UTFRegex>::__shared_ptr_default_delete<UTFRegex,UTFRegex>,std::allocator<UTFRegex>>::__on_zero_shared(uint64_t a1)
{
  UTFRegex *result;

  result = *(UTFRegex **)(a1 + 24);
  if (result)
  {
    UTFRegex::~UTFRegex(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<UTFRegex *,std::shared_ptr<UTFRegex>::__shared_ptr_default_delete<UTFRegex,UTFRegex>,std::allocator<UTFRegex>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void HydraAdapterPersistentModule::~HydraAdapterPersistentModule(void **this)
{
  *this = &off_1EA9216F0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA9216F0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void VoiceConfig::get_param<std::string>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(&v6, a2, a3, a4);
  if ((_BYTE)v6)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)&v6, a1);
    v5 = v6;
  }
  else
  {
    v5 = 0;
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v5);
}

void sub_1DE961364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

_BYTE *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int64x2_t *a1, _BYTE *__dst, _BYTE *__src, _BYTE *a4)
{
  _BYTE *v6;
  uint64_t v8;
  BOOL v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *i;
  void *v32;
  int64x2_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  size_t v53;
  void *v55;
  int64x2_t v56;
  int64x2_t v57;
  __int8 *v58;

  v6 = __dst;
  v8 = a1[2].i64[1];
  if (v8)
    v9 = __dst == __src;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      *v6++ = *(_BYTE *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a1[2].i64[0] & 0xFFF));
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DED16B70);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1);
      v8 = a1[2].i64[1];
    }
    while (v8 && v6 != __src);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      while (1)
      {
        v10 = (char *)a1[1].i64[0];
        v11 = (char *)a1->i64[1];
        if (v10 == v11)
          v12 = 0;
        else
          v12 = ((v10 - v11) << 9) - 1;
        v13 = a1[2].u64[0];
        v14 = a1[2].i64[1] + v13;
        if (v12 != v14)
          goto LABEL_44;
        if (v13 >= 0x1000)
          break;
        v26 = (v10 - v11) >> 3;
        v27 = a1[1].i64[1];
        v28 = v27 - a1->i64[0];
        if (v26 >= v28 >> 3)
        {
          if (v27 == a1->i64[0])
            v29 = 1;
          else
            v29 = v28 >> 2;
          v58 = &a1[1].i8[8];
          v56.i64[0] = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v29);
          v56.i64[1] = v56.i64[0] + 8 * v26;
          v57.i64[0] = v56.i64[1];
          v57.i64[1] = v56.i64[0] + 8 * v30;
          v55 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v56, &v55);
          for (i = (_QWORD *)a1[1].i64[0];
                i != (_QWORD *)a1->i64[1];
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v56, i))
          {
            --i;
          }
          v32 = (void *)a1->i64[0];
          v33 = v57;
          *a1 = v56;
          a1[1] = v33;
          if (v32)
            operator delete(v32);
          goto LABEL_43;
        }
        if ((char *)v27 == v10)
        {
          v56.i64[0] = (uint64_t)operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v56);
          v44 = (_QWORD *)a1->i64[1];
          v18 = (char *)a1[1].i64[0];
          v45 = *v44;
          v15 = (char *)(v44 + 1);
          v16 = v45;
          a1->i64[1] = (uint64_t)v15;
          if (v18 != (char *)a1[1].i64[1])
            goto LABEL_42;
          v19 = (uint64_t)&v15[-a1->i64[0]];
          if ((unint64_t)v15 <= a1->i64[0])
          {
            if (v18 == (char *)a1->i64[0])
              v47 = 1;
            else
              v47 = (uint64_t)&v18[-a1->i64[0]] >> 2;
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v47);
            v37 = &v35[8 * (v47 >> 2)];
            v48 = (uint64_t *)a1->i64[1];
            v18 = v37;
            v49 = a1[1].i64[0] - (_QWORD)v48;
            if (v49)
            {
              v18 = &v37[v49 & 0xFFFFFFFFFFFFFFF8];
              v50 = 8 * (v49 >> 3);
              v51 = &v35[8 * (v47 >> 2)];
              do
              {
                v52 = *v48++;
                *(_QWORD *)v51 = v52;
                v51 += 8;
                v50 -= 8;
              }
              while (v50);
            }
            goto LABEL_39;
          }
LABEL_16:
          v20 = v19 >> 3;
          v21 = v19 >> 3 < -1;
          v22 = (v19 >> 3) + 2;
          if (v21)
            v23 = v22;
          else
            v23 = v20 + 1;
          v24 = &v15[-8 * (v23 >> 1)];
          v25 = v18 - v15;
          if (v18 != v15)
          {
            memmove(&v15[-8 * (v23 >> 1)], v15, v18 - v15);
            v15 = (char *)a1->i64[1];
          }
          v18 = &v24[v25];
          a1->i64[1] = (uint64_t)&v15[-8 * (v23 >> 1)];
          a1[1].i64[0] = (uint64_t)&v24[v25];
          goto LABEL_42;
        }
        v56.i64[0] = (uint64_t)operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v56);
LABEL_43:
        v11 = (char *)a1->i64[1];
        v14 = a1[2].i64[1] + a1[2].i64[0];
LABEL_44:
        *(_BYTE *)(*(_QWORD *)&v11[(v14 >> 9) & 0x7FFFFFFFFFFFF8] + (v14 & 0xFFF)) = *v6;
        v46 = a1[2].u64[0];
        ++a1[2].i64[1];
        *v6++ = *(_BYTE *)(*(_QWORD *)(a1->i64[1] + ((v46 >> 9) & 0x7FFFFFFFFFFFF8)) + (v46 & 0xFFF));
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DED16B70);
        std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1);
        if (v6 == a4)
          return a4;
      }
      a1[2].i64[0] = v13 - 4096;
      v17 = *(_QWORD *)v11;
      v15 = v11 + 8;
      v16 = v17;
      a1->i64[1] = (uint64_t)v15;
      v18 = (char *)a1[1].i64[0];
      if (v18 != (char *)a1[1].i64[1])
      {
LABEL_42:
        *(_QWORD *)v18 = v16;
        a1[1].i64[0] += 8;
        goto LABEL_43;
      }
      v19 = (uint64_t)&v15[-a1->i64[0]];
      if ((unint64_t)v15 <= a1->i64[0])
      {
        if (v18 == (char *)a1->i64[0])
          v34 = 1;
        else
          v34 = (uint64_t)&v18[-a1->i64[0]] >> 2;
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v34);
        v37 = &v35[8 * (v34 >> 2)];
        v38 = (uint64_t *)a1->i64[1];
        v18 = v37;
        v39 = a1[1].i64[0] - (_QWORD)v38;
        if (v39)
        {
          v18 = &v37[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = 8 * (v39 >> 3);
          v41 = &v35[8 * (v34 >> 2)];
          do
          {
            v42 = *v38++;
            *(_QWORD *)v41 = v42;
            v41 += 8;
            v40 -= 8;
          }
          while (v40);
        }
LABEL_39:
        v43 = (void *)a1->i64[0];
        a1->i64[0] = (uint64_t)v35;
        a1->i64[1] = (uint64_t)v37;
        a1[1].i64[0] = (uint64_t)v18;
        a1[1].i64[1] = (uint64_t)&v35[8 * v36];
        if (v43)
        {
          operator delete(v43);
          v18 = (char *)a1[1].i64[0];
        }
        goto LABEL_42;
      }
      goto LABEL_16;
    }
  }
  else if (v6 != __src)
  {
    v53 = a4 - __src;
    if (v53)
      memmove(v6, __src, v53);
    return &v6[v53];
  }
  return a4;
}

void sub_1DE961744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a2 - *result + a3;
    if (v3 < 1)
      result -= (unint64_t)(4095 - v3) >> 12;
    else
      result += (unint64_t)v3 >> 12;
  }
  return result;
}

_QWORD **std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](_QWORD **result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  _BYTE *v7;
  _QWORD **v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;

  v3 = *result;
  v5 = (_QWORD *)**result;
  v4 = (char *)(*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v9 = (char *)*v5;
    while (1)
    {
      v10 = v9 - v4 + 4096;
      if (a3 - v7 >= v10)
        v11 = v10;
      else
        v11 = a3 - v7;
      if (v11)
        result = (_QWORD **)memmove(v4, v7, v11);
      v7 += v11;
      if (v7 == a3)
        break;
      v12 = (char *)v5[1];
      ++v5;
      v9 = v12;
      v4 = v12;
    }
    v4 += v11;
    if ((char *)(*v5 + 4096) == v4)
    {
      v13 = (char *)v5[1];
      ++v5;
      v4 = v13;
    }
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

void std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) >= 0x2000uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 4096;
  }
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  char *v4;
  void **v5;
  char *v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(void ***)(v2 + 8);
  v4 = (char *)v3[11];
  if (v4)
    v5 = (void **)(v4 - 80);
  else
    v5 = 0;
  if (v5 != v3)
  {
    do
    {
      v6 = (char *)v5[11];
      if (v6)
        v3 = (void **)(v6 - 80);
      else
        v3 = 0;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v5 + 3);
      if (*((char *)v5 + 23) < 0)
        operator delete(*v5);
      operator delete(v5);
      v5 = v3;
    }
    while (v3 != *(void ***)(v2 + 8));
  }
  operator delete(v3);
  MEMORY[0x1DF0ED014](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Emotion>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1DE961CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::__construct_node<std::pair<std::string const,Emotion> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a3 + 24);
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_1DE961D78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Emotion>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t FrontendNNModule::clear(FrontendNNModule *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 39);
  v3 = *((_QWORD *)this + 38);
  while (v2 != v3)
    v2 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v2 - 16);
  *((_QWORD *)this + 39) = v3;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void FrontendNNModule::compose_input(FrontendNNModule *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  std::string::size_type v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  _BYTE v20[24];
  __int128 v21;

  v6 = *((_QWORD *)this + 39);
  v7 = *((_QWORD *)this + 38);
  while (v6 != v7)
    v6 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v6 - 16);
  *((_QWORD *)this + 39) = v7;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v21, *((_QWORD *)this + 2), 0);
  if ((_QWORD)v21)
  {
    std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100]((char **)this + 38, &v21);
    if ((a2 & 1) == 0)
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
    v8 = v21;
    if ((_QWORD *)(v8 + 8) == v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)v20, "TokenBasicItem is missing");
      MEMORY[0x1DF0EC99C](exception, v20);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v10 = v9[5];
    if (*(_DWORD *)(v10 + 8) == 1952807028)
    {
      if (*(char *)(v10 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v10 + 32), *(_QWORD *)(v10 + 40));
        v8 = v21;
      }
      else
      {
        v11 = *(_OWORD *)(v10 + 32);
        a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 48);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v11;
      }
      v12 = *((_QWORD *)&v21 + 1);
      a3[1].__r_.__value_.__r.__words[0] = v8;
    }
    else
    {
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v21);
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      v12 = *((_QWORD *)&v21 + 1);
      v13 = v21;
      a3->__r_.__value_.__r.__words[2] = 0;
      a3[1].__r_.__value_.__r.__words[0] = v13;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&a3->__r_.__value_.__r.__words[2] = 0u;
    v12 = *((_QWORD *)&v21 + 1);
  }
  a3[1].__r_.__value_.__l.__size_ = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1DE961FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void FrontendNNModule::compose_inputs(FrontendNNModule *this@<X0>, int a2@<W2>, uint64_t **a3@<X8>)
{
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _BOOL4 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  std::string::size_type size;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  std::string::size_type v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  NSObject *v54;
  char *v55;
  std::string *p_p;
  char *v57;
  const char *v58;
  std::string *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  NSObject *v69;
  char *v70;
  std::string *v71;
  char *v72;
  const char *v73;
  std::string *v74;
  _BOOL4 v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  NSObject *v82;
  char *v83;
  std::string *v84;
  char *v85;
  const char *v86;
  std::string *v87;
  NSObject *v88;
  const char *v89;
  char *v90;
  int v91;
  char *v92;
  NSObject *v93;
  char *v94;
  NSObject *v95;
  char *v96;
  NSObject *v97;
  char *v98;
  NSObject *v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  __int128 v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  NSObject *v136;
  char *v137;
  std::string *v138;
  char *v139;
  const char *v140;
  std::string *v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  NSObject *v155;
  char *v156;
  std::string *v157;
  const char *v158;
  std::string *v159;
  void *exception;
  char **v162;
  uint64_t **v163;
  char *v164;
  char *v165;
  _OWORD *v166;
  std::string v167;
  std::string v168;
  _QWORD v169[5];
  std::string __p;
  __int128 v171;
  uint64_t v172;
  _BYTE buf[24];
  char *v174;
  uint64_t *v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = (uint64_t)&off_1EA936840;
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = 0;
  *a3 = v5 + 3;
  a3[1] = v5;
  v162 = (char **)((char *)this + 304);
  v163 = a3;
  v7 = *((_QWORD *)this + 38);
  for (i = *((_QWORD *)this + 39);
        i != v7;
  *((_QWORD *)this + 39) = v7;
  v8 = (char *)this + 104;
  do
  {
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(v169, *((_QWORD *)this + 2), 0);
      v9 = v169[0];
      if (!v169[0])
        goto LABEL_197;
      v11 = (_QWORD *)(v9 + 8);
      if ((_QWORD *)(v9 + 8) == v10)
        v12 = 0;
      else
        v12 = v10[5] + 8;
      v14 = v13;
      if (v11 == v13)
      {
        v15 = 0;
        if (!v12 && v11 == v14)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          if (*((char *)this + 127) < 0)
            v8 = *(const char **)v8;
          StringFormatter::StringFormatter((StringFormatter *)&__p, "#[%s] Token missing both TokenBasicItem and ChunkItem", v8);
          MEMORY[0x1DF0EC99C](exception, &__p);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
      }
      else
      {
        v15 = *(_BYTE *)(v13[5] + 8) != 0;
      }
      if (*(_DWORD *)v12 != 1952807028)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
        FrontendNNModule::get_input_from_tokens(&v168, (uint64_t)this);
        size = HIBYTE(v168.__r_.__value_.__r.__words[2]);
        if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v168.__r_.__value_.__l.__size_;
        if (size)
        {
          v35 = *v163;
          std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&__p, (__int128 *)&v168, (_QWORD **)v162);
          v36 = v35[2];
          v37 = v35[1];
          if (v37 >= v36)
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v35) >> 4);
            v47 = v46 + 1;
            if (v46 + 1 > 0x555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v35) >> 4);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x2AAAAAAAAAAAAAALL)
              v49 = 0x555555555555555;
            else
              v49 = v47;
            v175 = v35 + 2;
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v49);
            v51 = &v50[48 * v46];
            *(_QWORD *)buf = v50;
            *(_QWORD *)&buf[8] = v51;
            v174 = &v50[48 * v52];
            v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v51 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v51 = v53;
            memset(&__p, 0, sizeof(__p));
            *((_QWORD *)v51 + 3) = 0;
            *((_QWORD *)v51 + 4) = 0;
            *((_QWORD *)v51 + 5) = 0;
            *(_OWORD *)(v51 + 24) = v171;
            *((_QWORD *)v51 + 5) = v172;
            v171 = 0uLL;
            v172 = 0;
            *(_QWORD *)&buf[16] = v51 + 48;
            std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v35, buf);
            v39 = v35[1];
            std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v37 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_QWORD *)(v37 + 24) = 0;
            *(_OWORD *)v37 = v38;
            memset(&__p, 0, sizeof(__p));
            *(_QWORD *)(v37 + 32) = 0;
            *(_QWORD *)(v37 + 40) = 0;
            *(_OWORD *)(v37 + 24) = v171;
            *(_QWORD *)(v37 + 40) = v172;
            v171 = 0uLL;
            v172 = 0;
            v39 = v37 + 48;
          }
          v35[1] = v39;
          *(_QWORD *)buf = &v171;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v55 = (char *)this + 104;
            if (*((char *)this + 127) < 0)
              v55 = *(char **)v8;
            Censor::global_plaintext(&__p, (uint64_t)&v168);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v55;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = p_p;
            _os_log_impl(&dword_1DE3F6000, v54, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input : %s", buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v57 = (char *)this + 104;
          if (*((char *)this + 127) < 0)
            v57 = *(char **)v8;
          Censor::global_plaintext(&__p, (uint64_t)&v168);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = &__p;
          else
            v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
          Diagnostics::log(7, "#[%s] gets composed input : %s", v58, v57, v59);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          {
            *v168.__r_.__value_.__l.__data_ = 0;
            v168.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v168.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v168.__r_.__value_.__s + 23) = 0;
          }
        }
        v81 = *(_DWORD *)v12;
        if (*(int *)v12 <= 1835102826)
        {
          if (v81 == 1635083369)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v97 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v98 = (char *)this + 104;
              if (*((char *)this + 127) < 0)
                v98 = *(char **)v8;
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v98;
              _os_log_impl(&dword_1DE3F6000, v97, OS_LOG_TYPE_DEBUG, "#[%s] gets Phatic item", (uint8_t *)&__p, 0xCu);
            }
            v91 = *((char *)this + 127);
            v92 = "#[%s] gets Phatic item";
            goto LABEL_165;
          }
          if (v81 == 1651664235)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v88 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v90 = (char *)this + 104;
              if (*((char *)this + 127) < 0)
                v90 = *(char **)v8;
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v90;
              _os_log_impl(&dword_1DE3F6000, v88, OS_LOG_TYPE_DEBUG, "#[%s] gets PAUSE item", (uint8_t *)&__p, 0xCu);
            }
            v91 = *((char *)this + 127);
            v92 = "#[%s] gets PAUSE item";
            goto LABEL_165;
          }
        }
        else
        {
          switch(v81)
          {
            case 1835102827:
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v93 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v94 = (char *)this + 104;
                if (*((char *)this + 127) < 0)
                  v94 = *(char **)v8;
                LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v94;
                _os_log_impl(&dword_1DE3F6000, v93, OS_LOG_TYPE_DEBUG, "#[%s] gets MRK item", (uint8_t *)&__p, 0xCu);
              }
              v91 = *((char *)this + 127);
              v92 = "#[%s] gets MRK item";
              goto LABEL_165;
            case 1886547312:
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v95 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v96 = (char *)this + 104;
                if (*((char *)this + 127) < 0)
                  v96 = *(char **)v8;
                LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
                _os_log_impl(&dword_1DE3F6000, v95, OS_LOG_TYPE_DEBUG, "#[%s] gets Prompt item", (uint8_t *)&__p, 0xCu);
              }
              v91 = *((char *)this + 127);
              v92 = "#[%s] gets Prompt item";
              goto LABEL_165;
            case 1885892462:
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v82 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v83 = (char *)this + 104;
                if (*((char *)this + 127) < 0)
                  v83 = *(char **)v8;
                Censor::global_plaintext(&__p, v12 + 24);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v84 = &__p;
                else
                  v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v83;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v84;
                _os_log_impl(&dword_1DE3F6000, v82, OS_LOG_TYPE_DEBUG, "#[%s] gets phonetic input : %s", buf, 0x16u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              v85 = (char *)this + 104;
              if (*((char *)this + 127) < 0)
                v85 = *(char **)v8;
              Censor::global_plaintext(&__p, v12 + 24);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &__p;
              else
                v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
              Diagnostics::log(7, "#[%s] gets phonetic input : %s", v86, v85, v87);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
LABEL_168:
              v102 = *v163;
              std::string::basic_string[abi:ne180100]<0>(&v167, &byte_1DEBD87CE);
              v103 = *(_OWORD *)v169;
              *(_OWORD *)&v169[3] = *(_OWORD *)v169;
              if (v169[1])
              {
                v104 = (unint64_t *)(v169[1] + 8);
                do
                  v105 = __ldxr(v104);
                while (__stxr(v105 + 1, v104));
              }
              v164 = 0;
              v165 = 0;
              v166 = 0;
              *(_QWORD *)buf = &v164;
              buf[8] = 0;
              v106 = (char *)operator new(0x10uLL);
              v107 = v106;
              v164 = v106;
              v165 = v106;
              v108 = v106 + 16;
              v166 = v106 + 16;
              *(_OWORD *)v106 = v103;
              if (*((_QWORD *)&v103 + 1))
              {
                v109 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
              }
              v165 = v106 + 16;
              if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
                v107 = v164;
                v108 = v165;
              }
              else
              {
                __p = v167;
              }
              v171 = 0uLL;
              v172 = 0;
              std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>((char *)&v171, v107, v108, (v108 - v107) >> 4);
              v111 = v102[2];
              v112 = v102[1];
              if (v112 >= v111)
              {
                v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - *v102) >> 4);
                v116 = v115 + 1;
                if (v115 + 1 > 0x555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - *v102) >> 4);
                if (2 * v117 > v116)
                  v116 = 2 * v117;
                if (v117 >= 0x2AAAAAAAAAAAAAALL)
                  v118 = 0x555555555555555;
                else
                  v118 = v116;
                v175 = v102 + 2;
                v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v118);
                v120 = &v119[48 * v115];
                *(_QWORD *)buf = v119;
                *(_QWORD *)&buf[8] = v120;
                v174 = &v119[48 * v121];
                v122 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *((_QWORD *)v120 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v120 = v122;
                memset(&__p, 0, sizeof(__p));
                *((_QWORD *)v120 + 3) = 0;
                *((_QWORD *)v120 + 4) = 0;
                *((_QWORD *)v120 + 5) = 0;
                *(_OWORD *)(v120 + 24) = v171;
                *((_QWORD *)v120 + 5) = v172;
                v171 = 0uLL;
                v172 = 0;
                *(_QWORD *)&buf[16] = v120 + 48;
                std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v102, buf);
                v114 = v102[1];
                std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                v113 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v112 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_QWORD *)(v112 + 24) = 0;
                *(_OWORD *)v112 = v113;
                memset(&__p, 0, sizeof(__p));
                *(_QWORD *)(v112 + 32) = 0;
                *(_QWORD *)(v112 + 40) = 0;
                *(_OWORD *)(v112 + 24) = v171;
                *(_QWORD *)(v112 + 40) = v172;
                v171 = 0uLL;
                v172 = 0;
                v114 = v112 + 48;
              }
              v102[1] = v114;
              *(_QWORD *)buf = &v171;
              std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              *(_QWORD *)buf = &v164;
              std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if (*((_QWORD *)&v103 + 1))
              {
                v123 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 16))(*((_QWORD *)&v103 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v103 + 1));
                }
              }
              if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v167.__r_.__value_.__l.__data_);
              goto LABEL_195;
          }
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v99 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v100 = (char *)this + 104;
          if (*((char *)this + 127) < 0)
            v100 = *(char **)v8;
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
          _os_log_impl(&dword_1DE3F6000, v99, OS_LOG_TYPE_DEBUG, "#[%s] gets Unkown item, pass to downstream", (uint8_t *)&__p, 0xCu);
        }
        v91 = *((char *)this + 127);
        v92 = "#[%s] gets Unkown item, pass to downstream";
LABEL_165:
        v101 = (char *)this + 104;
        if (v91 < 0)
          v101 = *(char **)v8;
        Diagnostics::log(7, v92, v89, v101);
        goto LABEL_168;
      }
      v16 = *(float **)(v12 + 48);
      v17 = v16[55];
      v18 = *((float *)this + 82);
      v19 = vabds_f32(v17, v18);
      v20 = fabsf(v17);
      v21 = fabsf(v18);
      if (v20 >= v21)
        v21 = v20;
      v22 = v21 * 0.00000011921;
      v23 = v19 > v22;
      if (v19 > v22)
        *((float *)this + 82) = v17;
      v24 = v16[59];
      v25 = *((float *)this + 83);
      v26 = vabds_f32(v24, v25);
      v27 = fabsf(v24);
      v28 = fabsf(v25);
      if (v27 >= v28)
        v28 = v27;
      if (v26 > (float)(v28 * 0.00000011921))
      {
        *((float *)this + 83) = v24;
        v23 = 1;
      }
      v29 = v16[61];
      v30 = *((float *)this + 84);
      v31 = vabds_f32(v29, v30);
      v32 = fabsf(v29);
      v33 = fabsf(v30);
      if (v32 >= v33)
        v33 = v32;
      if (v31 <= (float)(v33 * 0.00000011921))
      {
        if (!v23)
          goto LABEL_98;
      }
      else
      {
        *((float *)this + 84) = v29;
      }
      FrontendNNModule::get_input_from_tokens(&v168, (uint64_t)this);
      v40 = (v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v168.__r_.__value_.__r.__words[2])
          : v168.__r_.__value_.__l.__size_;
      if (v40)
      {
        v41 = *v163;
        std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&__p, (__int128 *)&v168, (_QWORD **)v162);
        v42 = v41[2];
        v43 = v41[1];
        if (v43 >= v42)
        {
          v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *v41) >> 4);
          v62 = v61 + 1;
          if (v61 + 1 > 0x555555555555555)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v41) >> 4);
          if (2 * v63 > v62)
            v62 = 2 * v63;
          if (v63 >= 0x2AAAAAAAAAAAAAALL)
            v64 = 0x555555555555555;
          else
            v64 = v62;
          v175 = v41 + 2;
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v64);
          v66 = &v65[48 * v61];
          *(_QWORD *)buf = v65;
          *(_QWORD *)&buf[8] = v66;
          v174 = &v65[48 * v67];
          v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((_QWORD *)v66 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v66 = v68;
          memset(&__p, 0, sizeof(__p));
          *((_QWORD *)v66 + 3) = 0;
          *((_QWORD *)v66 + 4) = 0;
          *((_QWORD *)v66 + 5) = 0;
          *(_OWORD *)(v66 + 24) = v171;
          *((_QWORD *)v66 + 5) = v172;
          v171 = 0uLL;
          v172 = 0;
          *(_QWORD *)&buf[16] = v66 + 48;
          std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v41, buf);
          v45 = v41[1];
          std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v43 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_QWORD *)(v43 + 24) = 0;
          *(_OWORD *)v43 = v44;
          memset(&__p, 0, sizeof(__p));
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 40) = 0;
          *(_OWORD *)(v43 + 24) = v171;
          *(_QWORD *)(v43 + 40) = v172;
          v171 = 0uLL;
          v172 = 0;
          v45 = v43 + 48;
        }
        v41[1] = v45;
        *(_QWORD *)buf = &v171;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v69 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v70 = (char *)this + 104;
          if (*((char *)this + 127) < 0)
            v70 = *(char **)v8;
          Censor::global_plaintext(&__p, (uint64_t)&v168);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &__p;
          else
            v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v70;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v71;
          _os_log_impl(&dword_1DE3F6000, v69, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input : %s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v72 = (char *)this + 104;
        if (*((char *)this + 127) < 0)
          v72 = *(char **)v8;
        Censor::global_plaintext(&__p, (uint64_t)&v168);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &__p;
        else
          v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
        Diagnostics::log(7, "#[%s] gets composed input : %s", v73, v72, v74);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_197;
        *v168.__r_.__value_.__l.__data_ = 0;
        v168.__r_.__value_.__l.__size_ = 0;
        v60 = 3;
        if ((*((_BYTE *)&v168.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_67:
          if (v40)
            goto LABEL_198;
          goto LABEL_98;
        }
      }
      else
      {
        v60 = 0;
        if ((*((_BYTE *)&v168.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_67;
      }
      operator delete(v168.__r_.__value_.__l.__data_);
      if (v40)
        goto LABEL_198;
LABEL_98:
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100](v162, (__int128 *)v169);
      v75 = v11 != v14;
      if (a2)
        v75 = v15;
      if (v75)
      {
        FrontendNNModule::get_input_from_tokens(&v168, (uint64_t)this);
        if (*((_QWORD *)this + 38) != *((_QWORD *)this + 39))
        {
          v76 = *v163;
          std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&__p, (__int128 *)&v168, (_QWORD **)v162);
          v77 = v76[2];
          v78 = v76[1];
          if (v78 >= v77)
          {
            v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *v76) >> 4);
            v129 = v128 + 1;
            if (v128 + 1 > 0x555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *v76) >> 4);
            if (2 * v130 > v129)
              v129 = 2 * v130;
            if (v130 >= 0x2AAAAAAAAAAAAAALL)
              v131 = 0x555555555555555;
            else
              v131 = v129;
            v175 = v76 + 2;
            v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v131);
            v133 = &v132[48 * v128];
            *(_QWORD *)buf = v132;
            *(_QWORD *)&buf[8] = v133;
            v174 = &v132[48 * v134];
            v135 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v133 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v133 = v135;
            memset(&__p, 0, sizeof(__p));
            *((_QWORD *)v133 + 3) = 0;
            *((_QWORD *)v133 + 4) = 0;
            *((_QWORD *)v133 + 5) = 0;
            *(_OWORD *)(v133 + 24) = v171;
            *((_QWORD *)v133 + 5) = v172;
            v171 = 0uLL;
            v172 = 0;
            *(_QWORD *)&buf[16] = v133 + 48;
            std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v76, buf);
            v80 = v76[1];
            std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            v79 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v78 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_QWORD *)(v78 + 24) = 0;
            *(_OWORD *)v78 = v79;
            memset(&__p, 0, sizeof(__p));
            *(_QWORD *)(v78 + 32) = 0;
            *(_QWORD *)(v78 + 40) = 0;
            *(_OWORD *)(v78 + 24) = v171;
            *(_QWORD *)(v78 + 40) = v172;
            v171 = 0uLL;
            v172 = 0;
            v80 = v78 + 48;
          }
          v76[1] = v80;
          *(_QWORD *)buf = &v171;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v136 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v137 = (char *)this + 104;
            if (*((char *)this + 127) < 0)
              v137 = *(char **)v8;
            Censor::global_plaintext(&__p, (uint64_t)&v168);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v138 = &__p;
            else
              v138 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v137;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v138;
            _os_log_impl(&dword_1DE3F6000, v136, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input : %s", buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v139 = (char *)this + 104;
          if (*((char *)this + 127) < 0)
            v139 = *(char **)v8;
          Censor::global_plaintext(&__p, (uint64_t)&v168);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v141 = &__p;
          else
            v141 = (std::string *)__p.__r_.__value_.__r.__words[0];
          Diagnostics::log(7, "#[%s] gets composed input : %s", v140, v139, v141);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          {
            *v168.__r_.__value_.__l.__data_ = 0;
            v168.__r_.__value_.__l.__size_ = 0;
            goto LABEL_195;
          }
LABEL_197:
          v60 = 3;
          goto LABEL_198;
        }
LABEL_195:
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v168.__r_.__value_.__l.__data_);
        goto LABEL_197;
      }
      v60 = 0;
LABEL_198:
      v125 = (std::__shared_weak_count *)v169[1];
      if (v169[1])
      {
        v126 = (unint64_t *)(v169[1] + 8);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
          break;
      }
      if (v60)
        goto LABEL_234;
    }
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
  while (!v60);
LABEL_234:
  v142 = *v163;
  if (**v163 == (*v163)[1])
  {
    FrontendNNModule::get_input_from_tokens(&v168, (uint64_t)this);
    if (*((_QWORD *)this + 38) != *((_QWORD *)this + 39))
    {
      UTFString::rstrip(&v168);
      std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&__p, (__int128 *)&v168, (_QWORD **)v162);
      v143 = v142[2];
      v144 = v142[1];
      if (v144 >= v143)
      {
        v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - *v142) >> 4);
        v148 = v147 + 1;
        if (v147 + 1 > 0x555555555555555)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - *v142) >> 4);
        if (2 * v149 > v148)
          v148 = 2 * v149;
        if (v149 >= 0x2AAAAAAAAAAAAAALL)
          v150 = 0x555555555555555;
        else
          v150 = v148;
        v175 = v142 + 2;
        v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v150);
        v152 = &v151[48 * v147];
        *(_QWORD *)buf = v151;
        *(_QWORD *)&buf[8] = v152;
        v174 = &v151[48 * v153];
        v154 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v152 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v152 = v154;
        memset(&__p, 0, sizeof(__p));
        *((_QWORD *)v152 + 3) = 0;
        *((_QWORD *)v152 + 4) = 0;
        *((_QWORD *)v152 + 5) = 0;
        *(_OWORD *)(v152 + 24) = v171;
        *((_QWORD *)v152 + 5) = v172;
        v171 = 0uLL;
        v172 = 0;
        *(_QWORD *)&buf[16] = v152 + 48;
        std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v142, buf);
        v146 = v142[1];
        std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        v145 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v144 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_QWORD *)(v144 + 24) = 0;
        *(_OWORD *)v144 = v145;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        *(_QWORD *)(v144 + 32) = 0;
        *(_QWORD *)(v144 + 40) = 0;
        *(_OWORD *)(v144 + 24) = v171;
        *(_QWORD *)(v144 + 40) = v172;
        __p.__r_.__value_.__r.__words[2] = 0;
        v171 = 0uLL;
        v172 = 0;
        v146 = v144 + 48;
      }
      v142[1] = v146;
      *(_QWORD *)buf = &v171;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v155 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        v156 = (char *)this + 104;
        if (*((char *)this + 127) < 0)
          v156 = *(char **)v8;
        Censor::global_plaintext(&__p, (uint64_t)&v168);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v157 = &__p;
        else
          v157 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v156;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v157;
        _os_log_impl(&dword_1DE3F6000, v155, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input from remain tokens : %s", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*((char *)this + 127) < 0)
        v8 = *(const char **)v8;
      Censor::global_plaintext(&__p, (uint64_t)&v168);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v159 = &__p;
      else
        v159 = (std::string *)__p.__r_.__value_.__r.__words[0];
      Diagnostics::log(7, "#[%s] gets composed input from remain tokens : %s", v158, v8, v159);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
  }
}

void sub_1DE9634C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a33 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
  _Unwind_Resume(a1);
}

uint64_t FrontendNNModule::get_current_basic_item(FrontendNNModule *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *((_QWORD *)this + 39);
  if (*((_QWORD *)this + 38) == v1)
    return 0;
  v2 = *(_QWORD *)(v1 - 16);
  if ((_QWORD *)(v2 + 8) == v3)
    return 0;
  else
    return v3[5] + 8;
}

uint64_t FrontendNNModule::get_current_item_attribute@<X0>(FrontendNNModule *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (*(uint64_t (**)(FrontendNNModule *))(*(_QWORD *)this + 72))(this);
  if (result)
  {
    v4 = *(_QWORD *)(result + 56);
    *a2 = *(_QWORD *)(result + 48);
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

BOOL FrontendNNModule::is_last_chunk(FrontendNNModule *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *((_QWORD *)this + 39);
  if (*((_QWORD *)this + 38) == v1)
    return 0;
  v2 = *(_QWORD *)(v1 - 16);
  return (_QWORD *)(v2 + 8) != v3 && *(_BYTE *)(v3[5] + 8) != 0;
}

BOOL FrontendNNModule::has_rewrite(FrontendNNModule *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 39);
  if (*((_QWORD *)this + 38) == v1)
    return 0;
  v2 = *(_QWORD *)(v1 - 16);
}

void FrontendNNModule::top1_result(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  size_t size;
  void **v13;
  std::string *v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  NSObject *v20;
  const char *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *__p[2];
  unsigned __int8 v25;
  std::string v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v5 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v22 = (_QWORD *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0)
        v22 = (_QWORD *)*v22;
      LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_ERROR, "#[%s] no paths in n_best", (uint8_t *)&v26, 0xCu);
    }
    v23 = (_QWORD *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0)
      v23 = (_QWORD *)*v23;
    Diagnostics::log(3, "#[%s] no paths in n_best", v21, v23);
  }
  else
  {
    v6 = *v5;
    if (v5[1] != *v5)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = (__int128 *)(v6 + v8);
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v11 = *v10;
          v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
        }
        if (a3)
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
          else
            size = v26.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
          if ((v25 & 0x80u) == 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          if (size)
          {
            if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &v26;
            else
              v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
            memmove(v13, v14, size);
          }
          *(_WORD *)((char *)v13 + size) = 32;
          if ((v25 & 0x80u) == 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          if ((v25 & 0x80u) == 0)
            v16 = v25;
          else
            v16 = (std::string::size_type)__p[1];
          std::string::append(a4, (const std::string::value_type *)v15, v16);
          if ((char)v25 < 0)
            operator delete(__p[0]);
        }
        else
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v26;
          else
            v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
          else
            v18 = v26.__r_.__value_.__l.__size_;
          std::string::append(a4, (const std::string::value_type *)v17, v18);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        ++v9;
        v6 = *v5;
        v8 += 240;
      }
      while (v9 < 0xEEEEEEEEEEEEEEEFLL * ((v5[1] - *v5) >> 4));
    }
  }
}

void sub_1DE963A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(exception_object);
}

uint64_t FrontendNNModule::top1_result_aligned@<X0>(char *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t result;
  NSObject *v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2[1] != *a2)
    return (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 120))(a1);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    v8 = a1 + 104;
    if (a1[127] < 0)
      v8 = (_QWORD *)*v8;
    *(_DWORD *)buf = 136315138;
    v11 = v8;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "#[%s] no paths in n_best", buf, 0xCu);
  }
  v9 = a1 + 104;
  if (a1[127] < 0)
    v9 = (_QWORD *)*v9;
  result = Diagnostics::log(3, "#[%s] no paths in n_best", v7, v9);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void FrontendNNModule::top1_result_aligned(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  char v17;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v20;
  int *v21;
  int *v22;
  int *v23;
  int *v25;
  BOOL v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  std::string::size_type v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  BOOL v48;
  int *v49;
  std::string *v50;
  std::string::size_type v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  std::string::size_type v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  uint64_t i;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::string::size_type v84;
  NSObject *v85;
  std::string *v86;
  const char *v87;
  std::string *v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  std::string v92;
  std::string __str;
  std::string __p;
  unint64_t v95;
  _QWORD *v96;
  std::string v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  v10 = operator new(0x30uLL);
  v10[3] = 0;
  v11 = v10 + 3;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1EA936990;
  v10[4] = 0;
  v10[5] = 0;
  *a5 = v10 + 3;
  a5[1] = v10;
  v12 = *a4;
  if (a4[1] == *a4)
  {
    MEMORY[0xFFFFFFFFFFFFFFF8] = *(_QWORD *)(a2[1] - 8);
    goto LABEL_139;
  }
  v13 = v10;
  v89 = a3;
  v91 = 0;
  v14 = 0;
  v90 = v10 + 5;
  do
  {
    v15 = (__int128 *)(v12 + 240 * v14);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v92.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v16;
    }
    v17 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 200))(a1, &v92);
    std::operator+<char>();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v20 = *a4 + 240 * v14;
    v22 = *(int **)(v20 + 88);
    v21 = *(int **)(v20 + 96);
    v23 = v22 + 1;
    if (v22 == v21 || v23 == v21)
    {
      v25 = v22;
      v23 = v22;
    }
    else
    {
      v42 = *v22;
      v41 = v22[1];
      if (v41 >= *v22)
        v25 = v22;
      else
        v25 = v22 + 1;
      if (v41 < v42)
        v23 = v22;
      if (v22 + 2 != v21)
      {
        if (v41 <= v42)
          v43 = *v22;
        else
          v43 = v22[1];
        if (v41 >= v42)
          v41 = *v22;
        v44 = v22 + 3;
        while (1)
        {
          v45 = v44 - 1;
          if (v44 == v21)
            break;
          v47 = *(v44 - 1);
          v46 = *v44;
          if (*v44 >= v47)
          {
            if (v47 < v41)
            {
              v41 = *(v44 - 1);
              v25 = v44 - 1;
            }
            v48 = v46 < v43;
            if (v46 > v43)
              v43 = *v44;
            if (!v48)
              v23 = v44;
          }
          else
          {
            v41 = *v25;
            if (v46 < *v25)
            {
              v41 = *v44;
              v25 = v44;
            }
            v43 = *v23;
            if (v47 > *v23)
              v43 = *(v44 - 1);
            if (v47 >= *v23)
              v23 = v44 - 1;
          }
          v49 = v44 + 1;
          v44 += 2;
          if (v49 == v21)
            goto LABEL_20;
        }
        if (*v45 >= *v25)
        {
          if (*v45 >= *v23)
            v23 = v44 - 1;
        }
        else
        {
          v25 = v44 - 1;
        }
      }
    }
LABEL_20:
    if (v21 == v25)
    {
      if ((v17 & 1) == 0)
        goto LABEL_82;
LABEL_74:
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &__p;
      else
        v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v51 = __p.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v13[4] - 40), (const std::string::value_type *)v50, v51);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_81:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_123;
      }
      goto LABEL_123;
    }
    v26 = v21 == v23;
    if (v21 == v23)
      v27 = v17;
    else
      v27 = 1;
    if ((v27 & 1) == 0)
    {
LABEL_82:
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v97, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      else
        v97 = v92;
      v98 = -1;
      v99 = -1;
      v52 = v13[4];
      v53 = v13[5];
      if (v52 >= v53)
      {
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - *v11) >> 3);
        v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - *v11) >> 3);
        if (2 * v57 > v56)
          v56 = 2 * v57;
        if (v57 >= 0x333333333333333)
          v58 = 0x666666666666666;
        else
          v58 = v56;
        v96 = v90;
        if (v58)
          v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v58);
        else
          v59 = 0;
        v60 = v58 + 40 * v55;
        __p.__r_.__value_.__r.__words[0] = v58;
        __p.__r_.__value_.__l.__size_ = v60;
        v95 = v58 + 40 * v59;
        v61 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
        *(_QWORD *)(v60 + 16) = *((_QWORD *)&v97.__r_.__value_.__l + 2);
        *(_OWORD *)v60 = v61;
        memset(&v97, 0, sizeof(v97));
        *(_QWORD *)(v60 + 24) = v98;
        *(_QWORD *)(v60 + 32) = v99;
        __p.__r_.__value_.__r.__words[2] = v60 + 40;
        std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v11, &__p);
        v62 = v13[4];
        std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&__p);
        v63 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
        v13[4] = v62;
        if (v63 < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
      }
      else
      {
        v54 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
        *(_QWORD *)(v52 + 16) = *((_QWORD *)&v97.__r_.__value_.__l + 2);
        *(_OWORD *)v52 = v54;
        memset(&v97, 0, sizeof(v97));
        *(_QWORD *)(v52 + 24) = v98;
        *(_QWORD *)(v52 + 32) = v99;
        v13[4] = v52 + 40;
      }
      v91 = 1;
      goto LABEL_123;
    }
    if (v26)
      goto LABEL_74;
    v28 = *v25;
    v29 = *a2;
    v30 = (uint64_t)(a2[1] - *a2) >> 5;
    if (v30 <= v28)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v31 = *v23;
    if (v30 <= v31)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v32 = a2;
    v33 = *(unsigned int *)(v29 + 32 * v28 + 24);
    v34 = *(_QWORD *)(v29 + 32 * v31 + 24);
    if (v14)
      v35 = 1;
    else
      v35 = v33 == 0;
    v36 = !v35;
    v37 = (int)v33;
    if (!v14)
    {
      v91 |= v36;
LABEL_106:
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v97, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      else
        v97 = v92;
      v98 = v37;
      v99 = (int)v34;
      v64 = v13[4];
      v65 = v13[5];
      if (v64 >= v65)
      {
        v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - *v11) >> 3);
        v68 = v67 + 1;
        if (v67 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - *v11) >> 3);
        if (2 * v69 > v68)
          v68 = 2 * v69;
        if (v69 >= 0x333333333333333)
          v70 = 0x666666666666666;
        else
          v70 = v68;
        v96 = v90;
        if (v70)
          v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v70);
        else
          v71 = 0;
        v72 = v70 + 40 * v67;
        __p.__r_.__value_.__r.__words[0] = v70;
        __p.__r_.__value_.__l.__size_ = v72;
        v95 = v70 + 40 * v71;
        v73 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
        *(_QWORD *)(v72 + 16) = *((_QWORD *)&v97.__r_.__value_.__l + 2);
        *(_OWORD *)v72 = v73;
        memset(&v97, 0, sizeof(v97));
        *(_QWORD *)(v72 + 24) = v98;
        *(_QWORD *)(v72 + 32) = v99;
        __p.__r_.__value_.__r.__words[2] = v72 + 40;
        std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v11, &__p);
        v74 = v13[4];
        std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&__p);
        v75 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
        v13[4] = v74;
        if (v75 < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
      }
      else
      {
        v66 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
        *(_QWORD *)(v64 + 16) = *((_QWORD *)&v97.__r_.__value_.__l + 2);
        *(_OWORD *)v64 = v66;
        memset(&v97, 0, sizeof(v97));
        *(_QWORD *)(v64 + 24) = v98;
        *(_QWORD *)(v64 + 32) = v99;
        v13[4] = v64 + 40;
      }
      a2 = v32;
      goto LABEL_123;
    }
    v38 = *(_QWORD *)(v13[4] - 8);
    if (v38 != (int)v33)
    {
      v91 |= v38 + 1 != (int)v33;
      goto LABEL_106;
    }
    std::operator+<char>();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v40 = __p.__r_.__value_.__l.__size_;
    std::string::append((std::string *)(v13[4] - 40), (const std::string::value_type *)v39, v40);
    a2 = v32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_81;
LABEL_123:
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    ++v14;
    v12 = *a4;
  }
  while (v14 < 0xEEEEEEEEEEEEEEEFLL * ((a4[1] - *a4) >> 4));
  if ((v91 & 1) != 0)
  {
    v77 = v13[3];
    for (i = v13[4]; v77 != i; v77 += 40)
    {
      *(_QWORD *)(v77 + 24) = -1;
      *(_QWORD *)(v77 + 32) = -1;
    }
  }
  else
  {
    v79 = v13[3];
    v78 = v13[4];
    *(_QWORD *)(v78 - 8) = *(_QWORD *)(a2[1] - 8);
    if (v79 != v78)
    {
      while (1)
      {
        v80 = *(_QWORD *)(v79 + 24);
        v81 = *(_QWORD *)(v79 + 32);
        v82 = *(_QWORD *)(v89 + 16);
        if (v80 >= v82 || v81 >= v82)
          break;
        *(_QWORD *)(v79 + 24) = *std::map<unsigned long,std::pair<unsigned long,unsigned long>>::at(*(_QWORD **)(v89 + 8), v80);
        *(_QWORD *)(v79 + 32) = std::map<unsigned long,std::pair<unsigned long,unsigned long>>::at(*(_QWORD **)(v89 + 8), v81)[1];
        v79 += 40;
        if (v79 == v78)
          goto LABEL_139;
      }
      *(_QWORD *)(*v11 + 24) = -1;
    }
  }
LABEL_139:
  v84 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v84 = __str.__r_.__value_.__l.__size_;
  if (v84)
  {
    std::string::basic_string(&__p, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v97);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = __p;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v85 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&__p, (uint64_t)&__str);
    v86 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v97.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 4) = (std::string::size_type)v86;
    _os_log_impl(&dword_1DE3F6000, v85, OS_LOG_TYPE_DEFAULT, "[Output] - %s", (uint8_t *)&v97, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, (uint64_t)&__str);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = &__p;
  else
    v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "[Output] - %s", v87, v88);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1DE96444C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a11);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void FrontendNNModule::model_infer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3;
  const char *v6;
  int v7;
  const char *v8;
  uint64_t v10;
  std::chrono::steady_clock::time_point v12;
  _QWORD *v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  NSObject *v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::steady_clock::time_point v17;
  const char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (***v34)(_QWORD, __int128 *);
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void (***v41)(_QWORD, __int128 *);
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  int *j;
  sqlite3_int64 v56;
  sqlite3_stmt *v57;
  uint64_t v58;
  int v59;
  const unsigned __int8 *v60;
  std::string::size_type v61;
  int v62;
  std::string *v63;
  int v64;
  unsigned int v65;
  NSObject *v66;
  const char *v67;
  std::string *v68;
  std::string *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unint64_t v75;
  NSObject *v76;
  std::chrono::steady_clock::time_point v77;
  std::chrono::steady_clock::time_point v78;
  const char *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  uint64_t *v83;
  unint64_t v84;
  NSObject *v85;
  const char *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  _QWORD *v95;
  int v96;
  int v97;
  uint64_t v99;
  int v100;
  NSObject *v101;
  const char *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  std::string::size_type v109;
  double *v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  NSObject *v128;
  const char *v129;
  unint64_t v130;
  unint64_t v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t *v135;
  double v136;
  uint64_t v137;
  NSObject *v138;
  const char *v139;
  std::string::size_type v140;
  uint64_t v141;
  double prob;
  unint64_t v143;
  double v144;
  uint64_t v145;
  int v146;
  double v147;
  double v148;
  _QWORD *v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  NSObject *v154;
  const char *v155;
  uint64_t v156;
  std::string::size_type v157;
  std::string::size_type v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  unint64_t *v163;
  char *v164;
  std::string::size_type v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  NSObject *v173;
  const char *v174;
  std::string::size_type v175;
  uint64_t v176;
  unint64_t v177;
  __int128 v178;
  unint64_t v179;
  unint64_t v180;
  std::string::size_type v181;
  __int128 v182;
  uint64_t v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  std::string::size_type v191;
  unint64_t v192;
  __int128 v193;
  std::string::size_type v194;
  std::string::size_type v195;
  std::string::size_type size;
  std::string::size_type v197;
  std::string::size_type v198;
  std::string::size_type v199;
  size_t v200;
  std::string *p_str;
  void **v202;
  int v204;
  std::string::size_type v205;
  std::string::size_type v206;
  uint64_t v207;
  unsigned __int8 *v208;
  std::string::size_type v209;
  std::string::size_type v210;
  int v211;
  NSObject *v212;
  const char *v213;
  std::string::size_type v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t **i;
  uint64_t **v218;
  uint64_t **v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t **v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t *v227;
  _QWORD *v228;
  __int128 v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  std::string::size_type v237;
  char *v238;
  __int128 v239;
  _QWORD *v240;
  std::string::size_type v241;
  NSObject *v242;
  const char *v243;
  std::string::size_type v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  std::string::size_type v249;
  std::string::size_type v250;
  size_t v251;
  std::string::size_type v252;
  std::string::size_type v253;
  size_t v254;
  std::string::size_type v255;
  int v256;
  size_t v258;
  const std::string::value_type *v259;
  std::string::size_type v260;
  BOOL v261;
  size_t v262;
  std::string *p_buf;
  const std::string::value_type *v265;
  std::string::size_type v266;
  std::string *p_p;
  std::string::size_type v268;
  std::string *v269;
  std::string::size_type v270;
  std::string::size_type v271;
  NSObject *v272;
  _QWORD *v273;
  std::string *v274;
  _QWORD *v275;
  const char *v276;
  std::string *v277;
  _DWORD *v278;
  std::string::size_type v279;
  uint64_t v280;
  uint64_t v281;
  std::string::size_type v282;
  int *v283;
  uint64_t *v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t *v288;
  int v289;
  uint64_t v290;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v291;
  NSObject *v292;
  const char *v293;
  unint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unsigned int *v297;
  std::string::size_type v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  NSObject *v305;
  const char *v306;
  int v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  double v311;
  uint64_t v312;
  NSObject *v313;
  const char *v314;
  std::string::size_type v315;
  uint64_t v316;
  double v317;
  unint64_t v318;
  double v319;
  uint64_t v320;
  int v321;
  double v322;
  double v323;
  uint64_t v324;
  double v325;
  double v326;
  double v327;
  NSObject *v328;
  const char *v329;
  uint64_t v330;
  std::string::size_type v331;
  std::string::size_type v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  unint64_t *v337;
  char *v338;
  std::string::size_type v339;
  unint64_t v340;
  _DWORD *v341;
  std::string::size_type v342;
  uint64_t v343;
  uint64_t v344;
  std::string::size_type v345;
  int *v346;
  uint64_t *v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t *v351;
  int v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unsigned int *v355;
  std::string::size_type v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  _QWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  uint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  unsigned int *v444;
  unsigned int *v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  NSObject *v450;
  const char *v451;
  std::string::size_type v452;
  unint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  unsigned int *v461;
  char *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  unint64_t v467;
  std::string *v468;
  __int128 v469;
  std::string *v470;
  std::string::size_type v471;
  std::string *v472;
  std::string::size_type v473;
  uint64_t v474;
  __int128 v475;
  NSObject *v476;
  const char *v477;
  char *v478;
  NSObject *v479;
  NSObject *v480;
  const char *v481;
  uint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  NSObject *v485;
  const char *v486;
  std::__shared_weak_count *v487;
  uint64_t *v488;
  unint64_t v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  NSObject *v495;
  std::chrono::steady_clock::time_point v496;
  std::chrono::steady_clock::time_point v497;
  const char *v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  void *exception;
  _QWORD *v506;
  void *v507;
  uint64_t **v508;
  std::string::size_type v509;
  std::string::size_type v510;
  uint64_t v511;
  uint64_t *v512;
  std::string::size_type v513;
  std::chrono::steady_clock::time_point v514;
  std::chrono::steady_clock::time_point v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v520;
  uint64_t v521;
  std::__shared_weak_count *v523;
  int v524;
  uint64_t v525;
  unsigned int v526;
  BBPEVocab *v527;
  uint64_t v528;
  uint64_t **v529;
  uint64_t *v530;
  uint64_t v531;
  void **v532;
  std::__shared_weak_count *v533;
  uint64_t v534;
  uint64_t *v535;
  uint64_t *v536;
  uint64_t *v537;
  std::__shared_weak_count *v538;
  uint64_t *v539;
  std::__shared_weak_count *v540;
  void **v541;
  std::__shared_weak_count *v542;
  __int128 v543;
  __int128 v544;
  uint64_t *v545;
  std::__shared_weak_count *v546;
  uint64_t v547;
  std::__shared_weak_count *v548;
  uint64_t *v549;
  std::__shared_weak_count *v550;
  int v551;
  void *v552;
  std::__shared_weak_count *v553;
  unsigned __int8 v554;
  std::string v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  std::string v559;
  std::string __p;
  __int128 v561;
  char *v562;
  std::string __str;
  uint64_t v564;
  uint64_t v565;
  std::string buf;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  void *v573[4];
  __int128 v574;
  _QWORD v575[17];

  v3 = a2;
  v575[14] = *MEMORY[0x1E0C80C00];
  v6 = (const char *)(a1 + 19);
  if (*((char *)a1 + 175) < 0)
  {
    v10 = a1[20];
    if (v10 != 6)
    {
      if (v10 == 7 && **(_DWORD **)v6 == 762541172 && *(_DWORD *)(*(_QWORD *)v6 + 3) == 1886154285)
        goto LABEL_16;
LABEL_857:
      exception = __cxa_allocate_exception(0x10uLL);
      v506 = a1;
      v507 = exception;
      if (*((char *)v506 + 175) < 0)
        v6 = *(const char **)v6;
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to do model inference with model_framework:'%s'", v6);
      MEMORY[0x1DF0EC99C](v507, &buf);
      __cxa_throw(v507, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v8 = *(const char **)v6;
    goto LABEL_148;
  }
  v7 = *((unsigned __int8 *)a1 + 175);
  v8 = (const char *)(a1 + 19);
  if (v7 == 6)
  {
LABEL_148:
    v96 = *(_DWORD *)v8;
    v97 = *((unsigned __int16 *)v8 + 2);
    if (v96 != 1701147234 || v97 != 25978)
      goto LABEL_857;
    v99 = a1[26];
    if (!v99)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v101 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        v103 = a1 + 13;
        if (*((char *)a1 + 127) < 0)
          v103 = (_QWORD *)*v103;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v103;
        _os_log_impl(&dword_1DE3F6000, v101, OS_LOG_TYPE_ERROR, "#[%s] gets NN Model failed", (uint8_t *)&buf, 0xCu);
      }
      v104 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v104 = (_QWORD *)*v104;
      Diagnostics::log(3, "#[%s] gets NN Model failed", v102, v104);
      v105 = operator new(0x30uLL);
      v106 = v105;
      v105[1] = 0;
      v105[2] = 0;
      v105[3] = 0;
      v91 = v105 + 3;
      *v105 = &off_1EA936990;
      v105[4] = 0;
      v105[5] = 0;
      *a3 = v105 + 3;
      a3[1] = v105;
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
        v177 = v106[5];
        v108 = v106 + 5;
        v107 = v177;
        v94 = v108 - 1;
        v92 = *(v108 - 1);
        v564 = -1;
        v565 = -1;
        if (v92 < v177)
          goto LABEL_253;
      }
      else
      {
        v92 = 0;
        v107 = 0;
        __str = *(std::string *)v3;
        v564 = -1;
        v565 = -1;
        v94 = v105 + 4;
        v108 = v105 + 5;
      }
      v168 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - *v91) >> 3);
      v179 = v168 + 1;
      if (v168 + 1 > 0x666666666666666)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v180 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v107 - *v91) >> 3);
      if (2 * v180 > v179)
        v179 = 2 * v180;
      if (v180 >= 0x333333333333333)
        v171 = 0x666666666666666;
      else
        v171 = v179;
      *((_QWORD *)&v567 + 1) = v108;
      if (v171)
        goto LABEL_238;
      goto LABEL_261;
    }
    v532 = 0;
    v533 = 0;
    v534 = 0;
    v561 = 0uLL;
    v562 = 0;
    v530 = 0;
    v531 = 0;
    v529 = &v530;
    v556 = 0;
    v557 = 0;
    v558 = 0;
    v518 = v99;
    v100 = *(char *)(a2 + 23);
    if (*(_BYTE *)(v99 + 12888))
    {
      if (v100 < 0)
        std::string::__init_copy_ctor_external(&v555, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v555 = *(std::string *)a2;
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(v518, &v555, &v556);
    }
    else
    {
      if (v100 < 0)
        std::string::__init_copy_ctor_external(&v555, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v555 = *(std::string *)a2;
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(v518 + 6440, &v555, &v556);
    }
    if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v555.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v552, "@@");
    v189 = v556;
    v517 = v557;
    if (v556 != v557)
    {
      v190 = 0;
      v191 = 0;
      v192 = 0;
      v525 = 0;
      v527 = 0;
      do
      {
        if (*(char *)(v189 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v189, *(_QWORD *)(v189 + 8));
        }
        else
        {
          v193 = *(_OWORD *)v189;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v189 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v193;
        }
        v194 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        LOBYTE(v195) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
        size = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v197 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v197 = __str.__r_.__value_.__l.__size_;
        if ((v554 & 0x80u) == 0)
          v198 = v554;
        else
          v198 = (std::string::size_type)v553;
        v199 = v197 - v198;
        if (v197 <= v198)
          goto LABEL_299;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_ < v199)
LABEL_853:
            std::string::__throw_out_of_range[abi:ne180100]();
          v200 = __str.__r_.__value_.__l.__size_ - v199 >= v198 ? v198 : __str.__r_.__value_.__l.__size_ - v199;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < v199)
            goto LABEL_853;
          v200 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - v199 >= v198
               ? v198
               : HIBYTE(__str.__r_.__value_.__r.__words[2]) - v199;
          p_str = &__str;
        }
        v202 = (v554 & 0x80u) == 0 ? &v552 : (void **)v552;
        if (!memcmp((char *)p_str + v199, v202, v200) && v200 == v198)
        {
          std::string::basic_string(&buf, &__str, 0, v199, (std::allocator<char> *)&__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v204 = 0;
          __str = buf;
          v194 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          size = buf.__r_.__value_.__l.__size_;
          v195 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else
        {
LABEL_299:
          v204 = 1;
        }
        if ((v195 & 0x80u) == 0)
          v205 = v194;
        else
          v205 = size;
        v527 = (BBPEVocab *)((char *)v527 + v205);
        v3 = a2;
        if (*(char *)(a2 + 23) < 0)
        {
          v206 = *(_QWORD *)(a2 + 8);
          if (v191 >= v206)
          {
LABEL_316:
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v212 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v214 = *(unsigned __int8 *)(a2 + 23);
              if ((v214 & 0x80u) != 0)
                v214 = *(_QWORD *)(a2 + 8);
              LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v191;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v214;
              _os_log_impl(&dword_1DE3F6000, v212, OS_LOG_TYPE_DEBUG, "Invalid original end position during BPE token alignment. Orig:%zu, Length: %zu", (uint8_t *)&buf, 0x16u);
            }
            v215 = *(unsigned __int8 *)(a2 + 23);
            if ((v215 & 0x80u) != 0)
              v215 = *(_QWORD *)(a2 + 8);
            Diagnostics::log(7, "Invalid original end position during BPE token alignment. Orig:%zu, Length: %zu", v213, v191, v215);
            goto LABEL_325;
          }
          v207 = *(_QWORD *)a2;
        }
        else
        {
          v206 = *(unsigned __int8 *)(a2 + 23);
          v207 = a2;
          if (v191 >= v206)
            goto LABEL_316;
        }
        v208 = (unsigned __int8 *)(v207 + v191);
        v209 = v206 - v191;
        v210 = v206 + v190 - v191;
        do
        {
          v211 = *v208++;
          if (v211 != 32)
            goto LABEL_315;
          ++v190;
          --v209;
        }
        while (v209);
        v190 = v210;
LABEL_315:
        v191 = (std::string::size_type)v527 + v190 - v525;
LABEL_325:
        v216 = v530;
        i = &v530;
        v218 = &v530;
        if (v530)
        {
          v219 = &v530;
          v220 = v530;
          do
          {
            v221 = v220;
            v222 = v219;
            v223 = v220[4];
            if (v223 >= v192)
              v219 = (uint64_t **)v220;
            else
              ++v220;
            v220 = (uint64_t *)*v220;
          }
          while (v220);
          if (v219 != &v530)
          {
            if (v223 < v192)
              v221 = (uint64_t *)v222;
            if (v192 >= v221[4])
            {
              if (!v204)
              {
                v226 = v192;
                goto LABEL_356;
              }
              while (1)
              {
                while (1)
                {
                  v225 = v216[4];
                  if (v192 >= v225)
                    break;
                  v216 = (uint64_t *)*v216;
                  if (!v216)
                    goto LABEL_850;
                }
                if (v225 >= v192)
                  break;
                v216 = (uint64_t *)v216[1];
                if (!v216)
LABEL_850:
                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
              }
              v216[6] = v191;
LABEL_355:
              v226 = v192 + 1;
              goto LABEL_356;
            }
          }
          for (i = &v530; ; v216 = *i)
          {
            v218 = i;
            if (!v216)
              break;
            while (1)
            {
              i = (uint64_t **)v216;
              v224 = v216[4];
              if (v192 < v224)
                break;
              if (v224 >= v192)
                goto LABEL_354;
              v216 = i[1];
              if (!v216)
              {
                v218 = i + 1;
                goto LABEL_351;
              }
            }
          }
        }
LABEL_351:
        v227 = (uint64_t *)operator new(0x38uLL);
        v227[4] = v192;
        v227[5] = v190;
        v227[6] = v191;
        *v227 = 0;
        v227[1] = 0;
        v227[2] = (uint64_t)i;
        *v218 = v227;
        if (*v529)
        {
          v529 = (uint64_t **)*v529;
          v227 = *v218;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v530, v227);
        ++v531;
LABEL_354:
        v226 = v192;
        if ((v204 & 1) != 0)
          goto LABEL_355;
LABEL_356:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          buf = __str;
        *(_QWORD *)&v567 = v192;
        v228 = (_QWORD *)*((_QWORD *)&v561 + 1);
        if (*((_QWORD *)&v561 + 1) >= (unint64_t)v562)
        {
          v230 = (_QWORD *)v561;
          v231 = (uint64_t)(*((_QWORD *)&v561 + 1) - v561) >> 5;
          v232 = v231 + 1;
          if ((unint64_t)(v231 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v233 = (uint64_t)&v562[-v561];
          if ((uint64_t)&v562[-v561] >> 4 > v232)
            v232 = v233 >> 4;
          if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFE0)
            v234 = 0x7FFFFFFFFFFFFFFLL;
          else
            v234 = v232;
          if (v234 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v235 = (char *)operator new(32 * v234);
          v236 = &v235[32 * v231];
          *(_OWORD *)v236 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          v237 = buf.__r_.__value_.__r.__words[2];
          memset(&buf, 0, sizeof(buf));
          *((_QWORD *)v236 + 2) = v237;
          *((_QWORD *)v236 + 3) = v192;
          v238 = v236 + 32;
          if (v228 == v230)
          {
            *(_QWORD *)&v561 = &v235[32 * v231];
            *((_QWORD *)&v561 + 1) = v236 + 32;
            v562 = &v235[32 * v234];
            if (v228)
              goto LABEL_376;
          }
          else
          {
            do
            {
              v239 = *((_OWORD *)v228 - 2);
              *((_QWORD *)v236 - 2) = *(v228 - 2);
              *((_OWORD *)v236 - 2) = v239;
              *(v228 - 3) = 0;
              *(v228 - 2) = 0;
              *(v228 - 4) = 0;
              *((_QWORD *)v236 - 1) = *(v228 - 1);
              v236 -= 32;
              v228 -= 4;
            }
            while (v228 != v230);
            v228 = (_QWORD *)*((_QWORD *)&v561 + 1);
            v240 = (_QWORD *)v561;
            *(_QWORD *)&v561 = v236;
            *((_QWORD *)&v561 + 1) = v238;
            v562 = &v235[32 * v234];
            if (v228 != v240)
            {
              do
              {
                if (*((char *)v228 - 9) < 0)
                  operator delete((void *)*(v228 - 4));
                v228 -= 4;
              }
              while (v228 != v240);
              v228 = v240;
            }
            if (v228)
LABEL_376:
              operator delete(v228);
          }
          *((_QWORD *)&v561 + 1) = v238;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          goto LABEL_379;
        }
        v229 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_QWORD *)(*((_QWORD *)&v561 + 1) + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)v228 = v229;
        v228[3] = v567;
        *((_QWORD *)&v561 + 1) = v228 + 4;
LABEL_379:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v241 = __str.__r_.__value_.__l.__size_;
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          v241 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        v190 += v241;
        v525 += v241;
        v189 += 24;
        v192 = v226;
      }
      while (v189 != v517);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v242 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v3 + 23) >= 0)
        v244 = v3;
      else
        v244 = *(_QWORD *)v3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v244;
      _os_log_impl(&dword_1DE3F6000, v242, OS_LOG_TYPE_DEBUG, "  [g2p   input]: %s", (uint8_t *)&buf, 0xCu);
    }
    if (*(char *)(v3 + 23) >= 0)
      v245 = v3;
    else
      v245 = *(_QWORD *)v3;
    Diagnostics::log(7, "  [g2p   input]: %s", v243, v245);
    std::string::basic_string[abi:ne180100]<0>(&buf, "@@");
    memset(&__str, 0, sizeof(__str));
    memset(&__p, 0, sizeof(__p));
    v246 = v556;
    v247 = v557;
    if (v556 == v557)
      goto LABEL_468;
    v248 = 0;
    while (1)
    {
      if (++v248 == *(_DWORD *)(v518 + 12884))
      {
        UTFString::rstrip(&__str);
        EncoderDecoder::decode_chunk_and_merge(v518, (uint64_t)&__str, (kaldi::quasar::TranslationUtil::NbestElement **)&v532, (uint64_t *)&v561);
        v248 = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          *__str.__r_.__value_.__l.__data_ = 0;
          __str.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
        }
      }
      v249 = *(unsigned __int8 *)(v246 + 23);
      if (*(char *)(v246 + 23) < 0)
      {
        v254 = *(_QWORD *)(v246 + 8);
        v250 = buf.__r_.__value_.__l.__size_;
        v251 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v255 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          v255 = buf.__r_.__value_.__l.__size_;
        v253 = v254 - v255;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_415;
      }
      else
      {
        v250 = buf.__r_.__value_.__l.__size_;
        v251 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v252 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          v252 = buf.__r_.__value_.__l.__size_;
        v253 = v249 - v252;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          v254 = *(unsigned __int8 *)(v246 + 23);
LABEL_415:
          v251 = v250;
          if (v254 <= v250)
            goto LABEL_440;
          v256 = 1;
          goto LABEL_417;
        }
        v254 = *(unsigned __int8 *)(v246 + 23);
      }
      if (v254 <= v251)
        goto LABEL_440;
      v256 = 0;
LABEL_417:
      if ((v249 & 0x80) != 0)
      {
        if (v251 == -1)
          goto LABEL_856;
        v260 = *(_QWORD *)(v246 + 8);
        v261 = v260 >= v253;
        v262 = v260 - v253;
        if (!v261)
          goto LABEL_856;
        if (v262 >= v251)
          v258 = v251;
        else
          v258 = v262;
        v259 = *(const std::string::value_type **)v246;
      }
      else
      {
        if (v249 < v253 || v251 == -1)
LABEL_856:
          std::string::__throw_out_of_range[abi:ne180100]();
        if (v249 - v253 >= v251)
          v258 = v251;
        else
          v258 = v249 - v253;
        v259 = (const std::string::value_type *)v246;
      }
      if (v256)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      else
        p_buf = &buf;
      if (!memcmp(&v259[v253], p_buf, v258) && v258 == v251)
      {
        std::string::basic_string(&v559, (const std::string *)v246, 0, v253, (std::allocator<char> *)&v549);
        if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v269 = &v559;
        else
          v269 = (std::string *)v559.__r_.__value_.__r.__words[0];
        if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v270 = HIBYTE(v559.__r_.__value_.__r.__words[2]);
        else
          v270 = v559.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v269, v270);
        v3 = a2;
        if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v559.__r_.__value_.__l.__data_);
        goto LABEL_463;
      }
LABEL_440:
      if ((v249 & 0x80u) == 0)
        v265 = (const std::string::value_type *)v246;
      else
        v265 = *(const std::string::value_type **)v246;
      if ((v249 & 0x80u) == 0)
        v266 = v249;
      else
        v266 = *(_QWORD *)(v246 + 8);
      std::string::append(&__p, v265, v266);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v268 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v268 = __p.__r_.__value_.__l.__size_;
      std::string::append(&__str, (const std::string::value_type *)p_p, v268);
      std::string::append(&__str, " ");
      v3 = a2;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      }
LABEL_463:
      v246 += 24;
      if (v246 == v247)
      {
        v271 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v271 = __str.__r_.__value_.__l.__size_;
        if (v271)
        {
          UTFString::rstrip(&__str);
          EncoderDecoder::decode_chunk_and_merge(v518, (uint64_t)&__str, (kaldi::quasar::TranslationUtil::NbestElement **)&v532, (uint64_t *)&v561);
        }
LABEL_468:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if ((char)v554 < 0)
          operator delete(v552);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v556;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v272 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v273 = a1 + 13;
          if (*((char *)a1 + 127) < 0)
            v273 = (_QWORD *)*v273;
          Censor::global_plaintext(&buf, v3);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v274 = &buf;
          else
            v274 = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v273;
          WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v274;
          _os_log_impl(&dword_1DE3F6000, v272, OS_LOG_TYPE_DEFAULT, "#[%s] NN Model Infer:\n[Input ] - %s", (uint8_t *)&__str, 0x16u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        v275 = a1 + 13;
        if (*((char *)a1 + 127) < 0)
          v275 = (_QWORD *)*v275;
        Censor::global_plaintext(&buf, v3);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v277 = &buf;
        else
          v277 = (std::string *)buf.__r_.__value_.__r.__words[0];
        Diagnostics::log(5, "#[%s] NN Model Infer:\n[Input ] - %s", v276, v275, v277);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        (*(void (**)(_QWORD *, __int128 *, uint64_t ***, void ***))(*a1 + 112))(a1, &v561, &v529, &v532);
        std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v530);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v561;
        std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v532;
        std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        return;
      }
    }
  }
  if (v7 != 7)
    goto LABEL_857;
  if (*(_DWORD *)v6 != 762541172 || *(_DWORD *)((char *)a1 + 155) != 1886154285)
    goto LABEL_857;
LABEL_16:
  if (!a1[28] || !a1[30])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v85 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v87 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v87 = (_QWORD *)*v87;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
      _os_log_impl(&dword_1DE3F6000, v85, OS_LOG_TYPE_ERROR, "#[%s] gets NN Model failed", (uint8_t *)&buf, 0xCu);
    }
    v88 = a1 + 13;
    if (*((char *)a1 + 127) < 0)
      v88 = (_QWORD *)*v88;
    Diagnostics::log(3, "#[%s] gets NN Model failed", v86, v88);
    v89 = operator new(0x30uLL);
    v90 = v89;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = 0;
    v91 = v89 + 3;
    *v89 = &off_1EA936990;
    v89[4] = 0;
    v89[5] = 0;
    *a3 = v89 + 3;
    a3[1] = v89;
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      v92 = 0;
      v93 = 0;
      __str = *(std::string *)v3;
      v564 = -1;
      v565 = -1;
      v94 = v89 + 4;
      v95 = v89 + 5;
      goto LABEL_231;
    }
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
    v167 = v90[5];
    v95 = v90 + 5;
    v93 = v167;
    v94 = v95 - 1;
    v92 = *(v95 - 1);
    v564 = -1;
    v565 = -1;
    if (v92 >= v167)
    {
LABEL_231:
      v168 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - *v91) >> 3);
      v169 = v168 + 1;
      if (v168 + 1 > 0x666666666666666)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v170 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - *v91) >> 3);
      if (2 * v170 > v169)
        v169 = 2 * v170;
      if (v170 >= 0x333333333333333)
        v171 = 0x666666666666666;
      else
        v171 = v169;
      *((_QWORD *)&v567 + 1) = v95;
      if (v171)
      {
LABEL_238:
        v171 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v171);
        goto LABEL_262;
      }
LABEL_261:
      v172 = 0;
LABEL_262:
      v181 = v171 + 40 * v168;
      buf.__r_.__value_.__r.__words[0] = v171;
      buf.__r_.__value_.__l.__size_ = v181;
      *(_QWORD *)&v567 = v171 + 40 * v172;
      v182 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)(v181 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      *(_OWORD *)v181 = v182;
      memset(&__str, 0, sizeof(__str));
      *(_QWORD *)(v181 + 24) = v564;
      *(_QWORD *)(v181 + 32) = v565;
      buf.__r_.__value_.__r.__words[2] = v181 + 40;
      std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v91, &buf);
      v183 = *v94;
      std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
      v184 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      *v94 = v183;
      if (v184 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
LABEL_253:
    v178 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_QWORD *)(v92 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    *(_OWORD *)v92 = v178;
    memset(&__str, 0, sizeof(__str));
    *(_QWORD *)(v92 + 24) = v564;
    *(_QWORD *)(v92 + 32) = v565;
    *v94 = v92 + 40;
    return;
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = a1;
  rep = v12.__d_.__rep_;
  BBPE::encode_and_return_vector(&v549, v13[32], (std::string *)v3);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = (double)((v16.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_DEFAULT, "BBPE Encoder tokenization encode time: %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "BBPE Encoder tokenization encode time: %.3f s", v18, (double)((v17.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*v549 == v549[1])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v173 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 23) >= 0)
        v175 = v3;
      else
        v175 = *(_QWORD *)v3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v175;
      _os_log_impl(&dword_1DE3F6000, v173, OS_LOG_TYPE_DEFAULT, "No BBPE token found with input: %s, ignore!", (uint8_t *)&buf, 0xCu);
    }
    if (*(char *)(v3 + 23) >= 0)
      v176 = v3;
    else
      v176 = *(_QWORD *)v3;
    Diagnostics::log(5, "No BBPE token found with input: %s, ignore!", v174, v176);
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_845;
  }
  std::string::basic_string[abi:ne180100]<0>(&v559, &byte_1DEBD87CE);
  v19 = a1[28];
  v20 = (std::__shared_weak_count *)a1[33];
  v547 = a1[32];
  v548 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v545 = v549;
  v546 = v550;
  if (v550)
  {
    v23 = (unint64_t *)&v550->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v19 + 8))(&v556, v19, &v547, &v545);
  v25 = v546;
  if (v546)
  {
    v26 = (unint64_t *)&v546->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v508 = a3;
  v28 = v548;
  if (v548)
  {
    v29 = (unint64_t *)&v548->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v556;
  v32 = a1;
  if (v557 != v556)
  {
    v33 = 0;
    v513 = *MEMORY[0x1E0DE4F50];
    v511 = MEMORY[0x1E0DE4FB8] + 16;
    v510 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v509 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    do
    {
      v34 = (void (***)(_QWORD, __int128 *))v32[28];
      v35 = *(_OWORD *)(v31 + 16 * v33);
      v544 = v35;
      if (*((_QWORD *)&v35 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      (**v34)(v34, &v544);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v544 + 1);
      if (*((_QWORD *)&v544 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v544 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (void (***)(_QWORD, __int128 *))v32[30];
      v42 = *(_OWORD *)(v556 + 16 * v33);
      v543 = v42;
      if (*((_QWORD *)&v42 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      (**v41)(v41, &v543);
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v543 + 1);
      if (*((_QWORD *)&v543 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v543 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v516 = v33;
      v48 = *(_QWORD *)(v556 + 16 * v33);
      v49 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v49->__shared_owners_ = 0u;
      v50 = (unint64_t *)&v49->__shared_owners_;
      v49[1].__vftable = 0;
      v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936A38;
      *(_OWORD *)&v49[1].__shared_owners_ = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49[1].__vftable, *(const void **)(v48 + 24), *(_QWORD *)(v48 + 32), (uint64_t)(*(_QWORD *)(v48 + 32) - *(_QWORD *)(v48 + 24)) >> 2);
      v532 = (void **)&v49[1].__vftable;
      v533 = v49;
      v514.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v51 = v49;
      v52 = a1[34];
      v541 = v532;
      v542 = v51;
      v523 = v51;
      do
        v53 = __ldxr(v50);
      while (__stxr(v53 + 1, v50));
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&buf);
      v54 = v523[1].__vftable;
      for (j = (int *)v523[1].__shared_owners_;
            v54 != (std::__shared_weak_count_vtbl *)j;
            v54 = (std::__shared_weak_count_vtbl *)((char *)v54 + 4))
      {
        v56 = SLODWORD(v54->~__shared_weak_count);
        if ((v56 - 1) >= 2)
        {
          memset(&__str, 0, sizeof(__str));
          v57 = *(sqlite3_stmt **)(v52 + 88);
          if (v57)
          {
            v58 = sqlite3_bind_int64(v57, 1, v56);
            v59 = v58;
            BBPEVocab::report_error((BBPEVocab *)(v52 + 40), v58, "bind lookup id");
            if (!v59)
            {
              if (sqlite3_step(*(sqlite3_stmt **)(v52 + 88)) == 100)
              {
                v60 = sqlite3_column_text(*(sqlite3_stmt **)(v52 + 88), 0);
                MEMORY[0x1DF0ECA80](&__str, v60);
              }
              sqlite3_reset(*(sqlite3_stmt **)(v52 + 88));
            }
          }
          v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          v62 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v61 = __str.__r_.__value_.__l.__size_;
          if (v61)
          {
            v63 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__str
                : (std::string *)__str.__r_.__value_.__r.__words[0];
            v552 = v63;
            v553 = (std::__shared_weak_count *)(v61 << 32);
            if ((_DWORD)v61)
            {
              v64 = 0;
              do
              {
                memset(&__p, 0, sizeof(__p));
                v65 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v552);
                UTFString::push_back_codepoint<std::string>(&__p, v65);
                if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v52, (unsigned __int8 *)&__p))
                {
                  std::ostream::write();
                }
                else
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                  {
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v68 = &__p;
                    else
                      v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    LODWORD(v561) = 136315138;
                    *(_QWORD *)((char *)&v561 + 4) = v68;
                    _os_log_impl(&dword_1DE3F6000, v66, OS_LOG_TYPE_ERROR, "Found invalid byte token:%s", (uint8_t *)&v561, 0xCu);
                  }
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v69 = &__p;
                  else
                    v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  Diagnostics::log(3, "Found invalid byte token:%s", v67, v69);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v70 = v63->__r_.__value_.__s.__data_[v64];
                v71 = (v70 + 62);
                if (v70 <= 0xEF)
                  v72 = 2;
                else
                  v72 = 3;
                if (v70 <= 0xDF)
                  v73 = v72;
                else
                  v73 = v72 + 1;
                if (v71 >= 0x33)
                  v73 = 1;
                v64 += v73;
                LODWORD(v553) = v64;
                v74 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                v62 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v74 = __str.__r_.__value_.__r.__words[1];
              }
              while (v64 != v74);
            }
          }
          if (v62 < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      std::stringbuf::str();
      buf.__r_.__value_.__r.__words[0] = v513;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + *(_QWORD *)(v513 - 24)) = v510;
      buf.__r_.__value_.__r.__words[2] = v509;
      *(_QWORD *)&v567 = v511;
      if (SBYTE7(v572) < 0)
        operator delete((void *)v571);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0ECF6C](&v573[1]);
      do
        v75 = __ldaxr(v50);
      while (__stlxr(v75 - 1, v50));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
        std::__shared_weak_count::__release_weak(v523);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v76 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = (double)((v77.__d_.__rep_ - v514.__d_.__rep_) / 1000000)
                                                               / 1000.0;
        _os_log_impl(&dword_1DE3F6000, v76, OS_LOG_TYPE_DEFAULT, "BBPE Decoder tokenization decode time: %.3f s", (uint8_t *)&buf, 0xCu);
      }
      v78.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      Diagnostics::log(5, "BBPE Decoder tokenization decode time: %.3f s", v79, (double)((v78.__d_.__rep_ - v514.__d_.__rep_) / 1000000) / 1000.0);
      v80 = HIBYTE(v559.__r_.__value_.__r.__words[2]);
      if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v80 = v559.__r_.__value_.__l.__size_;
      if (v80)
      {
        std::operator+<char>();
        v32 = a1;
      }
      else
      {
        v32 = a1;
        if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&buf, v555.__r_.__value_.__l.__data_, v555.__r_.__value_.__l.__size_);
        else
          buf = v555;
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &buf;
      else
        v81 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v82 = buf.__r_.__value_.__l.__size_;
      std::string::append(&v559, (const std::string::value_type *)v81, v82);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v555.__r_.__value_.__l.__data_);
      if (v533)
      {
        v83 = &v533->__shared_owners_;
        do
          v84 = __ldaxr((unint64_t *)v83);
        while (__stlxr(v84 - 1, (unint64_t *)v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
          std::__shared_weak_count::__release_weak(v533);
        }
      }
      v33 = v516 + 1;
      v31 = v556;
    }
    while (v516 + 1 < (unint64_t)((v557 - v556) >> 4));
  }
  v109 = HIBYTE(v559.__r_.__value_.__r.__words[2]);
  if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v109 = v559.__r_.__value_.__l.__size_;
  if (!v109)
  {
    v185 = (uint64_t *)operator new(0x30uLL);
    v185[1] = 0;
    v185[2] = 0;
    *v185 = (uint64_t)&off_1EA936990;
    v185[3] = 0;
    v185[4] = 0;
    v185[5] = 0;
    *v508 = v185 + 3;
    v508[1] = v185;
    *((_QWORD *)&v567 + 1) = v185 + 5;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(1uLL);
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v567 = buf.__r_.__value_.__r.__words[0] + 40 * v186;
    v187 = std::string::basic_string[abi:ne180100]<0>(buf.__r_.__value_.__l.__data_, &byte_1DEBD87CE);
    v187[3] = -1;
    v187[4] = -1;
    buf.__r_.__value_.__r.__words[2] += 40;
    std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v185 + 3, &buf);
    v188 = v185[4];
    std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
    v185[4] = v188;
    goto LABEL_843;
  }
  v515.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  BBPE::encode_and_return_vector(&v539, v32[34], &v559);
  v110 = (double *)v32[36];
  v111 = v549;
  v112 = v550;
  v537 = v549;
  v538 = v550;
  if (v550)
  {
    v113 = (unint64_t *)&v550->__shared_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  v115 = v539;
  v116 = (uint64_t *)v540;
  v535 = v539;
  v536 = (uint64_t *)v540;
  if (v540)
  {
    v117 = (unint64_t *)&v540->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  v119 = (uint64_t *)operator new(0x30uLL);
  v119[1] = 0;
  v119[2] = 0;
  v119[3] = 0;
  v120 = v119 + 3;
  *v119 = (uint64_t)&off_1EA936990;
  v119[4] = 0;
  v119[5] = 0;
  *v508 = v119 + 3;
  v508[1] = v119;
  if (!*(_QWORD *)v110)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v291 = v515.__d_.__rep_;
    v292 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v292, OS_LOG_TYPE_DEFAULT, "Aligner bypassed, and fallback to single word!", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Aligner bypassed, and fallback to single word!", v293);
    LODWORD(buf.__r_.__value_.__l.__data_) = -1;
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    v294 = v119[4];
    if (v294 >= v119[5])
    {
      v295 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(v120, (__int128 *)&v559, (int *)&buf, (int *)&__str);
    }
    else
    {
      std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>((uint64_t)v120, (__int128 *)&v559, (int *)&buf, (int *)&__str);
      v295 = v294 + 40;
    }
    v119[4] = v295;
    goto LABEL_824;
  }
  *(_QWORD *)&v561 = v111;
  *((_QWORD *)&v561 + 1) = v112;
  if (v112)
  {
    v121 = (unint64_t *)&v112->__shared_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v529 = (uint64_t **)v115;
  v530 = v116;
  if (v116)
  {
    v123 = (unint64_t *)(v116 + 1);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v126 = *v111;
  v125 = v111[1];
  v127 = 0xCCCCCCCCCCCCCCCDLL * ((v115[1] - *v115) >> 3);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v128 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v128, OS_LOG_TYPE_DEBUG, "Starting forward alignment", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "Starting forward alignment", v129);
  memset(&__str, 0, sizeof(__str));
  if ((_DWORD)v127)
  {
    v130 = 0;
    v131 = 0xCCCCCCCCCCCCCCCDLL * ((v125 - v126) >> 3);
    v528 = (uint64_t)(v110 + 13);
    v132 = (double)v131;
    v512 = v116;
    v133 = (double)v127;
    v134 = (v131 + 1);
    v520 = v127;
    v524 = v131;
    v526 = v127;
    do
    {
      v135 = *v529;
      if (0xCCCCCCCCCCCCCCCDLL * (v529[1] - *v529) <= v130)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v136 = v110[8];
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v137 = (uint64_t)&v135[5 * v130];
      v138 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        v140 = v137;
        if (*(char *)(v137 + 23) < 0)
          v140 = *(_QWORD *)v137;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v140;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v130;
        _os_log_impl(&dword_1DE3F6000, v138, OS_LOG_TYPE_DEBUG, "Phoneme Token: %s - %d", (uint8_t *)&buf, 0x12u);
      }
      v141 = v137;
      if (*(char *)(v137 + 23) < 0)
        v141 = *(_QWORD *)v137;
      Diagnostics::log(7, "Phoneme Token: %s - %d", v139, v141, v130);
      prob = FastAlignment::get_prob((FastAlignment *)v110, v528, v137, 0);
      v143 = v130 + 1;
      v144 = DiagonalAlignment::ComputeZ((DiagonalAlignment *)(v130 + 1), v127, v131, v110[7]);
      if ((_DWORD)v131)
      {
        v145 = 0;
        v146 = 0;
        v147 = v144 / v110[9];
        v148 = v136 * prob;
        v149 = (_QWORD *)v561;
        v150 = 1;
        do
        {
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v149[1] - *v149) >> 3) <= v150 - 1)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v151 = v110[7];
          v152 = FastAlignment::get_prob((FastAlignment *)v110, *v149 + v145, v137, 0);
          v153 = v152
               * (exp(-(vabdd_f64((double)v150 / v132, (double)v143 / v133) * v151))
                / v147);
          if (v153 > v148)
          {
            v148 = v153;
            v146 = v150;
          }
          ++v150;
          v145 += 40;
        }
        while (v134 != v150);
        LODWORD(v131) = v524;
        LODWORD(v127) = v526;
        if (v146 > 0)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v154 = Diagnostics_GetLogObject(void)::__profile_log_default;
          v156 = (v146 - 1);
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v156;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v130;
            _os_log_impl(&dword_1DE3F6000, v154, OS_LOG_TYPE_DEBUG, "FWD %d - %d", (uint8_t *)&buf, 0xEu);
          }
          Diagnostics::log(7, "FWD %d - %d", v155, v156, v130);
          v157 = __str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
          {
            v159 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v159 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v160 = (uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 2;
            if (v160 <= v159 + 1)
              v160 = v159 + 1;
            if (__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
              v161 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v161 = v160;
            if (v161)
              v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v161);
            else
              v162 = 0;
            v163 = (unint64_t *)&v162[8 * v159];
            *v163 = v156 | (v130 << 32);
            v158 = (std::string::size_type)(v163 + 1);
            v164 = (char *)__str.__r_.__value_.__l.__size_;
            v165 = __str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
            {
              do
              {
                v166 = *((_QWORD *)v164 - 1);
                v164 -= 8;
                *--v163 = v166;
              }
              while (v164 != (char *)v165);
              v164 = (char *)__str.__r_.__value_.__r.__words[0];
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
            __str.__r_.__value_.__l.__size_ = v158;
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v162[8 * v161];
            if (v164)
              operator delete(v164);
          }
          else
          {
            *(_QWORD *)__str.__r_.__value_.__l.__size_ = v156 | (v130 << 32);
            v158 = v157 + 8;
          }
          __str.__r_.__value_.__l.__size_ = v158;
        }
      }
      ++v130;
    }
    while (v143 != v520);
    v278 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
    v116 = v512;
    if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
    {
      v279 = __str.__r_.__value_.__r.__words[0] + 8;
      if (__str.__r_.__value_.__r.__words[0] + 8 == __str.__r_.__value_.__l.__size_)
      {
        v287 = *(_DWORD *)__str.__r_.__value_.__l.__data_;
      }
      else
      {
        v280 = *(_QWORD *)__str.__r_.__value_.__l.__data_;
        v281 = *(_QWORD *)__str.__r_.__value_.__l.__data_;
        v282 = __str.__r_.__value_.__r.__words[0] + 8;
        v283 = (int *)__str.__r_.__value_.__r.__words[0];
        v284 = (uint64_t *)(__str.__r_.__value_.__r.__words[0] + 8);
        do
        {
          v286 = *v284++;
          v285 = v286;
          if ((int)v281 < (int)v286)
          {
            LODWORD(v281) = v285;
            v283 = (int *)v282;
          }
          v282 = (std::string::size_type)v284;
        }
        while (v284 != (uint64_t *)__str.__r_.__value_.__l.__size_);
        v287 = *v283;
        v288 = (uint64_t *)(__str.__r_.__value_.__r.__words[0] + 8);
        do
        {
          v290 = *v288++;
          v289 = HIDWORD(v290);
          if (SHIDWORD(v280) < SHIDWORD(v290))
          {
            HIDWORD(v280) = v289;
            v278 = (_DWORD *)v279;
          }
          v279 = (std::string::size_type)v288;
        }
        while (v288 != (uint64_t *)__str.__r_.__value_.__l.__size_);
      }
      std::allocate_shared[abi:ne180100]<Array2D<BOOL>,std::allocator<Array2D<BOOL>>,int,int,void>(&v555, v287 + 1, v278[1] + 1);
      v298 = __str.__r_.__value_.__l.__size_;
      v297 = (unsigned int *)__str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
      {
        v299 = *(_DWORD *)v555.__r_.__value_.__l.__data_;
        v300 = *(_DWORD *)(v555.__r_.__value_.__r.__words[0] + 4);
        v301 = *(_DWORD *)v555.__r_.__value_.__l.__data_ - 1;
        v302 = *(_QWORD *)(v555.__r_.__value_.__r.__words[0] + 8);
        do
        {
          v303 = *v297;
          v304 = v297[1];
          v297 += 2;
          if (v299 <= v303)
            v303 = v301;
          if (v300 <= v304)
            v304 = v300 - 1;
          *(_QWORD *)(v302 + (((unint64_t)(v303 + v304 * v299) >> 3) & 0x1FFFFFF8)) |= 1 << (v303 + v304 * v299);
        }
        while (v297 != (unsigned int *)v298);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v305 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v305, OS_LOG_TYPE_DEBUG, "Starting backward alignment", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(7, "Starting backward alignment", v306);
      memset(&__p, 0, sizeof(__p));
      if ((_DWORD)v131)
      {
        v307 = v127;
        v308 = 0;
        v309 = (v307 + 1);
        v521 = v131;
        do
        {
          v310 = *(_QWORD *)v561;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v561 + 8) - *(_QWORD *)v561) >> 3) <= v308)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v311 = v110[11];
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v312 = v310 + 40 * v308;
          v313 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v315 = v312;
            if (*(char *)(v312 + 23) < 0)
              v315 = *(_QWORD *)v312;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v315;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v308;
            _os_log_impl(&dword_1DE3F6000, v313, OS_LOG_TYPE_DEBUG, "Text Token: %s - %d", (uint8_t *)&buf, 0x12u);
          }
          v316 = v312;
          if (*(char *)(v312 + 23) < 0)
            v316 = *(_QWORD *)v312;
          Diagnostics::log(7, "Text Token: %s - %d", v314, v316, v308);
          v317 = FastAlignment::get_prob((FastAlignment *)v110, v528, v312, 1);
          v318 = v308 + 1;
          v319 = DiagonalAlignment::ComputeZ((DiagonalAlignment *)(v308 + 1), v131, v526, v110[10]);
          v320 = 0;
          v321 = 0;
          v322 = v319 / v110[12];
          v323 = v311 * v317;
          v324 = 1;
          do
          {
            if (0xCCCCCCCCCCCCCCCDLL * (v529[1] - *v529) <= v324 - 1)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v325 = v110[10];
            v326 = FastAlignment::get_prob((FastAlignment *)v110, (uint64_t)&(*v529)[v320], v312, 1);
            v327 = v326
                 * (exp(-(vabdd_f64((double)v324 / v133, (double)v318 / v132) * v325))
                  / v322);
            if (v327 > v323)
            {
              v321 = v324;
              v323 = v327;
            }
            ++v324;
            v320 += 5;
          }
          while (v309 != v324);
          LODWORD(v131) = v524;
          if (v321 > 0)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v328 = Diagnostics_GetLogObject(void)::__profile_log_default;
            v330 = (v321 - 1);
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v308;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v330;
              _os_log_impl(&dword_1DE3F6000, v328, OS_LOG_TYPE_DEBUG, "BWD %d - %d", (uint8_t *)&buf, 0xEu);
            }
            Diagnostics::log(7, "BWD %d - %d", v329, v308, v330);
            v331 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v333 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v333 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v334 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
              if (v334 <= v333 + 1)
                v334 = v333 + 1;
              if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                v335 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v335 = v334;
              if (v335)
                v336 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v335);
              else
                v336 = 0;
              v337 = (unint64_t *)&v336[8 * v333];
              *v337 = v308 | (v330 << 32);
              v332 = (std::string::size_type)(v337 + 1);
              v338 = (char *)__p.__r_.__value_.__l.__size_;
              v339 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  v340 = *((_QWORD *)v338 - 1);
                  v338 -= 8;
                  *--v337 = v340;
                }
                while (v338 != (char *)v339);
                v338 = (char *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
              __p.__r_.__value_.__l.__size_ = v332;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v336[8 * v335];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_QWORD *)__p.__r_.__value_.__l.__size_ = v308 | (v330 << 32);
              v332 = v331 + 8;
            }
            __p.__r_.__value_.__l.__size_ = v332;
          }
          ++v308;
        }
        while (v318 != v521);
        v341 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        v116 = v512;
        if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        {
          v342 = __p.__r_.__value_.__r.__words[0] + 8;
          if (__p.__r_.__value_.__r.__words[0] + 8 == __p.__r_.__value_.__l.__size_)
          {
            v350 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
          }
          else
          {
            v343 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v344 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v345 = __p.__r_.__value_.__r.__words[0] + 8;
            v346 = (int *)__p.__r_.__value_.__r.__words[0];
            v347 = (uint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v349 = *v347++;
              v348 = v349;
              if ((int)v344 < (int)v349)
              {
                LODWORD(v344) = v348;
                v346 = (int *)v345;
              }
              v345 = (std::string::size_type)v347;
            }
            while (v347 != (uint64_t *)__p.__r_.__value_.__l.__size_);
            v350 = *v346;
            v351 = (uint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v353 = *v351++;
              v352 = HIDWORD(v353);
              if (SHIDWORD(v343) < SHIDWORD(v353))
              {
                HIDWORD(v343) = v352;
                v341 = (_DWORD *)v342;
              }
              v342 = (std::string::size_type)v351;
            }
            while (v351 != (uint64_t *)__p.__r_.__value_.__l.__size_);
          }
          std::allocate_shared[abi:ne180100]<Array2D<BOOL>,std::allocator<Array2D<BOOL>>,int,int,void>(&v552, v350 + 1, v341[1] + 1);
          v356 = __p.__r_.__value_.__l.__size_;
          v355 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
          {
            v357 = *(_DWORD *)v552;
            v358 = *((_DWORD *)v552 + 1);
            v359 = *(_DWORD *)v552 - 1;
            v360 = *((_QWORD *)v552 + 1);
            do
            {
              v361 = *v355;
              v362 = v355[1];
              v355 += 2;
              if (v357 <= v361)
                v361 = v359;
              if (v358 <= v362)
                v362 = v358 - 1;
              *(_QWORD *)(v360 + (((unint64_t)(v361 + v362 * v357) >> 3) & 0x1FFFFFF8)) |= 1 << (v361 + v362 * v357);
            }
            while (v355 != (unsigned int *)v356);
          }
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
          v567 = 0u;
          v568 = 0u;
          v569 = 0u;
          v570 = 0u;
          v571 = 0u;
          v572 = 0u;
          memset(v573, 0, sizeof(v573));
          v574 = 0u;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9209A0;
          v575[0] = 0;
          v363 = operator new(8uLL);
          *v363 = 1;
          *(_QWORD *)&v574 = v363;
          *((_QWORD *)&v574 + 1) = v363 + 1;
          v575[0] = v363 + 1;
          v365 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, 2uLL);
          v365[1] = 0xFFFFFFFFLL;
          v366 = (char *)(v365 + 1);
          v367 = (char *)&v365[v364];
          v368 = (char *)(v365 + 2);
          v369 = (char *)*((_QWORD *)&v574 + 1);
          v370 = (char *)v574;
          if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
          {
            do
            {
              v371 = *((_QWORD *)v369 - 1);
              v369 -= 8;
              *((_QWORD *)v366 - 1) = v371;
              v366 -= 8;
            }
            while (v369 != v370);
            v369 = (char *)v574;
          }
          *(_QWORD *)&v574 = v366;
          *((_QWORD *)&v574 + 1) = v365 + 2;
          v575[0] = &v365[v364];
          if (v369)
          {
            operator delete(v369);
            v367 = (char *)v575[0];
          }
          *((_QWORD *)&v574 + 1) = v365 + 2;
          if (v368 >= v367)
          {
            v373 = (uint64_t)&v368[-v574] >> 3;
            if ((unint64_t)(v373 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v374 = (uint64_t)&v367[-v574];
            v375 = v374 >> 2;
            if (v374 >> 2 <= (unint64_t)(v373 + 1))
              v375 = v373 + 1;
            if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFF8)
              v376 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v376 = v375;
            if (v376)
              v377 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, v376);
            else
              v377 = 0;
            v378 = &v377[8 * v373];
            v379 = &v377[8 * v376];
            *(_QWORD *)v378 = 0x100000000;
            v372 = v378 + 8;
            v380 = (char *)*((_QWORD *)&v574 + 1);
            v381 = (char *)v574;
            if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
            {
              do
              {
                v382 = *((_QWORD *)v380 - 1);
                v380 -= 8;
                *((_QWORD *)v378 - 1) = v382;
                v378 -= 8;
              }
              while (v380 != v381);
              v380 = (char *)v574;
            }
            *(_QWORD *)&v574 = v378;
            *((_QWORD *)&v574 + 1) = v372;
            v575[0] = v379;
            if (v380)
              operator delete(v380);
          }
          else
          {
            v365[2] = 0x100000000;
            v372 = v365 + 3;
          }
          *((_QWORD *)&v574 + 1) = v372;
          if ((unint64_t)v372 >= v575[0])
          {
            v384 = (uint64_t)((uint64_t)v372 - v574) >> 3;
            if ((unint64_t)(v384 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v385 = (uint64_t)(v575[0] - v574) >> 2;
            if (v385 <= v384 + 1)
              v385 = v384 + 1;
            if (v575[0] - (_QWORD)v574 >= 0x7FFFFFFFFFFFFFF8uLL)
              v386 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v386 = v385;
            if (v386)
              v387 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, v386);
            else
              v387 = 0;
            v388 = &v387[8 * v384];
            v389 = &v387[8 * v386];
            *(_QWORD *)v388 = 0xFFFFFFFF00000000;
            v383 = v388 + 8;
            v390 = (char *)*((_QWORD *)&v574 + 1);
            v391 = (char *)v574;
            if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
            {
              do
              {
                v392 = *((_QWORD *)v390 - 1);
                v390 -= 8;
                *((_QWORD *)v388 - 1) = v392;
                v388 -= 8;
              }
              while (v390 != v391);
              v390 = (char *)v574;
            }
            *(_QWORD *)&v574 = v388;
            *((_QWORD *)&v574 + 1) = v383;
            v575[0] = v389;
            if (v390)
              operator delete(v390);
          }
          else
          {
            *v372 = 0xFFFFFFFF00000000;
            v383 = v372 + 1;
          }
          *((_QWORD *)&v574 + 1) = v383;
          if ((unint64_t)v383 >= v575[0])
          {
            v394 = (uint64_t)((uint64_t)v383 - v574) >> 3;
            if ((unint64_t)(v394 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v395 = (uint64_t)(v575[0] - v574) >> 2;
            if (v395 <= v394 + 1)
              v395 = v394 + 1;
            if (v575[0] - (_QWORD)v574 >= 0x7FFFFFFFFFFFFFF8uLL)
              v396 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v396 = v395;
            if (v396)
              v397 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, v396);
            else
              v397 = 0;
            v398 = &v397[8 * v394];
            v399 = &v397[8 * v396];
            *(_QWORD *)v398 = 0x100000001;
            v393 = v398 + 8;
            v400 = (char *)*((_QWORD *)&v574 + 1);
            v401 = (char *)v574;
            if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
            {
              do
              {
                v402 = *((_QWORD *)v400 - 1);
                v400 -= 8;
                *((_QWORD *)v398 - 1) = v402;
                v398 -= 8;
              }
              while (v400 != v401);
              v400 = (char *)v574;
            }
            *(_QWORD *)&v574 = v398;
            *((_QWORD *)&v574 + 1) = v393;
            v575[0] = v399;
            if (v400)
              operator delete(v400);
          }
          else
          {
            *v383 = 0x100000001;
            v393 = v383 + 1;
          }
          *((_QWORD *)&v574 + 1) = v393;
          if ((unint64_t)v393 >= v575[0])
          {
            v404 = (uint64_t)((uint64_t)v393 - v574) >> 3;
            if ((unint64_t)(v404 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v405 = (uint64_t)(v575[0] - v574) >> 2;
            if (v405 <= v404 + 1)
              v405 = v404 + 1;
            if (v575[0] - (_QWORD)v574 >= 0x7FFFFFFFFFFFFFF8uLL)
              v406 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v406 = v405;
            if (v406)
              v407 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, v406);
            else
              v407 = 0;
            v408 = &v407[8 * v404];
            v409 = &v407[8 * v406];
            *(_QWORD *)v408 = 0x1FFFFFFFFLL;
            v403 = v408 + 8;
            v410 = (char *)*((_QWORD *)&v574 + 1);
            v411 = (char *)v574;
            if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
            {
              do
              {
                v412 = *((_QWORD *)v410 - 1);
                v410 -= 8;
                *((_QWORD *)v408 - 1) = v412;
                v408 -= 8;
              }
              while (v410 != v411);
              v410 = (char *)v574;
            }
            *(_QWORD *)&v574 = v408;
            *((_QWORD *)&v574 + 1) = v403;
            v575[0] = v409;
            if (v410)
              operator delete(v410);
          }
          else
          {
            *v393 = 0x1FFFFFFFFLL;
            v403 = v393 + 1;
          }
          *((_QWORD *)&v574 + 1) = v403;
          if ((unint64_t)v403 >= v575[0])
          {
            v414 = (uint64_t)((uint64_t)v403 - v574) >> 3;
            if ((unint64_t)(v414 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v415 = (uint64_t)(v575[0] - v574) >> 2;
            if (v415 <= v414 + 1)
              v415 = v414 + 1;
            if (v575[0] - (_QWORD)v574 >= 0x7FFFFFFFFFFFFFF8uLL)
              v416 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v416 = v415;
            if (v416)
              v417 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, v416);
            else
              v417 = 0;
            v418 = &v417[8 * v414];
            v419 = &v417[8 * v416];
            *(_QWORD *)v418 = 0xFFFFFFFF00000001;
            v413 = v418 + 8;
            v420 = (char *)*((_QWORD *)&v574 + 1);
            v421 = (char *)v574;
            if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
            {
              do
              {
                v422 = *((_QWORD *)v420 - 1);
                v420 -= 8;
                *((_QWORD *)v418 - 1) = v422;
                v418 -= 8;
              }
              while (v420 != v421);
              v420 = (char *)v574;
            }
            *(_QWORD *)&v574 = v418;
            *((_QWORD *)&v574 + 1) = v413;
            v575[0] = v419;
            if (v420)
              operator delete(v420);
          }
          else
          {
            *v403 = 0xFFFFFFFF00000001;
            v413 = v403 + 1;
          }
          *((_QWORD *)&v574 + 1) = v413;
          if ((unint64_t)v413 >= v575[0])
          {
            v424 = (uint64_t)((uint64_t)v413 - v574) >> 3;
            if ((unint64_t)(v424 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v425 = (uint64_t)(v575[0] - v574) >> 2;
            if (v425 <= v424 + 1)
              v425 = v424 + 1;
            if (v575[0] - (_QWORD)v574 >= 0x7FFFFFFFFFFFFFF8uLL)
              v426 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v426 = v425;
            if (v426)
              v427 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v575, v426);
            else
              v427 = 0;
            v428 = &v427[8 * v424];
            v429 = &v427[8 * v426];
            *(_QWORD *)v428 = -1;
            v423 = v428 + 8;
            v430 = (char *)*((_QWORD *)&v574 + 1);
            v431 = (char *)v574;
            if (*((_QWORD *)&v574 + 1) != (_QWORD)v574)
            {
              do
              {
                v432 = *((_QWORD *)v430 - 1);
                v430 -= 8;
                *((_QWORD *)v428 - 1) = v432;
                v428 -= 8;
              }
              while (v430 != v431);
              v430 = (char *)v574;
            }
            *(_QWORD *)&v574 = v428;
            *((_QWORD *)&v574 + 1) = v423;
            v575[0] = v429;
            if (v430)
              operator delete(v430);
          }
          else
          {
            *v413 = -1;
            v423 = v413 + 1;
          }
          *((_QWORD *)&v574 + 1) = v423;
          DiagRefineMergeAlignment::apply((uint64_t)&buf, (uint32x2_t *)v555.__r_.__value_.__l.__data_, (uint32x2_t *)v552, &v532);
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9209A0;
          if ((_QWORD)v574)
          {
            *((_QWORD *)&v574 + 1) = v574;
            operator delete((void *)v574);
          }
          if (v573[1])
            operator delete(v573[1]);
          if ((_QWORD)v572)
            operator delete((void *)v572);
          if (*((_QWORD *)&v570 + 1))
            operator delete(*((void **)&v570 + 1));
          if (*((_QWORD *)&v568 + 1))
            operator delete(*((void **)&v568 + 1));
          if (buf.__r_.__value_.__r.__words[2])
            operator delete((void *)buf.__r_.__value_.__r.__words[2]);
          v433 = v553;
          if (v553)
          {
            v434 = (unint64_t *)&v553->__shared_owners_;
            do
              v435 = __ldaxr(v434);
            while (__stlxr(v435 - 1, v434));
            if (!v435)
            {
              ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
              std::__shared_weak_count::__release_weak(v433);
            }
          }
          v341 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_707;
        }
      }
      else
      {
        v341 = 0;
      }
      v354 = (std::__shared_weak_count *)operator new(0x30uLL);
      v354->__shared_owners_ = 0;
      v354->__shared_weak_owners_ = 0;
      v354->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936920;
      v354[1].__shared_owners_ = 0;
      v354[1].__shared_weak_owners_ = 0;
      v354[1].__vftable = 0;
      v532 = (void **)&v354[1].__vftable;
      v533 = v354;
LABEL_707:
      if (v341)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v341;
        operator delete(v341);
      }
      v436 = (std::__shared_weak_count *)v555.__r_.__value_.__l.__size_;
      if (v555.__r_.__value_.__l.__size_)
      {
        v437 = (unint64_t *)(v555.__r_.__value_.__l.__size_ + 8);
        do
          v438 = __ldaxr(v437);
        while (__stlxr(v438 - 1, v437));
        if (!v438)
        {
          ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
          std::__shared_weak_count::__release_weak(v436);
        }
      }
      v278 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_715;
    }
  }
  else
  {
    v278 = 0;
  }
  v296 = (std::__shared_weak_count *)operator new(0x30uLL);
  v296->__shared_owners_ = 0;
  v296->__shared_weak_owners_ = 0;
  v296->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936920;
  v296[1].__shared_owners_ = 0;
  v296[1].__shared_weak_owners_ = 0;
  v296[1].__vftable = 0;
  v532 = (void **)&v296[1].__vftable;
  v533 = v296;
LABEL_715:
  if (v278)
  {
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v278;
    operator delete(v278);
  }
  if (v116)
  {
    v439 = (unint64_t *)(v116 + 1);
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      (*(void (**)(uint64_t *))(*v116 + 16))(v116);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v116);
    }
  }
  v441 = (std::__shared_weak_count *)*((_QWORD *)&v561 + 1);
  if (*((_QWORD *)&v561 + 1))
  {
    v442 = (unint64_t *)(*((_QWORD *)&v561 + 1) + 8);
    do
      v443 = __ldaxr(v442);
    while (__stlxr(v443 - 1, v442));
    if (!v443)
    {
      ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
      std::__shared_weak_count::__release_weak(v441);
    }
  }
  v444 = (unsigned int *)*v532;
  v445 = (unsigned int *)v532[1];
  if (*v532 == v445)
    goto LABEL_814;
  v446 = 0;
  v447 = "Combined %d - %d";
  while (1)
  {
    v448 = *v444;
    v449 = v444[1];
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v450 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v448;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v449;
      _os_log_impl(&dword_1DE3F6000, v450, OS_LOG_TYPE_DEBUG, "Combined %d - %d", (uint8_t *)&buf, 0xEu);
    }
    Diagnostics::log(7, v447, v451, v448, v449);
    if (0xCCCCCCCCCCCCCCCDLL * ((v535[1] - *v535) >> 3) <= (int)v449)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    if (*(_DWORD *)(*v535 + 40 * (int)v449 + 32))
      break;
    v449 = v446;
LABEL_794:
    v444 += 2;
    v446 = v449;
    if (v444 == v445)
      goto LABEL_814;
  }
  if ((int)v449 >= (int)v446)
  {
    if ((int)v449 > (int)v446 + 1)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v479 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v449;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v446;
        _os_log_impl(&dword_1DE3F6000, v479, OS_LOG_TYPE_INFO, "Found missing phoneme token case from alignments: cur: %d, prev: %d, fall back!", (uint8_t *)&buf, 0xEu);
      }
      v478 = "Found missing phoneme token case from alignments: cur: %d, prev: %d, fall back!";
      goto LABEL_806;
    }
    memset(&buf, 0, sizeof(buf));
    v452 = HIBYTE(v559.__r_.__value_.__r.__words[2]);
    if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v452 = v559.__r_.__value_.__l.__size_;
    if (v452)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((v535[1] - *v535) >> 3) <= (int)v449)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      std::string::basic_string(&__str, &v559, *(int *)(*v535 + 40 * (int)v449 + 28), *(int *)(*v535 + 40 * (int)v449 + 32), (std::allocator<char> *)&__p);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      buf = __str;
    }
    else
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((v535[1] - *v535) >> 3) <= (int)v449)
        goto LABEL_864;
      std::string::operator=(&buf, (const std::string *)(*v535 + 40 * (int)v449));
    }
    v453 = (int)v448;
    v454 = *v508;
    v455 = (*v508)[1];
    if (**v508 != v455 && (_DWORD)v449 == (_DWORD)v446)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((v537[1] - *v537) >> 3) <= v453)
LABEL_864:
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v456 = *v537 + 40 * (int)v453;
      v458 = *(int *)(v456 + 28);
      v457 = *(int *)(v456 + 32);
      *(_QWORD *)(v455 - 8) = v457 + v458;
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      FastAlignment::shift_spaces(*(unsigned int *)(v455 - 16), (int *)&__str, v457 + v458, (int *)&__p, (uint64_t *)a2);
      v459 = *(_QWORD *)(v455 - 8);
      *(_QWORD *)(v455 - 16) += SLODWORD(__str.__r_.__value_.__l.__data_);
      *(_QWORD *)(v455 - 8) = v459 - SLODWORD(__p.__r_.__value_.__l.__data_);
      goto LABEL_792;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v555.__r_.__value_.__l.__data_) = 0;
    v460 = v537;
    if (0xCCCCCCCCCCCCCCCDLL * ((v537[1] - *v537) >> 3) <= v453)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v461 = v445;
    FastAlignment::shift_spaces(*(unsigned int *)(*v537 + 40 * (int)v453 + 28), (int *)&__p, *(_DWORD *)(*v537 + 40 * (int)v453 + 32) + *(_DWORD *)(*v537 + 40 * (int)v453 + 28), (int *)&v555, (uint64_t *)a2);
    if (0xCCCCCCCCCCCCCCCDLL * ((v460[1] - *v460) >> 3) <= v453)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v462 = v447;
    v463 = *v460 + 40 * (int)v453;
    v464 = *(int *)(v463 + 28);
    v465 = SLODWORD(__p.__r_.__value_.__l.__data_) + v464;
    LODWORD(v552) = LODWORD(__p.__r_.__value_.__l.__data_) + v464;
    v466 = *(_DWORD *)(v463 + 32) + v464 - LODWORD(v555.__r_.__value_.__l.__data_);
    v551 = v466;
    v467 = v454[1];
    if (v467 == *v454)
    {
      if (v467 < v454[2])
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v454[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          v469 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v467 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)v467 = v469;
        }
        *(_QWORD *)(v467 + 24) = (int)v465;
        *(_QWORD *)(v467 + 32) = v466;
        goto LABEL_789;
      }
LABEL_780:
      v474 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string&,int &,int &>(v454, (__int128 *)&buf, (int *)&v552, &v551);
LABEL_790:
      v447 = v462;
      v454[1] = v474;
LABEL_791:
      v445 = v461;
LABEL_792:
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_794;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!buf.__r_.__value_.__l.__size_)
        goto LABEL_773;
      v468 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&buf.__r_.__value_.__s + 23))
        goto LABEL_773;
      v468 = &buf;
    }
    if (v468->__r_.__value_.__s.__data_[0] == 32)
    {
      if (*(_QWORD *)(v467 - 16) == v465 && *(_QWORD *)(v467 - 8) == v466)
      {
        std::operator+<char>();
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v470 = &__str;
        else
          v470 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v471 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v471 = __str.__r_.__value_.__l.__size_;
        std::string::append((std::string *)(v467 - 40), (const std::string::value_type *)v470, v471);
        v447 = v462;
        v445 = v461;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_792;
      }
      if (v467 < v454[2])
      {
        if ((*((_BYTE *)&buf.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v454[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          v475 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v467 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)v467 = v475;
        }
        *(_QWORD *)(v467 + 24) = v465;
        *(_QWORD *)(v467 + 32) = v466;
LABEL_789:
        v474 = v467 + 40;
        v454[1] = v467 + 40;
        goto LABEL_790;
      }
      goto LABEL_780;
    }
LABEL_773:
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v472 = &buf;
    else
      v472 = (std::string *)buf.__r_.__value_.__r.__words[0];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v473 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    else
      v473 = buf.__r_.__value_.__l.__size_;
    std::string::append((std::string *)(v467 - 40), (const std::string::value_type *)v472, v473);
    *(_QWORD *)(v467 - 8) = v466;
    v447 = v462;
    goto LABEL_791;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v476 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v449;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v446;
    _os_log_impl(&dword_1DE3F6000, v476, OS_LOG_TYPE_INFO, "Found non-monotonic case from alignments: cur: %d, prev: %d, fall back!", (uint8_t *)&buf, 0xEu);
  }
  v478 = "Found non-monotonic case from alignments: cur: %d, prev: %d, fall back!";
LABEL_806:
  Diagnostics::log(6, v478, v477, v449, v446);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v480 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v480, OS_LOG_TYPE_DEFAULT, "Aligner failed to align, and fallback to single word!", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Aligner failed to align, and fallback to single word!", v481);
  v482 = *v508;
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__clear[abi:ne180100](*v508);
  LODWORD(buf.__r_.__value_.__l.__data_) = -1;
  LODWORD(__str.__r_.__value_.__l.__data_) = -1;
  v483 = v482[1];
  if (v483 >= v482[2])
  {
    v484 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(v482, (__int128 *)&v559, (int *)&buf, (int *)&__str);
  }
  else
  {
    std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>((uint64_t)v482, (__int128 *)&v559, (int *)&buf, (int *)&__str);
    v484 = v483 + 40;
  }
  v482[1] = v484;
LABEL_814:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v291 = v515.__d_.__rep_;
  v485 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v485, OS_LOG_TYPE_DEFAULT, "Aligner Done...", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Aligner Done...", v486);
  v487 = v533;
  if (v533)
  {
    v488 = &v533->__shared_owners_;
    do
      v489 = __ldaxr((unint64_t *)v488);
    while (__stlxr(v489 - 1, (unint64_t *)v488));
    if (!v489)
    {
      ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
      std::__shared_weak_count::__release_weak(v487);
    }
  }
  v116 = v536;
LABEL_824:
  if (v116)
  {
    v490 = (unint64_t *)(v116 + 1);
    do
      v491 = __ldaxr(v490);
    while (__stlxr(v491 - 1, v490));
    if (!v491)
    {
      (*(void (**)(uint64_t *))(*v116 + 16))(v116);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v116);
    }
  }
  v492 = v538;
  if (v538)
  {
    v493 = (unint64_t *)&v538->__shared_owners_;
    do
      v494 = __ldaxr(v493);
    while (__stlxr(v494 - 1, v493));
    if (!v494)
    {
      ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
      std::__shared_weak_count::__release_weak(v492);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v495 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v496.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = (double)((v496.__d_.__rep_ - v291) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v495, OS_LOG_TYPE_DEFAULT, "Fast align time: %.4f s", (uint8_t *)&buf, 0xCu);
  }
  v497.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Fast align time: %.4f s", v498, (double)((v497.__d_.__rep_ - v291) / 1000000) / 1000.0);
  v499 = v540;
  if (v540)
  {
    v500 = (unint64_t *)&v540->__shared_owners_;
    do
      v501 = __ldaxr(v500);
    while (__stlxr(v501 - 1, v500));
    if (!v501)
    {
      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
      std::__shared_weak_count::__release_weak(v499);
    }
  }
LABEL_843:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v556;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v559.__r_.__value_.__l.__data_);
LABEL_845:
  v502 = v550;
  if (v550)
  {
    v503 = (unint64_t *)&v550->__shared_owners_;
    do
      v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }
}

void sub_1DE967BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *a67;
  char a72;
  uint64_t v72;
  uint64_t v73;

  *(_QWORD *)(v72 + 8) = v73;
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  STACK[0x220] = (unint64_t)&a64;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (a72 < 0)
    operator delete(a67);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t FrontendNNModule::post_fix@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  uint8_t buf[4];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    v6 = (_QWORD *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315138;
    v10 = v6;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_ERROR, "No implementation for post-fix: %s", buf, 0xCu);
  }
  v7 = (_QWORD *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    v7 = (_QWORD *)*v7;
  result = Diagnostics::log(3, "No implementation for post-fix: %s", v5, v7);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t FrontendNNModule::reconstruct_from_single_token(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  unint64_t v17;
  unsigned int *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  std::string::size_type v38;
  _OWORD *v39;
  uint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string::size_type v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  std::string v71;
  std::string v72;
  __int128 __p;
  __int128 v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  char v83[9];

  v4 = *(_QWORD *)(a1[39] - 16);
  v6 = *(uint64_t **)(a2 + 24);
  v7 = *v6;
  v8 = v6[1];
  if ((_QWORD *)(v4 + 8) != v5)
  {
    if (v7 != v8)
    {
      if ((_QWORD *)(v4 + 8) == v9)
        v10 = 0;
      else
        v10 = (std::string *)(v9[5] + 8);
      std::string::operator=(v10 + 1, (const std::string *)a2);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(a1 + 4, (__int128 *)(a1[39] - 16));
      v63 = a1[38];
      for (result = a1[39];
            result != v63;
      a1[39] = v63;
      return result;
    }
    return (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
  }
  if (v7 == v8)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
  v68 = a1;
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  v12 = *(uint64_t **)(a2 + 24);
  v13 = *v12;
  if (v12[1] != *v12)
  {
    v14 = v11;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v69 = a1 + 4;
    v70 = *(_QWORD *)(v11 + 8);
    do
    {
      v18 = (unsigned int *)(v13 + 80 * v15);
      if (v17 < *v18)
      {
        v19 = operator new(0x30uLL);
        *(_OWORD *)((char *)v19 + 8) = 0u;
        *(_QWORD *)v19 = &off_1EA932198;
        v71.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
        v19[2] = 0u;
        *((_QWORD *)v19 + 3) = v19 + 2;
        v20 = (uint64_t)v19 + 24;
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v19 + 24;
        v82 = 0;
        v80 = 0u;
        v81 = 0u;
        LODWORD(v78) = 1952807028;
        std::string::basic_string(&v72, (const std::string *)a2, v16, *v18 - v17, (std::allocator<char> *)&v77);
        if (SBYTE7(v81) < 0)
          operator delete((void *)v80);
        v80 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
        *(_QWORD *)&v81 = *((_QWORD *)&v72.__r_.__value_.__l + 2);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v81 + 1, *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56));
        v21 = BYTE7(v81);
        if (SBYTE7(v81) < 0)
          v21 = *((_QWORD *)&v80 + 1);
        *((_QWORD *)&v78 + 1) = v17 + v70;
        v79 = v21;
        Agglomerate::set<TokenBasicItem>(v20, &v78);
        v22 = v79;
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v69, (__int128 *)&v71);
        v23 = v82;
        if (v82)
        {
          p_shared_owners = (unint64_t *)&v82->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (SBYTE7(v81) < 0)
          operator delete((void *)v80);
        size = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
        if (v71.__r_.__value_.__l.__size_)
        {
          v27 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v16 += v22;
        v17 += v22;
      }
      v29 = operator new(0x30uLL);
      *(_OWORD *)((char *)v29 + 8) = 0u;
      *(_QWORD *)v29 = &off_1EA932198;
      *((_QWORD *)&v77 + 1) = v29;
      v29[2] = 0u;
      *((_QWORD *)v29 + 3) = v29 + 2;
      *(_QWORD *)&v77 = (char *)v29 + 24;
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
      LODWORD(v78) = 1952807028;
      std::string::operator=((std::string *)&v80, (const std::string *)(v13 + 80 * v15 + 32));
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v81 + 1, *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56));
      v30 = v13 + 80 * v15;
      if (*(char *)(v30 + 31) < 0)
        v31 = *(_QWORD *)(v30 + 16);
      else
        v31 = *(unsigned __int8 *)(v30 + 31);
      v79 = v31;
      *((_QWORD *)&v78 + 1) = v70 + *v18;
      v32 = v77;
      Agglomerate::set<TokenBasicItem>(v77, &v78);
      v33 = v79;
      if ((SBYTE7(v81) & 0x80u) == 0)
        v34 = BYTE7(v81);
      else
        v34 = *((_QWORD *)&v80 + 1);
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
      if (!v35[5])
      {
        v36 = (_QWORD *)operator new();
        *v36 = &off_1EA922EC8;
        v37 = v35[5];
        v35[5] = (uint64_t)v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v69, &v77);
      v17 += v33;
      v16 += v34;
      if (-1
         - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - **(_QWORD **)(a2 + 24)) >> 4) == v15)
      {
        v38 = *(unsigned __int8 *)(a2 + 23);
        if ((v38 & 0x80u) != 0)
          v38 = *(_QWORD *)(a2 + 8);
        if (v16 < v38)
        {
          v39 = operator new(0x30uLL);
          *(_OWORD *)((char *)v39 + 8) = 0u;
          *(_QWORD *)v39 = &off_1EA932198;
          v39[2] = 0u;
          *((_QWORD *)v39 + 3) = v39 + 2;
          v40 = (uint64_t)v39 + 24;
          *(_QWORD *)&v76 = (char *)v39 + 24;
          *((_QWORD *)&v76 + 1) = v39;
          v75 = 0;
          __p = 0u;
          v74 = 0u;
          LODWORD(v72.__r_.__value_.__l.__data_) = 1952807028;
          std::string::basic_string(&v71, (const std::string *)a2, v16, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v83);
          if (SBYTE7(v74) < 0)
            operator delete((void *)__p);
          __p = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
          *(_QWORD *)&v74 = *((_QWORD *)&v71.__r_.__value_.__l + 2);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v74 + 1, *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56));
          v41 = BYTE7(v74);
          if (SBYTE7(v74) < 0)
            v41 = *((_QWORD *)&__p + 1);
          v72.__r_.__value_.__l.__size_ = v17 + v70;
          v72.__r_.__value_.__r.__words[2] = v41;
          Agglomerate::set<TokenBasicItem>(v40, (__int128 *)&v72);
          v42 = BYTE7(v74);
          v43 = v72.__r_.__value_.__r.__words[2];
          v44 = *((_QWORD *)&__p + 1);
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v69, &v76);
          if ((v42 & 0x80u) != 0)
            v42 = v44;
          v45 = v75;
          if (v75)
          {
            v46 = (unint64_t *)&v75->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          if (SBYTE7(v74) < 0)
            operator delete((void *)__p);
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
          if (*((_QWORD *)&v76 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v16 += v42;
          v17 += v43;
        }
      }
      v51 = v82;
      if (v82)
      {
        v52 = (unint64_t *)&v82->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (SBYTE7(v81) < 0)
        operator delete((void *)v80);
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      ++v15;
      v57 = *(uint64_t **)(a2 + 24);
      v13 = *v57;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v57[1] - *v57) >> 4) > v15);
  }
  if (v68[9])
  {
    v58 = (*(uint64_t (**)(_QWORD *))(*v68 + 88))(v68);
    v59 = *(_QWORD *)(*(_QWORD *)(v68[5] + (((unint64_t)(v68[9] + v68[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (*((_BYTE *)v68 + 72) + *((_BYTE *)v68 + 64) - 1));
    *(_QWORD *)&v78 = &v72;
    v61 = v60[5];
    if (v61)
    {
      *(_BYTE *)(v61 + 8) = v58;
    }
    else
    {
      v64 = v60;
      v65 = operator new();
      *(_QWORD *)v65 = &off_1EA923128;
      *(_BYTE *)(v65 + 8) = v58;
      v66 = v64[5];
      v64[5] = v65;
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    }
  }
  v67 = v68[38];
  for (result = v68[39];
        result != v67;
  v68[39] = v67;
  return result;
}

void sub_1DE96889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  TokenBasicItem::~TokenBasicItem(&a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  TokenBasicItem::~TokenBasicItem((void **)(v29 - 160));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void FrontendNNModule::reconstruct_from_tokens(FrontendNNModule *this)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;

  v2 = (__int128 *)*((_QWORD *)this + 38);
  v3 = (__int128 *)*((_QWORD *)this + 39);
  if (v2 != v3)
  {
    do
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, v2++);
    while (v2 != v3);
    v4 = (__int128 *)*((_QWORD *)this + 38);
    v2 = (__int128 *)*((_QWORD *)this + 39);
    if (v2 != v4)
    {
      do
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)--v2);
      while (v2 != v4);
      v2 = v4;
    }
  }
  *((_QWORD *)this + 39) = v2;
}

void FrontendNNModule::reconstruct_from_tokens(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  _QWORD *v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (_QWORD *)(a1 + 32);
    do
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v4, v2++);
    while (v2 != v3);
  }
}

void FrontendNNModule::reconstruct_from_tokens(_QWORD *a1, std::string::size_type a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  std::string::size_type v43;
  NSObject *v44;
  const char *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  std::string *p_buf;
  std::string::size_type size;
  unint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _QWORD *v98;
  std::string *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _OWORD *v110;
  __int128 v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::string::size_type v116;
  uint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  std::string::size_type v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char v144;
  int v145;
  const std::string::value_type *v146;
  std::string::size_type v147;
  uint64_t v148;
  uint64_t *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  std::string *v157;
  std::string::size_type v158;
  int v159;
  const std::string::value_type *v160;
  std::string::size_type v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::string::size_type v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _OWORD *v183;
  __int128 v184;
  __int128 v185;
  std::__shared_weak_count *v186;
  char v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  _QWORD *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  std::string *v208;
  uint64_t v209;
  unint64_t v210;
  _OWORD *v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  std::string *v218;
  std::string::size_type v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  _OWORD *v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::string::size_type v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::string::size_type v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  NSObject *v264;
  const char *v265;
  std::string::size_type v266;
  std::string::size_type v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int *v270;
  uint64_t v271;
  unint64_t v273;
  unint64_t v274;
  std::string *__str;
  std::string::size_type __pos;
  char v277;
  _BYTE *v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  std::string v286;
  __int128 v287;
  void *v288;
  std::string buf;
  std::string v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  uint64_t v293;

  v293 = *MEMORY[0x1E0C80C00];
  if (a1[38] == a1[39])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v264 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v266 = a2;
      else
        v266 = *(_QWORD *)a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v266;
    }
    if (*(char *)(a2 + 23) >= 0)
      v267 = a2;
    else
      v267 = *(_QWORD *)a2;
    return;
  }
  v3 = **(_QWORD **)(a2 + 24);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) == v3)
    return;
  v4 = a1;
  v5 = 0;
  v6 = 0;
  __pos = 0;
  v282 = a1 + 4;
  do
  {
    v273 = v6;
    v274 = v5;
    v7 = (unsigned int *)(v3 + 80 * v5);
    if (*((char *)v7 + 31) < 0)
      v8 = *((_QWORD *)v7 + 2);
    else
      v8 = *((unsigned __int8 *)v7 + 31);
    v10 = (uint64_t *)v4[38];
    v9 = v4[39];
    v11 = v6;
    if (v6 >= (v9 - (uint64_t)v10) >> 4)
      goto LABEL_439;
    v270 = v7 + 2;
    v277 = 0;
    v280 = *v7;
    v279 = v8 + v280;
    v271 = v3 + 80 * v274 + 32;
    while (1)
    {
      v12 = v4;
      v283 = &v10[2 * v11];
      v13 = *v283;
      v15 = (_QWORD *)(v13 + 8);
      if ((_QWORD *)(v13 + 8) == v14)
        v16 = 0;
      else
        v16 = v14[5] + 8;
      v17 = (v9 - (uint64_t)v10) >> 4;
      if (v17 <= v11)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      if (v15 == v18)
        v281 = 0;
      else
        v281 = v18[5] + 8;
      if (v15 == v19)
        v278 = 0;
      else
        v278 = (_BYTE *)(v19[5] + 8);
      v285 = v16;
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v10 + 2;
        do
        {
          if (v17 == v20)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v23 = *(v22 - 2);
          if ((_QWORD *)(v23 + 8) == v24)
            v25 = 0;
          else
            v25 = v24[5] + 8;
          if (*(char *)(v25 + 47) < 0)
            v26 = *(_QWORD *)(v25 + 32);
          else
            LODWORD(v26) = *(unsigned __int8 *)(v25 + 47);
          v21 += v26;
          if (v17 > ++v20)
            v21 = v21
          v22 += 2;
        }
        while (v11 != v20);
      }
      else
      {
        v21 = 0;
      }
      if (*(char *)(v285 + 47) < 0)
        v27 = *(_QWORD *)(v285 + 32);
      else
        v27 = *(unsigned __int8 *)(v285 + 47);
      v28 = v21;
      v29 = v27 + v21;
      if (v29 <= v280)
      {
        if (v15 == v34)
          v35 = 0;
        else
          v35 = v34[5] + 8;
        v4 = v12;
        v39 = v12[9];
        if (v39)
        {
          v40 = v12[8];
          v41 = v12[5];
          while (1)
          {
            if (*(_QWORD *)(v42[5] + 24) + *(_QWORD *)(v42[5] + 16) > *(_QWORD *)(v35 + 8))
              goto LABEL_232;
            ++v40;
            if (!--v39)
              goto LABEL_55;
          }
        }
        goto LABEL_55;
      }
      __str = (std::string *)(v285 + 24);
      v30 = __pos + v28;
      if (__pos)
      {
        if (v279 == v30)
          break;
      }
      v4 = v12;
      if ((v277 & (v279 > v29)) == 1)
      {
        if (v17 <= v11 - 1)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v31 = v10[2 * v11 - 2];
        if ((_QWORD *)(v31 + 8) == v32)
          v33 = 0;
        else
          v33 = v32[5] + 8;
        *(_QWORD *)(v46[5] + 24) += *(_QWORD *)(v285 + 8)
                                    - (*(_QWORD *)(v33 + 8)
                                     + *(_QWORD *)(v33 + 16))
                                    + *(_QWORD *)(v285 + 16);
LABEL_65:
        v277 = 1;
        goto LABEL_232;
      }
      if ((v277 & 1) != 0 && v279 <= v29)
      {
        if (v17 <= v11 - 1)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v36 = v10[2 * v11 - 2];
        if ((_QWORD *)(v36 + 8) == v37)
          v38 = 0;
        else
          v38 = v37[5] + 8;
        v51 = *(_QWORD *)(v285 + 8);
        v52 = *(_QWORD *)(v38 + 8);
        v53 = *(_QWORD *)(v38 + 16);
        if (v281)
        {
          *(_QWORD *)(v50 + 24) += v51 - (v52 + v53) + *(_QWORD *)(v285 + 16);
          v54 = v279;
          if (v279 == v29)
          {
            std::string::basic_string(&buf, __str, v279 - v30, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v286);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_buf = &buf;
            else
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            else
              size = buf.__r_.__value_.__l.__size_;
            std::string::append((std::string *)(v50 + 32), (const std::string::value_type *)p_buf, size);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            v54 = v279;
          }
        }
        else
        {
          v54 = v279;
          *(_QWORD *)(v50 + 24) += v279 + v51 - v53 - (v30 + v52);
        }
        if (v54 == v29)
        {
          if (v278)
          {
            v215 = *(_QWORD *)(*(_QWORD *)(v12[5]
                                         + (((unint64_t)(v12[9] + v12[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*((_BYTE *)v12 + 72) + *((_BYTE *)v12 + 64) - 1));
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286;
            v217 = v216[5];
            if (v217)
              goto LABEL_363;
LABEL_382:
            v228 = operator new();
            *(_QWORD *)v228 = &off_1EA923128;
            *(_BYTE *)(v228 + 8) = *v278;
            v229 = v216[5];
            v216[5] = v228;
            if (v229)
              (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
          }
          goto LABEL_437;
        }
        __pos = v54 - v28;
        if (-1
           - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - **(_QWORD **)(a2 + 24)) >> 4) != v274)
          goto LABEL_439;
        v277 = 0;
        --v11;
      }
      else
      {
        v43 = v280 - v30;
        if (v280 < v30)
          goto LABEL_57;
        if (v279 > v29 || !v281)
        {
          if (v279 <= v29 && !v281)
          {
            v57 = v273;
            if (v280 != v30)
            {
              v58 = operator new(0x30uLL);
              *(_OWORD *)((char *)v58 + 8) = 0u;
              *(_QWORD *)v58 = &off_1EA932198;
              v58[2] = 0u;
              *((_QWORD *)v58 + 3) = v58 + 2;
              *(_QWORD *)&v287 = (char *)v58 + 24;
              *((_QWORD *)&v287 + 1) = v58;
              v59 = *(_OWORD *)v285;
              buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v59;
              if (*(char *)(v285 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
              }
              else
              {
                v60 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
                v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
                *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v60;
              }
              v100 = *(std::__shared_weak_count **)(v285 + 56);
              v291 = *(_QWORD *)(v285 + 48);
              v292 = v100;
              if (v100)
              {
                p_shared_owners = (unint64_t *)&v100->__shared_owners_;
                do
                  v102 = __ldxr(p_shared_owners);
                while (__stxr(v102 + 1, p_shared_owners));
              }
              std::string::basic_string(&v286, __str, __pos, v280 - v30, (std::allocator<char> *)&v288);
              if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v290.__r_.__value_.__l.__data_);
              v290 = v286;
              v103 = v286.__r_.__value_.__l.__size_;
              if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v103 = HIBYTE(v290.__r_.__value_.__r.__words[2]);
              buf.__r_.__value_.__l.__size_ += __pos;
              buf.__r_.__value_.__r.__words[2] = v103;
              Agglomerate::set<TokenBasicItem>(v287, (__int128 *)&buf);
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
              v104 = v292;
              if (v292)
              {
                v105 = (unint64_t *)&v292->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v290.__r_.__value_.__l.__data_);
              v107 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
              if (*((_QWORD *)&v287 + 1))
              {
                v108 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
            }
            v110 = operator new(0x30uLL);
            *(_OWORD *)((char *)v110 + 8) = 0u;
            *(_QWORD *)v110 = &off_1EA932198;
            v110[2] = 0u;
            *((_QWORD *)v110 + 3) = v110 + 2;
            v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v110 + 24;
            v286.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
            v111 = *(_OWORD *)v285;
            buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v111;
            if (*(char *)(v285 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
            }
            else
            {
              v112 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
              v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
              *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v112;
            }
            v113 = *(std::__shared_weak_count **)(v285 + 56);
            v291 = *(_QWORD *)(v285 + 48);
            v292 = v113;
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
            }
            std::string::operator=(&v290, (const std::string *)v271);
            buf.__r_.__value_.__l.__size_ = v280 - v28 + *(_QWORD *)(v285 + 8);
            if (*((char *)v270 + 23) < 0)
              v116 = *((_QWORD *)v270 + 1);
            else
              v116 = *((unsigned __int8 *)v270 + 23);
            buf.__r_.__value_.__r.__words[2] = v116;
            v117 = v286.__r_.__value_.__r.__words[0];
            Agglomerate::set<TokenBasicItem>((uint64_t)v286.__r_.__value_.__l.__data_, (__int128 *)&buf);
            *(_QWORD *)&v287 = &v288;
            if (!v118[5])
            {
              v119 = (_QWORD *)operator new();
              *v119 = &off_1EA922EC8;
              v120 = v118[5];
              v118[5] = (uint64_t)v119;
              if (v120)
                (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
            }
            if (v279 == v29)
            {
              if (v278)
              {
                *(_QWORD *)&v287 = &v288;
                v122 = v121[5];
                if (v122)
                {
                  *(_BYTE *)(v122 + 8) = *v278;
                }
                else
                {
                  v127 = operator new();
                  *(_QWORD *)v127 = &off_1EA923128;
                  *(_BYTE *)(v127 + 8) = *v278;
                  v128 = v121[5];
                  v121[5] = v127;
                  if (v128)
                    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
                }
              }
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, (__int128 *)&v286);
              v57 = v11 + 1;
              v86 = 7;
            }
            else
            {
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, (__int128 *)&v286);
              __pos = v279 - v28;
              --v11;
              v86 = 9;
            }
            v129 = v292;
            if (v292)
            {
              v130 = (unint64_t *)&v292->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v290.__r_.__value_.__l.__data_);
            v132 = (std::__shared_weak_count *)v286.__r_.__value_.__l.__size_;
            if (v286.__r_.__value_.__l.__size_)
            {
              v133 = (unint64_t *)(v286.__r_.__value_.__l.__size_ + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              goto LABEL_229;
            }
LABEL_231:
            v273 = v57;
            if (v86 != 9)
              goto LABEL_439;
            goto LABEL_232;
          }
          if (v279 > v29 && v11 < v17 - 1)
          {
            if (v17 <= v11 + 1)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v269 = v11 + 1;
            v61 = v10[2 * v11 + 2];
            v268 = v279 - v29;
            if ((_QWORD *)(v61 + 8) == v62)
              v284 = 0;
            else
              v284 = v62[5] + 8;
            v87 = 0;
            v88 = 0;
            do
            {
              if (v17 == v87)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v89 = *v10;
              if ((_QWORD *)(v89 + 8) == v90)
                v91 = 0;
              else
                v91 = v90[5] + 8;
              if (*(char *)(v91 + 47) < 0)
                v92 = *(_QWORD *)(v91 + 32);
              else
                LODWORD(v92) = *(unsigned __int8 *)(v91 + 47);
              v88 = v88 + v92 - *(_DWORD *)(v91 + 16);
              ++v87;
              v10 += 2;
            }
            while (v11 + 1 != v87);
            if (!v281 || __pos)
            {
              if (!__pos || !v281)
              {
                v123 = v280 - v30;
                if (v280 != v30)
                {
                  v124 = operator new(0x30uLL);
                  *(_OWORD *)((char *)v124 + 8) = 0u;
                  *(_QWORD *)v124 = &off_1EA932198;
                  v124[2] = 0u;
                  *((_QWORD *)v124 + 3) = v124 + 2;
                  *(_QWORD *)&v287 = (char *)v124 + 24;
                  *((_QWORD *)&v287 + 1) = v124;
                  v125 = *(_OWORD *)v285;
                  buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v125;
                  if (*(char *)(v285 + 47) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
                  }
                  else
                  {
                    v126 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
                    v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
                    *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v126;
                  }
                  v173 = *(std::__shared_weak_count **)(v285 + 56);
                  v291 = *(_QWORD *)(v285 + 48);
                  v292 = v173;
                  if (v173)
                  {
                    v174 = (unint64_t *)&v173->__shared_owners_;
                    do
                      v175 = __ldxr(v174);
                    while (__stxr(v175 + 1, v174));
                  }
                  std::string::basic_string(&v286, __str, __pos, v123, (std::allocator<char> *)&v288);
                  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v290.__r_.__value_.__l.__data_);
                  v290 = v286;
                  v176 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
                  if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v176 = v290.__r_.__value_.__l.__size_;
                  buf.__r_.__value_.__r.__words[2] = v176;
                  Agglomerate::set<TokenBasicItem>(v287, (__int128 *)&buf);
                  std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
                  v177 = v292;
                  if (v292)
                  {
                    v178 = (unint64_t *)&v292->__shared_owners_;
                    do
                      v179 = __ldaxr(v178);
                    while (__stlxr(v179 - 1, v178));
                    if (!v179)
                    {
                      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                      std::__shared_weak_count::__release_weak(v177);
                    }
                  }
                  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v290.__r_.__value_.__l.__data_);
                  v180 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
                  if (*((_QWORD *)&v287 + 1))
                  {
                    v181 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
                    do
                      v182 = __ldaxr(v181);
                    while (__stlxr(v182 - 1, v181));
                    if (!v182)
                    {
                      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                      std::__shared_weak_count::__release_weak(v180);
                    }
                  }
                }
                v183 = operator new(0x30uLL);
                *(_OWORD *)((char *)v183 + 8) = 0u;
                *(_QWORD *)v183 = &off_1EA932198;
                v183[2] = 0u;
                *((_QWORD *)v183 + 3) = v183 + 2;
                v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v183 + 24;
                v286.__r_.__value_.__l.__size_ = (std::string::size_type)v183;
                v184 = *(_OWORD *)v285;
                buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v184;
                if (*(char *)(v285 + 47) < 0)
                {
                  std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
                }
                else
                {
                  v185 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
                  v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
                  *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v185;
                }
                v186 = *(std::__shared_weak_count **)(v285 + 56);
                v291 = *(_QWORD *)(v285 + 48);
                v292 = v186;
                v187 = v277;
                if (v186)
                {
                  v188 = (unint64_t *)&v186->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                }
                std::string::operator=(&v290, (const std::string *)v271);
                buf.__r_.__value_.__l.__size_ = v280 - v28 + *(_QWORD *)(v285 + 8);
                buf.__r_.__value_.__r.__words[2] -= v123;
                if (v279 <= *(_QWORD *)(v284 + 8) + v88)
                {
                  if (v278)
                  {
                    *(_QWORD *)&v287 = &v288;
                    v191 = v190[5];
                    if (v191)
                    {
                      *(_BYTE *)(v191 + 8) = *v278;
                    }
                    else
                    {
                      v194 = operator new();
                      *(_QWORD *)v194 = &off_1EA923128;
                      *(_BYTE *)(v194 + 8) = *v278;
                      v195 = v190[5];
                      v190[5] = v194;
                      if (v195)
                        (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
                    }
                  }
                  buf.__r_.__value_.__r.__words[2] += v268;
                }
                else
                {
                  v187 = 1;
                  v269 = v273;
                }
                v196 = v286.__r_.__value_.__r.__words[0];
                Agglomerate::set<TokenBasicItem>((uint64_t)v286.__r_.__value_.__l.__data_, (__int128 *)&buf);
                *(_QWORD *)&v287 = &v288;
                if (!v197[5])
                {
                  v198 = (_QWORD *)operator new();
                  *v198 = &off_1EA922EC8;
                  v199 = v197[5];
                  v197[5] = (uint64_t)v198;
                  if (v199)
                    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
                }
                std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, (__int128 *)&v286);
                v200 = v292;
                if (v292)
                {
                  v201 = (unint64_t *)&v292->__shared_owners_;
                  do
                    v202 = __ldaxr(v201);
                  while (__stlxr(v202 - 1, v201));
                  if (!v202)
                  {
                    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                    std::__shared_weak_count::__release_weak(v200);
                  }
                }
                if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v290.__r_.__value_.__l.__data_);
                v203 = (std::__shared_weak_count *)v286.__r_.__value_.__l.__size_;
                if (v286.__r_.__value_.__l.__size_)
                {
                  v204 = (unint64_t *)(v286.__r_.__value_.__l.__size_ + 8);
                  do
                    v205 = __ldaxr(v204);
                  while (__stlxr(v205 - 1, v204));
                  if (!v205)
                  {
                    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                    std::__shared_weak_count::__release_weak(v203);
                  }
                }
                __pos = 0;
                if ((v187 & 1) == 0)
                {
LABEL_447:
                  v259 = v269;
                  goto LABEL_438;
                }
                goto LABEL_349;
              }
              v97 = *(_QWORD *)(*(_QWORD *)(v4[5]
                                          + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((_BYTE *)v4 + 72) + *((_BYTE *)v4 + 64) - 1));
              if ((_QWORD *)(v97 + 8) == v98)
                v99 = 0;
              else
                v99 = (std::string *)(v98[5] + 8);
              std::string::basic_string(&buf, __str, __pos, v43, (std::allocator<char> *)&v286);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v157 = &buf;
              else
                v157 = (std::string *)buf.__r_.__value_.__r.__words[0];
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v158 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
              else
                v158 = buf.__r_.__value_.__l.__size_;
              std::string::append(v99 + 1, (const std::string::value_type *)v157, v158);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              v159 = *(char *)(v271 + 23);
              if (v159 >= 0)
                v160 = (const std::string::value_type *)v271;
              else
                v160 = *(const std::string::value_type **)v271;
              if (v159 >= 0)
                v161 = *(unsigned __int8 *)(v271 + 23);
              else
                v161 = *(_QWORD *)(v271 + 8);
              std::string::append(v99 + 1, v160, v161);
              if (v279 <= *(_QWORD *)(v284 + 8) + v88)
              {
                if (v278)
                {
                  v162 = *(_QWORD *)(*(_QWORD *)(v4[5]
                                               + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*((_BYTE *)v4 + 72) + *((_BYTE *)v4 + 64) - 1));
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286;
                  v164 = v163[5];
                  if (v164)
                  {
                    __pos = 0;
                    *(_BYTE *)(v164 + 8) = *v278;
LABEL_328:
                    if ((v277 & 1) == 0)
                      goto LABEL_447;
LABEL_349:
                    v277 = 1;
                    v273 = v269;
                    goto LABEL_232;
                  }
                  v192 = operator new();
                  *(_QWORD *)v192 = &off_1EA923128;
                  *(_BYTE *)(v192 + 8) = *v278;
                  v193 = v163[5];
                  v163[5] = v192;
                  if (v193)
                    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
                }
                __pos = 0;
                goto LABEL_328;
              }
              __pos = 0;
            }
            else
            {
              v93 = operator new(0x30uLL);
              v94 = v273;
              *(_OWORD *)((char *)v93 + 8) = 0u;
              *(_QWORD *)v93 = &off_1EA932198;
              v93[2] = 0u;
              *((_QWORD *)v93 + 3) = v93 + 2;
              *(_QWORD *)&v287 = (char *)v93 + 24;
              *((_QWORD *)&v287 + 1) = v93;
              v95 = *(_OWORD *)v285;
              buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v95;
              if (*(char *)(v285 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
              }
              else
              {
                v96 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
                v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
                *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v96;
              }
              v141 = *(std::__shared_weak_count **)(v285 + 56);
              v291 = *(_QWORD *)(v285 + 48);
              v292 = v141;
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              std::string::basic_string(&v286, __str, 0, v280 - v28, (std::allocator<char> *)&v288);
              v144 = v277;
              if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v290.__r_.__value_.__l.__data_);
              v290 = v286;
              v145 = *(char *)(v271 + 23);
              if (v145 >= 0)
                v146 = (const std::string::value_type *)v271;
              else
                v146 = *(const std::string::value_type **)v271;
              if (v145 >= 0)
                v147 = *(unsigned __int8 *)(v271 + 23);
              else
                v147 = *(_QWORD *)(v271 + 8);
              std::string::append(&v290, v146, v147);
              v148 = v287;
              Agglomerate::set<TokenBasicItem>(v287, (__int128 *)&buf);
              v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
              if (!v149[5])
              {
                v150 = (_QWORD *)operator new();
                *v150 = &off_1EA922EC8;
                v151 = v149[5];
                v149[5] = (uint64_t)v150;
                if (v151)
                  (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
              }
              v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
              if (!v152[5])
              {
                v153 = (_QWORD *)operator new();
                *v153 = &off_1EA923108;
                v154 = v152[5];
                v152[5] = (uint64_t)v153;
                if (v154)
                  (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
              }
              if (v279 <= *(_QWORD *)(v284 + 8) + v88)
              {
                if (v278)
                {
                  v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
                  v156 = v155[5];
                  if (v156)
                  {
                    *(_BYTE *)(v156 + 8) = *v278;
                  }
                  else
                  {
                    v165 = operator new();
                    *(_QWORD *)v165 = &off_1EA923128;
                    *(_BYTE *)(v165 + 8) = *v278;
                    v166 = v155[5];
                    v155[5] = v165;
                    if (v166)
                      (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
                  }
                }
                v94 = v11 + 1;
              }
              else
              {
                v144 = 1;
              }
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
              v167 = v292;
              if (v292)
              {
                v168 = (unint64_t *)&v292->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
              if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v290.__r_.__value_.__l.__data_);
              v170 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
              if (*((_QWORD *)&v287 + 1))
              {
                v171 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              v273 = v94;
              __pos = 0;
              if ((v144 & 1) == 0)
                goto LABEL_439;
            }
            goto LABEL_65;
          }
LABEL_57:
          if (v279 > v30)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1DE3F6000, v44, OS_LOG_TYPE_ERROR, "Unknown error in reconstruct_from_tokens/rewrite", (uint8_t *)&buf, 2u);
            }
            Diagnostics::log(3, "Unknown error in reconstruct_from_tokens/rewrite", v45);
            goto LABEL_232;
          }
LABEL_55:
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, (__int128 *)v283);
          goto LABEL_232;
        }
        if (!v11 || !__pos)
        {
          v63 = operator new(0x30uLL);
          v57 = v273;
          *(_OWORD *)((char *)v63 + 8) = 0u;
          *(_QWORD *)v63 = &off_1EA932198;
          v63[2] = 0u;
          *((_QWORD *)v63 + 3) = v63 + 2;
          *(_QWORD *)&v287 = (char *)v63 + 24;
          *((_QWORD *)&v287 + 1) = v63;
          v64 = *(_OWORD *)v285;
          buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v64;
          if (*(char *)(v285 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
          }
          else
          {
            v65 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
            v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
            *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v65;
          }
          v71 = *(std::__shared_weak_count **)(v285 + 56);
          v291 = *(_QWORD *)(v285 + 48);
          v292 = v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          std::string::basic_string(&v286, __str, __pos, v43, (std::allocator<char> *)&v288);
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
          v290 = v286;
          v74 = *(char *)(v271 + 23);
          if (v74 >= 0)
            v75 = (const std::string::value_type *)v271;
          else
            v75 = *(const std::string::value_type **)v271;
          if (v74 >= 0)
            v76 = *(unsigned __int8 *)(v271 + 23);
          else
            v76 = *(_QWORD *)(v271 + 8);
          std::string::append(&v290, v75, v76);
          v77 = v287;
          Agglomerate::set<TokenBasicItem>(v287, (__int128 *)&buf);
          v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
          if (!v78[5])
          {
            v79 = (_QWORD *)operator new();
            *v79 = &off_1EA922EC8;
            v80 = v78[5];
            v78[5] = (uint64_t)v79;
            if (v80)
              (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
          }
          v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
          if (!v81[5])
          {
            v82 = (_QWORD *)operator new();
            *v82 = &off_1EA923108;
            v83 = v81[5];
            v81[5] = (uint64_t)v82;
            if (v83)
              (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
          }
          if (v279 == v29)
          {
            if (v278)
            {
              v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
              v85 = v84[5];
              if (v85)
              {
                *(_BYTE *)(v85 + 8) = *v278;
              }
              else
              {
                v135 = operator new();
                *(_QWORD *)v135 = &off_1EA923128;
                *(_BYTE *)(v135 + 8) = *v278;
                v136 = v84[5];
                v84[5] = v135;
                if (v136)
                  (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
              }
            }
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
            v57 = v11 + 1;
            v86 = 7;
          }
          else
          {
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
            __pos = v279 - v28;
            if (-1
               - 0x3333333333333333
               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - **(_QWORD **)(a2 + 24)) >> 4) == v274)
              v86 = 9;
            else
              v86 = 7;
            v11 -= -1
                 - 0x3333333333333333
                 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - **(_QWORD **)(a2 + 24)) >> 4) == v274;
          }
          v137 = v292;
          if (v292)
          {
            v138 = (unint64_t *)&v292->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
          v132 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
          if (*((_QWORD *)&v287 + 1))
          {
            v140 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
            do
              v134 = __ldaxr(v140);
            while (__stlxr(v134 - 1, v140));
LABEL_229:
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          goto LABEL_231;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v12[5] + (((unint64_t)(v12[9] + v12[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*((_BYTE *)v12 + 72) + *((_BYTE *)v12 + 64) - 1));
        if ((_QWORD *)(v47 + 8) == v48)
          v49 = 0;
        else
          v49 = (std::string *)(v48[5] + 8);
        std::string::basic_string(&buf, __str, __pos, v43, (std::allocator<char> *)&v286);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &buf;
        else
          v66 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          v67 = buf.__r_.__value_.__l.__size_;
        std::string::append(v49 + 1, (const std::string::value_type *)v66, v67);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v68 = *(char *)(v271 + 23);
        if (v68 >= 0)
          v69 = (const std::string::value_type *)v271;
        else
          v69 = *(const std::string::value_type **)v271;
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(v271 + 23);
        else
          v70 = *(_QWORD *)(v271 + 8);
        std::string::append(v49 + 1, v69, v70);
        if (v279 == v29)
        {
          if (v278)
          {
            v237 = *(_QWORD *)(*(_QWORD *)(v4[5] + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*((_BYTE *)v4 + 72) + *((_BYTE *)v4 + 64) - 1));
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286;
            v217 = v216[5];
            if (!v217)
              goto LABEL_382;
LABEL_363:
            *(_BYTE *)(v217 + 8) = *v278;
          }
LABEL_437:
          v259 = v11 + 1;
LABEL_438:
          v273 = v259;
          goto LABEL_439;
        }
        __pos = v279 - v28;
        --v11;
      }
LABEL_232:
      ++v11;
      v10 = (uint64_t *)v4[38];
      v9 = v4[39];
      if (v11 >= (v9 - (uint64_t)v10) >> 4)
        goto LABEL_439;
    }
    v4 = v12;
    if (v281)
    {
      if (v279 <= v28)
        goto LABEL_439;
      v206 = *(_QWORD *)(*(_QWORD *)(v12[5] + (((unint64_t)(v12[9] + v12[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((_BYTE *)v12 + 72) + *((_BYTE *)v12 + 64) - 1));
      if ((_QWORD *)(v206 + 8) == v207)
        v208 = 0;
      else
        v208 = (std::string *)(v207[5] + 8);
      std::string::basic_string(&buf, __str, v279 - v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v286);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v218 = &buf;
      else
        v218 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v219 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v219 = buf.__r_.__value_.__l.__size_;
      std::string::append(v208 + 1, (const std::string::value_type *)v218, v219);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (v278)
      {
        v220 = *(_QWORD *)(*(_QWORD *)(v4[5] + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((_BYTE *)v4 + 72) + *((_BYTE *)v4 + 64) - 1));
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286;
        v222 = v221[5];
        if (v222)
        {
          *(_BYTE *)(v222 + 8) = *v278;
        }
        else
        {
          v226 = operator new();
          *(_QWORD *)v226 = &off_1EA923128;
          *(_BYTE *)(v226 + 8) = *v278;
          v227 = v221[5];
          v221[5] = v226;
          if (v227)
            (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
        }
      }
      goto LABEL_436;
    }
    v209 = **(_QWORD **)(a2 + 24);
    v210 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - v209) >> 4);
    if (v210 - 1 <= v274 || v11 != v17 - 1)
    {
      if (v210 - 1 == v274)
      {
        v212 = operator new(0x30uLL);
        *(_OWORD *)((char *)v212 + 8) = 0u;
        *(_QWORD *)v212 = &off_1EA932198;
        v212[2] = 0u;
        *((_QWORD *)v212 + 3) = v212 + 2;
        *(_QWORD *)&v287 = (char *)v212 + 24;
        *((_QWORD *)&v287 + 1) = v212;
        v213 = *(_OWORD *)v285;
        buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v213;
        if (*(char *)(v285 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
        }
        else
        {
          v214 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
          v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
          *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v214;
        }
        v230 = *(std::__shared_weak_count **)(v285 + 56);
        v291 = *(_QWORD *)(v285 + 48);
        v292 = v230;
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldxr(v231);
          while (__stxr(v232 + 1, v231));
        }
        std::string::basic_string(&v286, __str, v279 - v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v288);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        v290 = v286;
        v233 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v233 = v290.__r_.__value_.__l.__size_;
        buf.__r_.__value_.__l.__size_ = v279 - v28 + *(_QWORD *)(v285 + 8);
        buf.__r_.__value_.__r.__words[2] = v233;
        v234 = v287;
        Agglomerate::set<TokenBasicItem>(v287, (__int128 *)&buf);
        if (v278)
        {
          v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
          v236 = v235[5];
          if (v236)
          {
            *(_BYTE *)(v236 + 8) = *v278;
          }
          else
          {
            v238 = operator new();
            *(_QWORD *)v238 = &off_1EA923128;
            *(_BYTE *)(v238 + 8) = *v278;
            v239 = v235[5];
            v235[5] = v238;
            if (v239)
              (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
          }
        }
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
        v240 = v292;
        if (v292)
        {
          v241 = (unint64_t *)&v292->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        v243 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
        if (*((_QWORD *)&v287 + 1))
        {
          v244 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
LABEL_434:
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        goto LABEL_436;
      }
      if (v210 <= v274 + 1)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      if (v29 <= *(unsigned int *)(v209 + 80 * (v274 + 1)))
      {
        v223 = operator new(0x30uLL);
        *(_OWORD *)((char *)v223 + 8) = 0u;
        *(_QWORD *)v223 = &off_1EA932198;
        v223[2] = 0u;
        *((_QWORD *)v223 + 3) = v223 + 2;
        *(_QWORD *)&v287 = (char *)v223 + 24;
        *((_QWORD *)&v287 + 1) = v223;
        v224 = *(_OWORD *)v285;
        buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 16);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v224;
        if (*(char *)(v285 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v285 + 24), *(_QWORD *)(v285 + 32));
        }
        else
        {
          v225 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
          v290.__r_.__value_.__r.__words[2] = *(_QWORD *)(v285 + 40);
          *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v225;
        }
        v246 = *(std::__shared_weak_count **)(v285 + 56);
        v291 = *(_QWORD *)(v285 + 48);
        v292 = v246;
        if (v246)
        {
          v247 = (unint64_t *)&v246->__shared_owners_;
          do
            v248 = __ldxr(v247);
          while (__stxr(v248 + 1, v247));
        }
        std::string::basic_string(&v286, __str, v279 - v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v288);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        v290 = v286;
        v249 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v249 = v290.__r_.__value_.__l.__size_;
        buf.__r_.__value_.__l.__size_ = v279 - v28 + *(_QWORD *)(v285 + 8);
        buf.__r_.__value_.__r.__words[2] = v249;
        v250 = v287;
        Agglomerate::set<TokenBasicItem>(v287, (__int128 *)&buf);
        if (v278)
        {
          v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
          v252 = v251[5];
          if (v252)
          {
            *(_BYTE *)(v252 + 8) = *v278;
          }
          else
          {
            v253 = operator new();
            *(_QWORD *)v253 = &off_1EA923128;
            *(_BYTE *)(v253 + 8) = *v278;
            v254 = v251[5];
            v251[5] = v253;
            if (v254)
              (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
          }
        }
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, &v287);
        v255 = v292;
        if (v292)
        {
          v256 = (unint64_t *)&v292->__shared_owners_;
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        v243 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
        if (*((_QWORD *)&v287 + 1))
        {
          v258 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
          do
            v245 = __ldaxr(v258);
          while (__stlxr(v245 - 1, v258));
          goto LABEL_434;
        }
LABEL_436:
        __pos = 0;
        goto LABEL_437;
      }
    }
LABEL_439:
    v3 = **(_QWORD **)(a2 + 24);
    v260 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - v3) >> 4);
    if (v260 - 1 == v274)
    {
      v261 = v4[38];
      v6 = v273;
      if (v273 < (v4[39] - v261) >> 4)
      {
        v262 = 16 * v273;
        v263 = v273;
        do
        {
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v282, (__int128 *)(v261 + v262));
          ++v263;
          v261 = v4[38];
          v262 += 16;
        }
        while (v263 < (v4[39] - v261) >> 4);
        v3 = **(_QWORD **)(a2 + 24);
        v260 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - v3) >> 4);
      }
    }
    else
    {
      v6 = v273;
    }
    v5 = v274 + 1;
  }
  while (v260 > v274 + 1);
}

void sub_1DE96AB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void FrontendNNModule::reconstruct_from_tokens(_QWORD *a1, std::string *a2, uint64_t a3, char a4)
{
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const std::string *v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  std::string::size_type v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  char v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string *v50;
  std::string v51;
  __int128 v52;
  void *__p[2];
  void *v54[2];
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58[2];
  uint64_t *v59[2];
  std::string __str;
  _BYTE v61[8];
  void *v62;
  char v63;
  void *v64;
  char v65;
  __int128 v66;
  std::string v67;

  v8 = operator new(0x30uLL);
  *(_OWORD *)((char *)v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_1EA932198;
  *((_QWORD *)&v66 + 1) = v8;
  v8[2] = 0u;
  *((_QWORD *)v8 + 3) = v8 + 2;
  v9 = (uint64_t)v8 + 24;
  *(_QWORD *)&v66 = (char *)v8 + 24;
  std::string::basic_string[abi:ne180100]<0>(&v62, &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>(&v64, &byte_1DEBD87CE);
  v61[0] = a4;
  memset(&__str, 0, sizeof(__str));
  if (a3)
  {
    std::string::operator=(&__str, (const std::string *)(a3 + 24));
    v11 = *(_QWORD *)(a3 + 8);
    v10 = *(_QWORD *)(a3 + 16);
    Agglomerate::set<TokenBasicItem>(v9, (__int128 *)a3);
    v12 = *(uint64_t **)(a3 + 48);
    v13 = *(uint64_t **)(a3 + 56);
    v58[0] = v12;
    v58[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    FrontendNNModule::update_embedded_lang((uint64_t)v61, v58);
    if (v13)
    {
      v16 = (unint64_t *)(v13 + 1);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_45;
    }
  }
  else
  {
    v18 = (uint64_t *)a1[38];
    v19 = *v18;
    if ((_QWORD *)(v19 + 8) == v20)
      v21 = 0;
    else
      v21 = v20[5] + 8;
    if ((uint64_t *)a1[39] == v18)
    {
      v10 = 0;
    }
    else
    {
      v50 = a2;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = v18[v22];
        if ((_QWORD *)(v26 + 8) == v27)
          v28 = 0;
        else
          v28 = v27[5] + 8;
        v29 = (const std::string *)(v28 + 24);
        if (v23)
        {
          if (*(char *)(v28 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v28 + 24), *(_QWORD *)(v28 + 32));
          }
          else
          {
            *(_OWORD *)&v67.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 40);
          }
          UTFString::lstrip(&v67);
          UTFString::rstrip(&v67);
          v51 = v67;
          memset(&v67, 0, sizeof(v67));
          v30 = std::string::insert(&v51, 0, " ");
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v54[0] = (void *)v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v54[0]) >= 0)
            v32 = __p;
          else
            v32 = (void **)__p[0];
          if (SHIBYTE(v54[0]) >= 0)
            v33 = HIBYTE(v54[0]);
          else
            v33 = (std::string::size_type)__p[1];
          std::string::append(&__str, (const std::string::value_type *)v32, v33);
          if (SHIBYTE(v54[0]) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
        }
        else
        {
          v25 = *(_QWORD *)(v28 + 8);
          std::string::operator=(&__str, v29);
        }
        v18 = (uint64_t *)a1[38];
        v34 = (uint64_t)(a1[39] - (_QWORD)v18) >> 4;
        if (v23 == v34 - 1)
          v24 = *(_QWORD *)(v28 + 16) + *(_QWORD *)(v28 + 8);
        ++v23;
        v22 += 2;
      }
      while (v23 < v34);
      v10 = v24 - v25;
      a2 = v50;
    }
    std::string::operator=((std::string *)(v21 + 24), &__str);
    *(_QWORD *)(v21 + 16) = v10;
    v11 = *(_QWORD *)(v21 + 8);
    Agglomerate::set<TokenBasicItem>(v66, (__int128 *)v21);
    v35 = *(uint64_t **)(v21 + 48);
    v13 = *(uint64_t **)(v21 + 56);
    v59[0] = v35;
    v59[1] = v13;
    if (v13)
    {
      v36 = (unint64_t *)(v13 + 1);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    FrontendNNModule::update_embedded_lang((uint64_t)v61, v59);
    if (v13)
    {
      v38 = (unint64_t *)(v13 + 1);
      do
        v17 = __ldaxr(v38);
      while (__stlxr(v17 - 1, v38));
LABEL_45:
      if (!v17)
      {
        (*(void (**)(uint64_t *))(*v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
    }
  }
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  *(_OWORD *)__p = 0u;
  UTFString::lstrip(a2);
  UTFString::rstrip(a2);
  create_pronunciation_with_phone_sequence((uint64_t *)&v51, a2, (uint64_t)v61);
  std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)__p, (uint64_t *)v51.__r_.__value_.__l.__data_, (uint64_t *)v51.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >> 3));
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  std::string::operator=((std::string *)&v54[1], &__str);
  v56 = v11;
  v57 = v10;
  v39 = v66;
  Agglomerate::set<TokenPronunciationItem>(v66, (uint64_t)__p);
  v52 = 0u;
  *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0u;
  v40 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  FrontendNNModule::update_phrasing_item(a1, (uint64_t)&v51, 0, v40);
  Agglomerate::set<TokenPhrasingItem>(v39, (__int16 *)&v51);
  std::deque<std::shared_ptr<Agglomerate>>::push_back(a1 + 4, &v66);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v51.__r_.__value_.__r.__words[2];
  if (v51.__r_.__value_.__r.__words[2])
  {
    v45 = (unint64_t *)(v51.__r_.__value_.__r.__words[2] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(v55) < 0)
    operator delete(v54[1]);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1DE96B160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (a40 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a41);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v47 - 128);
  _Unwind_Resume(a1);
}

void FrontendNNModule::reconstruct_from_tokens(_QWORD *a1, uint64_t **a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::string::pointer v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _OWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  BOOL v48;
  std::string::size_type v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  int v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  uint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::size_type v79;
  uint64_t v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  int v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  int v88;
  std::string::size_type v89;
  uint64_t v90;
  _QWORD *v91;
  std::string *v92;
  unint64_t v93;
  size_t v94;
  std::string *p_s;
  _BYTE *v96;
  std::string *v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  size_t v105;
  std::string *v106;
  std::string *v107;
  std::string *v108;
  std::string::size_type v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  uint64_t v115;
  char v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::string::size_type v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  size_t v133;
  _BYTE *v134;
  std::string *v135;
  const std::string::value_type *v136;
  std::string::size_type v137;
  uint64_t v138;
  uint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  void **v151;
  void **v152;
  unint64_t v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  NSObject *v170;
  std::string *v171;
  const char *v172;
  std::string *v173;
  char v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 *v178;
  __int128 *v179;
  __int128 v180;
  size_t v181;
  std::string *v182;
  __int128 v183;
  std::string *v184;
  std::string::size_type v185;
  void *v186;
  size_t v187;
  std::string *v188;
  _BYTE *v189;
  std::string *v190;
  std::string::size_type v191;
  NSObject *v192;
  std::string *v193;
  const char *v194;
  std::string *v195;
  _QWORD *v197;
  char v198;
  BOOL v199;
  std::string::size_type v200;
  std::string *v201;
  char v203;
  uint64_t v204;
  int v205;
  std::string::size_type size;
  _QWORD *v207;
  uint64_t v208;
  std::string::pointer data;
  unint64_t v210;
  std::string v211;
  uint64_t *v212[2];
  std::string __s;
  __int128 v214;
  uint64_t *v215[2];
  uint64_t *v216[2];
  std::string v217;
  __int128 __p;
  __int128 v219;
  uint64_t *v220;
  __int128 v221;
  std::string v222;
  std::string v223;
  char v224[8];
  void *v225;
  char v226;
  void *v227;
  char v228;
  std::string v229;
  std::string v230;
  char v231;
  _BYTE __str[32];
  __int128 v233;
  __int128 v234;
  std::string v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v225, &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>(&v227, &byte_1DEBD87CE);
  v224[0] = a3;
  v4 = **a2;
  if ((*a2)[1] == v4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (*(_QWORD *)(v4 + 24) == -1)
    goto LABEL_387;
  memset(&v223, 0, sizeof(v223));
  FrontendNNModule::passdown_leading_empty_token((FrontendNNModule *)a1);
  memset(&v222, 0, sizeof(v222));
  v5 = **a2;
  v207 = a1;
  v6 = 0;
  if ((*a2)[1] != v5)
  {
    v7 = 0;
    v199 = 0;
    v198 = 0;
    v197 = a1 + 4;
    while (1)
    {
      v8 = operator new(0x30uLL);
      v204 = v7;
      v9 = (std::string *)(v5 + 40 * v7);
      *(_OWORD *)((char *)v8 + 8) = 0u;
      *(_QWORD *)v8 = &off_1EA932198;
      v8[2] = 0u;
      *((_QWORD *)v8 + 3) = v8 + 2;
      *(_QWORD *)&v221 = (char *)v8 + 24;
      *((_QWORD *)&v221 + 1) = v8;
      v220 = 0;
      __p = 0u;
      v219 = 0u;
      data = v9[1].__r_.__value_.__l.__data_;
      v201 = v9;
      size = v9[1].__r_.__value_.__l.__size_;
      memset(__str, 0, 24);
      v11 = a1[38];
      v10 = a1[39];
      v12 = (v10 - v11) >> 4;
      v13 = 0;
      if (v10 != v11)
      {
        v14 = 0;
        if (v12 <= 1)
          v15 = 1;
        else
          v15 = (v10 - v11) >> 4;
        v16 = (uint64_t *)a1[38];
        while (1)
        {
          v17 = *v16;
          if ((_QWORD *)(v17 + 8) == v18)
          {
            v19 = 0;
            if (v14)
            {
LABEL_14:
              v20 = (v14 - 1);
              if (v12 <= v20)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v13 = *(_QWORD *)(v19 + 8) + v13 - (*(_QWORD *)(v21[5] + 16) + *(_QWORD *)(v21[5] + 24));
            }
          }
          else
          {
            v19 = v18[5] + 8;
            if (v14)
              goto LABEL_14;
          }
          if (v6 != v14)
          {
            v22 = *(char *)(v19 + 47) < 0 ? *(_QWORD *)(v19 + 32) : *(unsigned __int8 *)(v19 + 47);
            v13 += v22;
            ++v14;
            v16 += 2;
            if (v15 != v14)
              continue;
          }
          v23 = v11;
          goto LABEL_23;
        }
      }
      v23 = a1[39];
LABEL_23:
      if (v6 < v12)
      {
        v208 = 0;
        v200 = 0;
        v203 = 0;
        v24 = 16 * v6;
        v25 = v6;
        v26 = (std::string::pointer)v13;
        while (1)
        {
          v210 = v13;
          v27 = v26;
          v28 = *(_QWORD *)(v23 + v24);
          if ((_QWORD *)(v28 + 8) == v29)
            v30 = 0;
          else
            v30 = v29[5] + 8;
          v31 = (v10 - v11) >> 4;
          if (v31 <= v25)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v32 = *(_QWORD *)(v11 + v24);
          if ((_QWORD *)(v32 + 8) == v33)
            v34 = 0;
          else
            v34 = v33[5] + 8;
          v35 = v27;
          if (v25 >= v31 - 1)
          {
            v38 = 0;
          }
          else
          {
            if (v31 <= v25 + 1)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v36 = *(_QWORD *)(v11 + v24 + 16);
            if ((_QWORD *)(v36 + 8) == v37)
              v38 = 0;
            else
              v38 = v37[5] + 8;
            v35 = v27;
          }
          v39 = (_OWORD *)(v30 + 24);
          if (*(char *)(v30 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(v30 + 24), *(_QWORD *)(v30 + 32));
          }
          else
          {
            *(_OWORD *)&v235.__r_.__value_.__l.__data_ = *v39;
            v235.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 40);
          }
          v40 = v6;
          UTFString::rstrip(&v235);
          __s = v235;
          v41 = v235.__r_.__value_.__r.__words[2];
          memset(&v235, 0, sizeof(v235));
          v42 = HIBYTE(v41);
          if ((v41 & 0x8000000000000000) != 0)
            v42 = __s.__r_.__value_.__l.__size_;
          v43 = (std::string::size_type)&v35[v42];
          if (&v35[v42] <= data)
          {
            if (v38)
            {
              v54 = *(_QWORD *)(v38 + 8);
              v55 = *(_QWORD *)(v30 + 8);
              v26 = (std::string::pointer)(v54 + v43 - (v55 + *(_QWORD *)(v30 + 16)));
              v56 = v54 - v55;
            }
            else
            {
              v56 = *(_QWORD *)(v30 + 16);
              v26 = &v35[v42];
            }
            v13 = v210;
            v60 = __str[23];
            if (__str[23] < 0)
              v60 = *(_QWORD *)&__str[8];
            a1 = v207;
            v6 = v40;
            if (v60)
            {
              std::operator+<char>();
            }
            else if (SHIBYTE(v41) < 0)
            {
              std::string::__init_copy_ctor_external(&v230, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else
            {
              v230 = __s;
            }
            if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &v230;
            else
              v64 = (std::string *)v230.__r_.__value_.__r.__words[0];
            if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
            else
              v65 = v230.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__str, (const std::string::value_type *)v64, v65);
            if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v230.__r_.__value_.__l.__data_);
            v208 += v56;
            v53 = 7;
          }
          else if (data == v35 && v43 == size)
          {
            std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v219 + 1, *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56));
            LODWORD(v217.__r_.__value_.__l.__data_) = *(_DWORD *)v30;
            *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = *(_OWORD *)(v30 + 8);
            std::string::operator=((std::string *)&__p, (const std::string *)(v30 + 24));
            a1 = v207;
            v13 = v210;
            if (!v34)
            {
              if ((SBYTE7(v219) & 0x80u) == 0)
                v44 = BYTE7(v219);
              else
                v44 = *((_QWORD *)&__p + 1);
              UTFString::lstrip((std::string *)&__p);
              if ((SBYTE7(v219) & 0x80u) == 0)
                v45 = BYTE7(v219);
              else
                v45 = *((_QWORD *)&__p + 1);
              v46 = v44 - v45;
              if (v44 != v45)
              {
                v47 = v217.__r_.__value_.__l.__size_ + v46;
                v48 = v217.__r_.__value_.__r.__words[2] >= v46;
                v49 = v217.__r_.__value_.__r.__words[2] - v46;
                if (!v48)
                  v49 = 0;
                v217.__r_.__value_.__l.__size_ = v47;
                v217.__r_.__value_.__r.__words[2] = v49;
              }
              UTFString::rstrip((std::string *)&__p);
              v50 = BYTE7(v219);
              if (SBYTE7(v219) < 0)
                v50 = *((_QWORD *)&__p + 1);
              v51 = v45 - v50;
              if (v51)
              {
                v48 = v217.__r_.__value_.__r.__words[2] >= v51;
                v52 = v217.__r_.__value_.__r.__words[2] - v51;
                if (!v48)
                  v52 = 0;
                v217.__r_.__value_.__r.__words[2] = v52;
              }
            }
            v6 = v25 + 1;
            v205 = 1;
            v26 = data;
            v53 = 1;
          }
          else
          {
            v48 = data >= v35;
            v57 = data - v35;
            if (v48 && v43 >= size)
            {
              std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v219 + 1, *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56));
              LODWORD(v217.__r_.__value_.__l.__data_) = *(_DWORD *)v30;
              if (!v34)
              {
                v217.__r_.__value_.__l.__size_ = v57 + *(_QWORD *)(v30 + 8);
                v217.__r_.__value_.__r.__words[2] = size - (_QWORD)data;
                std::string::basic_string(&v230, (const std::string *)(v30 + 24), v57, size - (_QWORD)data, (std::allocator<char> *)&v229);
                a1 = v207;
                v26 = v27;
                if (SBYTE7(v219) < 0)
                  operator delete((void *)__p);
                __p = *(_OWORD *)&v230.__r_.__value_.__l.__data_;
                *(_QWORD *)&v219 = *((_QWORD *)&v230.__r_.__value_.__l + 2);
                if (v43 == size)
                  v6 = v25 + 1;
                else
                  v6 = v40;
                v53 = 1;
                v205 = 4;
                goto LABEL_119;
              }
              v58 = *(_QWORD *)(v30 + 16);
              v217.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8);
              v217.__r_.__value_.__r.__words[2] = v58;
              std::string::operator=((std::string *)&__p, (const std::string *)(v30 + 24));
              a1 = v207;
              v26 = v27;
              v13 = v210;
              v6 = v25 + 1;
              v53 = 1;
              v59 = 2;
LABEL_156:
              v205 = v59;
              goto LABEL_101;
            }
            if (v210 <= (unint64_t)data && v43 >= size)
            {
              std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v219 + 1, *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56));
              LODWORD(v217.__r_.__value_.__l.__data_) = *(_DWORD *)v30;
              if (v43 == size)
              {
                v61 = *(_QWORD *)(v30 + 16);
                std::operator+<char>();
                if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v62 = &v230;
                else
                  v62 = (std::string *)v230.__r_.__value_.__r.__words[0];
                if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v63 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
                else
                  v63 = v230.__r_.__value_.__l.__size_;
                std::string::append((std::string *)__str, (const std::string::value_type *)v62, v63);
                a1 = v207;
                if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v230.__r_.__value_.__l.__data_);
                v6 = v25 + 1;
              }
              else
              {
                v26 = v27;
                if (v34)
                {
                  v205 = 0;
                  v53 = 1;
                  a1 = v207;
                  v6 = v40;
LABEL_119:
                  v13 = v210;
                  goto LABEL_101;
                }
                v61 = size - (_QWORD)v27 + 1;
                v70 = std::string::basic_string(&v229, (const std::string *)(v30 + 24), 0, v61, (std::allocator<char> *)&v231);
                a1 = v207;
                v71 = std::string::insert(v70, 0, " ");
                v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
                v230.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v72;
                v71->__r_.__value_.__l.__size_ = 0;
                v71->__r_.__value_.__r.__words[2] = 0;
                v71->__r_.__value_.__r.__words[0] = 0;
                if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v73 = &v230;
                else
                  v73 = (std::string *)v230.__r_.__value_.__r.__words[0];
                if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v74 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
                else
                  v74 = v230.__r_.__value_.__l.__size_;
                std::string::append((std::string *)__str, (const std::string::value_type *)v73, v74);
                if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v230.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                v6 = v25;
              }
              v217.__r_.__value_.__l.__size_ = v200;
              v217.__r_.__value_.__r.__words[2] = v61 + v208;
              v208 += v61;
              std::string::operator=((std::string *)&__p, (const std::string *)__str);
              v26 = v27;
              v13 = v210;
              if (!v34)
              {
                if ((SBYTE7(v219) & 0x80u) == 0)
                  v75 = BYTE7(v219);
                else
                  v75 = *((_QWORD *)&__p + 1);
                UTFString::lstrip((std::string *)&__p);
                if ((SBYTE7(v219) & 0x80u) == 0)
                  v76 = BYTE7(v219);
                else
                  v76 = *((_QWORD *)&__p + 1);
                v77 = v75 - v76;
                if (v75 != v76)
                {
                  v78 = v217.__r_.__value_.__l.__size_ + v77;
                  v48 = v217.__r_.__value_.__r.__words[2] >= v77;
                  v79 = v217.__r_.__value_.__r.__words[2] - v77;
                  if (!v48)
                    v79 = 0;
                  v217.__r_.__value_.__l.__size_ = v78;
                  v217.__r_.__value_.__r.__words[2] = v79;
                }
                UTFString::rstrip((std::string *)&__p);
                v80 = BYTE7(v219);
                if (SBYTE7(v219) < 0)
                  v80 = *((_QWORD *)&__p + 1);
                v81 = v76 - v80;
                if (v81)
                {
                  v48 = v217.__r_.__value_.__r.__words[2] >= v81;
                  v82 = v217.__r_.__value_.__r.__words[2] - v81;
                  if (!v48)
                    v82 = 0;
                  v217.__r_.__value_.__r.__words[2] = v82;
                }
              }
              v53 = 1;
              v59 = 5;
              goto LABEL_156;
            }
            if ((v203 & 1) == 0)
            {
              v200 = *(_QWORD *)(v30 + 8);
              v210 = (unint64_t)v27;
            }
            if (v38)
            {
              v66 = *(_QWORD *)(v38 + 8);
              v67 = *(_QWORD *)(v30 + 8);
              v26 = (std::string::pointer)(v66 + v43 - (v67 + *(_QWORD *)(v30 + 16)));
              v68 = v66 - v67;
            }
            else
            {
              v68 = *(_QWORD *)(v30 + 16);
              v26 = (std::string::pointer)v43;
            }
            v69 = __str[23];
            if (__str[23] < 0)
              v69 = *(_QWORD *)&__str[8];
            v6 = v40;
            if (v69)
            {
              std::operator+<char>();
              v13 = v210;
            }
            else
            {
              v13 = v210;
              if (*(char *)(v30 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)(v30 + 24), *(_QWORD *)(v30 + 32));
              }
              else
              {
                *(_OWORD *)&v230.__r_.__value_.__l.__data_ = *v39;
                v230.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 40);
              }
            }
            if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v230;
            else
              v83 = (std::string *)v230.__r_.__value_.__r.__words[0];
            if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
            else
              v84 = v230.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__str, (const std::string::value_type *)v83, v84);
            a1 = v207;
            if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v230.__r_.__value_.__l.__data_);
            v53 = 0;
            v208 += v68;
            v203 = 1;
          }
LABEL_101:
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (v53 != 7 && v53)
          {
            v85 = v205;
            goto LABEL_171;
          }
          ++v25;
          v11 = a1[38];
          v10 = a1[39];
          v24 += 16;
          v23 = v11;
          if (v25 >= (v10 - v11) >> 4)
            goto LABEL_168;
        }
      }
      v11 = v23;
LABEL_168:
      if (v199)
      {
        v85 = 3;
      }
      else
      {
        v6 = (v10 - v11) >> 4;
        v85 = 0;
      }
LABEL_171:
      if ((__str[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__str);
        if (v85)
        {
LABEL_173:
          if (v85 == 3)
          {
            std::operator+<char>();
            if (__str[23] >= 0)
              v86 = __str;
            else
              v86 = *(const std::string::value_type **)__str;
            if (__str[23] >= 0)
              v87 = __str[23];
            else
              v87 = *(_QWORD *)&__str[8];
            std::string::append(&v222, v86, v87);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            v88 = 4;
          }
          else
          {
            v89 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v89 = v222.__r_.__value_.__l.__size_;
            if (v89)
            {
              v90 = *(_QWORD *)(*(_QWORD *)(a1[5]
                                          + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((_BYTE *)a1 + 72) + *((_BYTE *)a1 + 64) - 1));
              if ((_QWORD *)(v90 + 8) == v91)
                v92 = 0;
              else
                v92 = (std::string *)(v91[5] + 8);
              UTFString::rstrip(&v222);
              (*(void (**)(_BYTE *__return_ptr, _QWORD *, std::string *))(*a1 + 136))(__str, a1, &v222);
              v93 = v6;
              if (__str[23] >= 0)
                v94 = __str[23];
              else
                v94 = *(_QWORD *)&__str[8];
              std::string::basic_string[abi:ne180100]((uint64_t)&__s, v94 + 3);
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s = &__s;
              else
                p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              if (v94)
              {
                if (__str[23] >= 0)
                  v96 = __str;
                else
                  v96 = *(_BYTE **)__str;
                memmove(p_s, v96, v94);
              }
              *(_DWORD *)((char *)&p_s->__r_.__value_.__l.__data_ + v94) = 2121504;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v97 = &__s;
              else
                v97 = (std::string *)__s.__r_.__value_.__r.__words[0];
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v98 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
              else
                v98 = __s.__r_.__value_.__l.__size_;
              std::string::append(&v223, (const std::string::value_type *)v97, v98);
              v6 = v93;
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              v100 = *(uint64_t **)(v99 + 64);
              v216[0] = *(uint64_t **)(v99 + 56);
              v216[1] = v100;
              if (v100)
              {
                v101 = (unint64_t *)(v100 + 1);
                do
                  v102 = __ldxr(v101);
                while (__stxr(v102 + 1, v101));
              }
              FrontendNNModule::update_embedded_lang((uint64_t)v224, v216);
              if (v100)
              {
                v103 = (unint64_t *)(v100 + 1);
                do
                  v104 = __ldaxr(v103);
                while (__stlxr(v104 - 1, v103));
                if (!v104)
                {
                  (*(void (**)(uint64_t *))(*v100 + 16))(v100);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v100);
                }
              }
              create_pronunciation_with_phone_sequence((uint64_t *)&__s, (std::string *)__str, (uint64_t)v224);
              if (v92 != &__s)
                std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v92, (uint64_t *)__s.__r_.__value_.__l.__data_, (uint64_t *)__s.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__s.__r_.__value_.__l.__size_ - __s.__r_.__value_.__r.__words[0]) >> 3));
              v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
              if ((__str[23] & 0x80000000) != 0)
                operator delete(*(void **)__str);
            }
            UTFString::lstrip((std::string *)&__p);
            UTFString::rstrip((std::string *)&__p);
            Agglomerate::set<TokenBasicItem>(v221, (__int128 *)&v217);
            std::string::operator=(&v222, v201);
            v233 = 0u;
            memset(__str, 0, sizeof(__str));
            if (v85 != 2)
            {
              UTFString::rstrip(&v222);
              (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1 + 136))(&__s, a1, &v222);
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v105 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
              else
                v105 = __s.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v235, v105 + 3);
              if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v106 = &v235;
              else
                v106 = (std::string *)v235.__r_.__value_.__r.__words[0];
              if (v105)
              {
                if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v107 = &__s;
                else
                  v107 = (std::string *)__s.__r_.__value_.__r.__words[0];
                memmove(v106, v107, v105);
              }
              *(_DWORD *)((char *)&v106->__r_.__value_.__l.__data_ + v105) = 2121504;
              if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v108 = &v235;
              else
                v108 = (std::string *)v235.__r_.__value_.__r.__words[0];
              if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v109 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
              else
                v109 = v235.__r_.__value_.__l.__size_;
              std::string::append(&v223, (const std::string::value_type *)v108, v109);
              if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v235.__r_.__value_.__l.__data_);
              v110 = (std::__shared_weak_count *)v220;
              v215[0] = *((uint64_t **)&v219 + 1);
              v215[1] = v220;
              if (v220)
              {
                v111 = (unint64_t *)(v220 + 1);
                do
                  v112 = __ldxr(v111);
                while (__stxr(v112 + 1, v111));
              }
              FrontendNNModule::update_embedded_lang((uint64_t)v224, v215);
              if (v110)
              {
                p_shared_owners = (unint64_t *)&v110->__shared_owners_;
                do
                  v114 = __ldaxr(p_shared_owners);
                while (__stlxr(v114 - 1, p_shared_owners));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              create_pronunciation_with_phone_sequence((uint64_t *)&v235, &__s, (uint64_t)v224);
              std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)__str, (uint64_t *)v235.__r_.__value_.__l.__data_, (uint64_t *)v235.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v235.__r_.__value_.__l.__size_ - v235.__r_.__value_.__r.__words[0]) >> 3));
              v230.__r_.__value_.__r.__words[0] = (std::string::size_type)&v235;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
              if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
              {
                *v222.__r_.__value_.__l.__data_ = 0;
                v222.__r_.__value_.__l.__size_ = 0;
              }
              else
              {
                v222.__r_.__value_.__s.__data_[0] = 0;
                *((_BYTE *)&v222.__r_.__value_.__s + 23) = 0;
              }
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
            }
            std::string::operator=((std::string *)&__str[24], (const std::string *)&__p);
            v234 = *(_OWORD *)&v217.__r_.__value_.__r.__words[1];
            v115 = v221;
            Agglomerate::set<TokenPronunciationItem>(v221, (uint64_t)__str);
            *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0u;
            v214 = 0u;
            if (-1 - 0x3333333333333333 * (((*a2)[1] - **a2) >> 3) == v204)
            {
              v116 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
              FrontendNNModule::update_phrasing_item(a1, (uint64_t)&__s, 0, v116);
            }
            else
            {
              FrontendNNModule::update_phrasing_item(a1, (uint64_t)&__s, 0, 0);
            }
            Agglomerate::set<TokenPhrasingItem>(v115, (__int16 *)&__s);
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v197, &v221);
            v117 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
            if (*((_QWORD *)&v214 + 1))
            {
              v118 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            v120 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
            if (__s.__r_.__value_.__r.__words[2])
            {
              v121 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            if (SHIBYTE(v233) < 0)
              operator delete(*(void **)&__str[24]);
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
            v88 = 0;
            v199 = v85 == 2;
          }
          goto LABEL_272;
        }
      }
      else if (v85)
      {
        goto LABEL_173;
      }
      v88 = 2;
      v198 = 1;
LABEL_272:
      v123 = (std::__shared_weak_count *)v220;
      if (v220)
      {
        v124 = (unint64_t *)(v220 + 1);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      if (SBYTE7(v219) < 0)
        operator delete((void *)__p);
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
      if (*((_QWORD *)&v221 + 1))
      {
        v127 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      if ((v88 | 4) == 4)
      {
        v7 = v204 + 1;
        v5 = **a2;
        if (0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - v5) >> 3) > v204 + 1)
          continue;
      }
      v129 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v129 = v222.__r_.__value_.__l.__size_;
      if (v129)
      {
        v130 = *(_QWORD *)(*(_QWORD *)(a1[5] + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((_BYTE *)a1 + 72) + *((_BYTE *)a1 + 64) - 1));
        if ((_QWORD *)(v130 + 8) == v131)
          v132 = 0;
        else
          v132 = (uint64_t *)(v131[5] + 8);
        UTFString::rstrip(&v222);
        (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1 + 136))(&v217, a1, &v222);
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v133 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
        else
          v133 = v217.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)__str, v133 + 3);
        if (__str[23] >= 0)
          v134 = __str;
        else
          v134 = *(_BYTE **)__str;
        if (v133)
        {
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = &v217;
          else
            v135 = (std::string *)v217.__r_.__value_.__r.__words[0];
          memmove(v134, v135, v133);
        }
        *(_DWORD *)&v134[v133] = 2121504;
        if (__str[23] >= 0)
          v136 = __str;
        else
          v136 = *(const std::string::value_type **)__str;
        if (__str[23] >= 0)
          v137 = __str[23];
        else
          v137 = *(_QWORD *)&__str[8];
        std::string::append(&v223, v136, v137);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v139 = *(uint64_t **)(v138 + 64);
        v212[0] = *(uint64_t **)(v138 + 56);
        v212[1] = v139;
        if (v139)
        {
          v140 = (unint64_t *)(v139 + 1);
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }
        FrontendNNModule::update_embedded_lang((uint64_t)v224, v212);
        if (v139)
        {
          v142 = (unint64_t *)(v139 + 1);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            (*(void (**)(uint64_t *))(*v139 + 16))(v139);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v139);
          }
        }
        create_pronunciation_with_phone_sequence((uint64_t *)__str, &v217, (uint64_t)v224);
        if (v132 != (uint64_t *)__str)
          std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v132, *(uint64_t **)__str, *(uint64_t **)&__str[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__str[8] - *(_QWORD *)__str) >> 3));
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
        v144 = *(_QWORD *)(*(_QWORD *)(a1[5] + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((_BYTE *)a1 + 72) + *((_BYTE *)a1 + 64) - 1));
        if ((_QWORD *)(v144 + 8) != v145)
        {
          v146 = v145[5];
          *(_BYTE *)(v146 + 9) = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
        }
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v217.__r_.__value_.__l.__data_);
      }
      if ((v198 & 1) != 0)
      {
        v151 = (void **)a1[5];
        v152 = (void **)a1[6];
        if (v152 == v151)
        {
          v152 = (void **)a1[5];
        }
        else
        {
          v153 = a1[8];
          v154 = &v151[v153 >> 8];
          v155 = (uint64_t)*v154 + 16 * v153;
          v156 = *(uint64_t *)((char *)v151 + (((a1[9] + v153) >> 5) & 0x7FFFFFFFFFFFFF8))
               + 16 * (*((_BYTE *)a1 + 72) + v153);
          if (v155 != v156)
          {
            do
            {
              v155 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v155) + 16;
              if (v155 - (_QWORD)*v154 == 4096)
              {
                v157 = (uint64_t)v154[1];
                ++v154;
                v155 = v157;
              }
            }
            while (v155 != v156);
            v151 = (void **)a1[5];
            v152 = (void **)a1[6];
          }
        }
        a1[9] = 0;
        v175 = (char *)v152 - (char *)v151;
        if (v175 >= 0x11)
        {
          do
          {
            operator delete(*v151);
            v176 = a1[6];
            v151 = (void **)(a1[5] + 8);
            a1[5] = v151;
            v175 = v176 - (_QWORD)v151;
          }
          while (v175 > 0x10);
        }
        if (v175 >> 3 == 1)
        {
          v177 = 128;
        }
        else
        {
          if (v175 >> 3 != 2)
          {
            v174 = 0;
            goto LABEL_381;
          }
          v177 = 256;
        }
        v174 = 0;
        a1[8] = v177;
        goto LABEL_381;
      }
      break;
    }
  }
  v147 = a1[9];
  v148 = v6;
  if (v147)
  {
    v150 = *(_QWORD *)(v149[5] + 24) + *(_QWORD *)(v149[5] + 16);
  }
  else
  {
    v150 = 0;
  }
  v159 = a1[38];
  v158 = a1[39];
  if (v148 >= (v158 - v159) >> 4)
    goto LABEL_358;
  v160 = 0;
  v161 = 16 * v148;
  do
  {
    if ((v160 & 1) == 0)
    {
      v162 = v207[9];
      if (!v162)
      {
        v160 = 0;
        goto LABEL_342;
      }
    }
    v160 = 1;
LABEL_342:
    if (v148 >= (v158 - v159) >> 4)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    std::deque<std::shared_ptr<Agglomerate>>::push_back(v207 + 4, (__int128 *)(v159 + v161));
    v159 = v207[38];
    v158 = v207[39];
LABEL_344:
    v161 += 16;
    ++v148;
  }
  while (v148 < (v158 - v159) >> 4);
  if ((v160 & 1) != 0)
  {
    __p = 0u;
    *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = 0u;
    v163 = (*(uint64_t (**)(_QWORD *))(*v207 + 88))(v207);
    FrontendNNModule::update_phrasing_item(v207, (uint64_t)&v217, 0, v163);
    Agglomerate::set<TokenPhrasingItem>(*(_QWORD *)(*(_QWORD *)(v207[5] + (((unint64_t)(v207[9] + v207[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((_BYTE *)v207 + 72) + *((_BYTE *)v207 + 64) - 1)), (__int16 *)&v217);
    v164 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v165 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    v167 = (std::__shared_weak_count *)v217.__r_.__value_.__r.__words[2];
    if (v217.__r_.__value_.__r.__words[2])
    {
      v168 = (unint64_t *)(v217.__r_.__value_.__r.__words[2] + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
  }
LABEL_358:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v170 = Diagnostics_GetLogObject(void)::__profile_log_default;
  a1 = v207;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&v217, (uint64_t)&v223);
    v171 = (v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v217
         : (std::string *)v217.__r_.__value_.__r.__words[0];
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)&__str[4] = v171;
    _os_log_impl(&dword_1DE3F6000, v170, OS_LOG_TYPE_DEBUG, "#Formatted - %s", __str, 0xCu);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&v217, (uint64_t)&v223);
  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v173 = &v217;
  else
    v173 = (std::string *)v217.__r_.__value_.__r.__words[0];
  Diagnostics::log(7, "#Formatted - %s", v172, v173);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  v174 = 1;
LABEL_381:
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v223.__r_.__value_.__l.__data_);
    if ((v174 & 1) != 0)
      goto LABEL_451;
  }
  else if ((v174 & 1) != 0)
  {
    goto LABEL_451;
  }
LABEL_387:
  FrontendNNModule::passdown_leading_empty_token((FrontendNNModule *)a1);
  memset(&v217, 0, sizeof(v217));
  v178 = (__int128 *)**a2;
  v179 = (__int128 *)(*a2)[1];
  if (v178 != v179)
  {
    while (2)
    {
      if (*((char *)v178 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v178, *((_QWORD *)v178 + 1));
      }
      else
      {
        v180 = *v178;
        *(_QWORD *)&__str[16] = *((_QWORD *)v178 + 2);
        *(_OWORD *)__str = v180;
      }
      if ((__str[23] & 0x80000000) != 0)
      {
        v181 = *(_QWORD *)&__str[8];
        if (!*(_QWORD *)&__str[8])
          goto LABEL_432;
        if (**(_BYTE **)__str != 32)
          goto LABEL_411;
        std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
LABEL_398:
        UTFString::lstrip(&v211);
        v235 = v211;
        memset(&v211, 0, sizeof(v211));
        v182 = std::string::append(&v235, " ");
        v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v183;
        v182->__r_.__value_.__l.__size_ = 0;
        v182->__r_.__value_.__r.__words[2] = 0;
        v182->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v184 = &__s;
        else
          v184 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v185 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v185 = __s.__r_.__value_.__l.__size_;
        std::string::append(&v217, (const std::string::value_type *)v184, v185);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v235.__r_.__value_.__l.__data_);
        if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        {
          v186 = (void *)v211.__r_.__value_.__r.__words[0];
          goto LABEL_430;
        }
LABEL_431:
        if ((__str[23] & 0x80000000) != 0)
LABEL_432:
          operator delete(*(void **)__str);
      }
      else if (__str[23])
      {
        if (__str[0] == 32)
        {
          v211 = *(std::string *)__str;
          goto LABEL_398;
        }
        v181 = *(_QWORD *)&__str[8];
LABEL_411:
        if (__str[23] >= 0)
          v187 = __str[23];
        else
          v187 = v181;
        std::string::basic_string[abi:ne180100]((uint64_t)&__s, v187 + 1);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v188 = &__s;
        else
          v188 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if (v187)
        {
          if (__str[23] >= 0)
            v189 = __str;
          else
            v189 = *(_BYTE **)__str;
          memmove(v188, v189, v187);
        }
        *(_WORD *)((char *)&v188->__r_.__value_.__l.__data_ + v187) = 32;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v190 = &__s;
        else
          v190 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v191 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v191 = __s.__r_.__value_.__l.__size_;
        std::string::append(&v217, (const std::string::value_type *)v190, v191);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          v186 = (void *)__s.__r_.__value_.__r.__words[0];
LABEL_430:
          operator delete(v186);
        }
        goto LABEL_431;
      }
      v178 = (__int128 *)((char *)v178 + 40);
      if (v178 == v179)
        break;
      continue;
    }
  }
  UTFString::rstrip(&v217);
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, std::string *))(*a1 + 136))(__str, a1, &v217);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v192 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__s, (uint64_t)__str);
    v193 = (__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__s
         : (std::string *)__s.__r_.__value_.__r.__words[0];
    LODWORD(v235.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v235.__r_.__value_.__r.__words + 4) = (std::string::size_type)v193;
    _os_log_impl(&dword_1DE3F6000, v192, OS_LOG_TYPE_DEBUG, "#Formatted - %s", (uint8_t *)&v235, 0xCu);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__s, (uint64_t)__str);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v195 = &__s;
  else
    v195 = (std::string *)__s.__r_.__value_.__r.__words[0];
  Diagnostics::log(7, "#Formatted - %s", v194, v195);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  (*(void (**)(_QWORD *, _BYTE *, _QWORD, _QWORD))(*a1 + 176))(a1, __str, 0, a3);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
LABEL_451:
  if (v228 < 0)
    operator delete(v227);
  if (v226 < 0)
    operator delete(v225);
}

void sub_1DE96CCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;

  if (a52 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  fst::FstHeader::~FstHeader(&a72);
  _Unwind_Resume(a1);
}

BOOL FrontendNNModule::create_token_for_empty_markup(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::string *v7;
  std::string::size_type size;
  void *v9;
  std::string::size_type v10;
  int v11;
  _BOOL8 v12;
  __int128 *v13;
  __int128 v14;
  std::string::size_type v15;
  char v16;
  std::string::size_type v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  std::string v29;
  std::string __str;
  std::string v31;

  v7 = (std::string *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  }
  UTFString::lstrip(&v31);
  UTFString::rstrip(&v31);
  size = v31.__r_.__value_.__l.__size_;
  v9 = (void *)v31.__r_.__value_.__r.__words[0];
  v10 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  memset(&v31, 0, sizeof(v31));
  if (v11 >= 0)
    size = v10;
  if (size)
  {
    v12 = 0;
    if (v11 < 0)
      goto LABEL_42;
    return v12;
  }
  v13 = *(__int128 **)(*(_QWORD *)(a2 + 48) + 16);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *v13;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  }
  v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = __str.__r_.__value_.__l.__size_;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 16);
  v12 = v15 >= v18 + v17;
  if (v15 >= v18 + v17)
  {
    std::string::basic_string(&v29, &__str, v17, v18, (std::allocator<char> *)&v28);
    v19 = *(unsigned __int8 *)(a2 + 47);
    if ((v19 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(a2 + 47);
    else
      v20 = *(_QWORD *)(a2 + 32);
    v21 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = v29.__r_.__value_.__l.__size_;
    if (v20 == v21)
    {
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v29;
      else
        v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v19 & 0x80) != 0)
      {
        if (!memcmp(v7->__r_.__value_.__l.__data_, v22, *(_QWORD *)(a2 + 32)))
          goto LABEL_32;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 47))
          goto LABEL_32;
        v23 = v7;
        while (v23->__r_.__value_.__s.__data_[0] == v22->__r_.__value_.__s.__data_[0])
        {
          v23 = (std::string *)((char *)v23 + 1);
          v22 = (std::string *)((char *)v22 + 1);
          if (!--v19)
            goto LABEL_32;
        }
      }
    }
    std::string::operator=(v7, &v29);
LABEL_32:
    if (a4)
    {
      v24 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v24->__shared_owners_ = 0u;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      *(_OWORD *)&v24[1].__shared_owners_ = 0u;
      v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
      v24[1].__vftable = (std::__shared_weak_count_vtbl *)&v24[1].__shared_owners_;
      *(_QWORD *)&v28 = v24 + 1;
      *((_QWORD *)&v28 + 1) = v24;
      Agglomerate::set<TokenBasicItem>((uint64_t)&v24[1], (__int128 *)a2);
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 32), &v28);
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v16 < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v11 & 0x80000000) == 0)
      return v12;
    goto LABEL_42;
  }
  if (v11 < 0)
LABEL_42:
    operator delete(v9);
  return v12;
}

void sub_1DE96D218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (v31 < 0)
    operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t FrontendNNModule::is_punc_in_the_phone()
{
  return 0;
}

void FrontendNNModule::passdown_leading_empty_token(FrontendNNModule *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;

  v2 = *((_QWORD *)this + 38);
  v1 = *((_QWORD *)this + 39);
  if (v1 != v2)
  {
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 32);
    do
    {
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if ((_QWORD *)(v6 + 8) == v7)
        v8 = 0;
      else
        v8 = v7[5] + 8;
      if (*(char *)(v8 + 47) < 0)
      {
        if (*(_QWORD *)(v8 + 32))
          return;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        return;
      }
      if (v4 >= (v1 - v2) >> 4)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v5, (__int128 *)(v2 + 16 * v4));
      v16 = 0u;
      v17 = 0u;
      FrontendNNModule::update_phrasing_item(this, (uint64_t)&v15, 0, 0);
      Agglomerate::set<TokenPhrasingItem>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)+ (((unint64_t)(*((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((_BYTE *)this + 72) + *((_BYTE *)this + 64) - 1)), &v15);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      ++v4;
      v2 = *((_QWORD *)this + 38);
      v1 = *((_QWORD *)this + 39);
    }
    while (v4 < (v1 - v2) >> 4);
  }
}

void sub_1DE96D430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

std::string *FrontendNNModule::update_embedded_lang(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = *a2;
  v4 = **a2;
  if (v4)
  {
    v6 = (std::__shared_weak_count *)v3[1];
    v13 = **a2;
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    while (*(_QWORD *)v4)
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v13, *(_QWORD *)v4, *(_QWORD *)(v4 + 8));
      v4 = v13;
    }
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v4 + 40));
    std::string::operator=((std::string *)(a1 + 32), (const std::string *)(*a2 + 5));
    v9 = v14;
    if (v14)
    {
      v10 = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v3 + 5));
    if (*(char *)(a1 + 55) < 0)
    {
      **(_BYTE **)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 55) = 0;
    }
  }
  FrontendNNModule::lang_string_cleanup((std::string *)(a1 + 8));
  return FrontendNNModule::lang_string_cleanup((std::string *)(a1 + 32));
}

void sub_1DE96D554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void FrontendNNModule::update_phrasing_item(_QWORD *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD *v21;
  unint64_t *v22;
  __int128 v23;

  *(_BYTE *)a2 = a3;
  *(_BYTE *)(a2 + 1) = a4;
  v5 = a1[9];
  if (!v5
    || (v6 = *(_QWORD *)(*(_QWORD *)(a1[5] + (((unint64_t)(v5 + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v5 + *((_BYTE *)a1 + 64) - 1)),
  {
    v13 = operator new(0x30uLL);
    *(_OWORD *)((char *)v13 + 8) = 0u;
    *(_QWORD *)v13 = &off_1EA932198;
    *((_QWORD *)&v23 + 1) = v13;
    v13[2] = 0u;
    *((_QWORD *)v13 + 3) = v13 + 2;
    *(_QWORD *)&v23 = (char *)v13 + 24;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a2 + 8, &v23);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = operator new(0x30uLL);
    *(_OWORD *)((char *)v17 + 8) = 0u;
    *(_QWORD *)v17 = &off_1EA932198;
    *((_QWORD *)&v23 + 1) = v17;
    v17[2] = 0u;
    *((_QWORD *)v17 + 3) = v17 + 2;
    *(_QWORD *)&v23 = (char *)v17 + 24;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a2 + 24, &v23);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      goto LABEL_23;
    }
  }
  else
  {
    v8 = v7[5];
    if (*(_BYTE *)(v8 + 8))
    {
      v9 = operator new(0x30uLL);
      *(_OWORD *)((char *)v9 + 8) = 0u;
      *(_QWORD *)v9 = &off_1EA932198;
      *((_QWORD *)&v23 + 1) = v9;
      v9[2] = 0u;
      *((_QWORD *)v9 + 3) = v9 + 2;
      *(_QWORD *)&v23 = (char *)v9 + 24;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a2 + 8, &v23);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a2 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
    }
    if (!*(_BYTE *)(v8 + 9))
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a2 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
      return;
    }
    v21 = operator new(0x30uLL);
    *(_OWORD *)((char *)v21 + 8) = 0u;
    *(_QWORD *)v21 = &off_1EA932198;
    *((_QWORD *)&v23 + 1) = v21;
    v21[2] = 0u;
    *((_QWORD *)v21 + 3) = v21 + 2;
    *(_QWORD *)&v23 = (char *)v21 + 24;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a2 + 24, &v23);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v22);
      while (__stlxr(v20 - 1, v22));
LABEL_23:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

std::string *FrontendNNModule::lang_string_cleanup(std::string *result)
{
  std::string::size_type size;
  std::string::size_type v2;
  _BYTE *v3;
  _BYTE *i;

  size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v2 = (std::string::size_type)result;
  else
    v2 = result->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = result->__r_.__value_.__l.__size_;
  if (size)
  {
    v3 = (_BYTE *)(v2 + size);
    for (i = (_BYTE *)v2; *i != 45; ++i)
    {
      if (!--size)
        return result;
    }
    if (i != v3 && &i[-v2] != (_BYTE *)-1)
      return std::string::erase(result, (std::string::size_type)&i[-v2], 1uLL);
  }
  return result;
}

void Agglomerate::ItemHolder<TokenTransliteratedItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<TokenRewriteItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

uint64_t *std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      v6 = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<std::vector<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936A38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<int>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<std::tuple<std::string,unsigned long,unsigned long>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<std::string,unsigned long,unsigned long>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<std::string,unsigned long,unsigned long>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

_QWORD *std::map<unsigned long,std::pair<unsigned long,unsigned long>>::at(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

std::string *FrontendNNModule::get_input_from_tokens(std::string *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;

  result->__r_.__value_.__r.__words[0] = 0;
  result->__r_.__value_.__l.__size_ = 0;
  result->__r_.__value_.__r.__words[2] = 0;
  v2 = *(_QWORD *)(a2 + 304);
  v3 = *(_QWORD *)(a2 + 312);
  if (v3 != v2)
  {
    v5 = result;
    for (i = 0; i < (v3 - v2) >> 4; ++i)
    {
      v7 = *(_QWORD *)(v2 + 16 * i);
      if ((std::string *)(v7 + 8) == result)
        v8 = 0;
      else
        v8 = result[1].__r_.__value_.__r.__words[2] + 8;
      v9 = *(unsigned __int8 *)(v8 + 47);
      if (*(char *)(v8 + 47) < 0)
      {
        if (*(_QWORD *)(v8 + 32))
        {
LABEL_10:
          if (i)
          {
            v10 = (i - 1);
            if (v10 >= (v3 - v2) >> 4)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v12 = *(_DWORD *)(v8 + 8) - (*(_DWORD *)(v11[5] + 16) + *(_DWORD *)(v11[5] + 24));
            if (v12 >= 1)
            {
              do
              {
                std::string::append(v5, " ");
                --v12;
              }
              while (v12);
              v9 = *(unsigned __int8 *)(v8 + 47);
            }
          }
          if ((v9 & 0x80u) == 0)
            v13 = (const std::string::value_type *)(v8 + 24);
          else
            v13 = *(const std::string::value_type **)(v8 + 24);
          if ((v9 & 0x80u) == 0)
            v14 = v9;
          else
            v14 = *(_QWORD *)(v8 + 32);
          result = std::string::append(v5, v13, v14);
          v2 = *(_QWORD *)(a2 + 304);
          v3 = *(_QWORD *)(a2 + 312);
        }
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        goto LABEL_10;
      }
    }
  }
  return result;
}

void sub_1DE96DCBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(std::string *this, __int128 *a2, _QWORD **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>((char *)&this[1], *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return this;
}

void sub_1DE96DD4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t *std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  void *v26;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v10 = (v4 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v13);
    v16 = &v14[16 * v10];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v21 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v14[16 * v10];
    }
    else
    {
      v22 = &v14[16 * v10];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 16;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
      }
      while (v20 != v21);
      v24 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v22;
    a1[1] = v16 + 16;
    a1[2] = &v14[16 * v15];
    v25 = v24.i64[1];
    v26 = (void *)v24.i64[0];
    while ((void *)v25 != v26)
      v25 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 - 16);
    if (v26)
      operator delete(v26);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *((_QWORD *)v4 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v4 + 16;
  }
  a1[1] = v9;
}

char *std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<Agglomerate>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DE96E0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<Agglomerate>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::destroy[abi:ne180100](v3);
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

uint64_t FrontendNNModule::FrontendNNModule(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, const std::string *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)a1 = off_1EA91D8E0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = a3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1EA91D8E0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1EA91E650;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  v15 = 0uLL;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 208, &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::string::operator=((std::string *)(a1 + 128), a4);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 176), (uint64_t)a4[3].__r_.__value_.__l.__data_, a4[3].__r_.__value_.__l.__size_);
  return a1;
}

void sub_1DE96E3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  va_list va;

  va_start(va, a5);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v8);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a4);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v7);
  if (*(char *)(v5 + 175) < 0)
    operator delete(*(void **)(v5 + 152));
  if (*(char *)(v5 + 151) < 0)
    operator delete(*v6);
  if (*(char *)(v5 + 127) < 0)
    operator delete(*v10);
  FrontendModule::~FrontendModule((void **)v5);
  _Unwind_Resume(a1);
}

void EspressoWordEmbeddingInference::inference(uint64_t a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  std::vector<int>::size_type v9;
  std::vector<int>::size_type v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::chrono::steady_clock::time_point v14;
  int v15;
  NSObject *v16;
  std::chrono::steady_clock::time_point v17;
  std::chrono::steady_clock::time_point v18;
  const char *v19;
  int v20;
  int *v21;
  int *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  NSObject *v30;
  const char *v31;
  void *exception;
  int v33;
  void **v34;
  const char *status_string;
  void **v36;
  void *v37;
  int v38;
  void **v39;
  const char *v40;
  void **v41;
  void *v42;
  int v43;
  void **v44;
  const char *v45;
  void **v46;
  void *v47;
  int v48;
  void **v49;
  const char *v50;
  void **v51;
  void *v52;
  int v53;
  void **v54;
  const char *v55;
  void **v56;
  void *v57;
  int v58;
  void **v59;
  const char *v60;
  void **v61;
  void *v62;
  int v63;
  void **v64;
  const char *v65;
  void **v66;
  void *v67;
  int v68;
  void **v69;
  const char *v70;
  void **v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[21];
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81;
  _BYTE *v82;
  uint64_t v83;
  _OWORD v84[10];
  uint64_t v85;
  void *v86[2];
  char v87;
  void *v88;
  _BYTE *v89;
  uint64_t v90;
  _OWORD v91[10];
  uint64_t v92;
  void *v93[2];
  char v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  void *v98[2];
  char v99;
  void *__p[2];
  char v101;
  std::vector<int> v102;
  std::vector<int> v103;
  uint8_t *v104;
  uint8_t v105[16];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t buf[16];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a2[1] - *a2;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEFAULT, "Espresso WordEmbedding inference begin. word_size = %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Espresso WordEmbedding inference begin. word_size = %ld", v7, a2[1] - *a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v9 = a2[1] - *a2;
  *(_DWORD *)buf = 1;
  std::vector<int>::vector(&v103, v9, (const std::vector<int>::value_type *)buf);
  v10 = a2[1] - *a2;
  *(_DWORD *)buf = 0;
  std::vector<int>::vector(&v102, v10, (const std::vector<int>::value_type *)buf);
  v11 = a1 + 32;
  if (*(char *)(a1 + 55) < 0)
    v11 = *(_QWORD *)(a1 + 32);
  v137 = v11;
  v12 = a1 + 56;
  if (*(char *)(a1 + 79) < 0)
    v12 = *(_QWORD *)(a1 + 56);
  v138 = v12;
  v13 = a1 + 80;
  if (*(char *)(a1 + 103) < 0)
    v13 = *(_QWORD *)(a1 + 80);
  v139 = v13;
  v134 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 2;
  v135 = v134;
  v136 = v134;
  v133 = 1;
  v132 = 0x100000001;
  v131 = 0;
  v130 = 0;
  v129 = 0;
  v128 = 0;
  v127 = 0;
  v126 = 0;
  v125 = 2;
  v124 = 0x200000002;
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape input");
  if (v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v33 = v101;
    v34 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v36 = __p;
    if (v33 < 0)
      v36 = v34;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v36, v15, status_string);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v101 < 0)
    operator delete(__p[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = (double)((v17.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_DEFAULT, "WordEmbedding Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "WordEmbedding Espresso reshaping time: %.3f s", v19, (double)((v18.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0, &v124);
  v20 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v98, "Unable to build plan");
  if (v20)
  {
    v37 = __cxa_allocate_exception(0x10uLL);
    v38 = v99;
    v39 = (void **)v98[0];
    v40 = (const char *)espresso_get_status_string();
    v41 = v98;
    if (v38 < 0)
      v41 = v39;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v41, v20, v40);
    MEMORY[0x1DF0EC99C](v37, buf);
    __cxa_throw(v37, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v99 < 0)
    operator delete(v98[0]);
  v123 = 0;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  *(_OWORD *)buf = 0u;
  v21 = *a2;
  v22 = a2[1];
  v23 = v22 - *a2;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v95, v21, v22, v23);
  v111 = 1;
  v112 = (v96 - (_BYTE *)v95) >> 2;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)buf = v95;
  LODWORD(v123) = 65568;
  v24 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v93, "Unable to bind word_input_");
  if (v24)
  {
    v42 = __cxa_allocate_exception(0x10uLL);
    v43 = v94;
    v44 = (void **)v93[0];
    v45 = (const char *)espresso_get_status_string();
    v46 = v93;
    if (v43 < 0)
      v46 = v44;
    StringFormatter::StringFormatter((StringFormatter *)v91, "%s Error: %d, %s", (const char *)v46, v24, v45);
    MEMORY[0x1DF0EC99C](v42, v91);
    __cxa_throw(v42, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v94 < 0)
    operator delete(v93[0]);
  v92 = 0;
  memset(v91, 0, sizeof(v91));
  v90 = 0;
  v88 = 0;
  v89 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v88, v103.__begin_, v103.__end_, v103.__end_ - v103.__begin_);
  v109 = 1;
  v110 = (v89 - (_BYTE *)v88) >> 2;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)&v91[0] = v88;
  LODWORD(v92) = 65568;
  v25 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v86, "Unable to bind input_mask_");
  if (v25)
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    v48 = v87;
    v49 = (void **)v86[0];
    v50 = (const char *)espresso_get_status_string();
    v51 = v86;
    if (v48 < 0)
      v51 = v49;
    StringFormatter::StringFormatter((StringFormatter *)v84, "%s Error: %d, %s", (const char *)v51, v25, v50);
    MEMORY[0x1DF0EC99C](v47, v84);
    __cxa_throw(v47, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v87 < 0)
    operator delete(v86[0]);
  v85 = 0;
  memset(v84, 0, sizeof(v84));
  v82 = 0;
  v83 = 0;
  v81 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v81, v102.__begin_, v102.__end_, v102.__end_ - v102.__begin_);
  v107 = 1;
  v108 = (v82 - (_BYTE *)v81) >> 2;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)&v84[0] = v81;
  LODWORD(v85) = 65568;
  v26 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v79, "Unable to bind input_type_ids_");
  if (v26)
  {
    v52 = __cxa_allocate_exception(0x10uLL);
    v53 = v80;
    v54 = (void **)v79[0];
    v55 = (const char *)espresso_get_status_string();
    v56 = v79;
    if (v53 < 0)
      v56 = v54;
    StringFormatter::StringFormatter((StringFormatter *)v76, "%s Error: %d, %s", (const char *)v56, v26, v55);
    MEMORY[0x1DF0EC99C](v52, v76);
    __cxa_throw(v52, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v80 < 0)
    operator delete(v79[0]);
  v27 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v77, &byte_1DEBD87CE);
  if (v27)
  {
    v57 = __cxa_allocate_exception(0x10uLL);
    v58 = v78;
    v59 = (void **)v77[0];
    v60 = (const char *)espresso_get_status_string();
    v61 = v77;
    if (v58 < 0)
      v61 = v59;
    StringFormatter::StringFormatter((StringFormatter *)v76, "%s Error: %d, %s", (const char *)v61, v27, v60);
    MEMORY[0x1DF0EC99C](v57, v76);
    __cxa_throw(v57, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v78 < 0)
    operator delete(v77[0]);
  v28 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v74, "Unable to bind output_embeddings_");
  if (v28)
  {
    v62 = __cxa_allocate_exception(0x10uLL);
    v63 = v75;
    v64 = (void **)v74[0];
    v65 = (const char *)espresso_get_status_string();
    v66 = v74;
    if (v63 < 0)
      v66 = v64;
    StringFormatter::StringFormatter((StringFormatter *)v105, "%s Error: %d, %s", (const char *)v66, v28, v65);
    MEMORY[0x1DF0EC99C](v62, v105);
    __cxa_throw(v62, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v75 < 0)
    operator delete(v74[0]);
  EspressoUtils::convert_espbuffer_to_2d_vector(v105, (uint64_t)v76);
  std::vector<std::vector<int>>::__vdeallocate(a3);
  *(_OWORD *)a3 = *(_OWORD *)v105;
  a3[2] = v106;
  v106 = 0;
  memset(v105, 0, sizeof(v105));
  v104 = v105;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  free(v76[0]);
  v29 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v72, &byte_1DEBD87CE);
  if (v29)
  {
    v67 = __cxa_allocate_exception(0x10uLL);
    v68 = v73;
    v69 = (void **)v72[0];
    v70 = (const char *)espresso_get_status_string();
    v71 = v72;
    if (v68 < 0)
      v71 = v69;
    StringFormatter::StringFormatter((StringFormatter *)v105, "%s Error: %d, %s", (const char *)v71, v29, v70);
    MEMORY[0x1DF0EC99C](v67, v105);
    __cxa_throw(v67, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v73 < 0)
    operator delete(v72[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v105 = 0;
    _os_log_impl(&dword_1DE3F6000, v30, OS_LOG_TYPE_DEFAULT, "Espresso WordEmbedding inference end.", v105, 2u);
  }
  Diagnostics::log(5, "Espresso WordEmbedding inference end.", v31);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v102.__begin_)
  {
    v102.__end_ = v102.__begin_;
    operator delete(v102.__begin_);
  }
  if (v103.__begin_)
  {
    v103.__end_ = v103.__begin_;
    operator delete(v103.__begin_);
  }
}

void sub_1DE96EF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  void *v51;
  int v52;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((v52 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      if (a51)
        operator delete(a51);
      v54 = (void *)STACK[0x218];
      if (STACK[0x218])
      {
        STACK[0x220] = (unint64_t)v54;
        operator delete(v54);
      }
      v55 = (void *)STACK[0x2F0];
      if (STACK[0x2F0])
      {
        STACK[0x2F8] = (unint64_t)v55;
        operator delete(v55);
      }
      v56 = (void *)STACK[0x338];
      if (STACK[0x338])
      {
        STACK[0x340] = (unint64_t)v56;
        operator delete(v56);
      }
      v57 = (void *)STACK[0x350];
      if (STACK[0x350])
      {
        STACK[0x358] = (unint64_t)v57;
        operator delete(v57);
      }
      STACK[0x3C0] = a14;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

void WordEmbeddingModule::~WordEmbeddingModule(WordEmbeddingModule *this)
{
  WordEmbeddingModule::~WordEmbeddingModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91F8C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  std::__tree<std::string>::destroy((uint64_t)this + 304, *((char **)this + 39));
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  Module::~Module(this);
}

void WordEmbeddingModule::process_data(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  std::locale::__imp *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::string::size_type i;
  std::string::size_type size;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type v28;
  std::__wrap_iter<const char *> v29;
  std::__wrap_iter<const char *> v30;
  std::__shared_weak_count *cntrl;
  uint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  const char *v41;
  std::locale::__imp *v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::locale::id *v46;
  std::string::value_type v47;
  const std::locale::facet *v48;
  std::string::value_type v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _DWORD *v53;
  int v54;
  std::string *v55;
  __int128 v56;
  std::locale::__imp *p_buf;
  std::string::size_type col_high;
  const std::string *v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  const std::string *v64;
  unsigned __int8 v65;
  const std::ctype<char> *ct;
  std::string *end;
  __int128 v68;
  __int128 v69;
  std::string *v70;
  std::vector<std::string>::pointer v71;
  __int128 v72;
  std::string *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  std::locale::__imp *v77;
  char *v78;
  __int128 v79;
  std::vector<std::string>::pointer begin;
  unint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  std::locale::__imp *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  std::string::size_type v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  std::locale::__imp *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t j;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  int v122;
  size_t v123;
  std::locale::__imp *locale;
  const void *v125;
  std::locale::__imp *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  std::locale::__imp *v130;
  std::string::size_type v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  int v145;
  std::string *v146;
  __int128 v147;
  std::locale::__imp *v148;
  std::string::size_type v149;
  NSObject *v150;
  const char *v151;
  std::locale::__imp *v152;
  std::string *v153;
  NSObject *v154;
  const char *v155;
  std::locale::__imp *v156;
  std::string *v157;
  std::chrono::steady_clock::time_point v158;
  void (***v159)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, _QWORD, void **);
  double v160;
  NSObject *v161;
  double v162;
  const char *v163;
  double v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  const std::string *v179;
  std::string *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  void *__p;
  _DWORD *v187;
  unint64_t v188;
  __int128 v189;
  uint64_t v190;
  std::string v191;
  uint64_t *v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  std::regex_traits<char> v196;
  __int128 v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  std::vector<std::string> v204;
  std::string v205;
  std::string v206;
  std::string __str;
  std::string v208;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type buf;
  std::locale v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::regex_traits<char> __src;
  __int128 v217;
  std::shared_ptr<std::__empty_state<char>> v218;
  std::__owns_one_state<char> *v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v194 = v6;
  v195 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v10 = *(std::__shared_weak_count **)(*(_QWORD *)v9 + 16);
  v177 = *(uint64_t **)(*(_QWORD *)v9 + 8);
  v192 = v177;
  v193 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v15 = (std::locale::__imp *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v15 = *(std::locale::__imp **)v15;
    LODWORD(buf.__traits_.__loc_.__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&buf.__traits_.__loc_.__locale_ + 4) = v15;
    _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_INFO, "Orig text detected in word embedding module is: %s", (uint8_t *)&buf, 0xCu);
  }
  v16 = (uint64_t *)(v6 + 96);
  v17 = v6 + 96;
  if (*(char *)(v6 + 119) < 0)
    v17 = *v16;
  Diagnostics::log(6, "Orig text detected in word embedding module is: %s", v14, v17);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&__src, "\\u001b\\\\(.*?)=(.*?)\\\\");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v196, "\\\\e\\\\(.*?)=(.*?)\\\\");
  std::locale::locale(&buf.__traits_.__loc_, &__src.__loc_);
  *(_OWORD *)&buf.__traits_.__ct_ = *(_OWORD *)&__src.__ct_;
  *(_OWORD *)&buf.__flags_ = v217;
  buf.__start_ = v218;
  if (v218.__cntrl_)
  {
    v18 = &v218.__cntrl_->__shared_owners_;
    do
      v19 = __ldxr((unint64_t *)v18);
    while (__stxr(v19 + 1, (unint64_t *)v18));
  }
  buf.__end_ = v219;
  std::locale::locale(&v210, &v196.__loc_);
  v211 = *(_OWORD *)&v196.__ct_;
  v212 = v197;
  v213 = v198;
  v214 = v199;
  if (v199)
  {
    v20 = (unint64_t *)&v199->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v215 = v200;
  memset(&v208, 0, sizeof(v208));
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
  __str.__r_.__value_.__s.__data_[8] = 0;
  v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x80uLL);
  v208.__r_.__value_.__l.__size_ = v208.__r_.__value_.__r.__words[0];
  v208.__r_.__value_.__r.__words[2] = v208.__r_.__value_.__r.__words[0] + 128;
  v208.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::basic_regex<char,std::regex_traits<char>>>,std::basic_regex<char,std::regex_traits<char>> const*,std::basic_regex<char,std::regex_traits<char>> const*,std::basic_regex<char,std::regex_traits<char>>*>((int)&v208.__r_.__value_.__r.__words[2], &buf.__traits_.__loc_, &__src.__loc_, (std::locale *)v208.__r_.__value_.__l.__data_);
  v22 = 16;
  do
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v208.__r_.__value_.__r.__words[v22 + 1]);
    std::locale::~locale((std::locale *)((char *)&__str + v22 * 8));
    v22 -= 8;
  }
  while (v22 * 8);
  if (*(char *)(v6 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(v6 + 96), *(_QWORD *)(v6 + 104));
  }
  else
  {
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
    v191.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 112);
  }
  size = v208.__r_.__value_.__l.__size_;
  for (i = v208.__r_.__value_.__r.__words[0]; i != size; i += 64)
  {
    std::locale::locale(&buf.__traits_.__loc_, (const std::locale *)i);
    *(_OWORD *)&buf.__traits_.__ct_ = *(_OWORD *)(i + 8);
    *(_OWORD *)&buf.__flags_ = *(_OWORD *)(i + 24);
    v25 = *(std::__shared_weak_count **)(i + 48);
    buf.__start_.__ptr_ = *(std::shared_ptr<std::__empty_state<char>>::element_type **)(i + 40);
    buf.__start_.__cntrl_ = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    buf.__end_ = *(std::__owns_one_state<char> **)(i + 56);
    memset(&__str, 0, sizeof(__str));
    v28 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v191;
    else
      v29.__i_ = (std::__wrap_iter<const char *>::iterator_type)v191.__r_.__value_.__r.__words[0];
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = v191.__r_.__value_.__l.__size_;
    v30.__i_ = &v29.__i_[v28];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__str, v29, v30, &buf, &byte_1DEBD87CE);
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v191.__r_.__value_.__l.__data_);
    v191 = __str;
    cntrl = buf.__start_.__cntrl_;
    if (buf.__start_.__cntrl_)
    {
      v32 = &buf.__start_.__cntrl_->__shared_owners_;
      do
        v33 = __ldaxr((unint64_t *)v32);
      while (__stlxr(v33 - 1, (unint64_t *)v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
        std::__shared_weak_count::__release_weak(cntrl);
      }
    }
    std::locale::~locale(&buf.__traits_.__loc_);
  }
  buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v208;
  std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v34 = v199;
  if (v199)
  {
    v35 = (unint64_t *)&v199->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::locale::~locale(&v196.__loc_);
  v37 = v218.__cntrl_;
  if (v218.__cntrl_)
  {
    v38 = &v218.__cntrl_->__shared_owners_;
    do
      v39 = __ldaxr((unint64_t *)v38);
    while (__stlxr(v39 - 1, (unint64_t *)v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::locale::~locale(&__src.__loc_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v42 = (std::locale::__imp *)&v191;
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = (std::locale::__imp *)v191.__r_.__value_.__r.__words[0];
    LODWORD(buf.__traits_.__loc_.__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&buf.__traits_.__loc_.__locale_ + 4) = v42;
    _os_log_impl(&dword_1DE3F6000, v40, OS_LOG_TYPE_INFO, "Orig text without marker in word embedding module is: %s", (uint8_t *)&buf, 0xCu);
  }
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v191;
  else
    v43 = (std::string *)v191.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Orig text without marker in word embedding module is: %s", v41, v43);
  v190 = 0;
  v189 = 0uLL;
  MEMORY[0x1DF0ECEDC](&__src);
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v191;
  else
    v44 = (std::string *)v191.__r_.__value_.__r.__words[0];
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
  else
    v45 = v191.__r_.__value_.__l.__size_;
  memset(&buf, 0, 24);
  if (v45)
  {
    v46 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v47 = v44->__r_.__value_.__s.__data_[0];
      v48 = std::locale::use_facet(&__src.__loc_, v46);
      v49 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v48->__vftable[1].__on_zero_shared)(v48, v47);
      std::string::push_back((std::string *)&buf, v49);
      v44 = (std::string *)((char *)v44 + 1);
      --v45;
    }
    while (v45);
  }
  std::locale::~locale(&__src.__loc_);
  v196.__loc_.__locale_ = (std::locale::__imp *)" ";
  v196.__ct_ = (const std::ctype<char> *)"";
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(v50, (uint64_t)&v196);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(&v189, (uint64_t *)&buf, &__src);
  if (__src.__col_ >= (const std::collate<char> *)0x11 && __src.__loc_.__locale_)
    MEMORY[0x1DF0ECFFC](__src.__loc_.__locale_, 0x1000C8077774924);
  if (SHIBYTE(buf.__traits_.__col_) < 0)
    operator delete(buf.__traits_.__loc_.__locale_);
  memset(&v206, 0, sizeof(v206));
  memset(&v205, 0, sizeof(v205));
  v187 = 0;
  v188 = 0;
  __p = 0;
  v51 = *((_QWORD *)a1 + 37);
  buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)(a1 + 352);
  v52 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, a1 + 352, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
  v53 = operator new(4uLL);
  v54 = *((_DWORD *)v52 + 10);
  *v53 = v54;
  __p = v53;
  v187 = v53 + 1;
  v188 = (unint64_t)(v53 + 1);
  std::to_string((std::string *)&__src, v54);
  v55 = std::string::append((std::string *)&__src, " ");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  buf.__traits_.__col_ = (const std::collate<char> *)v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__traits_.__loc_.__locale_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__traits_.__col_) >= 0)
    p_buf = (std::locale::__imp *)&buf;
  else
    p_buf = buf.__traits_.__loc_.__locale_;
  if (SHIBYTE(buf.__traits_.__col_) >= 0)
    col_high = HIBYTE(buf.__traits_.__col_);
  else
    col_high = (std::string::size_type)buf.__traits_.__ct_;
  std::string::append(&v205, (const std::string::value_type *)p_buf, col_high);
  if (SHIBYTE(buf.__traits_.__col_) < 0)
    operator delete(buf.__traits_.__loc_.__locale_);
  if (SHIBYTE(__src.__col_) < 0)
    operator delete(__src.__loc_.__locale_);
  v178 = (uint64_t *)*((_QWORD *)&v189 + 1);
  v59 = (const std::string *)v189;
  if ((_QWORD)v189 != *((_QWORD *)&v189 + 1))
  {
    v60 = (uint64_t)(a1 + 304);
    while (1)
    {
      v61 = 0;
      v62 = 0;
      memset(&v204, 0, sizeof(v204));
      while (1)
      {
        v63 = HIBYTE(v59->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v59->__r_.__value_.__r.__words[2]) < 0)
          break;
        if (v61 >= v63)
          goto LABEL_120;
LABEL_93:
        if ((v63 & 0x80u) == 0)
          v64 = v59;
        else
          v64 = (const std::string *)v59->__r_.__value_.__r.__words[0];
        v65 = v64->__r_.__value_.__s.__data_[v61];
        HIBYTE(buf.__traits_.__col_) = 1;
        LOWORD(buf.__traits_.__loc_.__locale_) = v65;
        if (a1 + 312 != (unsigned __int8 *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v60, (const void **)&buf.__traits_.__loc_.__locale_))
        {
          std::string::basic_string((std::string *)&__src, v59, v62, (int)v61 - v62, (std::allocator<char> *)&v196);
          ct = (const std::ctype<char> *)HIBYTE(__src.__col_);
          if (SHIBYTE(__src.__col_) < 0)
            ct = __src.__ct_;
          end = v204.__end_;
          if (ct)
          {
            if (v204.__end_ >= v204.__end_cap_.__value_)
            {
              end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v204, (__int128 *)&__src);
            }
            else
            {
              if (SHIBYTE(__src.__col_) < 0)
              {
                std::string::__init_copy_ctor_external(v204.__end_, (const std::string::value_type *)__src.__loc_.__locale_, (std::string::size_type)__src.__ct_);
              }
              else
              {
                v68 = *(_OWORD *)&__src.__loc_.__locale_;
                v204.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__src.__col_;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v68;
              }
              ++end;
            }
            v204.__end_ = end;
          }
          if (end >= v204.__end_cap_.__value_)
          {
            v70 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v204, (__int128 *)&buf);
          }
          else
          {
            if (SHIBYTE(buf.__traits_.__col_) < 0)
            {
              std::string::__init_copy_ctor_external(end, (const std::string::value_type *)buf.__traits_.__loc_.__locale_, (std::string::size_type)buf.__traits_.__ct_);
            }
            else
            {
              v69 = *(_OWORD *)&buf.__traits_.__loc_.__locale_;
              end->__r_.__value_.__r.__words[2] = (std::string::size_type)buf.__traits_.__col_;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v69;
            }
            v70 = end + 1;
          }
          v204.__end_ = v70;
          if (SHIBYTE(__src.__col_) < 0)
            operator delete(__src.__loc_.__locale_);
          v62 = v61 + 1;
        }
        if (SHIBYTE(buf.__traits_.__col_) < 0)
          operator delete(buf.__traits_.__loc_.__locale_);
        ++v61;
      }
      if (v59->__r_.__value_.__l.__size_ > v61)
        goto LABEL_93;
      v63 = v59->__r_.__value_.__l.__size_;
LABEL_120:
      std::string::basic_string((std::string *)&__src, v59, v62, v63 - v62, (std::allocator<char> *)&buf);
      v71 = v204.__end_;
      v179 = v59;
      if (v204.__end_ >= v204.__end_cap_.__value_)
      {
        v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v204.__end_ - (char *)v204.__begin_) >> 3);
        v75 = v74 + 1;
        if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v204.__end_cap_.__value_ - (char *)v204.__begin_) >> 3) > v75)
          v75 = 0x5555555555555556 * (((char *)v204.__end_cap_.__value_ - (char *)v204.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v204.__end_cap_.__value_ - (char *)v204.__begin_) >> 3) >= 0x555555555555555)
          v76 = 0xAAAAAAAAAAAAAAALL;
        else
          v76 = v75;
        *(_QWORD *)&buf.__loop_count_ = &v204.__end_cap_;
        if (v76)
          v77 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v204.__end_cap_, v76);
        else
          v77 = 0;
        v78 = (char *)v77 + 24 * v74;
        buf.__traits_.__loc_.__locale_ = v77;
        buf.__traits_.__ct_ = (const std::ctype<char> *)v78;
        *(_QWORD *)&buf.__flags_ = (char *)v77 + 24 * v76;
        v79 = *(_OWORD *)&__src.__loc_.__locale_;
        *((_QWORD *)v78 + 2) = __src.__col_;
        *(_OWORD *)v78 = v79;
        memset(&__src, 0, sizeof(__src));
        buf.__traits_.__col_ = (const std::collate<char> *)(v78 + 24);
        std::vector<std::string>::__swap_out_circular_buffer(&v204, (std::__split_buffer<std::string> *)&buf);
        v73 = v204.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&buf);
        v204.__end_ = v73;
        if (SHIBYTE(__src.__col_) < 0)
        {
          operator delete(__src.__loc_.__locale_);
          v73 = v204.__end_;
        }
      }
      else
      {
        v72 = *(_OWORD *)&__src.__loc_.__locale_;
        v204.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__src.__col_;
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
        v73 = v71 + 1;
        v204.__end_ = v71 + 1;
      }
      begin = v204.__begin_;
      v180 = v73;
      if (v204.__begin_ != v73)
        break;
LABEL_236:
      buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v204;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      v59 = v179 + 1;
      v60 = (uint64_t)(a1 + 304);
      if (&v179[1] == (const std::string *)v178)
        goto LABEL_237;
    }
LABEL_134:
    v81 = 0;
    v201 = 0;
    v202 = 0;
    v203 = 0;
    while (1)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        v82 = begin->__r_.__value_.__l.__size_;
      else
        v82 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v82 <= (int)v81)
      {
LABEL_188:
        v111 = v201;
        for (j = v202; v111 != j; v111 += 32)
        {
          v113 = v187;
          if ((unint64_t)v187 >= v188)
          {
            v115 = __p;
            v116 = ((char *)v187 - (_BYTE *)__p) >> 2;
            v117 = v116 + 1;
            if ((unint64_t)(v116 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v118 = v188 - (_QWORD)__p;
            if ((uint64_t)(v188 - (_QWORD)__p) >> 1 > v117)
              v117 = v118 >> 1;
            if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
              v119 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v119 = v117;
            if (v119)
            {
              v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v188, v119);
              v115 = __p;
              v113 = v187;
            }
            else
            {
              v120 = 0;
            }
            v121 = &v120[4 * v116];
            *(_DWORD *)v121 = *(_DWORD *)(v111 + 24);
            v114 = v121 + 4;
            while (v113 != v115)
            {
              v122 = *--v113;
              *((_DWORD *)v121 - 1) = v122;
              v121 -= 4;
            }
            __p = v121;
            v187 = v114;
            v188 = (unint64_t)&v120[4 * v119];
            if (v115)
              operator delete(v115);
          }
          else
          {
            *v187 = *(_DWORD *)(v111 + 24);
            v114 = v113 + 1;
          }
          v187 = v114;
          if (*(char *)(v111 + 23) >= 0)
            v123 = *(unsigned __int8 *)(v111 + 23);
          else
            v123 = *(_QWORD *)(v111 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&buf, v123 + 1);
          if (SHIBYTE(buf.__traits_.__col_) >= 0)
            locale = (std::locale::__imp *)&buf;
          else
            locale = buf.__traits_.__loc_.__locale_;
          if (v123)
          {
            if (*(char *)(v111 + 23) >= 0)
              v125 = (const void *)v111;
            else
              v125 = *(const void **)v111;
            memmove(locale, v125, v123);
          }
          *(_WORD *)((char *)locale + v123) = 32;
          if (SHIBYTE(buf.__traits_.__col_) >= 0)
            v126 = (std::locale::__imp *)&buf;
          else
            v126 = buf.__traits_.__loc_.__locale_;
          if (SHIBYTE(buf.__traits_.__col_) >= 0)
            v127 = HIBYTE(buf.__traits_.__col_);
          else
            v127 = (std::string::size_type)buf.__traits_.__ct_;
          std::string::append(&v206, (const std::string::value_type *)v126, v127);
          if (SHIBYTE(buf.__traits_.__col_) < 0)
            operator delete(buf.__traits_.__loc_.__locale_);
          std::to_string((std::string *)&__src, *(_DWORD *)(v111 + 24));
          v128 = std::string::append((std::string *)&__src, " ");
          v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          buf.__traits_.__col_ = (const std::collate<char> *)v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__traits_.__loc_.__locale_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(buf.__traits_.__col_) >= 0)
            v130 = (std::locale::__imp *)&buf;
          else
            v130 = buf.__traits_.__loc_.__locale_;
          if (SHIBYTE(buf.__traits_.__col_) >= 0)
            v131 = HIBYTE(buf.__traits_.__col_);
          else
            v131 = (std::string::size_type)buf.__traits_.__ct_;
          std::string::append(&v205, (const std::string::value_type *)v130, v131);
          if (SHIBYTE(buf.__traits_.__col_) < 0)
            operator delete(buf.__traits_.__loc_.__locale_);
          if (SHIBYTE(__src.__col_) < 0)
            operator delete(__src.__loc_.__locale_);
        }
        buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v201;
        std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (++begin == v180)
          goto LABEL_236;
        goto LABEL_134;
      }
      std::string::basic_string((std::string *)&v196, begin, (int)v81, (int)v82 - (int)v81, (std::allocator<char> *)&buf);
      memset(&v208, 0, sizeof(v208));
      while ((int)v82 > (int)v81)
      {
        std::string::basic_string(&__str, begin, (int)v81, (int)v82 - (int)v81, (std::allocator<char> *)&buf);
        if ((int)v81 >= 1)
        {
          std::operator+<char>();
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = (std::string)buf.__traits_;
        }
        v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(*((_QWORD **)a1 + 37), (unsigned __int8 *)&__str);
        if (v83)
        {
          std::string::operator=(&v208, &__str);
          v84 = *((_QWORD *)a1 + 37);
          buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)&__str;
          v85 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v84, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)&__src, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            __src = (std::regex_traits<char>)__str;
          LODWORD(v217) = *((_DWORD *)v85 + 10);
          v86 = v202;
          if (v202 >= v203)
          {
            v88 = (uint64_t)(v202 - v201) >> 5;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v90 = v203 - v201;
            if ((uint64_t)(v203 - v201) >> 4 > v89)
              v89 = v90 >> 4;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFE0)
              v91 = 0x7FFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            *(_QWORD *)&buf.__loop_count_ = &v203;
            v92 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v91);
            v93 = (char *)v92 + 32 * v88;
            buf.__traits_.__loc_.__locale_ = v92;
            buf.__traits_.__ct_ = (const std::ctype<char> *)v93;
            *(_QWORD *)&buf.__flags_ = (char *)v92 + 32 * v94;
            v95 = *(_OWORD *)&__src.__loc_.__locale_;
            *((_QWORD *)v93 + 2) = __src.__col_;
            *(_OWORD *)v93 = v95;
            memset(&__src, 0, sizeof(__src));
            *((_DWORD *)v93 + 6) = v217;
            buf.__traits_.__col_ = (const std::collate<char> *)(v93 + 32);
            std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(&v201, &buf);
            v96 = v202;
            std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)&buf);
            v202 = v96;
            if (SHIBYTE(__src.__col_) < 0)
              operator delete(__src.__loc_.__locale_);
          }
          else
          {
            v87 = *(_OWORD *)&__src.__loc_.__locale_;
            *(_QWORD *)(v202 + 16) = __src.__col_;
            *(_OWORD *)v86 = v87;
            *(_DWORD *)(v86 + 24) = v217;
            v202 = v86 + 32;
          }
        }
        else
        {
          v82 = (v82 - 1);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (v83)
            break;
        }
        else if (v83)
        {
          break;
        }
      }
      v97 = (v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v208.__r_.__value_.__r.__words[2])
          : v208.__r_.__value_.__l.__size_;
      if (!v97)
        break;
      if ((*((_BYTE *)&v208.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_187;
LABEL_169:
      if (SHIBYTE(v196.__col_) < 0)
        operator delete(v196.__loc_.__locale_);
      v81 = v82;
      if (!v97)
        goto LABEL_188;
    }
    v98 = *((_QWORD *)a1 + 37);
    buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)(a1 + 328);
    v99 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v98, a1 + 328, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    if (SHIBYTE(v196.__col_) < 0)
      std::string::__init_copy_ctor_external((std::string *)&__src, (const std::string::value_type *)v196.__loc_.__locale_, (std::string::size_type)v196.__ct_);
    else
      __src = v196;
    LODWORD(v217) = *((_DWORD *)v99 + 10);
    v100 = v202;
    if (v202 >= v203)
    {
      v102 = (uint64_t)(v202 - v201) >> 5;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v104 = v203 - v201;
      if ((uint64_t)(v203 - v201) >> 4 > v103)
        v103 = v104 >> 4;
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0)
        v105 = 0x7FFFFFFFFFFFFFFLL;
      else
        v105 = v103;
      *(_QWORD *)&buf.__loop_count_ = &v203;
      v106 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v105);
      v107 = (char *)v106 + 32 * v102;
      buf.__traits_.__loc_.__locale_ = v106;
      buf.__traits_.__ct_ = (const std::ctype<char> *)v107;
      *(_QWORD *)&buf.__flags_ = (char *)v106 + 32 * v108;
      v109 = *(_OWORD *)&__src.__loc_.__locale_;
      *((_QWORD *)v107 + 2) = __src.__col_;
      *(_OWORD *)v107 = v109;
      memset(&__src, 0, sizeof(__src));
      *((_DWORD *)v107 + 6) = v217;
      buf.__traits_.__col_ = (const std::collate<char> *)(v107 + 32);
      std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(&v201, &buf);
      v110 = v202;
      std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)&buf);
      v202 = v110;
      if (SHIBYTE(__src.__col_) < 0)
        operator delete(__src.__loc_.__locale_);
    }
    else
    {
      v101 = *(_OWORD *)&__src.__loc_.__locale_;
      *(_QWORD *)(v202 + 16) = __src.__col_;
      *(_OWORD *)v100 = v101;
      *(_DWORD *)(v100 + 24) = v217;
      v202 = v100 + 32;
    }
    v82 = v81;
    if ((*((_BYTE *)&v208.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_169;
LABEL_187:
    operator delete(v208.__r_.__value_.__l.__data_);
    goto LABEL_169;
  }
LABEL_237:
  v132 = *((_QWORD *)a1 + 37);
  buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)(a1 + 376);
  v133 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v132, a1 + 376, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
  v134 = v133;
  v135 = v187;
  if ((unint64_t)v187 >= v188)
  {
    v137 = __p;
    v138 = ((char *)v187 - (_BYTE *)__p) >> 2;
    v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v140 = v188 - (_QWORD)__p;
    if ((uint64_t)(v188 - (_QWORD)__p) >> 1 > v139)
      v139 = v140 >> 1;
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
      v141 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v141 = v139;
    if (v141)
    {
      v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v188, v141);
      v137 = __p;
      v135 = v187;
    }
    else
    {
      v142 = 0;
    }
    v143 = &v142[4 * v138];
    v144 = &v142[4 * v141];
    *(_DWORD *)v143 = *((_DWORD *)v134 + 10);
    v136 = v143 + 4;
    while (v135 != v137)
    {
      v145 = *--v135;
      *((_DWORD *)v143 - 1) = v145;
      v143 -= 4;
    }
    __p = v143;
    v187 = v136;
    v188 = (unint64_t)v144;
    if (v137)
      operator delete(v137);
  }
  else
  {
    *v187 = *((_DWORD *)v133 + 10);
    v136 = v135 + 1;
  }
  v187 = v136;
  std::to_string((std::string *)&__src, *(v136 - 1));
  v146 = std::string::append((std::string *)&__src, " ");
  v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
  buf.__traits_.__col_ = (const std::collate<char> *)v146->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__traits_.__loc_.__locale_ = v147;
  v146->__r_.__value_.__l.__size_ = 0;
  v146->__r_.__value_.__r.__words[2] = 0;
  v146->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__traits_.__col_) >= 0)
    v148 = (std::locale::__imp *)&buf;
  else
    v148 = buf.__traits_.__loc_.__locale_;
  if (SHIBYTE(buf.__traits_.__col_) >= 0)
    v149 = HIBYTE(buf.__traits_.__col_);
  else
    v149 = (std::string::size_type)buf.__traits_.__ct_;
  std::string::append(&v205, (const std::string::value_type *)v148, v149);
  if (SHIBYTE(buf.__traits_.__col_) < 0)
    operator delete(buf.__traits_.__loc_.__locale_);
  if (SHIBYTE(__src.__col_) < 0)
    operator delete(__src.__loc_.__locale_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v150 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v152 = (std::locale::__imp *)&v206;
    if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v152 = (std::locale::__imp *)v206.__r_.__value_.__r.__words[0];
    LODWORD(buf.__traits_.__loc_.__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&buf.__traits_.__loc_.__locale_ + 4) = v152;
    _os_log_impl(&dword_1DE3F6000, v150, OS_LOG_TYPE_INFO, "WordEmbedding words: %s", (uint8_t *)&buf, 0xCu);
  }
  v153 = &v206;
  if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v153 = (std::string *)v206.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "WordEmbedding words: %s", v151, v153);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v154 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v156 = (std::locale::__imp *)&v205;
    if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v156 = (std::locale::__imp *)v205.__r_.__value_.__r.__words[0];
    LODWORD(buf.__traits_.__loc_.__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&buf.__traits_.__loc_.__locale_ + 4) = v156;
    _os_log_impl(&dword_1DE3F6000, v154, OS_LOG_TYPE_INFO, "WordEmbedding words index: %s", (uint8_t *)&buf, 0xCu);
  }
  v157 = &v205;
  if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v157 = (std::string *)v205.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "WordEmbedding words index: %s", v155, v157);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  v158.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v159 = (void (***)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, _QWORD, void **))*((_QWORD *)a1 + 50);
  v184 = 0;
  v185 = 0;
  v183 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v183, __p, (uint64_t)v187, ((char *)v187 - (_BYTE *)__p) >> 2);
  (**v159)(&buf, v159, &v183);
  std::vector<std::vector<int>>::__vdeallocate(v177 + 7);
  *(_OWORD *)(v177 + 7) = *(_OWORD *)&buf.__traits_.__loc_.__locale_;
  v177[9] = (uint64_t)buf.__traits_.__col_;
  memset(&buf, 0, 24);
  __src.__loc_.__locale_ = (std::locale::__imp *)&buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  v160 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v158.__d_.__rep_) / 1000000);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v161 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v162 = v160 / 1000.0;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v164 = (double)(0xAAAAAAAAAAAAAAABLL * ((v177[8] - v177[7]) >> 3)) / v162;
    LODWORD(buf.__traits_.__loc_.__locale_) = 134218240;
    *(double *)((char *)&buf.__traits_.__loc_.__locale_ + 4) = v162;
    WORD2(buf.__traits_.__ct_) = 2048;
    *(double *)((char *)&buf.__traits_.__ct_ + 6) = v164;
    _os_log_impl(&dword_1DE3F6000, v161, OS_LOG_TYPE_DEFAULT, "WordEmbedding inference time: %.3f s, %.3f tokens/s", (uint8_t *)&buf, 0x16u);
  }
  Diagnostics::log(5, "WordEmbedding inference time: %.3f s, %.3f tokens/s", v163, *(_QWORD *)&v162, (double)(0xAAAAAAAAAAAAAAABLL * ((v177[8] - v177[7]) >> 3)) / v162);
  v165 = a2[1];
  v181 = *a2;
  v182 = (std::__shared_weak_count *)v165;
  if (v165)
  {
    v166 = (unint64_t *)(v165 + 8);
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
  }
  (*(void (**)(unsigned __int8 *, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v181);
  v168 = v182;
  if (v182)
  {
    v169 = (unint64_t *)&v182->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  if (__p)
  {
    v187 = __p;
    operator delete(__p);
  }
  buf.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v171 = v193;
  if (v193)
  {
    v172 = (unint64_t *)&v193->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v195;
  if (v195)
  {
    v175 = (unint64_t *)&v195->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
}

void sub_1DE970770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,std::locale a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a65;
  void **a69;
  uint64_t v69;

  a69 = (void **)&a65;
  std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100](&a69);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::locale::~locale(&a41);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v69 - 152);
  std::locale::~locale((std::locale *)(v69 - 192));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_1DE970934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  char a72;
  uint64_t v72;

  if (*(char *)(v72 - 169) < 0)
    operator delete(*(void **)(v72 - 192));
  if (a72 < 0)
    JUMPOUT(0x1DE9709C4);
  *(_QWORD *)(v72 - 192) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 192));
  if (a27)
    operator delete(a27);
  if (a63 < 0)
    operator delete(a58);
  if (a69 < 0)
    operator delete(a64);
  *(_QWORD *)(v72 - 192) = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 192));
  if (a38 < 0)
    operator delete(a33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_1DE970944(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a71 < 0)
      operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1DE970B34);
}

void sub_1DE97096C()
{
  uint64_t v0;

  __cxa_end_catch();
  std::locale::~locale((std::locale *)(v0 - 192));
  JUMPOUT(0x1DE97097CLL);
}

void sub_1DE97098C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE970B34);
}

void sub_1DE9709CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;
  uint64_t v73;

  if (*(char *)(v73 - 169) < 0)
    operator delete(*(void **)(v73 - 192));
  if (a73 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  *(_QWORD *)(v73 - 192) = &a52;
  std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 192));
  JUMPOUT(0x1DE970AC4);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

uint64_t *std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 32;
      v6 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_QWORD *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(_QWORD *__dst, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  void *v6;

  *__dst = 0;
  v4 = *(_BYTE **)a2;
  v5 = *(_BYTE **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11)
  {
    v6 = (void *)operator new[]();
    *__dst = v6;
    v4 = *(_BYTE **)a2;
    v5 = *(_BYTE **)(a2 + 8);
  }
  else
  {
    v6 = __dst;
  }
  if (v5 != v4)
    memmove(v6, v4, v5 - v4);
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

__int128 *boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(__int128 *a1, uint64_t *a2, _QWORD *__src)
{
  _QWORD *v3;
  size_t v6;
  void *v7;
  size_t v8;
  void **v9;
  void **v10;
  size_t v11;
  void **v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void **v17;
  size_t v18;
  void *v19;
  void **v20;
  size_t v21;
  void *v22;
  void **v23;
  size_t v24;
  void *v25;
  void **v26;
  size_t v27;
  void *v28;
  void **v29;
  size_t v30;
  void *v31;
  void **v32;
  size_t v33;
  void **v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  size_t v38;
  void *v39;
  BOOL v40;
  int v41;
  char *v42;
  char *v43;
  unint64_t v44;
  std::vector<std::string>::pointer end;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::string *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 *v57;
  unint64_t v58;
  std::vector<std::string> v59;
  uint64_t (**v60)();
  _QWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  char v66;
  uint64_t v67[10];
  __int128 __p;
  std::string::size_type v69;
  std::vector<std::string> *v70;
  char v71;
  std::__split_buffer<std::string> __v;
  void *__srca[2];
  size_t __n;
  void *__dst[2];
  size_t v76;
  int v77;
  void *v78[2];
  size_t v79;
  int v80;
  void *v81[2];
  size_t v82;
  int v83;
  void *v84[2];
  size_t v85;
  int v86;
  __int128 v87;
  __int128 v88;
  char v89;
  void *v90[2];
  size_t v91;
  int v92;
  void *v93[2];
  size_t v94;
  int v95;
  void *v96[2];
  size_t v97;
  int v98;
  void *__s2;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  void **v104[2];
  size_t v105;
  int v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;

  v3 = __src;
  v112 = *MEMORY[0x1E0C80C00];
  v6 = __src[2];
  __n = v6;
  __srca[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (void *)operator new[]();
    __srca[0] = v7;
    v3 = (_QWORD *)*v3;
  }
  else
  {
    v7 = __srca;
  }
  memcpy(v7, v3, v6);
  v8 = __n;
  v105 = __n;
  v104[0] = 0;
  if (__n >= 0x11)
  {
    v9 = (void **)operator new[]();
    v104[0] = v9;
    v10 = (void **)__srca[0];
  }
  else
  {
    v9 = (void **)v104;
    v10 = __srca;
  }
  v58 = v8;
  memcpy(v9, v10, v8);
  v11 = v105;
  v76 = v105;
  __dst[0] = 0;
  if (v105 > 0x10)
  {
    __dst[0] = (void *)operator new[]();
    v12 = v104[0];
    memcpy(__dst[0], v104[0], v11);
    v77 = 0;
    if (v12)
      MEMORY[0x1DF0ECFFC](v12, 0x1000C8077774924);
  }
  else
  {
    memcpy(__dst, v104, v105);
    v77 = 0;
    v11 = v76;
  }
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = (uint64_t *)*a2;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = a2[1];
  v94 = v11;
  v93[0] = 0;
  if (v11 >= 0x11)
  {
    v16 = (void *)operator new[]();
    v93[0] = v16;
    v17 = (void **)__dst[0];
  }
  else
  {
    v16 = v93;
    v17 = __dst;
  }
  memcpy(v16, v17, v11);
  v95 = 0;
  v18 = v94;
  v85 = v94;
  v84[0] = 0;
  if (v94 >= 0x11)
  {
    v19 = (void *)operator new[]();
    v84[0] = v19;
    v20 = (void **)v93[0];
  }
  else
  {
    v19 = v84;
    v20 = v93;
  }
  memcpy(v19, v20, v18);
  v86 = 0;
  v21 = v85;
  v79 = v85;
  v78[0] = 0;
  if (v85 >= 0x11)
  {
    v22 = (void *)operator new[]();
    v78[0] = v22;
    v23 = (void **)v84[0];
  }
  else
  {
    v22 = v78;
    v23 = v84;
  }
  memcpy(v22, v23, v21);
  v80 = 0;
  v60 = 0;
  v24 = v79;
  v82 = v79;
  v81[0] = 0;
  if (v79 >= 0x11)
  {
    v25 = (void *)operator new[]();
    v81[0] = v25;
    v26 = (void **)v78[0];
  }
  else
  {
    v25 = v81;
    v26 = v78;
  }
  memcpy(v25, v26, v24);
  v83 = 0;
  v27 = v82;
  v91 = v82;
  v90[0] = 0;
  if (v82 >= 0x11)
  {
    v28 = (void *)operator new[]();
    v90[0] = v28;
    v29 = (void **)v81[0];
  }
  else
  {
    v28 = v90;
    v29 = v81;
  }
  memcpy(v28, v29, v27);
  v92 = 0;
  v30 = v91;
  v97 = v91;
  v96[0] = 0;
  if (v91 >= 0x11)
  {
    v31 = (void *)operator new[]();
    v96[0] = v31;
    v32 = (void **)v90[0];
  }
  else
  {
    v31 = v96;
    v32 = v90;
  }
  memcpy(v31, v32, v30);
  v98 = 0;
  v33 = v97;
  v105 = v97;
  v104[0] = 0;
  v57 = a1;
  if (v97 >= 0x11)
  {
    v34 = (void **)operator new[]();
    v104[0] = v34;
    v35 = (void **)v96[0];
  }
  else
  {
    v34 = (void **)v104;
    v35 = v96;
  }
  memcpy(v34, v35, v33);
  v106 = 0;
  v36 = (_QWORD *)operator new();
  v37 = v36;
  v38 = v105;
  v36[2] = v105;
  *v36 = 0;
  if (v38 >= 0x11)
  {
    v39 = (void *)operator new[]();
    *v37 = v39;
    memcpy(v39, v104[0], v37[2]);
    *((_DWORD *)v37 + 6) = 0;
    v61 = v37;
    if (v104[0])
      MEMORY[0x1DF0ECFFC](v104[0], 0x1000C8077774924);
  }
  else
  {
    memcpy(v36, v104, v38);
    *((_DWORD *)v37 + 6) = 0;
    v61 = v37;
  }
  if (v33 >= 0x11 && v96[0])
    MEMORY[0x1DF0ECFFC](v96[0], 0x1000C8077774924);
  if (v30 >= 0x11 && v90[0])
    MEMORY[0x1DF0ECFFC](v90[0], 0x1000C8077774924);
  v60 = boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable;
  if (v27 >= 0x11 && v81[0])
    MEMORY[0x1DF0ECFFC](v81[0], 0x1000C8077774924);
  if (v24 >= 0x11 && v78[0])
    MEMORY[0x1DF0ECFFC](v78[0], 0x1000C8077774924);
  if (v21 >= 0x11 && v84[0])
    MEMORY[0x1DF0ECFFC](v84[0], 0x1000C8077774924);
  v62 = v14;
  v63 = v14;
  v64 = v14;
  v65 = (uint64_t)v14 + v15;
  v66 = 0;
  if (v15)
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment((uint64_t)&v60);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v67, (uint64_t *)&v60);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)&v60);
  if (v18 >= 0x11 && v93[0])
    MEMORY[0x1DF0ECFFC](v93[0], 0x1000C8077774924);
  v84[0] = 0;
  v87 = 0u;
  v88 = 0u;
  v89 = 1;
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v90, (uint64_t *)v84);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v84);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v81, v67);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v78, (uint64_t *)v90);
  memset(&v59, 0, sizeof(v59));
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v104, (uint64_t *)v81);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v96, (uint64_t *)v78);
  v70 = &v59;
  v71 = 0;
  while (1)
  {
    if (v104[0])
      v40 = v111 == 0;
    else
      v40 = 0;
    v41 = !v40;
    if (!v96[0])
    {
      if (v41)
        break;
      goto LABEL_74;
    }
    if (((v103 == 0) & ~v41) == 0)
    {
      if (v41 == (v103 != 0))
        break;
LABEL_74:
      v42 = v107;
      v43 = v108;
      v44 = v108 - v107;
      goto LABEL_75;
    }
    v42 = v107;
    v43 = v108;
    v44 = v108 - v107;
    if (v108 - v107 == v100 - (_QWORD)__s2 && !memcmp(v107, __s2, v108 - v107) && v109 == v101 && v110 == v102)
      break;
LABEL_75:
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v42, v43, v44);
    end = v59.__end_;
    if (v59.__end_ >= v59.__end_cap_.__value_)
    {
      v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3);
      v48 = v47 + 1;
      if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) > v48)
        v48 = 0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) >= 0x555555555555555)
        v49 = 0xAAAAAAAAAAAAAAALL;
      else
        v49 = v48;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v59.__end_cap_;
      if (v49)
        v50 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v59.__end_cap_, v49);
      else
        v50 = 0;
      v51 = v50 + v47;
      __v.__first_ = v50;
      __v.__begin_ = v51;
      __v.__end_cap_.__value_ = &v50[v49];
      v52 = __p;
      v51->__r_.__value_.__r.__words[2] = v69;
      *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
      v69 = 0;
      __p = 0uLL;
      __v.__end_ = v51 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v59, &__v);
      v53 = v59.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v59.__end_ = v53;
      if (SHIBYTE(v69) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v46 = __p;
      v59.__end_->__r_.__value_.__r.__words[2] = v69;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v46;
      v59.__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment((uint64_t)v104);
  }
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v96);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v104);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v78);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v81);
  v54 = *v57;
  *v57 = *(_OWORD *)&v59.__begin_;
  *(_OWORD *)&v59.__begin_ = v54;
  v55 = (std::string *)*((_QWORD *)v57 + 2);
  *((_QWORD *)v57 + 2) = v59.__end_cap_.__value_;
  v59.__end_cap_.__value_ = v55;
  v104[0] = (void **)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v104);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v90);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v67);
  if (v11 >= 0x11 && __dst[0])
    MEMORY[0x1DF0ECFFC](__dst[0], 0x1000C8077774924);
  if (v58 >= 0x11 && __srca[0])
    MEMORY[0x1DF0ECFFC](__srca[0], 0x1000C8077774924);
  return v57;
}

void sub_1DE9714D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;

  MEMORY[0x1DF0ED014](v78, 0x1012C405C87E9CELL);
  v81 = *(_QWORD *)(v79 - 184);
  if (v81)
    MEMORY[0x1DF0ECFFC](v81, 0x1000C8077774924);
  if (v77 >= 0x11 && STACK[0x2A8])
    MEMORY[0x1DF0ECFFC](STACK[0x2A8], 0x1000C8077774924);
  if (v76 >= 0x11 && STACK[0x238])
    MEMORY[0x1DF0ECFFC](STACK[0x238], 0x1000C8077774924);
  if (v75 >= 0x11 && a61)
    MEMORY[0x1DF0ECFFC](a61, 0x1000C8077774924);
  if (v74 >= 0x11 && a51)
    MEMORY[0x1DF0ECFFC](a51, 0x1000C8077774924);
  if (v73 >= 0x11 && a71)
    MEMORY[0x1DF0ECFFC](a71, 0x1000C8077774924);
  if (v72 >= 0x11 && STACK[0x288])
    MEMORY[0x1DF0ECFFC](STACK[0x288], 0x1000C8077774924);
  if (v71 >= 0x11 && a47)
    MEMORY[0x1DF0ECFFC](a47, 0x1000C8077774924);
  if (a10 >= 0x11)
  {
    if (a44)
      MEMORY[0x1DF0ECFFC](a44, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  if (*a2)
  {
    *(_QWORD *)a1 = v4;
    if ((v4 & 1) != 0)
    {
      v5 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)a1)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 8, *(_QWORD *)(a1 + 48), v2);
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 56);
    result = v4;
  }
  v5 = result == v2 && v4 == v2;
  if (v5 && *(_QWORD *)(a1 + 40) == v2)
    *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_DWORD **)result;
      v6 = (_QWORD *)operator new();
      v7 = v6;
      v8 = *((_QWORD *)v5 + 2);
      v6[2] = v8;
      *v6 = 0;
      if (v8 >= 0x11)
      {
        v6 = (_QWORD *)operator new[]();
        *v7 = v6;
        v9 = *(const void **)v5;
        v8 = v7[2];
      }
      else
      {
        v9 = v5;
      }
      result = (uint64_t)memcpy(v6, v9, v8);
      *((_DWORD *)v7 + 6) = v5[6];
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v10 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        if (v10[2] >= 0x11uLL && *v10)
          MEMORY[0x1DF0ECFFC](*v10, 0x1000C8077774924);
        result = MEMORY[0x1DF0ED014](v10, 0x1012C405C87E9CELL);
      }
      goto LABEL_13;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001DED15801 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000001DED15801 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_13:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1DE971A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(const void ***a1, char *a2, char *a3)
{
  const void **v5;
  size_t v6;
  _QWORD *v7;
  const void *v8;
  char *v9;
  _QWORD v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = (size_t)(*a1)[2];
  v12 = v6;
  v11[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v11[0] = v7;
    v8 = *v5;
  }
  else
  {
    v7 = v11;
    v8 = v5;
  }
  memcpy(v7, v8, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v11, *a2))
      goto LABEL_9;
    ++a2;
  }
  a2 = a3;
LABEL_9:
  if (v12 >= 0x11 && v11[0])
    MEMORY[0x1DF0ECFFC](v11[0], 0x1000C8077774924);
  if (a2 == a3)
    return a3;
  if (!*((_DWORD *)v5 + 6))
  {
    v9 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v5, *v9))
        break;
      ++v9;
    }
    while (v9 != a3);
  }
  return a2;
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(_QWORD *a1, int a2)
{
  unint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  int v6;
  unint64_t v7;

  v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (_QWORD *)*a1;
    v3 = (_QWORD *)((char *)a1 + v2);
  }
  else
  {
    v3 = (_QWORD *)((char *)a1 + v2);
    if (!v2)
      return a1 != v3 && *(char *)a1 <= a2;
  }
  do
  {
    v4 = (char *)a1 + (v2 >> 1);
    v6 = *v4;
    v5 = v4 + 1;
    v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2)
      a1 = v5;
    else
      v2 = v7;
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2)
{
  std::regex_traits<char> *v4;
  size_t v5;

  v4 = std::regex_traits<char>::regex_traits(a1);
  v4[2].__ct_ = 0;
  *(_OWORD *)&v4[1].__col_ = 0u;
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, a2, &a2[v5]) != &a2[v5])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1DE971C64(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::basic_regex<char,std::regex_traits<char>>>,std::basic_regex<char,std::regex_traits<char>> const*,std::basic_regex<char,std::regex_traits<char>> const*,std::basic_regex<char,std::regex_traits<char>>*>(int a1, std::locale *a2, std::locale *a3, std::locale *this)
{
  std::locale *result;
  std::locale *v6;
  std::locale *v7;
  unint64_t *locale;
  unint64_t *v9;
  unint64_t v10;

  result = this;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = std::locale::locale(result, v6);
      *(_OWORD *)&v7[1].__locale_ = *(_OWORD *)&v6[1].__locale_;
      *(_OWORD *)&v7[3].__locale_ = *(_OWORD *)&v6[3].__locale_;
      locale = (unint64_t *)v6[6].__locale_;
      v7[5].__locale_ = v6[5].__locale_;
      v7[6].__locale_ = (std::locale::__imp *)locale;
      if (locale)
      {
        v9 = locale + 1;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v7[7].__locale_ = v6[7].__locale_;
      v6 += 8;
      result = v7 + 8;
    }
    while (v6 != a3);
  }
  return result;
}

void std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  std::locale *v2;
  std::locale *v4;
  void *v5;
  std::locale *v6;

  v1 = *a1;
  v2 = (std::locale *)**a1;
  if (v2)
  {
    v4 = (std::locale *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 8;
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v4[-3]);
        std::locale::~locale(v6);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  std::string::value_type *i;
  size_t v9;
  std::__wrap_iter<const char *>::iterator_type v10;
  std::string::value_type *v11;
  unsigned __int8 *v12;
  std::string::value_type *v13;
  std::__wrap_iter<const char *>::iterator_type v14;
  const char *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  std::__wrap_iter<const char *>::iterator_type v19;
  std::string::value_type *v20;
  std::__wrap_iter<const char *>::iterator_type v21;
  std::string::value_type *v22;
  std::__wrap_iter<const char *>::iterator_type v23;
  std::string::value_type *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  std::sub_match<std::__wrap_iter<const char *>> *v30;
  BOOL v31;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::string::value_type *v33;
  std::__wrap_iter<const char *> *p_second;
  std::string::value_type *v35;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __x;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v37;

  i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v37, a2, a3, a4, (std::regex_constants::match_flag_type)a5);
  memset(&__x.__match_.__prefix_, 0, 17);
  memset(&__x.__match_.__suffix_, 0, 17);
  __x.__match_.__ready_ = 0;
  __x.__match_.__position_start_.__i_ = 0;
  memset(&__x.__match_, 0, 41);
  memset(&__x, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v37, &__x))
  {
    v9 = strlen(a5);
    v10 = 0;
    v11 = 0;
    v12 = (unsigned __int8 *)&a5[v9];
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v37, &__x))
      {
        while (v11 != v10)
          std::string::push_back(a1, *v11++);
        goto LABEL_47;
      }
      v13 = (std::string::value_type *)v37.__match_.__prefix_.first.__i_;
      v14 = v37.__match_.__prefix_.second.__i_;
      while (v13 != v14)
        std::string::push_back(a1, *v13++);
      if (v9)
        break;
LABEL_44:
      v11 = (std::string::value_type *)v37.__match_.__suffix_.first.__i_;
      v10 = v37.__match_.__suffix_.second.__i_;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v37);
    }
    v15 = a5;
    while (1)
    {
      v16 = *(unsigned __int8 *)v15;
      if (v16 == 36)
      {
        v17 = (unsigned __int8 *)(v15 + 1);
        if (v15 + 1 == (const char *)v12)
          goto LABEL_41;
        v18 = (char)*v17;
        v16 = *v17;
        if (v18 > 38)
        {
          if (v18 == 39)
          {
            v24 = (std::string::value_type *)v37.__match_.__suffix_.first.__i_;
            v23 = v37.__match_.__suffix_.second.__i_;
            while (v24 != v23)
              std::string::push_back(a1, *v24++);
            goto LABEL_43;
          }
          if (v18 == 96)
          {
            v22 = (std::string::value_type *)v37.__match_.__prefix_.first.__i_;
            v21 = v37.__match_.__prefix_.second.__i_;
            while (v22 != v21)
              std::string::push_back(a1, *v22++);
            goto LABEL_43;
          }
LABEL_28:
          if ((v16 - 48) <= 9)
          {
            v25 = *v17 - 48;
            if (v15 + 2 != (const char *)v12)
            {
              v26 = *((unsigned __int8 *)v15 + 2);
              v27 = v26 - 48;
              v28 = v26 + 10 * (int)v25 - 48;
              if (v27 > 9)
              {
                v17 = (unsigned __int8 *)(v15 + 1);
              }
              else
              {
                v25 = v28;
                v17 = (unsigned __int8 *)(v15 + 2);
              }
            }
            v29 = 0xAAAAAAAAAAAAAAABLL
                * (((char *)v37.__match_.__matches_.__end_ - (char *)v37.__match_.__matches_.__begin_) >> 3);
            v30 = &v37.__match_.__matches_.__begin_[(int)v25];
            v31 = v29 > v25;
            if (v29 <= v25)
              p_unmatched = &v37.__match_.__unmatched_;
            else
              p_unmatched = &v37.__match_.__matches_.__begin_[(int)v25];
            v33 = (std::string::value_type *)p_unmatched->first.__i_;
            p_second = &v30->second;
            if (!v31)
              p_second = &v37.__match_.__unmatched_.second;
            v35 = (std::string::value_type *)p_second->__i_;
            while (v33 != v35)
              std::string::push_back(a1, *v33++);
            goto LABEL_43;
          }
LABEL_41:
          LOBYTE(v16) = 36;
          goto LABEL_42;
        }
        if (v18 != 36)
        {
          if (v18 == 38)
          {
            v20 = (std::string::value_type *)v37.__match_.__matches_.__begin_->first.__i_;
            v19 = v37.__match_.__matches_.__begin_->second.__i_;
            while (v20 != v19)
              std::string::push_back(a1, *v20++);
            goto LABEL_43;
          }
          goto LABEL_28;
        }
        ++v15;
      }
LABEL_42:
      std::string::push_back(a1, v16);
      v17 = (unsigned __int8 *)v15;
LABEL_43:
      v15 = (const char *)(v17 + 1);
      if (v17 + 1 == v12)
        goto LABEL_44;
    }
  }
  while (i != a3.__i_)
    std::string::push_back(a1, *i++);
LABEL_47:
  if (v37.__match_.__matches_.__begin_)
  {
    v37.__match_.__matches_.__end_ = v37.__match_.__matches_.__begin_;
    operator delete(v37.__match_.__matches_.__begin_);
  }
}

void sub_1DE97202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  char **p_match;
  std::vector<std::csub_match> __p[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;

  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = match_default;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = (char **)&this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, __p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(p_match, (uint64_t)__a.__i_, (char *)__b.__i_, (uint64_t *)__p, 0);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  return this;
}

void sub_1DE972134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;
  void **v10;
  void *v12;

  if (__p)
    operator delete(__p);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::sub_match<const char *> *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  std::sub_match<const char *> *v9;
  char v10;
  std::sub_match<const char *> *v11;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v12;
  char v13;
  std::vector<std::csub_match> __p[2];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    memset(__p, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, __p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (__p[0].__begin_)
      operator delete(__p[0].__begin_);
    if ((v10 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  v11 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v11 == v7)
    goto LABEL_14;
  v12 = this->__pregex_;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  memset(__p, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, __p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v11, (uint64_t *)__p, 1);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  if ((v13 & 1) == 0)
  {
    v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1DE972388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v14;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v18;
  const char *v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v20)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v14 = v11;
  else
    v14 = begin;
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  char v41;
  char *v42;
  char *v43;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *a1;
  v12 = a1[1];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      v29 = &v12[24 * v15];
      v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v11)
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v19);
      v22 = &v20[24 * v14];
      v12 = &v20[24 * v11];
      v23 = v22;
      v24 = 24 * v11 - 24 * v14;
      do
      {
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      v25 = &v20[24 * v21];
      v27 = *a1;
      v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          v28 = *(_OWORD *)(v26 - 24);
          *((_QWORD *)v22 - 1) = *((_QWORD *)v26 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        v12 = a1[1];
      }
    }
  }
  v31 = *a1;
  if (v12 != *a1)
  {
    v32 = 0;
    v33 = 0;
    v35 = *a4;
    v34 = a4[1];
    do
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      v37 = (_QWORD *)(v35 + v32);
      if (v36 <= v33)
        v38 = a4 + 3;
      else
        v38 = v37;
      *(_QWORD *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33)
        v39 = a4 + 3;
      else
        v39 = (uint64_t *)(*a4 + v32);
      *(_QWORD *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      v35 = *a4;
      v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33)
        v40 = a4 + 3;
      else
        v40 = (uint64_t *)(*a4 + v32);
      v41 = *((_BYTE *)v40 + 16);
      v31 = *a1;
      v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((_BYTE *)a1 + 40) = 0;
  v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[13] = v43;
  *((_BYTE *)a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v9;
  const char *v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  const char *v95;
  BOOL v96;
  char v97;
  BOOL v98;
  uint64_t v99;
  char *v100;
  void **v101;
  _BYTE *v102;
  const char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  int64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char v158;
  const char *v159;
  char v160;
  const char *v161;
  const char *i;
  const char *v163;
  __int16 v164;
  const char *v165;
  void *v166[2];
  __int128 v167;
  int64x2_t v168;
  _BYTE v169[56];
  void *__p[2];
  _QWORD v171[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v165 = (const char *)(a3 - a2);
  v164 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v166[0] = 0;
    v166[1] = 0;
    *(_QWORD *)&v167 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v171, 0, 21);
      v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v149 = a4;
      v13 = v166[1];
      *((_DWORD *)v166[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v161 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v166[1] - 40), *(unsigned int *)(a1 + 32));
      v153 = 0;
      v155 = 0;
      v151 = 0;
      v152 = 0;
      v156 = 0;
      v148 = 0;
      v14 = 0;
      v158 = 0;
      v15 = 0;
      v16 = v166[1];
      *((_QWORD *)v166[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v165;
        if (!v17)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = (const char *)*((_QWORD *)v16 - 10);
            if ((v164 & 0x20) != 0 && v21 == v10 || (v164 & 0x1000) != 0 && v21 != v161)
              goto LABEL_21;
            v28 = v153;
            if ((v158 & ((uint64_t)v14 >= (uint64_t)&v21[-*((_QWORD *)v16 - 11)])) == 0)
            {
              v159 = &v21[-*((_QWORD *)v16 - 11)];
              v30 = (__int128 *)*((_QWORD *)v16 - 8);
              v29 = (__int128 *)*((_QWORD *)v16 - 7);
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v152 - (uint64_t)v155) >> 3) >= v31)
              {
                v37 = (uint64_t)v148;
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) >= v31)
                {
                  if (v30 == v29)
                  {
                    v43 = v155;
                    v44 = v155;
                  }
                  else
                  {
                    v43 = v155;
                    v44 = v155;
                    do
                    {
                      *(_OWORD *)v44 = *v30;
                      v44[16] = *((_BYTE *)v30 + 16);
                      v44 += 24;
                      v30 = (__int128 *)((char *)v30 + 24);
                    }
                    while (v30 != v29);
                  }
                  v45 = v44 - v43;
                  v28 = v43;
                }
                else
                {
                  v39 = (__int128 *)((char *)v30 + 8 * ((v153 - v155) >> 3));
                  if (v153 != v155)
                  {
                    v40 = v155;
                    do
                    {
                      *(_OWORD *)v40 = *v30;
                      v40[16] = *((_BYTE *)v30 + 16);
                      v30 = (__int128 *)((char *)v30 + 24);
                      v40 += 24;
                    }
                    while (v30 != v39);
                  }
                  v41 = v153;
                  while (v39 != v29)
                  {
                    v42 = *v39;
                    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                    *(_OWORD *)v41 = v42;
                    v41 += 24;
                    v39 = (__int128 *)((char *)v39 + 24);
                  }
                  v45 = v41 - v153;
                }
              }
              else
              {
                if (v155)
                {
                  operator delete(v155);
                  v152 = 0;
                }
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_217;
                v32 = 0x5555555555555556 * (v152 >> 3);
                if (v32 <= v31)
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
                v33 = 0xAAAAAAAAAAAAAAABLL * (v152 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
                if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_217:
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v33);
                v28 = v34;
                v36 = v34;
                if (v30 == v29)
                {
                  v37 = (uint64_t)v148;
                }
                else
                {
                  v37 = (uint64_t)v148;
                  do
                  {
                    v38 = *v30;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
                    *(_OWORD *)v36 = v38;
                    v36 += 24;
                    v30 = (__int128 *)((char *)v30 + 24);
                  }
                  while (v30 != v29);
                }
                v152 = (uint64_t)&v34[24 * v35];
                v45 = v36 - v34;
                v155 = v34;
              }
              v47 = (char *)*((_QWORD *)v16 - 5);
              v46 = (char *)*((_QWORD *)v16 - 4);
              v48 = (v46 - v47) >> 4;
              if (v48 <= (v37 - (uint64_t)v156) >> 4)
              {
                v56 = (v151 - v156) >> 4;
                if (v56 >= v48)
                {
                  if (v47 == v46)
                  {
                    v63 = v156;
                    v62 = v156;
                  }
                  else
                  {
                    v62 = v156;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v47;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
                      v62 += 16;
                      v47 += 16;
                    }
                    while (v47 != v46);
                    v63 = v156;
                  }
                  v61 = (char *)(v62 - v63);
                  v52 = v63;
                  v14 = v159;
                }
                else
                {
                  v57 = &v47[16 * v56];
                  if (v151 != v156)
                  {
                    v58 = v156;
                    do
                    {
                      *(_QWORD *)v58 = *(_QWORD *)v47;
                      *((_QWORD *)v58 + 1) = *((_QWORD *)v47 + 1);
                      v47 += 16;
                      v58 += 16;
                    }
                    while (v47 != v57);
                  }
                  if (v57 == v46)
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                  }
                  else
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                    do
                    {
                      v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v46);
                  }
                  v61 = (char *)(v59 - v52);
                }
              }
              else
              {
                v154 = v45;
                v49 = v28;
                if (v156)
                {
                  operator delete(v156);
                  v37 = 0;
                }
                if (v46 - v47 < 0)
                  goto LABEL_216;
                v50 = v37 >> 3;
                if (v37 >> 3 <= v48)
                  v50 = (v46 - v47) >> 4;
                v51 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60)
LABEL_216:
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v51);
                v54 = v52;
                while (v47 != v46)
                {
                  v55 = *(_OWORD *)v47;
                  v47 += 16;
                  *(_OWORD *)v54 = v55;
                  v54 += 16;
                }
                v148 = &v52[16 * v53];
                v61 = (char *)(v54 - v52);
                v156 = v52;
                v28 = v49;
                v14 = v159;
                v45 = v154;
              }
              v153 = &v28[v45];
              v151 = &v61[(_QWORD)v52];
            }
            v64 = v166[1];
            if (v14 == v165)
            {
              v65 = v166[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v64);
              }
              v166[1] = v65;
              v158 = 1;
              v14 = v165;
            }
            else
            {
              v66 = (char *)v166[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v166[1] - 12);
              v166[1] = v66;
              v158 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v166[1] - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v166[1] - 12);
            v166[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v169 = *v20;
            *(_OWORD *)&v169[16] = v23;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v171[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            v25 = (char *)v166[1];
            if (v166[1] >= (void *)v167)
            {
              v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v169[16];
              *(_OWORD *)v166[1] = *(_OWORD *)v169;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v169[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v169[48];
              memset(&v169[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v171[0];
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              v27 = v171[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v171[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v166[1] = v25 + 96;
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v16 = v166[1];
      }
      while (v166[0] != v166[1]);
      if ((v158 & 1) != 0)
      {
        v68 = *v149;
        *(_QWORD *)v68 = v10;
        *(_QWORD *)(v68 + 8) = &v14[(_QWORD)v10];
        *(_BYTE *)(v68 + 16) = 1;
        v69 = v155;
        if (v153 != v155)
        {
          v70 = v155 + 16;
          v71 = 1;
          do
          {
            v72 = v68 + 24 * v71;
            *(_OWORD *)v72 = *((_OWORD *)v70 - 1);
            v73 = *v70;
            v70 += 24;
            *(_BYTE *)(v72 + 16) = v73;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) > v71++;
          }
          while (v17);
        }
        v74 = 1;
      }
      else
      {
        v74 = 0;
        v69 = v155;
      }
      if (v156)
        operator delete(v156);
      if (v69)
        operator delete(v69);
    }
    else
    {
      v74 = 0;
    }
    *(_QWORD *)v169 = v166;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  }
  else
  {
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    v74 = *(_QWORD *)(a1 + 40);
    if (v74)
    {
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v171, 0, 21);
      std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v150 = a4;
      v75 = v166[1];
      v76 = v168.i64[1] + v168.i64[0] - 1;
      v77 = v76 / 0x2A;
      v78 = *((_QWORD *)v166[1] + v76 / 0x2A);
      v79 = 3 * (v76 % 0x2A);
      v80 = v78 + 32 * v79;
      *(_DWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 16) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 24) = v9;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v75[v77] + 32 * v79 + 56), *(unsigned int *)(a1 + 32));
      v160 = 0;
      v81 = 0;
      v82 = v168.i64[1];
      v83 = v166[1];
      v84 = v168.i64[1] + v168.i64[0] - 1;
      v85 = v84 / 0x2A;
      v86 = 3 * (v84 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v166[1] + v85) + 32 * v86 + 80) = v74;
      v87 = v83[v85] + 32 * v86;
      *(_DWORD *)(v87 + 88) = v7;
      *(_BYTE *)(v87 + 92) = a6;
      v157 = 0;
      while (2)
      {
        if ((++v81 & 0xFFF) == 0 && (int)(v81 >> 12) >= (int)v165)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v89 = v82 + v168.i64[0] - 1;
        v90 = *((_QWORD *)v166[1] + v89 / 0x2A);
        v91 = v89 % 0x2A;
        v92 = v90 + 96 * (v89 % 0x2A);
        v94 = (_QWORD *)(v92 + 80);
        v93 = *(_QWORD *)(v92 + 80);
        if (v93)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v90 + 96 * v91);
        switch(*(_DWORD *)v92)
        {
          case 0xFFFFFC18:
            v95 = *(const char **)(v90 + 96 * v91 + 16);
            v96 = (v7 & 0x1000) == 0 || v95 == v9;
            v97 = v96;
            v98 = v95 != v10 || (v7 & 0x20) == 0;
            if (!v98 || (v97 & 1) == 0)
              goto LABEL_200;
            v99 = (uint64_t)&v95[-*(_QWORD *)(v90 + 96 * v91 + 8)];
            v100 = v157;
            if ((v160 & ((uint64_t)v157 >= v99)) == 0)
              v100 = (char *)v99;
            if (v100 != v165)
            {
              v157 = v100;
              std::deque<std::__state<char>>::pop_back(v166);
              v160 = 1;
              goto LABEL_201;
            }
            v101 = (void **)v166[1];
            v102 = (_BYTE *)v167;
            if ((void *)v167 == v166[1])
            {
              v102 = v166[1];
            }
            else
            {
              v103 = v10;
              v104 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
              v105 = (_QWORD *)(*v104 + 96 * (v168.i64[0] % 0x2AuLL));
              v106 = *((_QWORD *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                   + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
              if (v105 != (_QWORD *)v106)
              {
                do
                {
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v105);
                  v105 += 12;
                  if ((_QWORD *)((char *)v105 - *v104) == (_QWORD *)4032)
                  {
                    v107 = (_QWORD *)v104[1];
                    ++v104;
                    v105 = v107;
                  }
                }
                while (v105 != (_QWORD *)v106);
                v101 = (void **)v166[1];
                v102 = (_BYTE *)v167;
              }
              v10 = v103;
            }
            v168.i64[1] = 0;
            v138 = v102 - (_BYTE *)v101;
            if (v138 >= 0x11)
            {
              do
              {
                operator delete(*v101);
                v101 = (void **)((char *)v166[1] + 8);
                v166[1] = v101;
                v138 = v167 - (_QWORD)v101;
              }
              while ((_QWORD)v167 - (_QWORD)v101 > 0x10uLL);
            }
            if (v138 >> 3 == 1)
            {
              v139 = 21;
            }
            else
            {
              if (v138 >> 3 != 2)
                goto LABEL_188;
              v139 = 42;
            }
            v168.i64[0] = v139;
LABEL_188:
            v160 = 1;
            v157 = (char *)v165;
LABEL_201:
            v82 = v168.i64[1];
            if (v168.i64[1])
              continue;
            if ((v160 & 1) != 0)
            {
              v147 = *v150;
              *(_QWORD *)v147 = v10;
              *(_QWORD *)(v147 + 8) = &v157[(_QWORD)v10];
              v74 = 1;
              *(_BYTE *)(v147 + 16) = 1;
            }
            else
            {
              v74 = 0;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_201;
          case 0xFFFFFC1D:
            v108 = v168.i64[0];
            v109 = (char *)v166[1];
            v110 = (char *)v167;
            if (!v168.i64[0])
            {
              v113 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
              v114 = 42 * v113 - 1;
              if ((void *)v167 == v166[1])
                v114 = 0;
              if ((unint64_t)(v114 - v168.i64[1]) < 0x2A)
              {
                if (v113 >= (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                {
                  if (*((void **)&v167 + 1) == v166[0])
                    v115 = 1;
                  else
                    v115 = (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                  *(_QWORD *)&v169[32] = (char *)&v167 + 8;
                  *(_QWORD *)v169 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v115);
                  *(_QWORD *)&v169[8] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[16] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[24] = *(_QWORD *)v169 + 8 * v116;
                  v163 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v169, &__x);
                  v117 = (uint64_t *)v166[1];
                  v118 = *(char **)&v169[16];
                  for (i = v9; v117 != (uint64_t *)v167; *(_QWORD *)&v169[16] += 8)
                  {
                    if (v118 == *(char **)&v169[24])
                    {
                      v119 = *(char **)&v169[8];
                      v120 = *(void **)v169;
                      if (*(_QWORD *)&v169[8] <= *(_QWORD *)v169)
                      {
                        if (v118 == *(char **)v169)
                          v127 = 1;
                        else
                          v127 = (uint64_t)&v118[-*(_QWORD *)v169] >> 2;
                        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v127);
                        v130 = &v128[8 * (v127 >> 2)];
                        v131 = v118 - v119;
                        v96 = v118 == v119;
                        v118 = v130;
                        v9 = i;
                        if (!v96)
                        {
                          v118 = &v130[v131 & 0xFFFFFFFFFFFFFFF8];
                          v132 = 8 * (v131 >> 3);
                          v133 = v130;
                          do
                          {
                            v134 = *(_QWORD *)v119;
                            v119 += 8;
                            *(_QWORD *)v133 = v134;
                            v133 += 8;
                            v132 -= 8;
                          }
                          while (v132);
                        }
                        *(_QWORD *)v169 = v128;
                        *(_QWORD *)&v169[8] = v130;
                        *(_QWORD *)&v169[16] = v118;
                        *(_QWORD *)&v169[24] = &v128[8 * v129];
                        if (v120)
                          operator delete(v120);
                      }
                      else
                      {
                        v121 = (uint64_t)(*(_QWORD *)&v169[8] - *(_QWORD *)v169) >> 3;
                        if (v121 >= -1)
                          v122 = v121 + 1;
                        else
                          v122 = v121 + 2;
                        v123 = *(_QWORD *)&v169[8] - 8 * (v122 >> 1);
                        v124 = (size_t)&v118[-*(_QWORD *)&v169[8]];
                        if (v118 != *(char **)&v169[8])
                        {
                          v125 = (void *)(*(_QWORD *)&v169[8] - 8 * (v122 >> 1));
                          memmove(v125, *(const void **)&v169[8], v124);
                          v123 = (uint64_t)v125;
                          v118 = v119;
                        }
                        v126 = &v118[-8 * (v122 >> 1)];
                        v118 = (char *)(v123 + v124);
                        *(_QWORD *)&v169[8] = v126;
                        *(_QWORD *)&v169[16] = v123 + v124;
                        v9 = i;
                      }
                    }
                    v135 = *v117++;
                    *(_QWORD *)v118 = v135;
                    v118 = (char *)(*(_QWORD *)&v169[16] + 8);
                  }
                  v136 = v166[0];
                  *(_OWORD *)v166 = *(_OWORD *)v169;
                  *(_QWORD *)&v167 = v118;
                  *((_QWORD *)&v167 + 1) = *(_QWORD *)&v169[24];
                  v137 = 21;
                  if (&v118[-*(_QWORD *)&v169[8]] != (char *)8)
                    v137 = v168.i64[0] + 42;
                  v168.i64[0] = v137;
                  v10 = v163;
                  if (v136)
                    operator delete(v136);
                  LOWORD(v7) = v164;
                }
                else
                {
                  if (v166[1] == v166[0])
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v166, v169);
                    *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                    *(_QWORD *)&v167 = v167 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v166, v169);
                  v140 = 21;
                  if ((_QWORD)v167 - (unint64_t)v166[1] != 8)
                    v140 = v168.i64[0] + 42;
                  v168.i64[0] = v140;
                }
              }
              else
              {
                v168.i64[0] = 42;
                *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                *(_QWORD *)&v167 = v167 - 8;
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v166, v169);
              }
              v108 = v168.i64[0];
              v109 = (char *)v166[1];
              v110 = (char *)v167;
            }
            v141 = &v109[8 * (v108 / 0x2A)];
            v142 = *(_QWORD *)v141 + 96 * (v108 % 0x2A);
            if (v110 == v109)
              v143 = 0;
            else
              v143 = v142;
            if (v143 == *(_QWORD *)v141)
              v143 = *((_QWORD *)v141 - 1) + 4032;
            v144 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)(v143 - 96) = *(_OWORD *)v92;
            *(_OWORD *)(v143 - 80) = v144;
            v145 = v90 + 96 * v91;
            *(_QWORD *)(v143 - 56) = 0;
            *(_QWORD *)(v143 - 48) = 0;
            *(_QWORD *)(v143 - 64) = 0;
            *(_OWORD *)(v143 - 64) = *(_OWORD *)(v145 + 32);
            *(_QWORD *)(v143 - 48) = *(_QWORD *)(v145 + 48);
            *(_QWORD *)(v145 + 32) = 0;
            *(_QWORD *)(v145 + 40) = 0;
            *(_QWORD *)(v145 + 48) = 0;
            *(_QWORD *)(v143 - 40) = 0;
            *(_QWORD *)(v143 - 32) = 0;
            *(_QWORD *)(v143 - 24) = 0;
            *(_OWORD *)(v143 - 40) = *(_OWORD *)(v145 + 56);
            *(_QWORD *)(v143 - 24) = *(_QWORD *)(v145 + 72);
            *(_QWORD *)(v145 + 56) = 0;
            *(_QWORD *)(v145 + 64) = 0;
            *(_QWORD *)(v145 + 72) = 0;
            v146 = *v94;
            *(_QWORD *)(v143 - 11) = *(_QWORD *)(v92 + 85);
            *(_QWORD *)(v143 - 16) = v146;
            v168 = vaddq_s64(v168, (int64x2_t)xmmword_1DED16B80);
            goto LABEL_200;
          case 0xFFFFFC1F:
LABEL_200:
            std::deque<std::__state<char>>::pop_back(v166);
            goto LABEL_201;
          case 0xFFFFFC20:
            v111 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)v169 = *(_OWORD *)v92;
            *(_OWORD *)&v169[16] = v111;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *(__int128 **)(v90 + 96 * v91 + 32), *(__int128 **)(v90 + 96 * v91 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 40) - *(_QWORD *)(v90 + 96 * v91 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v90 + 96 * v91 + 56), *(__int128 **)(v90 + 96 * v91 + 64), (uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 64) - *(_QWORD *)(v90 + 96 * v91 + 56)) >> 4);
            v112 = *v94;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)(v92 + 85);
            v171[1] = v112;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v94 + 24))(*v94, 1, v92);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            goto LABEL_201;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v166);
  }
  return v74;
}

void sub_1DE9737FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  signed int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  char *v43;
  char *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 16;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 96;
      if (v16)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 96;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *((_OWORD *)v14 - 5);
          *(_OWORD *)v39 = *(_OWORD *)v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v17 + 24))(*(_QWORD *)v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44 = *(_OWORD *)v39;
            *((_OWORD *)v23 + 1) = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_OWORD *)v23 + 2) = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_1DE973E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE9742E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DE9743D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<Agglomerate>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DE974448(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE97449C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1DE974988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1DE974CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1DF0ECEDC]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1DE974D48(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__owns_one_state<char> *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1EA931D78;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(a1 + 40, (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v13 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v13)
          v14 = v13;
        else
          v14 = (unsigned __int8 *)a3;
        if (v14 == (unsigned __int8 *)a2)
        {
          v24 = (_QWORD *)operator new();
          v25 = *(_QWORD *)(a1 + 56);
          v26 = *(_QWORD *)(v25 + 8);
          v24[1] = v26;
          *(_QWORD *)(v25 + 8) = v24;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, v14);
        }
        if (v14 != (unsigned __int8 *)a3)
          ++v14;
        while (v14 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v14, 10, a3 - (char *)v14);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v14)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v14, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v14 = v28;
          else
            v14 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v15 = (_QWORD *)operator new();
          v16 = *(_QWORD *)(a1 + 56);
          v17 = *(_QWORD *)(v16 + 8);
          v15[1] = v17;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v18 = (char *)memchr(v11, 10, a3 - v11);
          if (v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v19 == v11)
          {
            v21 = (_QWORD *)operator new();
            v22 = *(_QWORD *)(a1 + 56);
            v23 = *(_QWORD *)(v22 + 8);
            v21[1] = v23;
            *(_QWORD *)(v22 + 8) = v21;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v11, v19);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v20);
          if (v19 == a3)
            v11 = v19;
          else
            v11 = v19 + 1;
        }
        break;
      default:
        goto LABEL_49;
    }
    return a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_49:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_1DE9750AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE975100(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA936D48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DE9751A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1EA9320D0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1EA932130;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE975520(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_1EA931D48;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_1EA936D80;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931FB8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931FB8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1DF0ED014);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1DF0ED014);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931FB8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931FB8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1DF0ED014);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE975930(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_33:
      v10 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = (char)*v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v10 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1EA931DD8;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1EA932130;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = v28 + 1;
LABEL_37:
      v10 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1EA9320D0;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_1EA936E10;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE975D14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_1EA936DE0;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1EA936E40;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1EA931FE8;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1DE97619C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE976294(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE9762E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931FB8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931FB8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1DF0ED014);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *j;
  char *v14;
  int v15;
  char *v16;
  int v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t i;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::regex_traits<char>::char_class_type classname;
  char v29;
  std::string::size_type v30;
  std::string *v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string v39;
  void *v40[2];
  uint64_t v41;
  std::string __p;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_135;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_135;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_135;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      v10 = a3;
      if ((char *)v5 == a3)
        goto LABEL_113;
      v11 = *(unsigned __int8 *)v5;
      v10 = (char *)v5;
      if (v11 == 93)
        goto LABEL_113;
      memset(&v39, 0, sizeof(v39));
      if ((char *)(v5 + 1) != a3 && v11 == 91)
      {
        v12 = *(unsigned __int8 *)(v5 + 1);
        switch(v12)
        {
          case '.':
            v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
            v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
            size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
            if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v39.__r_.__value_.__l.__size_;
            if (size)
              goto LABEL_33;
            goto LABEL_27;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_134;
            for (i = 0; ; ++i)
            {
              v14 = (char *)(v5 + i + 2);
              if (*v14 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
                break;
              if (&v8[-v5] == (char *)i)
                goto LABEL_134;
            }
            if (v14 == a3)
LABEL_134:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v24 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v25 = __p.__r_.__value_.__l.__size_;
            (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v25);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &__p;
            else
              v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            classname = std::__get_classname((const char *)v27, v24 & 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v29 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_109;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_134;
            for (j = 0; ; ++j)
            {
              v14 = &j[v5 + 2];
              if (*v14 == 61 && j[v5 + 3] == 93)
                break;
              if (&v8[-v5] == j)
                goto LABEL_134;
            }
            if (v14 == a3)
              goto LABEL_134;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v30 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
LABEL_136:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
                goto LABEL_136;
              v31 = &__p;
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
            v32 = (void *)HIBYTE(v41);
            if (v41 < 0)
              v32 = v40[1];
            if (v32)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v40);
            }
            else
            {
              v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v33 = __p.__r_.__value_.__l.__size_;
              if (v33 == 2)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v35 = &__p;
                else
                  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v33 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v34 = &__p;
                else
                  v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
              }
            }
            if (SHIBYTE(v41) < 0)
              operator delete(v40[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v29 = 0;
LABEL_109:
            v5 = (uint64_t)(v14 + 2);
            v20 = v9;
            goto LABEL_110;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      v10 = v9;
LABEL_27:
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v15) = *v10;
LABEL_32:
        std::string::operator=(&v39, v15);
        ++v10;
        goto LABEL_33;
      }
      v15 = *v10;
      if (v15 != 92)
        goto LABEL_32;
      v16 = v10 + 1;
      if ((_DWORD)v5)
      {
        v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v16, a3, &v39);
      }
      else
      {
        v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
        v5 = 0;
      }
LABEL_33:
      if (v10 != a3)
      {
        v17 = *v10;
        if (v17 != 93)
        {
          v19 = v10 + 1;
          if (v10 + 1 != a3 && v17 == 45 && *v19 != 93)
          {
            memset(&__p, 0, sizeof(__p));
            v20 = v10 + 2;
            if (v10 + 2 != a3 && *v19 == 91 && *v20 == 46)
            {
              v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v10 + 3, a3, (uint64_t)&__p);
              goto LABEL_119;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v19) = *v19;
              if ((_DWORD)v19 == 92)
              {
                if ((_DWORD)v5)
                  v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &__p);
                else
                  v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &__p, v7);
LABEL_119:
                v20 = v21;
LABEL_120:
                *(_OWORD *)v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                v36 = v39.__r_.__value_.__r.__words[2];
                v38 = __p;
                memset(&v39, 0, sizeof(v39));
                v41 = v36;
                memset(&__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v38.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41) < 0)
                  operator delete(v40[0]);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v29 = 1;
LABEL_110:
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v39.__r_.__value_.__l.__data_);
                v10 = v20;
                if ((v29 & 1) == 0)
                  goto LABEL_114;
                goto LABEL_113;
              }
            }
            else
            {
              LOBYTE(v19) = *v19;
            }
            std::string::operator=(&__p, (std::string::value_type)v19);
            goto LABEL_120;
          }
        }
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v39.__r_.__value_.__l.__size_)
        {
          if (v39.__r_.__value_.__l.__size_ == 1)
          {
            v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_42:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_79:
            v29 = 1;
            v20 = v10;
            goto LABEL_110;
          }
          v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_78:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
          goto LABEL_79;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
      {
        v18 = &v39;
        if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_42;
        goto LABEL_78;
      }
LABEL_113:
      v5 = (uint64_t)v10;
LABEL_114:
      if ((char *)v5 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_135:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1DE976EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE976F68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  BOOL v9;
  std::locale v11;
  std::string v12;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v11, (const std::locale *)(v4 + 16));
  std::locale::name(&v12, &v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = v12.__r_.__value_.__l.__size_ != 1 || *v12.__r_.__value_.__l.__data_ != 67;
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = SHIBYTE(v12.__r_.__value_.__r.__words[2]) != 1 || v12.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v11);
  *(_BYTE *)(v4 + 171) = v9;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1DE9770C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x1DF0ED014](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; ; ++i)
  {
    v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93)
      break;
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  char *v7;
  char v8;
  char *v9;
  unint64_t j;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char v26;
  _BYTE *v27;
  char *v28;
  char v29;
  _BYTE *v30;
  void *v31[2];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        if (v4[23] < 0)
        {
          if (i >= *((_QWORD *)v4 + 1))
          {
LABEL_12:
            for (j = 0; ; ++j)
            {
              if (v3[23] < 0)
              {
                if (j >= *((_QWORD *)v3 + 1))
                  goto LABEL_35;
                v11 = *(char **)v3;
              }
              else
              {
                v11 = v3;
                if (j >= v3[23])
                  goto LABEL_35;
              }
              v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v11[j]);
              v13 = v3;
              if (v3[23] < 0)
                v13 = *(char **)v3;
              v13[j] = v12;
            }
          }
          v7 = *(char **)v4;
        }
        else
        {
          v7 = v4;
          if (i >= v4[23])
            goto LABEL_12;
        }
        v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7[i]);
        v9 = v4;
        if (v4[23] < 0)
          v9 = *(char **)v4;
        v9[i] = v8;
      }
    }
    v15 = 0;
    v16 = a2[23];
    if ((v16 & 0x80) != 0)
      goto LABEL_26;
    while (v15 < v16)
    {
      while (1)
      {
        ++v15;
        if ((v16 & 0x80) == 0)
          break;
LABEL_26:
        if (v15 >= *((_QWORD *)a2 + 1))
          goto LABEL_29;
      }
    }
LABEL_29:
    v17 = 0;
    v18 = a3[23];
    if ((v18 & 0x80) != 0)
      goto LABEL_32;
    while (v17 < v18)
    {
      while (1)
      {
        ++v17;
        if ((v18 & 0x80) == 0)
          break;
LABEL_32:
        if (v17 >= *((_QWORD *)a3 + 1))
          goto LABEL_35;
      }
    }
LABEL_35:
    if (v4[23] < 0)
    {
      v20 = v4;
      v4 = *(char **)v4;
      v19 = *((_QWORD *)v20 + 1);
    }
    else
    {
      v19 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v33, a1 + 16, v4, &v4[v19]);
    if (v3[23] < 0)
    {
      v22 = v3;
      v3 = *(char **)v3;
      v21 = *((_QWORD *)v22 + 1);
    }
    else
    {
      v21 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v31, a1 + 16, v3, &v3[v21]);
    *(_OWORD *)v35 = v33;
    v36 = v34;
    v34 = 0;
    *(_OWORD *)__p = *(_OWORD *)v31;
    v38 = v32;
    v31[0] = 0;
    v31[1] = 0;
    v32 = 0;
    v33 = 0uLL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v35);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v34) < 0)
    {
      v23 = (void *)v33;
LABEL_69:
      operator delete(v23);
    }
  }
  else
  {
    if (a2[23] < 0)
      v14 = *((_QWORD *)a2 + 1);
    else
      v14 = a2[23];
    if (v14 != 1 || (a3[23] < 0 ? (v24 = *((_QWORD *)a3 + 1)) : (v24 = a3[23]), v24 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v25 = a2;
      if (a2[23] < 0)
        v25 = *(char **)a2;
      v26 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v25);
      v27 = v4;
      if (v4[23] < 0)
        v27 = *(_BYTE **)v4;
      *v27 = v26;
      v28 = v3;
      if (v3[23] < 0)
        v28 = *(char **)v3;
      v29 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v28);
      v30 = v3;
      if (v3[23] < 0)
        v30 = *(_BYTE **)v3;
      *v30 = v29;
    }
    *(_OWORD *)v35 = *(_OWORD *)v4;
    v36 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v38 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v35);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
    {
      v23 = v35[0];
      goto LABEL_69;
    }
  }
}

void sub_1DE977AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1DE977D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1DE977EFC(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE977F48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE977F94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1EA932070;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1EA932100;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1EA931E08;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1DE9780D0(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1DF0ED014](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA932100;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA932100;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA932070;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA932070;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  char v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  char v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  char v34;
  _BYTE *v35;
  char v36;

  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), 95);
    v3 = v2;
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *v5 = v2;
      v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(_QWORD *)(a1 + 72) = v6;
      return;
    }
    v16 = *(_QWORD *)(a1 + 64);
    v17 = &v5[-v16];
    v18 = (uint64_t)&v5[-v16 + 1];
    if (v18 >= 0)
    {
      v19 = v4 - v16;
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
        v21 = operator new(v20);
      else
        v21 = 0;
      v23 = &v21[v20];
      v17[(_QWORD)v21] = v3;
      v6 = (uint64_t)&v17[(_QWORD)v21 + 1];
      if (v5 == (_BYTE *)v16)
      {
        v21 = &v17[(_QWORD)v21];
      }
      else
      {
        v24 = &v5[~v16];
        do
        {
          v25 = *--v5;
          (v24--)[(_QWORD)v21] = v25;
        }
        while (v5 != (_BYTE *)v16);
        v5 = *(_BYTE **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 64) = v21;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = v23;
      if (v5)
        operator delete(v5);
      goto LABEL_32;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v7 = (unint64_t *)(a1 + 64);
  v9 = *(_BYTE **)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v9 >= v8)
    {
      v10 = *v7;
      v11 = &v9[-*v7];
      v12 = (unint64_t)(v11 + 1);
      if ((uint64_t)(v11 + 1) < 0)
        goto LABEL_55;
      v13 = v8 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v31 = &v11[(_QWORD)v15];
      v32 = (char *)v15 + v14;
      v11[(_QWORD)v15] = 95;
      v22 = (uint64_t)&v11[(_QWORD)v15 + 1];
      if (v9 != (_BYTE *)v10)
      {
        v33 = &v9[~v10];
        do
        {
          v34 = *--v9;
          (v33--)[(_QWORD)v15] = v34;
        }
        while (v9 != (_BYTE *)v10);
LABEL_50:
        v9 = (_BYTE *)*v7;
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v9 >= v8)
  {
    v26 = *v7;
    v27 = &v9[-*v7];
    v28 = (unint64_t)(v27 + 1);
    if ((uint64_t)(v27 + 1) < 0)
      goto LABEL_55;
    v29 = v8 - v26;
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
      v15 = operator new(v30);
    else
      v15 = 0;
    v31 = &v27[(_QWORD)v15];
    v32 = (char *)v15 + v30;
    v27[(_QWORD)v15] = 95;
    v22 = (uint64_t)&v27[(_QWORD)v15 + 1];
    if (v9 != (_BYTE *)v26)
    {
      v35 = &v9[~v26];
      do
      {
        v36 = *--v9;
        (v35--)[(_QWORD)v15] = v36;
      }
      while (v9 != (_BYTE *)v26);
      goto LABEL_50;
    }
LABEL_51:
    v15 = v31;
LABEL_52:
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v22;
    *(_QWORD *)(a1 + 80) = v32;
    if (v9)
      operator delete(v9);
    goto LABEL_54;
  }
  *v9 = 95;
  v22 = (uint64_t)(v9 + 1);
LABEL_54:
  *(_QWORD *)(a1 + 72) = v22;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  char v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_48;
          }
          locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_48;
          }
          locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_48;
          }
          locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_48;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_62;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_62;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_62;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_62;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_48;
      }
      locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_62;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u)
      goto LABEL_62;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1DE978A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE978AFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE978B48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1DE978C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1DF0ED014](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<std::string, std::string>>::pointer v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  size_t v37;
  char *v38;
  size_t v39;
  int v40;
  BOOL v41;
  int v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  std::vector<char>::pointer v45;
  unint64_t v46;
  int v47;
  std::regex_traits<char>::char_class_type v48;
  int v49;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v51;
  char *v52;
  std::vector<std::pair<std::string, std::string>>::pointer v53;
  std::vector<std::pair<std::string, std::string>>::pointer v54;
  unsigned int v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  std::vector<std::string>::pointer v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  std::string::size_type v82;
  uint64_t v83;
  BOOL v84;
  std::string *v85;
  std::string::size_type v86;
  int v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  std::regex_traits<char>::char_class_type v93;
  int v94;
  std::vector<std::string>::pointer v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  std::string::size_type v101;
  uint64_t v102;
  BOOL v103;
  std::string *v104;
  std::string::size_type v105;
  int v106;
  std::string *v107;
  std::string *v108;
  uint64_t v109;
  int v110;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v113;
  std::regex_traits<char>::char_class_type neg_mask;
  int v115;
  std::__node<char> *first;
  int v117;
  char v118;
  char v119;
  uint64_t v120;
  _BOOL4 v121;
  _BOOL4 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::string __p;
  __int16 v128;
  std::string v129;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_238;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_67;
  v6 = *current;
  LOBYTE(v128) = *current;
  v7 = current[1];
  HIBYTE(v128) = v7;
  if (this->__icase_)
  {
    LOBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v128;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v129, (const char *)&__s);
  __p = v129;
  size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v129.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v129, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v129;
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v129.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v129.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_180;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_180:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v43 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v43)
      goto LABEL_18;
LABEL_67:
    negate = 0;
    v8 = 1;
    goto LABEL_68;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_67;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v128 != *(p_second - 1) || HIBYTE(v128) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_235;
  }
LABEL_27:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v128, (char *)&v129);
    v20 = this->__ranges_.__begin_;
    v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v22 = (char *)this->__ranges_.__end_ - (char *)v20;
    if (v22)
    {
      v23 = 0;
      v24 = v22 / 48;
      v118 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v25 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__s;
      else
        v26 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v24 <= 1)
        v27 = 1;
      else
        v27 = v22 / 48;
      v28 = (unsigned __int8 *)&v20->second.__r_.__value_.__r.__words[2] + 7;
      v29 = 1;
      while (1)
      {
        v30 = (char)*(v28 - 24);
        if (v30 >= 0)
          v31 = *(v28 - 24);
        else
          v31 = *(_QWORD *)(v28 - 39);
        if (v30 >= 0)
          v32 = (char *)(v28 - 47);
        else
          v32 = *(char **)(v28 - 47);
        if (v31 >= v25)
          v33 = v25;
        else
          v33 = v31;
        v34 = memcmp(v26, v32, v33);
        v35 = v25 >= v31;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
        {
          v36 = (char)*v28;
          if (v36 >= 0)
            v37 = *v28;
          else
            v37 = *(_QWORD *)(v28 - 15);
          if (v36 >= 0)
            v38 = (char *)(v28 - 23);
          else
            v38 = *(char **)(v28 - 23);
          if (v25 >= v37)
            v39 = v37;
          else
            v39 = v25;
          v40 = memcmp(v38, v26, v39);
          v41 = v37 >= v25;
          if (v40)
            v41 = v40 >= 0;
          if (v41)
            break;
        }
        v29 = ++v23 < v24;
        v28 += 48;
        if (v27 == v23)
        {
          v42 = 0;
          negate = 0;
          goto LABEL_182;
        }
      }
      negate = 1;
      v42 = 5;
LABEL_182:
      p_traits = &this->__traits_;
      v21 = v118;
    }
    else
    {
      v29 = 0;
      v42 = 0;
      negate = 0;
    }
    if (v21 < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_213;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_217:
    if ((char)v128 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v113 = tab[v128];
      if (((v113 & mask) != 0 || v128 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v128) & 0x80000000) == 0
        && ((tab[HIBYTE(v128)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v128) == 95))
      {
        goto LABEL_235;
      }
      neg_mask = this->__neg_mask_;
      if ((v113 & neg_mask) != 0 || v128 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_234:
        v115 = negate;
LABEL_236:
        negate = v115;
        goto LABEL_237;
      }
    }
    if ((SHIBYTE(v128) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v128)] & neg_mask) == 0)
      {
        v115 = 1;
        if (HIBYTE(v128) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_236;
      }
      goto LABEL_234;
    }
LABEL_235:
    v115 = 1;
    goto LABEL_236;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v128, (char *)&v129);
  v95 = this->__equivalences_.__begin_;
  v96 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v97 = (char *)this->__equivalences_.__end_ - (char *)v95;
  if (!v97)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_217;
  }
  v98 = 0;
  v99 = v97 / 24;
  v100 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v101 = __s.__r_.__value_.__l.__size_;
  if (v99 <= 1)
    v102 = 1;
  else
    v102 = v97 / 24;
  v103 = 1;
  while (1)
  {
    v104 = &v95[v98];
    v105 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
    v106 = (char)v105;
    if ((v105 & 0x80u) != 0)
      v105 = v104->__r_.__value_.__l.__size_;
    if (v101 != v105)
      goto LABEL_208;
    v107 = v106 >= 0 ? &v95[v98] : (std::string *)v104->__r_.__value_.__r.__words[0];
    if ((v96 & 0x80) == 0)
      break;
    v123 = v99;
    v126 = v96;
    v110 = memcmp((const void *)v100, v107, *((size_t *)&v100 + 1));
    v99 = v123;
    v96 = v126;
    if (!v110)
    {
      v42 = 5;
      negate = 1;
      goto LABEL_211;
    }
LABEL_208:
    v103 = ++v98 < v99;
    if (v98 == v102)
    {
      v42 = 0;
      goto LABEL_210;
    }
  }
  if (!(_DWORD)v96)
  {
    negate = 1;
    if (v103)
      goto LABEL_237;
    goto LABEL_217;
  }
  v108 = &__s;
  v109 = v96;
  do
  {
    if (v108->__r_.__value_.__s.__data_[0] != v107->__r_.__value_.__s.__data_[0])
      goto LABEL_208;
    v108 = (std::string *)((char *)v108 + 1);
    v107 = (std::string *)((char *)v107 + 1);
    --v109;
  }
  while (v109);
  negate = 1;
  v42 = 5;
LABEL_210:
  if ((v96 & 0x80) != 0)
LABEL_211:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v103)
    goto LABEL_217;
LABEL_213:
  if (v42)
  {
LABEL_237:
    v8 = 2;
    goto LABEL_238;
  }
  v8 = 2;
LABEL_68:
  v44 = *a2->__current_;
  v129.__r_.__value_.__s.__data_[0] = v44;
  if (this->__icase_)
  {
    v44 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v44);
    v129.__r_.__value_.__s.__data_[0] = v44;
  }
  v45 = this->__chars_.__begin_;
  v46 = this->__chars_.__end_ - v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_75;
    }
LABEL_168:
    negate = 1;
    goto LABEL_238;
  }
LABEL_75:
  v48 = this->__neg_mask_;
  if (v48 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v44 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v44] & v48) == 0)
      v49 = (v44 == 95) & (v48 >> 7);
    else
      LOBYTE(v49) = 1;
    end = this->__neg_chars_.__end_;
    v51 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v44, end - this->__neg_chars_.__begin_);
    v52 = v51 ? v51 : end;
    if ((v49 & 1) == 0 && v52 == end)
      goto LABEL_168;
  }
  v53 = this->__ranges_.__begin_;
  v54 = this->__ranges_.__end_;
  if (v53 != v54)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
      v53 = this->__ranges_.__begin_;
      v54 = this->__ranges_.__end_;
      v55 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
    }
    v56 = (char *)v54 - (char *)v53;
    if (v56)
    {
      v124 = v8;
      v121 = negate;
      v57 = 0;
      v58 = v56 / 48;
      v119 = v55;
      if ((v55 & 0x80u) == 0)
        v59 = v55;
      else
        v59 = __s.__r_.__value_.__l.__size_;
      if ((v55 & 0x80u) == 0)
        v60 = &__s;
      else
        v60 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v58 <= 1)
        v61 = 1;
      else
        v61 = v56 / 48;
      v62 = (unsigned __int8 *)&v53->second.__r_.__value_.__r.__words[2] + 7;
      v63 = 1;
      while (1)
      {
        v64 = (char)*(v62 - 24);
        if (v64 >= 0)
          v65 = *(v62 - 24);
        else
          v65 = *(_QWORD *)(v62 - 39);
        if (v64 >= 0)
          v66 = (char *)(v62 - 47);
        else
          v66 = *(char **)(v62 - 47);
        if (v65 >= v59)
          v67 = v59;
        else
          v67 = v65;
        v68 = memcmp(v60, v66, v67);
        v69 = v59 >= v65;
        if (v68)
          v69 = v68 >= 0;
        if (v69)
        {
          v70 = (char)*v62;
          if (v70 >= 0)
            v71 = *v62;
          else
            v71 = *(_QWORD *)(v62 - 15);
          if (v70 >= 0)
            v72 = (char *)(v62 - 23);
          else
            v72 = *(char **)(v62 - 23);
          if (v59 >= v71)
            v73 = v71;
          else
            v73 = v59;
          v74 = memcmp(v72, v60, v73);
          v75 = v71 >= v59;
          if (v74)
            v75 = v74 >= 0;
          if (v75)
            break;
        }
        v63 = ++v57 < v58;
        v62 += 48;
        if (v61 == v57)
        {
          negate = v121;
          goto LABEL_131;
        }
      }
      negate = 1;
LABEL_131:
      v8 = v124;
      if (v119 < 0)
LABEL_132:
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      v63 = 0;
      if ((v55 & 0x80) != 0)
        goto LABEL_132;
    }
    if (v63)
      goto LABEL_238;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_163;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
  v76 = this->__equivalences_.__begin_;
  v77 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v78 = (char *)this->__equivalences_.__end_ - (char *)v76;
  if (!v78)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_163;
  }
  v125 = v8;
  v79 = 0;
  v80 = v78 / 24;
  v81 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v82 = __s.__r_.__value_.__l.__size_;
  if (v80 <= 1)
    v83 = 1;
  else
    v83 = v78 / 24;
  v84 = 1;
  while (2)
  {
    v85 = &v76[v79];
    v86 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    v87 = (char)v86;
    if ((v86 & 0x80u) != 0)
      v86 = v85->__r_.__value_.__l.__size_;
    if (v82 != v86)
    {
LABEL_156:
      v84 = ++v79 < v80;
      if (v79 == v83)
      {
LABEL_157:
        v8 = v125;
        if ((v77 & 0x80) == 0)
          goto LABEL_159;
        goto LABEL_158;
      }
      continue;
    }
    break;
  }
  if (v87 >= 0)
    v88 = &v76[v79];
  else
    v88 = (std::string *)v85->__r_.__value_.__r.__words[0];
  if ((v77 & 0x80) != 0)
  {
    v122 = negate;
    v91 = v80;
    v120 = v83;
    v92 = memcmp((const void *)v81, v88, *((size_t *)&v81 + 1));
    v83 = v120;
    v80 = v91;
    negate = v122;
    if (!v92)
    {
      negate = 1;
      v8 = v125;
LABEL_158:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
    goto LABEL_156;
  }
  if ((_DWORD)v77)
  {
    v89 = &__s;
    v90 = v77;
    while (v89->__r_.__value_.__s.__data_[0] == v88->__r_.__value_.__s.__data_[0])
    {
      v89 = (std::string *)((char *)v89 + 1);
      v88 = (std::string *)((char *)v88 + 1);
      if (!--v90)
      {
        negate = 1;
        goto LABEL_157;
      }
    }
    goto LABEL_156;
  }
  negate = 1;
  v8 = v125;
LABEL_159:
  if (!v84)
  {
LABEL_163:
    if (v129.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_238;
    v93 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v129.__r_.__value_.__s.__data_[0]] & v93) == 0)
    {
      v94 = (v93 >> 7) & 1;
      if (v129.__r_.__value_.__s.__data_[0] != 95)
        v94 = 0;
      if (v94 != 1)
        goto LABEL_238;
    }
    goto LABEL_168;
  }
LABEL_238:
  if (negate == this->__negate_)
  {
    first = 0;
    v117 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

void sub_1DE9797FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1DE9798C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1DE9799C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE979B44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1EA931F58;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1EA932040;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1EA92E1A0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA932040;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA932040;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA931F58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA931F58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  std::basic_regex<char> *v29;
  int v31;
  int v32;

  v3 = (char *)a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = a2 + 1;
    v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46)
      {
        v12 = (std::__node<char> *)operator new();
        v13 = a1->__end_;
        first = v13->__first_;
        v12->__vftable = (std::__node<char>_vtbl *)&off_1EA931DD8;
        v12[1].__vftable = (std::__node<char>_vtbl *)first;
        v13->__first_ = v12;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_29;
      }
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92)
        return v3;
      v15 = *v9;
      if (v15 == 40)
      {
        v16 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v17 = a1->__marked_count_;
        do
        {
          v18 = (unsigned __int8 *)v16;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v16, a3);
        }
        while ((unsigned __int8 *)v16 != v18);
        if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = (char *)(v18 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
      }
      else
      {
        v19 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
        v20 = 2;
        if (!v19)
          v20 = 0;
        v11 = &v3[v20];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3)
        return (char *)a3;
      v21 = a1->__marked_count_ + 1;
      v22 = *v9;
      if (v22 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v22 != 92 || v9[1] != 123)
        return (char *)v9;
      v32 = 0;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v32);
      if (v23 == v9 + 2)
LABEL_45:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v23 != a3)
      {
        v24 = v23 + 1;
        v25 = *v23;
        if (v25 == 44)
        {
          v31 = -1;
          v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23 + 1, a3, &v31);
          if (v26 != a3 && v26 + 1 != a3 && *v26 == 92 && v26[1] == 125)
          {
            v28 = v31;
            v27 = v32;
            if (v31 == -1)
            {
              v28 = -1;
            }
            else if (v31 < v32)
            {
              goto LABEL_45;
            }
            v3 = (char *)&v26[2 * (v26[1] == 125)];
            v29 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v27, v28, end, marked_count + 1, v21, 1);
            return v3;
          }
        }
        else if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v3 = (char *)(v23 + 2);
          v27 = v32;
          v29 = a1;
          v28 = v32;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  int v40;
  std::basic_regex<char> *v41;
  BOOL v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v46;
  std::__bracket_expression<char, std::regex_traits<char>> *v47;
  std::basic_regex<char> *v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::basic_regex<char> v51;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_31;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1EA9320D0;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1EA932130;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = a1->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v51, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_30:
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
        std::locale::~locale(&v51.__traits_.__loc_);
        result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2)
          return result;
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = a1->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        v14 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v51, 0, a1->__marked_count_);
        a1->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        goto LABEL_30;
      }
    }
LABEL_31:
    v7 = *a2;
  }
LABEL_32:
  v24 = a1->__end_;
  v25 = a1->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_97;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_97;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_97;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
          v37 = a1->__marked_count_;
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_97:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = a1->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_1EA936DB0;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v33);
LABEL_96:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
    goto LABEL_76;
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_98;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_98:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_98;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v33);
  if (v30 == (unsigned __int8 *)v31)
  {
LABEL_76:
    v40 = *v31;
    if (v40 > 99)
    {
      if (v40 == 119)
      {
        v41 = a1;
        v42 = 0;
        goto LABEL_88;
      }
      if (v40 == 115)
      {
        v49 = a1;
        v50 = 0;
LABEL_94:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        v46 = started->__mask_ | 0x4000;
        goto LABEL_95;
      }
      if (v40 != 100)
      {
LABEL_89:
        v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
        if (v48 == (std::basic_regex<char> *)v31)
          v30 = a2;
        else
          v30 = (unsigned __int8 *)v48;
        goto LABEL_57;
      }
      v43 = a1;
      v44 = 0;
    }
    else
    {
      if (v40 != 68)
      {
        if (v40 != 83)
        {
          if (v40 == 87)
          {
            v41 = a1;
            v42 = 1;
LABEL_88:
            v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95);
            goto LABEL_96;
          }
          goto LABEL_89;
        }
        v49 = a1;
        v50 = 1;
        goto LABEL_94;
      }
      v43 = a1;
      v44 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    v46 = started->__mask_ | 0x400;
LABEL_95:
    started->__mask_ = v46;
    goto LABEL_96;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  return result;
}

void sub_1DE97AA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1DF0ECA38](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1DE97AAB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_1EA931F28;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1EA931DA8;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931DA8;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1EA931DA8;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1DF0ED014);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1DE97AEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA931F28;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1EA931F28;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1DF0ED014);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1DF0ED014);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingModel>::__on_zero_shared()
{
  int v0;
  int v1;
  void *exception;
  int v3;
  void **v4;
  const char *status_string;
  void **v6;
  void *v7;
  int v8;
  void **v9;
  const char *v10;
  void **v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  _BYTE v16[24];

  v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy plan");
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = v15;
    v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v6 = __p;
    if (v3 < 0)
      v6 = v4;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v6, v0, status_string);
    MEMORY[0x1DF0EC99C](exception, v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v15 < 0)
    operator delete(__p[0]);
  v1 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v12, "Unable to destroy context");
  if (v1)
  {
    v7 = __cxa_allocate_exception(0x10uLL);
    v8 = v13;
    v9 = (void **)v12[0];
    v10 = (const char *)espresso_get_status_string();
    v11 = v12;
    if (v8 < 0)
      v11 = v9;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v11, v1, v10);
    MEMORY[0x1DF0EC99C](v7, v16);
    __cxa_throw(v7, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1DE97B510(void *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0)
LABEL_6:
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void WordEmbeddingPersistentModule::~WordEmbeddingPersistentModule(void **this)
{
  *this = &off_1EA921BF0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921BF0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void PersistentModuleFactory::get_persistent_module_from_pool<WordEmbeddingPersistentModule>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 *v17;

  v4 = *(std::__shared_weak_count **)(a3 + 24);
  if (v4 && (v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v8 = v7;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9
      && (v10 = v9 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v9 + 8), (unsigned __int8 *)a2)))
    {
      v17 = a2;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a2, &v17);
      v12 = *((_QWORD *)v11 + 6);
      *a1 = *((_QWORD *)v11 + 5);
      a1[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1DE97B6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1EA921C60;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 24) = &unk_1EA920680;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void SharedObjectPool::get<MDN>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::string *p_p;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __p;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    SharedObjectPool::get<VoiceConfig>(&v34, (__int128 **)a2);
    (*(void (**)(std::string **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(&p_p, v34, 1835298406, 0);
    v10 = operator new(0x200uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1EA9358B8;
    std::string::basic_string[abi:ne180100]<0>(&__p, "mdn");
    NNetExtractor::NNetExtractor((uint64_t)(v10 + 3), (uint64_t)&p_p, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)&v31 = v10 + 3;
    *((_QWORD *)&v31 + 1) = v10;
    v11 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v35;
    if (v35)
    {
      v15 = (unint64_t *)&v35->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    p_p = &__p;
    v18 = v17[5];
    if (v18)
    {
      if (*((_QWORD *)&v31 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(std::__shared_weak_count **)(v18 + 16);
      *(_OWORD *)(v18 + 8) = v31;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    }
    else
    {
      v25 = operator new();
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      *(_QWORD *)v25 = &off_1EA9234A8;
      *(_OWORD *)(v25 + 8) = v31;
      if (*((_QWORD *)&v31 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = v17[5];
      v17[5] = v25;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    if (v24)
    {
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE97BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::recursive_mutex *v23;
  std::__shared_weak_count *v24;
  void *v26;

  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::recursive_mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MDNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MDNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<MDN>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9234A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<MDN>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9234A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void DecompressAudio::decompress_generated_prompt(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  __int16 *v11;
  __int16 *v12;
  void *__p;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  char *v18;

  v5 = *(unsigned __int16 **)(a2 + 16);
  v6 = *v5;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v6);
    v18 = (char *)v16 + 2 * v8;
    memmove(v16, v5 + 3, 2 * v6);
    v17 = (char *)v16 + 2 * v6;
    v9 = *(unsigned __int16 **)(a2 + 16);
    v10 = 2 * *v5 + 6;
  }
  else
  {
    v10 = 6;
    v9 = v5;
  }
  __p = 0;
  v14 = 0;
  v15 = 0;
  DecompressAudio::decompress_relevant_audio(a1, &v16, (uint64_t)v9 + v10 - *(_QWORD *)(a1 + 16), &__p);
  v11 = (__int16 *)((char *)__p + 2 * v5[1]);
  v12 = (__int16 *)&v14[-2 * v5[2]];
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>(a3, v11, v12, v12 - v11);
  if (__p)
  {
    v14 = (char *)__p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = (char *)v16;
    operator delete(v16);
  }
}

void sub_1DE97BCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t DecompressAudio::decompress_relevant_audio(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 16) + a3;
  std::vector<short>::resize((uint64_t)a4, 480 * (a2[1] - *a2));
  return (***(uint64_t (****)(_QWORD, _QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8), 0, v7, a2, 960 * ((a2[1] - *a2) >> 1), *a4);
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>(_QWORD *a1, __int16 *a2, __int16 *a3, unint64_t a4)
{
  __int16 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  float *v14;
  float *v15;
  int v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int16 *v20;
  uint64_t v21;
  int v22;
  float *v23;
  int v24;
  float *v25;
  int v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      v25 = (float *)result;
      while (v6 != a3)
      {
        v26 = *v6++;
        *v25++ = (float)v26;
      }
      v17 = (char *)((char *)v25 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 2 * v19;
        do
        {
          v22 = *v6++;
          *(float *)result = (float)v22;
          result += 4;
          v21 -= 2;
        }
        while (v21);
      }
      v23 = (float *)v12;
      while (v20 != a3)
      {
        v24 = *v20++;
        *v23++ = (float)v24;
      }
      v17 = (char *)((char *)v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](a1, v11);
    v14 = (float *)a1[1];
    v13 = a1 + 1;
    v12 = (char *)v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = (float *)v12;
      do
      {
        v16 = *v6++;
        *v15++ = (float)v16;
      }
      while (v6 != a3);
    }
    v17 = (char *)((char *)v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void DecompressAudio::DecompressAudio(DecompressAudio *this, const AudioStreamBasicDescription *a2, const void *a3, UInt32 a4, const char *a5)
{
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  __int128 v13;
  AudioConverterRef *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  unint64_t v18;
  Float64 v19;
  void *exception;
  int v21;
  int inPropertyData;
  AudioStreamBasicDescription buf;
  uint8_t v24[8];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1EA91DDB8;
  v10 = operator new();
  *(_QWORD *)v10 = &off_1EA91CFB0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Bad pointer in TTSACDecoder, crashing \n");
    MEMORY[0x1DF0EC99C](exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if ((a2 & 3) != 0)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.mSampleRate) = 0;
      _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_ERROR, "Bad pointer in TTSACDecoder will crash on ARM32 as not 4 byte aligned ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(3, "Bad pointer in TTSACDecoder will crash on ARM32 as not 4 byte aligned ", v12);
  }
  v13 = *(_OWORD *)&a2->mBytesPerPacket;
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&a2->mSampleRate;
  *(_OWORD *)&buf.mBytesPerPacket = v13;
  *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)&a2->mBitsPerChannel;
  v14 = (AudioConverterRef *)(v10 + 8);
  v15 = AudioConverterNew(&buf, &TTSACDecoder::TTSACDecoder(AudioStreamBasicDescription const*,void const*,int)::sACUncompressed, (AudioConverterRef *)(v10 + 8));
  if ((_DWORD)v15)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v24 = 67109120;
      *(_DWORD *)&v24[4] = v15;
      _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_ERROR, "Error: Can't create AudioConverter: %d", v24, 8u);
    }
    Diagnostics::log(3, "Error: Can't create AudioConverter: %d", v17, v15);
  }
  else
  {
    inPropertyData = 2;
    AudioConverterSetProperty(*v14, 0x70726D6Du, 8u, &inPropertyData);
    *(_QWORD *)v24 = 0;
    *(_DWORD *)(v10 + 24) = 0;
    if (buf.mFormatID == 1869641075)
    {
      *(_DWORD *)v24 = 0;
      *(_DWORD *)(v10 + 24) = 0;
      v21 = 1650553971;
      AudioConverterSetProperty(*(AudioConverterRef *)(v10 + 8), 0x73726361u, 4u, &v21);
    }
    AudioConverterSetProperty(*v14, 0x7072696Du, 8u, v24);
    AudioConverterSetProperty(*v14, 0x646D6763u, a4, a3);
    LODWORD(v18) = buf.mFramesPerPacket;
    v19 = TTSACDecoder::TTSACDecoder(AudioStreamBasicDescription const*,void const*,int)::sACUncompressed.mSampleRate
        * (double)v18
        / buf.mSampleRate;
    *(_DWORD *)(v10 + 16) = -1;
    *(_DWORD *)(v10 + 20) = (int)v19;
  }
  *((_QWORD *)this + 1) = v10;
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = 2 * a2->mFramesPerPacket;
}

void sub_1DE97C1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x1DF0ED014](v16, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

uint64_t get_modification_vector_ix(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  float *v5;
  uint64_t result;

  if (a2 == a1)
    return 0xFFFFFFFFLL;
  v3 = 0;
  v4 = (a2 - a1) >> 4;
  if (v4 <= 1)
    v4 = 1;
  v5 = (float *)(a1 + 12);
  result = 0xFFFFFFFFLL;
  do
  {
    if (*(v5 - 1) <= a3)
    {
      if (*v5 >= a3)
        result = v3;
      else
        result = result;
    }
    ++v3;
    v5 += 4;
  }
  while (v4 != v3);
  return result;
}

float get_f0_mod_value(int a1, uint64_t a2, uint64_t a3, float *a4, int a5, float a6, float a7)
{
  int modification_vector_ix;
  float v14;
  float v15;
  float v17;

  modification_vector_ix = get_modification_vector_ix(a2, a3, a6);
  if (modification_vector_ix == -1
    || (v14 = *(float *)(a2 + 16 * modification_vector_ix), v14 == 0.0)
    || (v15 = *(float *)(a2 + 16 * modification_vector_ix + 4), v15 == 0.0))
  {
    *a4 = -1.0;
  }
  else
  {
    if (v14 != v15)
    {
      v17 = (float)(a6 - *(float *)(a2 + 16 * modification_vector_ix + 8))
          / (float)(*(float *)(a2 + 16 * modification_vector_ix + 12)
                  - *(float *)(a2 + 16 * modification_vector_ix + 8));
      v14 = (float)(v15 * v17) + (float)((float)(1.0 - v17) * v14);
    }
    *a4 = v14;
    return (float)a1 / (float)((float)a5 / v14);
  }
  return a7;
}

uint64_t get_volume_mod(uint64_t a1, uint64_t a2, float a3)
{
  return get_modification_vector_ix(a1, a2, a3);
}

float get_f0_mod_range(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  int modification_vector_ix;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v19;
  double v20;
  float v21;
  float v22;

  modification_vector_ix = get_modification_vector_ix(a3, a4, a5);
  if (modification_vector_ix != -1)
  {
    v12 = modification_vector_ix;
    v13 = (float *)(a3 + 16 * modification_vector_ix);
    v14 = (float)((float)a1 / *(float *)(a2 + 4 * modification_vector_ix)) + -1.0;
    if (v14 > 0.0)
      v14 = log(v14 + 1.0) / (float)((float)(v14 + 3.0) / 3.0) / 3.0;
    v15 = *v13;
    v16 = (float *)(a3 + 16 * v12);
    v17 = v16[1];
    if (*v13 == v17)
    {
      return a6 + (float)(v14 * a6) * (1.0 - v15);
    }
    else
    {
      v19 = (float)(a5 - v16[2]) / (float)(v16[3] - v16[2]);
      v20 = (float)(v14 * a6);
      v21 = (1.0 - v15) * v20;
      v22 = (1.0 - v17) * v20;
      return fmax((float)((float)((float)(v19 * v22) + (float)((float)(1.0 - v19) * v21)) + a6), 0.1);
    }
  }
  return a6;
}

void PitchmarkExtractorCore::PitchmarkData::~PitchmarkData(PitchmarkExtractorCore::PitchmarkData *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
    operator delete(v2);
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void Psola::Psola(Psola *this, int a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *((_DWORD *)this + 3) = a2;
  *((_OWORD *)this + 1) = 0u;
  v3 = (char *)this + 552;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v4 = (char *)this + 576;
  v5 = (char *)this + 600;
  v6 = (char *)this + 624;
  v7 = (char *)this + 648;
  *(_WORD *)this = 0;
  bzero((char *)this + 72, 0x258uLL);
  *(_QWORD *)((char *)this + 4) = 0x42A0000042C80000;
  *((_BYTE *)this + 64) = 0;
  MEMORY[0x1DF0ECA80](v3, "100");
  MEMORY[0x1DF0ECA80](v4, "0");
  MEMORY[0x1DF0ECA80](v5, "100");
  MEMORY[0x1DF0ECA80](v6, "100");
  MEMORY[0x1DF0ECA80](v7, "80");
}

void sub_1DE97C638(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (*(char *)(v1 + 671) < 0)
    operator delete(*v7);
  if (*(char *)(v1 + 647) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 623) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 599) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 575) < 0)
    operator delete(*v3);
  v10 = *(void **)(v1 + 528);
  if (v10)
  {
    *(_QWORD *)(v1 + 536) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(v1 + 504);
  if (v11)
  {
    *(_QWORD *)(v1 + 512) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v1 + 480);
  if (v12)
  {
    *(_QWORD *)(v1 + 488) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v1 + 456);
  if (v13)
  {
    *(_QWORD *)(v1 + 464) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v1 + 432);
  if (v14)
  {
    *(_QWORD *)(v1 + 440) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v1 + 408);
  if (v15)
  {
    *(_QWORD *)(v1 + 416) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v1 + 384);
  if (v16)
  {
    *(_QWORD *)(v1 + 392) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v1 + 360);
  if (v17)
  {
    *(_QWORD *)(v1 + 368) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v1 + 336);
  if (v18)
  {
    *(_QWORD *)(v1 + 344) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v1 + 312);
  if (v19)
  {
    *(_QWORD *)(v1 + 320) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v1 + 288);
  if (v20)
  {
    *(_QWORD *)(v1 + 296) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v1 + 264);
  if (v21)
  {
    *(_QWORD *)(v1 + 272) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v1 + 240);
  if (v22)
  {
    *(_QWORD *)(v1 + 248) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v1 + 216);
  if (v23)
  {
    *(_QWORD *)(v1 + 224) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(v1 + 192);
  if (v24)
  {
    *(_QWORD *)(v1 + 200) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v1 + 168);
  if (v25)
  {
    *(_QWORD *)(v1 + 176) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v1 + 144);
  if (v26)
  {
    *(_QWORD *)(v1 + 152) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(v1 + 120);
  if (v27)
  {
    *(_QWORD *)(v1 + 128) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v1 + 96);
  if (v28)
  {
    *(_QWORD *)(v1 + 104) = v28;
    operator delete(v28);
  }
  v29 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v1 + 40);
  if (v30)
    operator delete(v30);
  v31 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v1 + 24) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void Psola::modify(uint64_t a1, int a2, float **a3, int **a4)
{
  float *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  float v17;
  unint64_t v18;
  int v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  int v29;
  float *v30;
  float v31;
  float f0_mod_value;
  float *v33;
  float *v34;
  float *v35;
  signed int v36;
  int v37;
  float *v38;
  unint64_t v39;
  float v40;
  char v41;
  int *v42;
  uint64_t v43;
  signed int v44;
  int v45;
  int32x2_t v46;
  int v47;
  int v48;
  int32x2_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  int *v64;
  _DWORD *v65;
  float *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  float *v73;
  _BYTE *v74;
  float *v75;
  uint64_t v76;
  uint64_t i;
  float v78;
  unint64_t v79;
  float *v80;
  uint64_t v81;
  float *v82;
  float v83;
  unint64_t v84;
  int *v85;
  _DWORD *v86;
  int *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  int v100;
  int v101;
  uint64_t v102;
  float v103;
  float v104;
  int v105;
  float v106;
  float v107;
  float f0_mod_range;
  float v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  float v114;
  float *v115;
  float *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  float *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  int *v127;
  int v128;
  int v129;
  unint64_t v130;
  int v131;
  const float *v132;
  int v133;
  int32x2_t v134;
  int v135;
  int v136;
  int32x2_t v137;
  int *v138;
  int v139;
  int32x2_t v140;
  int v141;
  int v142;
  int32x2_t v143;
  int v144;
  int v145;
  int *v146;
  int v147;
  int v148;
  float v149;
  float v150;
  float v151;
  const PitchmarkExtractorCore::PitchmarkData *v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t j;
  uint64_t v161;
  int v162;
  float v163;
  float v164;
  float v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  int v169;
  BOOL v170;
  int v171;
  unsigned int v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  int v178;
  float *v179;
  uint64_t v180;
  uint64_t v181;
  float *v182;
  float *v183;
  uint64_t v184;
  float *v185;
  float *v186;
  float v187;
  float v188;
  float v189;
  _BOOL4 v190;
  int v191;
  int *v192;
  int v193;
  unint64_t v194;
  int v195;
  int32x2_t v196;
  int v197;
  int v198;
  int32x2_t v199;
  int *v200;
  int v201;
  int32x2_t v202;
  int v203;
  int v204;
  int32x2_t v205;
  double v206;
  double v207;
  int *v208;
  int v209;
  float *v210;
  float *v211;
  int v212;
  float *v213;
  uint64_t v214;
  uint64_t v215;
  float *v216;
  char *v217;
  uint64_t v218;
  float *v219;
  uint64_t v220;
  float *v221;
  uint64_t v222;
  float *v223;
  float *v224;
  float v225;
  float v226;
  float v227;
  int v228;
  NSObject *v229;
  const char *v230;
  char *v231;
  NSObject *v232;
  float *v233;
  float *v234;
  unint64_t v235;
  float *v236;
  float *v237;
  uint64_t v238;
  _BYTE *v239;
  _BYTE *v240;
  int v241;
  float *v242;
  void **v243;
  int v244;
  uint64_t v246;
  float *v247;
  _QWORD v248[3];
  void *v249;
  _BYTE *v250;
  uint64_t v251;
  void *__p;
  float *v253;
  char *v254;
  _BYTE v255[9];
  float *v256;
  float *v257;

  if (a4[1] == *a4)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v229 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)&v255[1] = 0;
      _os_log_impl(&dword_1DE3F6000, v229, OS_LOG_TYPE_DEBUG, "Pitchmark data size is 0, PSOLA modification is not performed.", &v255[1], 2u);
    }
    v231 = "Pitchmark data size is 0, PSOLA modification is not performed.";
    goto LABEL_271;
  }
  if (a3[1] == *a3)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v232 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)&v255[1] = 0;
      _os_log_impl(&dword_1DE3F6000, v232, OS_LOG_TYPE_DEBUG, "Samples size is 0, PSOLA modification is not performed.", &v255[1], 2u);
    }
    v231 = "Samples size is 0, PSOLA modification is not performed.";
LABEL_271:
    Diagnostics::log(7, v231, v230);
    return;
  }
  v256 = 0;
  v257 = 0;
  memset(v255, 0, sizeof(v255));
  __p = 0;
  v253 = 0;
  v254 = 0;
  if (*(_QWORD *)(a1 + 264) != *(_QWORD *)(a1 + 272))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a4;
      v10 = (char *)a4[1] - (char *)*a4;
      v11 = *(_DWORD *)(a1 + 12);
      if ((unint64_t)v10 < 5)
        goto LABEL_17;
      v12 = 0;
      v13 = 0;
      v14 = v10 >> 2;
      v15 = a4[3];
      if (v14 <= 2)
        v14 = 2;
      v16 = v14 - 1;
      v17 = 0.0;
      do
      {
        v18 = v12 + 1;
        v19 = v9[v12 + 1];
        if ((float)(*(float *)(*(_QWORD *)(a1 + 312) + 4 * v8) * (float)v11) <= (float)v19
          && (float)(*(float *)(*(_QWORD *)(a1 + 336) + 4 * v8) * (float)v11) >= (float)v19
          && ((*(_QWORD *)((char *)v15 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0
          && ((*(_QWORD *)((char *)v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
        {
          v17 = v17 + (float)(v19 - v9[v12]);
          ++v13;
        }
        ++v12;
      }
      while (v16 != v18);
      if (v13 <= 0)
LABEL_17:
        v20 = (double)v11 / 100.0;
      else
        v20 = v17 / (float)v13;
      if (v7 >= (float *)v254)
      {
        v22 = (float *)__p;
        v23 = ((char *)v7 - (_BYTE *)__p) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = v254 - (_BYTE *)__p;
        if ((v254 - (_BYTE *)__p) >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v254, v26);
          v22 = (float *)__p;
          v7 = v253;
        }
        else
        {
          v27 = 0;
        }
        v28 = (float *)&v27[4 * v23];
        *v28 = v20;
        v21 = v28 + 1;
        while (v7 != v22)
        {
          v29 = *((_DWORD *)v7-- - 1);
          *((_DWORD *)v28-- - 1) = v29;
        }
        __p = v28;
        v253 = v21;
        v254 = &v27[4 * v26];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v7 = v20;
        v21 = v7 + 1;
      }
      v253 = v21;
      ++v8;
      v7 = v21;
    }
    while (v8 < (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 2);
  }
  v30 = (float *)a4[6];
  v31 = 1.0;
  f0_mod_value = 1.0;
  if (a4[7] != (int *)v30)
    f0_mod_value = *v30;
  v33 = (float *)a4[15];
  if (a4[16] != (int *)v33)
    v31 = *v33;
  v34 = *a3;
  v35 = a3[1];
  if (v35 != *a3)
  {
    v244 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = v35 - *a3;
    v238 = a1 + 32;
    v246 = a1 + 40;
    v40 = 0.0;
    v247 = (float *)(a1 + 68);
    v243 = (void **)(a1 + 16);
    v41 = 1;
    while (1)
    {
      v42 = *a4;
      v43 = (char *)a4[1] - (char *)*a4;
      v44 = ((unint64_t)v43 >> 2) - 1;
      if (v44 >= 1)
      {
        v45 = 0;
        v46 = vdup_n_s32(v36);
        do
        {
          v47 = v45 + v44;
          if (v45 + v44 < 0 != __OFADD__(v45, v44))
            ++v47;
          v48 = v47 >> 1;
          v49 = vabd_s32(*(int32x2_t *)&v42[v48], v46);
          if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v49, 1), (uint32x2_t)v49).u8[0] & 1) != 0)
            v44 = v48;
          else
            v45 = v48 + 1;
        }
        while (v45 < v44);
      }
      v50 = v44;
      v51 = a4[3];
      v255[0] = (*(_QWORD *)((char *)v51 + (((unint64_t)v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1;
      if ((v41 & 1) == 0)
        break;
      v53 = *v42;
      v52 = v42[1];
      v55 = *(char **)(a1 + 24);
      v54 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v55 >= v54)
      {
        v67 = (char *)*v243;
        v68 = (v55 - (_BYTE *)*v243) >> 2;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v70 = v54 - (_QWORD)v67;
        if (v70 >> 1 > v69)
          v69 = v70 >> 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
          v71 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238, v71);
          v67 = *(char **)(a1 + 16);
          v55 = *(char **)(a1 + 24);
        }
        else
        {
          v72 = 0;
        }
        v99 = &v72[4 * v68];
        *(_DWORD *)v99 = *v42;
        v56 = v99 + 4;
        while (v55 != v67)
        {
          v100 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v99 - 1) = v100;
          v99 -= 4;
        }
        *(_QWORD *)(a1 + 16) = v99;
        *(_QWORD *)(a1 + 24) = v56;
        *(_QWORD *)(a1 + 32) = &v72[4 * v71];
        if (v67)
          operator delete(v67);
      }
      else
      {
        *(_DWORD *)v55 = v53;
        v56 = v55 + 4;
      }
      *(_QWORD *)(a1 + 24) = v56;
      LOBYTE(v249) = *(_BYTE *)a4[3] & 1;
      std::vector<BOOL>::push_back(v246, &v249);
      v101 = v52 - v53;
      v102 = (v101 + 1);
      v103 = (float)**a4;
      if (v255[0])
      {
        v104 = (float)((float)((float)(int)v102 / v31) + v103) - (float)((float)((float)(int)v102 / v31) / f0_mod_value);
        v105 = (int)v104 & ~((int)v104 >> 31);
      }
      else
      {
        v105 = llroundf(v103 / v31);
      }
      v106 = (float)v105 / (float)a2;
      get_volume_mod((uint64_t)a4[6], (uint64_t)a4[7], v106);
      f0_mod_range = get_f0_mod_range(v101 + 1, (uint64_t)__p, (uint64_t)a4[12], (uint64_t)a4[13], v106, v107);
      f0_mod_value = get_f0_mod_value(v101 + 1, (uint64_t)a4[9], (uint64_t)a4[10], v247, a2, v106, f0_mod_range);
      get_volume_mod((uint64_t)a4[15], (uint64_t)a4[16], v106);
      v31 = v109;
      get_volume_mod((uint64_t)a4[18], (uint64_t)a4[19], v106);
      v40 = v110;
      if ((v52 & 0x80000000) == 0)
      {
        v111 = 0;
        v112 = v52 + 1;
        v113 = v256;
        do
        {
          v114 = v40 * (*a3)[v111];
          if (v113 >= v257)
          {
            v116 = *(float **)&v255[1];
            v117 = ((uint64_t)v113 - *(_QWORD *)&v255[1]) >> 2;
            v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v119 = (uint64_t)v257 - *(_QWORD *)&v255[1];
            if (((uint64_t)v257 - *(_QWORD *)&v255[1]) >> 1 > v118)
              v118 = v119 >> 1;
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
              v120 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v120 = v118;
            if (v120)
            {
              v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v257, v120);
              v116 = *(float **)&v255[1];
              v113 = v256;
            }
            else
            {
              v121 = 0;
            }
            v122 = (float *)&v121[4 * v117];
            *v122 = v114;
            v115 = v122 + 1;
            while (v113 != v116)
            {
              v123 = *((_DWORD *)v113-- - 1);
              *((_DWORD *)v122-- - 1) = v123;
            }
            *(_QWORD *)&v255[1] = v122;
            v256 = v115;
            v257 = (float *)&v121[4 * v120];
            if (v116)
              operator delete(v116);
          }
          else
          {
            *v113 = v114;
            v115 = v113 + 1;
          }
          v256 = v115;
          ++v111;
          v113 = v115;
        }
        while (v111 != v112);
      }
      if ((v101 & 0x80000000) == 0)
      {
        v124 = 0;
        v125 = *(_QWORD *)&v255[1] + 4 * **a4;
        do
        {
          v126 = (1.0 - cos((double)((int)v102 + (int)v124) * 6.28318531 / ((double)(2 * (int)v102) + -1.0)))
               * 0.5
               * v40
               * *(float *)(v125 + 4 * v124);
          *(float *)(v125 + 4 * v124++) = v126;
        }
        while (v102 != v124);
      }
      if (v255[0])
      {
        v127 = *a4;
        v128 = **a4;
        v129 = (int)(round(1.0 / v31 / f0_mod_value * (double)(int)v102) + (double)v128);
        if (v129 <= 1)
          LODWORD(v130) = 1;
        else
          LODWORD(v130) = v129;
        if (f0_mod_value < 0.5)
        {
          v131 = ((unint64_t)((char *)a4[1] - (char *)v127) >> 2) - 1;
          LODWORD(v132) = v131;
          if (v131 >= 1)
          {
            v133 = 0;
            v132 = (const float *)(v127 + 1);
            v134 = (int32x2_t)vld1_dup_f32(v132);
            LODWORD(v132) = ((unint64_t)((char *)a4[1] - (char *)v127) >> 2) - 1;
            do
            {
              v135 = v133 + (_DWORD)v132;
              if (v133 + (int)v132 < 0 != __OFADD__(v133, (_DWORD)v132))
                ++v135;
              v136 = v135 >> 1;
              v137 = vabd_s32(*(int32x2_t *)&v127[v136], v134);
              if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v137, 1), (uint32x2_t)v137).u8[0] & 1) != 0)
                LODWORD(v132) = v136;
              else
                v133 = v136 + 1;
            }
            while (v133 < (int)v132);
          }
          v132 = (const float *)(int)v132;
          v138 = a4[3];
          if (((*(_QWORD *)((char *)v138 + (((unint64_t)(int)v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v132) & 1) != 0)
          {
            if (v131 >= 1)
            {
              v139 = 0;
              v140 = vdup_n_s32(v130);
              do
              {
                v141 = v139 + v131;
                if (v139 + v131 < 0 != __OFADD__(v139, v131))
                  ++v141;
                v142 = v141 >> 1;
                v143 = vabd_s32(*(int32x2_t *)&v127[v142], v140);
                if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v143, 1), (uint32x2_t)v143).u8[0] & 1) != 0)
                  v131 = v142;
                else
                  v139 = v142 + 1;
              }
              while (v139 < v131);
            }
            if (((*(_QWORD *)((char *)v138 + (((unint64_t)v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v131) & 1) == 0)
            {
              do
                v132 = (const float *)((char *)v132 + 1);
              while (((*(_QWORD *)((char *)v138 + (((unint64_t)v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v132) & 1) != 0);
              LODWORD(v130) = v127[(_QWORD)v132];
            }
          }
        }
        if (*v247 >= 0.0)
          v144 = (int)(float)(roundf((float)*(int *)(a1 + 12) / *v247) + (float)v128);
        else
          v144 = (int)(round((1.0 / f0_mod_value + -1.0) * (double)(int)v102) + (double)v127[1]);
        if (v144 <= 1)
          v37 = 1;
        else
          v37 = v144;
      }
      else
      {
        v37 = (*a4)[1];
        v145 = (int)(round((1.0 / v31 + -1.0) * (double)(int)v102) + (double)v37);
        if (v145 <= 1)
          LODWORD(v130) = 1;
        else
          LODWORD(v130) = v145;
      }
LABEL_259:
      v41 = 0;
      v34 = *a3;
      v35 = a3[1];
      v39 = v35 - *a3;
      v36 = v130;
      if (v39 <= (int)v130)
        goto LABEL_273;
    }
    if ((v43 >> 2) - 1 <= (unint64_t)v44)
    {
      v73 = &v34[v42[(v43 >> 2) - 2]];
      v249 = 0;
      v250 = 0;
      v251 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v249, v73, (uint64_t)&v34[v39], &v34[v39] - v73);
      v75 = (float *)v249;
      v74 = v250;
      v76 = ((*a4)[v50] - (*a4)[v50 - 1]);
      if ((int)v76 >= 1)
      {
        for (i = 0; i != v76; ++i)
        {
          v78 = (1.0 - cos((double)(int)i * 6.28318531 / (double)(2 * (int)v76 - 1))) * 0.5 * v75[i];
          v75[i] = v78;
        }
      }
      v79 = v74 - (_BYTE *)v75;
      LODWORD(v248[0]) = 0;
      std::vector<float>::resize((uint64_t)&v255[1], (int)(v37 - v76 + (v79 >> 2)), v248);
      if ((int)(v79 >> 2) >= 1)
      {
        v80 = (float *)v249;
        v81 = (v79 >> 2);
        v82 = (float *)(*(_QWORD *)&v255[1] + 4 * (v37 - (int)v76));
        do
        {
          v83 = *v80++;
          *v82 = *v82 + (float)(v83 * v40);
          ++v82;
          --v81;
        }
        while (v81);
      }
      v85 = *(int **)(a1 + 24);
      v84 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v85 >= v84)
      {
        v93 = (int *)*v243;
        v94 = ((char *)v85 - (_BYTE *)*v243) >> 2;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v96 = v84 - (_QWORD)v93;
        if (v96 >> 1 > v95)
          v95 = v96 >> 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238, v97);
          v93 = *(int **)(a1 + 16);
          v85 = *(int **)(a1 + 24);
        }
        else
        {
          v98 = 0;
        }
        v208 = (int *)&v98[4 * v94];
        *v208 = v37;
        v86 = v208 + 1;
        while (v85 != v93)
        {
          v209 = *--v85;
          *--v208 = v209;
        }
        *(_QWORD *)(a1 + 16) = v208;
        *(_QWORD *)(a1 + 24) = v86;
        *(_QWORD *)(a1 + 32) = &v98[4 * v97];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *v85 = v37;
        v86 = v85 + 1;
      }
      *(_QWORD *)(a1 + 24) = v86;
      std::vector<BOOL>::push_back(v246, v255);
      v211 = *a3;
      v210 = a3[1];
      if (v249)
      {
        v250 = v249;
        operator delete(v249);
      }
      v130 = (unint64_t)((char *)v210 - (char *)v211) >> 2;
      goto LABEL_259;
    }
    v242 = v38;
    if (v44 <= 0)
    {
      v255[0] = (*(_BYTE *)v51 & 2) != 0;
      v44 = 1;
    }
    v57 = (v44 - 1);
    v58 = &v34[v42[v57]];
    v59 = (v44 + 1);
    v60 = (uint64_t)&v34[v42[v59]];
    v249 = 0;
    v250 = 0;
    v251 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v249, v58, v60, (v60 - (uint64_t)v58) >> 2);
    v61 = (*a4)[v44];
    v241 = (*a4)[v57];
    v239 = v249;
    v240 = v250;
    v62 = (*a4)[v59];
    v64 = *(int **)(a1 + 24);
    v63 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v64 >= v63)
    {
      v87 = (int *)*v243;
      v88 = ((char *)v64 - (_BYTE *)*v243) >> 2;
      v89 = v88 + 1;
      v66 = v242;
      if ((unint64_t)(v88 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v90 = v63 - (_QWORD)v87;
      if (v90 >> 1 > v89)
        v89 = v90 >> 1;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
        v91 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
      {
        v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238, v91);
        v87 = *(int **)(a1 + 16);
        v64 = *(int **)(a1 + 24);
      }
      else
      {
        v92 = 0;
      }
      v146 = (int *)&v92[4 * v88];
      *v146 = v37;
      v65 = v146 + 1;
      while (v64 != v87)
      {
        v147 = *--v64;
        *--v146 = v147;
      }
      *(_QWORD *)(a1 + 16) = v146;
      *(_QWORD *)(a1 + 24) = v65;
      *(_QWORD *)(a1 + 32) = &v92[4 * v91];
      if (v87)
        operator delete(v87);
    }
    else
    {
      *v64 = v37;
      v65 = v64 + 1;
      v66 = v242;
    }
    *(_QWORD *)(a1 + 24) = v65;
    std::vector<BOOL>::push_back(v246, v255);
    v148 = v62 - v61;
    v149 = (float)v36 / (float)*(int *)(a1 + 12);
    get_volume_mod((uint64_t)a4[6], (uint64_t)a4[7], v149);
    v151 = get_f0_mod_range(v62 - v61, (uint64_t)__p, (uint64_t)a4[12], (uint64_t)a4[13], v149, v150);
    f0_mod_value = get_f0_mod_value(v62 - v61, (uint64_t)a4[9], (uint64_t)a4[10], v247, a2, v149, v151);
    v152 = (const PitchmarkExtractorCore::PitchmarkData *)*a4;
    if (*(_BYTE *)(a1 + 1))
    {
      v153 = 0;
      v154 = v44;
      v155 = ((char *)a4[1] - (char *)v152) >> 2;
      v156 = 4 * v44 + 4;
      v157 = 0.0;
      v158 = v156;
      v159 = v44;
      for (j = 1; j != 50; ++j)
      {
        if (v159 - 1 >= 0)
        {
          v157 = v157 + (float)(*((_DWORD *)v152 + v159) - *((_DWORD *)v152 + (v159 - 1)));
          ++v153;
        }
        if (v155 > (unint64_t)v44 + j)
        {
          v157 = v157 + (float)(*(_DWORD *)((char *)v152 + v158) - *(_DWORD *)((char *)v152 + v158 - 4));
          ++v153;
        }
        v158 += 4;
        --v159;
      }
      v161 = 0;
      v162 = 0;
      v163 = 0.0;
      do
      {
        if (v154 - 1 >= 0)
        {
          v163 = v163 + (float)(*((_DWORD *)v152 + v154) - *((_DWORD *)v152 + (v154 - 1)));
          ++v162;
        }
        if (v155 > (unint64_t)v44 + 1 + v161)
        {
          v163 = v163 + (float)(*(_DWORD *)((char *)v152 + v156) - *(_DWORD *)((char *)v152 + v156 - 4));
          ++v162;
        }
        ++v161;
        v156 += 4;
        --v154;
      }
      while (v161 != 4);
      f0_mod_value = fmax((float)((float)((float)((float)(v163 / (float)v162) / (float)(v157 / (float)v153)) + -1.0)+ f0_mod_value), 0.1);
    }
    get_volume_mod((uint64_t)a4[15], (uint64_t)a4[16], v149);
    v31 = v164;
    get_volume_mod((uint64_t)a4[18], (uint64_t)a4[19], v149);
    v40 = v165;
    Psola::construct_psola_window((Psola *)v248, v44, v255[0], f0_mod_value, v31, v152);
    if (v66)
      operator delete(v66);
    v38 = (float *)v248[0];
    LODWORD(v248[0]) = 0;
    std::vector<float>::resize((uint64_t)&v255[1], v148 + v37, v248);
    v166 = v240 - v239;
    v167 = (unint64_t)(v240 - v239) >> 2;
    v168 = v61 - v241;
    v169 = v255[0];
    if (v255[0] || (f0_mod_value == 1.0 ? (v170 = v31 == 1.0) : (v170 = 0), v170))
    {
      v177 = __OFSUB__(v37, v168);
      v178 = v37 - v168;
      if (v178 < 0 != v177)
      {
        if ((int)v167 >= 1)
        {
          v179 = (float *)v249;
          v180 = *(_QWORD *)&v255[1];
          v181 = (v166 >> 2);
          v182 = v38;
          do
          {
            if ((v178 & 0x80000000) == 0)
              *(float *)(v180 + 4 * v178) = *(float *)(v180 + 4 * v178)
                                                          + (float)((float)(v40 * *v179) * *v182);
            ++v182;
            ++v179;
            ++v178;
            --v181;
          }
          while (v181);
        }
      }
      else if ((int)v167 >= 1)
      {
        v183 = (float *)v249;
        v184 = (v166 >> 2);
        v185 = (float *)(*(_QWORD *)&v255[1] + 4 * v178);
        v186 = v38;
        do
        {
          v187 = *v183++;
          v188 = v187;
          v189 = *v186++;
          *v185 = *v185 + (float)((float)(v40 * v188) * v189);
          ++v185;
          --v184;
        }
        while (v184);
      }
    }
    else
    {
      if (((*(_BYTE *)a1 != 0) & v244) == 1)
      {
        v171 = v37 - v168;
        if (v37 >= v168)
        {
          if ((int)v167 >= 1)
          {
            v217 = (char *)v249;
            v218 = (v166 >> 2);
            v219 = (float *)(*(_QWORD *)&v255[1] + 4 * v171);
            v220 = (v167 << 32) - 0x100000000;
            do
            {
              *v219 = *v219
                    + (float)((float)(v40 * *(float *)&v217[v220 >> 30]) * *(float *)((char *)v38 + (v220 >> 30)));
              ++v219;
              v220 -= 0x100000000;
              --v218;
            }
            while (v218);
            goto LABEL_200;
          }
        }
        else if ((int)v167 >= 1)
        {
          v172 = v37 - v148;
          v173 = (char *)v249;
          v174 = *(_QWORD *)&v255[1];
          v175 = (v166 >> 2);
          v176 = (v167 << 32) - 0x100000000;
          do
          {
            if ((v172 & 0x80000000) == 0)
              *(float *)(v174 + 4 * v172) = *(float *)(v174 + 4 * v172)
                                            + (float)((float)(v40 * *(float *)&v173[v176 >> 30])
                                                    * *(float *)((char *)v38 + (v176 >> 30)));
            v176 -= 0x100000000;
            ++v172;
            --v175;
          }
          while (v175);
          goto LABEL_200;
        }
LABEL_252:
        v244 ^= 1u;
        goto LABEL_253;
      }
      v177 = __OFSUB__(v37, v168);
      v212 = v37 - v168;
      if (v212 < 0 == v177)
      {
        if ((int)v167 >= 1)
        {
          v221 = (float *)v249;
          v222 = (v166 >> 2);
          v223 = (float *)(*(_QWORD *)&v255[1] + 4 * v212);
          v224 = v38;
          do
          {
            v225 = *v221++;
            v226 = v225;
            v227 = *v224++;
            *v223 = *v223 + (float)((float)(v40 * v226) * v227);
            ++v223;
            --v222;
          }
          while (v222);
          goto LABEL_200;
        }
        goto LABEL_252;
      }
      if ((int)v167 < 1)
        goto LABEL_252;
      v213 = (float *)v249;
      v214 = *(_QWORD *)&v255[1];
      v215 = (v166 >> 2);
      v216 = v38;
      do
      {
        if ((v212 & 0x80000000) == 0)
          *(float *)(v214 + 4 * v212) = *(float *)(v214 + 4 * v212)
                                                      + (float)((float)(v40 * *v213) * *v216);
        ++v216;
        ++v213;
        ++v212;
        --v215;
      }
      while (v215);
    }
LABEL_200:
    v190 = v169 == 0;
    v244 ^= 1u;
    if (v169)
    {
      v191 = llround(1.0 / v31 / f0_mod_value * (double)v148);
      if (v191 <= 1)
        v191 = 1;
      LODWORD(v130) = v191 + v36;
      if (f0_mod_value < 0.5)
      {
        v192 = *a4;
        v193 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
        LODWORD(v194) = v193;
        if (v193 >= 1)
        {
          v195 = 0;
          v196 = vdup_n_s32(v36);
          LODWORD(v194) = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
          do
          {
            v197 = v195 + v194;
            if (v195 + (int)v194 < 0 != __OFADD__(v195, (_DWORD)v194))
              ++v197;
            v198 = v197 >> 1;
            v199 = vabd_s32(*(int32x2_t *)&v192[v198], v196);
            if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v199, 1), (uint32x2_t)v199).u8[0] & 1) != 0)
              LODWORD(v194) = v198;
            else
              v195 = v198 + 1;
          }
          while (v195 < (int)v194);
        }
        v194 = (int)v194;
        v200 = a4[3];
        if (((*(_QWORD *)((char *)v200 + (((unint64_t)(int)v194 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v194) & 1) != 0)
        {
          if (v193 >= 1)
          {
            v201 = 0;
            v202 = vdup_n_s32(v130);
            do
            {
              v203 = v201 + v193;
              if (v201 + v193 < 0 != __OFADD__(v201, v193))
                ++v203;
              v204 = v203 >> 1;
              v205 = vabd_s32(*(int32x2_t *)&v192[v204], v202);
              if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v205, 1), (uint32x2_t)v205).u8[0] & 1) != 0)
                v193 = v204;
              else
                v201 = v204 + 1;
            }
            while (v201 < v193);
          }
          if (((*(_QWORD *)((char *)v200 + (((unint64_t)v193 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v193) & 1) == 0)
          {
            do
              ++v194;
            while (((*(_QWORD *)((char *)v200 + ((v194 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v194) & 1) != 0);
            LODWORD(v130) = v192[v194];
          }
        }
      }
      v244 &= v190;
      if (*v247 >= 0.0)
      {
        v37 = (int)(float)(roundf((float)*(int *)(a1 + 12) / *v247) + (float)v37);
        goto LABEL_257;
      }
      v206 = round(1.0 / f0_mod_value * (double)v148);
      v207 = (double)v37;
LABEL_256:
      v37 = (int)(v206 + v207);
LABEL_257:
      if (v249)
      {
        v250 = v249;
        operator delete(v249);
      }
      goto LABEL_259;
    }
LABEL_253:
    v207 = (double)v148;
    v228 = llround(1.0 / v31 * (double)v148);
    if (v228 <= 1)
      v228 = 1;
    LODWORD(v130) = v228 + v36;
    v206 = (double)v37;
    goto LABEL_256;
  }
  v38 = 0;
  v34 = a3[1];
LABEL_273:
  v234 = *(float **)&v255[1];
  v233 = v256;
  if (v256 != *(float **)&v255[1])
  {
    v235 = ((uint64_t)v256 - *(_QWORD *)&v255[1]) >> 2;
    if (v235 <= 1)
      v235 = 1;
    v236 = *(float **)&v255[1];
    do
    {
      if (fabsf(*v236) > 32766.0)
        *v236 = (float)(int)(32766 * ((__PAIR64__(*v236 > 0.0, *(_DWORD *)v236) - COERCE_UNSIGNED_INT(0.0)) >> 32));
      ++v236;
      --v235;
    }
    while (v235);
  }
  *(_QWORD *)&v255[1] = v34;
  v256 = v35;
  *a3 = v234;
  a3[1] = v233;
  v237 = v257;
  v257 = a3[2];
  a3[2] = v237;
  if (__p)
  {
    v253 = (float *)__p;
    operator delete(__p);
  }
  if (v38)
    operator delete(v38);
  if (*(_QWORD *)&v255[1])
  {
    v256 = *(float **)&v255[1];
    operator delete(*(void **)&v255[1]);
  }
}

void sub_1DE97DAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a14)
    operator delete(a14);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

float Psola::construct_psola_window(Psola *this, unsigned int a2, int a3, float a4, float a5, const PitchmarkExtractorCore::PitchmarkData *a6)
{
  uint64_t v6;
  double v8;
  int v9;
  float v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float *v20;
  float result;
  float *v22;
  float v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  float *v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3 && a4 > 1.0)
  {
    v8 = a4 + -1.0;
    if (v8 > 0.6)
      v8 = 0.6;
    v9 = *((_DWORD *)a6 + a2);
    v10 = v8;
    v11 = v9 - *((_DWORD *)a6 + a2 - 1);
    v12 = *((_DWORD *)a6 + a2 + 1) - v9;
    v13 = llroundf(v10 * (float)v11);
    v14 = (v11 - v13);
    LODWORD(v6) = llroundf(v10 * (float)v12);
    v15 = (v12 - v6);
    v16 = MEMORY[0x1E0C80A78](this);
    v18 = (float *)((char *)v40 - v17);
    MEMORY[0x1E0C80A78](v16);
    v20 = (float *)((char *)v40 - v19);
    vDSP_hann_window(v18, 2 * (int)v14 - 1, 1);
    vDSP_hann_window(v20, 2 * (int)v15 - 1, 1);
    std::vector<float>::resize((uint64_t)this, v12 + v11);
    if (v13 >= 1)
      bzero(*(void **)this, 4 * v13);
    if ((int)v14 >= 1)
    {
      v22 = (float *)(*(_QWORD *)this + 4 * v13);
      do
      {
        v23 = *v18++;
        result = v23;
        *v22++ = v23;
        --v14;
      }
      while (v14);
    }
    if ((int)v6 >= 1)
    {
      v24 = *(_QWORD *)this;
      v25 = v11;
      v26 = v6;
      do
      {
        *(_DWORD *)(v24 + 4 * v25++) = 1065353216;
        --v26;
      }
      while (v26);
    }
    if ((int)v15 >= 1)
    {
      v27 = (float *)(*(_QWORD *)this + 4 * (v11 + (int)v6));
      do
      {
        result = v20[(int)--v15];
        *v27++ = result;
      }
      while (v15);
    }
  }
  else
  {
    v28 = *((_DWORD *)a6 + a2);
    v29 = (v28 - *((_DWORD *)a6 + a2 - 1));
    v30 = (*((_DWORD *)a6 + a2 + 1) - v28);
    v31 = MEMORY[0x1E0C80A78](this);
    v33 = (float *)((char *)v40 - v32);
    MEMORY[0x1E0C80A78](v31);
    v35 = (float *)((char *)v40 - v34);
    vDSP_hann_window(v33, 2 * (int)v29 - 1, 1);
    vDSP_hann_window(v35, 2 * (int)v30 - 1, 1);
    std::vector<float>::resize((uint64_t)this, (int)v30 + (int)v29);
    if ((int)v29 >= 1)
    {
      v36 = *(float **)this;
      v37 = v29;
      do
      {
        v38 = *v33++;
        result = v38;
        *v36++ = v38;
        --v37;
      }
      while (v37);
    }
    if ((int)v30 >= 1)
    {
      v39 = *(_QWORD *)this;
      do
      {
        result = v35[(int)--v30];
        *(float *)(v39 + 4 * (int)v29) = result;
        LODWORD(v29) = v29 + 1;
      }
      while (v30);
    }
  }
  return result;
}

void sub_1DE97DE4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AsyncContainerModule::~AsyncContainerModule(AsyncContainerModule *this)
{
  AsyncContainerModule::~AsyncContainerModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  const void **v8[2];

  *(_QWORD *)this = &off_1EA91F938;
  AsyncContainerModule::cancel(this);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 424));
  v2 = *((_QWORD *)this + 34) + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  v8[0] = *((const void ***)this + 59);
  v8[1] = (const void **)&v3->__vftable;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Observable::remove_observer(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  dispatch_barrier_sync(*((dispatch_queue_t *)this + 61), &__block_literal_global_989);
  dispatch_release(*((dispatch_object_t *)this + 61));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 472);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 424));
  std::mutex::~mutex((std::mutex *)((char *)this + 360));
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  std::future<void>::~future((std::future<void> *)this + 36);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

void AsyncContainerModule::retrieve(AsyncContainerModule *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::chrono::steady_clock::time_point v13;
  std::mutex *m;
  unsigned int v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::system_clock::time_point v17;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v18;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  std::unique_lock<std::mutex> v25;

  if (*((_BYTE *)this + 160))
  {
    v4 = (void **)*((_QWORD *)this + 15);
    v5 = (void **)*((_QWORD *)this + 16);
    if (v5 == v4)
    {
      v6 = (_QWORD *)((char *)this + 152);
      v5 = (void **)*((_QWORD *)this + 15);
    }
    else
    {
      v6 = (_QWORD *)((char *)this + 152);
      v7 = *((_QWORD *)this + 18);
      v8 = &v4[v7 >> 8];
      v9 = (uint64_t)*v8 + 16 * v7;
      v10 = *(uint64_t *)((char *)v4 + (((*((_QWORD *)this + 19) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)this + 152) + v7);
      if (v9 != v10)
      {
        do
        {
          v9 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v9) + 16;
          if (v9 - (_QWORD)*v8 == 4096)
          {
            v11 = (uint64_t)v8[1];
            ++v8;
            v9 = v11;
          }
        }
        while (v9 != v10);
        v4 = (void **)*((_QWORD *)this + 15);
        v5 = (void **)*((_QWORD *)this + 16);
      }
    }
    *v6 = 0;
    v21 = (char *)v5 - (char *)v4;
    if (v21 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v22 = *((_QWORD *)this + 16);
        v4 = (void **)(*((_QWORD *)this + 15) + 8);
        *((_QWORD *)this + 15) = v4;
        v21 = v22 - (_QWORD)v4;
      }
      while (v21 > 0x10);
    }
    if (v21 >> 3 == 1)
    {
      v23 = 128;
      goto LABEL_36;
    }
    if (v21 >> 3 == 2)
    {
      v23 = 256;
LABEL_36:
      *((_QWORD *)this + 18) = v23;
    }
LABEL_37:
    Module::retrieve(this, (uint64_t)a2);
    return;
  }
  if (*((_QWORD *)this + 19))
    goto LABEL_37;
  v12 = *((_QWORD *)this + 36);
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  m = (std::mutex *)(v12 + 24);
  v25.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v12 + 24);
  v25.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v12 + 24));
  v15 = *(_DWORD *)(v12 + 136);
  if ((v15 & 8) != 0)
  {
    v24 = 2;
    goto LABEL_43;
  }
  if ((v15 & 4) != 0)
  {
    v24 = ((v15 >> 2) & 1) == 0;
    goto LABEL_43;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v13.__d_.__rep_)
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ < v13.__d_.__rep_)
    {
      v16.__d_.__rep_ = v13.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v16.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v17.__d_.__rep_)
        {
          v18 = 0;
          goto LABEL_22;
        }
        if (v17.__d_.__rep_ < 1)
        {
          if ((unint64_t)v17.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_21;
          v18 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v17.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v18 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_22;
          }
LABEL_21:
          v18 = 1000 * v17.__d_.__rep_;
LABEL_22:
          if (v18 > (v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v19.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_25;
          }
        }
        v19.__d_.__rep_ = v18 + v16.__d_.__rep_;
LABEL_25:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v12 + 88), &v25, v19);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    v20 = *(_DWORD *)(v12 + 136);
    if ((v20 & 4) != 0)
      goto LABEL_41;
  }
  v20 = *(_DWORD *)(v12 + 136);
LABEL_41:
  v24 = ((v20 >> 2) & 1) == 0;
  if (v25.__owns_)
  {
    m = v25.__m_;
LABEL_43:
    std::mutex::unlock(m);
  }
  if (v24)
  {
    v25.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 360);
    v25.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 360));
    std::condition_variable::wait((std::condition_variable *)((char *)this + 424), &v25);
    Module::retrieve(this, (uint64_t)a2);
    if (v25.__owns_)
      std::mutex::unlock(v25.__m_);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1DE97E154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t AsyncContainerModule::prepare(AsyncContainerModule *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34));
}

void AsyncContainerModule::cancel(AsyncContainerModule *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 296);
  std::mutex::lock((std::mutex *)((char *)this + 296));
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((_BYTE *)this + 160) = 1;
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 208));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 34) + 48))(*((_QWORD *)this + 34));
  std::mutex::unlock(v2);
}

void sub_1DE97E1E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AsyncContainerModule::process_data(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__assoc_sub_state *state;
  qos_class_t v10;
  dispatch_block_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[8];
  std::future<void> v19;
  uint64_t v20;
  std::promise<void> *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)();
  std::promise<void> v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  std::future<void> v30;

  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3802000000;
  v28[3] = __Block_byref_object_copy_;
  v28[4] = __Block_byref_object_dispose_;
  v3 = (std::__shared_weak_count *)a2[1];
  v28[5] = *a2;
  v29 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3802000000;
  v26[3] = __Block_byref_object_copy__3;
  v26[4] = __Block_byref_object_dispose__4;
  v6 = *(std::__shared_weak_count **)(a1 + 280);
  v26[5] = *(_QWORD *)(a1 + 272);
  v27 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v20 = 0;
  v21 = (std::promise<void> *)&v20;
  v22 = 0x3002000000;
  v23 = __Block_byref_object_copy__5;
  v24 = __Block_byref_object_dispose__6;
  std::promise<void>::promise(&v25);
  std::promise<void>::get_future(v21 + 5);
  state = v19.__state_;
  v19.__state_ = 0;
  v30.__state_ = *(std::__assoc_sub_state **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = state;
  std::future<void>::~future(&v30);
  std::future<void>::~future(&v19);
  v10 = qos_class_self();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___ZN20AsyncContainerModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke;
  v18[3] = &unk_1EA94B240;
  v18[4] = v26;
  v18[5] = v28;
  v18[6] = &v20;
  v18[7] = a1;
  v11 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v10, 0, v18);
  dispatch_async(*(dispatch_queue_t *)(a1 + 488), v11);
  _Block_release(v11);
  _Block_object_dispose(&v20, 8);
  MEMORY[0x1DF0ECF3C](&v25);
  _Block_object_dispose(v26, 8);
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Block_object_dispose(v28, 8);
  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1DE97E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  MEMORY[0x1DF0ECF3C](v10);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v12 + 40);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v11 + 40);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
}

__n128 __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__4(uint64_t a1)
{
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6()
{
  JUMPOUT(0x1DF0ECF3CLL);
}

void ___ZN20AsyncContainerModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = a1[7];
  std::mutex::lock((std::mutex *)(v2 + 296));
  v3 = *(unsigned __int8 *)(v2 + 160);
  if (!*(_BYTE *)(v2 + 160))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
    std::mutex::unlock((std::mutex *)(v2 + 296));
    v5 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
    v6 = *(_QWORD *)(a1[5] + 8);
    v8 = *(_QWORD *)(v6 + 40);
    v7 = *(std::__shared_weak_count **)(v6 + 48);
    v15 = v8;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(v5, &v15);
    v11 = v16;
    if (v16)
    {
      v12 = (unint64_t *)&v16->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
  }
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 424));
  std::promise<void>::set_value((std::promise<void> *)(*(_QWORD *)(a1[6] + 8) + 40));
  if (v3)
    std::mutex::unlock((std::mutex *)(v2 + 296));
}

void sub_1DE97E620(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, __int128 buf)
{
  uint64_t v13;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v18;
      _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_ERROR, "Async module worker exception: %s", (uint8_t *)&buf, 0xCu);
    }
    (*(void (**)(void *))(*(_QWORD *)v16 + 16))(v16);
    Diagnostics::log(3, "Async module worker exception: %s", v19);
    std::condition_variable::notify_all((std::condition_variable *)(v13 + 424));
    __cxa_end_catch();
    JUMPOUT(0x1DE97E5ACLL);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA92F930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA92F930;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 360));
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v1 + 272) + 16))(&v5);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 72))(v1, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 424));
  std::mutex::unlock((std::mutex *)(v1 + 360));
}

void sub_1DE97E944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::mutex *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::target_type()
{
}

std::string *TrackSubstitutions::reset_text(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t v9;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *v4 = 0;
  v5 = operator new(0x38uLL);
  v5[4] = 0;
  v5[5] = 0;
  *((_BYTE *)v5 + 48) = 0;
  v6 = (uint64_t **)std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(a1, &v9, 0, 0);
  if (*v6)
    operator delete(v5);
  else
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, v9, v6, v5);
  if (*(char *)(a2 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  std::__tree<TrackSubstitutions::Chunk>::__emplace_unique_impl<unsigned long,unsigned long,BOOL>((uint64_t **)a1, v7, v7, 1);
  return std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
}

void std::__tree<TrackSubstitutions::Chunk>::__emplace_unique_impl<unsigned long,unsigned long,BOOL>(uint64_t **a1, unint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;

  v8 = operator new(0x38uLL);
  v8[4] = a2;
  v8[5] = a3;
  *((_BYTE *)v8 + 48) = a4;
  v9 = (uint64_t **)std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)a1, &v10, a2, a3);
  if (*v9)
    operator delete(v8);
  else
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v10, v9, v8);
}

_QWORD *std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;

  v6 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      v7 = v5;
      v8 = v5[4];
      if (v8 > a3)
        goto LABEL_6;
      if (v8 != a3)
      {
        v10 = v8 >= a3;
        goto LABEL_8;
      }
      v9 = v7[5];
      v10 = v9 >= a4;
      if (v9 <= a4)
      {
LABEL_8:
        if (v10)
          goto LABEL_12;
        result = v7 + 1;
        v5 = (_QWORD *)v7[1];
        if (!v5)
          goto LABEL_12;
      }
      else
      {
LABEL_6:
        v5 = (_QWORD *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_12;
      }
    }
  }
  v7 = result;
LABEL_12:
  *a2 = v7;
  return result;
}

void TrackSubstitutions::add_substitution(TrackSubstitutions *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t **v62;
  uint64_t **v63;
  _QWORD *v64;
  __int128 v65;
  _QWORD *v66;
  _BYTE *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE buf[24];
  unint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (a3 != a4)
  {
    v4 = a3;
    v5 = a2;
    v8 = (_QWORD *)((char *)this + 8);
    v7 = (char *)*((_QWORD *)this + 1);
    if (v7)
    {
      do
      {
        v9 = v7;
        v7 = (char *)*((_QWORD *)v7 + 1);
      }
      while (v7);
    }
    else
    {
      v10 = (char *)this + 8;
      do
      {
        v9 = (char *)*((_QWORD *)v10 + 2);
        v11 = *(_QWORD *)v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (v11);
    }
    v12 = *((_QWORD *)v9 + 4);
    if (a3 + a2 > v12)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2048;
        v73 = v12;
        _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_DEBUG, "TrackSubstitution: origin %zu@%zu beyond limit %zu, truncating", buf, 0x20u);
      }
      Diagnostics::log(7, "TrackSubstitution: origin %zu@%zu beyond limit %zu, truncating", v14, v4, v5, v12);
      if (v12 >= v5)
      {
        v4 = v12 - v5;
      }
      else
      {
        v5 = v12;
        v4 = 0;
      }
    }
    v15 = (_QWORD *)*v8;
    v16 = v8;
    if (!*v8)
      goto LABEL_104;
    v16 = v8;
    v17 = (_QWORD *)*v8;
    do
    {
      v18 = v17[4];
      v19 = v5 >= v18;
      if (v5 >= v18)
        v20 = v17 + 1;
      else
        v20 = v17;
      if (!v19)
        v16 = v17;
      v17 = (_QWORD *)*v20;
    }
    while (*v20);
    v21 = (_QWORD *)*v16;
    if (*v16)
    {
      do
      {
        v22 = v21;
        v21 = (_QWORD *)v21[1];
      }
      while (v21);
    }
    else
    {
LABEL_104:
      do
      {
        v22 = (_QWORD *)v16[2];
        v11 = *v22 == (_QWORD)v16;
        v16 = v22;
      }
      while (v11);
    }
    v23 = v5 + v4;
    v24 = v8;
    if (v15)
    {
      v24 = v8;
      do
      {
        v25 = v15[4];
        v26 = v25 >= v23;
        if (v25 >= v23)
          v27 = v15;
        else
          v27 = v15 + 1;
        if (v26)
          v24 = v15;
        v15 = (_QWORD *)*v27;
      }
      while (*v27);
    }
    v28 = v22[4];
    v29 = v24[4];
    v30 = v5 - v28;
    if (v5 == v28)
    {
      v69 = 0;
    }
    else
    {
      if (*((_BYTE *)v22 + 48))
      {
        v5 = v22[4];
        v31 = 0;
      }
      else
      {
        v31 = v5 - v28;
      }
      v69 = v31;
      if (*((_BYTE *)v22 + 48))
        v4 += v30;
    }
    if (v29 == v23)
    {
      v32 = 0;
    }
    else
    {
      v33 = v29 - v23;
      v34 = *v24;
      if (*v24)
      {
        do
        {
          v35 = v34;
          v34 = *(_QWORD *)(v34 + 8);
        }
        while (v34);
      }
      else
      {
        v36 = v24;
        do
        {
          v35 = v36[2];
          v11 = *(_QWORD *)v35 == (_QWORD)v36;
          v36 = (_QWORD *)v35;
        }
        while (v11);
      }
      v37 = *(unsigned __int8 *)(v35 + 48);
      if (v37)
        v32 = 0;
      else
        v32 = v33;
      if (!v37)
        v33 = 0;
      v4 += v33;
    }
    *(_OWORD *)&buf[8] = 0uLL;
    *(_QWORD *)buf = &buf[8];
    v38 = v22[5];
    v39 = operator new(0x38uLL);
    v39[4] = v5;
    v39[5] = v38 + v69;
    *((_BYTE *)v39 + 48) = 1;
    v40 = std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)buf, &v71, v5, v38 + v69);
    if (*v40)
    {
      operator delete(v39);
      v41 = v32;
    }
    else
    {
      v42 = v71;
      *v39 = 0;
      v39[1] = 0;
      v39[2] = v42;
      *v40 = v39;
      v41 = v32;
      if (**(_QWORD **)buf)
      {
        *(_QWORD *)buf = **(_QWORD **)buf;
        v39 = (_QWORD *)*v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v39);
      ++*(_QWORD *)&buf[16];
    }
    if (v69)
    {
      v43 = operator new(0x38uLL);
      v44 = v22[4];
      v45 = v22[5];
      v43[4] = v44;
      v43[5] = v45;
      *((_BYTE *)v43 + 48) = 0;
      v46 = std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)buf, &v71, v44, v45);
      if (*v46)
      {
        operator delete(v43);
      }
      else
      {
        v47 = v71;
        *v43 = 0;
        v43[1] = 0;
        v43[2] = v47;
        *v46 = v43;
        if (**(_QWORD **)buf)
        {
          *(_QWORD *)buf = **(_QWORD **)buf;
          v43 = (_QWORD *)*v46;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v43);
        ++*(_QWORD *)&buf[16];
      }
    }
    if (v41)
      std::__tree<TrackSubstitutions::Chunk>::__emplace_unique_impl<unsigned long,unsigned long,BOOL>((uint64_t **)buf, v5 + a4, v24[5] - v41, 0);
    if (v24 != v8)
    {
      v48 = a4 - v4;
      do
      {
        v49 = v24[4];
        v50 = operator new(0x38uLL);
        v51 = v24[5];
        v52 = *((_BYTE *)v24 + 48);
        v50[4] = v48 + v49;
        v50[5] = v51;
        *((_BYTE *)v50 + 48) = v52;
        v53 = std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(buf, &buf[8], &v71, &v70, v48 + v49, v51);
        if (*v53)
        {
          operator delete(v50);
        }
        else
        {
          v54 = v71;
          *v50 = 0;
          v50[1] = 0;
          v50[2] = v54;
          *v53 = v50;
          if (**(_QWORD **)buf)
          {
            *(_QWORD *)buf = **(_QWORD **)buf;
            v50 = (_QWORD *)*v53;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v50);
          ++*(_QWORD *)&buf[16];
        }
        v55 = (_QWORD *)v24[1];
        if (v55)
        {
          do
          {
            v56 = v55;
            v55 = (_QWORD *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (_QWORD *)v24[2];
            v11 = *v56 == (_QWORD)v24;
            v24 = v56;
          }
          while (!v11);
        }
        v24 = v56;
      }
      while (v56 != v8);
    }
    if (v22 != v8)
    {
      do
      {
        v57 = (_QWORD *)v22[1];
        v58 = v22;
        if (v57)
        {
          do
          {
            v59 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v59 = (_QWORD *)v58[2];
            v11 = *v59 == (_QWORD)v58;
            v58 = v59;
          }
          while (!v11);
        }
        if (*(_QWORD **)this == v22)
          *(_QWORD *)this = v59;
        v60 = (uint64_t *)*((_QWORD *)this + 1);
        --*((_QWORD *)this + 2);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v60, v22);
        operator delete(v22);
        v22 = v59;
      }
      while (v59 != v8);
    }
    v61 = *(_QWORD **)buf;
    if (*(_BYTE **)buf != &buf[8])
    {
      do
      {
        v62 = (uint64_t **)std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(this, v8, &v71, &v70, v61[4], v61[5]);
        if (!*v62)
        {
          v63 = v62;
          v64 = operator new(0x38uLL);
          v65 = *((_OWORD *)v61 + 2);
          v64[6] = v61[6];
          *((_OWORD *)v64 + 2) = v65;
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)this, v71, v63, v64);
        }
        v66 = (_QWORD *)v61[1];
        if (v66)
        {
          do
          {
            v67 = v66;
            v66 = (_QWORD *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            v67 = (_BYTE *)v61[2];
            v11 = *(_QWORD *)v67 == (_QWORD)v61;
            v61 = v67;
          }
          while (!v11);
        }
        v61 = v67;
      }
      while (v67 != &buf[8]);
    }
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(_QWORD **)&buf[8]);
  }
}

void sub_1DE97F138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;

  if (a1 + 1 == a2)
    goto LABEL_6;
  v6 = a2[4];
  if (v6 > a5)
    goto LABEL_6;
  if (v6 != a5)
  {
    v14 = v6 >= a5;
    goto LABEL_20;
  }
  v7 = a2[5];
  v14 = v7 >= a6;
  if (v7 > a6)
  {
LABEL_6:
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
    }
    else
    {
      if (v8)
      {
        v9 = (_QWORD *)*a2;
        do
        {
          v10 = v9;
          v9 = (_QWORD *)v9[1];
        }
        while (v9);
      }
      else
      {
        v11 = a2;
        do
        {
          v10 = (_QWORD *)v11[2];
          v12 = *v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (v12);
      }
      v13 = v10[4];
      if (v13 >= a5 && (v13 != a5 || v10[5] >= a6))
        return std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)a1, a3, a5, a6);
    }
    if (v8)
    {
      *a3 = v10;
      return v10 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
LABEL_20:
  if (!v14)
  {
    v15 = a2[1];
    if (v15)
    {
      v16 = (_QWORD *)a2[1];
      do
      {
        a4 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (_QWORD *)v17[2];
        v12 = *a4 == (_QWORD)v17;
        v17 = a4;
      }
      while (!v12);
    }
    if (a4 == a1 + 1 || (v18 = a4[4], v18 > a5) || v18 == a5 && a4[5] > a6)
    {
      if (v15)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)a1, a3, a5, a6);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

unint64_t TrackSubstitutions::lower_bound(TrackSubstitutions *this, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  const uint8_t *v11;
  int v12;
  unint64_t result;
  unint64_t v14;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_28;
  do
  {
    v4 = v3[4];
    v5 = v4 > a2;
    if (v4 <= a2)
      v6 = v3 + 1;
    else
      v6 = v3;
    if (v5)
      v2 = v3;
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  v7 = *v2;
  if (*v2)
  {
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
LABEL_28:
    do
    {
      v8 = v2[2];
      v9 = *(_QWORD *)v8 == (_QWORD)v2;
      v2 = (uint64_t *)v8;
    }
    while (v9);
  }
  if (*(_BYTE *)(v8 + 48))
    v10 = *(_QWORD *)(v8 + 40);
  else
    v10 = *(_QWORD *)(v8 + 40) + a2 - *(_QWORD *)(v8 + 32);
  v11 = (const uint8_t *)this + 24;
  v12 = *((char *)this + 47);
  if ((v12 & 0x80000000) == 0)
  {
    result = *((unsigned __int8 *)this + 47);
    if (v10 >= v12)
      return result;
    LODWORD(result) = v10;
    if ((char)v11[v10] >= -64)
      return (int)result;
LABEL_18:
    LODWORD(result) = utf8_back1SafeBody(v11, 0, v10);
    return (int)result;
  }
  v14 = *((_QWORD *)this + 4);
  if (v14 >= v10)
    result = v10;
  else
    result = *((_QWORD *)this + 4);
  if (v14 > v10)
  {
    v11 = *(const uint8_t **)v11;
    LODWORD(v10) = result;
    if ((char)v11[(int)result] > -65)
      return (int)result;
    goto LABEL_18;
  }
  return result;
}

unint64_t TrackSubstitutions::upper_bound(TrackSubstitutions *this, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int32_t v13;
  const uint8_t **v14;
  int v15;
  const uint8_t *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_15;
  v4 = (_QWORD *)((char *)this + 8);
  do
  {
    v5 = v3[4];
    if (v5 <= a2)
    {
      if (v5 == a2)
      {
        if (v3[5])
          v4 = v3;
        else
          ++v3;
      }
      else
      {
        ++v3;
      }
    }
    else
    {
      v4 = v3;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if (v4 == (_QWORD *)((char *)this + 8))
  {
LABEL_15:
    if (*((char *)this + 47) < 0)
      return *((_QWORD *)this + 4);
    else
      return *((unsigned __int8 *)this + 47);
  }
  else
  {
    v6 = *v4;
    if (*v4)
    {
      do
      {
        v7 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      v9 = v4;
      do
      {
        v7 = v9[2];
        v19 = *(_QWORD *)v7 == (_QWORD)v9;
        v9 = (_QWORD *)v7;
      }
      while (v19);
    }
    if (*(_BYTE *)(v7 + 48))
      v10 = v4[5];
    else
      v10 = *(_QWORD *)(v7 + 40) + a2 - *(_QWORD *)(v7 + 32);
    v11 = *((char *)this + 47);
    if (v11 < 0)
    {
      v12 = *((_QWORD *)this + 4);
      if (v12 >= v10)
        result = v10;
      else
        result = *((_QWORD *)this + 4);
    }
    else
    {
      v12 = *((unsigned __int8 *)this + 47);
      if (v10 >= v12)
        result = *((unsigned __int8 *)this + 47);
      else
        result = v10;
    }
    if (result != v12)
    {
      v13 = result - 1;
      if ((int)result < 1)
        return (int)result;
      v14 = (const uint8_t **)((char *)this + 24);
      if (v11 < 0)
      {
        v17 = *((_QWORD *)this + 4);
        if ((int)result >= (int)v17 && (v17 & 0x80000000) == 0)
          return (int)result;
        v16 = *v14;
        if ((char)(*v14)[v13] > -65)
          goto LABEL_47;
      }
      else
      {
        v15 = v11;
        if (result >= v11)
          return (int)result;
        v16 = (const uint8_t *)this + 24;
        if (*((char *)v14 + v13) >= -64)
          goto LABEL_41;
      }
      v13 = utf8_back1SafeBody(v16, 0, v13);
      v11 = *((char *)this + 47);
      if ((v11 & 0x80000000) == 0)
      {
        v15 = *((unsigned __int8 *)this + 47);
LABEL_41:
        LODWORD(result) = v13 + 1;
        v18 = *((unsigned __int8 *)v14 + v13);
        v19 = (v18 + 11) < 0xCDu || (_DWORD)result == v15;
        if (v19)
          return (int)result;
        v20 = 0;
        v16 = (const uint8_t *)this + 24;
        goto LABEL_50;
      }
      v16 = *v14;
LABEL_47:
      LODWORD(result) = v13 + 1;
      v18 = v16[v13];
      if ((v18 + 62) >= 0x33u || (_DWORD)result == *((_DWORD *)this + 8))
        return (int)result;
      v20 = 1;
LABEL_50:
      v21 = v16[(int)result];
      if ((v18 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v18 & 0xF] >> (v21 >> 5)) & 1) != 0)
        {
          result = v13 + 2;
          if (v20)
          {
            if ((_DWORD)result != *((_DWORD *)this + 8))
            {
              v14 = (const uint8_t **)*v14;
              goto LABEL_67;
            }
          }
          else if ((_DWORD)result != v11)
          {
LABEL_67:
            if (*((char *)v14 + result) < -64)
              LODWORD(result) = v13 + 3;
          }
        }
      }
      else
      {
        if (v18 <= 0xDF)
        {
          if ((char)v21 < -64)
            LODWORD(result) = v13 + 2;
          return (int)result;
        }
        if (((byte_1DED166DF[v21 >> 4] >> (v18 & 7)) & 1) != 0)
        {
          v22 = v13 + 2;
          LODWORD(result) = v13 + 2;
          if (v20)
          {
            v23 = *((_DWORD *)this + 8);
            if ((_DWORD)result == v23)
              return (int)result;
            v14 = (const uint8_t **)*v14;
            if (*((char *)v14 + v22) > -65)
              return (int)result;
            v24 = v13 + 3;
            LODWORD(result) = v13 + 3;
            if (v13 + 3 == v23)
              return (int)result;
          }
          else
          {
            if ((_DWORD)result == v11)
              return (int)result;
            if (*((char *)v14 + v22) >= -64)
              return (int)result;
            LODWORD(result) = v11;
            v24 = v13 + 3;
            if (v13 + 3 == v11)
              return (int)result;
          }
          if (*((char *)v14 + v24) >= -64)
            LODWORD(result) = v24;
          else
            LODWORD(result) = v13 + 4;
        }
      }
      return (int)result;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<TrackSubstitutions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TrackSubstitutions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TrackSubstitutions>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void TokenizeImpl::~TokenizeImpl(void **this)
{
  char *v2;

  *this = &off_1EA91CFD8;
  v2 = (char *)(this + 13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 22));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  FrontendModule::~FrontendModule(this);
}

{
  char *v2;

  *this = &off_1EA91CFD8;
  v2 = (char *)(this + 13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 22));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t TokenizeImpl::clear(TokenizeImpl *this)
{
  uint64_t result;

  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *((_BYTE *)this + 136) = 0;
  return result;
}

void TokenizeImpl::generate_tokens(TokenizeImpl *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *exception;
  _QWORD *v30;
  __int128 v31;
  std::string::value_type v32;
  __int128 v33;
  uint64_t v34;
  std::string v35;
  __int128 __p;
  uint64_t v37;

  if (!*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 9);
    v3 = (uint64_t *)((char *)this + 104);
    v4 = (_QWORD *)((char *)this + 32);
    v30 = (_QWORD *)((char *)this + 120);
    do
    {
      if (*((_QWORD *)this + 9) != v2)
        break;
      TokenizerEngine::next_token((TokenizerEngine *)&v35, *((_QWORD *)this + 22), 0);
      v5 = HIBYTE(v37);
      if (v37 < 0)
        v5 = *((_QWORD *)&__p + 1);
      if (v5)
      {
        TokenizeImpl::write_output_token((uint64_t)this, &v35);
      }
      else
      {
        v6 = *((_QWORD *)this + 22);
        *((_QWORD *)this + 21) = *((_QWORD *)this + 18) - (*(_DWORD *)(v6 + 56) + *(_DWORD *)(v6 + 60));
        if (!*((_BYTE *)this + 136))
        {
          TokenizerEngine::next_token((TokenizerEngine *)&v31, v6, 1);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v31;
          v35.__r_.__value_.__s.__data_[16] = v32;
          if (SHIBYTE(v37) < 0)
            operator delete((void *)__p);
          v37 = v34;
          __p = v33;
          v7 = HIBYTE(v34);
          if (v34 < 0)
            v7 = *((_QWORD *)&__p + 1);
          if (v7)
            TokenizeImpl::write_output_token((uint64_t)this, &v35);
          else
            *((_QWORD *)this + 21) = 0;
        }
        while (1)
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v31, *((_QWORD *)this + 2), 0);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v3, &v31);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          if (!*v3)
          {
            *((_BYTE *)this + 8) = 1;
            goto LABEL_48;
          }
          (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
          v11 = *v3;
          if ((_QWORD *)(v11 + 8) == v12)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            StringFormatter::StringFormatter((StringFormatter *)&v31, "Token missing TokenBasicItem");
            MEMORY[0x1DF0EC99C](exception, &v31);
            __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          v13 = v12[5];
          if (*(_DWORD *)(v13 + 8) == 1952807028)
            break;
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v4, (__int128 *)v3);
        }
        v14 = (uint64_t *)*((_QWORD *)this + 22);
        if (*(char *)(v13 + 55) >= 0)
          v15 = v13 + 32;
        else
          v15 = *(_QWORD *)(v13 + 32);
        MEMORY[0x1DF0ECA80](*((_QWORD *)this + 22), v15);
        v16 = *((char *)v14 + 23);
        v17 = v16 < 0;
        v18 = (uint64_t *)*v14;
        if (v16 >= 0)
          v18 = v14;
        v19 = *((unsigned __int8 *)v14 + 23);
        if (v17)
          v19 = v14[1];
        v14[3] = (uint64_t)v18;
        v14[4] = v19 << 32;
        v14[5] = (uint64_t)v18;
        v14[6] = v19 | ((unint64_t)v19 << 32);
        if (*((_BYTE *)this + 136))
        {
          v20 = *((_QWORD *)this + 18);
        }
        else
        {
          v20 = 0;
          v21 = *(_QWORD *)(v13 + 16);
          *((_QWORD *)this + 18) = 0;
          *((_QWORD *)this + 19) = v21;
          *((_BYTE *)this + 137) = 1;
          *(_DWORD *)(*((_QWORD *)this + 22) + 60) = 0;
        }
        *((_QWORD *)this + 18) = v20 + *(_QWORD *)(v13 + 24);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v30, *(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64));
        *((_QWORD *)this + 20) = *(_QWORD *)(v13 + 24) + *(_QWORD *)(v13 + 16);
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v31, *((_QWORD *)this + 2), 0);
        v22 = v31;
        v25 = (_QWORD)v31
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        if (*((_QWORD *)&v31 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *((_BYTE *)this + 136) = v25;
      }
LABEL_48:
      if (SHIBYTE(v37) < 0)
        operator delete((void *)__p);
    }
    while (!*((_BYTE *)this + 8));
  }
}

void sub_1DE97FB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TokenizeImpl::write_output_token(uint64_t a1, const std::string *a2)
{
  std::string::size_type size;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  BOOL v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string::size_type v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  std::string::size_type v24;
  void *__p[2];
  __int128 v26;
  std::__shared_weak_count *v27;

  v27 = 0;
  v26 = 0u;
  *(_OWORD *)__p = 0u;
  if (a2->__r_.__value_.__s.__data_[16])
  {
    LODWORD(v23) = 1651664235;
    size = a2->__r_.__value_.__l.__size_;
    *((_QWORD *)&v23 + 1) = *(_QWORD *)(a1 + 152);
    v24 = size;
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v26 + 1, *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    v22 = COERCE_UNSIGNED_INT(nanf(&byte_1DEBD87CE)) | 0x100000000;
    v5 = (std::__shared_weak_count *)operator new(0x30uLL);
    *(_OWORD *)&v5->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *(_OWORD *)&v5[1].__shared_owners_ = 0u;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)&v5[1].__shared_owners_;
    *(_QWORD *)&v21 = v5 + 1;
    *((_QWORD *)&v21 + 1) = v5;
    Agglomerate::set<TokenBasicItem>((uint64_t)&v5[1], &v23);
    FrontendModule::set_item<TokenBreakItem>((uint64_t)&v5[1], &v22);
    std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 32), &v21);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  LODWORD(v23) = 1952807028;
  std::string::operator=((std::string *)__p, a2 + 1);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = a2->__r_.__value_.__l.__size_ + *(_QWORD *)(a1 + 152);
  if (v8 < v9)
    v9 = *(_QWORD *)(a1 + 160);
  v10 = v8 - v9;
  if (v10 >= *(_QWORD *)(a1 + 168) + a2->__r_.__value_.__r.__words[0])
    v10 = *(_QWORD *)(a1 + 168) + a2->__r_.__value_.__r.__words[0];
  *((_QWORD *)&v23 + 1) = v9;
  v24 = v10;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v26 + 1, *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  if (a2->__r_.__value_.__l.__size_)
    v11 = 0;
  else
    v11 = *(_BYTE *)(a1 + 137) == 0;
  LOBYTE(v22) = v11;
  *(_BYTE *)(a1 + 137) = 0;
  v12 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v12->__shared_owners_ = 0u;
  v13 = (unint64_t *)&v12->__shared_owners_;
  *(_OWORD *)&v12[1].__shared_owners_ = 0u;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&v12[1].__shared_owners_;
  *(_QWORD *)&v21 = v12 + 1;
  *((_QWORD *)&v21 + 1) = v12;
  Agglomerate::set<TokenBasicItem>((uint64_t)&v12[1], &v23);
  FrontendModule::set_item<TokenTokenizerItem>((uint64_t)&v12[1], &v22);
  std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 32), &v21);
  v14 = v24 + a2->__r_.__value_.__l.__size_;
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 152) + v14;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 144) = v15 - v14;
  *(_QWORD *)(a1 + 152) = v16;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 - 1, v13));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
}

void sub_1DE97FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  TokenBasicItem::~TokenBasicItem((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *FrontendModule::set_item<TokenBreakItem>(uint64_t a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void **v9;

  v9 = &v8;
  v4 = result[5];
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = *a2;
  }
  else
  {
    v5 = result;
    v6 = (_QWORD *)operator new();
    v7 = *a2;
    *v6 = &off_1EA922D88;
    v6[1] = v7;
    result = (uint64_t *)v5[5];
    v5[5] = (uint64_t)v6;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t *FrontendModule::set_item<TokenTokenizerItem>(uint64_t a1, _BYTE *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  void **v8;

  v8 = &v7;
  v4 = result[5];
  if (v4)
  {
    *(_BYTE *)(v4 + 8) = *a2;
  }
  else
  {
    v5 = result;
    v6 = operator new();
    *(_QWORD *)v6 = &off_1EA923028;
    *(_BYTE *)(v6 + 8) = *a2;
    result = (uint64_t *)v5[5];
    v5[5] = v6;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

void Agglomerate::ItemHolder<TokenTokenizerItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<TokenBreakItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TokenizeImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9324A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TokenizeImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9324A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TokenizeImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<TokenizerEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TokenizerEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TokenizerEngine>::__on_zero_shared(uint64_t a1)
{
  UTFTransliterator::~UTFTransliterator((UTFTransliterator *)(a1 + 128));
  UTFTransliterator::~UTFTransliterator((UTFTransliterator *)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void TokenizePersistentModule::~TokenizePersistentModule(void **this)
{
  *this = &off_1EA920C68;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA920C68;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

std::string *FeatureExtractorOriginalText::set_original_text(std::string *this, std::string::value_type *a2, std::string::size_type a3, int a4)
{
  std::string::value_type *v4;
  std::string *v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  unint64_t v10;
  _DWORD *v11;
  std::string::size_type v12;
  std::string::pointer data;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unsigned int v21;
  std::string::value_type v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  std::string::size_type v27;
  unint64_t v28;
  _DWORD *v29;
  std::string::size_type v30;
  std::string::pointer v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  std::string::size_type v39;
  unint64_t v40;
  _DWORD *v41;
  std::string::size_type v42;
  std::string::pointer v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::string::size_type v50;
  int v51;
  NSObject *v52;
  std::string *p_p;
  const char *v54;
  std::string *v55;
  GryphonAnalysis *v56;
  std::string *result;
  std::string *v58;
  std::string v59;
  std::string __p;
  uint8_t buf[4];
  std::string *v62;
  uint64_t v63;

  v4 = a2;
  v63 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v6 = this + 1;
  this[1].__r_.__value_.__l.__size_ = this[1].__r_.__value_.__r.__words[0];
  if (!a4)
  {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(this, a2, &a2[a3], a3);
    goto LABEL_83;
  }
  v7 = a3 >> 1;
  if (!(a3 >> 1))
    goto LABEL_62;
  v8 = 0;
  do
  {
    if ((v8 & 0xF) == 0)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        size = this->__r_.__value_.__l.__size_;
      else
        LODWORD(size) = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v11 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      v10 = this[1].__r_.__value_.__r.__words[2];
      if ((unint64_t)v11 >= v10)
      {
        data = (std::string::pointer)v6->__r_.__value_.__r.__words[0];
        v14 = (uint64_t)((uint64_t)v11 - v6->__r_.__value_.__r.__words[0]) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          goto LABEL_103;
        v16 = v10 - (_QWORD)data;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v17);
          data = this[1].__r_.__value_.__l.__data_;
          v11 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = size;
        v12 = (std::string::size_type)(v19 + 4);
        while (v11 != (_DWORD *)data)
        {
          v20 = *--v11;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        this[1].__r_.__value_.__l.__size_ = v12;
        this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v18[4 * v17];
        if (data)
          operator delete(data);
      }
      else
      {
        *v11 = size;
        v12 = (std::string::size_type)(v11 + 1);
      }
      this[1].__r_.__value_.__l.__size_ = v12;
    }
    v21 = *(unsigned __int16 *)v4;
    if (v21 <= 0x7F)
    {
      v22 = *(_WORD *)v4;
LABEL_40:
      std::string::push_back(this, v22);
      goto LABEL_41;
    }
    if (v21 <= 0x7FF)
    {
      v23 = (v21 >> 6) | 0xFFFFFFC0;
LABEL_39:
      std::string::push_back(this, v23);
      v22 = *v4 & 0x3F | 0x80;
      goto LABEL_40;
    }
    if (v7 < 2 || (v21 & 0xFC00) != 0xD800 || (v24 = *((unsigned __int16 *)v4 + 1), v24 >> 10 != 55))
    {
      std::string::push_back(this, (v21 >> 12) | 0xE0);
      v23 = (*(unsigned __int16 *)v4 >> 6) & 0x3F | 0xFFFFFF80;
      goto LABEL_39;
    }
    v4 += 2;
    v25 = (v21 << 10) - 56623104;
    v26 = (v24 + 9216) | v25;
    std::string::push_back(this, (v25 >> 18) | 0xF0);
    std::string::push_back(this, (v26 >> 12) & 0x3F | 0x80);
    std::string::push_back(this, (v26 >> 6) & 0x3F | 0x80);
    std::string::push_back(this, v24 & 0x3F | 0x80);
    ++v8;
    LODWORD(v7) = v7 - 1;
    if ((v8 & 0xF) == 0)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v27 = this->__r_.__value_.__l.__size_;
      else
        LODWORD(v27) = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v29 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      v28 = this[1].__r_.__value_.__r.__words[2];
      if ((unint64_t)v29 >= v28)
      {
        v31 = (std::string::pointer)v6->__r_.__value_.__r.__words[0];
        v32 = (uint64_t)((uint64_t)v29 - v6->__r_.__value_.__r.__words[0]) >> 2;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62)
          goto LABEL_103;
        v34 = v28 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v35);
          v31 = this[1].__r_.__value_.__l.__data_;
          v29 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[4 * v32];
        *(_DWORD *)v37 = v27;
        v30 = (std::string::size_type)(v37 + 4);
        while (v29 != (_DWORD *)v31)
        {
          v38 = *--v29;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        this[1].__r_.__value_.__l.__size_ = v30;
        this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v36[4 * v35];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v29 = v27;
        v30 = (std::string::size_type)(v29 + 1);
      }
      this[1].__r_.__value_.__l.__size_ = v30;
    }
LABEL_41:
    ++v8;
    v4 += 2;
    LODWORD(v7) = v7 - 1;
  }
  while ((_DWORD)v7);
  if ((v8 & 0xF) == 0)
  {
LABEL_62:
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      v39 = this->__r_.__value_.__l.__size_;
    else
      LODWORD(v39) = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v40 = this[1].__r_.__value_.__r.__words[2];
    v41 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
    if ((unint64_t)v41 >= v40)
    {
      v43 = (std::string::pointer)v6->__r_.__value_.__r.__words[0];
      v44 = (uint64_t)((uint64_t)v41 - v6->__r_.__value_.__r.__words[0]) >> 2;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62)
LABEL_103:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v46 = v40 - (_QWORD)v43;
      if (v46 >> 1 > v45)
        v45 = v46 >> 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v47);
        v43 = this[1].__r_.__value_.__l.__data_;
        v41 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[4 * v44];
      v50 = (std::string::size_type)&v48[4 * v47];
      *(_DWORD *)v49 = v39;
      v42 = (std::string::size_type)(v49 + 4);
      while (v41 != (_DWORD *)v43)
      {
        v51 = *--v41;
        *((_DWORD *)v49 - 1) = v51;
        v49 -= 4;
      }
      this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      this[1].__r_.__value_.__l.__size_ = v42;
      this[1].__r_.__value_.__r.__words[2] = v50;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *v41 = v39;
      v42 = (std::string::size_type)(v41 + 1);
    }
    this[1].__r_.__value_.__l.__size_ = v42;
  }
LABEL_83:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    escaped_text(&v59, (uint64_t)this);
    Censor::global_plaintext(&__p, (uint64_t)&v59);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v62 = p_p;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  escaped_text(&v59, (uint64_t)this);
  Censor::global_plaintext(&__p, (uint64_t)&v59);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &__p;
  else
    v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  result = (std::string *)GryphonAnalysis::Storage(v56);
  if (result->__r_.__value_.__s.__data_[0])
  {
    v58 = (std::string *)GryphonAnalysis::Storage((GryphonAnalysis *)result);
    return std::string::operator=(v58 + 2, this);
  }
  return result;
}

void sub_1DE980698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void escaped_text(std::string *this, uint64_t a2)
{
  int v2;
  _BYTE *v3;
  uint64_t v4;
  int v6;
  const std::string::value_type *v7;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v2 = *(char *)(a2 + 23);
  if (v2 >= 0)
    v3 = (_BYTE *)a2;
  else
    v3 = *(_BYTE **)a2;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    while (2)
    {
      v6 = (char)*v3;
      v7 = "\\n";
      switch(*v3)
      {
        case 9:
          v7 = "\\t";
          goto LABEL_17;
        case 0xA:
          goto LABEL_17;
        case 0xB:
          v7 = "\\v";
          goto LABEL_17;
        case 0xC:
          goto LABEL_13;
        case 0xD:
          v7 = "\\r";
          goto LABEL_17;
        default:
          if (v6 == 27)
          {
            v7 = "\\e";
          }
          else
          {
            if (v6 != 92)
            {
LABEL_13:
              std::string::push_back(this, v6);
              goto LABEL_18;
            }
            v7 = "\\\\";
          }
LABEL_17:
          std::string::append(this, v7);
LABEL_18:
          ++v3;
          if (!--v4)
            return;
          continue;
      }
    }
  }
}

void sub_1DE9807D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *FeatureExtractorOriginalText::set_normalized_text(std::string *this, std::string::value_type *a2, uint64_t a3)
{
  const std::string *v3;
  NSObject *v4;
  std::string *p_p;
  const char *v6;
  std::string *v7;
  GryphonAnalysis *v8;
  std::string *result;
  std::string *v10;
  std::string v11;
  std::string __p;
  uint8_t buf[4];
  std::string *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = this + 2;
  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(this + 2, a2, &a2[a3 - 1], a3 - 1);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    escaped_text(&v11, (uint64_t)v3);
    Censor::global_plaintext(&__p, (uint64_t)&v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v14 = p_p;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  escaped_text(&v11, (uint64_t)v3);
  Censor::global_plaintext(&__p, (uint64_t)&v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  result = (std::string *)GryphonAnalysis::Storage(v8);
  if (result->__r_.__value_.__s.__data_[0])
  {
    v10 = (std::string *)GryphonAnalysis::Storage((GryphonAnalysis *)result);
    return std::string::operator=(v10 + 3, v3);
  }
  return result;
}

void sub_1DE98099C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_Gryphon_SetOriginalText(uint64_t a1, uint64_t a2, std::string::value_type *a3, std::string::size_type a4, int a5)
{
  std::string *result;

  result = (std::string *)FeatureExtractorTarget::retrieve();
  if (result)
    return FeatureExtractorOriginalText::set_original_text(result, a3, a4, a5);
  return result;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<int>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<int>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<int>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<FeatureBook>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureBook>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FeatureBook>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(*(_QWORD **)(a1 + 56));
  v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t FeatureBook::get_feature_encoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  NSObject *v19;
  const char *v20;
  const void *v21;
  const void *v22;
  const char *v23;
  const void *v24;
  const void *v25;
  _QWORD *v26;
  void *exception;
  const char *v28;
  const char *v29;
  _BYTE __p[12];
  __int16 v31;
  const void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)std::map<std::string,std::string>::at(a1 + 24, (const void **)a2);
  v6 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v5, (const void **)a3);
  v7 = v6;
  if (v5 + 1 != (uint64_t *)v6)
    return v7 + 56;
  v8 = v6;
  v9 = "null";
  std::string::basic_string[abi:ne180100]<0>(__p, "null");
  v7 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v5, (const void **)__p);
  if (SHIBYTE(v33) < 0)
    operator delete(*(void **)__p);
  if (v8 != v7)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      goto LABEL_29;
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const void *)a2;
    else
      v12 = *(const void **)a2;
    if (*(char *)(a3 + 23) >= 0)
      v13 = (const void *)a3;
    else
      v13 = *(const void **)a3;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v12;
    v31 = 2080;
    v32 = v13;
    v33 = 2080;
    v34 = "null";
LABEL_28:
    _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_DEBUG, "FeatureBook: Feature %s [%s] fallback to: %s", __p, 0x20u);
LABEL_29:
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    if (*(char *)(a3 + 23) >= 0)
      v17 = (const void *)a3;
    else
      v17 = *(const void **)a3;
    Diagnostics::log(7, "FeatureBook: Feature %s [%s] fallback to: %s", v11, v16, v17, v9);
    return v7 + 56;
  }
  v9 = "0";
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  v7 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v5, (const void **)__p);
  if (SHIBYTE(v33) < 0)
    operator delete(*(void **)__p);
  if (v8 != v7)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      goto LABEL_29;
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    if (*(char *)(a3 + 23) >= 0)
      v15 = (const void *)a3;
    else
      v15 = *(const void **)a3;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v31 = 2080;
    v32 = v15;
    v33 = 2080;
    v34 = "0";
    goto LABEL_28;
  }
  if (!v5[2])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v28 = (const char *)a2;
    else
      v28 = *(const char **)a2;
    if (*(char *)(a3 + 23) >= 0)
      v29 = (const char *)a3;
    else
      v29 = *(const char **)a3;
    StringFormatter::StringFormatter((StringFormatter *)__p, "FeatureBook: Feature %s lacks mapping for value %s", v28, v29);
    MEMORY[0x1DF0EC99C](exception, __p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v21 = (const void *)a2;
    else
      v21 = *(const void **)a2;
    if (*(char *)(a3 + 23) >= 0)
      v22 = (const void *)a3;
    else
      v22 = *(const void **)a3;
    v23 = (const char *)(*v5 + 32);
    if (*(char *)(*v5 + 55) < 0)
      v23 = *(const char **)v23;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v21;
    v31 = 2080;
    v32 = v22;
    v33 = 2080;
    v34 = v23;
    _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_DEBUG, "FeatureBook: Feature %s [%s] fallback to: %s", __p, 0x20u);
  }
  if (*(char *)(a2 + 23) >= 0)
    v24 = (const void *)a2;
  else
    v24 = *(const void **)a2;
  if (*(char *)(a3 + 23) >= 0)
    v25 = (const void *)a3;
  else
    v25 = *(const void **)a3;
  v26 = (_QWORD *)(*v5 + 32);
  if (*(char *)(*v5 + 55) < 0)
    v26 = (_QWORD *)*v26;
  Diagnostics::log(7, "FeatureBook: Feature %s [%s] fallback to: %s", v20, v24, v25, v26);
  v7 = *v5;
  return v7 + 56;
}

void sub_1DE981074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  int v18;
  void *v19;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void MilWaveRNNFusedSubscaleInference::inference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  _DWORD *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  unint64_t i;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  void *v26;
  int v27;
  void **v28;
  const char *v29;
  void **v30;
  void *exception;
  int v32;
  void **v33;
  const char *status_string;
  void **v35;
  void *__dst;
  uint64_t v38;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  void *__p[2];
  char v46;
  void *v47[3];
  void *v48;
  _BYTE *v49;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v6 = (v4 - v5) / 24;
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 56))
  {
    v8 = roundf((float)((float)v7 / **(float **)(*(_QWORD *)a2 + 80)) * 0.5);
    v7 = (unint64_t)(float)(v8 + v8);
  }
  std::vector<float>::vector(v47, v7 * v6);
  __dst = *(void **)(a1 + 272);
  v9 = *(_DWORD **)(a1 + 608);
  v10 = *(void **)(a1 + 776);
  v11 = *(const void **)(a1 + 1280);
  BNNSSetNetwork();
  if (v4 != v5)
  {
    v12 = 0;
    v13 = 0;
    if (v6 <= 1)
      v14 = 1;
    else
      v14 = v6;
    v38 = v14;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8) + 24 * v13;
      v16 = *(_BYTE **)v15;
      v17 = *(_BYTE **)(v15 + 8);
      if (v17 != v16)
        memmove(__dst, v16, v17 - v16);
      v18 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute linear model.");
      if (v18)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        v32 = v46;
        v33 = (void **)__p[0];
        status_string = (const char *)espresso_get_status_string();
        v35 = __p;
        if (v32 < 0)
          v35 = v33;
        StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v35, v18, status_string);
        MEMORY[0x1DF0EC99C](exception, &v48);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (v46 < 0)
      {
        operator delete(__p[0]);
        if (v7)
        {
LABEL_15:
          for (i = 0; i < v7; i += 2)
          {
            v20 = espresso_plan_execute_sync();
            std::string::basic_string[abi:ne180100]<0>(v43, "Unable to execute gru model.");
            if (v20)
            {
              v26 = __cxa_allocate_exception(0x10uLL);
              v27 = v44;
              v28 = (void **)v43[0];
              v29 = (const char *)espresso_get_status_string();
              v30 = v43;
              if (v27 < 0)
                v30 = v28;
              StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v30, v20, v29);
              MEMORY[0x1DF0EC99C](v26, &v48);
              __cxa_throw(v26, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
            }
            if (v44 < 0)
              operator delete(v43[0]);
            v21 = **(_DWORD **)(a1 + 944);
            v22 = **(_DWORD **)(a1 + 1112);
            *v9 = v22;
            v23 = *(_QWORD *)(a1 + 1360);
            if (v23)
              memmove(v10, v11, 4 * v23);
            v24 = (char *)v47[0] + 4 * i + v12;
            *v24 = v21;
            v24[1] = v22;
          }
        }
      }
      else if (v7)
      {
        goto LABEL_15;
      }
      ++v13;
      v12 += 4 * v7;
    }
    while (v13 != v38);
  }
  BNNSClearNetwork();
  MilWaveRNNInference::signal_postprocessing(&v48, (float **)v47, (float *)(a1 + 1448));
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v40, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 1);
  v25 = *(_QWORD *)(a3 + 24);
  if (!v25)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, &v40);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
}

void sub_1DE981408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MilWaveRNNFusedSubscaleInference::reset(MilWaveRNNFusedSubscaleInference *this)
{
  NSObject *v2;
  const char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_INFO, "MilWaveRNNFusedSubscaleInference reset.", v7, 2u);
  }
  Diagnostics::log(6, "MilWaveRNNFusedSubscaleInference reset.", v3);
  v4 = (void *)*((_QWORD *)this + 97);
  v5 = *((_QWORD *)this + 86);
  if (v5 >= 1)
    bzero(*((void **)this + 76), 4 * (v5 - ((v5 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  v6 = *((_QWORD *)this + 107);
  if (v6 >= 1)
    bzero(v4, 4 * (v6 - ((v6 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  *((_DWORD *)this + 362) = 0;
}

_QWORD *MilWaveRNNInference::signal_postprocessing(_QWORD *a1, float **a2, float *a3)
{
  _QWORD *result;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  _WORD *v10;
  float v11;
  float v12;

  MilWaveRNNInference::mulaw_decode((uint64_t)a2);
  result = std::vector<short>::vector(a1, a2[1] - *a2);
  v7 = *a2;
  v8 = (char *)a2[1] - (char *)*a2;
  if (v8)
  {
    v9 = v8 >> 2;
    v10 = (_WORD *)*a1;
    if (v9 <= 1)
      v9 = 1;
    v11 = *a3;
    do
    {
      v12 = *v7++;
      v11 = v12 + (float)(v11 * 0.86);
      if (v11 < -1.0)
        v11 = -1.0;
      if (v11 > 1.0)
        v11 = 1.0;
      *v10++ = (int)(float)(v11 * 32767.0);
      *a3 = v11;
      --v9;
    }
    while (v9);
  }
  return result;
}

_QWORD *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE9816E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilWaveRNNInference::mulaw_decode(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  const float **v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float __B;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  v2 = MEMORY[0x1E0C80A78](a1);
  v4 = (float *)((char *)&v8 - ((v3 + 15) & 0x7FFFFFFF0));
  v10 = 0.0039216;
  __B = 8.0;
  v9 = -1.0;
  v5 = (const float **)MEMORY[0x1E0C80A78](v2);
  v7 = (float *)((char *)&v8 - v6);
  vvfabsf((float *)((char *)&v8 - v6), *v5, &v12);
  vDSP_vsmul(v7, 1, &__B, v4, 1, v12);
  vvexp2f(v7, v4, &v12);
  vDSP_vsadd(v7, 1, &v9, v4, 1, v12);
  vDSP_vsmul(v4, 1, &v10, v7, 1, v12);
  vvcopysignf(*(float **)a1, v7, *(const float **)a1, &v12);
}

void Mil2BnnsWaveRNNFusedSubscaleInference::inference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  Mil2BnnsModel *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  void *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t i;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  float bnns;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  float v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  float *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v150;
  uint64_t v151;
  void *__p;
  void *v153;
  uint64_t v154;
  void *v155;
  std::__shared_weak_count *v156;
  _QWORD v157[2];
  void *v158;
  void *v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;

  v150 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v144 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(void **)v6;
  v8 = *(std::__shared_weak_count **)(v6 + 8);
  v158 = *(void **)v6;
  v159 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 87) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
  else
    v167 = *(std::string *)(a1 + 64);
  v155 = &v167;
  v148 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 152, (unsigned __int8 *)&v167, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(_QWORD *)(a1 + 288);
  v14 = *(void **)v13;
  v15 = *(std::__shared_weak_count **)(v13 + 8);
  v158 = *(void **)v13;
  v159 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(char *)(a1 + 111) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
  else
    v166 = *(std::string *)(a1 + 88);
  v155 = &v166;
  v147 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v14 + 152, (unsigned __int8 *)&v166, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v20 = *(_QWORD *)(a1 + 288);
  v21 = *(void **)(v20 + 16);
  v22 = *(std::__shared_weak_count **)(v20 + 24);
  v158 = v21;
  v159 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (*(char *)(a1 + 135) < 0)
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(a1 + 112), *(_QWORD *)(a1 + 120));
  else
    v165 = *(std::string *)(a1 + 112);
  v155 = &v165;
  v146 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21 + 152, (unsigned __int8 *)&v165, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v27 = *(_QWORD *)(a1 + 288);
  v28 = *(void **)(v27 + 16);
  v29 = *(std::__shared_weak_count **)(v27 + 24);
  v158 = v28;
  v159 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (*(char *)(a1 + 207) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a1 + 184), *(_QWORD *)(a1 + 192));
  else
    v164 = *(std::string *)(a1 + 184);
  v155 = &v164;
  v32 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v28 + 152, (unsigned __int8 *)&v164, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v35 = *(_QWORD *)(a1 + 288);
  v36 = *(void **)(v35 + 16);
  v37 = *(std::__shared_weak_count **)(v35 + 24);
  v158 = v36;
  v159 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (*(char *)(a1 + 231) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a1 + 208), *(_QWORD *)(a1 + 216));
  else
    v163 = *(std::string *)(a1 + 208);
  v155 = &v163;
  v40 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v36 + 152, (unsigned __int8 *)&v163, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (v37)
  {
    v41 = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v43 = *(_QWORD *)(a1 + 288);
  v44 = *(void **)(v43 + 16);
  v45 = *(std::__shared_weak_count **)(v43 + 24);
  v158 = v44;
  v159 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  if (*(char *)(a1 + 255) < 0)
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(a1 + 232), *(_QWORD *)(a1 + 240));
  else
    v162 = *(std::string *)(a1 + 232);
  v155 = &v162;
  v48 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v44 + 152, (unsigned __int8 *)&v162, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (v45)
  {
    v49 = (unint64_t *)&v45->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v51 = *(_QWORD *)(a1 + 288);
  v52 = *(void **)(v51 + 16);
  v53 = *(std::__shared_weak_count **)(v51 + 24);
  v158 = v52;
  v159 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (*(char *)(a1 + 183) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a1 + 160), *(_QWORD *)(a1 + 168));
  else
    v161 = *(std::string *)(a1 + 160);
  v155 = &v161;
  v56 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v52 + 152, (unsigned __int8 *)&v161, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (v53)
  {
    v57 = (unint64_t *)&v53->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v143 = a3;
  v59 = *(_QWORD *)(a1 + 288);
  v60 = *(void **)(v59 + 16);
  v61 = *(std::__shared_weak_count **)(v59 + 24);
  v158 = v60;
  v159 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  if (*(char *)(a1 + 159) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a1 + 136), *(_QWORD *)(a1 + 144));
  else
    v160 = *(std::string *)(a1 + 136);
  v155 = &v160;
  v64 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v60 + 152, (unsigned __int8 *)&v160, (uint64_t)&std::piecewise_construct, (__int128 **)&v155)+ 5);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (v61)
  {
    v65 = (unint64_t *)&v61->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v67 = (v150 - v144) / 24;
  if (*(_BYTE *)(a1 + 56))
  {
    v68 = roundf((float)((float)*(unint64_t *)(a1 + 48) / **(float **)(*(_QWORD *)a2 + 80)) * 0.5);
    v5 = (unint64_t)(float)(v68 + v68);
  }
  std::vector<float>::vector(&v158, v5 * v67);
  if (v150 != v144)
  {
    v69 = 0;
    if (v67 <= 1)
      v70 = 1;
    else
      v70 = (v150 - v144) / 24;
    v145 = v70;
    do
    {
      v71 = *(_QWORD *)(a1 + 288);
      v72 = *(void **)v71;
      v73 = *(std::__shared_weak_count **)(v71 + 8);
      v155 = *(void **)v71;
      v156 = v73;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      Mil2BnnsModel::set_bnns_input<unsigned long,float>((uint64_t)v72, v148, *(int **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 24 * v69), *(int *)(a1 + 280));
      if (v73)
      {
        v76 = (unint64_t *)&v73->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v78 = *(_QWORD *)(a1 + 288);
      v79 = *(Mil2BnnsModel **)v78;
      v80 = *(std::__shared_weak_count **)(v78 + 8);
      v155 = *(void **)v78;
      v156 = v80;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      Mil2BnnsModel::execute(v79);
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v85 = *(uint64_t **)(a1 + 288);
      v86 = (void *)v85[2];
      v87 = (unint64_t *)v85[3];
      v155 = v86;
      v156 = (std::__shared_weak_count *)v87;
      if (v87)
      {
        v88 = v87 + 1;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        v85 = *(uint64_t **)(a1 + 288);
      }
      v90 = *v85;
      v91 = (std::__shared_weak_count *)v85[1];
      v157[0] = *v85;
      v157[1] = v91;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      Mil2BnnsModel::set_bnns_input<unsigned long>((uint64_t)v86, v146, *(const void **)(*(_QWORD *)(v90 + 40) + 8 * v147), 3 * *(int *)(a1 + 284));
      if (v91)
      {
        v94 = (unint64_t *)&v91->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v96 = v156;
      if (v156)
      {
        v97 = (unint64_t *)&v156->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v151 = v69;
      if (v5)
      {
        for (i = 0; i < v5; i += 2)
        {
          v100 = *(_QWORD *)(a1 + 288);
          v101 = *(void **)(v100 + 16);
          v102 = *(std::__shared_weak_count **)(v100 + 24);
          v155 = v101;
          v156 = v102;
          if (v102)
          {
            v103 = (unint64_t *)&v102->__shared_owners_;
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
          }
          Mil2BnnsModel::execute((Mil2BnnsModel *)v101);
          if (v102)
          {
            v105 = (unint64_t *)&v102->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          v107 = *(_QWORD *)(a1 + 288);
          v108 = *(void **)(v107 + 16);
          v109 = *(std::__shared_weak_count **)(v107 + 24);
          v155 = v108;
          v156 = v109;
          if (v109)
          {
            v110 = (unint64_t *)&v109->__shared_owners_;
            do
              v111 = __ldxr(v110);
            while (__stxr(v111 + 1, v110));
          }
          bnns = Mil2BnnsModel::get_bnns_output<unsigned long>((uint64_t)v108, v32);
          if (v109)
          {
            v113 = (unint64_t *)&v109->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          LODWORD(v157[0]) = 0;
          v115 = *(_QWORD *)(a1 + 288);
          v116 = *(void **)(v115 + 16);
          v117 = *(std::__shared_weak_count **)(v115 + 24);
          v155 = v116;
          v156 = v117;
          if (v117)
          {
            v118 = (unint64_t *)&v117->__shared_owners_;
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          v120 = Mil2BnnsModel::get_bnns_output<unsigned long>((uint64_t)v116, v40);
          if (v117)
          {
            v121 = (unint64_t *)&v117->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          *(float *)v157 = v120;
          v123 = *(_QWORD *)(a1 + 288);
          v124 = *(void **)(v123 + 16);
          v125 = *(std::__shared_weak_count **)(v123 + 24);
          v155 = v124;
          v156 = v125;
          if (v125)
          {
            v126 = (unint64_t *)&v125->__shared_owners_;
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
          }
          Mil2BnnsModel::set_bnns_input<unsigned long,float>((uint64_t)v124, v64, (int *)v157, 1);
          if (v125)
          {
            v128 = (unint64_t *)&v125->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v130 = *(_QWORD *)(a1 + 288);
          v131 = *(_QWORD *)(v130 + 16);
          v132 = *(std::__shared_weak_count **)(v130 + 24);
          if (v132)
          {
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldxr(v133);
            while (__stxr(v134 + 1, v133));
          }
          v135 = *(_QWORD *)(v131 + 40);
          v136 = *(_QWORD *)(v135 + 8 * v48);
          *(_QWORD *)(v135 + 8 * v48) = *(_QWORD *)(v135 + 8 * v56);
          *(_QWORD *)(v135 + 8 * v56) = v136;
          v137 = *(_QWORD *)(v131 + 48);
          v138 = *(_QWORD *)(v137 + 16 * v48);
          *(_QWORD *)(v137 + 16 * v48) = *(_QWORD *)(v137 + 16 * v56);
          *(_QWORD *)(v137 + 16 * v56) = v138;
          if (v132)
          {
            v139 = (unint64_t *)&v132->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v141 = (float *)((char *)v158 + 4 * i + 4 * v151 * v5);
          *v141 = bnns;
          v141[1] = *(float *)v157;
        }
      }
      v69 = v151 + 1;
    }
    while (v151 + 1 != v145);
  }
  MilWaveRNNInference::signal_postprocessing(&v155, (float **)&v158, (float *)(a1 + 304));
  __p = 0;
  v153 = 0;
  v154 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, v155, (uint64_t)v156, ((char *)v156 - (_BYTE *)v155) >> 1);
  v142 = *(_QWORD *)(v143 + 24);
  if (!v142)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 48))(v142, &__p);
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = (std::__shared_weak_count *)v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
}

void sub_1DE9823B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Mil2BnnsWaveRNNFusedSubscaleInference::reset(Mil2BnnsWaveRNNFusedSubscaleInference *this)
{
  NSObject *v2;
  const char *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **i;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **j;
  unint64_t *v18;
  unint64_t v19;
  uint8_t v20[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_INFO, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v20, 2u);
  }
  Diagnostics::log(6, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v3);
  v4 = (uint64_t *)*((_QWORD *)this + 36);
  v5 = *v4;
  v6 = (std::__shared_weak_count *)v4[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  for (i = *(uint64_t ***)(v5 + 128); i; i = (uint64_t **)*i)
    bzero((void *)*i[5], i[5][1]);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = *((_QWORD *)this + 36);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(std::__shared_weak_count **)(v12 + 24);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  for (j = *(uint64_t ***)(v13 + 128); j; j = (uint64_t **)*j)
    bzero((void *)*j[5], j[5][1]);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *((_DWORD *)this + 76) = 0;
}

void *Mil2BnnsModel::set_bnns_input<unsigned long,float>(uint64_t a1, unint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  void *result;
  _DWORD *v11;
  int v12;
  _WORD *v13;
  int v14;
  void *exception;
  uint64_t v21;
  _BYTE v22[24];

  v7 = Mil2BnnsModel::get_position<unsigned long>(a1, a2);
  v8 = *(_QWORD *)(a1 + 72) + 24 * v7;
  v9 = *(char *)(v8 + 23);
  if (v9 < 0)
  {
    if (*(_QWORD *)(v8 + 8) != 4)
      goto LABEL_19;
    v8 = *(_QWORD *)v8;
  }
  else if (v9 != 4)
  {
LABEL_19:
    exception = __cxa_allocate_exception(0x10uLL);
    v21 = *(_QWORD *)(a1 + 72) + 24 * v7;
    if (*(char *)(v21 + 23) < 0)
      v21 = *(_QWORD *)v21;
    StringFormatter::StringFormatter((StringFormatter *)v22, "Mil2Bnns buffer type not supported: '%s'", (const char *)v21);
    MEMORY[0x1DF0EC99C](exception, v22);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(_DWORD *)v8 != 909209702)
  {
    if (*(_DWORD *)v8 != 842231910)
      goto LABEL_19;
    result = (void *)std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EE0]);
    if ((result & 1) == 0)
    {
      if (a4)
      {
        v11 = *(_DWORD **)(*(_QWORD *)(a1 + 40) + 8 * v7);
        do
        {
          v12 = *a3++;
          *v11++ = v12;
          --a4;
        }
        while (a4);
      }
      return result;
    }
    return memcpy(*(void **)(*(_QWORD *)(a1 + 40) + 8 * v7), a3, 4 * a4);
  }
  result = (void *)std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EE0]);
  if (!(_DWORD)result)
    return memcpy(*(void **)(*(_QWORD *)(a1 + 40) + 8 * v7), a3, 4 * a4);
  if (a4)
  {
    v13 = *(_WORD **)(*(_QWORD *)(a1 + 40) + 8 * v7);
    do
    {
      v14 = *a3++;
      _S0 = v14;
      __asm { FCVT            H0, S0 }
      *v13++ = _S0;
      --a4;
    }
    while (a4);
  }
  return result;
}

void sub_1DE982814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *Mil2BnnsModel::set_bnns_input<unsigned long>(uint64_t a1, unint64_t a2, const void *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  unint64_t v12;
  void *exception;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[24];

  v7 = Mil2BnnsModel::get_position<unsigned long>(a1, a2);
  v8 = *(_QWORD *)(a1 + 72) + 24 * v7;
  v9 = *(char *)(v8 + 23);
  if (v9 < 0)
  {
    if (*(_QWORD *)(v8 + 8) != 4)
      goto LABEL_11;
    v8 = *(_QWORD *)v8;
  }
  else if (v9 != 4)
  {
LABEL_11:
    v12 = v7;
    exception = __cxa_allocate_exception(0x10uLL);
    v14 = a1;
    v15 = exception;
    v16 = *(_QWORD *)(v14 + 72) + 24 * v12;
    if (*(char *)(v16 + 23) < 0)
      v16 = *(_QWORD *)v16;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Mil2Bnns buffer type not supported: '%s'", (const char *)v16);
    MEMORY[0x1DF0EC99C](v15, v17);
    __cxa_throw(v15, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(_DWORD *)v8 == 909209702)
  {
    v10 = 1;
  }
  else
  {
    if (*(_DWORD *)v8 != 842231910)
      goto LABEL_11;
    v10 = 2;
  }
  return memcpy(*(void **)(*(_QWORD *)(a1 + 40) + 8 * v7), a3, a4 << v10);
}

void sub_1DE982968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

float Mil2BnnsModel::get_bnns_output<unsigned long>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  float result;
  unint64_t v12;
  void *exception;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = Mil2BnnsModel::get_position<unsigned long>(a1, a2);
  v4 = *(_QWORD *)(a1 + 72) + 24 * v3;
  v5 = *(char *)(v4 + 23);
  if (v5 < 0)
  {
    if (*(_QWORD *)(v4 + 8) != 4)
      goto LABEL_11;
    v4 = *(_QWORD *)v4;
  }
  else if (v5 != 4)
  {
LABEL_11:
    v12 = v3;
    exception = __cxa_allocate_exception(0x10uLL);
    v14 = a1;
    v15 = exception;
    v16 = *(_QWORD *)(v14 + 72) + 24 * v12;
    if (*(char *)(v16 + 23) < 0)
      v16 = *(_QWORD *)v16;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Mil2Bnns buffer type not supported: '%s'", (const char *)v16);
    MEMORY[0x1DF0EC99C](v15, v17);
    __cxa_throw(v15, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(_DWORD *)v4 == 909209702)
  {
    _H0 = **(_WORD **)(*(_QWORD *)(a1 + 40) + 8 * v3);
    __asm { FCVT            S0, H0 }
  }
  else
  {
    if (*(_DWORD *)v4 != 842231910)
      goto LABEL_11;
    return **(float **)(*(_QWORD *)(a1 + 40) + 8 * v3);
  }
  return result;
}

void sub_1DE982AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t Mil2BnnsModel::get_position<unsigned long>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  std::string::size_type v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  void *exception;
  std::string v28;
  _BYTE v29[8];
  uint64_t v30;
  char v31;

  if (std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4F08], MEMORY[0x1E0DE4F08]))
    return a2;
  v5 = MEMORY[0x1E0DE4F08];
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v29, "Mil2Bnns::get_position called with '%s' not supported\n", (const char *)(*(_QWORD *)(v5 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    MEMORY[0x1DF0EC99C](exception, v29);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v6 = (uint64_t *)(a1 + 152);
  std::to_string(&v28, a2);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 176, (uint64_t)&v28);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 160);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*v6 + 8 * v2);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 184, (unsigned __int8 *)i + 16, (unsigned __int8 *)&v28) & 1) != 0)goto LABEL_42;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v2)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  v15 = (_QWORD *)(a1 + 168);
  v30 = a1 + 168;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_OWORD *)i + 1) = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  v16 = v28.__r_.__value_.__r.__words[2];
  memset(&v28, 0, sizeof(v28));
  *((_QWORD *)i + 4) = v16;
  *((_QWORD *)i + 5) = 0;
  v31 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 176) + 1);
  v18 = *(float *)(a1 + 184);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1 + 152, v22);
    v9 = *(_QWORD *)(a1 + 160);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v23 = *v6;
  v24 = *(_QWORD **)(*v6 + 8 * v2);
  if (v24)
  {
    *(_QWORD *)i = *v24;
  }
  else
  {
    *(_QWORD *)i = *v15;
    *v15 = i;
    *(_QWORD *)(v23 + 8 * v2) = v15;
    if (!*(_QWORD *)i)
      goto LABEL_41;
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*v6 + 8 * v25);
  }
  *v24 = i;
LABEL_41:
  ++*(_QWORD *)(a1 + 176);
LABEL_42:
  a2 = *((_QWORD *)i + 5);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return a2;
}

void sub_1DE982DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void **v22;
  uint64_t v23;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v23, v22);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Mil2BnnsWaveRNNSubscaleInference::inference(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  Mil2BnnsModel *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  void *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t i;
  uint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  float bnns;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  float v122;
  unint64_t *v123;
  unint64_t v124;
  float v125;
  float v126;
  uint64_t v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  float *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  void *__p;
  void *v158;
  uint64_t v159;
  void *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void *v164;
  void *v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 56))
  {
    v6 = roundf((float)((float)*(unint64_t *)(a1 + 48) / **(float **)(v5 + 80)) * 0.5);
    v156 = (unint64_t)(float)(v6 + v6);
  }
  else
  {
    v156 = *(_QWORD *)(a1 + 48);
  }
  v8 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(a1 + 288);
  v10 = *(void **)v9;
  v11 = *(std::__shared_weak_count **)(v9 + 8);
  v164 = *(void **)v9;
  v165 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 87) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
  else
    v173 = *(std::string *)(a1 + 64);
  v160 = &v173;
  v152 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10 + 152, (unsigned __int8 *)&v173, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = *(_QWORD *)(a1 + 288);
  v17 = *(void **)v16;
  v18 = *(std::__shared_weak_count **)(v16 + 8);
  v164 = *(void **)v16;
  v165 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (*(char *)(a1 + 111) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
  else
    v172 = *(std::string *)(a1 + 88);
  v160 = &v172;
  v151 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v17 + 152, (unsigned __int8 *)&v172, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = *(_QWORD *)(a1 + 288);
  v24 = *(void **)(v23 + 16);
  v25 = *(std::__shared_weak_count **)(v23 + 24);
  v164 = v24;
  v165 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (*(char *)(a1 + 135) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a1 + 112), *(_QWORD *)(a1 + 120));
  else
    v171 = *(std::string *)(a1 + 112);
  v160 = &v171;
  v150 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v24 + 152, (unsigned __int8 *)&v171, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (v25)
  {
    v28 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v30 = *(_QWORD *)(a1 + 288);
  v31 = *(void **)(v30 + 16);
  v32 = *(std::__shared_weak_count **)(v30 + 24);
  v164 = v31;
  v165 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (*(char *)(a1 + 207) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a1 + 184), *(_QWORD *)(a1 + 192));
  else
    v170 = *(std::string *)(a1 + 184);
  v160 = &v170;
  v155 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v31 + 152, (unsigned __int8 *)&v170, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (v32)
  {
    v35 = (unint64_t *)&v32->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v37 = *(_QWORD *)(a1 + 288);
  v38 = *(void **)(v37 + 16);
  v39 = *(std::__shared_weak_count **)(v37 + 24);
  v164 = v38;
  v165 = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  if (*(char *)(a1 + 231) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a1 + 208), *(_QWORD *)(a1 + 216));
  else
    v169 = *(std::string *)(a1 + 208);
  v160 = &v169;
  v42 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v38 + 152, (unsigned __int8 *)&v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = *(_QWORD *)(a1 + 288);
  v46 = *(void **)(v45 + 16);
  v47 = *(std::__shared_weak_count **)(v45 + 24);
  v164 = v46;
  v165 = v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  if (*(char *)(a1 + 255) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a1 + 232), *(_QWORD *)(a1 + 240));
  else
    v168 = *(std::string *)(a1 + 232);
  v160 = &v168;
  v50 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v46 + 152, (unsigned __int8 *)&v168, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (v47)
  {
    v51 = (unint64_t *)&v47->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v53 = *(_QWORD *)(a1 + 288);
  v54 = *(void **)(v53 + 16);
  v55 = *(std::__shared_weak_count **)(v53 + 24);
  v164 = v54;
  v165 = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  if (*(char *)(a1 + 183) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a1 + 160), *(_QWORD *)(a1 + 168));
  else
    v167 = *(std::string *)(a1 + 160);
  v160 = &v167;
  v58 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v54 + 152, (unsigned __int8 *)&v167, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (v55)
  {
    v59 = (unint64_t *)&v55->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v148 = a3;
  v61 = *(_QWORD *)(a1 + 288);
  v62 = *(void **)(v61 + 16);
  v63 = *(std::__shared_weak_count **)(v61 + 24);
  v164 = v62;
  v165 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  if (*(char *)(a1 + 159) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a1 + 136), *(_QWORD *)(a1 + 144));
  else
    v166 = *(std::string *)(a1 + 136);
  v160 = &v166;
  v66 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62 + 152, (unsigned __int8 *)&v166, (uint64_t)&std::piecewise_construct, (__int128 **)&v160)+ 5);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v67 = (v7 - v8) / 24;
  if (v63)
  {
    v68 = (unint64_t *)&v63->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v147 = v156 * v67;
  std::vector<float>::vector(&v164, v156 * v67 + 5);
  v70 = v164;
  *((_DWORD *)v164 + 1) = *(_DWORD *)(a1 + 316);
  v70[3] = *(_DWORD *)(a1 + 320);
  if (v7 != v8)
  {
    v71 = 0;
    if (v67 <= 1)
      v72 = 1;
    else
      v72 = (v7 - v8) / 24;
    v149 = v72;
    do
    {
      v73 = *(_QWORD *)(a1 + 288);
      v74 = *(void **)v73;
      v75 = *(std::__shared_weak_count **)(v73 + 8);
      v160 = *(void **)v73;
      v161 = v75;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      Mil2BnnsModel::set_bnns_input<unsigned long,float>((uint64_t)v74, v152, *(int **)(*(_QWORD *)(*a2 + 8) + 24 * v71), *(int *)(a1 + 280));
      if (v75)
      {
        v78 = (unint64_t *)&v75->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v80 = *(_QWORD *)(a1 + 288);
      v81 = *(Mil2BnnsModel **)v80;
      v82 = *(std::__shared_weak_count **)(v80 + 8);
      v160 = *(void **)v80;
      v161 = v82;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      Mil2BnnsModel::execute(v81);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v87 = *(uint64_t **)(a1 + 288);
      v88 = (void *)v87[2];
      v89 = (unint64_t *)v87[3];
      v160 = v88;
      v161 = (std::__shared_weak_count *)v89;
      if (v89)
      {
        v90 = v89 + 1;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        v87 = *(uint64_t **)(a1 + 288);
      }
      v92 = *v87;
      v93 = (std::__shared_weak_count *)v87[1];
      v162 = *v87;
      v163 = v93;
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      Mil2BnnsModel::set_bnns_input<unsigned long>((uint64_t)v88, v150, *(const void **)(*(_QWORD *)(v92 + 40) + 8 * v151), 3 * *(int *)(a1 + 284));
      if (v93)
      {
        v96 = (unint64_t *)&v93->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v98 = v161;
      if (v161)
      {
        v99 = (unint64_t *)&v161->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v154 = v71;
      if (v156)
      {
        for (i = 0; i < v156; i += 2)
        {
          v102 = *(_QWORD *)(a1 + 288);
          v103 = *(void **)(v102 + 16);
          v104 = *(std::__shared_weak_count **)(v102 + 24);
          v160 = v103;
          v161 = v104;
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          Mil2BnnsModel::execute((Mil2BnnsModel *)v103);
          if (v104)
          {
            v107 = (unint64_t *)&v104->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v109 = *(_QWORD *)(a1 + 288);
          v110 = *(void **)(v109 + 16);
          v111 = *(std::__shared_weak_count **)(v109 + 24);
          v160 = v110;
          v161 = v111;
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          bnns = Mil2BnnsModel::get_bnns_output<unsigned long>((uint64_t)v110, v155);
          if (v111)
          {
            v115 = (unint64_t *)&v111->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v117 = *(_QWORD *)(a1 + 288);
          v118 = *(void **)(v117 + 16);
          v119 = *(std::__shared_weak_count **)(v117 + 24);
          v160 = v118;
          v161 = v119;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 1, v120));
          }
          v122 = Mil2BnnsModel::get_bnns_output<unsigned long>((uint64_t)v118, v42);
          if (v119)
          {
            v123 = (unint64_t *)&v119->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v125 = (float)(bnns / 127.5) + -1.0;
          v126 = (float)(v122 / 127.5) + -1.0;
          *(float *)(a1 + 308) = v125;
          *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 316);
          *(float *)(a1 + 320) = v126;
          v127 = *(_QWORD *)(a1 + 288);
          v128 = *(void **)(v127 + 16);
          v129 = *(std::__shared_weak_count **)(v127 + 24);
          v160 = v128;
          v161 = v129;
          if (v129)
          {
            v130 = (unint64_t *)&v129->__shared_owners_;
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
          }
          Mil2BnnsModel::set_bnns_input<unsigned long,float>((uint64_t)v128, v66, (int *)(a1 + 308), 4);
          if (v129)
          {
            v132 = (unint64_t *)&v129->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          v134 = *(_QWORD *)(a1 + 288);
          v135 = *(_QWORD *)(v134 + 16);
          v136 = *(std::__shared_weak_count **)(v134 + 24);
          if (v136)
          {
            v137 = (unint64_t *)&v136->__shared_owners_;
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
          }
          v139 = *(_QWORD *)(v135 + 40);
          v140 = *(_QWORD *)(v139 + 8 * v50);
          *(_QWORD *)(v139 + 8 * v50) = *(_QWORD *)(v139 + 8 * v58);
          *(_QWORD *)(v139 + 8 * v58) = v140;
          v141 = *(_QWORD *)(v135 + 48);
          v142 = *(_QWORD *)(v141 + 16 * v50);
          *(_QWORD *)(v141 + 16 * v50) = *(_QWORD *)(v141 + 16 * v58);
          *(_QWORD *)(v141 + 16 * v58) = v142;
          if (v136)
          {
            v143 = (unint64_t *)&v136->__shared_owners_;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v145 = (float *)((char *)v164 + 4 * i + 4 * v71 * v156);
          *v145 = v125;
          v145[5] = v126;
        }
      }
      ++v71;
    }
    while (v154 + 1 != v149);
  }
  std::vector<float>::resize((uint64_t)&v164, v147);
  MilWaveRNNInference::signal_postprocessing(&v160, (float **)&v164, (float *)(a1 + 304));
  __p = 0;
  v158 = 0;
  v159 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, v160, (uint64_t)v161, ((char *)v161 - (_BYTE *)v160) >> 1);
  v146 = *(_QWORD *)(v148 + 24);
  if (!v146)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 48))(v146, &__p);
  if (__p)
  {
    v158 = __p;
    operator delete(__p);
  }
  if (v160)
  {
    v161 = (std::__shared_weak_count *)v160;
    operator delete(v160);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
}

void sub_1DE983A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void Mil2BnnsWaveRNNSubscaleInference::reset(Mil2BnnsWaveRNNSubscaleInference *this)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **i;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **j;
  unint64_t *v18;
  unint64_t v19;
  uint8_t v20[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_INFO, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v20, 2u);
  }
  Diagnostics::log(6, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v3);
  v4 = *((_QWORD *)this + 36);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(std::__shared_weak_count **)(v4 + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  for (i = *(uint64_t ***)(v5 + 128); i; i = (uint64_t **)*i)
    bzero((void *)*i[5], i[5][1]);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 36);
  v13 = *v12;
  v14 = (std::__shared_weak_count *)v12[1];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  for (j = *(uint64_t ***)(v13 + 128); j; j = (uint64_t **)*j)
    bzero((void *)*j[5], j[5][1]);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0;
}

void MilWaveRNNModule::~MilWaveRNNModule(MilWaveRNNModule *this)
{
  MilWaveRNNModule::~MilWaveRNNModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91E820;
  if (*((char *)this + 383) < 0)
    operator delete(*((void **)this + 45));
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

void MilWaveRNNModule::prepare(MilWaveRNNModule *this)
{
  std::mutex *v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  unint64_t *v6;
  void (***v7)(_QWORD, char **, _QWORD *);
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  uint8_t buf[8];
  std::__shared_weak_count *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)((char *)this + 296);
  std::mutex::lock((std::mutex *)((char *)this + 296));
  if (*((_BYTE *)this + 288))
    goto LABEL_2;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v4);
  v5 = (char *)operator new(0x88uLL);
  *((_QWORD *)v5 + 1) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1EA932C88;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *((_WORD *)v5 + 12) = 257;
  *((_OWORD *)v5 + 2) = 0u;
  *(_QWORD *)(v5 + 126) = 0;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *(_QWORD *)buf = v5 + 24;
  v20 = (std::__shared_weak_count *)v5;
  std::vector<std::vector<float>>::resize((uint64_t *)v5 + 4, 1uLL);
  std::vector<float>::resize(*((_QWORD *)v5 + 4), 0x50uLL);
  v7 = (void (***)(_QWORD, char **, _QWORD *))*((_QWORD *)this + 34);
  v17 = v5 + 24;
  v18 = (std::__shared_weak_count *)v5;
  do
    v8 = __ldxr(v6);
  while (__stxr(v8 + 1, v6));
  v21[0] = &off_1EA92F618;
  v22 = v21;
  (**v7)(v7, &v17, v21);
  v9 = v22;
  if (v22 == v21)
  {
    v10 = 4;
    v9 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_14;
    v10 = 5;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_14:
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_2:
  std::mutex::unlock(v2);
}

void sub_1DE983F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void MilWaveRNNModule::process_data(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  NSObject *v5;
  const char *v6;
  std::chrono::steady_clock::time_point v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***v17)(_QWORD, uint64_t *, _QWORD *);
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  NSObject *v30;
  float v31;
  const char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  unint64_t *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void *__p;
  __int16 *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  void *v101;
  _BYTE buf[24];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v103;
  __int16 v104;
  double v105;
  _QWORD v106[3];
  _QWORD *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 296);
  std::mutex::lock((std::mutex *)(a1 + 296));
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEBUG, "MIL WaveRNN Inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "MIL WaveRNN Inference begin.", v6);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(_BYTE *)(a1 + 288) = 1;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)v8 + 16);
  *(_QWORD *)&v100 = v10;
  *((_QWORD *)&v100 + 1) = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(std::__shared_weak_count **)(*(_QWORD *)v13 + 16);
  v98 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  v99 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (!*(_DWORD *)(v10 + 104))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 8))(*(_QWORD *)(a1 + 272));
  __p = 0;
  v96 = 0;
  v97 = 0;
  v17 = *(void (****)(_QWORD, uint64_t *, _QWORD *))(a1 + 272);
  v93 = v10;
  v94 = v9;
  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v106[0] = &off_1EA92F5C0;
  v106[1] = &__p;
  v107 = v106;
  (**v17)(v17, &v93, v106);
  v20 = v107;
  if (v107 == v106)
  {
    v21 = 4;
    v20 = v106;
    goto LABEL_20;
  }
  if (v107)
  {
    v21 = 5;
LABEL_20:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  v22 = v94;
  if (v94)
  {
    v23 = (unint64_t *)&v94->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000;
  v26 = v100;
  v27 = (uint64_t)(*(_QWORD *)(v100 + 16) - *(_QWORD *)(v100 + 8)) >> 3;
  v28 = (float)(0xAAAAAAAAAAAAAAAELL * v27);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = 0xAAAAAAAAAAAAAAABLL * v27;
  v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v31 = v28 / (float)v25;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v33 = (_QWORD *)(a1 + 360);
    if (*(char *)(a1 + 383) < 0)
      v33 = (_QWORD *)*v33;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v29;
    *(_WORD *)&buf[22] = 2048;
    v103 = v25;
    v104 = 2048;
    v105 = v31;
    _os_log_impl(&dword_1DE3F6000, v30, OS_LOG_TYPE_DEFAULT, "MilWaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", buf, 0x2Au);
  }
  v34 = (_QWORD *)(a1 + 360);
  if (*(char *)(a1 + 383) < 0)
    v34 = (_QWORD *)*v34;
  Diagnostics::log(5, "MilWaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", v32, v34, v29, v25, v31);
  v35 = (char *)operator new(0x90uLL);
  *((_QWORD *)v35 + 1) = 0;
  v36 = (unint64_t *)(v35 + 8);
  *((_QWORD *)v35 + 2) = 0;
  *(_QWORD *)v35 = &off_1EA933580;
  *(_OWORD *)(v35 + 24) = 0u;
  *(_OWORD *)(v35 + 88) = 0u;
  *(_OWORD *)(v35 + 72) = 0u;
  *(_OWORD *)(v35 + 56) = 0u;
  *(_OWORD *)(v35 + 40) = 0u;
  *(_OWORD *)(v35 + 104) = 0u;
  *(_OWORD *)(v35 + 120) = 0u;
  *((_QWORD *)v35 + 17) = 0;
  *((_WORD *)v35 + 12) = 257;
  *((_QWORD *)v35 + 12) = 0;
  *((_OWORD *)v35 + 3) = 0u;
  *((_OWORD *)v35 + 4) = 0u;
  *((_OWORD *)v35 + 2) = 0u;
  *((_OWORD *)v35 + 5) = 0u;
  *((_QWORD *)v35 + 15) = 0;
  *((_QWORD *)v35 + 16) = 0;
  *((_WORD *)v35 + 68) = 0;
  v91 = v35 + 24;
  v92 = (std::__shared_weak_count *)v35;
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((_QWORD *)v35 + 10, (__int16 *)__p, v96, ((char *)v96 - (_BYTE *)__p) >> 1);
  v35[24] = *(_DWORD *)(v26 + 104) == 0;
  v35[25] = *(_BYTE *)(v26 + 1);
  v35[137] = *(_BYTE *)(v26 + 109);
  if (*(_BYTE *)(v26 + 108))
    *((_DWORD *)v35 + 26) = 1;
  v37 = operator new(0x30uLL);
  *(_OWORD *)((char *)v37 + 8) = 0u;
  v37[2] = 0u;
  *(_QWORD *)v37 = &off_1EA932198;
  *((_QWORD *)v37 + 3) = v37 + 2;
  v38 = (uint64_t)v37 + 24;
  v89 = (uint64_t)v37 + 24;
  v90 = (std::__shared_weak_count *)v37;
  Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)v37 + 24, &v100);
  *(_QWORD *)buf = &v101;
  v40 = v39[5];
  if (v40)
  {
    *(_QWORD *)buf = &off_1EA923328;
    *(_QWORD *)&buf[8] = v35 + 24;
    *(_QWORD *)&buf[16] = v35;
    do
      v41 = __ldxr(v36);
    while (__stxr(v41 + 1, v36));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v40 + 8, (__int128 *)&buf[8]);
    *(_QWORD *)buf = &off_1EA923328;
    v42 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v43 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v38 = v89;
  }
  else
  {
    v45 = (_QWORD *)operator new();
    *v45 = &off_1EA923328;
    v45[1] = v35 + 24;
    v45[2] = v35;
    do
      v46 = __ldxr(v36);
    while (__stxr(v46 + 1, v36));
    v47 = v39[5];
    v39[5] = (uint64_t)v45;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  *(_QWORD *)buf = &v101;
  v49 = v48[5];
  if (v49)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&buf[8] = v98;
    *(_QWORD *)&buf[16] = v99;
    if (v99)
    {
      v50 = (unint64_t *)&v99->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v49 + 8, (__int128 *)&buf[8]);
    *(_QWORD *)buf = &off_1EA923288;
    v52 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v53 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    v55 = (_QWORD *)operator new();
    v57 = v98;
    v56 = v99;
    *v55 = &off_1EA923288;
    v55[1] = v57;
    v55[2] = v56;
    if (v56)
    {
      v58 = (unint64_t *)&v56->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v60 = v48[5];
    v48[5] = (uint64_t)v55;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  v61 = *a2;
  v62 = *(_QWORD **)(*a2 + 8);
  {
    v64 = *(std::__shared_weak_count **)(*(_QWORD *)v63 + 16);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v63 + 8);
    *(_QWORD *)&buf[8] = v64;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v89, (__int128 *)buf);
    if (v64)
    {
      v67 = (unint64_t *)&v64->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v61 = *a2;
    v62 = *(_QWORD **)(*a2 + 8);
  }
  {
    Agglomerate::set<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>(v89, (__int128 *)(*(_QWORD *)v69 + 8));
  }
  v87 = v89;
  v88 = v90;
  if (v90)
  {
    v70 = (unint64_t *)&v90->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v87);
  v72 = v88;
  if (v88)
  {
    v73 = (unint64_t *)&v88->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  kdebug_trace();
  v75 = v90;
  if (v90)
  {
    v76 = (unint64_t *)&v90->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v92;
  if (v92)
  {
    v79 = (unint64_t *)&v92->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (__p)
  {
    v96 = (__int16 *)__p;
    operator delete(__p);
  }
  v81 = v99;
  if (v99)
  {
    v82 = (unint64_t *)&v99->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  std::mutex::unlock(v4);
}

void sub_1DE984888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  std::mutex *v29;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::mutex::unlock(v29);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA9235A8;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9235A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9235A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA92F5C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA92F5C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;

  v3 = *(char **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(*(char **)(a1 + 8), v3, v2, (v2 - (uint64_t)v3) >> 1);
  if (v3)
    operator delete(v3);
  return 0;
}

void sub_1DE984B84(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::target_type()
{
}

void std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA92F618;
  return result;
}

void std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA92F618;
}

uint64_t std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v2)
    operator delete(v2);
  return 0;
}

uint64_t std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::target_type()
{
}

void std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>(uint64_t **a1, uint64_t a2, unsigned __int8 **a3, uint64_t *a4, int a5)
{
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *MILContext;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string::size_type v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t WorkspaceSize_v2;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t ArgumentPosition;
  unsigned __int8 *v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  void *exception;
  const char *v60;
  void *v61;
  const char *v62;
  void *v63;
  const char *v64;
  void *v65;
  const char *v66;
  void **v67;
  uint64_t **v68;
  std::vector<std::string> *v69;
  std::string v70;
  uint64_t v71;
  std::string::size_type v72;
  std::__shared_weak_count *v73;
  std::string v74;
  uint64_t v75;

  v10 = (char *)operator new(0xD8uLL);
  v11 = v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA9325F8;
  *((_QWORD *)v10 + 3) = 0;
  v12 = (uint64_t *)(v10 + 24);
  *(_OWORD *)(v10 + 72) = 0u;
  v67 = (void **)(v10 + 72);
  *(_OWORD *)(v10 + 136) = 0u;
  v69 = (std::vector<std::string> *)(v10 + 96);
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 42) = 1065353216;
  *((_OWORD *)v10 + 11) = 0u;
  v13 = (uint64_t)(v10 + 176);
  *((_OWORD *)v10 + 12) = 0u;
  *((_DWORD *)v10 + 52) = 1065353216;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v70 = *(std::string *)a2;
  v68 = a1;
  MILContext = (std::__shared_weak_count *)MIL::Opsets::Common::CreateMILContext((MIL::Opsets::Common *)v10);
  v15 = v74.__r_.__value_.__r.__words[0];
  if (v74.__r_.__value_.__r.__words[0])
  {
    MILContext = (std::__shared_weak_count *)operator new();
    v16 = MILContext;
    v17 = v74.__r_.__value_.__r.__words[0];
    MILContext->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936BF8;
    MILContext->__shared_owners_ = 0;
    MILContext->__shared_weak_owners_ = 0;
    MILContext[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  }
  else
  {
    v16 = 0;
  }
  MIL::ParserOptions::Make((MIL::ParserOptions *)MILContext);
  v18 = v75;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  else
    v74 = v70;
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v18 + 32))(v18, &v74, 1);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 64))(v75, 1);
  v72 = v15;
  v73 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  v21 = v73;
  if (v73)
  {
    v22 = (unint64_t *)&v73->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v75;
  v75 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v16)
  {
    v25 = (unint64_t *)&v16->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v27 = v71;
  v71 = 0;
  v28 = *v12;
  *v12 = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v71;
    v71 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (!*v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v60 = (const char *)a2;
    else
      v60 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)&v74, "Can't read mil2bnns model from: '%s'", v60);
    MEMORY[0x1DF0EC99C](exception, &v74);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  BNNSGraphCompileOptionsMakeDefault();
  if (a5 == 1)
    BNNSGraphCompileOptionsSetPredefinedOptimizations();
  v30 = *((unsigned __int8 *)a4 + 23);
  if ((v30 & 0x80u) != 0)
    v30 = a4[1];
  if (v30)
  {
    if ((_get_cpu_capabilities() & 0x78000000) == 0)
    {
      v65 = __cxa_allocate_exception(0x10uLL);
      if (*((char *)a4 + 23) >= 0)
        v66 = (const char *)a4;
      else
        v66 = (const char *)*a4;
      StringFormatter::StringFormatter((StringFormatter *)&v74, "BNNS downcast type not supported '%s'", v66);
      MEMORY[0x1DF0EC99C](v65, &v74);
      __cxa_throw(v65, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      v31 = *((unsigned __int8 *)a4 + 23);
      if (v31 != 4)
      {
        if (v31 != 19)
          goto LABEL_67;
        v32 = *a4 == 0x73706F5F36317066 && a4[1] == 0x63615F323370665FLL;
        if (!v32 || *(uint64_t *)((char *)a4 + 11) != 0x6D756363615F3233)
          goto LABEL_67;
LABEL_66:
        BNNSGraphCompileOptionsSetDownconvertMode();
        goto LABEL_67;
      }
LABEL_63:
      if (*(_DWORD *)a4 != 909209702
        && (*(_DWORD *)a4 != 909207138 || (_get_cpu_capabilities() & 0x78000000uLL) < 0x10000001))
      {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    v34 = a4[1];
    if (v34 == 4)
    {
      a4 = (uint64_t *)*a4;
      goto LABEL_63;
    }
    if (v34 == 19)
    {
      v35 = *(_QWORD *)*a4 == 0x73706F5F36317066 && *(_QWORD *)(*a4 + 8) == 0x63615F323370665FLL;
      if (v35 && *(_QWORD *)(*a4 + 11) == 0x6D756363615F3233)
        goto LABEL_66;
    }
  }
LABEL_67:
  *((_QWORD *)v11 + 4) = BNNSGraphCompileFromFile_v2();
  *((_QWORD *)v11 + 5) = v37;
  BNNSGraphCompileOptionsDestroy();
  if (!*((_QWORD *)v11 + 4))
  {
    v61 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v62 = (const char *)a2;
    else
      v62 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)&v74, "failed to compile mil2bnns model from: '%s'", v62);
    MEMORY[0x1DF0EC99C](v61, &v74);
    __cxa_throw(v61, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v38 = *v12;
  *v12 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = BNNSGraphContextMake();
  *((_QWORD *)v11 + 15) = v39;
  *((_QWORD *)v11 + 16) = v40;
  if (!v39)
  {
    v63 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v64 = (const char *)a2;
    else
      v64 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)&v74, "failed to create context: '%s'", v64);
    MEMORY[0x1DF0EC99C](v63, &v74);
    __cxa_throw(v63, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  WorkspaceSize_v2 = BNNSGraphContextGetWorkspaceSize_v2();
  *((_QWORD *)v11 + 6) = WorkspaceSize_v2;
  if (WorkspaceSize_v2)
    WorkspaceSize_v2 = (size_t)malloc_type_valloc(WorkspaceSize_v2, 0xD9C60C9DuLL);
  *((_QWORD *)v11 + 7) = WorkspaceSize_v2;
  v42 = *a3;
  v43 = a3[1];
  if (*a3 == v43)
  {
    v45 = *a3;
  }
  else
  {
    do
    {
      ArgumentPosition = BNNSGraphGetArgumentPosition();
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v42, (uint64_t)&std::piecewise_construct, (__int128 **)&v74)+ 5) = ArgumentPosition;
      v42 += 24;
    }
    while (v42 != v43);
    v42 = *a3;
    v45 = a3[1];
  }
  *((_QWORD *)v11 + 8) = malloc_type_malloc(0x5555555555555558 * ((unint64_t)(v45 - v42) >> 3), 0x80040B8603338uLL);
  v46 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
  v48 = (_BYTE *)*((_QWORD *)v11 + 9);
  v47 = (char *)*((_QWORD *)v11 + 10);
  v49 = (v47 - v48) >> 4;
  if (v46 <= v49)
  {
    if (v46 >= v49)
      goto LABEL_95;
    v58 = &v48[0xAAAAAAAAAAAAAAB0 * ((a3[1] - *a3) >> 3)];
LABEL_94:
    *((_QWORD *)v11 + 10) = v58;
    goto LABEL_95;
  }
  v50 = v46 - v49;
  v51 = *((_QWORD *)v11 + 11);
  if (v46 - v49 <= (v51 - (uint64_t)v47) >> 4)
  {
    bzero(*((void **)v11 + 10), 16 * v50);
    v58 = &v47[16 * v50];
    goto LABEL_94;
  }
  if (v46 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v52 = v51 - (_QWORD)v48;
  if (v52 >> 3 > v46)
    v46 = v52 >> 3;
  if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
    v53 = 0xFFFFFFFFFFFFFFFLL;
  else
    v53 = v46;
  if (v53 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v54 = (char *)operator new(16 * v53);
  v55 = &v54[16 * v49];
  v56 = &v54[16 * v53];
  bzero(v55, 16 * v50);
  v57 = &v55[16 * v50];
  if (v47 != v48)
  {
    do
    {
      *((_OWORD *)v55 - 1) = *((_OWORD *)v47 - 1);
      v55 -= 16;
      v47 -= 16;
    }
    while (v47 != v48);
    v47 = (char *)*v67;
  }
  *((_QWORD *)v11 + 9) = v55;
  *((_QWORD *)v11 + 10) = v57;
  *((_QWORD *)v11 + 11) = v56;
  if (v47)
    operator delete(v47);
LABEL_95:
  std::vector<std::string>::resize(v69, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  *v68 = v12;
  v68[1] = (uint64_t *)v11;
}

void sub_1DE9854F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count *v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v36;
  uint64_t v37;
  void *v38;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(a11);
      *(_QWORD *)(v34 - 88) = a14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
      v36 = *a12;
      if (*a12)
      {
        v29[3].__shared_owners_ = (uint64_t)v36;
        operator delete(v36);
      }
      v37 = *v31;
      *v31 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      std::__shared_weak_count::~__shared_weak_count(v29);
      operator delete(v38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<Mil2BnnsModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9325F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9325F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Mil2BnnsModel>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  uint64_t result;
  void **v4;

  free(*(void **)(a1 + 32));
  BNNSGraphContextDestroy_v2();
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 176);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(a1 + 136);
  v4 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9357A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9357A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInferenceModel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9359D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9359D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInferenceModel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9357D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9357D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInferenceModel>::__on_zero_shared()
{
  int v0;
  int v1;
  int v2;
  void *exception;
  int v4;
  void *v5;
  int v6;
  void **v7;
  int v8;
  const char *status_string;
  void **v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  void **v15;
  int v16;
  const char *v17;
  void **v18;
  void *v19;
  int v20;
  void **v21;
  const char *v22;
  void **v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *__p[2];
  char v29;
  _BYTE v30[24];

  v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy linear plan");
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v4 = v0;
    v5 = exception;
    v6 = v29;
    v7 = (void **)__p[0];
    v8 = v4;
    status_string = (const char *)espresso_get_status_string();
    v10 = __p;
    if (v6 < 0)
      v10 = v7;
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v10, v8, status_string);
    MEMORY[0x1DF0EC99C](v5, v30);
    __cxa_throw(v5, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v29 < 0)
    operator delete(__p[0]);
  v1 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(v26, "Unable to destroy gru plan");
  if (v1)
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    v12 = v1;
    v13 = v11;
    v14 = v27;
    v15 = (void **)v26[0];
    v16 = v12;
    v17 = (const char *)espresso_get_status_string();
    v18 = v26;
    if (v14 < 0)
      v18 = v15;
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v18, v16, v17);
    MEMORY[0x1DF0EC99C](v13, v30);
    __cxa_throw(v13, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v27 < 0)
    operator delete(v26[0]);
  v2 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v24, "Unable to destroy context");
  if (v2)
  {
    v19 = __cxa_allocate_exception(0x10uLL);
    v20 = v25;
    v21 = (void **)v24[0];
    v22 = (const char *)espresso_get_status_string();
    v23 = v24;
    if (v20 < 0)
      v23 = v21;
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v23, v2, v22);
    MEMORY[0x1DF0EC99C](v19, v30);
    __cxa_throw(v19, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_1DE985AA4(void *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0)
LABEL_6:
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void MilWaveRNNPersistentModule::~MilWaveRNNPersistentModule(void **this)
{
  *this = off_1EA9211B0;
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = off_1EA9211B0;
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t MilWaveRNNInference::MilWaveRNNInference(uint64_t a1, char *a2)
{
  void **v4;
  void *__p[2];
  char v7;
  std::string v8;

  *(_QWORD *)a1 = &unk_1EA91F6E8;
  MilWaveRNNInference::Config::Config(a1 + 8, a2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v8);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)&v8.__r_.__value_.__l + 2);
  *((_BYTE *)&v8.__r_.__value_.__s + 23) = 0;
  v8.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1DE985C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 47) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

uint64_t MilWaveRNNInference::Config::Config(uint64_t a1, char *a2)
{
  unsigned int v5;
  void *__p[2];
  char v7;

  *(_BYTE *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "frame_size");
  v5 = 240;
  *(_QWORD *)a1 = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v5);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable_rate_change");
  LOBYTE(v5) = 0;
  *(_BYTE *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v5);
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1DE985D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 *v17;

  v4 = *(std::__shared_weak_count **)(a3 + 24);
  if (v4 && (v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v8 = v7;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9
      && (v10 = v9 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v9 + 8), (unsigned __int8 *)a2)))
    {
      v17 = a2;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a2, &v17);
      v12 = *((_QWORD *)v11 + 6);
      *a1 = *((_QWORD *)v11 + 5);
      a1[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1DE985E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void MilWaveRNNFusedSubscaleInference::Config::~Config(void **this)
{
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void Mil2BnnsWaveRNNFusedSubscaleInference::Config::~Config(void **this)
{
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t MilWaveRNNModule::MilWaveRNNModule(uint64_t a1, char *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  int v19;
  void *v20;
  size_t v21;
  size_t v22;
  char *v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  void **v33;
  void **v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  void *v70;
  size_t v71;
  BOOL v72;
  void *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  void **v94;
  void **v95;
  void **v96;
  void **v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void ***v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count **v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count **v123;
  unint64_t *v124;
  unint64_t v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count **v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count **v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count **v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count **v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count **v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count **v162;
  unint64_t *v163;
  unint64_t v164;
  int v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  void **v179;
  void **v180;
  void **v181;
  void **v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void ***v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count **v201;
  unint64_t *v202;
  unint64_t v203;
  int v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count **v208;
  unint64_t *v209;
  unint64_t v210;
  int v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count **v215;
  unint64_t *v216;
  unint64_t v217;
  int v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count **v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count **v228;
  unint64_t *v229;
  unint64_t v230;
  int v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count **v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count **v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count **v247;
  unint64_t *v248;
  unint64_t v249;
  int v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *size;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  __int128 v258;
  unint64_t *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v264;
  void *exception;
  int v266;
  std::string::size_type v267;
  const char *status_string;
  std::string *v269;
  void *v270;
  int v271;
  std::string::size_type v272;
  const char *v273;
  std::string *v274;
  void *v275;
  int v276;
  std::string::size_type v277;
  const char *v278;
  std::string *v279;
  void *v280;
  int v281;
  std::string::size_type v282;
  const char *v283;
  std::string *p_p;
  void *v285;
  int v286;
  std::string::size_type v287;
  const char *v288;
  std::string *v289;
  void *v290;
  int v291;
  std::string::size_type v292;
  const char *v293;
  std::string *v294;
  void *v295;
  int v296;
  std::string::size_type v297;
  const char *v298;
  std::string *v299;
  void *v300;
  int v301;
  std::string::size_type v302;
  const char *v303;
  std::string *v304;
  void *v305;
  int v306;
  std::string::size_type v307;
  const char *v308;
  std::string *v309;
  void *v310;
  int v311;
  std::string::size_type v312;
  const char *v313;
  std::string *v314;
  void **v315;
  _QWORD *v316;
  _QWORD *v317;
  void **v318;
  void **v319;
  void **v320;
  void **v321;
  void **v322;
  void **v323;
  void **v324;
  void **v325;
  void **v326;
  void **v327;
  void **v328;
  void **v329;
  uint64_t v330;
  void **v331;
  void **v332;
  void **v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  uint64_t v336[2];
  uint64_t v337;
  std::__shared_weak_count *v338;
  std::string v339;
  std::string v340;
  std::string v341;
  std::string v342;
  std::string v343;
  std::string v344;
  std::string v345;
  std::string v346;
  std::string v347;
  std::string v348;
  std::string v349;
  std::string v350;
  std::string __p;
  std::string v352;
  std::string v353;
  std::string v354;
  uint64_t v355;
  std::__shared_weak_count *v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count **v359;
  std::__shared_weak_count *v360;
  char v361;
  std::string v362;

  v6 = (std::__shared_weak_count *)a3[1];
  v336[0] = *a3;
  v336[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, a2, v336);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = &off_1EA91E820;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 850045863;
  v333 = (void **)(a1 + 360);
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  if (*(char *)(a1 + 207) < 0)
    std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)(a1 + 184), *(_QWORD *)(a1 + 192));
  else
    v362 = *(std::string *)(a1 + 184);
  v11 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v334, (__int128 *)&v362, v11);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  if (*(char *)(v334 + 335) < 0)
    std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)(v334 + 312), *(_QWORD *)(v334 + 320));
  else
    v362 = *(std::string *)(v334 + 312);
  if (*(char *)(a1 + 383) < 0)
    operator delete(*v333);
  *(_OWORD *)v333 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 376) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  v17 = strlen((const char *)(0x80000001DECFC309 & 0x7FFFFFFFFFFFFFFFLL));
  v18 = v17;
  v19 = *(char *)(a1 + 383);
  if (v19 < 0)
  {
    v21 = *(_QWORD *)(a1 + 368);
    if (v17 != v21)
    {
      v22 = strlen((const char *)(0x80000001DECFC331 & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_153;
    }
    if (v17 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v20 = *v333;
LABEL_33:
    if (!memcmp(v20, (const void *)(0x80000001DECFC309 & 0x7FFFFFFFFFFFFFFFLL), v18))
    {
      v23 = (char *)operator new(0x5C8uLL);
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      *(_QWORD *)v23 = &off_1EA935458;
      v330 = (uint64_t)(v23 + 24);
      v24 = *a3;
      v25 = (std::__shared_weak_count *)a3[1];
      v342.__r_.__value_.__r.__words[0] = *a3;
      v342.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        v344.__r_.__value_.__r.__words[0] = v24;
        v344.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
        v28 = (unint64_t *)&v25->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      else
      {
        *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v24;
      }
      MilWaveRNNInference::MilWaveRNNInference(v330, a2);
      if (v25)
      {
        v30 = (unint64_t *)&v25->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      *((_QWORD *)v23 + 3) = &off_1EA921FE0;
      MilWaveRNNInference::Config::Config((uint64_t)(v23 + 72), a2);
      v32 = (void **)(v23 + 88);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 11, "input_mel");
      v33 = (void **)(v23 + 112);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 14, "Identity_1");
      v34 = (void **)(v23 + 136);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 17, "input_mel_linear");
      v327 = (void **)(v23 + 160);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 20, "input_coarse");
      v324 = (void **)(v23 + 184);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 23, "state");
      v321 = (void **)(v23 + 208);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 26, "Identity_2");
      v318 = (void **)(v23 + 232);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 29, "Identity_3");
      v315 = (void **)(v23 + 256);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v23 + 32, "Identity");
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_linear_model_input_input_mel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[111] < 0)
        operator delete(*v32);
      *(_OWORD *)v32 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 13) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_linear_model_output_mel_linear_output");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[135] < 0)
        operator delete(*v33);
      *(_OWORD *)v33 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 16) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_input_mel_linear");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[159] < 0)
        operator delete(*v34);
      *(_OWORD *)v34 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 19) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_input_coarse");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[183] < 0)
        operator delete(*v327);
      *(_OWORD *)v327 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 22) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[207] < 0)
        operator delete(*v324);
      *(_OWORD *)v324 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 25) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_coarse_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[231] < 0)
        operator delete(*v321);
      *(_OWORD *)v321 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 28) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_fine_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[255] < 0)
        operator delete(*v318);
      *(_OWORD *)v318 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 31) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_final_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (v23[279] < 0)
        operator delete(*v315);
      *(_OWORD *)v315 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 34) = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      *((_QWORD *)v23 + 35) = 0;
      *((_QWORD *)v23 + 36) = 0;
      v35 = *(_OWORD *)&v342.__r_.__value_.__l.__data_;
      *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *(_OWORD *)&v342.__r_.__value_.__l.__data_;
      if (v342.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(v342.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v359, (__int128 *)v23 + 3, v35);
      if (*((_QWORD *)&v35 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
      }
      v40 = v359[37];
      v41 = v359[38];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        do
          v44 = __ldxr(v42);
        while (__stxr(v44 + 1, v42));
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)v23 + 36);
      *((_QWORD *)v23 + 35) = v40;
      *((_QWORD *)v23 + 36) = v41;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (v41)
      {
        v48 = (unint64_t *)&v41->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v50 = espresso_plan_build();
      std::string::basic_string[abi:ne180100]<0>(&v354, "Unable to build gru plan.");
      if (v50)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        v266 = SHIBYTE(v354.__r_.__value_.__r.__words[2]);
        v267 = v354.__r_.__value_.__r.__words[0];
        status_string = (const char *)espresso_get_status_string();
        v269 = &v354;
        if (v266 < 0)
          v269 = (std::string *)v267;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v269, v50, status_string);
        MEMORY[0x1DF0EC99C](exception, &v362);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v354.__r_.__value_.__l.__data_);
      v51 = espresso_plan_build();
      std::string::basic_string[abi:ne180100]<0>(&v353, "Unable to build linear plan.");
      if (v51)
      {
        v270 = __cxa_allocate_exception(0x10uLL);
        v271 = SHIBYTE(v353.__r_.__value_.__r.__words[2]);
        v272 = v353.__r_.__value_.__r.__words[0];
        v273 = (const char *)espresso_get_status_string();
        v274 = &v353;
        if (v271 < 0)
          v274 = (std::string *)v272;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v274, v51, v273);
        MEMORY[0x1DF0EC99C](v270, &v362);
        __cxa_throw(v270, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v353.__r_.__value_.__l.__data_);
      v52 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v352, "Unable to bind graph_input_input_mel");
      if (v52)
      {
        v275 = __cxa_allocate_exception(0x10uLL);
        v276 = SHIBYTE(v352.__r_.__value_.__r.__words[2]);
        v277 = v352.__r_.__value_.__r.__words[0];
        v278 = (const char *)espresso_get_status_string();
        v279 = &v352;
        if (v276 < 0)
          v279 = (std::string *)v277;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v279, v52, v278);
        MEMORY[0x1DF0EC99C](v275, &v362);
        __cxa_throw(v275, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v352.__r_.__value_.__l.__data_);
      v53 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to bind graph_output_mel_linear_output");
      if (v53)
      {
        v280 = __cxa_allocate_exception(0x10uLL);
        v281 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v282 = __p.__r_.__value_.__r.__words[0];
        v283 = (const char *)espresso_get_status_string();
        p_p = &__p;
        if (v281 < 0)
          p_p = (std::string *)v282;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)p_p, v53, v283);
        MEMORY[0x1DF0EC99C](v280, &v362);
        __cxa_throw(v280, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v54 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v350, "Unable to bind graph_input_input_mel_linear");
      if (v54)
      {
        v285 = __cxa_allocate_exception(0x10uLL);
        v286 = SHIBYTE(v350.__r_.__value_.__r.__words[2]);
        v287 = v350.__r_.__value_.__r.__words[0];
        v288 = (const char *)espresso_get_status_string();
        v289 = &v350;
        if (v286 < 0)
          v289 = (std::string *)v287;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v289, v54, v288);
        MEMORY[0x1DF0EC99C](v285, &v362);
        __cxa_throw(v285, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v350.__r_.__value_.__l.__data_);
      v55 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v349, "Unable to bind graph_input_input_coarse");
      if (v55)
      {
        v290 = __cxa_allocate_exception(0x10uLL);
        v291 = SHIBYTE(v349.__r_.__value_.__r.__words[2]);
        v292 = v349.__r_.__value_.__r.__words[0];
        v293 = (const char *)espresso_get_status_string();
        v294 = &v349;
        if (v291 < 0)
          v294 = (std::string *)v292;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v294, v55, v293);
        MEMORY[0x1DF0EC99C](v290, &v362);
        __cxa_throw(v290, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v349.__r_.__value_.__l.__data_);
      v56 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v348, "Unable to bind graph_input_state");
      if (v56)
      {
        v295 = __cxa_allocate_exception(0x10uLL);
        v296 = SHIBYTE(v348.__r_.__value_.__r.__words[2]);
        v297 = v348.__r_.__value_.__r.__words[0];
        v298 = (const char *)espresso_get_status_string();
        v299 = &v348;
        if (v296 < 0)
          v299 = (std::string *)v297;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v299, v56, v298);
        MEMORY[0x1DF0EC99C](v295, &v362);
        __cxa_throw(v295, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v348.__r_.__value_.__l.__data_);
      v57 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v347, "Unable to bind graph_output_coarse_out");
      if (v57)
      {
        v300 = __cxa_allocate_exception(0x10uLL);
        v301 = SHIBYTE(v347.__r_.__value_.__r.__words[2]);
        v302 = v347.__r_.__value_.__r.__words[0];
        v303 = (const char *)espresso_get_status_string();
        v304 = &v347;
        if (v301 < 0)
          v304 = (std::string *)v302;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v304, v57, v303);
        MEMORY[0x1DF0EC99C](v300, &v362);
        __cxa_throw(v300, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v347.__r_.__value_.__l.__data_);
      v58 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v346, "Unable to bind graph_output_fine_out");
      if (v58)
      {
        v305 = __cxa_allocate_exception(0x10uLL);
        v306 = SHIBYTE(v346.__r_.__value_.__r.__words[2]);
        v307 = v346.__r_.__value_.__r.__words[0];
        v308 = (const char *)espresso_get_status_string();
        v309 = &v346;
        if (v306 < 0)
          v309 = (std::string *)v307;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v309, v58, v308);
        MEMORY[0x1DF0EC99C](v305, &v362);
        __cxa_throw(v305, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v346.__r_.__value_.__l.__data_);
      v59 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v345, "Unable to bind graph_output_final_state");
      if (v59)
      {
        v310 = __cxa_allocate_exception(0x10uLL);
        v311 = SHIBYTE(v345.__r_.__value_.__r.__words[2]);
        v312 = v345.__r_.__value_.__r.__words[0];
        v313 = (const char *)espresso_get_status_string();
        v314 = &v345;
        if (v311 < 0)
          v314 = (std::string *)v312;
        StringFormatter::StringFormatter((StringFormatter *)&v362, "%s Error: %d, %s", (const char *)v314, v59, v313);
        MEMORY[0x1DF0EC99C](v310, &v362);
        __cxa_throw(v310, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v345.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
      v60 = v360;
      if (v360)
      {
        v61 = (unint64_t *)&v360->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (v25)
      {
        v63 = (unint64_t *)&v25->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      *(_QWORD *)&v65 = v23 + 24;
      *((_QWORD *)&v65 + 1) = v23;
      v66 = *(std::__shared_weak_count **)(a1 + 280);
      *(_OWORD *)(a1 + 272) = v65;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      LOBYTE(v19) = *(_BYTE *)(a1 + 383);
    }
    v22 = strlen((const char *)(0x80000001DECFC331 & 0x7FFFFFFFFFFFFFFFLL));
    if ((v19 & 0x80) == 0)
    {
      v21 = v19;
      goto LABEL_149;
    }
    v21 = *(_QWORD *)(a1 + 368);
LABEL_153:
    if (v22 != v21)
    {
      v71 = strlen((const char *)(0x80000001DECFC35ELL & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_162;
    }
    if (v21 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v70 = *v333;
    v69 = 1;
    goto LABEL_156;
  }
  v20 = (void *)(a1 + 360);
  v21 = *(unsigned __int8 *)(a1 + 383);
  if (v18 == v21)
    goto LABEL_33;
  v22 = strlen((const char *)(0x80000001DECFC331 & 0x7FFFFFFFFFFFFFFFLL));
LABEL_149:
  if (v22 != v21)
  {
    v71 = strlen((const char *)(0x80000001DECFC35ELL & 0x7FFFFFFFFFFFFFFFLL));
    goto LABEL_159;
  }
  v69 = 0;
  v70 = (void *)(a1 + 360);
LABEL_156:
  if (memcmp(v70, (const void *)(0x80000001DECFC331 & 0x7FFFFFFFFFFFFFFFLL), v21))
  {
    v71 = strlen((const char *)(0x80000001DECFC35ELL & 0x7FFFFFFFFFFFFFFFLL));
    if (v69)
    {
      v21 = *(_QWORD *)(a1 + 368);
LABEL_162:
      if (v71 != v21)
        goto LABEL_631;
      if (v21 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v73 = *v333;
      goto LABEL_165;
    }
LABEL_159:
    v72 = v71 == v19;
    v21 = v71;
    v73 = (void *)(a1 + 360);
    if (!v72)
      goto LABEL_631;
LABEL_165:
    if (!memcmp(v73, (const void *)(0x80000001DECFC35ELL & 0x7FFFFFFFFFFFFFFFLL), v21))
    {
      v74 = operator new(0x160uLL);
      v75 = v74;
      v74[1] = 0;
      v74[2] = 0;
      *v74 = &off_1EA935420;
      v76 = v74 + 3;
      v77 = *a3;
      v78 = (std::__shared_weak_count *)a3[1];
      v337 = v77;
      v338 = v78;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        v357 = v77;
        v358 = v78;
        v81 = (unint64_t *)&v78->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      else
      {
        v357 = v77;
        v358 = 0;
      }
      MilWaveRNNInference::MilWaveRNNInference((uint64_t)(v74 + 3), a2);
      if (v78)
      {
        v177 = (unint64_t *)&v78->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v75[3] = &off_1EA921FC0;
      MilWaveRNNInference::Config::Config((uint64_t)(v75 + 9), a2);
      v179 = (void **)(v75 + 11);
      std::string::basic_string[abi:ne180100]<0>(v75 + 11, "input_mel");
      v180 = (void **)(v75 + 14);
      std::string::basic_string[abi:ne180100]<0>(v75 + 14, "Identity_1");
      v181 = (void **)(v75 + 17);
      std::string::basic_string[abi:ne180100]<0>(v75 + 17, "input_mel_linear");
      v332 = (void **)(v75 + 20);
      std::string::basic_string[abi:ne180100]<0>(v75 + 20, "input_audio");
      v329 = (void **)(v75 + 23);
      std::string::basic_string[abi:ne180100]<0>(v75 + 23, "state");
      v326 = (void **)(v75 + 26);
      std::string::basic_string[abi:ne180100]<0>(v75 + 26, "Identity_2");
      v323 = (void **)(v75 + 29);
      std::string::basic_string[abi:ne180100]<0>(v75 + 29, "Identity_3");
      v317 = v76;
      v320 = (void **)(v75 + 32);
      std::string::basic_string[abi:ne180100]<0>(v75 + 32, "Identity");
      v182 = (void **)(v75 + 35);
      std::string::basic_string[abi:ne180100]<0>(v75 + 35, "fp16");
      v75[38] = 0x1C000000050;
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_linear_model_input_input_mel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 111) < 0)
        operator delete(*v179);
      *(_OWORD *)v179 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[13] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_linear_model_output_mel_linear_output");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 135) < 0)
        operator delete(*v180);
      *(_OWORD *)v180 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[16] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_input_mel_linear");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 159) < 0)
        operator delete(*v181);
      *(_OWORD *)v181 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[19] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_input_audio");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 183) < 0)
        operator delete(*v332);
      *(_OWORD *)v332 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[22] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 207) < 0)
        operator delete(*v329);
      *(_OWORD *)v329 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[25] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_odd_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 231) < 0)
        operator delete(*v326);
      *(_OWORD *)v326 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[28] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_even_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 255) < 0)
        operator delete(*v323);
      *(_OWORD *)v323 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[31] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_final_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 279) < 0)
        operator delete(*v320);
      *(_OWORD *)v320 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[34] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v359, "model_io_dtype");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fp16", a2, (const void **)&v359, &v362);
      if (*((char *)v75 + 303) < 0)
        operator delete(*v182);
      *(_OWORD *)v182 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
      v75[37] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
      *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
      v362.__r_.__value_.__s.__data_[0] = 0;
      if (v361 < 0)
        operator delete(v359);
      std::string::basic_string[abi:ne180100]<0>(&v362, "graph_linear_model_mel_size");
      *((_DWORD *)v75 + 76) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v362.__r_.__value_.__l.__data_, (unsigned int *)v75 + 76);
      if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v362.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v362, "graph_gru_model_hidden_size");
      *((_DWORD *)v75 + 77) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v362.__r_.__value_.__l.__data_, (unsigned int *)v75 + 77);
      if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v362.__r_.__value_.__l.__data_);
      v75[39] = 0;
      v75[40] = 0;
      *(_QWORD *)((char *)v75 + 340) = 0;
      *(_QWORD *)((char *)v75 + 332) = 0;
      v183 = v337;
      v184 = v338;
      v355 = v337;
      v356 = v338;
      if (v338)
      {
        v185 = (unint64_t *)&v338->__shared_owners_;
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
      }
      v187 = (void ***)(v75 + 39);
      PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v362, (__int128 *)v75 + 3, v183);
      if (v184)
      {
        v188 = (unint64_t *)&v184->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      v190 = *(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 296);
      v191 = *(std::__shared_weak_count **)(v362.__r_.__value_.__r.__words[0] + 304);
      if (v191)
      {
        v192 = (unint64_t *)&v191->__shared_owners_;
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
        do
          v194 = __ldxr(v192);
        while (__stxr(v194 + 1, v192));
      }
      v195 = (std::__shared_weak_count *)v75[40];
      v75[39] = v190;
      v75[40] = v191;
      if (v195)
      {
        v196 = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      if (v191)
      {
        v198 = (unint64_t *)&v191->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v201 = (std::__shared_weak_count **)**v187;
      v200 = (std::__shared_weak_count *)(*v187)[1];
      v359 = v201;
      v360 = v200;
      if (v200)
      {
        v202 = (unint64_t *)&v200->__shared_owners_;
        do
          v203 = __ldxr(v202);
        while (__stxr(v203 + 1, v202));
      }
      if (*((char *)v75 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v354, (const std::string::value_type *)v75[11], v75[12]);
      }
      else
      {
        *(_OWORD *)&v354.__r_.__value_.__l.__data_ = *(_OWORD *)v179;
        v354.__r_.__value_.__r.__words[2] = v75[13];
      }
      v204 = *((_DWORD *)v75 + 76);
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v353, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v353.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v353.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v201, (__int128 *)&v354, v204, (uint64_t)&v353);
      if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v353.__r_.__value_.__l.__data_);
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v354.__r_.__value_.__l.__data_);
      if (v200)
      {
        v205 = (unint64_t *)&v200->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      v208 = (std::__shared_weak_count **)**v187;
      v207 = (std::__shared_weak_count *)(*v187)[1];
      v359 = v208;
      v360 = v207;
      if (v207)
      {
        v209 = (unint64_t *)&v207->__shared_owners_;
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      if (*((char *)v75 + 135) < 0)
      {
        std::string::__init_copy_ctor_external(&v352, (const std::string::value_type *)v75[14], v75[15]);
      }
      else
      {
        *(_OWORD *)&v352.__r_.__value_.__l.__data_ = *(_OWORD *)v180;
        v352.__r_.__value_.__r.__words[2] = v75[16];
      }
      v211 = *((_DWORD *)v75 + 77);
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        __p.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v208, (__int128 *)&v352, 3 * v211, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v352.__r_.__value_.__l.__data_);
      if (v207)
      {
        v212 = (unint64_t *)&v207->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
      v215 = (std::__shared_weak_count **)(*v187)[2];
      v214 = (std::__shared_weak_count *)(*v187)[3];
      v359 = v215;
      v360 = v214;
      if (v214)
      {
        v216 = (unint64_t *)&v214->__shared_owners_;
        do
          v217 = __ldxr(v216);
        while (__stxr(v217 + 1, v216));
      }
      if (*((char *)v75 + 159) < 0)
      {
        std::string::__init_copy_ctor_external(&v350, (const std::string::value_type *)v75[17], v75[18]);
      }
      else
      {
        *(_OWORD *)&v350.__r_.__value_.__l.__data_ = *(_OWORD *)v181;
        v350.__r_.__value_.__r.__words[2] = v75[19];
      }
      v218 = *((_DWORD *)v75 + 77);
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v349, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v349.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v349.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v215, (__int128 *)&v350, 3 * v218, (uint64_t)&v349);
      if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v349.__r_.__value_.__l.__data_);
      if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v350.__r_.__value_.__l.__data_);
      if (v214)
      {
        v219 = (unint64_t *)&v214->__shared_owners_;
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      v222 = (std::__shared_weak_count **)(*v187)[2];
      v221 = (std::__shared_weak_count *)(*v187)[3];
      v359 = v222;
      v360 = v221;
      if (v221)
      {
        v223 = (unint64_t *)&v221->__shared_owners_;
        do
          v224 = __ldxr(v223);
        while (__stxr(v224 + 1, v223));
      }
      if (*((char *)v75 + 183) < 0)
      {
        std::string::__init_copy_ctor_external(&v348, (const std::string::value_type *)v75[20], v75[21]);
      }
      else
      {
        *(_OWORD *)&v348.__r_.__value_.__l.__data_ = *(_OWORD *)v332;
        v348.__r_.__value_.__r.__words[2] = v75[22];
      }
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v347, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v347.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v347.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v222, (__int128 *)&v348, 4, (uint64_t)&v347);
      if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v347.__r_.__value_.__l.__data_);
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v348.__r_.__value_.__l.__data_);
      if (v221)
      {
        v225 = (unint64_t *)&v221->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      v228 = (std::__shared_weak_count **)(*v187)[2];
      v227 = (std::__shared_weak_count *)(*v187)[3];
      v359 = v228;
      v360 = v227;
      if (v227)
      {
        v229 = (unint64_t *)&v227->__shared_owners_;
        do
          v230 = __ldxr(v229);
        while (__stxr(v230 + 1, v229));
      }
      if (*((char *)v75 + 207) < 0)
      {
        std::string::__init_copy_ctor_external(&v346, (const std::string::value_type *)v75[23], v75[24]);
      }
      else
      {
        *(_OWORD *)&v346.__r_.__value_.__l.__data_ = *(_OWORD *)v329;
        v346.__r_.__value_.__r.__words[2] = v75[25];
      }
      v231 = *((_DWORD *)v75 + 77);
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v345, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v345.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v345.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v228, (__int128 *)&v346, v231, (uint64_t)&v345);
      if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v345.__r_.__value_.__l.__data_);
      if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v346.__r_.__value_.__l.__data_);
      if (v227)
      {
        v232 = (unint64_t *)&v227->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      v235 = (std::__shared_weak_count **)(*v187)[2];
      v234 = (std::__shared_weak_count *)(*v187)[3];
      v359 = v235;
      v360 = v234;
      if (v234)
      {
        v236 = (unint64_t *)&v234->__shared_owners_;
        do
          v237 = __ldxr(v236);
        while (__stxr(v237 + 1, v236));
      }
      if (*((char *)v75 + 231) < 0)
      {
        std::string::__init_copy_ctor_external(&v344, (const std::string::value_type *)v75[26], v75[27]);
      }
      else
      {
        *(_OWORD *)&v344.__r_.__value_.__l.__data_ = *(_OWORD *)v326;
        v344.__r_.__value_.__r.__words[2] = v75[28];
      }
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v343, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v343.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v235, (__int128 *)&v344, 1, (uint64_t)&v343);
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v343.__r_.__value_.__l.__data_);
      if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v344.__r_.__value_.__l.__data_);
      if (v234)
      {
        v238 = (unint64_t *)&v234->__shared_owners_;
        do
          v239 = __ldaxr(v238);
        while (__stlxr(v239 - 1, v238));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          std::__shared_weak_count::__release_weak(v234);
        }
      }
      v241 = (std::__shared_weak_count **)(*v187)[2];
      v240 = (std::__shared_weak_count *)(*v187)[3];
      v359 = v241;
      v360 = v240;
      if (v240)
      {
        v242 = (unint64_t *)&v240->__shared_owners_;
        do
          v243 = __ldxr(v242);
        while (__stxr(v243 + 1, v242));
      }
      if (*((char *)v75 + 255) < 0)
      {
        std::string::__init_copy_ctor_external(&v342, (const std::string::value_type *)v75[29], v75[30]);
      }
      else
      {
        *(_OWORD *)&v342.__r_.__value_.__l.__data_ = *(_OWORD *)v323;
        v342.__r_.__value_.__r.__words[2] = v75[31];
      }
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v341, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v341.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v341.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v241, (__int128 *)&v342, 1, (uint64_t)&v341);
      if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v341.__r_.__value_.__l.__data_);
      if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v342.__r_.__value_.__l.__data_);
      if (v240)
      {
        v244 = (unint64_t *)&v240->__shared_owners_;
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      v247 = (std::__shared_weak_count **)(*v187)[2];
      v246 = (std::__shared_weak_count *)(*v187)[3];
      v359 = v247;
      v360 = v246;
      if (v246)
      {
        v248 = (unint64_t *)&v246->__shared_owners_;
        do
          v249 = __ldxr(v248);
        while (__stxr(v249 + 1, v248));
      }
      if (*((char *)v75 + 279) < 0)
      {
        std::string::__init_copy_ctor_external(&v340, (const std::string::value_type *)v75[32], v75[33]);
      }
      else
      {
        *(_OWORD *)&v340.__r_.__value_.__l.__data_ = *(_OWORD *)v320;
        v340.__r_.__value_.__r.__words[2] = v75[34];
      }
      v250 = *((_DWORD *)v75 + 77);
      if (*((char *)v75 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v339, (const std::string::value_type *)v75[35], v75[36]);
      }
      else
      {
        *(_OWORD *)&v339.__r_.__value_.__l.__data_ = *(_OWORD *)v182;
        v339.__r_.__value_.__r.__words[2] = v75[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v247, (__int128 *)&v340, v250, (uint64_t)&v339);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v340.__r_.__value_.__l.__data_);
      if (v246)
      {
        v251 = (unint64_t *)&v246->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
        }
      }
      (*(void (**)(_QWORD *))(*v317 + 8))(v317);
      size = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
      if (v362.__r_.__value_.__l.__size_)
      {
        v254 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v78)
      {
        v256 = (unint64_t *)&v78->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      *(_QWORD *)&v258 = v317;
      *((_QWORD *)&v258 + 1) = v75;
      v174 = *(std::__shared_weak_count **)(a1 + 280);
      *(_OWORD *)(a1 + 272) = v258;
      if (v174)
      {
        v259 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v259);
        while (__stlxr(v176 - 1, v259));
        goto LABEL_629;
      }
    }
    goto LABEL_631;
  }
  v83 = operator new(0x150uLL);
  v84 = v83;
  v83[1] = 0;
  v83[2] = 0;
  *v83 = &off_1EA935768;
  v85 = v83 + 3;
  v86 = *a3;
  v87 = (std::__shared_weak_count *)a3[1];
  v337 = v86;
  v338 = v87;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    v357 = v86;
    v358 = v87;
    v90 = (unint64_t *)&v87->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  else
  {
    v357 = v86;
    v358 = 0;
  }
  MilWaveRNNInference::MilWaveRNNInference((uint64_t)(v83 + 3), a2);
  if (v87)
  {
    v92 = (unint64_t *)&v87->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v84[3] = &off_1EA922430;
  MilWaveRNNInference::Config::Config((uint64_t)(v84 + 9), a2);
  v94 = (void **)(v84 + 11);
  std::string::basic_string[abi:ne180100]<0>(v84 + 11, "input_mel");
  v95 = (void **)(v84 + 14);
  std::string::basic_string[abi:ne180100]<0>(v84 + 14, "Identity_1");
  v96 = (void **)(v84 + 17);
  std::string::basic_string[abi:ne180100]<0>(v84 + 17, "input_mel_linear");
  v331 = (void **)(v84 + 20);
  std::string::basic_string[abi:ne180100]<0>(v84 + 20, "input_coarse");
  v328 = (void **)(v84 + 23);
  std::string::basic_string[abi:ne180100]<0>(v84 + 23, "state");
  v325 = (void **)(v84 + 26);
  std::string::basic_string[abi:ne180100]<0>(v84 + 26, "Identity_2");
  v322 = (void **)(v84 + 29);
  std::string::basic_string[abi:ne180100]<0>(v84 + 29, "Identity_3");
  v316 = v85;
  v319 = (void **)(v84 + 32);
  std::string::basic_string[abi:ne180100]<0>(v84 + 32, "Identity");
  v97 = (void **)(v84 + 35);
  std::string::basic_string[abi:ne180100]<0>(v84 + 35, "fp16");
  v84[38] = 0x1C000000050;
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_linear_model_input_input_mel");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 111) < 0)
    operator delete(*v94);
  *(_OWORD *)v94 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[13] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_linear_model_output_mel_linear_output");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 135) < 0)
    operator delete(*v95);
  *(_OWORD *)v95 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[16] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_input_mel_linear");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 159) < 0)
    operator delete(*v96);
  *(_OWORD *)v96 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[19] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_input_coarse");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 183) < 0)
    operator delete(*v331);
  *(_OWORD *)v331 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[22] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_input_state");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 207) < 0)
    operator delete(*v328);
  *(_OWORD *)v328 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[25] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_coarse_out");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 231) < 0)
    operator delete(*v325);
  *(_OWORD *)v325 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[28] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_fine_out");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 255) < 0)
    operator delete(*v322);
  *(_OWORD *)v322 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[31] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "graph_gru_model_output_final_state");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 279) < 0)
    operator delete(*v319);
  *(_OWORD *)v319 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[34] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v359, "model_io_dtype");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fp16", a2, (const void **)&v359, &v362);
  if (*((char *)v84 + 303) < 0)
    operator delete(*v97);
  *(_OWORD *)v97 = *(_OWORD *)&v362.__r_.__value_.__l.__data_;
  v84[37] = *((_QWORD *)&v362.__r_.__value_.__l + 2);
  *((_BYTE *)&v362.__r_.__value_.__s + 23) = 0;
  v362.__r_.__value_.__s.__data_[0] = 0;
  if (v361 < 0)
    operator delete(v359);
  std::string::basic_string[abi:ne180100]<0>(&v362, "graph_linear_model_mel_size");
  *((_DWORD *)v84 + 76) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v362.__r_.__value_.__l.__data_, (unsigned int *)v84 + 76);
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v362, "graph_gru_model_hidden_size");
  *((_DWORD *)v84 + 77) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v362.__r_.__value_.__l.__data_, (unsigned int *)v84 + 77);
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  v84[39] = 0;
  v84[40] = 0;
  v98 = v337;
  v99 = v338;
  v355 = v337;
  v356 = v338;
  if (v338)
  {
    v100 = (unint64_t *)&v338->__shared_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = (void ***)(v84 + 39);
  PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v362, (__int128 *)v84 + 3, v98);
  if (v99)
  {
    v103 = (unint64_t *)&v99->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v105 = *(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 296);
  v106 = *(std::__shared_weak_count **)(v362.__r_.__value_.__r.__words[0] + 304);
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
  }
  v110 = (std::__shared_weak_count *)v84[40];
  v84[39] = v105;
  v84[40] = v106;
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (v106)
  {
    v113 = (unint64_t *)&v106->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v116 = (std::__shared_weak_count **)**v102;
  v115 = (std::__shared_weak_count *)(*v102)[1];
  v359 = v116;
  v360 = v115;
  if (v115)
  {
    v117 = (unint64_t *)&v115->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  if (*((char *)v84 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v354, (const std::string::value_type *)v84[11], v84[12]);
  }
  else
  {
    *(_OWORD *)&v354.__r_.__value_.__l.__data_ = *(_OWORD *)v94;
    v354.__r_.__value_.__r.__words[2] = v84[13];
  }
  v119 = *((_DWORD *)v84 + 76);
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v353, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v353.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v353.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v116, (__int128 *)&v354, v119, (uint64_t)&v353);
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  if (v115)
  {
    v120 = (unint64_t *)&v115->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v123 = (std::__shared_weak_count **)**v102;
  v122 = (std::__shared_weak_count *)(*v102)[1];
  v359 = v123;
  v360 = v122;
  if (v122)
  {
    v124 = (unint64_t *)&v122->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  if (*((char *)v84 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(&v352, (const std::string::value_type *)v84[14], v84[15]);
  }
  else
  {
    *(_OWORD *)&v352.__r_.__value_.__l.__data_ = *(_OWORD *)v95;
    v352.__r_.__value_.__r.__words[2] = v84[16];
  }
  v126 = *((_DWORD *)v84 + 77);
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    __p.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v123, (__int128 *)&v352, 3 * v126, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  if (v122)
  {
    v127 = (unint64_t *)&v122->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v130 = (std::__shared_weak_count **)(*v102)[2];
  v129 = (std::__shared_weak_count *)(*v102)[3];
  v359 = v130;
  v360 = v129;
  if (v129)
  {
    v131 = (unint64_t *)&v129->__shared_owners_;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  if (*((char *)v84 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(&v350, (const std::string::value_type *)v84[17], v84[18]);
  }
  else
  {
    *(_OWORD *)&v350.__r_.__value_.__l.__data_ = *(_OWORD *)v96;
    v350.__r_.__value_.__r.__words[2] = v84[19];
  }
  v133 = *((_DWORD *)v84 + 77);
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v349, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v349.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v349.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v130, (__int128 *)&v350, 3 * v133, (uint64_t)&v349);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v350.__r_.__value_.__l.__data_);
  if (v129)
  {
    v134 = (unint64_t *)&v129->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v137 = (std::__shared_weak_count **)(*v102)[2];
  v136 = (std::__shared_weak_count *)(*v102)[3];
  v359 = v137;
  v360 = v136;
  if (v136)
  {
    v138 = (unint64_t *)&v136->__shared_owners_;
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  if (*((char *)v84 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(&v348, (const std::string::value_type *)v84[20], v84[21]);
  }
  else
  {
    *(_OWORD *)&v348.__r_.__value_.__l.__data_ = *(_OWORD *)v331;
    v348.__r_.__value_.__r.__words[2] = v84[22];
  }
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v347, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v347.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v347.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v137, (__int128 *)&v348, 1, (uint64_t)&v347);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  if (v136)
  {
    v140 = (unint64_t *)&v136->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v143 = (std::__shared_weak_count **)(*v102)[2];
  v142 = (std::__shared_weak_count *)(*v102)[3];
  v359 = v143;
  v360 = v142;
  if (v142)
  {
    v144 = (unint64_t *)&v142->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  if (*((char *)v84 + 207) < 0)
  {
    std::string::__init_copy_ctor_external(&v346, (const std::string::value_type *)v84[23], v84[24]);
  }
  else
  {
    *(_OWORD *)&v346.__r_.__value_.__l.__data_ = *(_OWORD *)v328;
    v346.__r_.__value_.__r.__words[2] = v84[25];
  }
  v146 = *((_DWORD *)v84 + 77);
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v345, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v345.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v345.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v143, (__int128 *)&v346, v146, (uint64_t)&v345);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  if (v142)
  {
    v147 = (unint64_t *)&v142->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v150 = (std::__shared_weak_count **)(*v102)[2];
  v149 = (std::__shared_weak_count *)(*v102)[3];
  v359 = v150;
  v360 = v149;
  if (v149)
  {
    v151 = (unint64_t *)&v149->__shared_owners_;
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  if (*((char *)v84 + 231) < 0)
  {
    std::string::__init_copy_ctor_external(&v344, (const std::string::value_type *)v84[26], v84[27]);
  }
  else
  {
    *(_OWORD *)&v344.__r_.__value_.__l.__data_ = *(_OWORD *)v325;
    v344.__r_.__value_.__r.__words[2] = v84[28];
  }
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v343, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v343.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v150, (__int128 *)&v344, 1, (uint64_t)&v343);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  if (v149)
  {
    v153 = (unint64_t *)&v149->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v156 = (std::__shared_weak_count **)(*v102)[2];
  v155 = (std::__shared_weak_count *)(*v102)[3];
  v359 = v156;
  v360 = v155;
  if (v155)
  {
    v157 = (unint64_t *)&v155->__shared_owners_;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
  }
  if (*((char *)v84 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(&v342, (const std::string::value_type *)v84[29], v84[30]);
  }
  else
  {
    *(_OWORD *)&v342.__r_.__value_.__l.__data_ = *(_OWORD *)v322;
    v342.__r_.__value_.__r.__words[2] = v84[31];
  }
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v341, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v341.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v341.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v156, (__int128 *)&v342, 1, (uint64_t)&v341);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  if (v155)
  {
    v159 = (unint64_t *)&v155->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v162 = (std::__shared_weak_count **)(*v102)[2];
  v161 = (std::__shared_weak_count *)(*v102)[3];
  v359 = v162;
  v360 = v161;
  if (v161)
  {
    v163 = (unint64_t *)&v161->__shared_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  if (*((char *)v84 + 279) < 0)
  {
    std::string::__init_copy_ctor_external(&v340, (const std::string::value_type *)v84[32], v84[33]);
  }
  else
  {
    *(_OWORD *)&v340.__r_.__value_.__l.__data_ = *(_OWORD *)v319;
    v340.__r_.__value_.__r.__words[2] = v84[34];
  }
  v165 = *((_DWORD *)v84 + 77);
  if (*((char *)v84 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v339, (const std::string::value_type *)v84[35], v84[36]);
  }
  else
  {
    *(_OWORD *)&v339.__r_.__value_.__l.__data_ = *(_OWORD *)v97;
    v339.__r_.__value_.__r.__words[2] = v84[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v162, (__int128 *)&v340, v165, (uint64_t)&v339);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (v161)
  {
    v166 = (unint64_t *)&v161->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  (*(void (**)(_QWORD *))(*v316 + 8))(v316);
  v168 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
  if (v362.__r_.__value_.__l.__size_)
  {
    v169 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  if (v87)
  {
    v171 = (unint64_t *)&v87->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  *(_QWORD *)&v173 = v316;
  *((_QWORD *)&v173 + 1) = v84;
  v174 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v173;
  if (v174)
  {
    v175 = (unint64_t *)&v174->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
LABEL_629:
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
LABEL_631:
  if (!*(_QWORD *)(a1 + 272))
  {
    v264 = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v362, "Model type is not supported.");
    MEMORY[0x1DF0EC99C](v264, &v362);
    __cxa_throw(v264, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v260 = v335;
  if (v335)
  {
    v261 = (unint64_t *)&v335->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  return a1;
}

void sub_1DE988E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, Mil2BnnsWaveRNNFusedSubscaleInference::Config *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void *v66;

  if (*(char *)(v64 - 89) < 0)
  {
    operator delete(*(void **)(v64 - 112));
    if ((v62 & 1) == 0)
    {
LABEL_6:
      if (a60 < 0)
        operator delete(__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v64 - 136);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)a14);
      MilWaveRNNFusedSubscaleInference::Config::~Config(a13);
      *(_QWORD *)(v63 + 24) = &unk_1EA91F6E8;
      if (*(char *)(v63 + 71) < 0)
        operator delete(*(void **)(v63 + 48));
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v63);
      operator delete(v66);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      if (*(char *)(v60 + 383) < 0)
        operator delete(*a22);
      std::mutex::~mutex((std::mutex *)(v60 + 296));
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a21);
      Module::~Module((Module *)v60);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v61);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1EA921FC0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 312);
  Mil2BnnsWaveRNNFusedSubscaleInference::Config::~Config((void **)(a1 + 72));
  *(_QWORD *)(a1 + 24) = &unk_1EA91F6E8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1EA922430;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 312);
  Mil2BnnsWaveRNNFusedSubscaleInference::Config::~Config((void **)(a1 + 72));
  *(_QWORD *)(a1 + 24) = &unk_1EA91F6E8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1EA921FE0;
  espresso_plan_build_clean();
  espresso_plan_build_clean();
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 280);
  MilWaveRNNFusedSubscaleInference::Config::~Config((void **)(a1 + 72));
  *(_QWORD *)(a1 + 24) = &unk_1EA91F6E8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void TokenizerEngine::next_token(TokenizerEngine *this, uint64_t a2, int a3)
{
  BOOL v5;
  UChar32 v6;
  unsigned int v7;
  int v8;
  std::basic_string<char16_t>::value_type v9;
  int v10;
  int v11;
  BOOL v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  _BYTE *v59;
  _BYTE *v61;
  uint8_t buf[4];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (*(_DWORD *)(a2 + 32) != *(_DWORD *)(a2 + 48))
  {
    v61 = (_BYTE *)(a2 + 65);
    while (1)
    {
      v6 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)(a2 + 24));
      if (v6 < 0)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v17 = *(int *)(a2 + 32);
          *(_DWORD *)buf = 134217984;
          v63 = v17;
          _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_ERROR, "Illegal UTF-8 character at offset %04tx", buf, 0xCu);
        }
        Diagnostics::log(3, "Illegal UTF-8 character at offset %04tx", v16, *(int *)(a2 + 32));
        TokenizerEngine::make_token(a2, (uint64_t)this);
        v18 = *(_DWORD *)(a2 + 60) + 1;
        goto LABEL_131;
      }
      v7 = v6;
      v8 = u_charType(v6);
      v10 = v8;
      v11 = 1 << v8;
      v13 = ((1 << v8) & 0x7F001) != 0 && v7 != 63743;
      if (v7 == 173)
      {
        if (*(char *)(a2 + 95) < 0)
          v14 = *(_QWORD *)(a2 + 80);
        else
          v14 = *(unsigned __int8 *)(a2 + 95);
        v23 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + *(int *)(a2 + 32));
        v24 = (v23 + 62);
        if (v23 <= 0xEF)
          v25 = 2;
        else
          v25 = 3;
        if (v23 <= 0xDF)
          v26 = v25;
        else
          v26 = v25 + 1;
        if (v24 >= 0x33)
          v26 = 1;
        if (!v14)
        {
          v18 = v26 + *(_DWORD *)(a2 + 60);
LABEL_131:
          *(_DWORD *)(a2 + 60) = v18;
          goto LABEL_132;
        }
        v27 = v26 + *(_DWORD *)(a2 + 56);
      }
      else
      {
        if ((v11 & 0x1C0) == 0)
        {
          if (*v61)
          {
            TokenizerEngine::make_token(a2, (uint64_t)this);
            v59 = v61;
            goto LABEL_149;
          }
          v28 = *(unsigned __int8 *)(a2 + 95);
          if (*(char *)(a2 + 95) < 0)
            v29 = *(_QWORD *)(a2 + 80);
          else
            v29 = *(unsigned __int8 *)(a2 + 95);
          v35 = (1 << v8) & 0x2E;
          if (v29)
          {
            if (*(_BYTE *)(a2 + 64))
            {
              if (v8 == 9)
                goto LABEL_71;
            }
            else if ((v11 & 0x2E) != 0)
            {
              goto LABEL_71;
            }
            TokenizerEngine::make_token(a2, (uint64_t)this);
            v28 = *(unsigned __int8 *)(a2 + 95);
          }
LABEL_71:
          v36 = v28;
          if ((v28 & 0x80) != 0)
            v36 = *(_QWORD *)(a2 + 80);
          v38 = v10 == 9 || v35 != 0;
          if (!v36 && v38)
            *(_BYTE *)(a2 + 64) = v10 == 9;
          if (!v13)
          {
            if ((v28 & 0x80u) == 0)
              v39 = v28;
            else
              v39 = *(_QWORD *)(a2 + 80);
            if (v7 < 0x10000)
              v40 = 1;
            else
              v40 = 2;
            std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)(a2 + 72), (int)v39 + v40, v9);
            if (HIWORD(v7))
            {
              if (*(char *)(a2 + 95) >= 0)
                v43 = a2 + 72;
              else
                v43 = *(_QWORD *)(a2 + 72);
              *(_WORD *)(v43 + 2 * (int)v39) = (v7 >> 10) - 10304;
              if (*(char *)(a2 + 95) >= 0)
                v41 = a2 + 72;
              else
                v41 = *(_QWORD *)(a2 + 72);
              v42 = (v39 << 32) + 0x100000000;
              LOWORD(v7) = v7 & 0x3FF | 0xDC00;
            }
            else
            {
              if (*(char *)(a2 + 95) >= 0)
                v41 = a2 + 72;
              else
                v41 = *(_QWORD *)(a2 + 72);
              v42 = v39 << 32;
            }
            *(_WORD *)(v41 + (v42 >> 31)) = v7;
            v44 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + *(int *)(a2 + 32));
            v45 = (v44 + 62);
            if (v44 <= 0xEF)
              v46 = 2;
            else
              v46 = 3;
            if (v44 <= 0xDF)
              v47 = v46;
            else
              v47 = v46 + 1;
            if (v45 >= 0x33)
              v47 = 1;
            *(_DWORD *)(a2 + 56) += v47;
            if (v35 || v10 == 9)
            {
              if (*(char *)(a2 + 95) < 0 && *(_QWORD *)(a2 + 80) >= 0x80uLL)
                TokenizerEngine::make_token(a2, (uint64_t)this);
            }
            else
            {
              *v61 = 1;
            }
            goto LABEL_132;
          }
          if (v7 == 10)
          {
            if (!*(_BYTE *)(a2 + 67))
            {
              *(_BYTE *)(a2 + 67) = 1;
              goto LABEL_122;
            }
          }
          else if (v7 != 8233)
          {
            if (v7 != 13)
            {
LABEL_122:
              v48 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + *(int *)(a2 + 32));
              v49 = (v48 + 62);
              if (v48 <= 0xEF)
                v50 = 2;
              else
                v50 = 3;
              if (v48 <= 0xDF)
                v51 = v50;
              else
                v51 = v50 + 1;
              if (v49 >= 0x33)
                v51 = 1;
              v18 = v51 + *(_DWORD *)(a2 + 60);
              goto LABEL_131;
            }
            if (!*(_BYTE *)(a2 + 66))
            {
              *(_BYTE *)(a2 + 66) = 1;
              goto LABEL_122;
            }
          }
          *(_BYTE *)(a2 + 68) = 1;
          goto LABEL_122;
        }
        if (*(char *)(a2 + 95) >= 0)
          v19 = *(unsigned __int8 *)(a2 + 95);
        else
          v19 = *(_QWORD *)(a2 + 80);
        if (v7 < 0x10000)
          v20 = 1;
        else
          v20 = 2;
        std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)(a2 + 72), (int)v19 + v20, v9);
        if (HIWORD(v7))
        {
          if (*(char *)(a2 + 95) >= 0)
            v30 = a2 + 72;
          else
            v30 = *(_QWORD *)(a2 + 72);
          *(_WORD *)(v30 + 2 * (int)v19) = (v7 >> 10) - 10304;
          if (*(char *)(a2 + 95) >= 0)
            v21 = a2 + 72;
          else
            v21 = *(_QWORD *)(a2 + 72);
          v22 = (v19 << 32) + 0x100000000;
          LOWORD(v7) = v7 & 0x3FF | 0xDC00;
        }
        else
        {
          if (*(char *)(a2 + 95) >= 0)
            v21 = a2 + 72;
          else
            v21 = *(_QWORD *)(a2 + 72);
          v22 = v19 << 32;
        }
        *(_WORD *)(v21 + (v22 >> 31)) = v7;
        v31 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + *(int *)(a2 + 32));
        v32 = (v31 + 62);
        if (v31 <= 0xEF)
          v33 = 2;
        else
          v33 = 3;
        if (v31 <= 0xDF)
          v34 = v33;
        else
          v34 = v33 + 1;
        if (v32 >= 0x33)
          v34 = 1;
        v27 = v34 + *(_DWORD *)(a2 + 56);
      }
      *(_DWORD *)(a2 + 56) = v27;
LABEL_132:
      v52 = *(int *)(a2 + 32);
      v53 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + v52);
      v54 = (v53 + 62);
      if (v53 <= 0xEF)
        v55 = 2;
      else
        v55 = 3;
      if (v53 <= 0xDF)
        v56 = v55;
      else
        v56 = v55 + 1;
      if (v54 >= 0x33)
        v56 = 1;
      v57 = v56 + v52;
      *(_DWORD *)(a2 + 32) = v57;
      v5 = *(_QWORD *)this != 0;
      if (v57 == *(_DWORD *)(a2 + 48) || *(_QWORD *)this != 0)
      {
        if (!a3)
          return;
        goto LABEL_147;
      }
    }
  }
  v5 = 0;
  if (a3)
  {
LABEL_147:
    if (!v5)
    {
      TokenizerEngine::make_token(a2, (uint64_t)this);
      v59 = (_BYTE *)(a2 + 65);
LABEL_149:
      *v59 = 0;
    }
  }
}

void sub_1DE98A108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  if (*(char *)(v11 + 47) < 0)
    operator delete(*a11);
  _Unwind_Resume(exception_object);
}

void TokenizerEngine::make_token(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  const UChar *v9;
  uint64_t v10;
  std::basic_string<char16_t>::value_type v11;
  void **v12;
  std::string v13;

  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      return;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    return;
  }
  v4 = (void **)(a1 + 72);
  if (*(_BYTE *)(a1 + 64) || *(_BYTE *)(a1 + 65))
    v5 = a1 + 104;
  else
    v5 = a1 + 96;
  UTFTransliterator::transliterate((std::basic_string<char16_t> *)&v13, v5, (const void **)(a1 + 72));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&v7 = v6;
  *((_QWORD *)&v7 + 1) = HIDWORD(v6);
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 68);
  v8 = *(char *)(a1 + 95);
  if (v8 >= 0)
    v9 = (const UChar *)(a1 + 72);
  else
    v9 = *(const UChar **)(a1 + 72);
  if (v8 >= 0)
    LODWORD(v10) = *(unsigned __int8 *)(a1 + 95);
  else
    v10 = *(_QWORD *)(a1 + 80);
  UTFString::to_utf8(&v13, v9, v10);
  v12 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)(a1 + 72), 0, v11);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 66) = 0;
  *(_BYTE *)(a1 + 68) = 0;
}

void std::basic_string<char16_t>::resize(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  std::basic_string<char16_t>::size_type v3;
  std::basic_string<char16_t>::size_type v4;
  std::basic_string<char16_t> *v5;
  unint64_t v6;
  std::basic_string<char16_t>::size_type v7;
  std::basic_string<char16_t>::size_type v8;
  std::basic_string<char16_t>::size_type v9;
  std::basic_string<char16_t>::size_type size;
  unint64_t v11;
  std::basic_string<char16_t> *v12;
  std::basic_string<char16_t> *v13;
  std::basic_string<char16_t>::size_type v14;
  std::basic_string<char16_t>::size_type v15;
  std::basic_string<char16_t> *v16;

  v5 = this;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v8 = __n - size;
    if (__n > size)
    {
      v7 = this->__r_.__value_.__l.__size_;
      v11 = this->__r_.__value_.__r.__words[2];
      v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v11);
      goto LABEL_6;
    }
    this->__r_.__value_.__l.__size_ = __n;
    v5 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
LABEL_16:
    v16 = (std::basic_string<char16_t> *)((char *)v5 + 2 * __n);
    goto LABEL_19;
  }
  v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v8 = __n - v7;
  if (__n <= v7)
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
    goto LABEL_16;
  }
  v9 = 10;
LABEL_6:
  if (v9 - v7 < v8)
  {
    std::basic_string<char16_t>::__grow_by(this, v9, v8 - v9 + v7, v7, v7, v3, v4);
    v5->__r_.__value_.__l.__size_ = v7;
    LOBYTE(v6) = *((_BYTE *)&v5->__r_.__value_.__s + 23);
  }
  v12 = v5;
  if ((v6 & 0x80) != 0)
    v12 = (std::basic_string<char16_t> *)v5->__r_.__value_.__r.__words[0];
  v13 = (std::basic_string<char16_t> *)((char *)v12 + 2 * v7);
  v14 = v8;
  do
  {
    v13->__r_.__value_.__s.__data_[0] = 0;
    v13 = (std::basic_string<char16_t> *)((char *)v13 + 2);
    --v14;
  }
  while (v14);
  v15 = v7 + v8;
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    v5->__r_.__value_.__l.__size_ = v15;
  else
    *((_BYTE *)&v5->__r_.__value_.__s + 23) = v15 & 0x7F;
  v16 = (std::basic_string<char16_t> *)((char *)v12 + 2 * v15);
LABEL_19:
  v16->__r_.__value_.__s.__data_[0] = 0;
}

void std::basic_string<char16_t>::__grow_by(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t> *v11;
  std::basic_string<char16_t>::size_type v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::basic_string<char16_t>::size_type v17;
  uint64_t v18;
  uint64_t v19;

  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v11 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v12 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v12 = 2 * __old_cap;
  v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v12 | 3) != 0xB)
    v13 = v12 | 3;
  if (v12 >= 0xB)
    v14 = v13 + 1;
  else
    v14 = 11;
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2)
    v15 = v14;
  else
    v15 = 0x7FFFFFFFFFFFFFF7;
  v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v15);
  v17 = (std::basic_string<char16_t>::size_type)v16;
  v19 = v18;
  if (__n_copy)
    memmove(v16, v11, 2 * __n_copy);
  if (__old_sz != __n_copy)
    memmove((void *)(v17 + 2 * __n_copy), (char *)v11 + 2 * __n_copy, 2 * (__old_sz - __n_copy));
  if (__old_cap != 10)
    operator delete(v11);
  this->__r_.__value_.__r.__words[0] = v17;
  this->__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
}

void RewriteImpl::~RewriteImpl(void **this)
{
  *this = &off_1EA91C900;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  FrontendNNModule::~FrontendNNModule(this);
}

{
  *this = &off_1EA91C900;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  FrontendNNModule::~FrontendNNModule(this);
  JUMPOUT(0x1DF0ED014);
}

void RewriteImpl::generate_tokens(RewriteImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  UTFRegex *v6;
  const char *v7;
  int64_t v8;
  UText *v9;
  UText *v10;
  URegularExpression **v11;
  int32_t v12;
  UErrorCode *v13;
  int32_t v14;
  UErrorCode *v15;
  int32_t v16;
  char v17;
  std::string *v18;
  std::string::size_type size;
  int data_low;
  int v22;
  char v25;
  std::string *p_str;
  std::string *v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  int data;
  int v34;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  UErrorCode *v45;
  NSObject *v46;
  int v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  int v51;
  std::string::size_type v52;
  const char *v53;
  std::string *v54;
  std::string *v55;
  unsigned int *v56;
  unsigned int *v57;
  NSObject *v58;
  const char *v59;
  unsigned int v60;
  NSObject *v61;
  std::string *v62;
  const char *v63;
  std::string *v64;
  NSObject *v65;
  std::string *v66;
  const char *v67;
  std::string *v68;
  std::chrono::steady_clock::time_point v69;
  NSObject *v70;
  const char *v71;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v72;
  NSObject *v73;
  const char *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::chrono::steady_clock::time_point v82;
  UErrorCode status[2];
  size_t __n;
  unsigned __int8 v85;
  unsigned int **v86;
  std::__shared_weak_count *v87;
  std::string v88;
  _QWORD v89[3];
  uint64_t *v90;
  std::__shared_weak_count *v91;
  uint8_t buf[4];
  std::string *v93;
  __int16 v94;
  std::string *v95;
  std::string __str;
  std::string v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t **__return_ptr, RewriteImpl *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(&v90, this, 0, 0);
  v2 = *v90;
  v3 = v90[1];
  if (*v90 != v3)
  {
    v81 = v90[1];
    while (1)
    {
      v4 = *(_QWORD **)(v2 + 32);
      v5 = *(unsigned __int8 *)(v2 + 23);
      if (*(char *)(v2 + 23) < 0)
      {
        if (*(_QWORD *)(v2 + 8))
        {
LABEL_5:
          v6 = (UTFRegex *)*((_QWORD *)this + 43);
          status[0] = U_ZERO_ERROR;
          if ((v5 & 0x80u) == 0)
            v7 = (const char *)v2;
          else
            v7 = *(const char **)v2;
          if ((v5 & 0x80u) == 0)
            v8 = v5;
          else
            v8 = *(_QWORD *)(v2 + 8);
          v9 = utext_openUTF8(0, v7, v8, status);
          if (status[0] <= U_ZERO_ERROR)
            v10 = v9;
          else
            v10 = 0;
          UTFRegex::set_text(v6, v10, 1);
          if (*((char *)this + 151) < 0)
            std::string::__init_copy_ctor_external(&v88, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
          else
            v88 = *(std::string *)((char *)this + 128);
          if (UTFRegex::search(*((URegularExpression ***)this + 43)))
          {
            v11 = (URegularExpression **)*((_QWORD *)this + 43);
            status[0] = U_ZERO_ERROR;
            v12 = uregex_start(*v11, 0, status);
            UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, *((URegularExpression ***)this + 43), 1);
            if ((v85 & 0x80u) == 0)
              v13 = status;
            else
              v13 = *(UErrorCode **)status;
            if ((v85 & 0x80u) == 0)
              v14 = v85;
            else
              v14 = __n;
            UTFString::to_utf8(&v97, (const UChar *)v13, v14);
            if ((char)v85 < 0)
              operator delete(*(void **)status);
            UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, *((URegularExpression ***)this + 43), 2);
            if ((v85 & 0x80u) == 0)
              v15 = status;
            else
              v15 = *(UErrorCode **)status;
            if ((v85 & 0x80u) == 0)
              v16 = v85;
            else
              v16 = __n;
            UTFString::to_utf8(&__str, (const UChar *)v15, v16);
            if ((char)v85 < 0)
            {
              operator delete(*(void **)status);
              if (!v12)
                goto LABEL_38;
              goto LABEL_108;
            }
            if (v12)
              goto LABEL_108;
LABEL_38:
            v17 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v18 = &v97;
              switch(*((_BYTE *)&v97.__r_.__value_.__s + 23))
              {
                case 2:
                  goto LABEL_48;
                case 3:
                  goto LABEL_53;
                case 4:
                  goto LABEL_74;
                case 5:
                  if (LODWORD(v97.__r_.__value_.__l.__data_) != 1768191329 || v97.__r_.__value_.__s.__data_[4] != 111)
                    goto LABEL_108;
                  goto LABEL_66;
                default:
                  goto LABEL_108;
              }
            }
            size = v97.__r_.__value_.__l.__size_;
            if (v97.__r_.__value_.__l.__size_ == 2)
            {
              v18 = (std::string *)v97.__r_.__value_.__r.__words[0];
LABEL_48:
              if (LOWORD(v18->__r_.__value_.__l.__data_) != 28276)
                goto LABEL_49;
              v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__str.__r_.__value_.__l.__size_ != 5)
                  goto LABEL_49;
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5)
                  goto LABEL_49;
                p_str = &__str;
              }
              data = (int)p_str->__r_.__value_.__l.__data_;
              v34 = p_str->__r_.__value_.__s.__data_[4];
              if (data != 1818587251 || v34 != 108)
              {
LABEL_49:
                if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                {
                  size = v97.__r_.__value_.__l.__size_;
                  goto LABEL_51;
                }
                goto LABEL_108;
              }
LABEL_100:
              if (v25 < 0)
              {
                v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_102:
                operator delete(v27);
                v17 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
              }
LABEL_103:
              if (v17 < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
LABEL_105:
              (*(void (**)(RewriteImpl *))(*(_QWORD *)this + 152))(this);
LABEL_205:
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v88.__r_.__value_.__l.__data_);
              goto LABEL_207;
            }
LABEL_51:
            if (size == 3)
            {
              v18 = (std::string *)v97.__r_.__value_.__r.__words[0];
LABEL_53:
              data_low = LOWORD(v18->__r_.__value_.__l.__data_);
              v22 = v18->__r_.__value_.__s.__data_[2];
              if (data_low == 28532 && v22 == 105)
              {
                v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if (__str.__r_.__value_.__l.__size_ != 4)
                    goto LABEL_102;
                }
                else
                {
                  if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 4)
                    goto LABEL_103;
                  v27 = &__str;
                }
                if (LODWORD(v27->__r_.__value_.__l.__data_) != 1752461935)
                  goto LABEL_100;
              }
              if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_108;
              size = v97.__r_.__value_.__l.__size_;
            }
            if (size != 4)
            {
              if (size != 5)
                goto LABEL_108;
              if (*(_DWORD *)v97.__r_.__value_.__l.__data_ != 1768191329
                || *(_BYTE *)(v97.__r_.__value_.__r.__words[0] + 4) != 111)
              {
                goto LABEL_108;
              }
LABEL_66:
              v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              goto LABEL_100;
            }
            v18 = (std::string *)v97.__r_.__value_.__r.__words[0];
LABEL_74:
            if (LODWORD(v18->__r_.__value_.__l.__data_) == 1735287148)
            {
              v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v29 = __str.__r_.__value_.__l.__size_;
              v30 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
              if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v30 = v88.__r_.__value_.__l.__size_;
              if (v29 == v30)
              {
                if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v31 = &v88;
                else
                  v31 = (std::string *)v88.__r_.__value_.__r.__words[0];
                if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (!memcmp(__str.__r_.__value_.__l.__data_, v31, __str.__r_.__value_.__l.__size_))
                    goto LABEL_108;
                }
                else
                {
                  if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
                    goto LABEL_108;
                  v32 = &__str;
                  while (v32->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
                  {
                    v32 = (std::string *)((char *)v32 + 1);
                    v31 = (std::string *)((char *)v31 + 1);
                    if (!--v28)
                      goto LABEL_108;
                  }
                }
              }
              std::string::operator=(&v88, &__str);
            }
LABEL_108:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v97.__r_.__value_.__l.__data_);
          }
          v36 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)this + 24), (const void **)&v88.__r_.__value_.__l.__data_);
          if (*((_QWORD *)this + 24) + 8 == v36)
            goto LABEL_105;
          v37 = v36;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(status[0]) = 0;
            _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_DEFAULT, "rewrite started", (uint8_t *)status, 2u);
          }
          Diagnostics::log(5, "rewrite started", v39);
          kdebug_trace();
          v82.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          (***(void (****)(UErrorCode *__return_ptr, _QWORD, uint64_t, uint64_t))(v37 + 56))(status, *(_QWORD *)(v37 + 56), v2, 1);
          v40 = v85;
          if ((v85 & 0x80u) == 0)
            v41 = v85;
          else
            v41 = __n;
          v42 = *(unsigned __int8 *)(v2 + 23);
          v43 = (char)v42;
          if ((v42 & 0x80u) != 0)
            v42 = *(_QWORD *)(v2 + 8);
          if (v41 == v42)
          {
            if (v43 >= 0)
              v44 = (unsigned __int8 *)v2;
            else
              v44 = *(unsigned __int8 **)v2;
            if ((v85 & 0x80) != 0)
            {
              if (memcmp(*(const void **)status, v44, __n))
                goto LABEL_134;
            }
            else if (v85)
            {
              v45 = status;
              while (*(unsigned __int8 *)v45 == *v44)
              {
                v45 = (UErrorCode *)((char *)v45 + 1);
                ++v44;
                if (!--v40)
                  goto LABEL_156;
              }
              goto LABEL_134;
            }
LABEL_156:
            (*(void (**)(RewriteImpl *, unsigned __int8 *))(*(_QWORD *)this + 152))(this, v44);
          }
          else
          {
LABEL_134:
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&v97, v2);
              v47 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
              v48 = v97.__r_.__value_.__r.__words[0];
              Censor::global_plaintext(&__str, (uint64_t)status);
              if (v47 >= 0)
                v49 = &v97;
              else
                v49 = (std::string *)v48;
              v50 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315394;
              v93 = v49;
              v94 = 2080;
              v95 = v50;
              _os_log_impl(&dword_1DE3F6000, v46, OS_LOG_TYPE_DEFAULT, "#Rewrite:\n[FROM] - %s\n[ TO ] - %s", buf, 0x16u);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
            }
            Censor::global_plaintext(&v97, v2);
            v51 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
            v52 = v97.__r_.__value_.__r.__words[0];
            Censor::global_plaintext(&__str, (uint64_t)status);
            if (v51 >= 0)
              v54 = &v97;
            else
              v54 = (std::string *)v52;
            v55 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v55 = (std::string *)__str.__r_.__value_.__r.__words[0];
            Diagnostics::log(5, "#Rewrite:\n[FROM] - %s\n[ TO ] - %s", v53, v54, v55);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v97.__r_.__value_.__l.__data_);
            (*(void (**)(RewriteImpl *, UErrorCode *))(*(_QWORD *)this + 168))(this, status);
          }
          v57 = *v86;
          v56 = v86[1];
          while (v57 != v56)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              v60 = *v57;
              LODWORD(v97.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v97.__r_.__value_.__r.__words[0]) = v60;
              _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_DEFAULT, "#Rewrite - POS - %d", (uint8_t *)&v97, 8u);
            }
            Diagnostics::log(5, "#Rewrite - POS - %d", v59, *v57);
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&v97, (uint64_t)(v57 + 2));
              v62 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v97
                  : (std::string *)v97.__r_.__value_.__r.__words[0];
              LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
              _os_log_impl(&dword_1DE3F6000, v61, OS_LOG_TYPE_DEFAULT, "#Rewrite - Matched - %s", (uint8_t *)&__str, 0xCu);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
            }
            Censor::global_plaintext(&v97, (uint64_t)(v57 + 2));
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &v97;
            else
              v64 = (std::string *)v97.__r_.__value_.__r.__words[0];
            Diagnostics::log(5, "#Rewrite - Matched - %s", v63, v64);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v97.__r_.__value_.__l.__data_);
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&v97, (uint64_t)(v57 + 8));
              v66 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v97
                  : (std::string *)v97.__r_.__value_.__r.__words[0];
              LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
              _os_log_impl(&dword_1DE3F6000, v65, OS_LOG_TYPE_DEFAULT, "#Rewrite - Replaced - %s", (uint8_t *)&__str, 0xCu);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
            }
            Censor::global_plaintext(&v97, (uint64_t)(v57 + 8));
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &v97;
            else
              v68 = (std::string *)v97.__r_.__value_.__r.__words[0];
            Diagnostics::log(5, "#Rewrite - Replaced - %s", v67, v68);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v97.__r_.__value_.__l.__data_);
            v57 += 20;
          }
          v69.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          kdebug_trace();
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v97.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1DE3F6000, v70, OS_LOG_TYPE_DEFAULT, "rewrite ended", (uint8_t *)&v97, 2u);
          }
          Diagnostics::log(5, "rewrite ended", v71);
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v3 = v81;
          v72 = (v69.__d_.__rep_ - v82.__d_.__rep_) / 1000000;
          v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v97.__r_.__value_.__l.__data_) = 134217984;
            *(double *)((char *)v97.__r_.__value_.__r.__words + 4) = (double)v72 / 1000.0;
            _os_log_impl(&dword_1DE3F6000, v73, OS_LOG_TYPE_DEFAULT, "rewrite latency: %.3f s", (uint8_t *)&v97, 0xCu);
          }
          Diagnostics::log(5, "rewrite latency: %.3f s", v74, (double)v72 / 1000.0);
          v75 = v87;
          if (v87)
          {
            p_shared_owners = (unint64_t *)&v87->__shared_owners_;
            do
              v77 = __ldaxr(p_shared_owners);
            while (__stlxr(v77 - 1, p_shared_owners));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if ((char)v85 < 0)
            operator delete(*(void **)status);
          goto LABEL_205;
        }
      }
      else if (*(_BYTE *)(v2 + 23))
      {
        goto LABEL_5;
      }
      memset(v89, 0, sizeof(v89));
      std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>((char *)v89, *(_QWORD **)(v2 + 24), v4, ((uint64_t)v4 - *(_QWORD *)(v2 + 24)) >> 4);
      (*(void (**)(RewriteImpl *, _QWORD *))(*(_QWORD *)this + 160))(this, v89);
      *(_QWORD *)status = v89;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)status);
LABEL_207:
      v2 += 48;
      if (v2 == v3)
        goto LABEL_210;
    }
  }
  *((_BYTE *)this + 8) = 1;
LABEL_210:
  v78 = v91;
  if (v91)
  {
    v79 = (unint64_t *)&v91->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
}

void sub_1DE98B090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 153) < 0)
    operator delete(*(void **)(v41 - 176));
  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  if (a37 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void RewriteImpl::create_rule_inst(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t ***v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  uint64_t **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::string __p;
  _QWORD *v26;
  std::__shared_weak_count *v27;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1EA936418;
  v4[5] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  v4[4] = 0;
  v4[3] = v4 + 4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 3);
  v5 = (uint64_t ***)(a1 + 192);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 192, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  fr_verbose_log(void)::is_verbose_ = 0;
  v9 = operator new(0x70uLL);
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = off_1EA91E5F8;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *v9 = &off_1EA933270;
  *((_OWORD *)v9 + 3) = 0u;
  v9[8] = 0;
  *((_OWORD *)v9 + 6) = 0u;
  *((_DWORD *)v9 + 18) = 1;
  v10 = operator new();
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)(v10 + 56) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_DWORD *)(v10 + 64) = 1065353216;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_DWORD *)v10 = 3;
  v11 = (std::__shared_weak_count *)operator new(0x30uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936798;
  v11[1].__vftable = 0;
  v11[1].__shared_owners_ = 0;
  v11[1].__shared_weak_owners_ = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "default");
  v26 = &v11[1].__vftable;
  v27 = v11;
  std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::push_back[abi:ne180100]((void **)(v10 + 72), (__int128 *)&__p);
  v12 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = v10;
  std::shared_ptr<FRRuleSet>::operator=[abi:ne180100]<FRRuleSet,std::default_delete<FRRuleSet>,void>(v9 + 4, &v24);
  if (v24)
    std::default_delete<FRRuleSet>::operator()[abi:ne180100](v24);
  *(_QWORD *)&v15 = v9 + 3;
  *((_QWORD *)&v15 + 1) = v9;
  v23 = v15;
  v16 = *v5;
  std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&__p, a2, (std::string::size_type *)&v23);
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v16, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1DE98B470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair((uint64_t)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RewriteImpl::add_rule(uint64_t a1, const void **a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::map<std::string,std::string>::at(*(_QWORD *)(a1 + 192), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, a3);
}

uint64_t RewriteImpl::compile_rule(uint64_t a1, const void **a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)std::map<std::string,std::string>::at(*(_QWORD *)(a1 + 192), a2);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
}

std::string *std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  std::string *v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = (char *)operator new(0x48uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    v10 = 0;
    v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1DE98B738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<FastRewriter>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<FastRewriter>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<FastRewriter>>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void UTFRegex::group<std::basic_string<char16_t>>(uint64_t a1, URegularExpression **a2, int32_t a3)
{
  _OWORD *v6;
  int32_t v7;
  std::basic_string<char16_t>::value_type v8;
  char v9;
  UChar *v10;
  int32_t v11;
  UErrorCode status;

  v6 = operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_1DED16B90;
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *((_WORD *)v6 + 32) = 0;
  status = U_ZERO_ERROR;
  v7 = uregex_group(*a2, a3, (UChar *)v6, 32, &status);
  if (v7 >= 33)
  {
    std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)a1, v7, v8);
    status = U_ZERO_ERROR;
    v9 = *(_BYTE *)(a1 + 23);
    if (v9 >= 0)
      v10 = (UChar *)a1;
    else
      v10 = *(UChar **)a1;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_DWORD *)(a1 + 8);
    v7 = uregex_group(*a2, a3, v10, v11, &status);
  }
  std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)a1, v7 & ~(v7 >> 31), v8);
}

void sub_1DE98B8E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void FrontendNNModule::~FrontendNNModule(void **this)
{
  void **v2;

  *this = off_1EA91E650;
  v2 = this + 38;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 32));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 30));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 24));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  FrontendModule::~FrontendModule(this);
}

void std::__shared_ptr_emplace<RewriteImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RewriteImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<RewriteImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RewritePersistentModule::~RewritePersistentModule(void **this)
{
  *this = &off_1EA920850;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA920850;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void FastSpeech2DecoderModule::~FastSpeech2DecoderModule(std::mutex *this)
{
  FastSpeech2DecoderModule::~FastSpeech2DecoderModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  this->__m_.__sig = (uint64_t)&off_1EA920A00;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[6].__m_.__opaque[24]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[6].__m_.__opaque[8]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[6]);
  std::mutex::~mutex(this + 5);
  Module::~Module((Module *)this);
}

void FastSpeech2DecoderModule::prepare(FastSpeech2DecoderModule *this)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t *v7;
  char *v8;
  void **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  std::__shared_weak_count *v37;
  uint8_t *v38;
  std::__shared_weak_count *v39;
  void *__p;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[8];
  __int128 v45;
  void *v46;

  if (!*((_BYTE *)this + 312))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    v4 = (char *)operator new(0x208uLL);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_1EA9330E8;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 264) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 344) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *((_WORD *)v4 + 12) = 257;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 14) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 20) = 0u;
    *((_OWORD *)v4 + 21) = 0u;
    *((_OWORD *)v4 + 22) = 0u;
    *(_OWORD *)(v4 + 488) = 0u;
    *(_OWORD *)(v4 + 504) = 0u;
    *(_OWORD *)(v4 + 456) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    *(_OWORD *)(v4 + 424) = 0u;
    *(_OWORD *)(v4 + 440) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *(_QWORD *)&v43 = v4 + 24;
    *((_QWORD *)&v43 + 1) = v4;
    v4[26] = 1;
    v5 = (char *)operator new(0x70uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1EA934700;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *((_WORD *)v5 + 12) = 257;
    *((_QWORD *)v5 + 12) = 0;
    *((_QWORD *)v5 + 13) = 0;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_QWORD *)&v42 = v5 + 24;
    *((_QWORD *)&v42 + 1) = v5;
    LODWORD(v46) = 0;
    std::vector<float>::vector(&__p, 0x100uLL, &v46);
    std::vector<std::vector<float>>::vector(buf, 0x500uLL, (uint64_t)&__p);
    std::vector<std::vector<std::vector<float>>>::resize((uint64_t *)v5 + 4, (uint64_t *)buf);
    v38 = buf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    if (__p)
    {
      v41 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    *(_DWORD *)buf = 1280;
    std::vector<int>::resize((std::vector<int> *)(v5 + 80), 1uLL, (std::vector<int>::const_reference)buf);
    v6 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v6 + 1) = 0;
    v7 = (unint64_t *)(v6 + 8);
    *(_QWORD *)v6 = &off_1EA932E10;
    *(_OWORD *)(v6 + 24) = 0u;
    *((_QWORD *)v6 + 2) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *((_QWORD *)v6 + 21) = 0;
    __p = v6 + 24;
    v41 = (std::__shared_weak_count *)v6;
    v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_QWORD *)v8 = &off_1EA932198;
    *((_QWORD *)v8 + 3) = v8 + 32;
    v9 = (void **)(v8 + 24);
    v38 = (uint8_t *)(v8 + 24);
    v39 = (std::__shared_weak_count *)v8;
    Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v8 + 24), &v43);
    *(_QWORD *)buf = &v46;
    v11 = v10[5];
    if (v11)
    {
      *(_QWORD *)buf = &off_1EA923288;
      *(_QWORD *)&v45 = v6 + 24;
      *((_QWORD *)&v45 + 1) = v6;
      do
        v12 = __ldxr(v7);
      while (__stxr(v12 + 1, v7));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 8, &v45);
      *(_QWORD *)buf = &off_1EA923288;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v9 = (void **)v38;
    }
    else
    {
      v16 = (_QWORD *)operator new();
      *v16 = &off_1EA923288;
      v16[1] = v6 + 24;
      v16[2] = v6;
      do
        v17 = __ldxr(v7);
      while (__stxr(v17 + 1, v7));
      v18 = v10[5];
      v10[5] = (uint64_t)v16;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    Agglomerate::set<std::shared_ptr<FastSpeechDecoderFeature>>((uint64_t)v9, &v42);
    v36 = v9;
    v37 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    (*(void (**)(FastSpeech2DecoderModule *, void ***))(*(_QWORD *)this + 80))(this, &v36);
    v21 = v37;
    if (v37)
    {
      v22 = (unint64_t *)&v37->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v39;
    if (v39)
    {
      v25 = (unint64_t *)&v39->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v41;
    if (v41)
    {
      v28 = (unint64_t *)&v41->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_1DE98BFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void FastSpeech2DecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  void (***v28)(_QWORD, __int128 *, _BYTE *);
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  double v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  float v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  uint64_t v60;
  float v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  float v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::mutex *v87;
  std::chrono::steady_clock::time_point v88;
  int v89;
  uint64_t v90;
  void *v91;
  TrackSubstitutions *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void *v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _BYTE buf[22];
  __int16 v113;
  double v114;
  __int16 v115;
  unint64_t v116;
  _BYTE v117[24];
  _BYTE *v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM decoder module start.", v5);
  std::mutex::lock((std::mutex *)(a1 + 320));
  *(_BYTE *)(a1 + 312) = 1;
  v87 = (std::mutex *)(a1 + 320);
  v7 = *(std::__shared_weak_count **)(*(_QWORD *)v6 + 16);
  v110 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  v111 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(std::__shared_weak_count **)(*(_QWORD *)v10 + 16);
  v108 = *(_QWORD *)(*(_QWORD *)v10 + 8);
  v109 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v15 = *(std::__shared_weak_count **)(*(_QWORD *)v14 + 16);
  v106 = *(_QWORD *)(*(_QWORD *)v14 + 8);
  v107 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(v110 + 8);
  if (v18 != *(_QWORD *)(v110 + 16) && *(_BYTE *)(v18 + 60))
    *(_QWORD *)(a1 + 304) = 0;
  v19 = *(_QWORD *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(v19 + 64));
  std::vector<TTSSynthesizer::Marker>::__clear[abi:ne180100]((uint64_t *)(v19 + 40));
  *(_DWORD *)(v19 + 112) = 0;
  *(_DWORD *)(v19 + 120) = 0;
  *(_DWORD *)(v19 + 132) = 0;
  *(_DWORD *)(v19 + 136) = 0;
  *(_DWORD *)(v19 + 128) = 1065353216;
  *(_WORD *)(v19 + 124) = 0;
  *(_QWORD *)(v19 + 156) = 0;
  *(_QWORD *)(v19 + 148) = 0;
  *(_DWORD *)(v19 + 164) = 0;
  v88.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v104 = 0;
  v103 = 0;
  v20 = *(_QWORD *)(a1 + 400);
  v99 = v108;
  v100 = v109;
  if (v109)
  {
    v21 = (unint64_t *)&v109->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v20 + 8))(&v101, v20, &v99, *(unsigned __int8 *)(v110 + 2));
  v23 = v100;
  if (v100)
  {
    v24 = (unint64_t *)&v100->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v101;
  if (v102 != v101)
  {
    for (i = 0; i < (v102 - v101) >> 4; ++i)
    {
      v28 = *(void (****)(_QWORD, __int128 *, _BYTE *))(a1 + 400);
      v29 = *(_OWORD *)(v26 + 16 * i);
      v98 = v29;
      if (*((_QWORD *)&v29 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v118 = 0;
      v32 = operator new(0x40uLL);
      *v32 = &off_1EA931A30;
      v32[1] = a1;
      v32[2] = &v110;
      v32[3] = &rep;
      v32[4] = &v104;
      v32[5] = &v103;
      v32[6] = &v108;
      v32[7] = &v106;
      v118 = v32;
      (**v28)(v28, &v98, v117);
      v33 = v118;
      if (v118 == v117)
      {
        v33 = v117;
        v34 = 4;
      }
      else
      {
        if (!v118)
          goto LABEL_35;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_35:
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v26 = v101;
    }
  }
  v38 = (unsigned __int128)((std::chrono::steady_clock::now().__d_.__rep_ - v88.__d_.__rep_)
                          * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v39 = (v38 >> 18) + ((unint64_t)v38 >> 63);
  v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v42 = (double)v39 / 1000.0;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v103 + v104;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)v39 / 1000.0;
    v113 = 2048;
    v114 = (double)*(unint64_t *)&buf[4] / v42;
    _os_log_impl(&dword_1DE3F6000, v40, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder module, total frames = %lu, Run Time : %.3f s, %.3f frames/s", buf, 0x20u);
  }
  Diagnostics::log(5, "Parallel AM decoder module, total frames = %lu, Run Time : %.3f s, %.3f frames/s", v41, v103 + v104, *(_QWORD *)&v42, (double)(unint64_t)(v103 + v104) / v42);
  v43 = *(_DWORD *)(a1 + 276);
  v44 = *(_DWORD *)(a1 + 272);
  v45 = *(_QWORD *)(a1 + 304);
  v46 = v110;
  v94 = v110;
  v95 = v111;
  if (v111)
  {
    v47 = (unint64_t *)&v111->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  SharedObjectPool::get_if<TrackSubstitutions>(&v92, *(_QWORD *)(a1 + 168));
  v49 = (float)v43 / (float)v44;
  TacotronAlignment::accumulate_word_markers((uint64_t **)&v96, v46, v45, &v92, v49);
  v50 = v93;
  if (v93)
  {
    v51 = (unint64_t *)&v93->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v95;
  if (v95)
  {
    v54 = (unint64_t *)&v95->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *(_QWORD *)(v110 + 8);
  v57 = *(_QWORD *)(v110 + 16);
  if (v56 == v57)
  {
    v58 = 0;
    v59 = 0.0;
  }
  else
  {
    v58 = 0;
    v59 = 0.0;
    v60 = *(_QWORD *)(v110 + 8);
    do
    {
      v58 += *(_DWORD *)(v60 + 56);
      v59 = v59 + *(float *)(v60 + 64);
      v60 += 104;
    }
    while (v60 != v57);
  }
  v61 = v59 / (float)(unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v57 - v56) >> 3));
  v62 = v104;
  *(_QWORD *)(a1 + 304) = (unint64_t)(float)((float)((float)(*(_DWORD *)(a1 + 276) * v104) / v61)
                                                  + (float)*(unint64_t *)(a1 + 304));
  v63 = *(_QWORD **)v96;
  v64 = (_QWORD *)*((_QWORD *)v96 + 1);
  if (*(_QWORD **)v96 != v64)
  {
    v65 = v63[3];
    v66 = (float)(*(_DWORD *)(a1 + 272) * v62) / (float)v58;
    do
    {
      v63[3] = (unint64_t)(float)((float)(unint64_t)v45
                                       + (float)((float)(unint64_t)(v63[3] - v65) * v66));
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        v69 = v63[1];
        v70 = v63[2] + v69;
        v71 = v63[3];
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v69;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v70;
        v113 = 2048;
        v114 = (float)((float)v71 / v49);
        v115 = 2048;
        v116 = v71;
        _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_INFO, "Parallel Neural Acoustic Module word marker [%zu, %zu], time: %.0f, sample_idx: %ld", buf, 0x2Au);
      }
      Diagnostics::log(6, "Parallel Neural Acoustic Module word marker [%zu, %zu], time: %.0f, sample_idx: %ld", v68, v63[1], v63[2] + v63[1], (float)((float)(unint64_t)v63[3] / v49), v63[3]);
      v63 += 7;
    }
    while (v63 != v64);
    if (*(_QWORD *)v96 != *((_QWORD *)v96 + 1))
    {
      v89 = 5;
      v90 = 0;
      v91 = v96;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, &v89);
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(a1 + 168));
      if (*(_QWORD *)buf)
        Observable::emit(*(uint64_t ***)buf, (char *)TTSSynthesizerEvent::MarkersGenerated, v96);
      v72 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
    }
  }
  v75 = v97;
  if (v97)
  {
    v76 = (unint64_t *)&v97->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  *(_QWORD *)buf = &v101;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v78 = v107;
  if (v107)
  {
    v79 = (unint64_t *)&v107->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v109;
  if (v109)
  {
    v82 = (unint64_t *)&v109->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v111;
  if (v111)
  {
    v85 = (unint64_t *)&v111->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  std::mutex::unlock(v87);
}

void sub_1DE98C95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 224);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  *(_QWORD *)(v39 - 224) = &a31;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 224));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 240);
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

void std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1EA931A30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1EA931A30;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  double v12;
  double v13;
  float v14;
  NSObject *v15;
  const char *v16;
  _BOOL4 v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  void *__p;
  void *v83;
  uint64_t v84;
  _QWORD v85[2];
  _QWORD *v86;
  std::__shared_weak_count *v87;
  uint8_t buf[8];
  _BYTE v89[20];
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)a2;
  v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "Parallel AM decoder inference cancelled.", v6);
LABEL_8:
    v8 = 1;
    if (!v2)
      return v8;
    goto LABEL_9;
  }
  if (*(_BYTE *)(**(_QWORD **)(a1 + 16) + 2))
    goto LABEL_8;
  v78 = v2;
  v12 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - **(_QWORD **)(a1 + 24)) / 1000000) / 1000.0;
  v13 = (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3)) / v12 / (1000.0 / (double)*(int *)(v4 + 272));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v14 = v13;
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v17 = **(_DWORD **)(a1 + 32) == 0;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = v17;
    *(_WORD *)v89 = 2048;
    *(_QWORD *)&v89[2] = v18;
    *(_WORD *)&v89[10] = 2048;
    *(double *)&v89[12] = v12;
    v90 = 2048;
    v91 = (double)v18 / v12;
    v19 = v14;
    v92 = 2048;
    v93 = v14;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f", buf, 0x30u);
  }
  else
  {
    v19 = v14;
  }
  Diagnostics::log(5, "Parallel AM decoder inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f", v16, **(_DWORD **)(a1 + 32) == 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3), *(_QWORD *)&v12, (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3)) / v12, *(_QWORD *)&v19);
  if (*(_BYTE *)(v4 + 313))
  {
    v20 = *(_QWORD *)(v4 + 384);
    v86 = v3;
    v87 = v2;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    v23 = *(_QWORD **)(a1 + 16);
    v24 = (std::__shared_weak_count *)v23[1];
    v85[0] = *v23;
    v85[1] = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    **(_QWORD **)(a1 + 40) = TacotronAlignment::trim_silences(v20, (uint64_t *)&v86, (uint64_t)v85, *(_QWORD *)(v4 + 304));
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v29 = v87;
    if (v87)
    {
      v30 = (unint64_t *)&v87->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v32 = *(_DWORD *)(v4 + 288);
  if (NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2))
  {
    if (*(float *)(v4 + 296) >= v14)
      v32 = -1431655765 * ((v3[2] - v3[1]) >> 3);
    else
      v32 = *(_DWORD *)(v4 + 292);
  }
  v33 = **(_QWORD **)(a1 + 48);
  v34 = *(_QWORD *)(v33 + 32);
  for (i = *(_QWORD *)(v33 + 40); v34 != i; v34 += 24)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v89 = 0;
    *(_QWORD *)&v89[8] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)v34, *(_QWORD *)(v34 + 8), (uint64_t)(*(_QWORD *)(v34 + 8) - *(_QWORD *)v34) >> 2);
    v83 = 0;
    v84 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&__p, *(int **)buf, *(int **)v89, (uint64_t)(*(_QWORD *)v89 - *(_QWORD *)buf) >> 2);
    v36 = v3[8];
    if (v36 >= v3[9])
    {
      v37 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v3 + 7, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)(v3 + 7), (uint64_t)&__p);
      v37 = v36 + 24;
    }
    v3[8] = v37;
    if (__p)
    {
      v83 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)v89 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  if (v3[7] != v3[8])
  {
    TacotronAlignment::append_alignments(*(_QWORD *)(v4 + 384), v3 + 7);
    v38 = *(_QWORD *)(v4 + 384);
    v39 = **(_QWORD **)(a1 + 16);
    v83 = 0;
    v84 = 0;
    __p = 0;
    std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(&__p, *(_QWORD *)(v39 + 8), *(_QWORD *)(v39 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 3));
    TacotronAlignment::generate_speech_rate(buf, v38, (uint64_t *)&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3), -1431655765 * ((uint64_t)(v3[2] - v3[1]) >> 3), (uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 40) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32)) >> 2);
    *(_QWORD *)&v81 = &__p;
    std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v3 + 10), v3[11], *(char **)buf, *(char **)v89, (uint64_t)(*(_QWORD *)v89 - *(_QWORD *)buf) >> 2);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)v89 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(v4 + 168));
  v40 = *(int **)buf;
  if (*(_QWORD *)buf)
  {
    Observable::emit(*(uint64_t ***)buf, "tts.feature.neural.mel", v3 + 1);
    Observable::emit((uint64_t **)v40, "tts.feature.neural.alignment", v3 + 7);
  }
  if (v3[2] == v3[1])
  {
    LODWORD(v74) = 0;
  }
  else
  {
    v41 = 0;
    v42 = v32;
    do
    {
      v43 = (char *)operator new(0x88uLL);
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = 0;
      *(_QWORD *)v43 = &off_1EA932C88;
      *(_OWORD *)(v43 + 40) = 0u;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 24) = 0u;
      *((_WORD *)v43 + 12) = 257;
      *((_OWORD *)v43 + 2) = 0u;
      *((_OWORD *)v43 + 3) = 0u;
      *((_OWORD *)v43 + 4) = 0u;
      *((_OWORD *)v43 + 5) = 0u;
      *((_OWORD *)v43 + 6) = 0u;
      *((_OWORD *)v43 + 7) = 0u;
      *(_QWORD *)(v43 + 126) = 0;
      *(_QWORD *)&v81 = v43 + 24;
      *((_QWORD *)&v81 + 1) = v43;
      v44 = *(uint64_t **)(a1 + 16);
      v45 = *v44;
      v46 = (std::__shared_weak_count *)v44[1];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v43[132] = FastSpeechUtils::has_whisper(*(_QWORD *)(v45 + 8), *(_QWORD *)(v45 + 16));
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      else
      {
        v43[132] = FastSpeechUtils::has_whisper(*(_QWORD *)(v45 + 8), *(_QWORD *)(v45 + 16));
      }
      v50 = v41 + v42;
      v52 = v3[1];
      v51 = v3[2];
      v53 = v81;
      v54 = v81 + 8;
      v55 = v52 + 24 * v41;
      if (0xAAAAAAAAAAAAAAABLL * ((v51 - v52) >> 3) <= v41 + v42)
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v54, v55, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v55) >> 3));
        v60 = v3[10];
        v59 = v3[11];
        if (v60 != v59)
          std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(v53 + 80), (char *)(v60 + 4 * v41), v59, (v59 - (v60 + 4 * v41)) >> 2);
        v62 = v3[4];
        v61 = v3[5];
        if (v62 != v61)
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v53 + 32, v62 + 24 * v41, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - (v62 + 24 * v41)) >> 3));
        v58 = *((_BYTE *)v3 + 1);
      }
      else
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v54, v55, v55 + 24 * (int)v42, v42);
        v56 = v3[10];
        if (v56 != v3[11])
          std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(v53 + 80), (char *)(v56 + 4 * v41), v56 + 4 * v41 + 4 * v42, v42);
        v57 = v3[4];
        if (v57 != v3[5])
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v53 + 32, v57 + 24 * v41, v57 + 24 * v41 + 24 * (int)v42, v42);
        v58 = 0;
      }
      *(_BYTE *)(v53 + 1) = v58;
      *(_DWORD *)(v53 + 104) = **(_DWORD **)(a1 + 32) + v41;
      if (v41)
        v63 = 0;
      else
        v63 = *(_BYTE *)v3 != 0;
      *(_BYTE *)v53 = v63;
      *(_BYTE *)(v53 + 109) = *(_BYTE *)(v4 + 313);
      v64 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v64->__shared_owners_ = 0u;
      v65 = (unint64_t *)&v64->__shared_owners_;
      v64->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
      *(_OWORD *)&v64[1].__shared_owners_ = 0u;
      v64[1].__vftable = (std::__shared_weak_count_vtbl *)&v64[1].__shared_owners_;
      Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)&v64[1], &v81);
      Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)&v64[1], *(uint64_t **)(a1 + 56));
      v41 += v42;
      v79 = v64 + 1;
      v80 = v64;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
      (*(void (**)(uint64_t, std::__shared_weak_count **))(*(_QWORD *)v4 + 72))(v4, &v79);
      v67 = v80;
      if (v80)
      {
        v68 = (unint64_t *)&v80->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      do
        v70 = __ldaxr(v65);
      while (__stlxr(v70 - 1, v65));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3);
    }
    while (v74 > v50);
  }
  **(_DWORD **)(a1 + 32) += v74;
  (*(std::chrono::steady_clock::time_point **)(a1 + 24))->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v75 = *(std::__shared_weak_count **)v89;
  v2 = v78;
  if (*(_QWORD *)v89)
  {
    v76 = (unint64_t *)(*(_QWORD *)v89 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      v2 = v78;
    }
  }
  v8 = 0;
  if (v2)
  {
LABEL_9:
    v9 = (unint64_t *)&v2->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v8;
}

void sub_1DE98D440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
    operator delete(__p);
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target_type()
{
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  char *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  __int128 v13;
  int64x2_t v14;
  void **v15;
  void **v16;
  int64x2_t v17;
  void **v18;
  _QWORD *v19;

  v3 = (void **)a1[1];
  if (v3 == (void **)*a1)
  {
    v6 = (uint64_t)(a1 + 2);
    if (a1[2] == (_QWORD)v3)
    {
      v19 = a1 + 2;
      v7 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v6, 1uLL);
      v16 = v7;
      v17.i64[0] = (uint64_t)v7;
      v17.i64[1] = (uint64_t)v7;
      v18 = &v7[3 * v8];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v7, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      v9 = (char *)(v7 + 3);
      v17.i64[1] = (uint64_t)(v7 + 3);
      v11 = (void **)*a1;
      v10 = (void **)a1[1];
      v12 = v17.i64[0];
      if (v10 == (void **)*a1)
      {
        v14 = vdupq_n_s64((unint64_t)v10);
      }
      else
      {
        do
        {
          *(_QWORD *)(v12 - 24) = 0;
          *(_QWORD *)(v12 - 16) = 0;
          v12 -= 24;
          *(_QWORD *)(v12 + 16) = 0;
          v13 = *(_OWORD *)(v10 - 3);
          v10 -= 3;
          *(_OWORD *)v12 = v13;
          *(_QWORD *)(v12 + 16) = v10[2];
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
        }
        while (v10 != v11);
        v14 = *(int64x2_t *)a1;
        v9 = (char *)v17.i64[1];
      }
      *a1 = v12;
      a1[1] = (uint64_t)v9;
      v17 = v14;
      v15 = (void **)a1[2];
      a1[2] = (uint64_t)v18;
      v18 = v15;
      v16 = (void **)v14.i64[0];
      std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v16);
    }
    else
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      a1[1] = (uint64_t)(v3 + 3);
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3) >= 2)
  {
    v4 = *a1 + 24;
    while (v3 != (void **)v4)
    {
      v3 -= 3;
      v16 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
    a1[1] = v4;
  }
}

void sub_1DE98D828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<FastSpeechDecoderFeature>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA923448;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<FastSpeechDecoderFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923448;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<FastSpeechDecoderFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923448;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<FastSpeechDecoderFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeechDecoderFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FastSpeechDecoderFeature>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 32);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

BOOL InferenceEngine::MilInferenceModel::get_parameter_value_if<BOOL>(uint64_t a1, const void **a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  char v8;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48) == 1
    && *(_QWORD *)(a1 + 56) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(_QWORD *)(a1 + 56), a2))
  {
    v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v4, a2);
    v8 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v6, &v8);
    return v8 != 0;
  }
  return a3;
}

void std::__shared_ptr_emplace<FastSpeech2DecoderDennisInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderDennisInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2DecoderDennisInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1EA921DF8;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 48);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9352D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9352D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2DecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1EA921DF8;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 48);
}

void FastSpeech2DecoderPersistentModule::~FastSpeech2DecoderPersistentModule(void **this)
{
  *this = &off_1EA922198;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA922198;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void Database::fetch_unit(Database *this, Unit *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;

  v4 = *(unsigned int *)a2;
  if ((v4 & 0x80000000) != 0)
  {
    v10 = *((int *)this + 115);
    LODWORD(__p) = 0;
    std::vector<float>::resize((uint64_t)a2 + 88, v10, &__p);
    v11 = *((int *)this + 115);
    LODWORD(__p) = 0;
    std::vector<float>::resize((uint64_t)a2 + 112, v11, &__p);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((float *)a2 + 38) = (float)-*(_DWORD *)a2;
    MEMORY[0x1DF0ECA80]((char *)a2 + 40, "sil");
  }
  else
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    Database::get_unit((uint64_t)this, v4, &__p);
    std::vector<float>::resize((uint64_t)a2 + 88, *((int *)this + 115));
    std::vector<float>::resize((uint64_t)a2 + 112, *((int *)this + 115));
    v5 = *((int *)this + 115);
    if ((_DWORD)v5)
    {
      memmove(*((void **)a2 + 11), (char *)__p + 4 * *((int *)this + 106), 4 * v5);
      v6 = *((int *)this + 115);
      if ((_DWORD)v6)
        memmove(*((void **)a2 + 14), (char *)__p + 4 * *((int *)this + 107), 4 * v6);
    }
    v7 = __p;
    *((_DWORD *)a2 + 34) = *((_DWORD *)__p + *((int *)this + 108));
    *((_DWORD *)a2 + 35) = v7[*((int *)this + 109)];
    *((_DWORD *)a2 + 36) = v7[*((int *)this + 110)];
    *((_DWORD *)a2 + 37) = v7[*((int *)this + 111)];
    *((_DWORD *)a2 + 38) = v7[*((int *)this + 112)];
    v8 = Database::feat_val(this, *((_DWORD *)this + 113), (int)*(float *)&v7[*((int *)this + 113)]);
    MEMORY[0x1DF0ECA80]((char *)a2 + 40, v8);
    v9 = Database::feat_val(this, *((_DWORD *)this + 114), (int)*((float *)__p + *((int *)this + 114)));
    MEMORY[0x1DF0ECA80]((char *)a2 + 64, v9);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  v12 = *(unsigned int *)a2;
  if ((v12 & 0x80000000) == 0 && *((_BYTE *)this + 8))
    LODWORD(v12) = *((_DWORD *)this + 48) & *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v12);
  *((_DWORD *)a2 + 1) = v12;
}

void sub_1DE98DE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Database::~Database(void **this)
{
  Database::~Database(this);
  JUMPOUT(0x1DF0ED014);
}

{
  void *v2;

  *this = &off_1EA9229D8;
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 48));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 43));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 38));
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)(this + 28));
  v2 = this[7];
  this[7] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
}

__n128 Database::get_unit(uint64_t a1, uint64_t a2, void **a3)
{
  __n128 result;
  char *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  float *v39;
  int v40;
  int v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  float v46;
  float *v47;
  int v48;
  float v49;
  const float *v50;
  float *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t buf[4];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4) <= (int)a2)
  {
    std::vector<float>::resize((uint64_t)a3, 0);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v55 = a2;
      _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_DEBUG, "UNIT %d either negative or off end of db, selecting neighboring units to edge of db ", buf, 8u);
    }
    Diagnostics::log(7, "UNIT %d either negative or off end of db, selecting neighboring units to edge of db ", v14, a2);
  }
  else
  {
    std::vector<float>::resize((uint64_t)a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 4) + 2);
    v7 = (char *)*a3;
    v8 = *(_QWORD *)(a1 + 104);
    v9 = *(unsigned __int8 **)(a1 + 48);
    v10 = v8 + v9[5] * (uint64_t)(int)a2;
    v11 = v9[6];
    if (v9[6])
    {
      memmove(*a3, (const void *)(v8 + v9[5] * (uint64_t)(int)a2), 4 * v11);
      v9 = *(unsigned __int8 **)(a1 + 48);
      v12 = v9[6];
    }
    else
    {
      v12 = 0;
    }
    v15 = v9[7];
    v16 = (float *)&v7[4 * v12];
    if (v9[7])
    {
      v17 = 4 * v15;
      v18 = v16;
      v19 = (unsigned int *)(v10 + 4 * v11);
      do
      {
        v20 = *v19++;
        *v18++ = (float)v20;
        v17 -= 4;
      }
      while (v17);
    }
    v21 = v10 + 4 * v11 + 4 * v15;
    v22 = v9[8];
    v23 = &v16[v15];
    if (v9[8])
    {
      v24 = 2 * v22;
      v25 = v23;
      v26 = (unsigned __int16 *)v21;
      do
      {
        v27 = *v26++;
        *v25++ = (float)v27;
        v24 -= 2;
      }
      while (v24);
    }
    v28 = (unsigned __int8 *)(v21 + 2 * v22);
    v29 = v9[9];
    v30 = &v23[v22];
    if (v9[9])
    {
      v31 = v9[9];
      v32 = v30;
      v33 = v28;
      do
      {
        v34 = *v33++;
        *v32++ = (float)v34;
        --v31;
      }
      while (v31);
    }
    v35 = v9[10];
    if (v9[10])
    {
      v36 = 0;
      v37 = &v28[v29];
      v38 = v9[10];
      v39 = &v30[v29];
      do
      {
        v40 = 0;
        v41 = v38 - 8;
        if (v38 >= 8)
          v38 = 8;
        if (v38 <= 1)
          v38 = 1;
        do
        {
          if (((*v37 >> v40) & 1) != 0)
            v42 = 1.0;
          else
            v42 = 0.0;
          *v39++ = v42;
          ++v40;
        }
        while (v38 != v40);
        ++v37;
        v36 += 8;
        v38 = v41;
      }
      while (v36 < v35);
    }
    v43 = *(int *)(a1 + 168);
    v44 = *(unsigned int *)(v10 + 4 * v43);
    v45 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 8 * v44);
    v46 = (float)(int)((v45 >> 31) | (2 * ((v45 >> *(_DWORD *)(a1 + 200)) & *(_DWORD *)(a1 + 204))));
    v47 = (float *)*a3;
    *((float *)*a3 + *(int *)(a1 + 160)) = v46;
    v48 = *(_DWORD *)(a1 + 196);
    v49 = 0.0;
    if (v48 < 32)
      v49 = (float)(*(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * a2) >> v48);
    v47[*(int *)(a1 + 164)] = v49;
    result.n128_f32[0] = (float)v44;
    v47[v43] = (float)v44;
    v50 = *(const float **)(a1 + 120);
    if (v50)
    {
      v51 = &v47[v9[44]];
      vDSP_vma(v51, 1, v50, 1, *(const float **)(a1 + 112), 1, v51, 1, v9[45]);
    }
    if (*(_BYTE *)(a1 + 216))
    {
      v52 = (uint64_t)*a3 + 4 * *(int *)(a1 + 212);
      v53 = *(_QWORD *)v52;
      result = *(__n128 *)(v52 + 24);
      *(_QWORD *)(v52 + 32) = *(_QWORD *)(v52 + 40);
      *(_DWORD *)(v52 + 40) = *(_DWORD *)(v52 + 48);
      *(_OWORD *)v52 = *(_OWORD *)(v52 + 8);
      *(__n128 *)(v52 + 16) = result;
      *(_QWORD *)((char *)*a3 + 4 * *(int *)(a1 + 212) + 44) = v53;
    }
  }
  return result;
}

char *Database::feat_val(Database *this, int a2, signed int a3)
{
  char v3;
  int v6;
  char *v7;
  std::string::value_type v8;
  std::string::size_type v9;
  char v10;
  void **v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  int v24;
  char v25;
  StringTable **v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  std::string v40;
  uint64_t v41;

  v3 = a3;
  v41 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 40);
  if (v6 == a2)
  {
    v7 = StringTable::feat_val(*((StringTable **)this + 7), a2, a3 >> 1);
    std::string::basic_string[abi:ne180100]<0>(&v40, v7);
    if ((v3 & 1) != 0)
      v8 = 50;
    else
      v8 = 49;
    std::string::push_back(&v40, v8);
    *(_QWORD *)&v38 = v40.__r_.__value_.__l.__size_;
    v9 = v40.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v38 + 7) = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 7);
    v10 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    memset(&v40, 0, sizeof(v40));
    v11 = (void **)((char *)this + 280);
    if (*((char *)this + 303) < 0)
    {
      operator delete(*((void **)this + 35));
      v20 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
      v21 = v38;
      *((_QWORD *)this + 35) = v9;
      *((_QWORD *)this + 36) = v21;
      *(_QWORD *)((char *)this + 295) = *(_QWORD *)((char *)&v38 + 7);
      *((_BYTE *)this + 303) = v10;
      if (v20 < 0)
      {
        operator delete(v40.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)this + 303) & 0x80) == 0)
          return (char *)v11;
        return (char *)*v11;
      }
      if (v10 < 0)
        return (char *)*v11;
    }
    else
    {
      v12 = v38;
      *((_QWORD *)this + 35) = v9;
      *((_QWORD *)this + 36) = v12;
      *(_QWORD *)((char *)this + 295) = *(_QWORD *)((char *)&v38 + 7);
      *((_BYTE *)this + 303) = v10;
      if (v10 < 0)
        return (char *)*v11;
    }
  }
  else
  {
    if (*((_DWORD *)this + 42) != a2)
      return StringTable::feat_val(*((StringTable **)this + 7), a2, a3);
    v13 = *(_DWORD *)(*((_QWORD *)this + 9) + 8 * a3);
    v14 = *((_QWORD *)this + 17);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 4 * (*(_QWORD *)&v13 & 0x7FFFFLL));
      v16 = HIBYTE(v15);
      v17 = BYTE2(v15);
      v18 = BYTE1(v15);
      v37 = v15;
    }
    else
    {
      v16 = (v13 >> 18) & 0x3F;
      v17 = (v13 >> 12) & 0x3F;
      v37 = *(_DWORD *)(*((_QWORD *)this + 9) + 8 * a3) & 0x3F;
      v18 = (v13 >> 6) & 0x3F;
    }
    v22 = &v40;
    if ((*((_DWORD *)this + 52) & v13) != 0)
    {
      v22 = (std::string *)((char *)&v40.__r_.__value_.__l.__data_ + 1);
      v40.__r_.__value_.__s.__data_[0] = 63;
    }
    v23 = *((_DWORD *)this + 50);
    v24 = *((unsigned __int8 *)this + 204);
    if ((v13 & 0x80000000) == 0)
      v25 = 49;
    else
      v25 = 50;
    v26 = (StringTable **)((char *)this + 56);
    v27 = StringTable::feat_val(*((StringTable **)this + 7), v6, v18);
    v28 = stpcpy((char *)v22, v27);
    *v28 = v25;
    v28[1] = 45;
    v29 = StringTable::feat_val(*v26, *((_DWORD *)this + 40), v16);
    v30 = stpcpy(v28 + 2, v29);
    *v30 = v25;
    v30[1] = 45;
    v31 = StringTable::feat_val(*v26, *((_DWORD *)this + 40), v24 & (v13 >> v23));
    v32 = stpcpy(v30 + 2, v31);
    *v32 = v25;
    v32[1] = 45;
    v33 = StringTable::feat_val(*v26, *((_DWORD *)this + 40), v17);
    v34 = stpcpy(v32 + 2, v33);
    *v34 = v25;
    v34[1] = 45;
    v35 = StringTable::feat_val(*v26, *((_DWORD *)this + 40), v37);
    v36 = stpcpy(v34 + 2, v35);
    *v36 = v25;
    v36[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v38, (char *)&v40);
    v11 = (void **)((char *)this + 280);
    if (*((char *)this + 303) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = v38;
    *((_QWORD *)this + 37) = v39;
    if (*((char *)this + 303) < 0)
      return (char *)*v11;
  }
  return (char *)v11;
}

void sub_1DE98E590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Database::context_encode(Database *this, int a2, int a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unsigned int *v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v19;
  unsigned int v20;
  int v21;

  v8 = *((_QWORD *)this + 17);
  if (v8)
  {
    v9 = *((_QWORD *)this + 18) - v8;
    if (v9)
    {
      v10 = v9 >> 2;
      v11 = (_DWORD *)*((_QWORD *)this + 17);
      do
      {
        v12 = v10 >> 1;
        v13 = &v11[v10 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v10 += ~(v10 >> 1);
        if (v15 < ((a3 << 24) | (a5 << 16) | (a2 << 8) | a6))
          v11 = v14;
        else
          v10 = v12;
      }
      while (v10);
    }
    else
    {
      v11 = (_DWORD *)*((_QWORD *)this + 17);
    }
    v19 = ((unint64_t)v11 - v8) >> 2;
    if (a7)
      v20 = 0x80000000;
    else
      v20 = 0;
    v21 = *((_DWORD *)this + 52);
    if (!a8)
      v21 = 0;
    return v21 | v20 | (a4 << *((_DWORD *)this + 50)) | v19;
  }
  else
  {
    if (a7)
      v16 = 0x80000000;
    else
      v16 = 0;
    v17 = *((_DWORD *)this + 52);
    if (!a8)
      v17 = 0;
    return (a2 << 6) | (a3 << 18) | (a4 << 24) | (a5 << 12) | a6 | v16 | v17;
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v17 = *a3;
  v18 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v18;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = 0;
  *((_DWORD *)i + 10) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_38:
    *v26 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v25 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DE98E8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Database>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Database>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Database>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t Database::feat_name_to_fingerprint_mask(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 304), a2);
  if (!v3)
    return 0;
  v4 = *((_DWORD *)v3 + 10);
  v5 = *(_DWORD *)(a1 + 180);
  v6 = __OFSUB__(v4, v5);
  v7 = v4 - v5;
  if (v7 < 0 != v6 || v4 >= *(_DWORD *)(a1 + 160))
  {
    return 0;
  }
  else if (v7 >= *(_DWORD *)(a1 + 184))
  {
    return 0;
  }
  else
  {
    return (unsigned __int16)(1 << v7);
  }
}

char *Database::feat_val(Database *a1, __int128 *a2, signed int a3)
{
  unsigned __int8 *v5;
  __int128 *v7;

  v7 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 304, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  return Database::feat_val(a1, *((_DWORD *)v5 + 10), a3);
}

void Database::add_unit_range(Database *this, unsigned int a2, unsigned int a3, UnitCandidates *a4)
{
  unsigned int v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int *v36;
  _DWORD *v37;
  std::vector<int>::pointer v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  char *v48;
  _WORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  _WORD *v58;
  __int16 v59;
  unsigned int *v60;
  unsigned int *v61;
  std::vector<int>::pointer begin;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  int *v75;
  _DWORD *v76;
  std::vector<int>::pointer v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  int *v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  char *v87;
  _WORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _WORD *v96;
  __int16 v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  int *v101;
  int *v102;
  int v103;
  int v104;
  int *v105;
  std::vector<int>::pointer v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  int *v112;
  int v113;
  char *v114;
  unsigned int v115;
  unsigned int i;
  void **v118;
  std::vector<int> *v119;

  v5 = a2;
  v7 = (char *)a4 + 64;
  v6 = (char *)*((_QWORD *)a4 + 8);
  v8 = (char *)a4 + 64;
  if (v6)
  {
    v8 = (char *)a4 + 64;
    do
    {
      v9 = *((_DWORD *)v6 + 7);
      if (v9 >= a2)
      {
        if (v9 <= a2)
        {
          if (*((_DWORD *)v6 + 8) < a2)
            v6 += 8;
          else
            v8 = v6;
        }
        else
        {
          v8 = v6;
        }
      }
      else
      {
        v6 += 8;
      }
      v6 = *(char **)v6;
    }
    while (v6);
  }
  if (a2 < a3)
  {
    v118 = (void **)((char *)a4 + 32);
    v119 = (std::vector<int> *)((char *)a4 + 8);
    v10 = (_QWORD *)((char *)a4 + 24);
    v115 = a3;
    v114 = (char *)a4 + 64;
    while (1)
    {
      v11 = a3;
      v12 = v7;
      v13 = a3;
      if (v8 == v7)
        break;
      v11 = *((_DWORD *)v8 + 7);
      if (v11 >= a3)
      {
        v11 = a3;
        v12 = v8;
        v13 = a3;
        break;
      }
      v14 = (_QWORD *)*((_QWORD *)v8 + 1);
      v15 = v8;
      if (v14)
      {
        do
        {
          v12 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v15[2];
          v16 = *v12 == (_QWORD)v15;
          v15 = v12;
        }
        while (!v16);
      }
      v13 = *((_DWORD *)v8 + 8);
      if (v11 > v5)
        break;
LABEL_156:
      v5 = v13;
      v8 = (char *)v12;
      if (v13 >= a3)
        return;
    }
    if (v11 >= *(_DWORD *)a4 + v5 - ((*((_QWORD *)a4 + 2) - *((_QWORD *)a4 + 1)) >> 2))
      v17 = *(_DWORD *)a4 + v5 - ((*((_QWORD *)a4 + 2) - *((_QWORD *)a4 + 1)) >> 2);
    else
      v17 = v11;
    v18 = (uint64_t *)operator new(0x28uLL);
    v19 = v18;
    *((_DWORD *)v18 + 7) = v5;
    *((_DWORD *)v18 + 8) = v17;
    v20 = (uint64_t *)*((_QWORD *)a4 + 8);
    v21 = (uint64_t **)v7;
    v22 = (uint64_t **)v7;
    for (i = v13; v20; v20 = (uint64_t *)v20[1])
    {
      while (1)
      {
        v21 = (uint64_t **)v20;
        v23 = *((_DWORD *)v20 + 7);
        if (v5 >= v23)
          break;
LABEL_28:
        v20 = (uint64_t *)*v20;
        v22 = v21;
        if (!*v21)
          goto LABEL_34;
      }
      if (v23 >= v5)
      {
        v24 = *((_DWORD *)v20 + 8);
        if (v17 < v24)
          goto LABEL_28;
        if (v24 >= v17)
        {
          operator delete(v18);
          goto LABEL_37;
        }
      }
      v22 = (uint64_t **)(v20 + 1);
    }
LABEL_34:
    *v18 = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v21;
    *v22 = v18;
    v25 = **((_QWORD **)a4 + 7);
    if (v25)
    {
      *((_QWORD *)a4 + 7) = v25;
      v19 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a4 + 8), v19);
    ++*((_QWORD *)a4 + 9);
LABEL_37:
    v26 = *((_QWORD *)a4 + 1);
    v27 = v17 - v5 + ((*((_QWORD *)a4 + 2) - v26) >> 2);
    if (v27 > (*((_QWORD *)a4 + 3) - v26) >> 2)
    {
      std::vector<int>::reserve(v119, v17 - v5 + ((*((_QWORD *)a4 + 2) - v26) >> 2));
      if (*((_QWORD *)a4 + 6) != *((_QWORD *)a4 + 4))
        std::vector<unsigned short>::reserve(v118, v27);
    }
    v28 = v5;
    if (*((_QWORD *)a4 + 6) == *((_QWORD *)a4 + 4))
    {
      if (*((_BYTE *)this + 8))
      {
        if (v17 > v5)
        {
          v60 = (unsigned int *)*((_QWORD *)a4 + 2);
          do
          {
            if ((unint64_t)v60 >= *v10)
            {
              begin = v119->__begin_;
              v63 = ((char *)v60 - (char *)v119->__begin_) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                goto LABEL_160;
              v65 = *v10 - (_QWORD)begin;
              if (v65 >> 1 > v64)
                v64 = v65 >> 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                v66 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v66);
                begin = (std::vector<int>::pointer)*((_QWORD *)a4 + 1);
                v60 = (unsigned int *)*((_QWORD *)a4 + 2);
              }
              else
              {
                v67 = 0;
              }
              v68 = (unsigned int *)&v67[4 * v63];
              *v68 = v5;
              v61 = v68 + 1;
              while (v60 != (unsigned int *)begin)
              {
                v69 = *--v60;
                *--v68 = v69;
              }
              *((_QWORD *)a4 + 1) = v68;
              *((_QWORD *)a4 + 2) = v61;
              *((_QWORD *)a4 + 3) = &v67[4 * v66];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v60 = v5;
              v61 = v60 + 1;
            }
            ++v5;
            *((_QWORD *)a4 + 2) = v61;
            v60 = v61;
          }
          while (v5 != v17);
        }
      }
      else if (v17 > v5)
      {
        v98 = *((_QWORD *)this + 11);
        v99 = v98 + 4 * v17;
        v100 = ~(-1 << *((_DWORD *)this + 47));
        v101 = (int *)(v98 + 4 * v28);
        v102 = (int *)*((_QWORD *)a4 + 2);
        do
        {
          v103 = *v101++;
          v104 = v103 & v100;
          if ((unint64_t)v102 >= *v10)
          {
            v106 = v119->__begin_;
            v107 = v102 - v119->__begin_;
            v108 = v107 + 1;
            if ((unint64_t)(v107 + 1) >> 62)
LABEL_160:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v109 = *v10 - (_QWORD)v106;
            if (v109 >> 1 > v108)
              v108 = v109 >> 1;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
              v110 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v110 = v108;
            if (v110)
            {
              v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v110);
              v106 = (std::vector<int>::pointer)*((_QWORD *)a4 + 1);
              v102 = (int *)*((_QWORD *)a4 + 2);
            }
            else
            {
              v111 = 0;
            }
            v112 = (int *)&v111[4 * v107];
            *v112 = v104;
            v105 = v112 + 1;
            while (v102 != v106)
            {
              v113 = *--v102;
              *--v112 = v113;
            }
            *((_QWORD *)a4 + 1) = v112;
            *((_QWORD *)a4 + 2) = v105;
            *((_QWORD *)a4 + 3) = &v111[4 * v110];
            if (v106)
              operator delete(v106);
          }
          else
          {
            *v102 = v104;
            v105 = v102 + 1;
          }
          *((_QWORD *)a4 + 2) = v105;
          v102 = v105;
        }
        while ((unint64_t)v101 < v99);
      }
    }
    else
    {
      v29 = *((_QWORD *)this + 11);
      v30 = v29 + 4 * v17;
      v31 = *((_DWORD *)this + 47);
      if (*((_BYTE *)this + 8))
      {
        if (v17 > v5)
        {
          v32 = (unsigned int *)(v29 + 4 * v5);
          do
          {
            v34 = *v32++;
            v33 = v34;
            v36 = (unsigned int *)*((_QWORD *)a4 + 2);
            v35 = *((_QWORD *)a4 + 3);
            if ((unint64_t)v36 >= v35)
            {
              v38 = v119->__begin_;
              v39 = ((char *)v36 - (char *)v119->__begin_) >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
                goto LABEL_160;
              v41 = v35 - (_QWORD)v38;
              if (v41 >> 1 > v40)
                v40 = v41 >> 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v42 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v42);
                v38 = (std::vector<int>::pointer)*((_QWORD *)a4 + 1);
                v36 = (unsigned int *)*((_QWORD *)a4 + 2);
              }
              else
              {
                v43 = 0;
              }
              v44 = (unsigned int *)&v43[4 * v39];
              *v44 = v5;
              v37 = v44 + 1;
              while (v36 != (unsigned int *)v38)
              {
                v45 = *--v36;
                *--v44 = v45;
              }
              *((_QWORD *)a4 + 1) = v44;
              *((_QWORD *)a4 + 2) = v37;
              *((_QWORD *)a4 + 3) = &v43[4 * v42];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *v36 = v5;
              v37 = v36 + 1;
            }
            *((_QWORD *)a4 + 2) = v37;
            v46 = v33 >> v31;
            v48 = (char *)*((_QWORD *)a4 + 5);
            v47 = *((_QWORD *)a4 + 6);
            if ((unint64_t)v48 >= v47)
            {
              v50 = (char *)*v118;
              v51 = v48 - (_BYTE *)*v118;
              if (v51 <= -3)
                goto LABEL_161;
              v52 = v51 >> 1;
              v53 = v47 - (_QWORD)v50;
              if (v53 <= (v51 >> 1) + 1)
                v54 = v52 + 1;
              else
                v54 = v53;
              v55 = v53 >= 0x7FFFFFFFFFFFFFFELL;
              v56 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v55)
                v56 = v54;
              if (v56)
              {
                v56 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v56);
                v50 = (char *)*((_QWORD *)a4 + 4);
                v48 = (char *)*((_QWORD *)a4 + 5);
              }
              else
              {
                v57 = 0;
              }
              v58 = (_WORD *)(v56 + 2 * v52);
              *v58 = v46;
              v49 = v58 + 1;
              while (v48 != v50)
              {
                v59 = *((_WORD *)v48 - 1);
                v48 -= 2;
                *--v58 = v59;
              }
              *((_QWORD *)a4 + 4) = v58;
              *((_QWORD *)a4 + 5) = v49;
              *((_QWORD *)a4 + 6) = v56 + 2 * v57;
              if (v50)
                operator delete(v50);
            }
            else
            {
              *(_WORD *)v48 = v46;
              v49 = v48 + 2;
            }
            ++v5;
            *((_QWORD *)a4 + 5) = v49;
          }
          while ((unint64_t)v32 < v30);
        }
      }
      else if (v17 > v5)
      {
        v70 = (unsigned int *)(v29 + 4 * v5);
        do
        {
          v72 = *v70++;
          v71 = v72;
          v73 = v72 & ~(-1 << v31);
          v75 = (int *)*((_QWORD *)a4 + 2);
          v74 = *((_QWORD *)a4 + 3);
          if ((unint64_t)v75 >= v74)
          {
            v77 = v119->__begin_;
            v78 = v75 - v119->__begin_;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
              goto LABEL_160;
            v80 = v74 - (_QWORD)v77;
            if (v80 >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v81);
              v77 = (std::vector<int>::pointer)*((_QWORD *)a4 + 1);
              v75 = (int *)*((_QWORD *)a4 + 2);
            }
            else
            {
              v82 = 0;
            }
            v83 = (int *)&v82[4 * v78];
            *v83 = v73;
            v76 = v83 + 1;
            while (v75 != v77)
            {
              v84 = *--v75;
              *--v83 = v84;
            }
            *((_QWORD *)a4 + 1) = v83;
            *((_QWORD *)a4 + 2) = v76;
            *((_QWORD *)a4 + 3) = &v82[4 * v81];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *v75 = v73;
            v76 = v75 + 1;
          }
          *((_QWORD *)a4 + 2) = v76;
          v85 = v71 >> v31;
          v87 = (char *)*((_QWORD *)a4 + 5);
          v86 = *((_QWORD *)a4 + 6);
          if ((unint64_t)v87 >= v86)
          {
            v89 = (char *)*v118;
            v90 = v87 - (_BYTE *)*v118;
            if (v90 <= -3)
LABEL_161:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v91 = v90 >> 1;
            v92 = v86 - (_QWORD)v89;
            if (v92 <= (v90 >> 1) + 1)
              v93 = v91 + 1;
            else
              v93 = v92;
            v55 = v92 >= 0x7FFFFFFFFFFFFFFELL;
            v94 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v55)
              v94 = v93;
            if (v94)
            {
              v94 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v94);
              v89 = (char *)*((_QWORD *)a4 + 4);
              v87 = (char *)*((_QWORD *)a4 + 5);
            }
            else
            {
              v95 = 0;
            }
            v96 = (_WORD *)(v94 + 2 * v91);
            *v96 = v85;
            v88 = v96 + 1;
            while (v87 != v89)
            {
              v97 = *((_WORD *)v87 - 1);
              v87 -= 2;
              *--v96 = v97;
            }
            *((_QWORD *)a4 + 4) = v96;
            *((_QWORD *)a4 + 5) = v88;
            *((_QWORD *)a4 + 6) = v94 + 2 * v95;
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_WORD *)v87 = v85;
            v88 = v87 + 2;
          }
          *((_QWORD *)a4 + 5) = v88;
        }
        while ((unint64_t)v70 < v30);
      }
    }
    a3 = v115;
    v7 = v114;
    v13 = i;
    if (i && *(_QWORD *)a4 != (uint64_t)(*((_QWORD *)a4 + 2) - *((_QWORD *)a4 + 1)) >> 2)
      goto LABEL_156;
  }
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int16 v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFELL];
    v7 = &v4[2 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v10 - 1) = v11;
        v10 -= 2;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void Database::add_units(Database *this, unsigned int a2, unsigned int a3, UnitCandidates *a4)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;

  v4 = (_DWORD *)*((_QWORD *)this + 9);
  v5 = *((_QWORD *)this + 10) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 3;
    v7 = (_DWORD *)*((_QWORD *)this + 9);
    v8 = v6;
    do
    {
      v9 = v8 >> 1;
      v10 = &v7[2 * (v8 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v8 += ~(v8 >> 1);
      if (v12 < a2)
        v7 = v11;
      else
        v8 = v9;
    }
    while (v8);
    v13 = v7[1];
    do
    {
      v14 = v6 >> 1;
      v15 = &v4[2 * (v6 >> 1)];
      v17 = *v15;
      v16 = v15 + 2;
      v6 += ~(v6 >> 1);
      if (v17 > a3)
        v6 = v14;
      else
        v4 = v16;
    }
    while (v6);
    v18 = v4[1];
  }
  else
  {
    v18 = v4[1];
    v13 = v18;
  }
  Database::add_unit_range(this, v13, v18, a4);
}

void ViterbiStream::~ViterbiStream(ViterbiStream *this)
{
  void **v2;

  *(_QWORD *)this = &off_1EA91D778;
  v2 = (void **)((char *)this + 328);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 304);
  std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA91D778;
  v2 = (void **)((char *)this + 328);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 304);
  std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void ViterbiStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *i;
  _DWORD *v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  Unit *v110;
  Unit *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int32x2_t *v131;
  _QWORD *v132;
  int v133;
  _QWORD *v134;
  int *v135;
  int *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t j;
  uint64_t *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  _DWORD *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  int v157;
  NSObject *v158;
  uint64_t **v159;
  const char *v160;
  uint64_t **v161;
  char *v162;
  uint64_t *v163;
  uint64_t v164;
  __int128 v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  uint64_t *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::runtime_error *exception;
  std::__shared_weak_count *v189;
  uint64_t *v190;
  uint64_t v191;
  int *v192;
  int v193;
  int *v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t *v199;
  _QWORD v200[2];
  void *__p;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  _QWORD v206[2];
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t *v210;
  std::__shared_weak_count *v211;
  void *v212;
  _BYTE *v213;
  void *p_buf;
  _BYTE v215[64];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  int *v223;
  int *v224;
  uint64_t v225;
  void **v226;
  std::__shared_weak_count *v227;
  Unit *v228;
  unint64_t v229;
  uint64_t *v230;
  void *v231;
  int64x2_t buf;
  _QWORD v233[4];

  v233[1] = *MEMORY[0x1E0C80C00];
  v5 = *v3;
  v4 = v3[1];
  v196 = a1;
  if (*v3 != v4)
  {
    v6 = a1 + 320;
    v7 = a1 + 328;
    do
    {
      v226 = 0;
      v227 = 0;
      v228 = 0;
      v202 = 0;
      v203 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v5 + 608), *(_QWORD *)(v5 + 616), (uint64_t)(*(_QWORD *)(v5 + 616) - *(_QWORD *)(v5 + 608)) >> 2);
      v8 = *(std::__shared_weak_count **)(v196 + 296);
      v200[0] = *(_QWORD *)(v196 + 288);
      v200[1] = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      fetch_unit_by_ctx_number(&__p, v200, (uint64_t *)&v226);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (__p)
      {
        v202 = __p;
        operator delete(__p);
      }
      (***(void (****)(_QWORD, uint64_t, void ***))(v196 + 272))(*(_QWORD *)(v196 + 272), v5, &v226);
      a1 = v196;
      v14 = *(_QWORD **)(v196 + 312);
      v13 = *(_QWORD *)(v196 + 320);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *(_QWORD *)(v196 + 304);
        v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v16) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        *(_QWORD *)&v215[24] = v6;
        if (v20)
        {
          if (v20 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = (char *)operator new(24 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[24 * v17];
        p_buf = v21;
        *(_QWORD *)v215 = v22;
        *(_QWORD *)&v215[8] = v22;
        *(_QWORD *)&v215[16] = &v21[24 * v20];
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
        *(_QWORD *)v22 = 0;
        std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v22, *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72)) >> 3));
        v23 = *(_QWORD *)v215;
        v15 = *(_QWORD *)&v215[8] + 24;
        *(_QWORD *)&v215[8] += 24;
        a1 = v196;
        v25 = *(_QWORD **)(v196 + 304);
        v24 = *(_QWORD **)(v196 + 312);
        if (v24 == v25)
        {
          v27 = vdupq_n_s64((unint64_t)v24);
        }
        else
        {
          do
          {
            *(_QWORD *)(v23 - 24) = 0;
            *(_QWORD *)(v23 - 16) = 0;
            v23 -= 24;
            *(_QWORD *)(v23 + 16) = 0;
            v26 = *(_OWORD *)(v24 - 3);
            v24 -= 3;
            *(_OWORD *)v23 = v26;
            *(_QWORD *)(v23 + 16) = v24[2];
            *v24 = 0;
            v24[1] = 0;
            v24[2] = 0;
          }
          while (v24 != v25);
          v27 = *(int64x2_t *)(v196 + 304);
          v15 = *(_QWORD *)&v215[8];
        }
        *(_QWORD *)(v196 + 304) = v23;
        *(_QWORD *)(v196 + 312) = v15;
        *(int64x2_t *)v215 = v27;
        v28 = *(_QWORD *)(v196 + 320);
        *(_QWORD *)(v196 + 320) = *(_QWORD *)&v215[16];
        *(_QWORD *)&v215[16] = v28;
        p_buf = (void *)v27.i64[0];
        std::__split_buffer<std::vector<MarkerRecord>>::~__split_buffer((uint64_t)&p_buf);
      }
      else
      {
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v14, *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72)) >> 3));
        v15 = (uint64_t)(v14 + 3);
        *(_QWORD *)(v196 + 312) = v15;
      }
      *(_QWORD *)(a1 + 312) = v15;
      std::vector<Prompt>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Prompt*>,std::__wrap_iter<Prompt*>>(v7, *(_QWORD *)(a1 + 336), *(uint64_t **)(v5 + 632), *(_QWORD *)(v5 + 640), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v5 + 640) - *(_QWORD *)(v5 + 632)) >> 3));
      p_buf = &v226;
      std::vector<Unit>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
      v5 += 656;
    }
    while (v5 != v4);
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 24))(*(_QWORD *)(a1 + 272)))
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 272) + 8))(&v212);
    v29 = operator new(0x30uLL);
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = 0;
    v30 = v29 + 3;
    *v29 = &off_1EA936610;
    v29[4] = 0;
    v29[5] = 0;
    v210 = v29 + 3;
    v211 = (std::__shared_weak_count *)v29;
    v208 = 0;
    v209 = 0;
    v207 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v207, v212, (uint64_t)v213, (v213 - (_BYTE *)v212) >> 2);
    v31 = *(std::__shared_weak_count **)(a1 + 296);
    v206[0] = *(_QWORD *)(a1 + 288);
    v206[1] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    fetch_unit_by_ctx_number(&v207, v206, v30);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v207)
    {
      v208 = v207;
      operator delete(v207);
    }
    v36 = v210;
    v38 = *(_QWORD *)(a1 + 304);
    v37 = *(_QWORD *)(a1 + 312);
    if (0xD37A6F4DE9BD37A7 * ((v210[1] - *v210) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Size of markers doesn't match size of units.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v37 != v38)
    {
      v39 = 0;
      v40 = 0;
      v41 = 160;
      do
      {
        v42 = (uint64_t *)(*v36 + v41);
        if ((uint64_t *)(v38 + v39) != v42)
        {
          std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v42, *(_QWORD *)(v38 + v39), *(_QWORD *)(v38 + v39 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v38 + v39 + 8) - *(_QWORD *)(v38 + v39)) >> 3));
          v38 = *(_QWORD *)(a1 + 304);
          v37 = *(_QWORD *)(a1 + 312);
        }
        ++v40;
        v39 += 24;
        v41 += 184;
      }
      while (v40 < 0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3));
    }
    v43 = *(std::__shared_weak_count **)(a1 + 296);
    v204 = *(_QWORD *)(a1 + 288);
    v205 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v189 = v43;
    v46 = *(int **)(a1 + 328);
    v47 = *(int **)(a1 + 336);
    if (v46 != v47)
    {
      v195 = 0;
      v199 = v36;
      v190 = v36 + 2;
      v192 = *(int **)(a1 + 336);
      while (1)
      {
        v49 = *((_QWORD *)v46 + 6);
        v48 = *((_QWORD *)v46 + 7);
        v50 = v46[1];
        v51 = 2 * *v46 + v195;
        v224 = 0;
        v225 = 0;
        v223 = 0;
        if (0xD37A6F4DE9BD37A7 * ((v36[1] - *v36) >> 3) > v51)
        {
          v52 = (_QWORD *)(*v36 + 184 * v51);
          v223 = (int *)v52[20];
          v52[20] = 0;
          v53 = v224;
          v224 = (int *)v52[21];
          v52[21] = v53;
          v54 = v225;
          v225 = v52[22];
          v52[22] = v54;
        }
        v55 = 2 * v50;
        v56 = v48 - v49;
        v57 = (unint64_t)(v48 - v49) >> 2;
        if ((_DWORD)v55 != (_DWORD)v57)
        {
          v193 = v55;
          v194 = v46;
          buf = 0uLL;
          v233[0] = 0;
          v197 = (int)(v56 >> 2);
          v198 = v55 + (int)v51;
          if (v51 >= v198)
          {
            v59 = (int)v55;
          }
          else
          {
            v191 = v48 - v49;
            v58 = 0;
            v59 = (int)v55;
            v60 = v51;
            do
            {
              v61 = *v36 + 184 * v60;
              v63 = *(_DWORD **)(v61 + 160);
              for (i = *(_DWORD **)(v61 + 168); v63 != i; v63 += 14)
              {
                if (*v63 == 3)
                {
                  v64 = ((v60 - v51) * v197 / v59) & ~((int)((v60 - v51) * v197 / v59) >> 31);
                  if (v64 >= (int)v57)
                    v64 = v57;
                  v65 = v64 + v51;
                  if (v58 >= v233[0])
                  {
                    v66 = (uint64_t)(v58 - buf.i64[0]) >> 6;
                    if ((unint64_t)(v66 + 1) >> 58)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v67 = (v233[0] - buf.i64[0]) >> 5;
                    if (v67 <= v66 + 1)
                      v67 = v66 + 1;
                    if (v233[0] - buf.i64[0] >= 0x7FFFFFFFFFFFFFC0uLL)
                      v68 = 0x3FFFFFFFFFFFFFFLL;
                    else
                      v68 = v67;
                    *(_QWORD *)&v215[24] = v233;
                    if (v68)
                    {
                      if (v68 >> 58)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v69 = (char *)operator new(v68 << 6);
                    }
                    else
                    {
                      v69 = 0;
                    }
                    p_buf = v69;
                    *(_QWORD *)v215 = &v69[64 * v66];
                    *(_QWORD *)&v215[8] = *(_QWORD *)v215;
                    *(_QWORD *)&v215[16] = &v69[64 * v68];
                    std::pair<int,MarkerRecord>::pair[abi:ne180100]<int &,MarkerRecord&,0>(*(uint64_t *)v215, v65, (uint64_t)v63);
                    v70 = *(_QWORD *)v215;
                    v58 = *(_QWORD *)&v215[8] + 64;
                    *(_QWORD *)&v215[8] += 64;
                    v71 = buf;
                    if (buf.i64[1] == buf.i64[0])
                    {
                      v77 = vdupq_n_s64(buf.u64[1]);
                    }
                    else
                    {
                      v72 = 0;
                      do
                      {
                        v73 = v70 + v72;
                        v74 = v71.i64[1] + v72;
                        *(_DWORD *)(v73 - 64) = *(_DWORD *)(v71.i64[1] + v72 - 64);
                        *(_QWORD *)(v73 - 56) = *(_QWORD *)(v71.i64[1] + v72 - 56);
                        v75 = *(_OWORD *)(v71.i64[1] + v72 - 48);
                        *(_QWORD *)(v73 - 32) = *(_QWORD *)(v71.i64[1] + v72 - 32);
                        *(_OWORD *)(v73 - 48) = v75;
                        *(_QWORD *)(v74 - 40) = 0;
                        *(_QWORD *)(v74 - 32) = 0;
                        *(_QWORD *)(v74 - 48) = 0;
                        v76 = *(_OWORD *)(v71.i64[1] + v72 - 24);
                        *(_WORD *)(v73 - 8) = *(_WORD *)(v71.i64[1] + v72 - 8);
                        *(_OWORD *)(v73 - 24) = v76;
                        v72 -= 64;
                      }
                      while (v71.i64[1] + v72 != v71.i64[0]);
                      v70 += v72;
                      v77 = buf;
                      v58 = *(_QWORD *)&v215[8];
                    }
                    buf.i64[0] = v70;
                    buf.i64[1] = v58;
                    *(int64x2_t *)v215 = v77;
                    v78 = v233[0];
                    v233[0] = *(_QWORD *)&v215[16];
                    *(_QWORD *)&v215[16] = v78;
                    p_buf = (void *)v77.i64[0];
                    std::__split_buffer<std::pair<int,MarkerRecord>>::~__split_buffer((uint64_t)&p_buf);
                  }
                  else
                  {
                    std::pair<int,MarkerRecord>::pair[abi:ne180100]<int &,MarkerRecord&,0>(v58, v65, (uint64_t)v63);
                    v58 += 64;
                  }
                  buf.i64[1] = v58;
                }
              }
              ++v60;
              v36 = v199;
            }
            while (v60 < v198);
            v56 = v191;
          }
          v79 = *v36;
          if (v59)
          {
            v80 = v79 + 184 * v51;
            v81 = v80 + 184 * (int)v59;
            v82 = v36[1];
            if (v81 != v82)
            {
              v83 = 184 * (int)v59;
              do
              {
                v84 = v80 + v83;
                *(_QWORD *)v80 = *(_QWORD *)(v80 + v83);
                *(_DWORD *)(v80 + 8) = *(_DWORD *)(v80 + v83 + 8);
                v85 = *(void **)(v80 + 16);
                if (v85)
                {
                  *(_QWORD *)(v80 + 24) = v85;
                  operator delete(v85);
                  *(_QWORD *)(v80 + 16) = 0;
                  *(_QWORD *)(v80 + 24) = 0;
                  *(_QWORD *)(v80 + 32) = 0;
                }
                *(_OWORD *)(v80 + 16) = *(_OWORD *)(v84 + 16);
                *(_QWORD *)(v80 + 32) = *(_QWORD *)(v84 + 32);
                *(_QWORD *)(v84 + 16) = 0;
                *(_QWORD *)(v84 + 24) = 0;
                *(_QWORD *)(v84 + 32) = 0;
                v86 = (void **)(v80 + 40);
                if (*(char *)(v80 + 63) < 0)
                  operator delete(*v86);
                v87 = v84 + 40;
                v88 = v80 + v83;
                *(_OWORD *)v86 = *(_OWORD *)v87;
                *(_QWORD *)(v80 + 56) = *(_QWORD *)(v87 + 16);
                *(_BYTE *)(v80 + v83 + 63) = 0;
                *(_BYTE *)v87 = 0;
                v89 = (void **)(v80 + 64);
                if (*(char *)(v80 + 87) < 0)
                  operator delete(*v89);
                *(_OWORD *)v89 = *(_OWORD *)(v88 + 64);
                *(_QWORD *)(v80 + 80) = *(_QWORD *)(v88 + 80);
                *(_BYTE *)(v88 + 87) = 0;
                *(_BYTE *)(v88 + 64) = 0;
                v90 = *(void **)(v80 + 88);
                if (v90)
                {
                  *(_QWORD *)(v80 + 96) = v90;
                  operator delete(v90);
                  *(_QWORD *)(v80 + 88) = 0;
                  *(_QWORD *)(v80 + 96) = 0;
                  *(_QWORD *)(v80 + 104) = 0;
                }
                v91 = (_QWORD *)(v88 + 88);
                *(_OWORD *)(v80 + 88) = *(_OWORD *)(v88 + 88);
                v92 = v80 + v83;
                *(_QWORD *)(v80 + 104) = *(_QWORD *)(v80 + v83 + 104);
                *v91 = 0;
                v91[1] = 0;
                v91[2] = 0;
                v93 = *(void **)(v80 + 112);
                if (v93)
                {
                  *(_QWORD *)(v80 + 120) = v93;
                  operator delete(v93);
                  *(_QWORD *)(v80 + 112) = 0;
                  *(_QWORD *)(v80 + 120) = 0;
                  *(_QWORD *)(v80 + 128) = 0;
                }
                *(_OWORD *)(v80 + 112) = *(_OWORD *)(v92 + 112);
                *(_QWORD *)(v80 + 128) = *(_QWORD *)(v92 + 128);
                *(_QWORD *)(v92 + 112) = 0;
                *(_QWORD *)(v92 + 120) = 0;
                *(_QWORD *)(v92 + 128) = 0;
                *(_OWORD *)(v80 + 136) = *(_OWORD *)(v92 + 136);
                *(_DWORD *)(v80 + 152) = *(_DWORD *)(v92 + 152);
                std::vector<MarkerRecord>::__vdeallocate((uint64_t *)(v80 + 160));
                *(_OWORD *)(v80 + 160) = *(_OWORD *)(v92 + 160);
                *(_QWORD *)(v80 + 176) = *(_QWORD *)(v92 + 176);
                *(_QWORD *)(v92 + 168) = 0;
                *(_QWORD *)(v92 + 176) = 0;
                *(_QWORD *)(v92 + 160) = 0;
                v80 += 184;
              }
              while (v80 + v83 != v82);
              v36 = v199;
              v81 = v199[1];
            }
            v94 = v197;
            while (v81 != v80)
            {
              v81 -= 184;
              std::allocator<Unit>::destroy[abi:ne180100](v81);
            }
            v36[1] = v80;
            v79 = *v36;
          }
          else
          {
            v94 = v197;
          }
          v221 = 0u;
          v222 = 0u;
          v219 = 0u;
          v220 = 0u;
          v217 = 0u;
          v218 = 0u;
          v216 = 0u;
          *(_QWORD *)v215 = 0x7FFFFFFFLL;
          p_buf = (void *)0x8000000080000000;
          memset(&v215[8], 0, 56);
          std::string::basic_string[abi:ne180100]<0>(&v215[56], &byte_1DEBD87CE);
          *((_QWORD *)&v221 + 1) = 0;
          v222 = 0uLL;
          v217 = 0u;
          v218 = 0u;
          v219 = 0u;
          if (((unint64_t)v56 >> 2))
          {
            v95 = (uint64_t *)(v79 + 184 * v51);
            v97 = v36[1];
            v96 = v36[2];
            if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v96 - v97) >> 3) >= v94)
            {
              v103 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v97 - (_QWORD)v95) >> 3);
              v104 = v94;
              if (v94 <= v103)
                goto LABEL_118;
              v105 = 0;
              v104 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v97 - (_QWORD)v95) >> 3);
              v106 = v97 + 184 * (v94 - v103);
              v107 = 184 * (int)v94 - (v97 - (_QWORD)v95);
              do
              {
                Unit::Unit((Unit *)(v97 + v105), (const Unit *)&p_buf);
                v105 += 184;
              }
              while (v107 != v105);
              v36[1] = v106;
              v94 = v197;
              if ((uint64_t *)v97 != v95)
              {
LABEL_118:
                std::vector<Unit>::__move_range((uint64_t)v36, (uint64_t)v95, v97, (uint64_t)&v95[23 * (int)v94]);
                v108 = (uint64_t *)&p_buf;
                if (v95 <= (uint64_t *)&p_buf)
                {
                  if (v36[1] <= (unint64_t)&p_buf)
                    v109 = 0;
                  else
                    v109 = v94;
                  v108 = (uint64_t *)&v215[184 * v109 - 8];
                }
                do
                {
                  Unit::operator=((uint64_t)v95, v108);
                  v95 += 23;
                  --v104;
                }
                while (v104);
              }
            }
            else
            {
              v98 = *v36;
              v99 = v94 - 0x2C8590B21642C859 * ((uint64_t)(v97 - *v36) >> 3);
              if (v99 > 0x1642C8590B21642)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v100 = 0xD37A6F4DE9BD37A7 * ((v96 - v98) >> 3);
              if (2 * v100 > v99)
                v99 = 2 * v100;
              if (v100 >= 0xB21642C8590B21)
                v101 = 0x1642C8590B21642;
              else
                v101 = v99;
              v230 = v190;
              if (v101)
                v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(v101);
              else
                v102 = 0;
              v110 = (Unit *)(v101 + 8 * (((uint64_t)v95 - v98) >> 3));
              v226 = (void **)v101;
              v227 = (std::__shared_weak_count *)v110;
              v228 = v110;
              v229 = v101 + 184 * v102;
              v111 = (Unit *)((char *)v110 + 184 * (int)v94);
              v112 = 184 * (int)v94;
              do
              {
                Unit::Unit(v110, (const Unit *)&p_buf);
                v110 = (Unit *)((char *)v110 + 184);
                v112 -= 184;
              }
              while (v112);
              v228 = v111;
              std::vector<Unit>::__swap_out_circular_buffer(v36, &v226, v95);
              std::__split_buffer<Unit>::~__split_buffer((uint64_t)&v226);
            }
          }
          v226 = (void **)&v221 + 1;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v226);
          if (*((_QWORD *)&v218 + 1))
          {
            *(_QWORD *)&v219 = *((_QWORD *)&v218 + 1);
            operator delete(*((void **)&v218 + 1));
          }
          if ((_QWORD)v217)
          {
            *((_QWORD *)&v217 + 1) = v217;
            operator delete((void *)v217);
          }
          if (SHIBYTE(v216) < 0)
            operator delete(*(void **)&v215[56]);
          if ((v215[55] & 0x80000000) != 0)
            operator delete(*(void **)&v215[32]);
          if (*(_QWORD *)&v215[8])
          {
            *(_QWORD *)&v215[16] = *(_QWORD *)&v215[8];
            operator delete(*(void **)&v215[8]);
          }
          v113 = buf.i64[1];
          if (buf.i64[0] != buf.i64[1])
          {
            v114 = buf.i64[0] + 16;
            do
            {
              v116 = v114 - 16;
              v115 = *(_DWORD *)(v114 - 16);
              LODWORD(p_buf) = v115;
              *(_QWORD *)v215 = *(_QWORD *)(v114 - 8);
              if (*(char *)(v114 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v215[8], *(const std::string::value_type **)v114, *(_QWORD *)(v114 + 8));
                v115 = (int)p_buf;
              }
              else
              {
                v117 = *(_OWORD *)v114;
                *(_QWORD *)&v215[24] = *(_QWORD *)(v114 + 16);
                *(_OWORD *)&v215[8] = v117;
              }
              v118 = *(_OWORD *)(v114 + 24);
              *(_WORD *)&v215[48] = *(_WORD *)(v114 + 40);
              *(_OWORD *)&v215[32] = v118;
              v119 = *v36 + 184 * v115;
              v122 = *(_QWORD *)(v119 + 168);
              v121 = (uint64_t *)(v119 + 168);
              v120 = v122;
              v123 = v121 - 1;
              if (v122 >= v121[1])
              {
                v124 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v123, (uint64_t)v215);
              }
              else
              {
                std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v123, (uint64_t)v215);
                v124 = v120 + 56;
              }
              *v121 = v124;
              if ((v215[31] & 0x80000000) != 0)
                operator delete(*(void **)&v215[8]);
              v114 += 64;
              v36 = v199;
            }
            while (v116 + 64 != v113);
          }
          v195 = v195 - v193 + v57;
          p_buf = &buf;
          std::vector<std::pair<int,MarkerRecord>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
          v46 = v194;
          v47 = v192;
        }
        v125 = *((_QWORD *)v46 + 6);
        if (*((_QWORD *)v46 + 7) != v125)
          break;
LABEL_165:
        v134 = (_QWORD *)(*v36 + 184 * v51);
        v135 = (int *)v134[20];
        v134[20] = v223;
        v223 = v135;
        v136 = (int *)v134[21];
        v134[21] = v224;
        v224 = v136;
        v137 = v134[22];
        v134[22] = v225;
        v225 = v137;
        p_buf = &v223;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
        v46 += 18;
        if (v46 == v47)
          goto LABEL_166;
      }
      v126 = 0;
      v127 = v204;
      v128 = 184 * v51 + 152;
      while (1)
      {
        v129 = *(unsigned int *)(v125 + 4 * v126);
        if ((v129 & 0x80000000) == 0 && *(_BYTE *)(v127 + 8))
          LODWORD(v129) = *(_DWORD *)(*(_QWORD *)(v127 + 96) + 4 * v129);
        v130 = *v36;
        v131 = (int32x2_t *)(*v36 + v128 - 152);
        v131->i32[0] = v129;
        (**(void (***)(uint64_t, int32x2_t *))v127)(v127, v131);
        v132 = (_QWORD *)(v130 + v128 - 112);
        v133 = *(char *)(v130 + v128 - 89);
        if (v133 < 0)
        {
          if (*(_QWORD *)(v130 + v128 - 104) == 4)
          {
            v132 = (_QWORD *)*v132;
LABEL_161:
            if (*(_DWORD *)v132 == 829188467 || *(_DWORD *)v132 == 845965683)
              *v131 = vdup_n_s32((int)(float)-*(float *)(v130 + v128));
          }
        }
        else if (v133 == 4)
        {
          goto LABEL_161;
        }
        ++v126;
        v125 = *((_QWORD *)v46 + 6);
        v128 += 184;
        if (v126 >= (*((_QWORD *)v46 + 7) - v125) >> 2)
          goto LABEL_165;
      }
    }
LABEL_166:
    if (v189)
    {
      v138 = (unint64_t *)&v189->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    v140 = *(char **)(v196 + 304);
    v141 = *(char **)(v196 + 312);
    while (v141 != v140)
    {
      v141 -= 24;
      p_buf = v141;
      std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    }
    *(_QWORD *)(v196 + 312) = v140;
    v142 = *(_QWORD *)(v196 + 328);
    for (j = *(_QWORD *)(v196 + 336); j != v142; std::allocator<Prompt>::destroy[abi:ne180100](j))
      j -= 72;
    *(_QWORD *)(v196 + 336) = v142;
    (*(void (**)(_QWORD))(**(_QWORD **)(v196 + 272) + 16))(*(_QWORD *)(v196 + 272));
    *(_QWORD *)v215 = 0;
    *(_QWORD *)&v215[8] = 0;
    p_buf = 0;
    v144 = v210;
    v145 = *v210;
    if (v210[1] != *v210)
    {
      v146 = 0;
      v147 = 0;
      do
      {
        v148 = (_DWORD *)(v145 + 184 * v147 + 4);
        if ((unint64_t)v146 >= *(_QWORD *)&v215[8])
        {
          v150 = (char *)p_buf;
          v151 = (v146 - (_BYTE *)p_buf) >> 2;
          v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v153 = *(_QWORD *)&v215[8] - (_QWORD)p_buf;
          if ((uint64_t)(*(_QWORD *)&v215[8] - (_QWORD)p_buf) >> 1 > v152)
            v152 = v153 >> 1;
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
            v154 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v154 = v152;
          if (v154)
          {
            v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v215[8], v154);
            v150 = (char *)p_buf;
            v146 = *(char **)v215;
          }
          else
          {
            v155 = 0;
          }
          v156 = &v155[4 * v151];
          *(_DWORD *)v156 = *v148;
          v149 = v156 + 4;
          while (v146 != v150)
          {
            v157 = *((_DWORD *)v146 - 1);
            v146 -= 4;
            *((_DWORD *)v156 - 1) = v157;
            v156 -= 4;
          }
          p_buf = v156;
          *(_QWORD *)v215 = v149;
          *(_QWORD *)&v215[8] = &v155[4 * v154];
          if (v150)
            operator delete(v150);
        }
        else
        {
          *(_DWORD *)v146 = *v148;
          v149 = v146 + 4;
        }
        *(_QWORD *)v215 = v149;
        ++v147;
        v145 = *v144;
        v146 = v149;
      }
      while (v147 < 0xD37A6F4DE9BD37A7 * ((v144[1] - *v144) >> 3));
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v158 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v224 = 0;
      v225 = 0;
      v223 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v223, p_buf, *(uint64_t *)v215, (uint64_t)(*(_QWORD *)v215 - (_QWORD)p_buf) >> 2);
      stringify_units(&v226, &v223);
      if (SHIBYTE(v228) >= 0)
        v159 = (uint64_t **)&v226;
      else
        v159 = (uint64_t **)v226;
      buf.i32[0] = 136315138;
      *(uint64_t *)((char *)buf.i64 + 4) = (uint64_t)v159;
      _os_log_impl(&dword_1DE3F6000, v158, OS_LOG_TYPE_INFO, "Units    : %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v228) < 0)
        operator delete(v226);
      if (v223)
      {
        v224 = v223;
        operator delete(v223);
      }
    }
    v233[0] = 0;
    buf = 0uLL;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&buf, p_buf, *(uint64_t *)v215, (uint64_t)(*(_QWORD *)v215 - (_QWORD)p_buf) >> 2);
    stringify_units(&v226, (int **)&buf);
    if (SHIBYTE(v228) >= 0)
      v161 = (uint64_t **)&v226;
    else
      v161 = (uint64_t **)v226;
    Diagnostics::log(6, "Units    : %s", v160, v161);
    if (SHIBYTE(v228) < 0)
      operator delete(v226);
    if (buf.i64[0])
    {
      buf.i64[1] = buf.i64[0];
      operator delete((void *)buf.i64[0]);
    }
    if (p_buf)
    {
      *(_QWORD *)v215 = p_buf;
      operator delete(p_buf);
    }
    v162 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v162 + 8) = 0u;
    *(_QWORD *)v162 = &off_1EA932198;
    *((_OWORD *)v162 + 2) = 0u;
    *((_QWORD *)v162 + 3) = v162 + 32;
    p_buf = v162 + 24;
    *(_QWORD *)v215 = v162;
    v226 = &v231;
    v164 = v163[5];
    if (v164)
    {
      *(_QWORD *)&v165 = v144;
      *((_QWORD *)&v165 + 1) = v211;
      if (v211)
      {
        v166 = (unint64_t *)&v211->__shared_owners_;
        do
          v167 = __ldxr(v166);
        while (__stxr(v167 + 1, v166));
      }
      v168 = *(std::__shared_weak_count **)(v164 + 16);
      *(_OWORD *)(v164 + 8) = v165;
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v162 = *(char **)v215;
      v226 = (void **)p_buf;
      v227 = *(std::__shared_weak_count **)v215;
      if (!*(_QWORD *)v215)
        goto LABEL_234;
    }
    else
    {
      v171 = (_QWORD *)operator new();
      v173 = v210;
      v172 = v211;
      *v171 = &off_1EA923588;
      v171[1] = v173;
      v171[2] = v172;
      if (v172)
      {
        v174 = (unint64_t *)&v172->__shared_owners_;
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
      }
      v176 = v163[5];
      v163[5] = (uint64_t)v171;
      if (v176)
        (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
      v226 = (void **)(v162 + 24);
      v227 = (std::__shared_weak_count *)v162;
    }
    v177 = (unint64_t *)(v162 + 8);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
LABEL_234:
    (*(void (**)(uint64_t, void ***))(*(_QWORD *)v196 + 72))(v196, &v226);
    v179 = v227;
    if (v227)
    {
      v180 = (unint64_t *)&v227->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v182 = *(std::__shared_weak_count **)v215;
    if (*(_QWORD *)v215)
    {
      v183 = (unint64_t *)(*(_QWORD *)v215 + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    v185 = v211;
    if (v211)
    {
      v186 = (unint64_t *)&v211->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    if (v212)
    {
      v213 = v212;
      operator delete(v212);
    }
  }
}

void sub_1DE990714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  void *v60;

  v60 = *(void **)(v58 - 216);
  if (v60)
  {
    *(_QWORD *)(v58 - 208) = v60;
    operator delete(v60);
  }
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

void fetch_unit_by_ctx_number(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t *v30;

  v6 = a1[1] - *a1;
  v7 = v6 >> 2;
  v8 = *a3;
  v9 = a3[1];
  v10 = 0xD37A6F4DE9BD37A7 * ((v9 - *a3) >> 3);
  v11 = (v6 >> 2) - v10;
  if (v6 >> 2 <= v10)
  {
    if (v6 >> 2 >= v10)
    {
      v22 = a3[1];
      goto LABEL_20;
    }
    v22 = v8 + 184 * v7;
    while (v9 != v22)
    {
      v9 -= 184;
      std::allocator<Unit>::destroy[abi:ne180100](v9);
    }
LABEL_18:
    a3[1] = v22;
    goto LABEL_20;
  }
  v12 = a3[2];
  if (0xD37A6F4DE9BD37A7 * ((v12 - v9) >> 3) >= v11)
  {
    v22 = v9 + 184 * v11;
    v23 = 184 * v7 - 8 * ((v9 - *a3) >> 3);
    do
    {
      std::allocator<Unit>::construct[abi:ne180100]<Unit>(v9);
      v9 += 184;
      v23 -= 184;
    }
    while (v23);
    goto LABEL_18;
  }
  if ((unint64_t)v6 >= 0x590B21642C85909)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v30 = a3 + 2;
  v13 = 0xD37A6F4DE9BD37A7 * ((v12 - v8) >> 3);
  v14 = 2 * v13;
  if (2 * v13 <= v7)
    v14 = v7;
  if (v13 >= 0xB21642C8590B21)
    v15 = 0x1642C8590B21642;
  else
    v15 = v14;
  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(v15);
  v17 = (uint64_t)&v16[184 * v10];
  v27[0] = v16;
  v27[1] = v17;
  v28 = v17;
  v29 = &v16[184 * v18];
  v19 = 184 * v7;
  v20 = &v16[184 * v7];
  v21 = v19 - 184 * v10;
  do
  {
    std::allocator<Unit>::construct[abi:ne180100]<Unit>(v17);
    v17 += 184;
    v21 -= 184;
  }
  while (v21);
  v28 = (uint64_t)v20;
  std::vector<Unit>::__swap_out_circular_buffer(a3, v27);
  std::__split_buffer<Unit>::~__split_buffer((uint64_t)v27);
  v22 = a3[1];
LABEL_20:
  v24 = *a3;
  if (v22 != *a3)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      *(_DWORD *)(v24 + v25) = *(_DWORD *)(*a1 + 4 * v26);
      (**(void (***)(_QWORD))*a2)(*a2);
      ++v26;
      v24 = *a3;
      v25 += 184;
    }
    while (v26 < 0xD37A6F4DE9BD37A7 * ((a3[1] - *a3) >> 3));
  }
}

void sub_1DE990B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Prompt>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Prompt*>,std::__wrap_iter<Prompt*>>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;

  if (a5 >= 1)
  {
    v6 = a3;
    v8 = (uint64_t *)result;
    v11 = *(_QWORD *)(result + 16);
    v9 = result + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v21 = v12 - a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v22 = &a3[9 * a5];
      }
      else
      {
        v22 = &a3[(uint64_t)(v12 - a2) >> 3];
        result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(v9, (uint64_t)v22, a4, *(_QWORD *)(v9 - 8));
        v8[1] = result;
        if (v21 < 1)
          return result;
      }
      std::vector<Prompt>::__move_range((uint64_t)v8, a2, v12, a2 + 72 * a5);
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(v6, v22, a2);
    }
    v13 = *v8;
    v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *v8) >> 3);
    if (v14 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0x8E38E38E38E38E39 * ((a2 - v13) >> 3);
    v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x1C71C71C71C71C7)
      v18 = 0x38E38E38E38E38ELL;
    else
      v18 = v17;
    v30 = v9;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v18);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v23 = (uint64_t)&v19[72 * v15];
    v27[0] = v19;
    v27[1] = v23;
    v28 = v23;
    v29 = &v19[72 * v20];
    v24 = 9 * a5;
    v25 = v23 + 72 * a5;
    v26 = 8 * v24;
    do
    {
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt&>(v23, v6);
      v23 += 72;
      v6 += 9;
      v26 -= 72;
    }
    while (v26);
    v28 = v25;
    std::vector<Prompt>::__swap_out_circular_buffer(v8, v27, a2);
    return std::__split_buffer<Prompt>::~__split_buffer((uint64_t)v27);
  }
  return result;
}

void sub_1DE990D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt&>(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 std::vector<Prompt>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 *v7;
  unint64_t v8;
  __n128 v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(__n128 **)(a1 + 8);
  }
  else
  {
    v6 = (__n128 *)(a2 + v4 - a4);
    v7 = *(__n128 **)(a1 + 8);
    do
    {
      v8 = v6->n128_u64[0];
      v7->n128_u32[2] = v6->n128_u32[2];
      v7->n128_u64[0] = v8;
      v9 = v6[1];
      v7[2].n128_u64[0] = v6[2].n128_u64[0];
      v7[1] = v9;
      v6[1].n128_u64[1] = 0;
      v6[2].n128_u64[0] = 0;
      v6[1].n128_u64[0] = 0;
      v7[2].n128_u16[4] = v6[2].n128_u16[4];
      v7[3].n128_u64[1] = 0;
      v7[4].n128_u64[0] = 0;
      v7[3].n128_u64[0] = 0;
      result = v6[3];
      v7[3] = result;
      v7[4].n128_u64[0] = v6[4].n128_u64[0];
      v6[3].n128_u64[0] = 0;
      v6[3].n128_u64[1] = 0;
      v6[4].n128_u64[0] = 0;
      v7 = (__n128 *)((char *)v7 + 72);
      v6 = (__n128 *)((char *)v6 + 72);
    }
    while ((unint64_t)v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v11 = 0;
    v12 = -8 * ((v4 - a4) >> 3);
    do
    {
      v13 = v5 + v11;
      v14 = v4 + v11;
      v15 = *(_QWORD *)(v5 + v11 - 72);
      *(_DWORD *)(v14 - 64) = *(_DWORD *)(v5 + v11 - 64);
      *(_QWORD *)(v14 - 72) = v15;
      v16 = (void **)(v4 + v11 - 56);
      if (*(char *)(v4 + v11 - 33) < 0)
        operator delete(*v16);
      v17 = *(_OWORD *)(v13 - 56);
      *(_QWORD *)(v4 + v11 - 40) = *(_QWORD *)(v13 - 40);
      *(_OWORD *)v16 = v17;
      *(_BYTE *)(v13 - 33) = 0;
      *(_BYTE *)(v13 - 56) = 0;
      v20 = *(void **)(v14 - 24);
      v19 = (_QWORD *)(v14 - 24);
      v18 = v20;
      *((_WORD *)v19 - 4) = *(_WORD *)(v13 - 32);
      if (v20)
      {
        *(_QWORD *)(v4 + v11 - 16) = v18;
        operator delete(v18);
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
      }
      v21 = (_QWORD *)(v13 - 24);
      result = *(__n128 *)(v13 - 24);
      *(__n128 *)v19 = result;
      *(_QWORD *)(v4 + v11 - 8) = *(_QWORD *)(v5 + v11 - 8);
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      v11 -= 72;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v5 = a1 + 7;
    do
    {
      v7 = v5 - 7;
      v6 = *(v5 - 7);
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 - 12);
      *(_QWORD *)a3 = v6;
      std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v5 - 5));
      *(_WORD *)(a3 + 40) = *((_WORD *)v5 - 8);
      if ((uint64_t *)a3 != v5 - 7)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 48), (char *)*(v5 - 1), *v5, (*v5 - *(v5 - 1)) >> 2);
      a3 += 72;
      v5 += 9;
    }
    while (v7 + 9 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

_QWORD *std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int16 v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), (const void *)a2[6], a2[7], (a2[7] - a2[6]) >> 2);
}

void sub_1DE9910D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Prompt>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Prompt>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v7;
  v8 = a1[1];
  v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      v10 = *(_QWORD *)v3;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v3 + 8);
      *(_QWORD *)v9 = v10;
      v11 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(v9 + 16) = v11;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_WORD *)(v9 + 40) = *(_WORD *)(v3 + 40);
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 48) = 0;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      v9 += 72;
      v3 += 72;
    }
    while (v3 != v8);
    v7 = a2[1];
  }
  a2[2] = v9;
  v12 = *a1;
  *a1 = v7;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__split_buffer<Prompt>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::allocator<Prompt>::destroy[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Prompt>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  result = a7;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      v11 = *(_QWORD *)(a3 + v8 - 72);
      *(_DWORD *)(v9 - 64) = *(_DWORD *)(a3 + v8 - 64);
      *(_QWORD *)(v9 - 72) = v11;
      v12 = *(_OWORD *)(a3 + v8 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v8 - 40);
      *(_OWORD *)(v9 - 56) = v12;
      *(_QWORD *)(v10 - 48) = 0;
      *(_QWORD *)(v10 - 40) = 0;
      *(_QWORD *)(v10 - 56) = 0;
      *(_WORD *)(v9 - 32) = *(_WORD *)(a3 + v8 - 32);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v8 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v8 - 8);
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      v8 -= 72;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__split_buffer<std::vector<MarkerRecord>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a1);
}

double std::allocator<Unit>::construct[abi:ne180100]<Unit>(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = 0x8000000080000000;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), &byte_1DEBD87CE);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return result;
}

void sub_1DE9913F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Unit>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Unit>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Unit>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    std::allocator<Unit>::destroy[abi:ne180100](i - 184);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Unit>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v9;

  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      a7 -= 184;
      v9 -= 23;
      std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(a7, v9);
    }
    while (v9 != a5);
  }
  return a7;
}

__n128 std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  v3 = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_OWORD *)(a1 + 40) = v3;
  a2[6] = 0;
  a2[7] = 0;
  a2[5] = 0;
  v4 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 64) = v4;
  a2[9] = 0;
  a2[10] = 0;
  a2[8] = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_QWORD *)(a1 + 104) = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_QWORD *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  v5 = *(_OWORD *)(a2 + 17);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *(_OWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  result = *((__n128 *)a2 + 10);
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = a2[22];
  a2[20] = 0;
  a2[21] = 0;
  a2[22] = 0;
  return result;
}

_QWORD *stringify_units(_QWORD *a1, int **a2)
{
  int *v3;
  int *v4;
  const char *v5;
  int v6;
  int v7;
  int v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  _BYTE v18[9];

  if (*a2 == a2[1])
    return std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v3 = *a2;
  v4 = a2[1];
  v5 = &byte_1DEBD87CE;
  if (*a2 == v4)
    goto LABEL_16;
  v6 = -1000000;
  v7 = -1000000;
  do
  {
    v8 = v6;
    v6 = *v3;
    if (*v3 < 0 || v6 != v8 + 1)
    {
      if (v7 <= -1000000)
      {
        v7 = *v3;
      }
      else
      {
        v9 = strlen(v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v9);
        if (v8 > v7)
        {
          v10 = (_QWORD *)std::ostream::operator<<();
          v18[0] = 58;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v18, 1);
        }
        std::ostream::operator<<();
        v7 = v6;
        v5 = ",";
      }
    }
    ++v3;
  }
  while (v3 != v4);
  if (v7 <= -1000001)
    goto LABEL_18;
  if (v6 <= v7)
  {
LABEL_16:
    v14 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v14);
  }
  else
  {
    v11 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v11);
    v12 = (_QWORD *)std::ostream::operator<<();
    v18[0] = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, 1);
  }
  std::ostream::operator<<();
LABEL_18:
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1DF0ECF6C](&v17);
}

void sub_1DE991840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<std::vector<Unit>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923588;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<Unit>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923588;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::vector<std::pair<int,MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 8;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Unit::~Unit(Unit *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 160);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

__n128 std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  std::string *v5;
  __int128 v6;
  __n128 result;

  v4 = *(__n128 **)(a1 + 8);
  v4->n128_u64[0] = *(_QWORD *)a2;
  v5 = (std::string *)&v4->n128_i8[8];
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v4[1].n128_u64[1] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  result = *(__n128 *)(a2 + 32);
  v4[3].n128_u16[0] = *(_WORD *)(a2 + 48);
  v4[2] = result;
  *(_QWORD *)(a1 + 8) = (char *)v4 + 56;
  return result;
}

void sub_1DE991A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = (uint64_t)(a1 + 2);
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v3;
  v25 = v6;
  if (v7)
  {
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = &v9[56 * v2];
  v22 = v9;
  *(_QWORD *)&v23 = v10;
  v11 = &v9[56 * v8];
  *((_QWORD *)&v23 + 1) = v10;
  v24 = v11;
  *(_QWORD *)v10 = *(_QWORD *)a2;
  v12 = (std::string *)(v10 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v14 = (char *)*((_QWORD *)&v23 + 1);
    v10 = (char *)v23;
    v11 = v24;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v10 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    v14 = &v9[56 * v2];
  }
  v15 = &v9[56 * v2];
  v16 = *(_OWORD *)(a2 + 32);
  *((_WORD *)v15 + 24) = *(_WORD *)(a2 + 48);
  *((_OWORD *)v15 + 2) = v16;
  v17 = (uint64_t)(v14 + 56);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MarkerRecord>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>>(v6, a1[1], a1[1], *a1, *a1, (uint64_t)v10, (uint64_t)v10);
  v18 = *(_OWORD *)a1;
  *a1 = v19;
  a1[1] = v17;
  v23 = v18;
  v20 = a1[2];
  a1[2] = (uint64_t)v11;
  v24 = (char *)v20;
  v22 = (char *)v18;
  std::__split_buffer<MarkerRecord>::~__split_buffer((uint64_t)&v22);
  return v17;
}

void sub_1DE991BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MarkerRecord>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<MarkerRecord>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 56;
      *(_QWORD *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MarkerRecord>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  __int128 v9;
  __n128 result;

  while (a3 != a5)
  {
    v8 = *(_QWORD *)(a3 - 56);
    a3 -= 56;
    *(_QWORD *)(a7 - 56) = v8;
    a7 -= 56;
    v9 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a7 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    result = *(__n128 *)(a3 + 32);
    *(_WORD *)(a7 + 48) = *(_WORD *)(a3 + 48);
    *(__n128 *)(a7 + 32) = result;
  }
  return result;
}

void Unit::Unit(Unit *this, const Unit *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  v4 = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 2);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v6;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 14, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  v7 = *(_OWORD *)((char *)a2 + 136);
  v8 = *((_DWORD *)a2 + 38);
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 38) = v8;
  *(_OWORD *)((char *)this + 136) = v7;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((_QWORD *)this + 20, *((_QWORD *)a2 + 20), *((_QWORD *)a2 + 21), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3));
}

void sub_1DE991DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<Unit>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void **v18;
  _QWORD *v19;
  void **v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void **v25;
  __int128 v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void **v34;
  _QWORD *v35;
  __int128 v36;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 - a4;
  v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    v11 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v10 = (uint64_t *)(a2 + v6 - a4);
    v11 = *(_QWORD *)(a1 + 8);
    do
    {
      result.n128_u64[0] = std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(v11, v10).n128_u64[0];
      v10 += 23;
      v11 += 184;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v11;
  if (v6 != a4)
  {
    v13 = 0;
    do
    {
      v14 = v8 + v13;
      v15 = v6 + v13;
      v16 = *(void **)(v8 + v13 - 184);
      v18 = (void **)(v6 + v13 - 168);
      v17 = *v18;
      *((_DWORD *)v18 - 2) = *(_DWORD *)(v8 + v13 - 176);
      *(v18 - 2) = v16;
      if (v17)
      {
        *(_QWORD *)(v15 - 160) = v17;
        operator delete(v17);
        *v18 = 0;
        *(_QWORD *)(v6 + v13 - 160) = 0;
        *(_QWORD *)(v6 + v13 - 152) = 0;
      }
      v19 = (_QWORD *)(v14 - 168);
      *(_OWORD *)v18 = *(_OWORD *)(v14 - 168);
      *(_QWORD *)(v15 - 152) = *(_QWORD *)(v14 - 152);
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      v20 = (void **)(v15 - 144);
      if (*(char *)(v15 - 121) < 0)
        operator delete(*v20);
      v21 = (__int128 *)(v14 - 144);
      v22 = v8 + v13;
      v23 = *v21;
      *(_QWORD *)(v15 - 128) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v20 = v23;
      *(_BYTE *)(v8 + v13 - 121) = 0;
      *(_BYTE *)v21 = 0;
      v24 = v6 + v13;
      v25 = (void **)(v6 + v13 - 120);
      if (*(char *)(v6 + v13 - 97) < 0)
        operator delete(*v25);
      v26 = *(_OWORD *)(v22 - 120);
      *(_QWORD *)(v6 + v13 - 104) = *(_QWORD *)(v22 - 104);
      *(_OWORD *)v25 = v26;
      *(_BYTE *)(v22 - 97) = 0;
      *(_BYTE *)(v22 - 120) = 0;
      v29 = *(void **)(v24 - 96);
      v28 = (_QWORD *)(v24 - 96);
      v27 = v29;
      if (v29)
      {
        *(_QWORD *)(v6 + v13 - 88) = v27;
        operator delete(v27);
        *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
      }
      v30 = (_QWORD *)(v22 - 96);
      *(_OWORD *)v28 = *(_OWORD *)(v22 - 96);
      v31 = v8 + v13;
      v32 = v6 + v13;
      *(_QWORD *)(v6 + v13 - 80) = *(_QWORD *)(v8 + v13 - 80);
      *v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
      v34 = (void **)(v6 + v13 - 72);
      v33 = *v34;
      if (*v34)
      {
        *(_QWORD *)(v32 - 64) = v33;
        operator delete(v33);
        *v34 = 0;
        *(_QWORD *)(v6 + v13 - 64) = 0;
        *(_QWORD *)(v6 + v13 - 56) = 0;
      }
      v35 = (_QWORD *)(v31 - 72);
      *(_OWORD *)v34 = *(_OWORD *)(v31 - 72);
      *(_QWORD *)(v32 - 56) = *(_QWORD *)(v31 - 56);
      *v35 = 0;
      v35[1] = 0;
      v35[2] = 0;
      v36 = *(_OWORD *)(v31 - 48);
      *(_DWORD *)(v32 - 32) = *(_DWORD *)(v31 - 32);
      *(_OWORD *)(v32 - 48) = v36;
      std::vector<MarkerRecord>::__vdeallocate((uint64_t *)(v32 - 24));
      result = *(__n128 *)(v31 - 24);
      *(__n128 *)(v32 - 24) = result;
      *(_QWORD *)(v32 - 8) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(v31 - 24) = 0;
      *(_QWORD *)(v31 - 16) = 0;
      *(_QWORD *)(v31 - 8) = 0;
      v13 -= 184;
    }
    while (-8 * (v7 >> 3) != v13);
  }
  return result;
}

uint64_t Unit::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v5;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v3;
  if ((uint64_t *)a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a1 + 40));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a1 + 64));
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 5));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 88), (char *)a2[11], a2[12], (a2[12] - a2[11]) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 112), (char *)a2[14], a2[15], (a2[15] - a2[14]) >> 2);
    v5 = *(_OWORD *)(a2 + 17);
    *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
    *(_OWORD *)(a1 + 136) = v5;
    std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(a1 + 160), a2[20], a2[21], 0x6DB6DB6DB6DB6DB7 * ((a2[21] - a2[20]) >> 3));
  }
  return a1;
}

uint64_t std::vector<Unit>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  v6 = a2[1];
  v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Unit>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (uint64_t *)*a1, v6, v6);
  a2[1] = v7;
  v8 = (uint64_t *)a1[1];
  v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(v9, v3);
      v3 += 23;
      v9 += 184;
    }
    while (v3 != v8);
    v7 = a2[1];
  }
  a2[2] = v9;
  v10 = *a1;
  *a1 = v7;
  a2[1] = v10;
  v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

uint64_t std::pair<int,MarkerRecord>::pair[abi:ne180100]<int &,MarkerRecord&,0>(uint64_t a1, int a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  __int128 v7;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  v5 = (std::string *)(a1 + 16);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_OWORD *)(a3 + 32);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a3 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  return a1;
}

uint64_t std::__split_buffer<std::pair<int,MarkerRecord>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<std::vector<Unit>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<Unit>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<Unit>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

void SharedObjectPool::get<Database>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  char *v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _DWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint8_t *v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  signed int v64;
  int v65;
  char *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int16 *v70;
  int v71;
  int v72;
  int i;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned __int16 *v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  void *exception;
  int v129;
  std::__shared_weak_count *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  void **v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint8_t buf[8];
  uint64_t v144;
  unsigned __int8 v145;
  __int128 *v146;
  char __str[8];
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    goto LABEL_2;
  }
  SharedObjectPool::get<VoiceConfig>(&v141, (__int128 **)a2);
  v10 = v141;
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v141 + 16))(&v138, v141, 1768842360, 0);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(&v135, v10, 1937011316, 2);
  v11 = (char *)operator new(0x1E8uLL);
  v12 = v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1EA935C70;
  *((_QWORD *)v11 + 3) = &off_1EA9229D8;
  v13 = (std::__shared_weak_count *)(v11 + 24);
  v14 = v139;
  *((_QWORD *)v11 + 5) = v138;
  *((_QWORD *)v11 + 6) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = v140;
  *((_QWORD *)v11 + 31) = 0;
  *(_OWORD *)(v11 + 56) = v17;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 32) = 0;
  *((_QWORD *)v11 + 33) = 0;
  v18 = operator new();
  v131 = a1;
  v19 = operator new(0x60uLL);
  *(_QWORD *)(v18 + 8) = v19;
  v19[7] = 0;
  v19[8] = v19 + 7;
  v19[9] = v19 + 7;
  v19[10] = v19 + 10;
  v19[11] = v19 + 10;
  *(_QWORD *)(v18 + 24) = 0;
  *((_QWORD *)v12 + 34) = v18;
  *(_OWORD *)(v12 + 280) = 0u;
  *(_OWORD *)(v12 + 296) = 0u;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_OWORD *)(v12 + 344) = 0u;
  *((_DWORD *)v12 + 90) = 1065353216;
  *((_OWORD *)v12 + 23) = 0u;
  *((_OWORD *)v12 + 24) = 0u;
  *((_DWORD *)v12 + 100) = 1065353216;
  v133 = (uint64_t)(v12 + 408);
  *(_OWORD *)(v12 + 408) = 0u;
  *(_OWORD *)(v12 + 424) = 0u;
  *((_DWORD *)v12 + 110) = 1065353216;
  MemoryMap::madvise(*((MemoryMap **)v12 + 7), *((_QWORD *)v12 + 8), 1);
  v20 = (unsigned __int16 *)*((_QWORD *)v12 + 7);
  *((_QWORD *)v12 + 9) = v20;
  v21 = *v20;
  if (v21 >= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)buf, "Database version %d.%d is incompatible with code version %d.%d\n", **((unsigned __int16 **)v12 + 9), *(unsigned __int16 *)(*((_QWORD *)v12 + 9) + 2), 5, 1);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v130 = v13;
  v22 = (char *)v20 + *((unsigned int *)v20 + 3);
  *((_QWORD *)v12 + 11) = v22;
  *((_QWORD *)v12 + 12) = (char *)v20 + *((unsigned int *)v20 + 7);
  *((_QWORD *)v12 + 13) = (char *)v20 + *((unsigned int *)v20 + 8);
  *((_QWORD *)v12 + 14) = (char *)v20 + *((unsigned int *)v20 + 9);
  *((_QWORD *)v12 + 16) = (char *)v20 + *((unsigned int *)v20 + 10);
  if (v21 >= 4)
    v23 = (unsigned __int16 *)((char *)v20 + *((unsigned int *)v20 + 6));
  else
    v23 = 0;
  v24 = *((unsigned __int8 *)v20 + 4);
  *((_DWORD *)v12 + 46) = v24;
  *((_DWORD *)v12 + 47) = v24 + 1;
  *((_DWORD *)v12 + 45) = v24 + 2;
  v25 = operator new();
  v26 = v25;
  v129 = *((_DWORD *)v20 + 17);
  v27 = *((unsigned __int8 *)v20 + 4);
  *(_QWORD *)v25 = &off_1EA91C9F8;
  v28 = v136;
  *(_QWORD *)(v25 + 8) = v135;
  v132 = (_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 16) = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 24) = v137;
  *(_OWORD *)(v25 + 56) = 0u;
  if ((_DWORD)v27)
  {
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v27);
    *(_QWORD *)(v26 + 48) = v31;
    *(_QWORD *)(v26 + 64) = &v31[24 * v32];
    bzero(v31, 24 * ((24 * (unint64_t)v27 - 24) / 0x18) + 24);
    *(_QWORD *)(v26 + 80) = 0;
    *(_QWORD *)(v26 + 56) = &v31[24 * ((24 * (unint64_t)v27 - 24) / 0x18) + 24];
    *(_QWORD *)(v26 + 72) = v22;
    *(_QWORD *)(v26 + 88) = 0;
    *(_QWORD *)(v26 + 96) = 0;
    if (v23)
    {
      v33 = 0;
      do
      {
        v35 = *v23++;
        v34 = v35;
        if (v35)
        {
          v36 = (_DWORD *)(*(_QWORD *)(v26 + 48) + v33);
          *v36 = 1;
          v36[1] = v34;
        }
        v33 += 24;
      }
      while (24 * v27 != v33);
    }
  }
  else
  {
    *(_QWORD *)(v25 + 80) = 0;
    *(_QWORD *)(v25 + 72) = v22;
    *(_QWORD *)(v25 + 88) = 0;
    *(_QWORD *)(v25 + 96) = 0;
  }
  if (*v132)
  {
    MemoryMap::madvise(*(MemoryMap **)(v26 + 24), *(_QWORD *)(v26 + 32), 1);
    v37 = *(unsigned int **)(v26 + 24);
    *(_QWORD *)(v26 + 40) = v37;
    if (v37[3] == v129)
    {
      if ((_DWORD)v27)
      {
        v38 = 0;
        v39 = 0;
        v40 = v37[2];
        v41 = (char *)v37 + v37[1];
        v42 = (char *)v37 + v40;
        v43 = 0xFFFFFFFFLL;
        do
        {
          v44 = *(_DWORD *)&v42[4 * v39];
          if (v44)
          {
            v45 = *(_QWORD *)(v26 + 48);
            v46 = v45 + v38;
            *(_DWORD *)v46 = 1;
            v47 = (char *)v37 + (v44 + v40);
            *(_QWORD *)(v46 + 8) = v47;
            *(_QWORD *)(v46 + 16) = v41;
            if ((v43 & 0x80000000) == 0)
              *(_DWORD *)(v45 + 24 * v43 + 4) = (unint64_t)&v47[-*(_QWORD *)(v45 + 24 * v43 + 8)] >> 2;
            v43 = v39;
          }
          ++v39;
          v38 += 24;
        }
        while (v27 != v39);
        if ((v43 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(v26 + 48) + 24 * v43 + 4) = ((unint64_t)v37
                                                             + (*(_DWORD *)&v42[4 * v27] + v40)
                                                             - *(_QWORD *)(*(_QWORD *)(v26 + 48) + 24 * v43 + 8)) >> 2;
      }
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v48 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v48, OS_LOG_TYPE_ERROR, "Incompatible string file, ignoring", buf, 2u);
      }
      Diagnostics::log(3, "Incompatible string file, ignoring", v49);
    }
  }
  v50 = *((_QWORD *)v12 + 10);
  *((_QWORD *)v12 + 10) = v26;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v26 = *((_QWORD *)v12 + 10);
  }
  StringTable::add_feature((StringTable *)v26, *((_DWORD *)v12 + 45), (const unsigned int *)(*((_QWORD *)v12 + 7) + *(unsigned int *)(*((_QWORD *)v12 + 9) + 16)), *(unsigned __int8 *)(*((_QWORD *)v12 + 9) + 4));
  *((_DWORD *)v12 + 49) = StringTable::add_feature(*((StringTable **)v12 + 10), *((_DWORD *)v12 + 46), (const unsigned int *)(*((_QWORD *)v12 + 7) + *(unsigned int *)(*((_QWORD *)v12 + 9) + 20)), (*(_DWORD *)(*((_QWORD *)v12 + 9) + 24)- *(_DWORD *)(*((_QWORD *)v12 + 9) + 20)) >> 2);
  *((_DWORD *)v12 + 50) = 0;
  v51 = (unsigned __int16 *)*((_QWORD *)v12 + 9);
  v52 = *v51;
  if (v52 < 5)
  {
LABEL_47:
    if (v52 < 2)
      goto LABEL_50;
    goto LABEL_48;
  }
  if (v52 == 5 && !v51[1])
  {
    v52 = 5;
  }
  else
  {
    v53 = *((unsigned __int8 *)v51 + 11);
    if (*((_BYTE *)v51 + 11))
    {
      *((_DWORD *)v12 + 50) = v53;
      StringTable::add_feature(*((StringTable **)v12 + 10), *((_DWORD *)v12 + 47), (const unsigned int *)(*((_QWORD *)v12 + 7) + *((unsigned int *)v51 + 18)), v53);
      v51 = (unsigned __int16 *)*((_QWORD *)v12 + 9);
      v52 = *v51;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (*((_BYTE *)v51 + 45))
  {
    v54 = *((_QWORD *)v12 + 7) + *((unsigned int *)v51 + 12);
    v55 = v54 + 4 * *((unsigned __int8 *)v51 + 45);
    *((_QWORD *)v12 + 17) = v54;
    *((_QWORD *)v12 + 18) = v55;
    goto LABEL_51;
  }
LABEL_50:
  *((_QWORD *)v12 + 17) = 0;
  *((_QWORD *)v12 + 18) = 0;
LABEL_51:
  if (v52 < 3)
  {
    v12[32] = 0;
    *((_QWORD *)v12 + 19) = 0;
    *((_DWORD *)v12 + 44) = -1;
    *((_DWORD *)v12 + 58) = 0;
LABEL_58:
    *((_QWORD *)v12 + 20) = 0;
    *((_QWORD *)v12 + 21) = 0;
    *((_QWORD *)v12 + 28) = 0x3F00000018;
    goto LABEL_61;
  }
  v12[32] = 1;
  *((_QWORD *)v12 + 19) = 0;
  *((_DWORD *)v12 + 44) = -1;
  v56 = *((_QWORD *)v12 + 7);
  *((_QWORD *)v12 + 15) = v56 + *((unsigned int *)v51 + 16);
  v57 = *((unsigned int *)v51 + 13);
  if ((_DWORD)v57)
  {
    *((_QWORD *)v12 + 19) = v56 + v57;
    *((_DWORD *)v12 + 44) = *((unsigned __int8 *)v51 + 7) + *((unsigned __int8 *)v51 + 6);
  }
  *((_DWORD *)v12 + 58) = (v52 > 4) << 30;
  v58 = *((unsigned int *)v51 + 14);
  if (!(_DWORD)v58)
    goto LABEL_58;
  *((_QWORD *)v12 + 20) = v56 + v58;
  *((_QWORD *)v12 + 21) = v56 + *((unsigned int *)v51 + 15);
  *((_DWORD *)v12 + 57) = 255;
  if (v52 >= 5)
    v59 = 22;
  else
    v59 = 23;
  *((_DWORD *)v12 + 56) = v59;
LABEL_61:
  StringFormatter::StringFormatter((StringFormatter *)buf, "%d.%d", *v51, v51[1]);
  if ((v145 & 0x80u) == 0)
    v60 = buf;
  else
    v60 = *(uint8_t **)buf;
  if ((v145 & 0x80u) == 0)
    v61 = v145;
  else
    v61 = v144;
  MEMORY[0x1DF0ECA8C](v12 + 280, v60, v61);
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  if (*(_BYTE *)(*((_QWORD *)v12 + 9) + 4))
  {
    v62 = 0;
    do
    {
      v63 = StringTable::feat_val(*((StringTable **)v12 + 10), *((_DWORD *)v12 + 45), v62);
      std::string::basic_string[abi:ne180100]<0>(buf, v63);
      *(_QWORD *)__str = buf;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10) = v62;
      if ((char)v145 < 0)
        operator delete(*(void **)buf);
      ++v62;
    }
    while (v62 < *(unsigned __int8 *)(*((_QWORD *)v12 + 9) + 4));
  }
  if (*((int *)v12 + 49) >= 1)
  {
    v64 = 0;
    v65 = 1;
    do
    {
      v66 = StringTable::feat_val(*((StringTable **)v12 + 10), *((_DWORD *)v12 + 46), v64);
      std::string::basic_string[abi:ne180100]<0>(buf, v66);
      *(_QWORD *)__str = buf;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 368), buf, (uint64_t)&std::piecewise_construct, (__int128 **)__str)+ 10) = v64;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)buf, 49, (uint64_t)__str);
      v146 = (__int128 *)__str;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v133, (unsigned __int8 *)__str, &v146)+ 10) = v65 - 1;
      if (v148 < 0)
        operator delete(*(void **)__str);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)buf, 50, (uint64_t)__str);
      v146 = (__int128 *)__str;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v133, (unsigned __int8 *)__str, &v146)+ 10) = v65;
      if (v148 < 0)
        operator delete(*(void **)__str);
      if ((char)v145 < 0)
        operator delete(*(void **)buf);
      ++v64;
      v65 += 2;
    }
    while (v64 < *((_DWORD *)v12 + 49));
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "filename");
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  v68 = v67;
  if ((char)v145 < 0)
  {
    operator delete(*(void **)buf);
    if (!v68)
      goto LABEL_90;
  }
  else if (!v67)
  {
    goto LABEL_90;
  }
  v69 = *((_DWORD *)v68 + 10);
  if ((v69 & 0x80000000) == 0)
  {
    v70 = (unsigned __int16 *)*((_QWORD *)v12 + 9);
    if (*v70 <= 3u)
      StringTable::add_feature(*((StringTable **)v12 + 10), v69, (const unsigned int *)(*((_QWORD *)v12 + 7) + *((unsigned int *)v70 + 6)), (*((_DWORD *)v70 + 7) - *((_DWORD *)v70 + 6)) >> 2);
  }
LABEL_90:
  std::string::basic_string[abi:ne180100]<0>(buf, "context");
  *(_QWORD *)__str = buf;
  *((_DWORD *)v12 + 48) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10);
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "mfcc_b_12");
  *(_QWORD *)__str = buf;
  v71 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10);
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "mfcc_e_00");
  *(_QWORD *)__str = buf;
  v72 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10);
  *((_DWORD *)v12 + 59) = v72;
  if ((char)v145 < 0)
  {
    operator delete(*(void **)buf);
    v72 = *((_DWORD *)v12 + 59);
  }
  v12[240] = v72 < v71;
  if (v72 < v71)
  {
    for (i = 2; i != 13; ++i)
    {
      snprintf(__str, 0xCuLL, "mfcc_b_%02d", i);
      v74 = *((_DWORD *)v12 + 59);
      std::string::basic_string[abi:ne180100]<0>(buf, __str);
      v146 = (__int128 *)buf;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, &v146)+ 10) = i + v74 - 2;
      if ((char)v145 < 0)
        operator delete(*(void **)buf);
    }
    v75 = *((_DWORD *)v12 + 59);
    std::string::basic_string[abi:ne180100]<0>(buf, "mfcc_e_00");
    v146 = (__int128 *)buf;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, &v146)+ 10) = v75 + 11;
    if ((char)v145 < 0)
      operator delete(*(void **)buf);
    v76 = *((_DWORD *)v12 + 59);
    std::string::basic_string[abi:ne180100]<0>(buf, "mfcc_e_01");
    v146 = (__int128 *)buf;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, &v146)+ 10) = v76 + 12;
    if ((char)v145 < 0)
      operator delete(*(void **)buf);
  }
  v77 = *((_DWORD *)v12 + 46);
  std::string::basic_string[abi:ne180100]<0>(buf, "name");
  *(_QWORD *)__str = buf;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10) = v77;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  v78 = *((_DWORD *)v12 + 47);
  std::string::basic_string[abi:ne180100]<0>(buf, "lang");
  *(_QWORD *)__str = buf;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10) = v78;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  if (*((_QWORD *)v12 + 19))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "duration");
    *(_QWORD *)__str = buf;
    v79 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), buf, (__int128 **)__str)+ 10);
    std::string::basic_string[abi:ne180100]<0>(__str, "f0m");
    v146 = (__int128 *)__str;
    v80 = v79
        - *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v12 + 328), (unsigned __int8 *)__str, &v146)+ 10);
    if (v80 >= 0)
      v81 = v80;
    else
      v81 = -v80;
    if (v148 < 0)
      operator delete(*(void **)__str);
    if ((char)v145 < 0)
      operator delete(*(void **)buf);
    if (v81 != 1)
    {
      *((_QWORD *)v12 + 19) = 0;
      *((_DWORD *)v12 + 44) = -1;
    }
  }
  v82 = (unsigned __int16 *)*((_QWORD *)v12 + 9);
  v83 = *v82;
  if (!*v82)
  {
LABEL_123:
    *(_OWORD *)(v12 + 204) = xmmword_1DED16BA0;
    goto LABEL_141;
  }
  if (v83 == 1)
  {
    if (v82[1])
    {
      *((_DWORD *)v12 + 51) = *((unsigned __int8 *)v82 + 4) - *((unsigned __int8 *)v82 + 10);
LABEL_125:
      *((_OWORD *)v12 + 13) = xmmword_1DED16BB0;
      goto LABEL_141;
    }
    goto LABEL_123;
  }
  *((_DWORD *)v12 + 51) = *((unsigned __int8 *)v82 + 4) - *((unsigned __int8 *)v82 + 10);
  if (v83 < 5)
    goto LABEL_125;
  if ((v83 != 5 || v82[1]) && (v84 = *((_DWORD *)v12 + 50), v84 >= 2))
  {
    if (v84 == 2)
    {
      v85 = 31;
    }
    else if (v84 >= 5)
    {
      if (v84 >= 9)
        goto LABEL_138;
      v85 = 29;
    }
    else
    {
      v85 = 30;
    }
  }
  else
  {
    v85 = 32;
  }
  *((_DWORD *)v12 + 55) = v85;
LABEL_138:
  v86 = 15;
  do
    ++v86;
  while (1 << v86 < *(_DWORD *)(*((_QWORD *)v12 + 13) + 4));
  *((_DWORD *)v12 + 52) = *((_DWORD *)v12 + 55) - v86;
  *((_DWORD *)v12 + 53) = v86;
  *((_DWORD *)v12 + 54) = ~(-1 << v86);
LABEL_141:
  std::string::basic_string[abi:ne180100]<0>(buf, "mfcc_b_00");
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v87)
    v88 = *((_DWORD *)v87 + 10);
  else
    v88 = -1;
  *((_DWORD *)v12 + 112) = v88;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "mfcc_e_00");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v89)
    v90 = *((_DWORD *)v89 + 10);
  else
    v90 = -1;
  *((_DWORD *)v12 + 113) = v90;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "f0b");
  v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v91)
    v92 = *((_DWORD *)v91 + 10);
  else
    v92 = -1;
  *((_DWORD *)v12 + 114) = v92;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "f0m");
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v93)
    v94 = *((_DWORD *)v93 + 10);
  else
    v94 = -1;
  *((_DWORD *)v12 + 115) = v94;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "f0e");
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v95)
    v96 = *((_DWORD *)v95 + 10);
  else
    v96 = -1;
  *((_DWORD *)v12 + 116) = v96;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "start");
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v97)
    v98 = *((_DWORD *)v97 + 10);
  else
    v98 = -1;
  *((_DWORD *)v12 + 117) = v98;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "duration");
  v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v99)
    v100 = *((_DWORD *)v99 + 10);
  else
    v100 = -1;
  *((_DWORD *)v12 + 118) = v100;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "name");
  v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v101)
    v102 = *((_DWORD *)v101 + 10);
  else
    v102 = -1;
  *((_DWORD *)v12 + 119) = v102;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "filename");
  v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v12 + 41, buf);
  if (v103)
    v104 = *((_DWORD *)v103 + 10);
  else
    v104 = -1;
  a1 = v131;
  *((_DWORD *)v12 + 120) = v104;
  if ((char)v145 < 0)
    operator delete(*(void **)buf);
  *((_DWORD *)v12 + 121) = 13;
  v134 = (std::__shared_weak_count *)v12;
  v105 = v136;
  if (v136)
  {
    v106 = (unint64_t *)&v136->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v139;
  if (v139)
  {
    v109 = (unint64_t *)&v139->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  if (v142)
  {
    v112 = (unint64_t *)&v142->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v138 = &v135;
  v115 = v114[5];
  if (v115)
  {
    v138 = (void **)&off_1EA9234E8;
    v139 = v130;
    *(_QWORD *)&v140 = v134;
    if (v134)
    {
      v116 = (unint64_t *)&v134->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v115 + 8, (__int128 *)&v139);
    v138 = (void **)&off_1EA9234E8;
    v118 = (std::__shared_weak_count *)v140;
    if ((_QWORD)v140)
    {
      v119 = (unint64_t *)(v140 + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = v134;
  }
  else
  {
    v122 = (_QWORD *)operator new();
    v121 = v134;
    *v122 = &off_1EA9234E8;
    v122[1] = v130;
    v122[2] = v134;
    if (v134)
    {
      v123 = (unint64_t *)&v134->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v125 = v114[5];
    v114[5] = (uint64_t)v122;
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  }
  if (v121)
  {
    v126 = (unint64_t *)&v121->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_2:
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE993620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::recursive_mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  std::recursive_mutex *v33;
  uint64_t v34;
  uint64_t v36;
  void *v37;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a23);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a24);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v32);
  if (*(char *)(v31 + 327) < 0)
    operator delete(*(void **)(v31 + 304));
  if (*(char *)(v31 + 303) < 0)
    operator delete(*a22);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a14);
  v36 = *(_QWORD *)(v31 + 80);
  *(_QWORD *)(v31 + 80) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v31);
  operator delete(v37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34 - 176);
  std::recursive_mutex::unlock(v33);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<Database>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9234E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<Database>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9234E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<UnitViterbiProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnitViterbiProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<UnitViterbiProcessor>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)(a1 + 24) = &off_1EA91FB68;
  v4 = (void **)(a1 + 776);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 752);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 728);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  UnitFeature::~UnitFeature((UnitFeature *)(a1 + 120));
  v4 = (void **)(a1 + 96);
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

void UnitFeature::~UnitFeature(UnitFeature *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  v2 = (void *)*((_QWORD *)this + 70);
  if (v2)
  {
    *((_QWORD *)this + 71) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 67);
  if (v3)
  {
    *((_QWORD *)this + 68) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 64);
  if (v4)
  {
    *((_QWORD *)this + 65) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 61);
  if (v5)
  {
    *((_QWORD *)this + 62) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 54);
  if (v6)
  {
    *((_QWORD *)this + 55) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 51);
  if (v7)
  {
    *((_QWORD *)this + 52) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 48);
  if (v8)
  {
    *((_QWORD *)this + 49) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 45);
  if (v9)
  {
    *((_QWORD *)this + 46) = v9;
    operator delete(v9);
  }
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  v10 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  v10 = (void **)((char *)this + 72);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

BOOL NeuralTTSUtils::has_neural_fallback_connection(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  _BYTE v9[8];
  uint64_t *v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;

  SharedObjectPool::get<GryphonConfig>(&v11, a1);
  v1 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_fallback_connection");
  GryphonConfig::params_for_connection((uint64_t)v9, v1, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  v2 = v9[0];
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2 == 1;
}

void sub_1DE993BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v15 - 32);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get<GryphonConfig>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  std::__shared_weak_count *v34;
  void **v35;
  uint64_t *v36;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    SharedObjectPool::get<VoiceConfig>(&v33, (__int128 **)a2);
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(*(_QWORD *)v33 + 72))(&v31, v33, 1734567527, 2);
    v10 = (unsigned __int8 *)operator new(0x28uLL);
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = &off_1EA94C870;
    *((_QWORD *)v10 + 4) = 0;
    v10[24] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35, (uint64_t)&v31);
    v11 = v10[24];
    v10[24] = v35;
    LOBYTE(v35) = v11;
    v12 = (uint64_t *)*((_QWORD *)v10 + 4);
    *((_QWORD *)v10 + 4) = v36;
    v36 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v11);
    *(_QWORD *)&v30 = v10 + 24;
    *((_QWORD *)&v30 + 1) = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31);
    v13 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v35 = &v33;
    v17 = v16[5];
    if (v17)
    {
      if (*((_QWORD *)&v30 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(v17 + 16);
      *(_OWORD *)(v17 + 8) = v30;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    }
    else
    {
      v24 = operator new();
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      *(_QWORD *)v24 = &off_1EA94BC90;
      *(_OWORD *)(v24 + 8) = v30;
      if (*((_QWORD *)&v30 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v16[5];
      v16[5] = v24;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    if (v23)
    {
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE993ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, ...)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t **v6;
  void *v8;
  uint64_t *v9;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, uint64_t *);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6, *(unsigned __int8 *)(v5 + 24));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v5);
  operator delete(v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va, a4);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<GryphonConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA94BC90;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<GryphonConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA94BC90;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

BOOL NeuralTTSUtils::is_ane_available(NeuralTTSUtils *this)
{
  BOOL v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "neuralModelType");
  InternalSettings::get_string_for_key(v7, (uint64_t *)__p);
  if (v8 < 0)
  {
    v2 = v7[1] == (void *)3 && *(_WORD *)v7[0] == 28257 && *((_BYTE *)v7[0] + 2) == 101;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 3 && LOWORD(v7[0]) == 28257 && BYTE2(v7[0]) == 101;
  }
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if (v2)
      return 1;
  }
  else if (v2)
  {
    return 1;
  }
  if (NeuralTTSUtils::is_ane_available(void)::onceToken != -1)
    dispatch_once(&NeuralTTSUtils::is_ane_available(void)::onceToken, &__block_literal_global_1263);
  return NeuralTTSUtils::is_ane_available(void)::is_ane_available != 0;
}

void sub_1DE9940B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN14NeuralTTSUtils16is_ane_availableEv_block_invoke()
{
  int v0;
  const __CFString *v1;

  v0 = MGGetBoolAnswer();
  NeuralTTSUtils::is_ane_available(void)::is_ane_available = v0;
  if (v0)
  {
    v1 = (const __CFString *)MGGetStringAnswer();
    if (CFStringCompare(v1, CFSTR("t8006"), 0) == kCFCompareEqualTo
      || CFStringHasPrefix(v1, CFSTR("vmapple"))
      || CFStringHasPrefix(v1, CFSTR("vminternal")))
    {
      NeuralTTSUtils::is_ane_available(void)::is_ane_available = 0;
    }
    CFRelease(v1);
  }
}

BOOL NeuralTTSUtils::is_amx_available(NeuralTTSUtils *this)
{
  BOOL v2;
  BOOL v6;
  void *__p[2];
  char v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, "neuralModelType");
  InternalSettings::get_string_for_key(&v10, (uint64_t *)__p);
  if (v12 < 0)
  {
    v2 = v11 == 3 && *(_WORD *)v10 == 28001 && v10[2] == 120;
    operator delete(v10);
  }
  else
  {
    v2 = v12 == 3 && (unsigned __int16)v10 == 28001 && BYTE2(v10) == 120;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v2)
      return 1;
  }
  else if (v2)
  {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "neuralModelType");
  InternalSettings::get_string_for_key(&v10, (uint64_t *)__p);
  if (v12 < 0)
  {
    v6 = v11 == 3 && *(_WORD *)v10 == 28257 && v10[2] == 101;
    operator delete(v10);
  }
  else
  {
    v6 = v12 == 3 && (unsigned __int16)v10 == 28257 && BYTE2(v10) == 101;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  return (_get_cpu_capabilities() & 0x78000000) != 0;
}

void sub_1DE9942DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NeuralTTSUtils::is_gpu_available(NeuralTTSUtils *this)
{
  return 0;
}

BOOL NeuralTTSUtils::has_ota_ane_model(NeuralTTSUtils *this, const char *a2)
{
  unsigned __int8 *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 has_ota_ane_model;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v23;
  void *v24[2];
  char v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  void *__p[2];
  char v29;
  unsigned __int8 v30[8];
  uint64_t *v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v36, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v34, v36, v37);
  SharedObjectPool::get<GryphonConfig>(&v32, v34);
  v2 = v32;
  std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn");
  GryphonConfig::params_for_module((uint64_t)v30, v2, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v24, "espresso_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)v26, v2, (uint64_t)v24);
  if (v25 < 0)
    operator delete(v24[0]);
  v3 = v35;
  v23 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (EspressoWaveRNNModule::has_ota_ane_model(v30))
  {
    has_ota_ane_model = 1;
  }
  else
  {
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    has_ota_ane_model = EspressoWaveRNNModule::has_ota_ane_model(v26);
    if (v3)
    {
      v9 = (unint64_t *)&v3->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
  v13 = v33;
  if (v33)
  {
    v14 = (unint64_t *)&v33->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v35;
  if (v35)
  {
    v17 = (unint64_t *)&v35->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v37;
  if (v37)
  {
    v20 = &v37->__shared_owners_;
    do
      v21 = __ldaxr((unint64_t *)v20);
    while (__stlxr(v21 - 1, (unint64_t *)v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return has_ota_ane_model;
}

void sub_1DE994544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, unsigned __int8 a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a20, a19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v26 - 72), *(unsigned __int8 *)(v26 - 80));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 - 64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 - 48);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 - 32);
  _Unwind_Resume(a1);
}

void sub_1DE9945E0()
{
  JUMPOUT(0x1DE9945C8);
}

void sub_1DE9945E8()
{
  JUMPOUT(0x1DE9945D0);
}

void std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(_QWORD *a1, char *a2)
{
  std::string *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  v4 = (std::string *)operator new(0x48uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9321D0;
  std::string::basic_string[abi:ne180100]<0>(v7, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  Environment::Environment(v4 + 1, (__int128 *)v7, (__int128 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *a1 = v4 + 1;
  a1[1] = v4;
}

void sub_1DE994690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v6 = operator new(0x90uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA933468;
  v8 = v6 + 3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v6[3] = a2;
    v6[4] = a3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v6[3] = a2;
    v6[4] = 0;
  }
  v6[8] = 0;
  v6[5] = 0;
  v6[6] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  MEMORY[0x1DF0ECD80](v6 + 10);
  if (a3)
  {
    v12 = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_1DE9947C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v12;
  void *v13;

  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*(_QWORD **)(v9 + 64));
  v12 = *(std::__shared_weak_count **)(v9 + 48);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v9);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SharedObjectPool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SharedObjectPool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SharedObjectPool>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 80));
  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*(_QWORD **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__shared_ptr_emplace<Environment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9321D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Environment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9321D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Environment>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void NeuralTTSUtils::compile_ane_model(NeuralTTSUtils *this, const char *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  __int128 **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  void *v28[2];
  char v29;
  unsigned __int8 v30[8];
  uint64_t *v31[3];
  void *__p[2];
  char v33;
  unsigned __int8 v34[8];
  uint64_t *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint8_t buf[8];
  std::__shared_weak_count *v41;

  if (NeuralTTSUtils::is_amx_available(this))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_DEFAULT, "AMX is available. Skip compiling ANE model.", buf, 2u);
    }
    Diagnostics::log(5, "AMX is available. Skip compiling ANE model.", v4);
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(buf, (char *)this);
    std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v38, *(uint64_t *)buf, v41);
    v5 = v38;
    SharedObjectPool::get<GryphonConfig>(&v36, (uint64_t)v38);
    v6 = v36;
    std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn");
    GryphonConfig::params_for_module((uint64_t)v34, v6, (uint64_t)__p);
    if (v33 < 0)
      operator delete(__p[0]);
    if (v34[0])
    {
      v7 = (std::__shared_weak_count *)v39;
      v31[1] = v5;
      v31[2] = v39;
      if (v39)
      {
        v8 = (unint64_t *)(v39 + 1);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      EspressoWaveRNNModule::compile_ane_model(v34, (__int128 **)v5);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    v12 = v36;
    std::string::basic_string[abi:ne180100]<0>(v28, "espresso_wavernn_fallback");
    GryphonConfig::params_for_module((uint64_t)v30, v12, (uint64_t)v28);
    if (v29 < 0)
      operator delete(v28[0]);
    if (v30[0])
    {
      v13 = (__int128 **)v38;
      v14 = (std::__shared_weak_count *)v39;
      if (v39)
      {
        v15 = (unint64_t *)(v39 + 1);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      EspressoWaveRNNModule::compile_ane_model(v30, v13);
      if (v14)
      {
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v31, v30[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v35, v34[0]);
    v19 = v37;
    if (v37)
    {
      v20 = (unint64_t *)&v37->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)v39;
    if (v39)
    {
      v23 = (unint64_t *)(v39 + 1);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v41;
    if (v41)
    {
      v26 = &v41->__shared_owners_;
      do
        v27 = __ldaxr((unint64_t *)v26);
      while (__stlxr(v27 - 1, (unint64_t *)v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_1DE994BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, unsigned __int8 a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v26 + 8), a17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v27 - 72), *(unsigned __int8 *)(v27 - 80));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 48);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 32);
  _Unwind_Resume(a1);
}

void sub_1DE994C6C()
{
  JUMPOUT(0x1DE994C54);
}

void sub_1DE994C74()
{
  JUMPOUT(0x1DE994C5CLL);
}

uint64_t NeuralTTSUtils::is_ane_model_compiled(NeuralTTSUtils *this, const char *a2)
{
  __int128 **v2;
  unsigned __int8 *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL4 has_ota_ane_model;
  BOOL v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int is_ane_model_compiled;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  unint64_t v38;
  __int128 **v40[4];
  __int128 **v41[4];
  void *v42[2];
  char v43;
  uint64_t v44;
  uint64_t *v45;
  void *__p[2];
  char v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned __int8 *v50;
  std::__shared_weak_count *v51;
  __int128 **v52;
  __int128 **v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v54, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v52, v54, v55);
  v2 = v52;
  SharedObjectPool::get<GryphonConfig>(&v50, (uint64_t)v52);
  v3 = v50;
  std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn");
  GryphonConfig::params_for_module((uint64_t)&v48, v3, (uint64_t)__p);
  if (v47 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "espresso_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)&v44, v3, (uint64_t)v42);
  if (v43 < 0)
    operator delete(v42[0]);
  if (!(_BYTE)v48)
    goto LABEL_24;
  v4 = (std::__shared_weak_count *)v53;
  v41[2] = v2;
  v41[3] = v53;
  if (v53)
  {
    v5 = (unint64_t *)(v53 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  has_ota_ane_model = EspressoWaveRNNModule::has_ota_ane_model((unsigned __int8 *)&v48);
  v8 = has_ota_ane_model;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v8)
        goto LABEL_14;
LABEL_24:
      v17 = 0;
      is_ane_model_compiled = 1;
      goto LABEL_25;
    }
  }
  if (!has_ota_ane_model)
    goto LABEL_24;
LABEL_14:
  v11 = (std::__shared_weak_count *)v53;
  v41[0] = v52;
  v41[1] = v53;
  if (v53)
  {
    v12 = (unint64_t *)(v53 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  is_ane_model_compiled = EspressoWaveRNNModule::is_ane_model_compiled(&v48, v41);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v17 = 1;
LABEL_25:
  if (!(_BYTE)v44)
    goto LABEL_45;
  v18 = (std::__shared_weak_count *)v53;
  v40[2] = v52;
  v40[3] = v53;
  if (v53)
  {
    v19 = (unint64_t *)(v53 + 1);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = EspressoWaveRNNModule::has_ota_ane_model((unsigned __int8 *)&v44);
  v22 = v21;
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((v22 & is_ane_model_compiled & 1) != 0)
        goto LABEL_34;
LABEL_44:
      v17 |= v22;
      is_ane_model_compiled &= ~v22;
      goto LABEL_45;
    }
  }
  if ((v21 & is_ane_model_compiled) != 1)
    goto LABEL_44;
LABEL_34:
  v25 = (std::__shared_weak_count *)v53;
  v40[0] = v52;
  v40[1] = v53;
  if (v53)
  {
    v26 = (unint64_t *)(v53 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  is_ane_model_compiled = EspressoWaveRNNModule::is_ane_model_compiled(&v44, v40);
  if (v25)
  {
    v28 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v17 = 1;
LABEL_45:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v45, v44);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v49, v48);
  v30 = v51;
  if (v51)
  {
    v31 = (unint64_t *)&v51->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v34 = (unint64_t *)(v53 + 1);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v55;
  if (v55)
  {
    v37 = &v55->__shared_owners_;
    do
      v38 = __ldaxr((unint64_t *)v37);
    while (__stlxr(v38 - 1, (unint64_t *)v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v17 & is_ane_model_compiled;
}

void sub_1DE994FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned __int8 a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a24, a23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v30 - 88), *(unsigned __int8 *)(v30 - 96));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 80);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 48);
  _Unwind_Resume(a1);
}

void sub_1DE995080()
{
  JUMPOUT(0x1DE995068);
}

void sub_1DE995088()
{
  JUMPOUT(0x1DE995070);
}

BOOL NeuralTTSUtils::is_neural_voice_ready(NeuralTTSUtils *this, const char *a2)
{
  BOOL v4;
  _BOOL8 has_neural_fallback_connection;
  unsigned __int8 *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  BOOL v18;
  const char *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  void *v39[2];
  char v40;
  _BYTE v41[8];
  uint64_t *v42;
  unsigned __int8 *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *__p;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  if (NeuralTTSUtils::is_amx_available(this))
    return 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "neuralModelType");
  InternalSettings::get_string_for_key(&v54, (uint64_t *)&__p);
  if (SHIBYTE(v56) < 0)
  {
    v4 = v55 == (uint64_t *)3 && *(_WORD *)v54 == 28001 && v54[2] == 120;
    operator delete(v54);
  }
  else
  {
    v4 = SHIBYTE(v56) == 3 && (unsigned __int16)v54 == 28001 && BYTE2(v54) == 120;
  }
  if (SHIBYTE(v51) < 0)
  {
    operator delete(__p);
    if (v4)
      return 1;
  }
  else if (v4)
  {
    return 1;
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v47, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v45, v47, v48);
  SharedObjectPool::get<GryphonConfig>(&v43, v45);
  v8 = v43;
  std::string::basic_string[abi:ne180100]<0>(v39, "espresso_wavernn");
  GryphonConfig::params_for_module((uint64_t)v41, v8, (uint64_t)v39);
  if (v40 < 0)
    operator delete(v39[0]);
  v38 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v54 = v41;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0x8000000000000000;
  v11 = v41[0];
  if (v41[0] == 1)
  {
    v13 = v42 + 1;
    v14 = v42[1];
    if (!v14)
      goto LABEL_40;
    v15 = v42 + 1;
    do
    {
      v16 = std::string::compare((const std::string *)(v14 + 32), "preinstalled_model_path");
      v17 = (uint64_t *)(v14 + 8);
      if (v16 >= 0)
      {
        v17 = (uint64_t *)v14;
        v15 = (uint64_t *)v14;
      }
      v14 = *v17;
    }
    while (*v17);
    if (v15 == v13 || std::string::compare((const std::string *)(v15 + 4), "preinstalled_model_path") >= 1)
LABEL_40:
      v15 = v13;
    v55 = v15;
    v11 = v41[0];
  }
  else
  {
    if (v41[0] == 2)
    {
      v12 = v42;
      v56 = v42[1];
      __p = v41;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0x8000000000000000;
      goto LABEL_46;
    }
    v58 = 1;
  }
  __p = v41;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0x8000000000000000;
  if (v11 == 1)
  {
    v50 = v42 + 1;
    goto LABEL_49;
  }
  if (v11 != 2)
  {
    v53 = 1;
    goto LABEL_49;
  }
  v12 = v42;
LABEL_46:
  v51 = v12[1];
LABEL_49:
  v18 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v54, (unsigned __int8 **)&__p);
  v20 = v18;
  if (!v38)
    goto LABEL_53;
  v21 = (unint64_t *)&v38->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!v20)
      goto LABEL_64;
  }
  else
  {
LABEL_53:
    if (!v18)
      goto LABEL_64;
  }
  if ((NeuralTTSUtils::is_ane_model_compiled(this, v19) & 1) == 0)
  {
    v23 = v45;
    v24 = v46;
    if (v46)
    {
      v25 = (unint64_t *)&v46->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    has_neural_fallback_connection = NeuralTTSUtils::has_neural_fallback_connection(v23);
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    goto LABEL_65;
  }
LABEL_64:
  has_neural_fallback_connection = 1;
LABEL_65:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v41[0]);
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v48;
  if (v48)
  {
    v36 = &v48->__shared_owners_;
    do
      v37 = __ldaxr((unint64_t *)v36);
    while (__stlxr(v37 - 1, (unint64_t *)v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return has_neural_fallback_connection;
}

void sub_1DE995478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, unsigned __int8 a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a21, a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1DE9954F0()
{
  JUMPOUT(0x1DE9954E0);
}

void sub_1DE9954F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE9954E8);
}

BOOL NeuralTTSUtils::is_ane_only_platform(NeuralTTSUtils *this)
{
  _BOOL8 result;

  result = NeuralTTSUtils::is_ane_available(this);
  if ((_DWORD)result)
    return !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)result);
  return result;
}

uint64_t NeuralTTSUtils::is_h12_platform(NeuralTTSUtils *this)
{
  if (NeuralTTSUtils::is_h12_platform(void)::onceToken != -1)
    dispatch_once(&NeuralTTSUtils::is_h12_platform(void)::onceToken, &__block_literal_global_18);
  return NeuralTTSUtils::is_h12_platform(void)::isH12Platform;
}

void ___ZN14NeuralTTSUtils15is_h12_platformEv_block_invoke()
{
  const __CFString *v0;
  const __CFString *v1;

  v0 = (const __CFString *)MGGetStringAnswer();
  if (v0)
  {
    v1 = v0;
    NeuralTTSUtils::is_h12_platform(void)::isH12Platform = CFStringCompare(v0, CFSTR("t8030"), 0) == kCFCompareEqualTo;
    CFRelease(v1);
  }
  else
  {
    NeuralTTSUtils::is_h12_platform(void)::isH12Platform = 0;
  }
}

BOOL NeuralTTSUtils::is_neural_tts_platform(NeuralTTSUtils *this)
{
  _BOOL8 is_ane_available;

  is_ane_available = NeuralTTSUtils::is_ane_available(this);
  return is_ane_available || NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available);
}

uint64_t NeuralTTSUtils::is_natural_tts_platform(NeuralTTSUtils *this)
{
  if (NeuralTTSUtils::is_natural_tts_platform(void)::onceToken != -1)
    dispatch_once(&NeuralTTSUtils::is_natural_tts_platform(void)::onceToken, &__block_literal_global_22);
  return NeuralTTSUtils::is_natural_tts_platform(void)::isNatureTTSPlatform;
}

uint64_t ___ZN14NeuralTTSUtils23is_natural_tts_platformEv_block_invoke()
{
  char BOOL_for_key;
  uint64_t result;
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "allowNaturalVoice");
  BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  result = MGGetBoolAnswer();
  NeuralTTSUtils::is_natural_tts_platform(void)::isNatureTTSPlatform = result | BOOL_for_key;
  return result;
}

void sub_1DE99569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NeuralTTSUtils::check_fallback_conditions(NeuralTTSUtils *this)
{
  NSProcessInfoObjCBridge *v1;
  unsigned int thermal_state;
  int BOOL_for_key;
  int v4;
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  _BYTE buf[12];
  __int16 v17;
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = (NSProcessInfoObjCBridge *)NSProcessInfoObjCBridge::low_power_mode_enabled(this);
  thermal_state = NSProcessInfoObjCBridge::get_thermal_state(v1);
  std::string::basic_string[abi:ne180100]<0>(buf, "ignoreThermalState");
  BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  v4 = BOOL_for_key;
  if (v19 < 0)
  {
    operator delete(*(void **)buf);
    if (v4)
      goto LABEL_3;
  }
  else if (BOOL_for_key)
  {
LABEL_3:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = thermal_state;
      v17 = 1024;
      v18 = (int)v1;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "ignoring thermal state: %ld, low power mode: %{BOOL}d", buf, 0x12u);
    }
    Diagnostics::log(5, "ignoring thermal state: %ld, low power mode: %{BOOL}d", v6, thermal_state, v1);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "forceNeuralThermalState");
  v7 = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  v8 = v7;
  if (v19 < 0)
  {
    operator delete(*(void **)buf);
    if (v8)
      goto LABEL_10;
  }
  else if (v7)
  {
LABEL_10:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "force neural critical thermal state", buf, 2u);
    }
    v11 = "force neural critical thermal state";
    goto LABEL_30;
  }
  if ((int)thermal_state < 2)
  {
    if (!(_DWORD)v1)
      return 0;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_DEFAULT, "switching to fallback pipeline due to low power mode", buf, 2u);
    }
    v11 = "switching to fallback pipeline due to low power mode";
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = thermal_state;
      _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_DEFAULT, "switching to fallback pipeline due to thermal state: %ld", buf, 0xCu);
    }
    v15 = thermal_state;
    v11 = "switching to fallback pipeline due to thermal state: %ld";
  }
LABEL_30:
  Diagnostics::log(5, v11, v10, v15);
  return 1;
}

void sub_1DE9959B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NeuralTTSUtils::is_watch_platform(NeuralTTSUtils *this)
{
  return MGGetSInt32Answer() == 6;
}

BOOL NeuralTTSUtils::is_homepod_platform(NeuralTTSUtils *this)
{
  return MGGetSInt32Answer() == 7;
}

BOOL NeuralTTSUtils::check_thermal_critical_conditions(NeuralTTSUtils *this)
{
  return NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2);
}

BOOL NeuralTTSUtils::check_thermal_limit(NeuralTTSUtils *this)
{
  int v1;
  NSProcessInfoObjCBridge *v2;
  uint64_t thermal_state;
  int BOOL_for_key;
  int v5;
  NSObject *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  BOOL v13;
  _BYTE buf[14];
  char v15;
  uint64_t v16;

  v1 = (int)this;
  v16 = *MEMORY[0x1E0C80C00];
  v2 = (NSProcessInfoObjCBridge *)NSProcessInfoObjCBridge::low_power_mode_enabled(this);
  thermal_state = NSProcessInfoObjCBridge::get_thermal_state(v2);
  std::string::basic_string[abi:ne180100]<0>(buf, "ignoreThermalState");
  BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  v5 = BOOL_for_key;
  if (v15 < 0)
  {
    operator delete(*(void **)buf);
    if (v5)
      goto LABEL_3;
  }
  else if (BOOL_for_key)
  {
LABEL_3:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = thermal_state;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEFAULT, "ignoring neural thermal state: %ld", buf, 0xCu);
    }
    Diagnostics::log(5, "ignoring neural thermal state: %ld", v7, thermal_state);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "forceNeuralThermalState");
  v8 = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  if (v15 < 0)
    operator delete(*(void **)buf);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v10 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "force neural critical thermal state", buf, 2u);
    }
    Diagnostics::log(5, "force neural critical thermal state", v11);
    return 1;
  }
  if (v10)
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = thermal_state;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = (_DWORD)v2;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "Current thermal state: %d, low power mode: %d", buf, 0xEu);
  }
  Diagnostics::log(5, "Current thermal state: %d, low power mode: %d", v11, thermal_state, v2);
  if ((int)thermal_state >= v1)
    return 1;
  if ((_DWORD)v2)
  {
    if (NeuralTTSUtils::is_h12_platform(void)::onceToken != -1)
      dispatch_once(&NeuralTTSUtils::is_h12_platform(void)::onceToken, &__block_literal_global_18);
    if (NeuralTTSUtils::is_h12_platform(void)::isH12Platform || (MGGetSInt32Answer() & 0xFFFFFFFE) == 6)
      return 1;
  }
  if (NeuralTTSUtils::is_h12_platform(void)::onceToken != -1)
    dispatch_once(&NeuralTTSUtils::is_h12_platform(void)::onceToken, &__block_literal_global_18);
  if (NeuralTTSUtils::is_h12_platform(void)::isH12Platform)
    v13 = (int)thermal_state <= 1;
  else
    v13 = 1;
  return !v13;
}

void sub_1DE995D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NeuralTTSUtils::has_compact_neural_fallback(NeuralTTSUtils *this, const char *a2)
{
  uint64_t v3;
  _BOOL8 is_ane_available;
  unsigned __int8 *v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t v15;
  void *v17[2];
  char v18;
  _BYTE v19[8];
  uint64_t *v20;
  void *__p[2];
  char v22;
  _BYTE v23[8];
  uint64_t *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v3 = MGGetSInt32Answer();
  if ((v3 & 0xFFFFFFFE) != 6)
  {
    is_ane_available = NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)v3);
    if (is_ane_available && !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available))
      return 0;
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v29, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v27, v29, v30);
  SharedObjectPool::get<GryphonConfig>(&v25, v27);
  v5 = v25;
  std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)v23, v5, (uint64_t)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "mil_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)v19, v5, (uint64_t)v17);
  if (v18 < 0)
    operator delete(v17[0]);
  v6 = (v19[0] | v23[0]) != 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  v7 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v28;
  if (v28)
  {
    v11 = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v30;
  if (v30)
  {
    v14 = &v30->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v6;
}

void sub_1DE995EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned __int8 a23,uint64_t *a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a24, a23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24 - 64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24 - 48);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24 - 32);
  _Unwind_Resume(a1);
}

void sub_1DE995F6C()
{
  JUMPOUT(0x1DE995F5CLL);
}

uint64_t NeuralTTSUtils::should_use_neural_voice(NeuralTTSUtils *this, const char *a2)
{
  _BOOL8 is_ane_available;
  const char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 has_neural_fallback_connection;
  const char *v10;
  _BOOL4 v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  unint64_t v24;
  uint8_t v26[16];
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  is_ane_available = NeuralTTSUtils::is_ane_available(this);
  if (!is_ane_available && !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available)
    || !NeuralTTSUtils::is_neural_voice_ready(this, v4))
  {
    return 0;
  }
  if (!NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2))
    return 1;
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v31, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v29, v31, v32);
  v5 = v29;
  v6 = v30;
  v27 = v29;
  v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  has_neural_fallback_connection = NeuralTTSUtils::has_neural_fallback_connection(v5);
  v11 = has_neural_fallback_connection;
  if (!v6)
    goto LABEL_12;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v11)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (has_neural_fallback_connection)
    {
LABEL_13:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_DEFAULT, "voice should use gryphon pipeline fallback", v26, 2u);
      }
      v16 = "voice should use gryphon pipeline fallback";
LABEL_27:
      Diagnostics::log(5, v16, v15);
      v17 = 1;
      goto LABEL_29;
    }
  }
  if (NeuralTTSUtils::has_compact_neural_fallback(this, v10))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1DE3F6000, v18, OS_LOG_TYPE_DEFAULT, "voice should use compact neural fallback", v26, 2u);
    }
    v16 = "voice should use compact neural fallback";
    goto LABEL_27;
  }
  v17 = 0;
LABEL_29:
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v32;
  if (v32)
  {
    v23 = &v32->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v17;
}

void sub_1DE9961CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t NeuralTTSUtils::neural_sample_rate(uint64_t *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  char v13[8];
  uint64_t *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;

  SharedObjectPool::get<GryphonConfig>(&v15, *a1);
  v1 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "audio_resampling");
  GryphonConfig::params_for_module((uint64_t)v13, v1, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v13[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "sample_rate_in");
    v8 = 24000;
    v2 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v13, (const void **)v9, &v8);
    if (v10 < 0)
      operator delete(v9[0]);
    v3 = v13[0];
  }
  else
  {
    v3 = 0;
    v2 = 24000;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v3);
  v4 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v2;
}

void sub_1DE9962FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v22 - 40), *(unsigned __int8 *)(v22 - 48));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22 - 32);
  _Unwind_Resume(a1);
}

float NeuralTTSUtils::current_model_sample_rate(NeuralTTSUtils *this, const char *a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  unsigned __int8 *v10;
  float v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 should_fallback;
  __n128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v52[2];
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  _QWORD v57[2];
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  float v62;
  void *v63[2];
  char v64;
  char v65[8];
  uint64_t *v66[3];
  void *__p[2];
  char v68;
  char v69[8];
  uint64_t *v70;
  unsigned __int8 *v71;
  std::__shared_weak_count *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD v77[35];
  std::__shared_weak_count *v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v75, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v73, v75, v76);
  v2 = v73;
  SharedObjectPool::get<GryphonConfig>(&v71, (uint64_t)v73);
  v3 = v71;
  std::string::basic_string[abi:ne180100]<0>(__p, "audio_resampling");
  GryphonConfig::params_for_module((uint64_t)v69, v3, (uint64_t)__p);
  if (v68 < 0)
    operator delete(__p[0]);
  if (v69[0])
  {
    v4 = (std::__shared_weak_count *)v74;
    v66[1] = v2;
    v66[2] = v74;
    if (v74)
    {
      v5 = (unint64_t *)(v74 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    AudioResamplingModule::AudioResamplingModule((uint64_t)v77, v69, (uint64_t)v2, v4);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v9 = v79;
    v10 = v71;
    std::string::basic_string[abi:ne180100]<0>(v63, "neural_thermal_fallback_connection");
    GryphonConfig::params_for_connection((uint64_t)v65, v10, (uint64_t)v63);
    if (v64 < 0)
      operator delete(v63[0]);
    v11 = (float)v9;
    if (v65[0])
    {
      v55 = 0;
      v56 = 0;
      v53 = 0;
      v54 = 0;
      v12 = (std::__shared_weak_count *)v74;
      v52[0] = (uint64_t)v73;
      v52[1] = (uint64_t)v74;
      if (v74)
      {
        v13 = (unint64_t *)(v74 + 1);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      NeuralThermalFallbackConnection::NeuralThermalFallbackConnection((uint64_t)v57, 0, 0, &v53, v65, v52);
      if (v12)
      {
        v15 = (unint64_t *)&v12->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v17 = v54;
      if (v54)
      {
        v18 = (unint64_t *)&v54->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v56;
      if (v56)
      {
        v21 = (unint64_t *)&v56->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      should_fallback = NeuralThermalFallbackConnection::should_fallback((NeuralThermalFallbackConnection *)v57);
      v24.n128_f32[0] = v62;
      if ((should_fallback & (v62 > 0.0)) != 0)
        v11 = v62;
      v57[0] = &unk_1EA91C2B8;
      v25 = v61;
      if (v61)
      {
        v26 = (unint64_t *)&v61->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v24);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v60;
      if (v60)
      {
        v29 = (unint64_t *)&v60->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v28->__on_zero_shared)(v28, v24);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v59;
      if (v59)
      {
        v32 = (unint64_t *)&v59->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v31->__on_zero_shared)(v31, v24);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v58;
      if (v58)
      {
        v35 = (unint64_t *)&v58->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v24);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v65[0];
    }
    else
    {
      v37 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v66, v37);
    v77[0] = &off_1EA91FC70;
    v39 = v78;
    if (v78)
    {
      v40 = (unint64_t *)&v78->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    Module::~Module((Module *)v77);
    v38 = v69[0];
  }
  else
  {
    v38 = 0;
    v11 = 24000.0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v38);
  v42 = v72;
  if (v72)
  {
    v43 = (unint64_t *)&v72->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)v74;
  if (v74)
  {
    v46 = (unint64_t *)(v74 + 1);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v76;
  if (v76)
  {
    v49 = &v76->__shared_owners_;
    do
      v50 = __ldaxr((unint64_t *)v49);
    while (__stlxr(v50 - 1, (unint64_t *)v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v11;
}

void sub_1DE9967E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,unsigned __int8 a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,unsigned __int8 a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,void (**a50)(AudioResamplingModule *__hidden this))
{
  NeuralThermalFallbackConnection::~NeuralThermalFallbackConnection((NeuralThermalFallbackConnection *)&a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a33, a32);
  a50 = &off_1EA91FC70;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x228]);
  Module::~Module((Module *)&a50);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a43, a42);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_1DE9968C0()
{
  JUMPOUT(0x1DE9968A8);
}

void sub_1DE9968C8()
{
  JUMPOUT(0x1DE9968B0);
}

void sub_1DE9968D0()
{
  JUMPOUT(0x1DE9968B8);
}

void NeuralThermalFallbackConnection::~NeuralThermalFallbackConnection(NeuralThermalFallbackConnection *this)
{
  char *v2;

  *(_QWORD *)this = &unk_1EA91C2B8;
  v2 = (char *)this + 8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

void NeuralTTSUtils::stress_marker(uint64_t *a1, uint64_t a2, BOOL *a3)
{
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  std::string v11;
  void *__p[2];
  char v13;
  char v14[8];
  uint64_t *v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;

  SharedObjectPool::get<GryphonConfig>(&v16, *a1);
  v5 = v16;
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_adapter");
  GryphonConfig::params_for_module((uint64_t)v14, v5, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v14[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "stress_marker");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v14, (const void **)v9, &v11);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v11;
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
    v11.__r_.__value_.__s.__data_[0] = 0;
    if (v10 < 0)
      operator delete(v9[0]);
    std::string::basic_string[abi:ne180100]<0>(&v11, "stress_marker_before");
    LOBYTE(v9[0]) = 0;
    *a3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v14, (const void **)&v11.__r_.__value_.__l.__data_, (unsigned __int8 *)v9);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    *a3 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DE996AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v27 - 56), *(unsigned __int8 *)(v27 - 64));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

BOOL NeuralTTSUtils::is_personal_voice(uint64_t a1)
{
  unsigned __int8 *v1;
  _BOOL8 v3;
  int v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v10[2];
  char v11;
  std::string v12;
  void *__p[2];
  char v14;
  char v15[8];
  uint64_t *v16;
  unsigned __int8 *v17;
  std::__shared_weak_count *v18;

  SharedObjectPool::get<GryphonConfig>(&v17, a1);
  v1 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_adapter");
  GryphonConfig::params_for_module((uint64_t)v15, v1, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v15[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "speaker_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v15, (const void **)v10, &v12);
    if (v11 < 0)
      operator delete(v10[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      v3 = v12.__r_.__value_.__l.__size_ == 14
        && *(_QWORD *)v12.__r_.__value_.__l.__data_ == 0x735F6D6F74737563
        && *(_QWORD *)(v12.__r_.__value_.__r.__words[0] + 6) == 0x72656B616570735FLL;
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    else
    {
      v3 = SHIBYTE(v12.__r_.__value_.__r.__words[2]) == 14
        && v12.__r_.__value_.__r.__words[0] == 0x735F6D6F74737563
        && *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 6) == 0x72656B616570735FLL;
    }
    v4 = v15[0];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v4);
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v3;
}

void sub_1DE996CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a15 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v24 - 40), *(unsigned __int8 *)(v24 - 48));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24 - 32);
  _Unwind_Resume(a1);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void WordEmbedding::~WordEmbedding(WordEmbedding *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void WordEmbedding::embedding(float **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  vDSP_Length v13;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_DWORD *)(v5 + 4);
  if (v6)
  {
    v7 = 0;
    if (*(char *)(a3 + 23) >= 0)
      v8 = (const char *)a3;
    else
      v8 = *(const char **)a3;
    v9 = *(_QWORD *)(a2 + 56);
    v10 = *(_QWORD *)(a2 + 40);
    while (1)
    {
      v11 = (v7 + v6) >> 1;
      v12 = strcmp(v8, (const char *)(v9 + *(unsigned int *)(v10 + 4 * v11)));
      if (!v12)
        break;
      if (v12 >= 0)
        v7 = v11 + 1;
      else
        v6 = (v7 + v6) >> 1;
      if (v7 >= v6)
        goto LABEL_11;
    }
    std::vector<float>::vector(a1, *(unsigned int *)(v5 + 8));
    v13 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8);
    vDSP_vfltu8((const unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v13 * v11), 1, *a1, 1, v13);
    vDSP_vsmsa(*a1, 1, (const float *)(*(_QWORD *)(a2 + 32) + 16), (const float *)(*(_QWORD *)(a2 + 32) + 12), *a1, 1, *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8));
  }
  else
  {
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
  }
}

void sub_1DE996F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *FastRewriterImpl::apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1EA92F568;
  v7 = v6;
  FastRewriterImpl::apply_real(a4, a1, a2, (uint64_t)v6, a3);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1DE99702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *FastRewriterImpl::apply_group@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1EA92F4B8;
  v7[1] = a3;
  v8 = v7;
  FastRewriterImpl::apply_real(a5, a1, a2, (uint64_t)v7, a4);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1DE997110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *FastRewriterImpl::apply_prefix@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1EA92F510;
  v7[1] = a3;
  v8 = v7;
  FastRewriterImpl::apply_real(a5, a1, a2, (uint64_t)v7, a4);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1DE9971F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void FastRewriterImpl::compile(FastRewriterImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  FRRule **v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t shared_weak_owners;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  unsigned __int8 *i;
  int v42;
  NSObject *v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  NSObject *v49;
  const char *v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  const char *v54;
  int v55;
  int v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string::size_type v60;
  uint64_t v61;
  const char *v62;
  int v63;
  int v64;
  int v65;
  char v66;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  const char *v70;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  char v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::string::size_type size;
  void *v79;
  uint64_t shared_owners_low;
  void *v81;
  std::string::size_type v82;
  std::string *v83;
  NSObject *v84;
  const char *v85;
  std::string *v86;
  std::string *v87;
  unint64_t *v88;
  unint64_t v89;
  NSObject *v90;
  const char *v91;
  _BYTE *j;
  int v93;
  NSObject *v94;
  const char *v95;
  NSObject *v96;
  const char *v97;
  int v98;
  int v99;
  BOOL v100;
  _BYTE *k;
  int v103;
  int v105;
  std::string::size_type v106;
  uint64_t v107;
  std::string::size_type v108;
  NSObject *v109;
  const char *v110;
  std::string *v111;
  std::string *v112;
  std::string *v113;
  std::string *v114;
  NSObject *v115;
  const char *v116;
  NSObject *v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t *v122;
  unint64_t v123;
  _OWORD *v124;
  FRCode *v125;
  unint64_t *v126;
  unint64_t v127;
  void **v128;
  FRRule **v129;
  FRRule **v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  FRRule **v135;
  std::__shared_weak_count *v136;
  unint64_t v137;
  __int128 v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  NSObject *v145;
  std::string *p_buf;
  const char *v147;
  std::string *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  const char *v152;
  std::string *v153;
  std::string::size_type v154;
  std::string *v155;
  char *v156;
  unint64_t v157;
  char *v158;
  _DWORD *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  int v167;
  unsigned int v168;
  unint64_t v169;
  _DWORD *v170;
  _DWORD *v171;
  std::vector<int> *m;
  std::vector<int>::pointer begin;
  char *end;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int *value;
  int *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  std::vector<int>::const_iterator v184;
  int *v185;
  int v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::string *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  NSObject *v211;
  const char *v212;
  std::string::size_type v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  char **v216;
  char *v217;
  char *v218;
  char *v219;
  std::__shared_weak_count *v220;
  std::string v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  std::string v224;
  __int128 v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  std::string v228;
  char *v229;
  char *v230;
  char *v231;
  std::string __str;
  uint64_t v233;
  unsigned int v234;
  std::string v235;
  std::string v236;
  std::string buf;
  int v238;
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 12))
  {
    v2 = *((_QWORD *)this + 1);
    v230 = 0;
    v231 = 0;
    v229 = 0;
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_QWORD *)(v2 + 80);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
    buf.__r_.__value_.__s.__data_[8] = 0;
    if (v4 != v3)
    {
      v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 3);
      if (v5 >= 0x666666666666667)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v5);
      v7 = 0;
      v229 = v6;
      v230 = v6;
      v231 = &v6[40 * v8];
      do
      {
        std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::pair[abi:ne180100]((std::string *)&v6[v7], (__int128 *)(v3 + v7));
        v7 += 40;
      }
      while (v3 + v7 != v4);
      v9 = v229;
      v230 = &v6[v7];
      v217 = &v6[v7];
      if (v229 != &v6[v7])
      {
        v216 = (char **)((char *)this + 24);
        do
        {
          if (v9[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
          }
          else
          {
            v10 = *(_OWORD *)v9;
            v228.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
            *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v10;
          }
          v11 = *((_QWORD *)v9 + 3);
          v12 = (std::__shared_weak_count *)*((_QWORD *)v9 + 4);
          v226 = v11;
          v227 = v12;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(p_shared_owners);
            while (__stxr(v14 + 1, p_shared_owners));
          }
          v15 = *(FRRule ***)v11;
          if (*(_QWORD *)v11 == *(_QWORD *)(v11 + 8))
            goto LABEL_395;
          v225 = 0uLL;
          v218 = v9;
          if (FRRule::is_pcre_rule(*v15))
          {
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v224, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
            else
              v224 = v228;
            v222 = v11;
            v223 = v12;
            if (v12)
            {
              v16 = (unint64_t *)&v12->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = (std::__shared_weak_count *)operator new(0xE0uLL);
            v18->__shared_owners_ = 0;
            v19 = (unint64_t *)&v18->__shared_owners_;
            v18->__shared_weak_owners_ = 0;
            v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932208;
            if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
            else
              __str = v224;
            if (v12)
            {
              v23 = (unint64_t *)&v12->__shared_owners_;
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            *(_OWORD *)&v18[6].__shared_weak_owners_ = 0u;
            v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91C588;
            *(_OWORD *)&v18[1].__shared_owners_ = 0u;
            *(_OWORD *)&v18[3].__shared_weak_owners_ = 0u;
            v18[2].std::__shared_count = 0u;
            *(_OWORD *)&v18[2].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v18[4].__shared_owners_ = 0u;
            v18[5].std::__shared_count = 0u;
            *(_OWORD *)&v18[5].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v18[7].__shared_owners_ = 0u;
            v18[8].std::__shared_count = 0u;
            *(_OWORD *)&v18[8].__shared_weak_owners_ = 0u;
            std::string::operator=((std::string *)&v18[1].__shared_owners_, &__str);
            if (v12)
            {
              v25 = (unint64_t *)&v12->__shared_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            v27 = (std::__shared_weak_count *)v18[4].__vftable;
            v18[3].__shared_weak_owners_ = v11;
            v18[4].__vftable = (std::__shared_weak_count_vtbl *)v12;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            MEMORY[0x1DF0ECA80](&v18[2].__shared_owners_, "pcre");
            std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)&v18[4].__shared_owners_, (uint64_t)(*(_QWORD *)(v18[3].__shared_weak_owners_ + 8) - *(_QWORD *)v18[3].__shared_weak_owners_) >> 4);
            std::vector<char *>::resize((char **)&v18[5].__shared_owners_, (uint64_t)(*(_QWORD *)(v18[3].__shared_weak_owners_ + 8) - *(_QWORD *)v18[3].__shared_weak_owners_) >> 4);
            LODWORD(v18[6].__shared_owners_) = 0;
            shared_weak_owners = v18[3].__shared_weak_owners_;
            v31 = *(char **)shared_weak_owners;
            v219 = *(char **)(shared_weak_owners + 8);
            if (*(char **)shared_weak_owners != v219)
            {
              v215 = v12;
              while (1)
              {
                v32 = *(_QWORD *)v31;
                v33 = (std::__shared_weak_count *)*((_QWORD *)v31 + 1);
                if (v33)
                {
                  v34 = (unint64_t *)&v33->__shared_owners_;
                  do
                    v35 = __ldxr(v34);
                  while (__stxr(v35 + 1, v34));
                  memset(&v235, 0, sizeof(v235));
                  memset(&v236, 0, sizeof(v236));
                  do
                    v36 = __ldxr(v34);
                  while (__stxr(v36 + 1, v34));
                }
                else
                {
                  memset(&v235, 0, sizeof(v235));
                  memset(&v236, 0, sizeof(v236));
                }
                v39 = *(_QWORD *)(v32 + 176);
                v38 = v32 + 176;
                v37 = v39;
                v40 = *(char *)(v38 + 23) >= 0 ? v38 : v37;
                for (i = (unsigned __int8 *)v40; ; ++i)
                {
                  v42 = *i;
                  if (v42 != 9 && v42 != 32)
                    break;
                }
                if (!*i)
                  break;
                v46 = (char)v42;
                v47 = (v42 - 48);
                if ((_DWORD)v46 != 92 && v47 > 9)
                {
                  v53 = i[1];
                  v51 = i + 1;
                  v52 = v53;
                  if (!v53 || v52 == v46)
                  {
                    v54 = (const char *)v51;
                    if (!v52)
                      goto LABEL_128;
                  }
                  else
                  {
                    v54 = (const char *)v51;
                    do
                    {
                      if (v52 == 92)
                      {
                        v55 = *((unsigned __int8 *)v54 + 1);
                        if (v55 != v46 && v55 != 0)
                          ++v54;
                      }
                      v57 = *(unsigned __int8 *)++v54;
                      v52 = v57;
                    }
                    while (v57 && v52 != v46);
                    if (!v52)
                    {
LABEL_128:
                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                      v71 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                      {
                        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                        _os_log_impl(&dword_1DE3F6000, v71, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                      }
                      Diagnostics::log(7, "Empty line in rule file, ignore!", v72);
                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                      v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                      {
                        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
                        _os_log_impl(&dword_1DE3F6000, v73, OS_LOG_TYPE_DEBUG, "Missing end tag in PCRE2 pattern: %s, ignore!", (uint8_t *)&buf, 0xCu);
                      }
                      v213 = v40;
                      v45 = "Missing end tag in PCRE2 pattern: %s, ignore!";
                      goto LABEL_137;
                    }
                  }
                  if ((uint64_t)&v51[-v40] >= 0)
                    v58 = (std::string::size_type)&v51[-v40];
                  else
                    v58 = v40 - (_QWORD)v51;
                  v59 = v54 - (const char *)v51;
                  if (v59 >= 0)
                    v60 = v59;
                  else
                    v60 = -v59;
                  std::string::basic_string(&buf, (const std::string *)v38, v58, v60, (std::allocator<char> *)&v233);
                  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v235.__r_.__value_.__l.__data_);
                  v61 = 0;
                  v235 = buf;
LABEL_96:
                  v62 = v54 + 1;
                  while (1)
                  {
                    v63 = *v62;
                    v64 = *(unsigned __int8 *)v62;
                    if (!*v62 || v64 == 45)
                      break;
                    v54 = v62;
                    if (v63 <= 109)
                    {
                      if (v63 == 105)
                      {
                        v65 = 8;
                        goto LABEL_113;
                      }
                      ++v62;
                      if (v63 == 109)
                      {
                        v65 = 1024;
LABEL_113:
                        v61 = v61 | v65;
                        goto LABEL_96;
                      }
                    }
                    else
                    {
                      if (v63 == 110)
                      {
                        v65 = 0x2000;
                        goto LABEL_113;
                      }
                      if (v63 == 115)
                      {
                        v54 = v62;
                        v65 = 32;
                        goto LABEL_113;
                      }
                      ++v62;
                      if (v63 == 120)
                      {
                        if ((v61 & 0x80) != 0)
                          v65 = 0x1000000;
                        else
                          v65 = 128;
                        goto LABEL_113;
                      }
                    }
                  }
                  while (v64 == 9 || v64 == 32)
                  {
                    v66 = *++v62;
                    LOBYTE(v64) = v66;
                  }
                  if ((_BYTE)v64)
                  {
                    if (!strncmp(v62, "-->", 3uLL))
                    {
                      for (j = v62 + 3; ; ++j)
                      {
                        v93 = *j;
                        if (v93 != 9 && v93 != 32)
                          break;
                      }
                      if (*j)
                      {
                        if (v93 == 34)
                        {
                          ++j;
                          v98 = 34;
                        }
                        else
                        {
                          v98 = 32;
                        }
                        v99 = *j;
                        v100 = v99 == 0;
                        for (k = j; !v100 && v99 != v98; ++k)
                        {
                          if (v99 == 92)
                          {
                            v103 = k[1];
                            if (v103 != v98 && v103 != 0)
                              ++k;
                          }
                          v105 = k[1];
                          v99 = v105;
                          v100 = v105 == 0;
                        }
                        if (v99)
                        {
                          if ((uint64_t)&j[-v40] >= 0)
                            v106 = (std::string::size_type)&j[-v40];
                          else
                            v106 = v40 - (_QWORD)j;
                          v107 = k - j;
                          if (v107 >= 0)
                            v108 = v107;
                          else
                            v108 = -v107;
                          std::string::basic_string(&buf, (const std::string *)v38, v106, v108, (std::allocator<char> *)&v233);
                          if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v236.__r_.__value_.__l.__data_);
                          v236 = buf;
                          if (Diagnostics_GetLogObject(void)::onceToken != -1)
                            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                          v109 = Diagnostics_GetLogObject(void)::__profile_log_default;
                          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                          {
                            v111 = &v235;
                            if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v111 = (std::string *)v235.__r_.__value_.__r.__words[0];
                            v112 = &v236;
                            if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v112 = (std::string *)v236.__r_.__value_.__r.__words[0];
                            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v111;
                            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v112;
                            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
                            v238 = v61;
                            _os_log_impl(&dword_1DE3F6000, v109, OS_LOG_TYPE_DEBUG, "Parsed rule: re = '%s'; tgt = '%s'; options = %x",
                              (uint8_t *)&buf,
                              0x1Cu);
                          }
                          v113 = &v235;
                          if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v113 = (std::string *)v235.__r_.__value_.__r.__words[0];
                          v114 = &v236;
                          if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v114 = (std::string *)v236.__r_.__value_.__r.__words[0];
                          Diagnostics::log(7, "Parsed rule: re = '%s'; tgt = '%s'; options = %x",
                            v110,
                            v113,
                            v114,
                            v61);
                          v74 = 1;
                          if (!v33)
                            goto LABEL_142;
                          goto LABEL_139;
                        }
                        if (Diagnostics_GetLogObject(void)::onceToken != -1)
                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                        v115 = Diagnostics_GetLogObject(void)::__profile_log_default;
                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                        {
                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                          _os_log_impl(&dword_1DE3F6000, v115, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                        }
                        Diagnostics::log(7, "Empty line in rule file, ignore!", v116);
                        if (Diagnostics_GetLogObject(void)::onceToken != -1)
                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                        v117 = Diagnostics_GetLogObject(void)::__profile_log_default;
                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                        {
                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
                          _os_log_impl(&dword_1DE3F6000, v117, OS_LOG_TYPE_DEBUG, "Missing end tag in PCRE2 target string: %s, ignore!", (uint8_t *)&buf, 0xCu);
                        }
                        Diagnostics::log(7, "Missing end tag in PCRE2 target string: %s, ignore!", v118, v40);
                      }
                      else
                      {
                        if (Diagnostics_GetLogObject(void)::onceToken != -1)
                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                        v94 = Diagnostics_GetLogObject(void)::__profile_log_default;
                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                        {
                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                          _os_log_impl(&dword_1DE3F6000, v94, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                        }
                        Diagnostics::log(7, "Empty line in rule file, ignore!", v95);
                        if (Diagnostics_GetLogObject(void)::onceToken != -1)
                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                        v96 = Diagnostics_GetLogObject(void)::__profile_log_default;
                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                        {
                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
                          _os_log_impl(&dword_1DE3F6000, v96, OS_LOG_TYPE_DEBUG, "Missing target in PCRE2 rule: %s, ignore!", (uint8_t *)&buf, 0xCu);
                        }
                        Diagnostics::log(7, "Missing target in PCRE2 rule: %s, ignore!", v97, v40);
                      }
                    }
                    else
                    {
                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                      v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                      {
                        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
                        _os_log_impl(&dword_1DE3F6000, v90, OS_LOG_TYPE_DEBUG, "Invalid separator in PCRE2 pattern: %s, ignore!", (uint8_t *)&buf, 0xCu);
                      }
                      Diagnostics::log(7, "Invalid separator in PCRE2 pattern: %s, ignore!", v91, v40);
                    }
                  }
                  else
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                    v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                    }
                    Diagnostics::log(7, "Empty line in rule file, ignore!", v68);
                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                    v69 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
                      _os_log_impl(&dword_1DE3F6000, v69, OS_LOG_TYPE_DEBUG, "Missing separator in PCRE2 pattern: %s, ignore!", (uint8_t *)&buf, 0xCu);
                    }
                    Diagnostics::log(7, "Missing separator in PCRE2 pattern: %s, ignore!", v70, v40);
                  }
                }
                else
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
                    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v46;
                    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v40;
                    _os_log_impl(&dword_1DE3F6000, v49, OS_LOG_TYPE_DEBUG, "Invalid delimiter in PCRE2 pattern: %c(%s), ignore!", (uint8_t *)&buf, 0x12u);
                  }
                  Diagnostics::log(7, "Invalid delimiter in PCRE2 pattern: %c(%s), ignore!", v50, v46, v40);
                }
LABEL_138:
                v74 = 0;
                if (!v33)
                  goto LABEL_142;
LABEL_139:
                v75 = (unint64_t *)&v33->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                  if ((v74 & 1) == 0)
                    goto LABEL_163;
                  goto LABEL_143;
                }
LABEL_142:
                if ((v74 & 1) == 0)
                  goto LABEL_163;
LABEL_143:
                v234 = 0;
                v233 = 0;
                v77 = pcre2_compile_8();
                if (v77)
                {
                  *(_QWORD *)(v18[4].__shared_owners_ + 8 * SLODWORD(v18[6].__shared_owners_)) = v77;
                  size = HIBYTE(v236.__r_.__value_.__r.__words[2]);
                  if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    size = v236.__r_.__value_.__l.__size_;
                  v79 = malloc_type_malloc(size + 1, 0x9D9493EDuLL);
                  shared_owners_low = SLODWORD(v18[6].__shared_owners_);
                  *(_QWORD *)(v18[5].__shared_owners_ + 8 * shared_owners_low) = v79;
                  v81 = *(void **)(v18[5].__shared_owners_ + 8 * shared_owners_low);
                  v82 = HIBYTE(v236.__r_.__value_.__r.__words[2]);
                  if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v83 = &v236;
                  else
                    v83 = (std::string *)v236.__r_.__value_.__r.__words[0];
                  if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v82 = v236.__r_.__value_.__l.__size_;
                  memcpy(v81, v83, v82 + 1);
                  ++LODWORD(v18[6].__shared_owners_);
                }
                else
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v84 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    v86 = &v235;
                    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v86 = (std::string *)v235.__r_.__value_.__r.__words[0];
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v86;
                    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v234;
                    _os_log_impl(&dword_1DE3F6000, v84, OS_LOG_TYPE_DEBUG, "Compiled RE failed(%s), Code: %d", (uint8_t *)&buf, 0x12u);
                  }
                  v87 = &v235;
                  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v87 = (std::string *)v235.__r_.__value_.__r.__words[0];
                  v214 = v234;
                  Diagnostics::log(7, "Compiled RE failed(%s), Code: %d", v85, v87);
                }
LABEL_163:
                if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v236.__r_.__value_.__l.__data_);
                if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v235.__r_.__value_.__l.__data_);
                  if (v33)
                  {
LABEL_169:
                    v88 = (unint64_t *)&v33->__shared_owners_;
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                      std::__shared_weak_count::__release_weak(v33);
                    }
                  }
                }
                else if (v33)
                {
                  goto LABEL_169;
                }
                v31 += 16;
                if (v31 == v219)
                {
                  v119 = SLODWORD(v18[6].__shared_owners_);
                  v120 = v18[3].__shared_weak_owners_;
                  v31 = *(char **)v120;
                  v121 = *(char **)(v120 + 8);
                  v12 = v215;
                  goto LABEL_363;
                }
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
              }
              v45 = "Empty line in rule file, ignore!";
LABEL_137:
              Diagnostics::log(7, v45, v44, v213, v214);
              goto LABEL_138;
            }
            v119 = 0;
            v121 = *(char **)shared_weak_owners;
LABEL_363:
            if (v119 != (v121 - v31) >> 4)
            {
              std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)&v18[4].__shared_owners_, v119);
              std::vector<char *>::resize((char **)&v18[5].__shared_owners_, SLODWORD(v18[6].__shared_owners_));
            }
            LOBYTE(v18[3].__shared_owners_) = 0;
            if (v12)
            {
              v196 = (unint64_t *)&v12->__shared_owners_;
              do
                v197 = __ldaxr(v196);
              while (__stlxr(v197 - 1, v196));
              if (!v197)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            do
              v198 = __ldxr(v19);
            while (__stxr(v198 + 1, v19));
            v199 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
            *(_QWORD *)&v225 = v18 + 1;
            *((_QWORD *)&v225 + 1) = v18;
            if (v199)
            {
              v200 = (unint64_t *)&v199->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            do
              v202 = __ldaxr(v19);
            while (__stlxr(v202 - 1, v19));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            v203 = v223;
            v9 = v218;
            if (v223)
            {
              v204 = (unint64_t *)&v223->__shared_owners_;
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 - 1, v204));
              if (!v205)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v203);
              }
            }
            if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_389;
            v195 = &v224;
          }
          else
          {
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v221, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
            else
              v221 = v228;
            v220 = v12;
            if (v12)
            {
              v20 = (unint64_t *)&v12->__shared_owners_;
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = (char *)operator new(0xB8uLL);
            *((_QWORD *)v22 + 1) = 0;
            *((_QWORD *)v22 + 2) = 0;
            *(_QWORD *)v22 = &off_1EA935AE8;
            if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v235, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
            else
              v235 = v221;
            if (v12)
            {
              v122 = (unint64_t *)&v12->__shared_owners_;
              do
                v123 = __ldxr(v122);
              while (__stxr(v123 + 1, v122));
            }
            *((_QWORD *)v22 + 3) = &off_1EA9225A0;
            v124 = v22 + 32;
            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)(v22 + 32), v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
            }
            else
            {
              *v124 = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
              *((_QWORD *)v22 + 6) = *((_QWORD *)&v235.__r_.__value_.__l + 2);
            }
            v125 = (FRCode *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)v22 + 7, "nfa");
            *((_QWORD *)v22 + 10) = v11;
            *((_QWORD *)v22 + 11) = v12;
            if (v12)
            {
              v126 = (unint64_t *)&v12->__shared_owners_;
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
            }
            *((_QWORD *)v22 + 19) = 0;
            v128 = (void **)(v22 + 152);
            *((_OWORD *)v22 + 7) = 0u;
            *((_OWORD *)v22 + 8) = 0u;
            *((_DWORD *)v22 + 36) = 1065353216;
            *((_QWORD *)v22 + 20) = 0;
            *((_QWORD *)v22 + 21) = 0;
            *((_DWORD *)v22 + 44) = 0;
            FRCode::init_tables(v125);
            v130 = *(FRRule ***)v11;
            v129 = *(FRRule ***)(v11 + 8);
            v131 = ((uint64_t)v129 - *(_QWORD *)v11) >> 4;
            is_mul_ok(v131, 0x88uLL);
            v132 = (_QWORD *)operator new[]();
            *v132 = 136;
            v132[1] = v131;
            v133 = v132 + 2;
            if (v129 != v130)
            {
              v134 = v132 + 2;
              do
              {
                *(_BYTE *)v134 = 0;
                v134[6] = 0;
                v134[8] = 0;
                v134[10] = 0;
                v134[15] = 0;
                *((_BYTE *)v134 + 128) = 0;
                *(_OWORD *)(v134 + 1) = 0uLL;
                *(_OWORD *)(v134 + 3) = 0uLL;
                v134[12] = 0;
                v134[13] = 0;
                v134 += 17;
              }
              while (v134 != &v133[17 * v131]);
            }
            *((_QWORD *)v22 + 12) = v133;
            v135 = *(FRRule ***)v11;
            if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
            {
              LODWORD(v169) = 0;
            }
            else
            {
              v136 = v12;
              v137 = 0;
              do
              {
                v138 = *(_OWORD *)&v135[2 * v137];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v138;
                if (*((_QWORD *)&v138 + 1))
                {
                  v139 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
                  do
                    v140 = __ldxr(v139);
                  while (__stxr(v140 + 1, v139));
                }
                FRCode::compile((uint64_t)&v133[17 * v137], (std::string **)&__str);
                v142 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_)
                {
                  v143 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
                if (fr_verbose_log(void)::is_verbose_)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v145 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    FRCode::to_string((FRCode *)&buf, *((_QWORD *)v22 + 12) + 136 * v137);
                    p_buf = &buf;
                    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                    LODWORD(v236.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v236.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
                    _os_log_impl(&dword_1DE3F6000, v145, OS_LOG_TYPE_DEBUG, "====Code Ops====\n%s", (uint8_t *)&v236, 0xCu);
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  FRCode::to_string((FRCode *)&buf, *((_QWORD *)v22 + 12) + 136 * v137);
                  v148 = &buf;
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v148 = (std::string *)buf.__r_.__value_.__r.__words[0];
                  Diagnostics::log(7, "====Code Ops====\n%s", v147, v148);
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                }
                v149 = *((_QWORD *)v22 + 12);
                v150 = *(_QWORD *)(v149 + 136 * v137 + 96);
                if (v150)
                {
                  FRNFA::update_prefix_tree((uint64_t)(v22 + 24), v150, v137, v141);
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&buf, *(char **)(v149 + 136 * v137 + 24));
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v151 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    v153 = &buf;
                    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v153 = (std::string *)buf.__r_.__value_.__r.__words[0];
                    v154 = (std::string::size_type)(v22 + 32);
                    if (v22[55] < 0)
                      v154 = *(_QWORD *)v124;
                    LODWORD(v236.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)v236.__r_.__value_.__r.__words + 4) = (std::string::size_type)v153;
                    WORD2(v236.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v236.__r_.__value_.__r.__words[1] + 6) = v154;
                    _os_log_impl(&dword_1DE3F6000, v151, OS_LOG_TYPE_DEBUG, "Empty first bytes rule: %s from %s", (uint8_t *)&v236, 0x16u);
                  }
                  v155 = &buf;
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v155 = (std::string *)buf.__r_.__value_.__r.__words[0];
                  v156 = v22 + 32;
                  if (v22[55] < 0)
                    v156 = *(char **)v124;
                  v214 = (unint64_t)v156;
                  Diagnostics::log(7, "Empty first bytes rule: %s from %s", v152, v155);
                  v158 = (char *)*((_QWORD *)v22 + 20);
                  v157 = *((_QWORD *)v22 + 21);
                  if ((unint64_t)v158 >= v157)
                  {
                    v160 = (char *)*v128;
                    v161 = (v158 - (_BYTE *)*v128) >> 2;
                    v162 = v161 + 1;
                    if ((unint64_t)(v161 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v163 = v157 - (_QWORD)v160;
                    if (v163 >> 1 > v162)
                      v162 = v163 >> 1;
                    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                      v164 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v164 = v162;
                    if (v164)
                    {
                      v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v22 + 168), v164);
                      v160 = (char *)*((_QWORD *)v22 + 19);
                      v158 = (char *)*((_QWORD *)v22 + 20);
                    }
                    else
                    {
                      v165 = 0;
                    }
                    v166 = &v165[4 * v161];
                    *(_DWORD *)v166 = v137;
                    v159 = v166 + 4;
                    while (v158 != v160)
                    {
                      v167 = *((_DWORD *)v158 - 1);
                      v158 -= 4;
                      *((_DWORD *)v166 - 1) = v167;
                      v166 -= 4;
                    }
                    *((_QWORD *)v22 + 19) = v166;
                    *((_QWORD *)v22 + 20) = v159;
                    *((_QWORD *)v22 + 21) = &v165[4 * v164];
                    if (v160)
                      operator delete(v160);
                  }
                  else
                  {
                    *(_DWORD *)v158 = v137;
                    v159 = v158 + 4;
                  }
                  *((_QWORD *)v22 + 20) = v159;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                }
                v133 = (_QWORD *)*((_QWORD *)v22 + 12);
                v168 = v133[17 * v137 + 5];
                if (v168 > *((_DWORD *)v22 + 44))
                  *((_DWORD *)v22 + 44) = v168;
                ++v137;
                v135 = *(FRRule ***)v11;
                v169 = (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 4;
              }
              while (v169 > v137);
              v12 = v136;
            }
            *((_DWORD *)v22 + 26) = v169;
            *((_DWORD *)v22 + 27) = 0;
            v170 = (_DWORD *)*((_QWORD *)v22 + 19);
            v171 = (_DWORD *)*((_QWORD *)v22 + 20);
            while (v170 != v171)
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = *v170;
              for (m = (std::vector<int> *)*((_QWORD *)v22 + 16); m; m = (std::vector<int> *)m->__begin_)
              {
                begin = m[1].__begin_;
                end = (char *)m[1].__end_;
                v175 = (end - (char *)begin) >> 2;
                if (end == (char *)begin)
                {
LABEL_323:
                  value = m[1].__end_cap_.__value_;
                  if (end >= (char *)value)
                  {
                    if ((v175 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v180 = (char *)value - (char *)begin;
                    v181 = ((char *)value - (char *)begin) >> 1;
                    if (v181 <= v175 + 1)
                      v181 = v175 + 1;
                    if (v180 >= 0x7FFFFFFFFFFFFFFCLL)
                      v182 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v182 = v181;
                    if (v182)
                    {
                      v183 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&m[1].__end_cap_, v182);
                      begin = m[1].__begin_;
                      end = (char *)m[1].__end_;
                    }
                    else
                    {
                      v183 = 0;
                    }
                    v185 = (int *)&v183[4 * v175];
                    *v185 = (int)buf.__r_.__value_.__l.__data_;
                    v179 = v185 + 1;
                    while (end != (char *)begin)
                    {
                      v186 = *((_DWORD *)end - 1);
                      end -= 4;
                      *--v185 = v186;
                    }
                    m[1].__begin_ = v185;
                    m[1].__end_ = v179;
                    m[1].__end_cap_.__value_ = (int *)&v183[4 * v182];
                    if (begin)
                      operator delete(begin);
                  }
                  else
                  {
                    *(_DWORD *)end = buf.__r_.__value_.__l.__data_;
                    v179 = (int *)(end + 4);
                  }
                  m[1].__end_ = v179;
                }
                else
                {
                  v176 = 0;
                  if (v175 <= 1)
                    v177 = 1;
                  else
                    v177 = (end - (char *)begin) >> 2;
                  while (SLODWORD(buf.__r_.__value_.__l.__data_) >= begin[v176])
                  {
                    if (v177 == ++v176)
                      goto LABEL_323;
                  }
                  v184.__i_ = &begin[v176];
                  std::vector<int>::insert(m + 1, v184, (std::vector<int>::const_reference)&buf);
                }
              }
              ++v170;
            }
            if (v12)
            {
              v187 = (unint64_t *)&v12->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              if (!v188)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v235.__r_.__value_.__l.__data_);
            *(_QWORD *)&v189 = v22 + 24;
            *((_QWORD *)&v189 + 1) = v22;
            v190 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
            v225 = v189;
            if (v190)
            {
              v191 = (unint64_t *)&v190->__shared_owners_;
              do
                v192 = __ldaxr(v191);
              while (__stlxr(v192 - 1, v191));
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                std::__shared_weak_count::__release_weak(v190);
              }
            }
            if (v220)
            {
              v193 = (unint64_t *)&v220->__shared_owners_;
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 - 1, v193));
              if (!v194)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_389;
            v195 = &v221;
          }
          operator delete(v195->__r_.__value_.__l.__data_);
LABEL_389:
          std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v216, &v225);
          v206 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
          if (*((_QWORD *)&v225 + 1))
          {
            v207 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          v12 = v227;
LABEL_395:
          if (v12)
          {
            v209 = (unint64_t *)&v12->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v228.__r_.__value_.__l.__data_);
          v9 += 40;
        }
        while (v9 != v217);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
    std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  else if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v211 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v211, OS_LOG_TYPE_DEBUG, "Skip compilation because it's binary model", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Skip compilation because it's binary model", v212);
  }
}

void sub_1DE998B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62)
{
  uint64_t v62;

  std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  _Unwind_Resume(a1);
}

uint64_t FastRewriterImpl::dump(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  _QWORD v17[13];
  char v18;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  uint8_t v22[8];
  uint64_t v23;
  _QWORD v24[22];

  v24[20] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 48))
  {
    v1 = result;
    std::ofstream::basic_ofstream(v22);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
    std::ostream::write();
    v3 = *(uint64_t **)(v1 + 24);
    v2 = *(uint64_t **)(v1 + 32);
    if (v3 != v2)
    {
      v4 = 4;
      do
      {
        v5 = *v3;
        v6 = (std::__shared_weak_count *)v3[1];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }
        v9 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 24))(v5, v17, v4);
        if (fr_verbose_log(void)::is_verbose_)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v21 = v9;
            _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_DEBUG, "Size of Graph: %u", buf, 8u);
          }
          Diagnostics::log(7, "Size of Graph: %u", v11, v9);
        }
        if (v6)
        {
          v12 = (unint64_t *)&v6->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 = (v9 + v4);
        v3 += 2;
      }
      while (v3 != v2);
    }
    std::ostream::operator<<();
    v17[0] = *MEMORY[0x1E0DE4F50];
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v17[2] = v14;
    v17[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1DF0ECF6C](&v19);
    *(_QWORD *)v22 = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x1DF0ECB94](&v23);
    std::ostream::~ostream();
    return MEMORY[0x1DF0ECF6C](v24);
  }
  else if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_DEBUG, "Skip dump model because it's already binary model", v22, 2u);
    }
    return Diagnostics::log(7, "Skip dump model because it's already binary model", v16);
  }
  return result;
}

void sub_1DE9991FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  std::ofstream::~ofstream(&a53);
  _Unwind_Resume(a1);
}

void FastRewriterImpl::add_rule(uint64_t a1, std::string *a2)
{
  FRRuleSet::add_text_rule(*(_QWORD *)(a1 + 8), a2);
  FRRuleSet::parse(*(FRRuleSet **)(a1 + 8));
}

void FastRewriterImpl::set_verbose(FastRewriterImpl *this, char a2)
{
  fr_verbose_log(void)::is_verbose_ = a2;
}

void FastRewriterImpl::set_matching_threads(FastRewriterImpl *this, int a2)
{
  char v3;
  NSObject *v4;
  const char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  fr_matching_threads();
  if (a2)
    v3 = a2;
  else
    v3 = 4;
  fr_matching_threads(void)::matching_threads = v3;
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      fr_matching_threads();
      *(_DWORD *)buf = 67109120;
      v7 = fr_matching_threads(void)::matching_threads;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEBUG, "Set matching threads to %u", buf, 8u);
    }
    fr_matching_threads();
    Diagnostics::log(7, "Set matching threads to %u", v5, fr_matching_threads(void)::matching_threads);
  }
}

void FastRewriterImpl::set_group_buffer_count(FastRewriterImpl *this, int a2)
{
  char v3;
  NSObject *v4;
  const char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  fr_group_buffer_count();
  if (a2)
    v3 = a2;
  else
    v3 = 24;
  fr_group_buffer_count(void)::group_buf_cnt = v3;
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      fr_group_buffer_count();
      *(_DWORD *)buf = 67109120;
      v7 = fr_group_buffer_count(void)::group_buf_cnt;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEBUG, "Set matching group buffer count to %u", buf, 8u);
    }
    fr_group_buffer_count();
    Diagnostics::log(7, "Set matching group buffer count to %u", v5, fr_group_buffer_count(void)::group_buf_cnt);
  }
}

void std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void FastRewriterImpl::apply_real(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  char *v23;
  NSObject *v24;
  const char *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  const char *v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  uint64_t v59;
  std::string *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  void *v66;
  int v67;
  char *v68;
  NSObject *v69;
  const char *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  __int128 v94;
  _QWORD *v96;
  uint64_t **v98;
  uint64_t *v99[2];
  uint64_t *v100;
  std::__shared_weak_count *v101;
  std::string __str;
  uint64_t *v103;
  std::__shared_weak_count *v104;
  void *__p;
  _QWORD *v106;
  unint64_t v107;
  std::string v108;
  _BYTE buf[12];
  uint8_t v110[32];
  std::string v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA936568;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 3);
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  v98 = (uint64_t **)(a1 + 24);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 24, (__int128 *)&__str);
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::string::operator=((std::string *)a1, (const std::string *)a3);
  v13 = *(_QWORD **)(a2 + 24);
  v12 = *(_QWORD **)(a2 + 32);
  if (v13 != v12)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      v13 = *(_QWORD **)(a2 + 24);
      v12 = *(_QWORD **)(a2 + 32);
    }
    else
    {
      v108 = *(std::string *)a3;
    }
    __p = 0;
    v106 = 0;
    v107 = 0;
    if (v13 != v12)
    {
      v14 = &unk_1F044B000;
      v15 = &unk_1F044B000;
      v96 = v12;
      while (1)
      {
        v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
        v17 = *(_QWORD *)(a4 + 24);
        if (!v17)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v16) & 1) != 0)
        {
          (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*v13 + 8))(&__str, *v13, &v108);
          if (v103)
          {
            if (!a5)
              goto LABEL_69;
            v18 = *v98;
            if (**v98 == (*v98)[1])
            {
              v65 = (unsigned int *)*v103;
              v64 = (unsigned int *)v103[1];
              while (v65 != v64)
              {
                if (*((char *)v65 + 31) < 0)
                {
                  v67 = v65[4];
                  v66 = (void *)*((_QWORD *)v65 + 1);
                }
                else
                {
                  v66 = v65 + 2;
                  v67 = *((unsigned __int8 *)v65 + 31);
                }
                v68 = (char *)(v65 + 8);
                if (*((char *)v65 + 55) < 0)
                  v68 = *(char **)v68;
                _Gryphon_ReportSubstitution(v67, v66, v68);
                if (v14[443] != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v69 = *((_QWORD *)v15 + 442);
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
                {
                  v71 = v65 + 14;
                  if (*((char *)v65 + 79) < 0)
                    v71 = (_QWORD *)*v71;
                  LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
                  _os_log_impl(&dword_1DE3F6000, v69, OS_LOG_TYPE_DEBUG, "==> Rule: %s", (uint8_t *)&v111, 0xCu);
                }
                v72 = v65 + 14;
                if (*((char *)v65 + 79) < 0)
                  v72 = (_QWORD *)*v72;
                Diagnostics::log(7, "==> Rule: %s", v70, v72);
                v73 = *v98;
                v74 = (*v98)[1];
                if (v74 >= (*v98)[2])
                {
                  v75 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(*v98, (uint64_t)v65);
                }
                else
                {
                  std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>((*v98)[1], (uint64_t)v65);
                  v75 = v74 + 80;
                  v73[1] = v74 + 80;
                }
                v73[1] = v75;
                v76 = v106;
                if (__p == v106)
                  v77 = 0;
                else
                  v77 = *((_DWORD *)v106 - 2) - *((_DWORD *)v106 - 6);
                v78 = *v65;
                if (*((char *)v65 + 31) < 0)
                  v79 = *((_QWORD *)v65 + 2);
                else
                  v79 = *((unsigned __int8 *)v65 + 31);
                if (*((char *)v65 + 55) < 0)
                  v80 = *((_QWORD *)v65 + 5);
                else
                  v80 = *((unsigned __int8 *)v65 + 55);
                v81 = v79 + v78;
                v82 = (v78 + v77);
                v83 = v80 + v82;
                if ((unint64_t)v106 >= v107)
                {
                  v85 = ((char *)v106 - (_BYTE *)__p) >> 5;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 59)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v87 = v107 - (_QWORD)__p;
                  if ((uint64_t)(v107 - (_QWORD)__p) >> 4 > v86)
                    v86 = v87 >> 4;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0)
                    v88 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                    v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v88);
                  else
                    v89 = 0;
                  v90 = (_QWORD *)(v88 + 32 * v85);
                  *v90 = v78;
                  v90[1] = v81;
                  v90[2] = v82;
                  v90[3] = v83;
                  v92 = __p;
                  v91 = v106;
                  v93 = (char *)v90;
                  v14 = (_QWORD *)&unk_1F044B000;
                  v15 = &unk_1F044B000;
                  if (v106 != __p)
                  {
                    do
                    {
                      v94 = *((_OWORD *)v91 - 1);
                      *((_OWORD *)v93 - 2) = *((_OWORD *)v91 - 2);
                      *((_OWORD *)v93 - 1) = v94;
                      v93 -= 32;
                      v91 -= 4;
                    }
                    while (v91 != v92);
                    v91 = v92;
                  }
                  v84 = v90 + 4;
                  __p = v93;
                  v106 = v90 + 4;
                  v107 = v88 + 32 * v89;
                  if (v91)
                    operator delete(v91);
                }
                else
                {
                  *v106 = v78;
                  v76[1] = v81;
                  v84 = v76 + 4;
                  v76[2] = v82;
                  v76[3] = v83;
                  v14 = (_QWORD *)&unk_1F044B000;
                  v15 = &unk_1F044B000;
                }
                v106 = v84;
                v65 += 20;
              }
              goto LABEL_69;
            }
            memset(&v111, 0, sizeof(v111));
            memset(v110, 0, 24);
            v20 = *v103;
            v19 = v103[1];
            if (*v103 == v19)
              goto LABEL_59;
            while (1)
            {
              if (*(char *)(v20 + 31) < 0)
              {
                v22 = *(_DWORD *)(v20 + 16);
                v21 = *(void **)(v20 + 8);
              }
              else
              {
                v21 = (void *)(v20 + 8);
                v22 = *(unsigned __int8 *)(v20 + 31);
              }
              v23 = (char *)(v20 + 32);
              if (*(char *)(v20 + 55) < 0)
                v23 = *(char **)v23;
              _Gryphon_ReportSubstitution(v22, v21, v23);
              if (v14[443] != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v24 = *((_QWORD *)v15 + 442);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                v26 = (_QWORD *)(v20 + 56);
                if (*(char *)(v20 + 79) < 0)
                  v26 = (_QWORD *)*v26;
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v26;
                _os_log_impl(&dword_1DE3F6000, v24, OS_LOG_TYPE_DEBUG, "==> Rule: %s", buf, 0xCu);
              }
              v27 = (_QWORD *)(v20 + 56);
              if (*(char *)(v20 + 79) < 0)
                v27 = (_QWORD *)*v27;
              Diagnostics::log(7, "==> Rule: %s", v25, v27);
              v28 = *(std::__shared_weak_count **)(a1 + 32);
              v100 = *(uint64_t **)(a1 + 24);
              v101 = v28;
              if (v28)
              {
                p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
              }
              v31 = FastRewriter::merge(&v100, (uint64_t **)v20, (std::string *)a3, (uint64_t *)&__p, (uint64_t **)&v111);
              v32 = v31;
              v33 = v101;
              if (!v101)
                goto LABEL_38;
              v34 = (unint64_t *)&v101->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
                if ((v32 & 1) == 0)
                {
LABEL_39:
                  v36 = *(_QWORD *)&v110[8];
                  if (*(_QWORD *)&v110[8] >= *(_QWORD *)&v110[16])
                  {
                    v37 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>((uint64_t *)v110, v20);
                  }
                  else
                  {
                    std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(*(uint64_t *)&v110[8], v20);
                    v37 = v36 + 80;
                  }
                  *(_QWORD *)&v110[8] = v37;
                }
              }
              else
              {
LABEL_38:
                if ((v31 & 1) == 0)
                  goto LABEL_39;
              }
              v20 += 80;
              if (v20 == v19)
              {
                v18 = *v98;
LABEL_59:
                v48 = *(uint64_t **)(a1 + 32);
                v99[0] = v18;
                v99[1] = v48;
                if (v48)
                {
                  v49 = (unint64_t *)(v48 + 1);
                  do
                    v50 = __ldxr(v49);
                  while (__stxr(v50 + 1, v49));
                }
                FastRewriter::apply_replace_update(*(unsigned int **)v110, *(unsigned int **)&v110[8], v99, (char **)&__p, (int **)&v111);
                if (v48)
                {
                  v51 = (unint64_t *)(v48 + 1);
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    (*(void (**)(uint64_t *))(*v48 + 16))(v48);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v48);
                  }
                }
                FastRewriter::apply_offsets_update((uint64_t)__p, (uint64_t)v106, (unsigned int *)v111.__r_.__value_.__l.__data_, (unsigned int *)v111.__r_.__value_.__l.__size_);
                *(_QWORD *)buf = v110;
                std::vector<FRReplaceInst>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                if (v111.__r_.__value_.__r.__words[0])
                {
                  v111.__r_.__value_.__l.__size_ = v111.__r_.__value_.__r.__words[0];
                  operator delete(v111.__r_.__value_.__l.__data_);
                }
LABEL_69:
                std::string::operator=((std::string *)a1, &__str);
                std::string::operator=(&v108, &__str);
                v12 = v96;
                if (fr_verbose_log(void)::is_verbose_)
                {
                  if (v14[443] != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v53 = *((_QWORD *)v15 + 442);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    v54 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
                    v55 = *(char *)(v54 + 23);
                    v56 = *(_QWORD *)v54;
                    Censor::global_plaintext(&v111, (uint64_t)&__str);
                    if (v55 >= 0)
                      v57 = v54;
                    else
                      v57 = v56;
                    v58 = &v111;
                    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v58 = (std::string *)v111.__r_.__value_.__r.__words[0];
                    *(_DWORD *)v110 = 136315394;
                    *(_QWORD *)&v110[4] = v57;
                    *(_WORD *)&v110[12] = 2080;
                    *(_QWORD *)&v110[14] = v58;
                    _os_log_impl(&dword_1DE3F6000, v53, OS_LOG_TYPE_DEBUG, "Result of Graph: %s | %s", v110, 0x16u);
                    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v111.__r_.__value_.__l.__data_);
                  }
                  v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
                  v45 = *(char *)(v44 + 23);
                  v46 = *(_QWORD *)v44;
                  Censor::global_plaintext(&v111, (uint64_t)&__str);
                  goto LABEL_81;
                }
                goto LABEL_89;
              }
            }
          }
          if (fr_verbose_log(void)::is_verbose_)
          {
            if (v14[443] != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v38 = *((_QWORD *)v15 + 442);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
              v40 = *(char *)(v39 + 23);
              v41 = *(_QWORD *)v39;
              Censor::global_plaintext(&v111, (uint64_t)&v108);
              if (v40 >= 0)
                v42 = v39;
              else
                v42 = v41;
              v43 = &v111;
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v43 = (std::string *)v111.__r_.__value_.__r.__words[0];
              *(_DWORD *)v110 = 136315394;
              *(_QWORD *)&v110[4] = v42;
              *(_WORD *)&v110[12] = 2080;
              *(_QWORD *)&v110[14] = v43;
              _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_DEBUG, "Result of Graph: %s | %s", v110, 0x16u);
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111.__r_.__value_.__l.__data_);
            }
            v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
            v45 = *(char *)(v44 + 23);
            v46 = *(_QWORD *)v44;
            Censor::global_plaintext(&v111, (uint64_t)&v108);
LABEL_81:
            if (v45 >= 0)
              v59 = v44;
            else
              v59 = v46;
            v60 = &v111;
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v60 = (std::string *)v111.__r_.__value_.__r.__words[0];
            Diagnostics::log(7, "Result of Graph: %s | %s", v47, v59, v60);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            v12 = v96;
          }
LABEL_89:
          v61 = v104;
          if (v104)
          {
            v62 = (unint64_t *)&v104->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        v13 += 2;
        if (v13 == v12)
        {
          if (__p)
          {
            v106 = __p;
            operator delete(__p);
          }
          break;
        }
      }
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
  }
}

