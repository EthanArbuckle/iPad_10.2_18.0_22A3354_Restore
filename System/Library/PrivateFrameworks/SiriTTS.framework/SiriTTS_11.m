uint64_t mfs_VennDiaGrams_Obersee(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, int a5, unsigned int a6, uint64_t a7, int a8, unsigned __int8 a9, int a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t MemoryFromChunk;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  BOOL v41;
  int *v43;
  int v48[4];
  __int128 v49;
  uint64_t v50;
  char *__dst[34];

  __dst[32] = *(char **)MEMORY[0x1E0C80C00];
  v50 = 0;
  v12 = a1[73];
  v13 = v12 + 8 * a2;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 1712) + 8 * a3);
  v15 = a5;
  v16 = (unsigned int *)(v14 + 16 * a5);
  v17 = *(_DWORD *)(v12 + 1096);
  v18 = v16[2];
  v19 = *(_QWORD *)(v13 + 1792);
  v20 = a1[74];
  if (*(_DWORD *)(v20 + 8336) != 2)
  {
    if (v19)
    {
      v24 = v19 + *v16;
      goto LABEL_10;
    }
LABEL_9:
    v24 = 0;
    goto LABEL_10;
  }
  if (!v19)
    goto LABEL_9;
  v21 = v14 + 16 * a5;
  v22 = *(_DWORD *)(v21 + 4);
  if (v22 < 2)
    goto LABEL_9;
  result = 2229280777;
  if (a1[2251] && *(_DWORD *)(v21 + 12) * (v22 - 1) <= *(_DWORD *)(v20 + 8340))
  {
    Huffman_Uncompress(v19 + *v16);
    v24 = a1[2251];
    LODWORD(v50) = 0;
LABEL_10:
    v25 = v14 + 16 * v15;
    v26 = (unsigned int *)(v25 + 4);
    if (*(_DWORD *)(v25 + 4))
      v27 = a6 == 0;
    else
      v27 = 1;
    if (v27)
      return 0;
    v28 = v17 - 1;
    v29 = -1431655765 * ((*(_QWORD *)(a7 + 40) - *(_QWORD *)(a7 + 32)) >> 3);
    v43 = (int *)(v25 + 12);
    v30 = 1;
    v31 = v29;
    while (1)
    {
      if (v18 >= v28)
        goto LABEL_44;
      if (*(_DWORD *)(a1[74] + 8356) == 1)
      {
        *(_OWORD *)v48 = 0u;
        v49 = 0u;
        result = mfs_getUnitData_Obersee(a1[73], *a1, v18, (uint64_t)v48);
        HIDWORD(v50) = result;
        if ((result & 0x80000000) != 0)
          return result;
        result = mfs_symData_recoverCompactFeatVect_Obersee(a1[73], *a1, (uint64_t)(a1 + 2253), v48[2], __dst, v32, v33, v34);
        HIDWORD(v50) = result;
        if ((result & 0x80000000) != 0)
          return result;
        if (*((unsigned __int8 *)__dst + a10) != a9)
          goto LABEL_44;
      }
      MemoryFromChunk = a1[10];
      if (MemoryFromChunk)
        a1[10] = *(_QWORD *)MemoryFromChunk;
      else
        MemoryFromChunk = fastallo_AllocateMemoryFromChunk((uint64_t)(a1 + 1), 4u, (int *)&v50 + 1);
      result = HIDWORD(v50);
      if (v50 < 0)
        return result;
      result = mfs_getUnitData_Obersee(a1[73], *a1, v18, MemoryFromChunk);
      HIDWORD(v50) = result;
      if ((result & 0x80000000) != 0)
        return result;
      if (*(unsigned __int8 *)(MemoryFromChunk + 25) == a4[1])
      {
        LOWORD(v36) = a8;
        if (a2 != 2)
          goto LABEL_36;
        if (a3 == 4)
        {
          v37 = *(unsigned __int8 *)(MemoryFromChunk + 26);
          v38 = a4[2];
        }
        else
        {
          LOWORD(v36) = a8;
          if (a3 == 3)
            goto LABEL_36;
          if (a3 != 2)
            goto LABEL_43;
          v37 = *(unsigned __int8 *)(MemoryFromChunk + 24);
          v38 = *a4;
        }
        LOWORD(v36) = a8;
        if (v37 == v38)
          goto LABEL_36;
      }
      else if (a2 == 1)
      {
        v39 = *(_DWORD *)(a1[74] + 8260);
        if ((v39 & 0x80000000) == 0)
        {
          v36 = a8 + 100 * v39;
          if (v36 >= 0xFFFF)
            LOWORD(v36) = -1;
LABEL_36:
          __dst[0] = 0;
          result = mfs_CandidateList_InsertSortedProbablyAppend_Obersee(a7, v18, v36, __dst, MemoryFromChunk, *(uint64_t **)(*a1 + 8));
          if ((result & 0x80001FFF) == 0x80000002)
          {
            mfs_CandidateListNode_UpdateCost_Obersee((uint64_t)__dst[0], -100);
            *(_QWORD *)MemoryFromChunk = a1[10];
            a1[10] = MemoryFromChunk;
          }
          else if ((result & 0x80001FFF) == 0x8000000A)
          {
            return result;
          }
          v31 = -1431655765 * ((*(_QWORD *)(a7 + 40) - *(_QWORD *)(a7 + 32)) >> 3);
          goto LABEL_44;
        }
      }
LABEL_43:
      *(_QWORD *)MemoryFromChunk = a1[10];
      a1[10] = MemoryFromChunk;
LABEL_44:
      v40 = *v26;
      if (v30 - 1 < *v26 - 1)
      {
        if (v24)
        {
          v18 += readBytesIntoU32(v24, &v50, *v43);
          v40 = *v26;
        }
        else
        {
          ++v18;
        }
      }
      v41 = v30++ >= v40;
      v41 = v41 || v31 - v29 >= a6;
      if (v41)
        return HIDWORD(v50);
    }
  }
  return result;
}

uint64_t mfs_AppendUnsortedToCandidateListIfNotPresent_Obersee(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 a5)
{
  uint64_t result;
  uint64_t *MemoryFromChunk;
  char *v10;
  unsigned int v11;
  char *v12;

  v12 = 0;
  result = mfs_CandidateList_ReserveSpaceAtEndIfNotPresent_Obersee(a2, a3, a4, &v12, *(uint64_t **)(*a1 + 8));
  v11 = result;
  if (!(_DWORD)result)
  {
    MemoryFromChunk = (uint64_t *)a1[10];
    if (MemoryFromChunk)
    {
      a1[10] = *MemoryFromChunk;
    }
    else
    {
      MemoryFromChunk = (uint64_t *)fastallo_AllocateMemoryFromChunk((uint64_t)(a1 + 1), 4u, (int *)&v11);
      result = v11;
      if ((v11 & 0x80000000) != 0)
        return result;
    }
    result = mfs_getUnitData_Obersee(a1[73], *a1, a4, (uint64_t)MemoryFromChunk);
    if ((result & 0x80000000) == 0)
    {
      v10 = v12;
      *((_DWORD *)v12 + 1) = a4;
      *((_WORD *)v10 + 4) = a5;
      *((_QWORD *)v10 + 2) = MemoryFromChunk;
    }
  }
  return result;
}

uint64_t mfs_Search_EndPrefilterRun(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 576) + 2200) = 0;
  return result;
}

uint64_t mfs_PruneDPListOnContext_Obersee(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  signed int v12;
  uint64_t v13;
  signed int v14;
  __int16 v17;
  char v18;

  v18 = 0;
  v17 = 0;
  UNICORN__mfs_Ling_GetPhonCtxt(*(_QWORD *)(a1[72] + 8), a2, &v17);
  v4 = 0;
  v5 = 0;
  v6 = 2 * a2;
  do
  {
    v7 = (_DWORD *)a1[74];
    if (HIBYTE(v17) == 1)
    {
      v8 = v7[2064];
      if (v8)
      {
        if (v8 >= v7[2060])
          v8 = v7[2060];
      }
      else
      {
        v8 = 20;
      }
    }
    else
    {
      v8 = v7[2060];
    }
    v9 = a1[v4 + 80];
    v10 = a1[v4 + 79];
    v11 = &a1[v4];
    HIDWORD(a1[v4 + 82]) = v8;
    v12 = mfs_CandidateList_Filter_Obersee((uint64_t)&a1[v4 + 75], v7[2079] + LOWORD(a1[v4 + 82]));
    v13 = a1[74];
    if (SHIDWORD(a1[v4 + 82]) >= v12)
    {
      v14 = *(_DWORD *)(v13 + 8320);
      if (v12 >= v14 || v14 >= (int)(-1431655765 * ((unint64_t)(v9 - v10) >> 3)))
      {
        *((_DWORD *)v11 + 165) = v12;
        mfs_CandidateList_Prune_Obersee((uint64_t)&a1[v4 + 75], v12, *(_QWORD *)(*a1 + 8), (uint64_t)(a1 + 1));
        goto LABEL_16;
      }
    }
    else
    {
      v14 = *(_DWORD *)(v13 + 8240);
    }
    *((_DWORD *)v11 + 165) = v14;
    v5 = mfs_CandidateList_SelectAndPrune_Obersee((uint64_t)&a1[v4 + 75], v14, *a1, (uint64_t)(a1 + 1));
    if ((v5 & 0x80000000) != 0)
      return v5;
LABEL_16:
    v4 += 10;
    ++v6;
  }
  while (v4 != 30);
  return v5;
}

uint64_t mfs_CostList_CompareNodesScore_faster(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a2 + 4);
  v4 = v2 > v3;
  if (v2 >= v3)
    v5 = 0;
  else
    v5 = -1;
  if (v4)
    return 1;
  else
    return v5;
}

uint64_t mfs_CostList_Init(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = 2229280778;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  *a2 = a1;
  v9 = a3;
  v10 = heap_Calloc(*(_QWORD **)(a1 + 8), a3, 32);
  a2[1] = v10;
  if (v10)
  {
    if (a3)
    {
      v11 = 0;
      v12 = 32 * v9;
      while (1)
      {
        v13 = heap_Calloc(*(_QWORD **)(a1 + 8), 2048, 8);
        v14 = a2[1];
        *(_QWORD *)(v14 + v11) = v13;
        if (!v13)
          break;
        v15 = v14 + v11;
        *(_QWORD *)(v15 + 16) = 0x80000000000;
        *(_DWORD *)(v15 + 24) = a4;
        *(_DWORD *)(v15 + 28) = 1;
        v11 += 32;
        if (v12 == v11)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v8 = 0;
      *((_DWORD *)a2 + 4) = a3;
    }
  }
  return v8;
}

_QWORD *mfs_CostList_DeInit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  v2 = result[1];
  if (v2)
  {
    if (*((_DWORD *)result + 4))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        heap_Free(*(_QWORD **)(*v1 + 8), *(_QWORD *)(v1[1] + v3));
        v5 = v1[1] + v3;
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          heap_Free(*(_QWORD **)(*v1 + 8), v6);
          *(_QWORD *)(v5 + 8) = 0;
        }
        ++v4;
        v3 += 32;
      }
      while (v4 < *((unsigned int *)v1 + 4));
      v2 = v1[1];
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v2);
    v1[1] = 0;
  }
  *((_DWORD *)v1 + 4) = 0;
  return result;
}

uint64_t mfs_CostList_IsNodeInList(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int InsertionPoint_0;
  int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v7 = *(_QWORD *)(a4 + 2384);
  v8 = *(_DWORD *)(a4 + 2392);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = a2;
  v11 = v9 + 32 * a2;
  *a5 = -1;
  if (v7)
  {
    if (!*(_DWORD *)(a4 + 2376))
      goto LABEL_11;
    if (mfs_isUnitRemoved(v7, a3))
      return 0;
    if (!*(_DWORD *)(a4 + 2376))
    {
LABEL_11:
      v16 = 0;
      v17 = v8 - 1;
      do
      {
        while (1)
        {
          v18 = (v17 + v16) >> 1;
          v19 = *(_DWORD *)(v7 + 4 * v18);
          if (v19 <= a3)
            break;
          if (v17 + v16 >= 2)
          {
            v17 = v18 - 1;
            if (v18 - 1 >= v16)
              continue;
          }
          goto LABEL_5;
        }
        if (v19 >= a3)
          return 0;
        v16 = v18 + 1;
      }
      while (v17 > v18);
    }
LABEL_5:
    InsertionPoint_0 = mfs_CostList_FindInsertionPoint_0((uint64_t *)v11, a3);
    if (InsertionPoint_0 >= *(_DWORD *)(v9 + 32 * v10 + 16))
      return 0;
    v14 = *(_DWORD *)(*(_QWORD *)v11 + 8 * InsertionPoint_0);
  }
  else
  {
    InsertionPoint_0 = mfs_CostList_FindInsertionPoint_0((uint64_t *)(v9 + 32 * a2), a3);
    if (InsertionPoint_0 >= *(_DWORD *)(v11 + 16))
      return 0;
    v14 = *(_DWORD *)(*(_QWORD *)v11 + 8 * InsertionPoint_0);
  }
  if (v14 == a3)
  {
    *a5 = InsertionPoint_0;
    return 1;
  }
  return 0;
}

uint64_t mfs_CostList_FindInsertionPoint_0(uint64_t *a1, unsigned int a2)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *((_DWORD *)a1 + 4);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v4 < 0 != v3)
    return 0;
  result = 0;
  v7 = *a1;
  while (1)
  {
    v8 = ((v4 + (int)result) >> 1);
    v9 = *(_DWORD *)(v7 + 8 * (int)v8);
    if (v9 >= a2)
    {
      if (v9 <= a2)
        return v8;
      v4 = v8 - 1;
    }
    else
    {
      result = (v8 + 1);
    }
    if ((int)result <= v4)
    {
      v8 = ((v4 + (int)result) >> 1);
      v10 = *(_DWORD *)(v7 + 8 * (int)v8);
      if (v10 >= a2)
      {
        if (v10 <= a2)
          return v8;
        v4 = v8 - 1;
      }
      else
      {
        result = (v8 + 1);
      }
      if ((int)result <= v4)
        break;
    }
LABEL_17:
    if ((int)result > v4)
      return result;
  }
  v8 = ((v4 + (int)result) >> 1);
  v11 = *(_DWORD *)(v7 + 8 * (int)v8);
  if (v11 < a2)
  {
    result = (v8 + 1);
    goto LABEL_17;
  }
  if (v11 > a2)
  {
    v4 = v8 - 1;
    goto LABEL_17;
  }
  return v8;
}

uint64_t mfs_CostList_Add(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, unsigned int *a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v19;
  unsigned int InsertionPoint_0;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v8 = 2229280769;
  v9 = a2[1];
  v10 = a3;
  v11 = v9 + 32 * a3;
  *a7 = -1;
  if (!*(_DWORD *)(v11 + 24))
  {
    if (a5)
    {
      v19 = *(_DWORD *)(*(_QWORD *)(a1 + 1072) + 8368);
      if (v19 == 1)
      {
        if (mfs_isUnitRemoved(a5, a4))
          return 0;
        v19 = *(_DWORD *)(*(_QWORD *)(a1 + 1072) + 8368);
      }
      if (!v19)
      {
        v32 = a6 - 1;
        do
        {
          while (1)
          {
            v33 = (v32 + v19) >> 1;
            v34 = *(_DWORD *)(a5 + 4 * v33);
            if (v34 <= a4)
              break;
            if (v32 + v19 >= 2)
            {
              v32 = v33 - 1;
              if (v33 - 1 >= v19)
                continue;
            }
            goto LABEL_8;
          }
          if (v34 >= a4)
            return 0;
          v19 = v33 + 1;
        }
        while (v32 > v33);
      }
    }
LABEL_8:
    InsertionPoint_0 = mfs_CostList_FindInsertionPoint_0((uint64_t *)v11, a4);
    v21 = InsertionPoint_0;
    v22 = v9 + 32 * v10;
    v24 = (unsigned int *)(v22 + 16);
    v23 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)v11;
    if (InsertionPoint_0 < v23 && *(_DWORD *)(v25 + 8 * InsertionPoint_0) == a4)
    {
      *a7 = InsertionPoint_0;
      return 2229280770;
    }
    else
    {
      v27 = *(_DWORD *)(v22 + 20);
      v26 = (unsigned int *)(v22 + 20);
      if (v27 == v23)
      {
        v28 = v23 + 64;
        *v26 = v28;
        v29 = heap_Realloc(*(uint64_t **)(*a2 + 8), v25, 8 * v28);
        *(_QWORD *)v11 = v29;
        if (!v29)
        {
          *v26 -= 64;
          return 2229280778;
        }
        v25 = v29;
        v23 = *v24;
      }
      v30 = v23 - v21;
      if (v30)
      {
        memmove((void *)(v25 + 8 * (v21 + 1)), (const void *)(v25 + 8 * v21), 8 * v30);
        v25 = *(_QWORD *)v11;
      }
      v8 = 0;
      v31 = v25 + 8 * v21;
      *(_DWORD *)v31 = a4;
      *(float *)(v31 + 4) = a8;
      *a7 = v21;
      ++*v24;
    }
  }
  return v8;
}

uint64_t mfs_CostList_Pad(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, _DWORD *a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v8 = 2229280769;
  v9 = a2[1];
  v10 = a3;
  v11 = v9 + 32 * a3;
  *a7 = -1;
  if (!*(_DWORD *)(v11 + 24))
  {
    if (a5)
    {
      v19 = *(_DWORD *)(*(_QWORD *)(a1 + 1072) + 8368);
      if (v19 == 1)
      {
        if (mfs_isUnitRemoved(a5, a4))
          return 0;
        v19 = *(_DWORD *)(*(_QWORD *)(a1 + 1072) + 8368);
      }
      if (!v19)
      {
        v28 = a6 - 1;
        do
        {
          while (1)
          {
            v29 = (v28 + v19) >> 1;
            v30 = *(_DWORD *)(a5 + 4 * v29);
            if (v30 <= a4)
              break;
            if (v28 + v19 >= 2)
            {
              v28 = v29 - 1;
              if (v29 - 1 >= v19)
                continue;
            }
            goto LABEL_8;
          }
          if (v30 >= a4)
            return 0;
          v19 = v29 + 1;
        }
        while (v28 > v29);
      }
    }
LABEL_8:
    v20 = v9 + 32 * v10;
    v23 = *(_DWORD *)(v20 + 16);
    v21 = (_DWORD *)(v20 + 16);
    v22 = v23;
    v24 = v21 + 1;
    v25 = *(_QWORD *)v11;
    if (v21[1] == v23
      && (*v24 = v22 + 64,
          v25 = heap_Realloc(*(uint64_t **)(*a2 + 8), v25, 8 * (v22 + 64)),
          (*(_QWORD *)v11 = v25) == 0))
    {
      *v24 -= 64;
      return 2229280778;
    }
    else
    {
      v8 = 0;
      v26 = v25 + 8 * v22;
      *(_DWORD *)v26 = a4;
      *(float *)(v26 + 4) = a8;
      *a7 = v22;
      ++*v21;
    }
  }
  return v8;
}

uint64_t mfs_ConcatTwoLists(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 8) + 32 * a4;
  v5 = (unsigned int *)(v4 + 16);
  v6 = *(_DWORD *)(v4 + 16);
  if (!v6)
    goto LABEL_6;
  v7 = a1[1];
  v8 = a2;
  v9 = v7 + 32 * a2;
  v10 = (_DWORD *)(v9 + 16);
  v11 = *(_DWORD *)(v9 + 16) + 2 * v6;
  v12 = (unsigned int *)(v9 + 20);
  if (v11 <= *(_DWORD *)(v9 + 20))
    goto LABEL_5;
  *v12 = v11;
  v13 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(_QWORD *)v9, 8 * v11);
  *(_QWORD *)v9 = v13;
  if (!v13)
  {
    *v12 -= v6;
    result = 2229280778;
    goto LABEL_8;
  }
  v6 = *v5;
  if (*v5)
  {
LABEL_5:
    memcpy((void *)(*(_QWORD *)v9 + 8 * *v10), *(const void **)v4, 8 * v6);
    result = 0;
    *v10 += *v5;
    *(_DWORD *)(v7 + 32 * v8 + 28) = 0;
  }
  else
  {
LABEL_6:
    result = 0;
  }
LABEL_8:
  *v5 = 0;
  return result;
}

uint64_t mfs_CostList_Sort(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  unsigned int v9;
  uint64_t (*v10)(unint64_t, unint64_t);

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2;
  v6 = v4 + 32 * a2;
  v7 = (_DWORD *)(v6 + 24);
  if (*(_DWORD *)(v6 + 24) == a3 && *(_DWORD *)(v6 + 28))
    return 0;
  if (!a3)
  {
    v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    if (v9)
    {
      v10 = (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesUid;
      goto LABEL_10;
    }
LABEL_11:
    result = 0;
    *v7 = a3;
    *(_DWORD *)(v4 + 32 * v5 + 28) = 1;
    return result;
  }
  if (a3 == 1)
  {
    v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    if (v9)
    {
      v10 = (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesScore_faster;
LABEL_10:
      ssft_qsort(*(_QWORD *)v6, v9, 8, v10);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  return 2229280769;
}

uint64_t mfs_CostList_CompareNodesUid(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t mfs_CostList_SelectAndPrune(_QWORD *a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  int v14;
  int v15;

  v7 = a1[1];
  v8 = a2;
  v9 = v7 + 32 * a2;
  if (*(_DWORD *)(v9 + 24) == a3 && *(_DWORD *)(v9 + 28))
    return 0;
  if (!a3)
  {
    v15 = *(_DWORD *)(v7 + 32 * a2 + 16);
    if (v15)
      mfs_CostList_QSelect(*(_QWORD *)v9, v15, 8, (uint64_t (*)(char *, char *))mfs_CostList_CompareNodesUid, a4);
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    v11 = v7 + 32 * a2;
    v14 = *(_DWORD *)(v11 + 16);
    v13 = (unsigned int *)(v11 + 16);
    v12 = v14;
    if (v14)
    {
      mfs_CostList_QSelect(*(_QWORD *)v9, v12, 8, (uint64_t (*)(char *, char *))mfs_CostList_CompareNodesScore_faster, a4);
      if (*v13 > a4)
        mfs_CostList_Prune(a1, a2, a4);
    }
LABEL_11:
    result = 0;
    *(_DWORD *)(v7 + 32 * v8 + 28) = 0;
    return result;
  }
  return 2229280769;
}

_QWORD *mfs_CostList_Prune(_QWORD *result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = a2;
  v4 = result[1] + 32 * a2;
  if (*(_DWORD *)(v4 + 16) > a3)
  {
    v5 = result;
    *(int32x2_t *)(v4 + 16) = vdup_n_s32(a3);
    result = (_QWORD *)heap_Realloc(*(uint64_t **)(*result + 8), *(_QWORD *)v4, 8 * a3);
    if (result)
      *(_QWORD *)v4 = result;
    v6 = v5[1] + 32 * v3;
    v9 = *(_QWORD *)(v6 + 8);
    v8 = (_QWORD *)(v6 + 8);
    v7 = v9;
    if (v9)
    {
      result = heap_Free(*(_QWORD **)(*v5 + 8), v7);
      *v8 = 0;
    }
  }
  return result;
}

uint64_t mfs_CostList_UpdateCost_inlined(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 32 * a2) + 8 * a3 + 4) = a4;
  return result;
}

uint64_t mfs_CostList_UpdateCostEnd_inlined(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8) + 32 * a2;
  if (*(_DWORD *)(v2 + 24) == 1)
    *(_DWORD *)(v2 + 28) = 0;
  return result;
}

uint64_t mfs_CostList_UpdateCost(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(result + 8) + 32 * a2;
  *(float *)(*(_QWORD *)v4 + 8 * a3 + 4) = a4;
  if (*(_DWORD *)(v4 + 24) == 1)
    *(_DWORD *)(v4 + 28) = 0;
  return result;
}

uint64_t mfs_CostList_HasUnit(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  uint64_t result;
  int v25;
  int v26;
  int v27;
  unsigned int v28;

  v3 = a1[1];
  v4 = v3 + 32 * a2;
  v6 = (_DWORD *)(v4 + 16);
  v5 = *(unsigned int *)(v4 + 16);
  if (!*(_DWORD *)(v4 + 16))
    return 0;
  if (!*(_DWORD *)(v4 + 24))
  {
    v17 = __OFSUB__((_DWORD)v5, 1);
    v18 = v5 - 1;
    if (v18 < 0 == v17)
    {
      v19 = 0;
      do
      {
        v20 = (v18 + v19) / 2;
        v21 = *(_DWORD *)(*(_QWORD *)v4 + 8 * v20);
        if (v21 >= a3)
        {
          if (v21 <= a3)
            return 1;
          v18 = v20 - 1;
        }
        else
        {
          v19 = v20 + 1;
        }
      }
      while (v19 <= v18);
    }
    return 0;
  }
  v8 = v3 + 32 * a2;
  v10 = *(_QWORD *)(v8 + 8);
  v9 = (uint64_t *)(v8 + 8);
  if (v10)
    goto LABEL_24;
  v11 = heap_Alloc(*(_QWORD *)(*a1 + 8), 4 * v5);
  *v9 = v11;
  v12 = *v6;
  if (v11)
  {
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *(int **)v4;
      do
      {
        v15 = *v14;
        v14 += 2;
        *(_DWORD *)(v11 + 4 * v13++) = v15;
        v16 = *v6;
      }
      while (v13 < v16);
    }
    else
    {
      v16 = 0;
    }
    ssft_qsort(v11, v16, 4, (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesUid);
    LODWORD(v5) = *v6;
LABEL_24:
    v17 = __OFSUB__((_DWORD)v5, 1);
    v25 = v5 - 1;
    if (v25 < 0 == v17)
    {
      v26 = 0;
      do
      {
        v27 = (v25 + v26) / 2;
        v28 = *(_DWORD *)(*v9 + 4 * v27);
        if (v28 >= a3)
        {
          if (v28 <= a3)
            return 1;
          v25 = v27 - 1;
        }
        else
        {
          v26 = v27 + 1;
        }
      }
      while (v26 <= v25);
    }
    return 0;
  }
  if (!(_DWORD)v12)
    return 0;
  v22 = *(int **)v4;
  while (1)
  {
    v23 = *v22;
    v22 += 2;
    if (v23 == a3)
      break;
    result = 0;
    if (!--v12)
      return result;
  }
  return 1;
}

_QWORD *mfs_CostList_FreeUidIndex(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result[1])
  {
    v1 = result;
    v2 = *((unsigned int *)result + 4);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8;
      do
      {
        v5 = v1[1];
        v6 = *(_QWORD *)(v5 + v4);
        if (v6)
        {
          result = heap_Free(*(_QWORD **)(*v1 + 8), v6);
          *(_QWORD *)(v5 + v4) = 0;
          v2 = *((unsigned int *)v1 + 4);
        }
        ++v3;
        v4 += 32;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t mfs_SplitFeatures(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  unsigned int *v61;
  uint64_t *v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;

  v8 = 2229280778;
  v9 = *(__int16 *)(a2 + 10);
  v10 = heap_Calloc(*(_QWORD **)(a1 + 8), v9, 4);
  if (!v10)
    return v8;
  v11 = (_DWORD *)v10;
  v12 = (_DWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), v9 + 1, 4);
  if (!v12)
  {
    v57 = *(_QWORD **)(a1 + 8);
    v58 = (uint64_t)v11;
LABEL_63:
    heap_Free(v57, v58);
    return v8;
  }
  v13 = (uint64_t)v12;
  v65 = a1;
  *v12 = 0;
  v14 = *(__int16 *)(a2 + 10);
  v61 = a4;
  v62 = a3;
  if (v14 < 1)
    goto LABEL_30;
  v15 = 0;
  v16 = *(unsigned __int16 **)(a2 + 1800);
  v17 = (__int16)(v14 + 1);
  v18 = v17 <= 2 ? 2 : v17;
  v19 = v12 + 1;
  v20 = v18 - 1;
  do
  {
    v21 = *v16++;
    v15 += v21;
    *v19++ = v15;
    --v20;
  }
  while (v20);
  if (v14 < 2)
  {
LABEL_30:
    v29 = 0;
    *v11 = 1;
    v36 = 2;
  }
  else
  {
    v22 = v12[1];
    v23 = 1;
    v64 = v11;
    do
    {
      v24 = v23 + 1;
      v25 = *(_DWORD *)(v13 + 4 * (v23 + 1));
      if (v25 << 16 > v22 << 16)
      {
        v26 = v23 - 1;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(a2 + 3512) + 32 * (__int16)v22) == 50)
          {
            MFS__log_select_Diag(a1, 2, (uint64_t)"PROSODY_DEBUG: MARKER_PROSODY detected at phoneme %d, phoneme value for previous phoneme is %d\n");
            if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + v26) != 1 && (_WORD)v23 != 1)
            {
              v27 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 152) + v26);
              v28 = v23 - 1;
              do
              {
                if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 152) + v28) != v27)
                  break;
                *(_BYTE *)(*(_QWORD *)(a2 + 296) + v28) = 2;
                *(_BYTE *)(*(_QWORD *)(a2 + 104) + v28) = 4;
                *(_BYTE *)(*(_QWORD *)(a2 + 152) + v28) = 1;
                *(_BYTE *)(*(_QWORD *)(a2 + 120) + v28) = 2;
                *(_BYTE *)(*(_QWORD *)(a2 + 136) + v28) = 1;
                *(_BYTE *)(*(_QWORD *)(a2 + 176) + v28--) = 2;
              }
              while (v28);
            }
          }
          LOWORD(v22) = v22 + 1;
          v25 = *(_DWORD *)(v13 + 4 * v24);
        }
        while ((__int16)v25 > (__int16)v22);
        LOWORD(v14) = *(_WORD *)(a2 + 10);
        v11 = v64;
      }
      v22 = v25;
      ++v23;
    }
    while (v24 < (__int16)v14);
    *v11 = 1;
    if ((__int16)v14 < 3)
    {
      v29 = 0;
      v36 = 2;
      v8 = 2229280778;
    }
    else
    {
      v29 = 0;
      v30 = (__int16)v14 - 1;
      v31 = *(_QWORD *)(a2 + 32);
      v32 = 1;
      v33 = 1;
      LOWORD(v34) = 1;
      v8 = 2229280778;
      do
      {
        v34 = (__int16)v34;
        if (*(_BYTE *)(v31 + (__int16)v34) == 1
          && *(_BYTE *)(v31 + v33 + 1) != 1
          && !*(_WORD *)(*(_QWORD *)(a2 + 1800) + 2 * v34))
        {
          v11[v29++] = v32 + 1;
        }
        v35 = v11[v29];
        v32 = v35 + 1;
        v11[v29] = v35 + 1;
        LOWORD(v34) = v34 + 1;
        v33 = (__int16)v34;
      }
      while (v30 > (__int16)v34);
      v36 = v35 + 2;
    }
  }
  v11[v29] = v36;
  v37 = v29 + 1;
  v38 = heap_Calloc(*(_QWORD **)(v65 + 8), (v29 + 1), 8);
  if (!v38)
  {
    heap_Free(*(_QWORD **)(v65 + 8), (uint64_t)v11);
    v57 = *(_QWORD **)(v65 + 8);
    v58 = v13;
    goto LABEL_63;
  }
  v39 = v38;
  if ((v29 - 1) > 0xFFFFFFFD)
  {
LABEL_60:
    heap_Free(*(_QWORD **)(v65 + 8), (uint64_t)v11);
    heap_Free(*(_QWORD **)(v65 + 8), v13);
    v8 = 0;
    *v61 = v37;
    *v62 = v39;
  }
  else
  {
    v40 = 0;
    v63 = 0;
    if (v37 <= 1)
      v41 = 1;
    else
      v41 = v37;
    v60 = v41;
    while (1)
    {
      v42 = (void *)heap_Calloc(*(_QWORD **)(v65 + 8), 1, 3656);
      *(_QWORD *)(v39 + 8 * v40) = v42;
      if (!v42)
        break;
      bzero(v42, 0xE48uLL);
      v43 = 0;
      v44 = *(_QWORD *)(v39 + 8 * v40);
      *(_QWORD *)v44 = *(_QWORD *)a2;
      v45 = v40 * *(unsigned __int16 *)(*(_QWORD *)a2 + 3360);
      *(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 3584) = *(_QWORD *)(a2 + 3584) + 4 * v45;
      v46 = v11[v40];
      *(_WORD *)(v44 + 10) = v46;
      *(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 3592) = *(_QWORD *)(a2 + 3592) + 4 * v45;
      do
      {
        v47 = a2 + 8 * v43;
        v49 = *(_QWORD *)(v47 + 16);
        v48 = (_QWORD *)(v47 + 16);
        if (v49)
        {
          *(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 8 * v43 + 16) = heap_Calloc(*(_QWORD **)(v65 + 8), v46, 1);
          if (!*(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 8 * v43 + 16))
            goto LABEL_64;
        }
        else if (*(_QWORD *)(a2 + 8 * v43 + 1760))
        {
          *(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 8 * v43 + 1760) = heap_Calloc(*(_QWORD **)(v65 + 8), v46, 2);
          if (!*(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 8 * v43 + 1760))
            goto LABEL_64;
        }
        v46 = v11[v40];
        if ((_DWORD)v46)
        {
          v50 = 0;
          v51 = (_QWORD *)(a2 + 8 * v43 + 1760);
          do
          {
            if (*v48)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 8 * v43 + 16) + v50) = *(_BYTE *)(*v48
                                                                                                  + v63
                                                                                                  + v50);
              v46 = v11[v40];
            }
            else if (*v51)
            {
              *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8 * v40) + 8 * v43 + 1760) + 2 * v50) = *(_WORD *)(*v51 + 2 * (v63 + v50));
            }
            ++v50;
          }
          while (v50 < v46);
        }
        else
        {
          v46 = 0;
        }
        ++v43;
      }
      while (v43 != 218);
      v52 = *(_QWORD *)(v39 + 8 * v40);
      *(_DWORD *)(v52 + 3520) = 0;
      if (v11[v40])
      {
        v53 = 0;
        v54 = 0;
        v55 = *(_QWORD *)(v52 + 1800);
        do
        {
          v53 += *(unsigned __int16 *)(v55 + 2 * v54);
          *(_DWORD *)(v52 + 3520) = v53;
          ++v54;
          v56 = v11[v40];
        }
        while (v54 < v56);
      }
      else
      {
        LODWORD(v56) = 0;
      }
      *(_QWORD *)(v52 + 3512) = *(_QWORD *)(a2 + 3512) + 32 * *(unsigned int *)(v13 + 4 * v63);
      v63 = v63 + v56 - 1;
      if (++v40 == v60)
        goto LABEL_60;
    }
LABEL_64:
    heap_Free(*(_QWORD **)(v65 + 8), (uint64_t)v11);
    heap_Free(*(_QWORD **)(v65 + 8), v13);
    mfs_FreeSplitFeatures(v65, v39, v37);
    return 2229280778;
  }
  return v8;
}

_QWORD *mfs_FreeSplitFeatures(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a3 >= 2)
  {
    v5 = 0;
    v6 = a3;
    do
    {
      if (*(_QWORD *)(a2 + 8 * v5))
      {
        for (i = 1760; i != 3504; i += 8)
        {
          v8 = *(_QWORD *)(a2 + 8 * v5);
          v9 = *(_QWORD *)(v8 + i - 1744);
          if (v9)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v9);
            v8 = *(_QWORD *)(a2 + 8 * v5);
          }
          v10 = *(_QWORD *)(v8 + i);
          if (v10)
            heap_Free(*(_QWORD **)(a1 + 8), v10);
        }
        v11 = *(_QWORD *)(a2 + 8 * v5);
      }
      else
      {
        v11 = 0;
      }
      heap_Free(*(_QWORD **)(a1 + 8), v11);
      ++v5;
    }
    while (v5 != v6);
  }
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

uint64_t mfs_ParamMap_MapSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  int v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  float v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  char v47;
  _DWORD *v48;
  int *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  unsigned int v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;

  v12 = *(unsigned int *)(a5 + 4);
  v13 = *(unsigned __int16 *)(a5 + 8);
  v14 = *(_QWORD *)(a2 + 1072);
  v15 = *(_DWORD *)(v14 + 8280);
  if (v15 == 1 && *(_DWORD *)(v14 + 25288) == 1)
  {
    v83 = a1;
    v84 = (_DWORD *)a7;
    goto LABEL_12;
  }
  if ((v12 + v13) <= *(_DWORD *)(a2 + 1544))
  {
    v18 = v15 != 1 && *(_QWORD *)(a2 + 12440) == 0;
    v84 = (_DWORD *)a7;
    if (!v18)
    {
      v83 = a1;
LABEL_12:
      v88 = *(_DWORD *)(a5 + 4);
      v87 = (uint64_t *)(a2 + 12440);
      v19 = 0;
      v85 = (_BYTE *)(a2 + 12456);
      v81 = a4;
      do
      {
        v20 = *(_QWORD *)(a2 + 1072);
        v21 = *(_DWORD *)(v20 + 4 * v19 + 224);
        if (v21)
        {
          if (v21 == 2 && *(_DWORD *)(v20 + 8280) == 1)
          {
            v23 = 0;
            v24 = v13;
          }
          else
          {
            v23 = *(_DWORD *)(v20 + 4 * v19 + 264);
            v24 = v23 * v13;
          }
          v26 = (4 * v24);
          v27 = a3 + 4 * v19;
          if (*(_DWORD *)(v27 + 2528) < (4 * v24))
          {
            v28 = a3 + 8 * v19;
            v29 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a3 + 1928) + 8), *(_QWORD *)(v28 + 2448), v26);
            *(_QWORD *)(v28 + 2448) = v29;
            if (!v29)
              return 2229280778;
            *(_DWORD *)(v27 + 2528) = v26;
            v20 = *(_QWORD *)(a2 + 1072);
          }
          if (*(_DWORD *)(v20 + 25288) && *(_DWORD *)(v20 + 4 * v19 + 224) == 1)
          {
            bzero(*(void **)(a3 + 8 * v19 + 2448), v26);
          }
          else if (*(_DWORD *)(v20 + 8280) == 1 && *(_DWORD *)(v20 + 4 * v19 + 224) == 2)
          {
            if (*(_DWORD *)(a3 + 2064) == 2)
            {
              if ((_DWORD)v13)
              {
                v30 = *(float **)(a3 + 8 * v19 + 2448);
                v31 = *(_QWORD *)(v20 + 18104);
                bzero(v30, 4 * v13);
                v32 = v31 + 12 * v81;
                v33 = *(unsigned __int16 *)(v32 + 6);
                v34 = -1.0e10;
                if (v33 != 256)
                  v34 = (float)((float)v33 / *(float *)(v20 + 8752)) + *(float *)(v20 + 8672);
                v35 = *(_DWORD *)v32;
                v36 = -1.0e10;
                if (v35 != 0x10000)
                  v36 = (float)((float)v35 / *(float *)(v20 + 8752)) + *(float *)(v20 + 8672);
                *v30 = v34;
                v30[(v13 - 1)] = v36;
              }
            }
            else
            {
              MFS__log_select_Error(v83, 0, (uint64_t)"decoding LF0 only works with MCP_S9__LF0_S8_X2B, but now is %d \n", a4, a5, a6, a7, a8);
            }
          }
          else if ((_DWORD)v13)
          {
            v37 = 0;
            v38 = 0;
            v39 = *(_QWORD *)(a3 + 8 * v19 + 2448);
            v40 = *(_DWORD *)(v20 + 4 * v19 + 224);
            do
            {
              if (v40 == 2)
              {
                if (!*v85)
                {
                  v16 = 2229280775;
                  v17 = "Invalid VQ unitparams data, 0 codebook found!\n";
                  a1 = v83;
                  goto LABEL_6;
                }
                v41 = *v85 - 1;
                if (v23)
                  goto LABEL_43;
              }
              else
              {
                v41 = 0;
                if (v23)
                {
LABEL_43:
                  v42 = 0;
                  v43 = (v88 + v38);
                  v44 = *v87;
                  do
                  {
                    v45 = *(unsigned __int8 *)(v44 + 24 * v41 + 4);
                    if (v45 == 2)
                    {
                      v46 = *(unsigned __int16 *)(*(_QWORD *)(v44 + 24 * v41 + 16) + 2 * v43);
                    }
                    else
                    {
                      if (v45 != 1)
                      {
                        MFS__log_select_Error(0, 0, (uint64_t)"Error: %d Bytes Codebook not supported!\n", a4, a5, a6, a7, a8);
                        return 2229280772;
                      }
                      v46 = *(unsigned __int8 *)(*(_QWORD *)(v44 + 24 * v41 + 16) + v43);
                    }
                    v47 = *(_BYTE *)(v44 + 24 * v41 + 5);
                    if (v47)
                    {
                      v48 = (_DWORD *)(v39 + 4 * (v37 + v42));
                      v49 = (int *)(*(_QWORD *)(v44 + 24 * v41 + 8)
                                  + 4 * v46 * (unint64_t)*(unsigned __int8 *)(v44 + 24 * v41 + 5));
                      v50 = *(unsigned __int8 *)(v44 + 24 * v41 + 5);
                      do
                      {
                        v51 = *v49++;
                        *v48++ = v51;
                        --v50;
                      }
                      while (v50);
                    }
                    ++v41;
                    v42 = (v47 + v42);
                  }
                  while (v23 > v42);
                }
              }
              ++v38;
              v37 += v23;
            }
            while (v38 != v13);
          }
          v25 = *(_QWORD *)(a3 + 8 * v19 + 2448);
        }
        else
        {
          v25 = 0;
        }
        *(_QWORD *)(a6 + 8 * v19++) = v25;
      }
      while (v19 != 10);
      goto LABEL_95;
    }
    if (*(_QWORD *)(a2 + 1256))
    {
      v52 = 0;
      v53 = 0;
      v16 = 0;
      v54 = (uint64_t *)(a3 + 2296);
      while (1)
      {
        v55 = *(_QWORD *)(a2 + 8 * v52 + 1224);
        if (v55)
        {
          v56 = v55 + 4 * (*(_DWORD *)(*(_QWORD *)(a2 + 1072) + v52 + 264) * v12);
        }
        else
        {
          v57 = *(v54 - 1);
          if (!v57)
          {
            *(_QWORD *)(a6 + v53) = 0;
            goto LABEL_68;
          }
          v91 = 0;
          v58 = *(_QWORD *)(a2 + 1072);
          v91 = 4 * v13 * *(_DWORD *)(v58 + v52 + 264);
          if (*v54)
          {
            brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a3 + 1928) + 24), v57, *v54);
            *v54 = 0;
            v57 = *(v54 - 1);
            v58 = *(_QWORD *)(a2 + 1072);
          }
          v16 = brk_DataMapEx(*(_QWORD *)(*(_QWORD *)(a3 + 1928) + 24), v57, (*(_DWORD *)(a2 + 4 * v53 + 1232) + 4 * v12 * *(_DWORD *)(v58 + v52 + 264)), (uint64_t)&v91, (uint64_t)v54);
          v56 = *v54;
        }
        *(_QWORD *)(a6 + v53) = v56;
LABEL_68:
        v53 += 8;
        v52 += 4;
        v54 += 2;
        if (v52 == 40)
          goto LABEL_96;
      }
    }
    if (!*(_QWORD *)(a2 + 1280))
    {
LABEL_95:
      v16 = 0;
LABEL_96:
      *v84 = v13;
      return v16;
    }
    v59 = 0;
    v16 = 0;
    v82 = 2 * v12;
    while (1)
    {
      v60 = *(_QWORD *)(a2 + 32 * v59 + 1240);
      if (v60)
      {
        v61 = v60 + 2 * (*(_DWORD *)(*(_QWORD *)(a2 + 1072) + 4 * v59 + 264) * v12);
        if (v61)
          goto LABEL_80;
      }
      else
      {
        v62 = a3 + 16 * v59;
        v63 = *(_QWORD *)(v62 + 2288);
        if (v63)
        {
          v90 = 0;
          v64 = *(_QWORD *)(a2 + 1072);
          v90 = 2 * v13 * *(_DWORD *)(v64 + 4 * v59 + 264);
          v65 = (uint64_t *)(v62 + 2296);
          v66 = *(_QWORD *)(v62 + 2296);
          if (v66)
          {
            v67 = v12;
            v68 = (uint64_t *)(v62 + 2288);
            brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a3 + 1928) + 24), v63, v66);
            *v65 = 0;
            v63 = *v68;
            v12 = v67;
            v64 = *(_QWORD *)(a2 + 1072);
          }
          v16 = brk_DataMapEx(*(_QWORD *)(*(_QWORD *)(a3 + 1928) + 24), v63, (*(_DWORD *)(a2 + 32 * v59 + 1232) + v82 * *(_DWORD *)(v64 + 4 * v59 + 264)), (uint64_t)&v90, (uint64_t)v65);
          v61 = *v65;
          if (*v65)
          {
LABEL_80:
            v89 = v16;
            v69 = (4 * v13 * *(_DWORD *)(*(_QWORD *)(a2 + 1072) + 4 * v59 + 264));
            v70 = a3 + 4 * v59;
            if (*(_DWORD *)(v70 + 2528) < v69)
            {
              v86 = a3 + 8 * v59;
              v71 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a3 + 1928) + 8), *(_QWORD *)(v86 + 2448), v69);
              *(_QWORD *)(v86 + 2448) = v71;
              if (!v71)
                return 2229280778;
              *(_DWORD *)(v70 + 2528) = v69;
            }
            v16 = v89;
            if ((_DWORD)v13)
            {
              v72 = 0;
              v73 = 0;
              v74 = *(unsigned int *)(*(_QWORD *)(a2 + 1072) + 4 * v59 + 264);
              v75 = *(_DWORD *)(*(_QWORD *)(a2 + 1072) + 4 * v59 + 264);
              do
              {
                if ((int)v74 >= 1)
                {
                  v76 = 0;
                  v77 = *(_QWORD *)(a3 + 8 * v59 + 2448) + v72;
                  do
                  {
                    v78 = -1.0e10;
                    if (*(_WORD *)(v61 + 2 * v76))
                      v78 = *(float *)(*(_QWORD *)(a2 + 32 * v59 + 1248)
                                     + 4 * (v76 + 2 * *(unsigned __int16 *)(a5 + 10) * (uint64_t)v75))
                          + (float)((float)*(unsigned __int16 *)(v61 + 2 * v76)
                                  * *(float *)(*(_QWORD *)(a2 + 32 * v59 + 1248)
                                             + 4 * (v76 + ((2 * *(unsigned __int16 *)(a5 + 10)) | 1) * (int)v74)));
                    *(float *)(v77 + 4 * v76++) = v78;
                  }
                  while (v74 != v76);
                }
                ++v73;
                v72 += 4 * (int)v74;
                v61 += 2 * (int)v74;
              }
              while (v73 != v13);
            }
            v79 = *(_QWORD *)(a3 + 8 * v59 + 2448);
            goto LABEL_93;
          }
        }
      }
      v79 = 0;
LABEL_93:
      *(_QWORD *)(a6 + 8 * v59++) = v79;
      if (v59 == 10)
        goto LABEL_96;
    }
  }
  v16 = 2229280775;
  v17 = "Data Corrupt: Offset out of map file, %lu + %hu > %lu\n";
LABEL_6:
  MFS__log_select_Error(a1, 58012, (uint64_t)v17, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t mfs_ParamMap_UnMapSection(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  for (i = 0; i != 160; i += 16)
  {
    v3 = v1 + i;
    v4 = *(_QWORD *)(v1 + i + 2296);
    if (v4)
    {
      result = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(v1 + 1928) + 24), *(_QWORD *)(v3 + 2288), v4);
      *(_QWORD *)(v3 + 2296) = 0;
    }
  }
  return result;
}

uint64_t mfs_ParamMap_GetAcousticVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  float *v30;
  float v31;
  float v32;
  char v33;
  float v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  float *v42;
  float v43;
  float v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  float v52;
  int v53;
  int v54;
  float v55;
  unsigned int v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  int v60;
  uint64_t v61;
  _DWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD v67[2];

  v12 = *(_QWORD *)(a2 + 1072);
  v67[0] = 0;
  v67[1] = 0;
  v66 = v67;
  mfs_getUnitDataFromMfsData((unsigned __int8 *)a2, a4, (uint64_t *)&v66);
  v14 = *(_DWORD *)(a3 + 2064);
  if (v14 == 1)
  {
    v16 = *(uint64_t **)(a3 + 2040);
    if (v16 && (v17 = *(unsigned int *)(a3 + 2068), (_DWORD)v17 != 20000))
    {
      v19 = *v16;
    }
    else
    {
      v15 = 2229280778;
      v18 = heap_Calloc(*(_QWORD **)(a1 + 8), 20000, 8);
      if (!v18)
        return v15;
      v19 = v18;
      v20 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16);
      if (!v20)
        goto LABEL_34;
      v17 = 0;
      *v20 = v19;
      v20[1] = *(_QWORD *)(a3 + 2040);
      *(_QWORD *)(a3 + 2040) = v20;
      *(_DWORD *)(a3 + 2068) = 0;
    }
    v15 = mfs_ParamMap_MapSection(a1, a2, a3, a4, (uint64_t)v66, a5, (uint64_t)a6, v13);
    if ((v15 & 0x80000000) != 0)
      return v15;
    v25 = v19 + 8 * v17;
    v26 = *((int *)v66 + 1);
    v27 = *a6;
    v28 = v26 + *((unsigned __int16 *)v66 + 4) - 1;
    v29 = *(_QWORD *)(a2 + 2096);
    *(_WORD *)(v25 + 4) = *(_WORD *)(v29 + 2 * v26);
    *(_WORD *)(v25 + 6) = *(_WORD *)(v29 + 2 * v28);
    v30 = *(float **)(a5 + 16);
    v31 = *v30;
    v32 = *v30;
    if (v27 >= 2)
      v32 = v30[v27 - 1];
    if (v31 <= 0.0)
    {
      v33 = 1;
    }
    else
    {
      v33 = 0;
      v34 = *(float *)(v12 + 8672);
      if (v31 < v34)
        v31 = *(float *)(v12 + 8672);
      if (v31 > *(float *)(v12 + 8712))
        v31 = *(float *)(v12 + 8712);
      *(_BYTE *)(v19 + 8 * v17 + 2) = (float)((float)((float)(v31 - v34) * *(float *)(v12 + 8752)) + 0.5);
    }
    *(_BYTE *)v25 = v33;
    if (v32 <= 0.0)
    {
      v51 = 1;
    }
    else
    {
      v51 = 0;
      v52 = *(float *)(v12 + 8672);
      if (v32 < v52)
        v32 = *(float *)(v12 + 8672);
      if (v32 > *(float *)(v12 + 8712))
        v32 = *(float *)(v12 + 8712);
      *(_BYTE *)(v19 + 8 * v17 + 3) = (float)((float)((float)(v32 - v52) * *(float *)(v12 + 8752)) + 0.5);
    }
    *(_BYTE *)(v19 + 8 * v17 + 1) = v51;
    *(_QWORD *)(*(_QWORD *)(a3 + 2048) + 8 * (int)a4) = v25;
LABEL_57:
    ++*(_DWORD *)(a3 + 2068);
    return v15;
  }
  if (v14 != 2)
  {
    v21 = *(uint64_t **)(a3 + 2024);
    if (v21)
    {
      v22 = *(_DWORD *)(a3 + 2068);
      if (v22 != 20000)
      {
        v19 = *v21;
LABEL_25:
        v64 = v22;
        v65 = v19;
        v35 = v19 + 24 * v22;
        *(_DWORD *)(v35 + 8) = 0;
        v36 = (_DWORD *)(v35 + 8);
        v63 = (_DWORD *)v35;
        *(_DWORD *)(v35 + 4) = 0;
        v37 = (_DWORD *)(v35 + 4);
        v15 = mfs_ParamMap_MapSection(a1, a2, a3, a4, (uint64_t)v66, a5, (uint64_t)a6, v13);
        if ((v15 & 0x80000000) != 0)
          return v15;
        v38 = *((int *)v66 + 1);
        v39 = v38 + *((unsigned __int16 *)v66 + 4) - 1;
        v40 = *(_QWORD *)(a2 + 2096);
        v41 = *(unsigned __int16 *)(v40 + 2 * v38);
        v42 = *(float **)(a5 + 16);
        v43 = *v42;
        v44 = *v42;
        if (*a6 >= 2)
          v44 = v42[*a6 - 1];
        v45 = *v36 & 0xFFFFC003;
        v46 = *(unsigned __int16 *)(v40 + 2 * v39);
        v47 = *v37 & 0xFFFFC003 | (4 * v41);
        if (v43 <= 0.0)
        {
          v53 = v47 | 2;
          *v37 = v53;
          v50 = v64;
          if (!*(_DWORD *)(v12 + 8392))
            goto LABEL_45;
          v49 = v53 & 0xFF803FFF | (*(_DWORD *)(v12 + 8396) << 14);
        }
        else
        {
          v48 = *(float *)(v12 + 8672);
          if (v43 < v48)
            v43 = *(float *)(v12 + 8672);
          if (v43 > *(float *)(v12 + 8712))
            v43 = *(float *)(v12 + 8712);
          v49 = v47 & 0xFF803FFD | ((float)((float)((float)(v43 - v48) * *(float *)(v12 + 8752)) + 0.5) << 14);
          v50 = v64;
        }
        *v37 = v49;
LABEL_45:
        v54 = v45 | (4 * v46);
        if (v44 <= 0.0)
        {
          v59 = v54 | 2;
          *v36 = v59;
          v57 = v65;
          v58 = v63;
          if (!*(_DWORD *)(v12 + 8392))
          {
LABEL_56:
            v60 = *(_DWORD *)(a3 + 2060) & a4;
            *v58 = a4;
            v61 = *(_QWORD *)(a3 + 2032);
            *(_QWORD *)(v57 + 24 * v50 + 16) = *(_QWORD *)(v61 + 8 * v60);
            *(_QWORD *)(v61 + 8 * v60) = v58;
            goto LABEL_57;
          }
          v56 = v59 & 0xFF803FFF | (*(_DWORD *)(v12 + 8396) << 14);
        }
        else
        {
          v55 = *(float *)(v12 + 8672);
          if (v44 < v55)
            v44 = *(float *)(v12 + 8672);
          if (v44 > *(float *)(v12 + 8712))
            v44 = *(float *)(v12 + 8712);
          v56 = v54 & 0xFF803FFD | ((float)((float)((float)(v44 - v55) * *(float *)(v12 + 8752)) + 0.5) << 14);
          v57 = v65;
          v58 = v63;
        }
        *v36 = v56;
        goto LABEL_56;
      }
    }
    v15 = 2229280778;
    v23 = heap_Calloc(*(_QWORD **)(a1 + 8), 20000, 24);
    if (!v23)
      return v15;
    v19 = v23;
    v24 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16);
    if (v24)
    {
      v22 = 0;
      *v24 = v19;
      v24[1] = *(_QWORD *)(a3 + 2024);
      *(_QWORD *)(a3 + 2024) = v24;
      *(_DWORD *)(a3 + 2068) = 0;
      goto LABEL_25;
    }
LABEL_34:
    heap_Free(*(_QWORD **)(a1 + 8), v19);
    return v15;
  }
  return mfs_ParamMap_MapSection(a1, a2, a3, a4, (uint64_t)v66, a5, (uint64_t)a6, v13);
}

uint64_t mfs_Stub_ParamMap_GetAcousticVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int *a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v44;
  _QWORD *v45;
  _QWORD v46[2];

  v14 = *(_QWORD *)(a2 + 1072);
  v46[0] = 0;
  v46[1] = 0;
  v45 = v46;
  mfs_getUnitDataFromMfsData((unsigned __int8 *)a2, a4, (uint64_t *)&v45);
  if (!*(_QWORD *)(a2 + 2104))
    return mfs_ParamMap_GetAcousticVector(a1, a2, a3, a4, a5, a7);
  v15 = *((unsigned int *)v45 + 1);
  v16 = *a7;
  v17 = *((unsigned __int16 *)v45 + 4);
  if (!*a7)
  {
    *a7 = v17;
    v16 = v17;
  }
  v44 = v17;
  if (a6 == 1)
  {
    if ((_DWORD)v15)
      v18 = v15 - 1;
    else
      v18 = 0;
    v16 += 2;
    *a7 = v16;
  }
  else
  {
    v18 = v15;
  }
  v19 = 2229280778;
  if (*(_DWORD *)(a3 + 2536) < v16)
  {
    v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a3 + 2464), 4 * (int)(v16 + 50));
    *(_QWORD *)(a3 + 2464) = v20;
    if (!v20)
      return v19;
    *(_DWORD *)(a3 + 2536) = *a7 + 50;
    v16 = *a7;
  }
  if (v16)
  {
    v21 = 0;
    v22 = *(_DWORD *)(v14 + 8396);
    v23 = *(_QWORD *)(a2 + 2104);
    v24 = *(_QWORD *)(a3 + 2464);
    do
    {
      v25 = *(unsigned __int16 *)(v23 + 2 * (v18 + v21));
      v26 = -1.0e10;
      if (v22 != v25)
        v26 = (float)((float)v25 / *(float *)(v14 + 8752)) + *(float *)(v14 + 8672);
      *(float *)(v24 + 4 * v21++) = v26;
    }
    while (v16 != v21);
  }
  else
  {
    v24 = *(_QWORD *)(a3 + 2464);
  }
  *(_QWORD *)(a5 + 16) = v24;
  v27 = *(uint64_t **)(a3 + 2024);
  if (v27 && (v28 = *(_DWORD *)(a3 + 2068), v28 != 20000))
  {
    v30 = *v27;
  }
  else
  {
    v29 = heap_Calloc(*(_QWORD **)(a1 + 8), 20000, 24);
    if (!v29)
      return v19;
    v30 = v29;
    v31 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16);
    if (!v31)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v30);
      return v19;
    }
    v28 = 0;
    *v31 = v30;
    v31[1] = *(_QWORD *)(a3 + 2024);
    *(_QWORD *)(a3 + 2024) = v31;
    *(_DWORD *)(a3 + 2068) = 0;
  }
  v32 = v15 + v44 - 1;
  v33 = (_DWORD *)(v30 + 24 * v28);
  v34 = *(_QWORD *)(a2 + 2096);
  v35 = *(_QWORD *)(a2 + 2104);
  v36 = *(unsigned __int16 *)(v35 + 2 * v32);
  v37 = (4 * (*(_WORD *)(v34 + 2 * v32) & 0xFFF)) | (v36 << 14);
  v33[2] = v37;
  v38 = *(unsigned __int16 *)(v35 + 2 * v15);
  v39 = (4 * (*(_WORD *)(v34 + 2 * v15) & 0xFFF)) | (v38 << 14);
  v33[1] = v39;
  v40 = *(_DWORD *)(v14 + 8396);
  if (v40 == v38)
    v33[1] = v39 | 2;
  if (v40 == v36)
    v33[2] = v37 | 2;
  v19 = 0;
  v41 = *(_DWORD *)(a3 + 2060) & a4;
  *v33 = a4;
  v42 = *(_QWORD *)(a3 + 2032);
  *(_QWORD *)(v30 + 24 * v28 + 16) = *(_QWORD *)(v42 + 8 * v41);
  *(_QWORD *)(v42 + 8 * v41) = v33;
  *(_DWORD *)(a3 + 2068) = v28 + 1;
  return v19;
}

uint64_t fastallo_AllocateMemoryFromChunk(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t result;
  int v13;

  v6 = *(unsigned __int16 *)(a1 + 10);
  if (v6 >= a2)
  {
    result = *(_QWORD *)(a1 + 32);
    goto LABEL_10;
  }
  v8 = *(unsigned int *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 16);
  if (*(_WORD *)(a1 + 10))
  {
    v9 = a1 + ((v6 + 7) & 0x1FFF8);
    v10 = *(_QWORD **)(a1 + 32);
    *v10 = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
  }
  if (v8 >= v7)
  {
    v11 = v7 + 64;
    result = heap_Realloc(*(uint64_t **)a1, *(_QWORD *)(a1 + 24), 8 * (v7 + 64));
    if (!result)
    {
LABEL_11:
      v13 = -2065686518;
      goto LABEL_12;
    }
    *(_DWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = result;
  }
  result = heap_Alloc(*(_QWORD *)a1, *(unsigned __int16 *)(a1 + 8));
  if (!result)
    goto LABEL_11;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v8) = result;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  v6 = *(unsigned __int16 *)(a1 + 8) >> 3;
LABEL_10:
  v13 = 0;
  *(_WORD *)(a1 + 10) = v6 - a2;
  *(_QWORD *)(a1 + 32) = result + 8 * a2;
LABEL_12:
  *a3 = v13;
  return result;
}

void fastallo_Init(_WORD *a1, uint64_t a2, __int16 a3)
{
  bzero(a1, 0x230uLL);
  a1[4] = a3;
  *(_QWORD *)a1 = a2;
}

_QWORD *fastallo_Terminate(_QWORD *result)
{
  _QWORD **v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD **)result;
  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      result = heap_Free(*v1, v1[3][v3 / 8]);
      v3 += 8;
    }
    while (v4 != v3);
  }
  v5 = (uint64_t)v1[3];
  if (v5)
    return heap_Free(*v1, v5);
  return result;
}

uint64_t fastallo_GetUsedMemory(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) * *(unsigned __int16 *)(a1 + 8) + 8 * *(_DWORD *)(a1 + 16);
}

uint64_t mfs_Psola_CalculateAdjustments(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int AccPhrType;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t i;
  float v39;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  float *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int AcousticVector;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v70;
  uint64_t v71;
  signed int v72;
  unint64_t v73;
  unint64_t v75;
  int32x2_t *v76;
  int32x2_t *v77;
  __int32 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  _DWORD *v86;
  int v87;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  float v102;
  int v103;
  float v104;
  float v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  _BOOL4 v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  _DWORD *v117;
  float v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  const char *v126;
  unsigned int v127;
  const char *v128;
  const char *v129;
  unint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  int v137;
  int *v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v4 = 2229280778;
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 134);
  v7 = a2 + 2248;
  AccPhrType = accphr_getAccPhrType(a2 + 2248);
  v145 = *(_DWORD *)(v6 + 24);
  v151 = 0;
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  v152 = 0u;
  v9 = heap_Calloc(*(_QWORD **)(v5 + 8), (*a1 * *(_DWORD *)(a2 + 608)), 4);
  if (!v9)
    return v4;
  v10 = (_DWORD *)v9;
  v11 = heap_Calloc(*(_QWORD **)(v5 + 8), (*a1 * *(_DWORD *)(a2 + 608)), 4);
  if (!v11)
  {
    v35 = (uint64_t)v10;
    goto LABEL_228;
  }
  v137 = AccPhrType;
  v144 = -2065686518;
  v12 = (int *)(v6 + 25184);
  v13 = *(_DWORD *)(a2 + 608);
  LODWORD(v14) = *a1;
  v15 = (*a1 * v13);
  v16 = (_DWORD *)v11;
  if ((*(_DWORD *)(v6 + 25184) & 0xFFFFFFFE) == 2 && (v17 = *(_DWORD *)(a2 + 32), v17 >= 1))
  {
    v18 = 0;
    v19 = 0;
    v20 = *(_QWORD *)(a2 + 24);
    do
    {
      if (*(_DWORD *)(v20 + 1528 * v18 + 1480))
        v21 = v13 < 1;
      else
        v21 = 1;
      if (!v21)
      {
        v22 = 0;
        v23 = 0;
        v24 = *(_QWORD *)(a2 + 600);
        do
        {
          if ((int)v14 >= 1)
          {
            v25 = 0;
            v26 = *(_QWORD *)(v24 + 528 * v22 + 328) + 8;
            do
            {
              v27 = *(_DWORD *)(v26 + 4 * v25);
              v10[v23 + v25] = v27;
              v19 += v27;
              v14 = *a1;
              v28 = v25 + 2;
              ++v25;
            }
            while (v28 <= v14);
            v23 += v25;
            v13 = *(_DWORD *)(a2 + 608);
          }
          ++v22;
        }
        while (v22 < v13);
        v17 = *(_DWORD *)(a2 + 32);
      }
      ++v18;
    }
    while (v18 < v17);
  }
  else
  {
    v19 = 0;
  }
  v29 = heap_Calloc(*(_QWORD **)(v5 + 8), v15, 40);
  *(_QWORD *)(a2 + 2656) = v29;
  if (!v29 || (v141 = heap_Calloc(*(_QWORD **)(v5 + 8), v15, 4)) == 0)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_222;
  }
  v139 = heap_Calloc(*(_QWORD **)(v5 + 8), v15, 4);
  if (!v139)
  {
    v33 = 0;
    v34 = 0;
    v140 = 0;
    v36 = v141;
    goto LABEL_221;
  }
  v30 = *v12;
  if (*v12 == 2)
  {
    if (!*(_DWORD *)(v6 + 25188))
    {
      v32 = 0;
      v36 = v139;
      v37 = v145;
      goto LABEL_72;
    }
    v31 = heap_Calloc(*(_QWORD **)(v5 + 8), v15, 1);
    if (!v31)
    {
      v33 = 0;
      v34 = 0;
      v140 = 0;
      v36 = v139;
      goto LABEL_220;
    }
    v32 = v31;
    v30 = *v12;
  }
  else
  {
    v32 = 0;
  }
  v37 = v145;
  if (v30 == 3)
  {
    v142 = v32;
    v140 = (_DWORD *)heap_Calloc(*(_QWORD **)(v5 + 8), v19, 4);
    if (v140)
    {
      if (v19 >= 1)
      {
        for (i = 0; i != v19; ++i)
        {
          v39 = *(float *)(*(_QWORD *)(a2 + 2648) + i * 4);
          if (v39 < 70.0 || v39 > 450.0)
            v39 = 1000.0;
          *(float *)&v140[i] = v39;
        }
      }
      v36 = v139;
      v135 = (_DWORD *)heap_Calloc(*(_QWORD **)(v5 + 8), v15, 4);
      if (v135)
      {
        v134 = heap_Calloc(*(_QWORD **)(v5 + 8), v15, 4);
        if (!v134)
        {
          v34 = 0;
          v32 = v142;
          v33 = (uint64_t)v135;
          goto LABEL_218;
        }
        v32 = v142;
        if ((int)v15 < 1)
          goto LABEL_76;
        v41 = 0;
        while (v41)
        {
          v42 = &v16[v41];
          v43 = *(v42 - 1);
          v44 = v10[v41];
          v45 = v44 + v43;
          *v42 = v44 + v43;
          v135[v41] = v140[v43];
          v46 = (float *)(v134 + 4 * v41);
          *v46 = *(float *)&v140[(v44 + v43 - 1)];
          v47 = *(float *)&v135[v41];
          if (v47 == 1000.0)
          {
            v48 = v10[v41];
            v49 = 1;
            if (v48 >= 2)
            {
              while (*(float *)&v140[(v43 + v49)] == 1000.0)
              {
                if (v48 == ++v49)
                  goto LABEL_67;
              }
            }
            if ((_DWORD)v49 == (_DWORD)v48)
              goto LABEL_67;
            v47 = *(float *)&v140[(v49 + v43)];
            *(float *)&v135[v41] = v47;
          }
          if (v47 != 1000.0 && *v46 == 1000.0)
          {
            v53 = v10[v41];
            if (v53 < 2)
            {
              v56 = 1;
            }
            else
            {
              v54 = 0;
              v55 = v43 + v44 - 2;
              while (*(float *)&v140[(v55 + v54)] == 1000.0)
              {
                if (1 - v53 == --v54)
                  goto LABEL_67;
              }
              v56 = 1 - v54;
            }
            if (v56 != (_DWORD)v53)
            {
              v52 = v45 + ~v56;
              v51 = v140;
              goto LABEL_54;
            }
          }
LABEL_67:
          v10[v41++] *= v145;
          if (v41 == v15)
            goto LABEL_76;
        }
        v50 = *v10;
        *v16 = *v10;
        v51 = v140;
        *v135 = *v140;
        v52 = v50 - 1;
        v46 = (float *)v134;
LABEL_54:
        *v46 = *(float *)&v51[v52];
        goto LABEL_67;
      }
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v140 = 0;
      v36 = v139;
    }
    v32 = v142;
    goto LABEL_218;
  }
  if (v30 != 2)
  {
    v134 = 0;
    v135 = 0;
    v140 = 0;
    v36 = v139;
    goto LABEL_76;
  }
  v36 = v139;
LABEL_72:
  if ((int)v15 >= 1)
  {
    v57 = v10;
    do
    {
      *v57++ *= v37;
      --v15;
    }
    while (v15);
  }
  v134 = 0;
  v135 = 0;
  v140 = 0;
LABEL_76:
  v58 = v137;
  v131 = (v137 - 1);
  v136 = v5;
  v143 = v32;
  if (v137 < 1)
  {
    v144 = 0;
    goto LABEL_186;
  }
  v132 = v16;
  v59 = 0;
  v144 = 0;
  v138 = (int *)(v6 + 25184);
  v60 = v141;
  do
  {
    v150 = 0;
    v148 = 0;
    v149 = 0;
    v147 = 0;
    mfs_SegmentList_Get(v7, v59, &v147, &v150, (_DWORD *)&v149 + 1, &v149, (_DWORD *)&v148 + 1, &v148);
    v61 = (unsigned int *)(*(_QWORD *)(a2 + 2656) + 40 * v59);
    *v61 = v147;
    v61[1] = HIDWORD(v149);
    v61[2] = v149;
    if (v143)
      *(_BYTE *)(v143 + v59) = v150;
    if (v147 == -1)
    {
      v63 = 1000;
      *(_DWORD *)(v60 + 4 * v59) = 1000;
    }
    else
    {
      v151 = 0;
      if ((*(_DWORD *)(v6 + 8968) - 7) > 4)
        AcousticVector = mfs_ParamMap_GetAcousticVector(v5, (uint64_t)a1, a2, v147, (uint64_t)&v152, (int *)&v151);
      else
        AcousticVector = mfs_Stub_ParamMap_GetAcousticVector(v5, (uint64_t)a1, a2, v147, (uint64_t)&v152, 0, (int *)&v151);
      v144 = AcousticVector;
      if ((AcousticVector & 0x80000000) != 0)
      {
        v16 = v132;
        v12 = v138;
        v32 = v143;
        goto LABEL_217;
      }
      v64 = v6;
      v65 = v151;
      if ((int)v151 < 1)
        goto LABEL_94;
      v66 = 0;
      v67 = v153;
      do
        v68 = (exp(*(float *)(v67 + 4 * v66++)) + 0.5);
      while (v68 <= 0x45 && v66 < v65);
      v60 = v141;
      if (v68 <= 0x45)
LABEL_94:
        v68 = 1000;
      *(_DWORD *)(v60 + 4 * v59) = v68;
      v70 = v151;
      if ((int)v151 < 1)
        goto LABEL_103;
      v71 = v153;
      v72 = v151 - 1;
      v73 = 1;
      do
        v63 = (exp(*(float *)(v71 + 4 * v72--)) + 0.5);
      while (v63 <= 0x45 && v73++ < v70);
      v5 = v136;
      v60 = v141;
      if (v63 <= 0x45)
LABEL_103:
        v63 = 1000;
      v6 = v64;
      v12 = v138;
      v36 = v139;
    }
    *(_DWORD *)(v36 + 4 * v59++) = v63;
  }
  while (v59 != v137);
  v75 = 0;
  v76 = *(int32x2_t **)(a2 + 2656);
  v77 = v76 + 5;
  v58 = v137;
  do
  {
    if (v75)
    {
      v78 = v77[-5].i32[0];
      v77[-1].i32[0] = v77[-10].i32[0] + 1 == v78;
      v77[-1].i32[1] = v75 < v131 && v78 + 1 == v77->i32[0];
    }
    else
    {
      v76[4] = (int32x2_t)0x100000000;
    }
    v77[-2] = vsub_s32((int32x2_t)vand_s8((int8x8_t)vceqz_s32(v77[-1]), (int8x8_t)0x6400000064), vtst_s32(v77[-1], v77[-1]));
    ++v75;
    v77 += 5;
  }
  while (v137 != v75);
  v79 = 0;
  v80 = *(_QWORD *)(a2 + 2656);
  v81 = 1000;
  v82 = 1000;
  v83 = 1000;
  do
  {
    if (!v79)
    {
LABEL_128:
      v97 = 1000;
      v98 = 1000;
      v99 = 1000;
      goto LABEL_181;
    }
    v84 = v80 + 40 * v79;
    v87 = *(_DWORD *)(v84 - 40);
    v86 = (_DWORD *)(v84 - 40);
    v85 = v87;
    if (v87 == -1 || v79 == v131)
    {
      v91 = 1000;
      v89 = 1000;
      v90 = 1000;
      if (v85 == -1)
        goto LABEL_122;
    }
    else
    {
      v91 = *(_DWORD *)(v60 + 4 * v79 + 4);
    }
    v89 = *(_DWORD *)(v60 + 4 * v79);
    v90 = *(_DWORD *)(v36 + 4 * v79);
LABEL_122:
    v92 = *(_DWORD *)(v80 + 40 * v79);
    if (v92 == -1)
      goto LABEL_128;
    v93 = v79 - 1;
    v94 = *v12;
    if ((*v12 - 1) > 1)
    {
      if (v94 != 3)
        goto LABEL_176;
      if (v89 == 1000)
      {
        v83 = 1000;
      }
      else
      {
        v102 = *(float *)&v135[v79];
        if (v102 == 1000.0)
        {
          v83 = 1000;
          v89 = 1000;
        }
        else
        {
          v104 = *(float *)(v134 + 4 * v93);
          if (v104 == 1000.0)
            v83 = (int)v102;
          else
            v83 = (int)(float)(v102 + v104) / 2;
        }
      }
      if (v90 != 1000)
      {
        v105 = *(float *)(v134 + 4 * v79);
        if (v105 != 1000.0)
        {
          v118 = *(float *)&v135[v79 + 1];
          v82 = (int)v105;
          if (v118 != 1000.0)
            v82 = (int)(float)(v105 + v118) / 2;
LABEL_156:
          v106 = *a1;
          v107 = (int)v79 / (int)v106 * v106;
          v108 = (int)v79 % (int)v106;
          v109 = *(_DWORD *)(v80 + 40 * ((int)v106 - 1 + v107));
          v110 = v106 - 1 + *(_DWORD *)(v80 + 40 * v107);
          LODWORD(v111) = *a1;
          if (v109 != v110)
          {
            if ((int)v106 <= 0)
            {
              v112 = 0;
              goto LABEL_168;
            }
            v111 = 0;
            while (*(_DWORD *)(v80 + 40 * ((int)v79 - v108 + (int)v111) + 8) != v145)
            {
              if (v106 == ++v111)
              {
                LODWORD(v111) = *a1;
                break;
              }
            }
          }
          v112 = v111 == v106;
          if ((int)v106 >= 1)
          {
            v113 = 0;
            v114 = 0;
            v115 = v79 - v108;
            do
            {
              v114 += v10[v115];
              v113 += *(_DWORD *)(v80 + 40 * v115++ + 8);
              --v106;
            }
            while (v106);
            if (v113)
            {
              v81 = (int)((double)v114 * 1000.0 / (double)v113);
LABEL_169:
              if (v81 >= 1300)
                v116 = 1300;
              else
                v116 = v81;
              if (v116 <= 700)
                v116 = 700;
              if (!v112)
                v81 = v116;
              goto LABEL_176;
            }
          }
LABEL_168:
          v81 = 1000;
          goto LABEL_169;
        }
        v90 = 1000;
      }
      v82 = 1000;
      goto LABEL_156;
    }
    v83 = 1000;
    if (v89 == 1000)
    {
      v96 = 1000;
    }
    else
    {
      v95 = *(_DWORD *)(v36 + 4 * v93);
      v96 = 1000;
      if (v95 != 1000)
      {
        if (v92 == *v86 + 1)
        {
          v83 = 1000;
        }
        else
        {
          v100 = v95 + v89;
          if (v95 + v89 < 0 != __OFADD__(v95, v89))
            ++v100;
          v83 = v100 >> 1;
          v96 = v89;
        }
      }
    }
    v82 = 1000;
    if (v90 == 1000)
      goto LABEL_140;
    v101 = 1000;
    if (v91 != 1000)
    {
      if (*(_DWORD *)(v80 + 40 * v79 + 40) != v92 + 1)
      {
        v103 = v90 + v91;
        if (v90 + v91 < 0 != __OFADD__(v90, v91))
          ++v103;
        v82 = v103 >> 1;
        v101 = v90;
        goto LABEL_146;
      }
      v82 = 1000;
LABEL_140:
      v101 = 1000;
    }
LABEL_146:
    if ((v94 & 0xFFFFFFFE) == 2)
    {
      v90 = v101;
      v89 = v96;
      goto LABEL_156;
    }
    v81 = 1000;
    v90 = v101;
    v89 = v96;
LABEL_176:
    v97 = 1000 * v83 / v89;
    v99 = v12[8];
    if (v81 < v99)
      v99 = v81;
    if (v99 <= v12[7])
      v99 = v12[7];
    v98 = 1000 * v82 / v90;
LABEL_181:
    v117 = (_DWORD *)(v80 + 40 * v79);
    v117[3] = v97;
    v117[4] = v98;
    v117[5] = v99;
    ++v79;
  }
  while (v79 != v137);
  v16 = v132;
  v32 = v143;
LABEL_186:
  if (*v12 == 2 && v12[1])
  {
    v119 = *a1;
    v120 = v58 + 1;
    if (v119 < v58 + 1 - v119)
    {
      v133 = v16;
      v121 = 0;
      v122 = v119;
      v123 = 40 * v119 + 20;
      v124 = *a1;
      v146 = v58 + 1;
      while (1)
      {
        v125 = (int)v122 / v119;
        if ((int)v122 % v119)
        {
          if (!v121)
            goto LABEL_201;
        }
        else
        {
          v126 = *(const char **)(*(_QWORD *)(v6 + 7616) + 8 * *(unsigned __int8 *)(v32 + v122));
          if (v126 && !strcmp(v126, "SIL"))
          {
            v121 = 0;
            goto LABEL_210;
          }
          if (mfs_Ling_IsVowel(v6, *(_QWORD *)(a2 + 8), (int)v122 / v119))
          {
            v124 = *a1;
          }
          else
          {
            if (!mfs_Ling_IsVowel(v6, *(_QWORD *)(a2 + 8), v125 - 1))
            {
              v32 = v143;
              v124 = *a1;
              v128 = *(const char **)(*(_QWORD *)(v6 + 7616) + 8 * *(unsigned __int8 *)(v143 - *a1 + v122));
              if (!v128)
                goto LABEL_212;
              if (strcmp(v128, "SIL"))
              {
LABEL_209:
                v121 = 0;
                v119 = v124;
LABEL_210:
                v32 = v143;
LABEL_211:
                v120 = v146;
                goto LABEL_201;
              }
            }
            v127 = mfs_Ling_IsVowel(v6, *(_QWORD *)(a2 + 8), v125 + 1);
            v124 = *a1;
            if (!v127)
            {
              v32 = v143;
              v129 = *(const char **)(*(_QWORD *)(v6 + 7616) + 8 * *(unsigned __int8 *)(v143 + v124 + v122));
              if (!v129)
              {
LABEL_212:
                v121 = 0;
                v119 = v124;
                goto LABEL_211;
              }
              if (strcmp(v129, "SIL"))
                goto LABEL_209;
            }
          }
          v121 = 1;
          v32 = v143;
          v120 = v146;
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 2656) + v123) = 1000;
        v119 = v124;
LABEL_201:
        ++v122;
        v123 += 40;
        if (v122 >= v120 - v119)
        {
          v5 = v136;
          v16 = v133;
          v36 = v139;
          goto LABEL_217;
        }
      }
    }
    v5 = v136;
  }
LABEL_217:
  v34 = v134;
  v33 = (uint64_t)v135;
LABEL_218:
  if (v32)
    heap_Free(*(_QWORD **)(v5 + 8), v32);
LABEL_220:
  heap_Free(*(_QWORD **)(v5 + 8), v141);
LABEL_221:
  heap_Free(*(_QWORD **)(v5 + 8), v36);
  v35 = (uint64_t)v140;
LABEL_222:
  heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v10);
  heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v16);
  if (*v12 != 3)
    return v144;
  v4 = v144;
  if (v33)
    heap_Free(*(_QWORD **)(v5 + 8), v33);
  if (v34)
    heap_Free(*(_QWORD **)(v5 + 8), v34);
  if (v35)
LABEL_228:
    heap_Free(*(_QWORD **)(v5 + 8), v35);
  return v4;
}

float mfs_TCost_LF0_SLP_distance(float a1, float a2, float a3, float a4, float a5, float a6)
{
  float result;

  result = (float)((float)(a1 - a3) / a5) - (float)((float)(a2 - a4) / a6);
  if (result < 0.0)
    return -result;
  return result;
}

float mfs_TCost_LF0_BND_distance(float a1, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  if (a1 <= a2)
    v4 = a2;
  else
    v4 = a1;
  if (a3 <= a4)
    v5 = a4;
  else
    v5 = a3;
  v6 = a1 - a2;
  if (v6 < 0.0)
    v6 = -v6;
  v7 = v6 / v4;
  v8 = a3 - a4;
  v9 = -(float)(a3 - a4);
  if (v8 < 0.0)
    v8 = v9;
  return v7 + (float)(v8 / v5);
}

uint64_t mfs_TCost_Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  float v6;
  float v7;
  int v8;
  uint64_t result;

  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  v5 = (_QWORD *)(a3 + 160);
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 272) + *(_DWORD *)(a2 + 268);
  v6 = 1.0 / (float)(*(float *)(a2 + 8004) + *(float *)(a2 + 8008));
  *(float *)(a3 + 4) = v6;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 8188);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a3 + 148) = *(_DWORD *)(a2 + 8008);
  *(_DWORD *)(a3 + 152) = *(_DWORD *)(a2 + 8004);
  v7 = *(float *)(a2 + 8000);
  *(float *)(a3 + 156) = v7;
  *(float *)(a3 + 4) = v6 * v7;
  UNICORN__mfs_S32Vect_Init(a1, (_QWORD *)(a3 + 96));
  UNICORN__mfs_S32Vect_Init(a1, (_QWORD *)(a3 + 120));
  UNICORN__mfs_S32Vect_Init(a1, v5);
  v8 = *(_DWORD *)(a3 + 12);
  if (v8 < 0)
    return 2229280783;
  *(float *)(a3 + 184) = 1.0 / (float)v8;
  *(_BYTE *)(a3 + 216) = 0;
  if (v8)
  {
    if (*(float *)(a3 + 152) > 0.0)
      *(_BYTE *)(a3 + 216) = 1;
  }
  result = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t mfs_FillTgtVect(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_DWORD *)(v8 + 1528);
  v10 = *(_DWORD *)(v8 + 3056);
  *(_DWORD *)(a3 + 144) = a4;
  v11 = a3 + 96;
  UNICORN__mfs_S32Vect_Clear((_QWORD *)(a3 + 96));
  result = UNICORN__mfs_F32Vect_Create(v11, a4);
  if ((result & 0x80000000) != 0)
    return result;
  v13 = a3 + 120;
  UNICORN__mfs_S32Vect_Clear((_QWORD *)(a3 + 120));
  result = UNICORN__mfs_F32Vect_Create(a3 + 120, a4 + *(_DWORD *)a3 - 1);
  if ((result & 0x80000000) != 0)
    return result;
  v14 = v9;
  v15 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(*(_QWORD *)(v8 + 1592) + 8 * v9);
  *(_QWORD *)(a3 + 32) = v15;
  if (a4 < 1)
  {
LABEL_21:
    v24 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(v24 + 3056) = v10;
    *(_DWORD *)(v24 + 1528) = v9;
    return result;
  }
  v16 = 0;
  v17 = 0;
  v18 = -1.0;
  v19 = 1.0;
  while ((*(_BYTE *)(*(_QWORD *)(a2 + 48) + v14) & 4) == 0)
  {
    v20 = -1.0e10;
    v21 = 1.0;
    if ((v16 & 1) == 0)
      goto LABEL_9;
LABEL_13:
    result = UNICORN__mfs_F32Vect_Pad(v11, v20);
    if ((result & 0x80000000) != 0)
      return result;
    v23 = sqrtf(v21);
    if (v18 != v21)
      v19 = v23;
    result = UNICORN__mfs_F32Vect_Pad(v13, v19);
    if ((result & 0x80000000) != 0)
      return result;
    if (v18 != v21)
      v18 = v21;
    ++v14;
    ++v17;
    v16 = 1;
    if (v17 == a4)
    {
      v9 = v14;
      goto LABEL_21;
    }
  }
  v20 = **(float **)(*(_QWORD *)(v8 + 3120) + 8 * v10);
  v21 = **(float **)(*(_QWORD *)(v8 + 3160) + 8 * v10++);
  if ((v16 & 1) != 0)
    goto LABEL_13;
LABEL_9:
  if (*(int *)(a1 + 268) < 1)
    goto LABEL_13;
  v22 = 0;
  while (1)
  {
    result = UNICORN__mfs_F32Vect_Pad(v13, sqrtf(*(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 1632) + 8 * v14) + 4 * v22)));
    if ((result & 0x80000000) != 0)
      return result;
    if (++v22 >= *(int *)(a1 + 268))
      goto LABEL_13;
  }
}

_QWORD *mfs_TCost_Clear(_QWORD *a1)
{
  UNICORN__mfs_S32Vect_Clear(a1 + 12);
  UNICORN__mfs_S32Vect_Clear(a1 + 15);
  return UNICORN__mfs_S32Vect_Clear(a1 + 20);
}

float mfs_TCost_CandidateCostStream_Faster(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  float *v5;
  float *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  float v12;
  float *v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  signed int *v21;
  float v22;
  float v23;
  signed int v24;
  int v25;
  float v26;
  BOOL v27;
  _BOOL4 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  float v57;
  unsigned int v58;
  unint64_t v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int v69;
  float *v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float result;

  v5 = *(float **)(a1 + 32);
  v6 = *(float **)(a3 + 16);
  v7 = *(_DWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = v7 - a4;
  if (v7 <= a4)
  {
    v10 = (uint64_t *)(a3 + 8);
    v11 = (uint64_t *)(a1 + 24);
    v12 = *(float *)(a2 + 4 * v7 + 24116) * (float)a4;
    v9 = a4 - v7;
    v13 = *(float **)(a1 + 32);
    v14 = *(_QWORD *)(a3 + 16);
    v15 = *(_DWORD *)(a1 + 144);
  }
  else
  {
    v10 = (uint64_t *)(a1 + 24);
    v11 = (uint64_t *)(a3 + 8);
    v12 = *(float *)(a2 + 4 * a4 + 24116) * (float)v7;
    v13 = *(float **)(a3 + 16);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = a4;
  }
  v16 = *(float *)(a1 + 152);
  v17 = *(float *)(a1 + 184);
  v18 = *v10;
  v19 = *v11;
  if (v15)
  {
    v20 = v15;
    v21 = *(signed int **)(a1 + 168);
    v22 = 0.0;
    v23 = 0.0;
    do
    {
      v24 = vcvtms_s32_f32(v12 * v22);
      *v21 = v24;
      v25 = *(_DWORD *)(a2 + 8928);
      if (v25 != 6)
      {
        v26 = *(float *)(v14 + 4 * v24);
        v27 = v26 < 0.0;
        v28 = *v13 < 0.0 || v26 < 0.0;
        v29 = *v13 - v26;
        if (v27 && *v13 < 0.0)
          v30 = 0.0;
        else
          v30 = 4.7;
        if (v28)
          v29 = v30;
        v23 = v23 + (float)(*(float *)(*(_QWORD *)(a1 + 128) + 4 * *(unsigned int *)(a1 + 8)) * (float)(v29 * v29));
      }
      v22 = v22 + 1.0;
      ++v21;
      ++v13;
      --v20;
    }
    while (v20);
  }
  else
  {
    v25 = *(_DWORD *)(a2 + 8928);
    v23 = 0.0;
  }
  if (v25 == 6)
  {
    v31 = *v5;
    v32 = 0.01;
    if (*v5 < 0.0)
      v31 = 0.01;
    v33 = *v6;
    if (*v6 < 0.0)
      v33 = 0.01;
    v34 = v7 - 1;
    v35 = v5[v7 - 1];
    if (v35 < 0.0)
      v35 = 0.01;
    v36 = a4 - 1;
    v37 = v6[v36];
    if (v37 < 0.0)
      v37 = 0.01;
    if (v34 < 0)
      v34 = v7;
    v38 = v5[v34 >> 1];
    if (v38 < 0.0)
      v38 = 0.01;
    if ((int)v36 >= 0)
      v39 = a4 - 1;
    else
      v39 = a4;
    if (v6[v39 >> 1] >= 0.0)
      v32 = v6[v39 >> 1];
    if (v31 <= v33)
      v40 = v33;
    else
      v40 = v31;
    if (v35 <= v37)
      v41 = v37;
    else
      v41 = v35;
    if (v38 <= v32)
      v42 = v32;
    else
      v42 = v38;
    v43 = v31 - v33;
    if ((float)(v31 - v33) < 0.0)
      v43 = -(float)(v31 - v33);
    v44 = v43 / v40;
    v45 = v35 - v37;
    if ((float)(v35 - v37) < 0.0)
      v45 = -(float)(v35 - v37);
    v46 = v44 + (float)(v45 / v41);
    v47 = v38 - v32;
    if (v47 < 0.0)
      v47 = -v47;
    v48 = v46 + (float)(v47 / v42);
    v49 = (float)((float)(v31 - v35) / (float)v7) - (float)((float)(v33 - v37) / (float)a4);
    if (v49 < 0.0)
      v49 = -v49;
    v50 = (float)(*(float *)(a2 + 8932) * v49) + (float)((float)(1.0 - *(float *)(a2 + 8932)) * v48);
    v51 = *(float *)(a1 + 4) * *(float *)(a1 + 148);
  }
  else
  {
    v50 = sqrtf(v23) * *(float *)(a1 + 148);
    v51 = *(float *)(a1 + 4);
  }
  *(float *)(a5 + 8) = v51 * v50;
  *(_DWORD *)(a5 + 4) = 0;
  if (*(_BYTE *)(a1 + 216))
  {
    if (v15)
    {
      v52 = 0;
      v53 = 0;
      v54 = *(_DWORD *)(a1 + 8);
      v55 = *(unsigned int *)(a1 + 12);
      v56 = v55 & 0xFFFFFFFC;
      v57 = 0.0;
      do
      {
        v58 = *(_DWORD *)(v8 + 4 * v52) * v54;
        if ((_DWORD)v56)
        {
          v59 = 0;
          v60 = (float *)(*(_QWORD *)(a1 + 128) + 8);
          do
          {
            v61 = *(float *)(v19 + 4 * (v53 + v59)) - *(float *)(v18 + 4 * (v58 + v59));
            v62 = *(float *)(v19 + 4 * (v53 + v59 + 1))
                - *(float *)(v18 + 4 * (v58 + v59 + 1));
            v63 = *(float *)(v19 + 4 * (v53 + v59 + 2))
                - *(float *)(v18 + 4 * (v58 + v59 + 2));
            v64 = *(float *)(v19 + 4 * (v53 + v59 + 3))
                - *(float *)(v18 + 4 * (v58 + v59 + 3));
            v65 = (float)(v61 * v61) * *(v60 - 2);
            v66 = (float)(v62 * v62) * *(v60 - 1);
            v67 = *v60;
            v68 = v60[1];
            v60 += 4;
            v57 = v57
                + (float)((float)((float)(v65 + v66) + (float)((float)(v63 * v63) * v67))
                        + (float)((float)(v64 * v64) * v68));
            v59 += 4;
          }
          while (v59 < v56);
          v53 += v59;
          v58 += v59;
        }
        else
        {
          LODWORD(v59) = 0;
        }
        if (v59 < v55)
        {
          v69 = v55 + v53;
          v70 = (float *)(*(_QWORD *)(a1 + 128) + 4 * v59);
          v71 = v55 - v59;
          do
          {
            v72 = *(float *)(v19 + 4 * v53++);
            v73 = *(float *)(v18 + 4 * v58++);
            v74 = *v70++;
            v57 = v57 + (float)((float)((float)(v72 - v73) * (float)(v72 - v73)) * v74);
            --v71;
          }
          while (v71);
          v53 = v69 - v59;
        }
        v53 += v54 - v55;
        ++v52;
      }
      while (v52 != v15);
    }
    else
    {
      v57 = 0.0;
    }
    if (*(_DWORD *)(a2 + 8352) == 1)
      v76 = *(float *)(a1 + 152) * sqrtf(v57 * *(float *)(a1 + 184));
    else
      v76 = (float)(v16 * v17) * sqrtf(v57);
    v75 = v76 + 0.0;
    *(float *)(a5 + 4) = v76 + 0.0;
  }
  else
  {
    v75 = 0.0;
  }
  v77 = (float)v9;
  *(float *)(a5 + 4) = *(float *)(a1 + 4) * v75;
  v78 = *(float *)(a1 + 4) * *(float *)(a1 + 156);
  if (v25 == 6)
  {
    v79 = (float)(v77 * 0.03) / (float)a4;
  }
  else
  {
    v79 = v78 * v77;
    v78 = 0.01;
  }
  result = v79 * v78;
  *(float *)a5 = result;
  return result;
}

uint64_t mfs_TCost_CandidateCostStream_kld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  float *v13;
  float *v14;
  int v15;
  int v16;
  float v17;
  float *v18;
  uint64_t v19;
  int v20;
  signed int *v21;
  uint64_t v22;
  float v23;
  float v24;
  signed int v25;
  int v26;
  float v27;
  BOOL v28;
  _BOOL4 v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  uint64_t result;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;

  v13 = *(float **)(a1 + 32);
  v14 = *(float **)(a5 + 16);
  v15 = *(_DWORD *)(a1 + 144);
  v16 = v15 - a6;
  if (v15 <= a6)
  {
    v17 = *(float *)(a3 + 4 * v15 + 24116) * (float)a6;
    v16 = a6 - v15;
    v18 = *(float **)(a1 + 32);
    v19 = *(_QWORD *)(a5 + 16);
    v20 = *(_DWORD *)(a1 + 144);
  }
  else
  {
    v17 = *(float *)(a3 + 4 * a6 + 24116) * (float)v15;
    v18 = *(float **)(a5 + 16);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = a6;
  }
  if (v20 <= 0)
  {
    v26 = *(_DWORD *)(a3 + 8928);
    v24 = 0.0;
  }
  else
  {
    v21 = *(signed int **)(a1 + 168);
    v22 = v20;
    v23 = 0.0;
    v24 = 0.0;
    do
    {
      v25 = vcvtms_s32_f32(v17 * v23);
      *v21 = v25;
      v26 = *(_DWORD *)(a3 + 8928);
      if (v26 != 6)
      {
        v27 = *(float *)(v19 + 4 * v25);
        v28 = v27 < 0.0;
        v29 = *v18 < 0.0 || v27 < 0.0;
        v30 = *v18 - v27;
        if (v28 && *v18 < 0.0)
          v31 = 0.0;
        else
          v31 = 4.7;
        if (v29)
          v30 = v31;
        v24 = v24 + (float)(*(float *)(*(_QWORD *)(a1 + 128) + 4 * *(unsigned int *)(a1 + 8)) * (float)(v30 * v30));
      }
      v23 = v23 + 1.0;
      ++v18;
      ++v21;
      --v22;
    }
    while (v22);
  }
  if (v26 == 6)
  {
    v32 = 0.01;
    if (*v13 >= 0.0)
      v33 = *v13;
    else
      v33 = 0.01;
    v34 = *v14;
    if (*v14 < 0.0)
      v34 = 0.01;
    v35 = v13[v15 - 1];
    if (v35 < 0.0)
      v35 = 0.01;
    v36 = a6 - 1;
    v37 = v14[v36];
    if (v37 < 0.0)
      v37 = 0.01;
    if (*(_DWORD *)(a3 + 8280))
    {
      if (v33 <= v34)
        v38 = v34;
      else
        v38 = v33;
      if (v35 <= v37)
        v39 = v37;
      else
        v39 = v35;
      v40 = v33 - v34;
      if ((float)(v33 - v34) < 0.0)
        v40 = -(float)(v33 - v34);
      v41 = v40 / v38;
      v42 = v35 - v37;
      if ((float)(v35 - v37) < 0.0)
        v42 = -(float)(v35 - v37);
      v43 = v41 + (float)(v42 / v39);
      v44 = (float)((float)(v33 - v35) / (float)v15) - (float)((float)(v34 - v37) / (float)a6);
      if (v44 < 0.0)
        v44 = -v44;
      v45 = (float)(v44 * *(float *)(a3 + 8932)) + (float)((float)(1.0 - *(float *)(a3 + 8932)) * v43);
    }
    else
    {
      v47 = v13[(v15 - 1) / 2];
      if (v47 < 0.0)
        v47 = 0.01;
      if ((int)v36 >= 0)
        v48 = a6 - 1;
      else
        v48 = a6;
      if (v14[v48 >> 1] >= 0.0)
        v32 = v14[v48 >> 1];
      if (v33 <= v34)
        v49 = v34;
      else
        v49 = v33;
      if (v35 <= v37)
        v50 = v37;
      else
        v50 = v35;
      if (v47 <= v32)
        v51 = v32;
      else
        v51 = v47;
      v52 = v33 - v34;
      if ((float)(v33 - v34) < 0.0)
        v52 = -(float)(v33 - v34);
      v53 = v52 / v49;
      v54 = v35 - v37;
      if ((float)(v35 - v37) < 0.0)
        v54 = -(float)(v35 - v37);
      v55 = v53 + (float)(v54 / v50);
      v56 = v47 - v32;
      if (v56 < 0.0)
        v56 = -v56;
      v57 = v55 + (float)(v56 / v51);
      v58 = (float)((float)(v33 - v35) / (float)v15) - (float)((float)(v34 - v37) / (float)a6);
      if (v58 < 0.0)
        v58 = -v58;
      v45 = (float)(v58 * *(float *)(a3 + 8932)) + (float)((float)(1.0 - *(float *)(a3 + 8932)) * v57);
    }
    v46 = v45 * (float)(*(float *)(a1 + 4) * *(float *)(a1 + 148));
  }
  else
  {
    v46 = *(float *)(a1 + 4) * (float)(sqrtf(v24) * *(float *)(a1 + 148));
  }
  *(float *)(a10 + 8) = v46;
  *(_DWORD *)(a10 + 4) = 0;
  if (*(_BYTE *)(a1 + 216))
  {
    v59 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 12248) + 2 * a7);
    v65 = 0.0;
    result = mfs_kld_lookup(a2, a4, v59, a8, a9, &v65, a7, a8);
    if ((result & 0x80000000) != 0)
      return result;
    v61 = *(float *)(a10 + 4) + (float)(v65 * *(float *)(a1 + 152));
    *(float *)(a10 + 4) = v61;
    v26 = *(_DWORD *)(a3 + 8928);
  }
  else
  {
    v61 = 0.0;
  }
  v62 = (float)v16;
  *(float *)(a10 + 4) = *(float *)(a1 + 4) * v61;
  v63 = *(float *)(a1 + 4) * *(float *)(a1 + 156);
  if (v26 == 6)
    v64 = (float)((float)(v62 * 0.03) / (float)a6) * v63;
  else
    v64 = (float)(v63 * v62) * 0.01;
  result = 0;
  *(float *)a10 = v64;
  return result;
}

float mfs_TCost_CandidateCost(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  signed int v19;
  float v20;
  float v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  float *v34;
  unsigned int v35;
  float v36;
  float v37;

  v4 = *(_DWORD *)(a1 + 144);
  if (v4 <= a4)
  {
    v5 = (uint64_t *)(a3 + 8);
    v6 = (uint64_t *)(a3 + 16);
    v7 = (uint64_t *)(a1 + 24);
    v8 = (uint64_t *)(a1 + 32);
    v9 = *(float *)(a2 + 4 * v4 + 24116);
    v10 = v9 * (float)a4;
    a4 = *(_DWORD *)(a1 + 144);
  }
  else
  {
    v5 = (uint64_t *)(a1 + 24);
    v6 = (uint64_t *)(a1 + 32);
    v7 = (uint64_t *)(a3 + 8);
    v8 = (uint64_t *)(a3 + 16);
    v9 = *(float *)(a2 + 4 * a4 + 24116);
    v10 = v9 * (float)v4;
  }
  v11 = *v5;
  v12 = *v7;
  if (a4 < 1)
  {
    v18 = 0.0;
  }
  else
  {
    v13 = 0;
    v14 = *v6;
    v15 = *v8;
    v16 = *(_QWORD *)(a1 + 168);
    v17 = *(_QWORD *)(a1 + 128);
    v18 = 0.0;
    do
    {
      v19 = vcvtms_s32_f32(v10 * (float)(int)v13);
      *(_DWORD *)(v16 + 4 * v13) = v19;
      v20 = *(float *)(v15 + 4 * v13);
      v21 = *(float *)(v14 + 4 * v19);
      v22 = v21 < 0.0;
      v23 = v20 < 0.0;
      v24 = v20 - v21;
      if (v23 != v22)
        v24 = 4.7;
      if ((v22 & v23) != 0)
        v24 = 0.0;
      v18 = v18 + (float)(*(float *)(v17 + 4 * *(unsigned int *)(a1 + 8)) * (float)(v24 * v24));
      ++v13;
    }
    while (a4 != v13);
  }
  v25 = sqrtf(v18) * *(float *)(a1 + 148);
  if (*(int *)(a1 + 12) >= 1)
  {
    v26 = *(float *)(a1 + 152);
    if (v26 > 0.0)
    {
      if (a4 < 1)
      {
        v31 = 0.0;
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v29 = a4;
        v30 = *(_DWORD *)(a1 + 8);
        v31 = 0.0;
        do
        {
          v32 = v30 * *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v28);
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(float **)(a1 + 128);
          v35 = v27;
          do
          {
            v36 = *(float *)(v12 + 4 * v35) - *(float *)(v11 + 4 * v32);
            v37 = *v34++;
            v31 = v31 + (float)((float)(v36 * v36) * v37);
            ++v32;
            ++v35;
            --v33;
          }
          while (v33);
          ++v28;
          v27 += v30;
        }
        while (v28 != v29);
      }
      v25 = v25 + (float)(v26 * (float)(sqrtf(v31) * *(float *)(a1 + 184)));
    }
  }
  return v9 * (float)(v10 * (float)(v25 * *(float *)(a1 + 4)));
}

uint64_t mfs_StateNGram_Load(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;

  result = 2229280772;
  v5 = *(int **)(a3 + 8);
  if (v5)
  {
    v6 = (int *)((char *)v5 + *(unsigned int *)(a3 + 16));
    if (a2 < 1)
    {
LABEL_7:
      if (v5 == v6)
        return 0;
      else
        return 2229280772;
    }
    else
    {
      v7 = 0;
      v8 = a1 + 48;
      while (v5 < v6)
      {
        v11 = *v5;
        v9 = v5 + 1;
        v10 = v11;
        *(_DWORD *)(v8 + 4 * v7 - 40) = v11;
        if (v9 >= v6)
          break;
        *(_QWORD *)(v8 + 8 * v7) = v9;
        v5 = &v9[v10 * v10];
        if ((a2 + 2) - 2 == ++v7)
          goto LABEL_7;
      }
    }
  }
  return result;
}

double mfs_StateNGram_DeInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t mfs_StateNGram_GetAlternatives(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  int v5;
  uint64_t result;
  uint64_t v13;
  int v14;
  float v15;
  int v16;
  float v17;

  v5 = *(_DWORD *)(a1 + 4 * a4);
  if (v5 <= a3 || v5 == 0 || v5 <= a2)
    return 2229280775;
  v13 = a4;
  UNICORN__mfs_S32Vect_Clear(a5);
  v14 = *(_DWORD *)(a1 + 4 * v13);
  if (a3 < 0)
    v15 = 0.0;
  else
    v15 = *(float *)(*(_QWORD *)(a1 + 8 * v13 + 32) + 4 * (a2 + v14 * a3));
  if (v14 < 1)
    return 0;
  v16 = 0;
  result = 0;
  do
  {
    v17 = *(float *)(*(_QWORD *)(a1 + 8 * v13 + 32) + 4 * (a2 + v14 * v16));
    if (v17 > v15)
    {
      result = mfs_S32Vect_Add((uint64_t)a5, v16);
      if ((result & 0x80000000) != 0)
        return result;
      v14 = *(_DWORD *)(a1 + 4 * v13);
      v15 = v17;
    }
    ++v16;
  }
  while (v16 < v14);
  return result;
}

uint64_t readBytesIntoU32(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;

  result = 0;
  v5 = *a2;
  v6 = (unsigned __int8 *)(a1 + v5);
  switch(a3)
  {
    case 1:
      goto LABEL_5;
    case 2:
      goto LABEL_4;
    case 3:
      goto LABEL_3;
    case 4:
      LODWORD(result) = v6[3] << 24;
LABEL_3:
      LODWORD(result) = result | (v6[2] << 16);
LABEL_4:
      LODWORD(result) = result | (v6[1] << 8);
LABEL_5:
      result = result | *v6;
      *a2 = v5 + a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mfs_getUnitDataRecordSize_Obersee()
{
  unsigned int v1;
  _BYTE v2[32];
  _OWORD v3[12];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v1 = 0;
  readUnitDataAndAdvanceOffset((uint64_t)v3, (uint64_t)v2, &v1);
  return v1;
}

uint64_t readUnitDataAndAdvanceOffset(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;

  v3 = *a3;
  v4 = *(unsigned __int16 *)(result + v3) | (*(unsigned __int8 *)(result + v3 + 2) << 16);
  *a3 = v3 + 3;
  if (v4 == 0xFFFFFF)
    v4 = -1;
  *(_DWORD *)a2 = v4;
  v5 = *a3;
  v6 = *(unsigned __int16 *)(result + v5) | (*(unsigned __int8 *)(result + v5 + 2) << 16);
  *a3 = v5 + 3;
  if (v6 == 0xFFFFFF)
    v7 = -1;
  else
    v7 = v6;
  *(_DWORD *)(a2 + 4) = v7;
  v8 = *a3;
  v9 = *(unsigned __int16 *)(result + v8) | (*(unsigned __int8 *)(result + v8 + 2) << 16);
  *a3 = v8 + 3;
  *(_DWORD *)(a2 + 8) = v9;
  v10 = *a3;
  *(_WORD *)(a2 + 22) = *(_WORD *)(result + v10);
  *a3 = v10 + 3;
  *(_BYTE *)(a2 + 27) = *(_BYTE *)(result + (v10 + 2));
  v11 = *(unsigned __int16 *)(result + (v10 + 3));
  *a3 = v10 + 5;
  v12 = v11 << 8;
  if (v11 <= 0xFF)
    v12 = v11;
  *(_DWORD *)(a2 + 12) = v12;
  v13 = *a3;
  v14 = *(_WORD *)(result + v13);
  *a3 = v13 + 2;
  *(_WORD *)(a2 + 16) = v14;
  v15 = *(_WORD *)(result + (v13 + 2));
  *a3 = v13 + 4;
  *(_WORD *)(a2 + 18) = v15;
  v16 = *(_WORD *)(result + (v13 + 4));
  *a3 = v13 + 6;
  *(_WORD *)(a2 + 20) = v16;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

uint64_t mfs_getUnitData_Obersee(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  __int16 v22;
  int v23;
  char v24;
  unsigned int v25;

  if (a3 == -1 || *(_DWORD *)(a1 + 1096) - 1 == a3)
  {
    result = 0;
    *(_QWORD *)a4 = -1;
    *(_DWORD *)(a4 + 8) = -1;
    *(_BYTE *)(a4 + 28) = 0;
    *(_QWORD *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 20) = -65536;
    *(_DWORD *)(a4 + 24) = 65793;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 1072);
    if (*(_DWORD *)(v7 + 8332) == 1)
    {
      v8 = *(_QWORD *)(a1 + 1896);
      v9 = *(unsigned __int8 **)(a1 + 1872);
      v10 = *(_DWORD **)(a1 + 1880);
      v11 = *(_DWORD *)(a1 + 1888) * a3;
      v25 = v11 >> 3;
      v24 = v11 & 7;
      v12 = readU32AndAdvanceOffsets(v8, *v9, &v24, &v25);
      *(_DWORD *)a4 = v12;
      v13 = readU32AndAdvanceOffsets(v8, v9[1], &v24, &v25);
      *(_DWORD *)(a4 + 4) = v13;
      v14 = readU32AndAdvanceOffsets(v8, v9[2], &v24, &v25);
      *(_DWORD *)(a4 + 8) = v14;
      *(_WORD *)(a4 + 22) = readU32AndAdvanceOffsets(v8, v9[3], &v24, &v25);
      *(_BYTE *)(a4 + 27) = readU32AndAdvanceOffsets(v8, v9[4], &v24, &v25);
      v15 = readU32AndAdvanceOffsets(v8, v9[5], &v24, &v25);
      *(_DWORD *)(a4 + 12) = v15;
      *(_WORD *)(a4 + 16) = readU32AndAdvanceOffsets(v8, v9[6], &v24, &v25);
      *(_WORD *)(a4 + 18) = readU32AndAdvanceOffsets(v8, v9[7], &v24, &v25);
      *(_WORD *)(a4 + 20) = readU32AndAdvanceOffsets(v8, v9[8], &v24, &v25);
      *(_BYTE *)(a4 + 28) = 0;
      if (v12 == *v10)
        *(_DWORD *)a4 = -1;
      if (v13 == v10[1])
        *(_DWORD *)(a4 + 4) = -1;
      if (v15 == v10[5])
        *(_DWORD *)(a4 + 12) = v15 << 8;
    }
    else
    {
      v20 = *(_QWORD *)(v7 + 21704);
      v23 = *(_DWORD *)(a1 + 1100) * a3;
      readUnitDataAndAdvanceOffset(v20, a4, &v23);
      v14 = *(_DWORD *)(a4 + 8);
    }
    result = mfs_symData_recoverCompactNFeatVect_Obersee(a1, a2, v14, 3, (uint64_t)&v21, v16, v17, v18);
    if ((result & 0x80000000) == 0)
    {
      result = 0;
      *(_BYTE *)(a4 + 24) = v21;
      *(_WORD *)(a4 + 25) = v22;
    }
  }
  return result;
}

uint64_t mfs_getBeginEndPitch_Obersee(uint64_t a1, uint64_t a2, float *a3, float *a4)
{
  uint64_t v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;

  v4 = *(_QWORD *)(a1 + 1072);
  if (a3)
  {
    v5 = *(unsigned __int16 *)(a2 + 18);
    if (v5 == 256)
      v6 = -1.0e10;
    else
      v6 = (float)((float)v5 / *(float *)(v4 + 8752)) + *(float *)(v4 + 8672);
    *a3 = v6;
  }
  if (a4)
  {
    v7 = *(_DWORD *)(a2 + 12);
    if (v7 == 0x10000)
      v8 = -1.0e10;
    else
      v8 = (float)((float)v7 / *(float *)(v4 + 8752)) + *(float *)(v4 + 8672);
    *a4 = v8;
  }
  return 0;
}

uint64_t mfs_AllUnitCompData_Init_Obersee(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = 0;
  v3 = 0;
  v4 = a1[2833];
  *(_QWORD *)(a2 + 1872) = v4;
  *(_QWORD *)(a2 + 1880) = a1[2863];
  *(_DWORD *)(a2 + 1888) = 0;
  do
  {
    v3 += *(unsigned __int8 *)(v4 + v2);
    *(_DWORD *)(a2 + 1888) = v3;
    ++v2;
  }
  while (v2 != 9);
  *(_QWORD *)(a2 + 1896) = a1[2713];
  return 1;
}

double mfs_AllUnitCompData_DeInit_Obersee(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 1896) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1872) = 0u;
  return result;
}

uint64_t readU32AndAdvanceOffsets(uint64_t a1, int a2, _BYTE *a3, _DWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  int v8;
  char v9;
  unsigned int v10;

  v4 = *a4;
  v5 = *a3;
  v6 = v5 + a2;
  switch((int)(v6 - 1 + (((v6 - 1) & 0xE000) >> 13)) >> 3)
  {
    case 0:
      result = ((0xFFu >> v5) & *(unsigned __int8 *)(a1 + v4)) >> (8 - v6);
      break;
    case 1:
      v8 = *(unsigned __int8 *)(a1 + v4 + 1) | (*(unsigned __int8 *)(a1 + v4) << 8);
      v9 = 16 - a2 - v5;
      v10 = 0xFFFF;
      goto LABEL_7;
    case 2:
      v8 = (*(unsigned __int8 *)(a1 + v4) << 16) | (*(unsigned __int8 *)(a1 + v4 + 1) << 8) | *(unsigned __int8 *)(a1 + v4 + 2);
      v9 = 24 - a2 - v5;
      v10 = 0xFFFFFF;
      goto LABEL_7;
    case 3:
      v8 = bswap32(*(_DWORD *)(a1 + v4));
      v9 = 32 - a2 - v5;
      v10 = -1;
LABEL_7:
      result = (v8 & (v10 >> v5)) >> v9;
      break;
    default:
      result = 0;
      break;
  }
  *a4 = v4 + (v6 >> 3);
  *a3 = v6 & 7;
  return result;
}

uint64_t mfs_StatisticalSelection(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int **v21;
  _DWORD *v22;
  float *v23;
  int v24;
  int v25;
  int *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t NodeCandidates;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  unsigned int v44;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t NodeCandidates_StatSelect;
  const char *v71;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  int8x8_t v80;

  v6 = *(_QWORD *)(a1 + 1928);
  v7 = *(unsigned int *)(a1 + 620);
  MFS__log_select_Diag(v6, 1, (uint64_t)"HybridStatisticalSelection {\n");
  MFS__log_select_Diag(v6, 1, (uint64_t)"eBet4EmissionType is set to %d\n");
  if (*(_DWORD *)(a1 + 2592) != 1)
  {
    inited = mfs_InitHashTable(v6, a2, a3, a1);
    if ((inited & 0x80000000) != 0)
      return inited;
    *(_DWORD *)(a1 + 1936) = v7;
    inited = mfs_CostList_Init(v6, (_QWORD *)(a1 + 1944), v7, 0);
    if ((inited & 0x80000000) != 0)
      return inited;
    v44 = *(_DWORD *)(a3 + 8968);
    if (v44 <= 6 && ((1 << v44) & 0x64) != 0 && *a2 == 3)
    {
      inited = mfs_CostList_Init(v6, (_QWORD *)(a1 + 1968), 8u, 0);
      if ((inited & 0x80000000) != 0)
        return inited;
    }
    else
    {
      *(_QWORD *)(a1 + 1976) = 0;
      *(_DWORD *)(a1 + 1984) = 0;
    }
    v46 = *(_DWORD *)(a1 + 2064);
    if (v46 != 2)
    {
      if (v46 == 1)
      {
        bzero(*(void **)(a1 + 2048), 8 * *(unsigned int *)(a1 + 2056));
        v47 = (_QWORD *)(a1 + 2040);
      }
      else
      {
        bzero(*(void **)(a1 + 2032), 8 * *(unsigned int *)(a1 + 2056));
        v47 = (_QWORD *)(a1 + 2024);
      }
      *v47 = 0;
    }
    NodeCandidates = 2229280778;
    if ((*(_DWORD *)(a3 + 8968) | 4) == 6)
    {
      v48 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 1928) + 8), 2 * (int)v7, 4);
      *(_QWORD *)(a1 + 2088) = v48;
      if (!v48)
        return NodeCandidates;
      v79 = (_DWORD *)(a3 + 8968);
      *(_QWORD *)(a1 + 2096) = v48 + 4 * (int)v7;
      if (*(int *)(a1 + 608) >= 1)
      {
        v49 = 0;
        LODWORD(v50) = 0;
        do
        {
          v51 = *(_QWORD *)(a1 + 600);
          v52.i32[0] = *(_DWORD *)(a3 + 8172);
          v52.i32[1] = *(_DWORD *)(a3 + 8248);
          v80 = v52;
          switch(UNICORN__mfs_Ling_WrdPosInPhrs(*(_QWORD *)(a1 + 8), v49))
          {
            case 1u:
              v53 = *(float32x2_t *)(a3 + 8416);
              goto LABEL_68;
            case 2u:
              v53 = *(float32x2_t *)(a3 + 8432);
              goto LABEL_68;
            case 3u:
              v53 = *(float32x2_t *)(a3 + 8424);
              goto LABEL_68;
            case 4u:
              v53 = *(float32x2_t *)(a3 + 8408);
              goto LABEL_68;
            case 5u:
              v53 = *(float32x2_t *)(a3 + 8400);
LABEL_68:
              v80 = vbsl_s8((int8x8_t)vceqz_f32(v53), v80, (int8x8_t)v53);
              break;
            default:
              break;
          }
          switch(mfs_Ling_WrdPosShpInPhrs(*(_QWORD *)(a1 + 8), v49))
          {
            case 0u:
              v54 = *(float32x2_t *)(a3 + 8440);
              goto LABEL_76;
            case 1u:
              v54 = *(float32x2_t *)(a3 + 8456);
              goto LABEL_76;
            case 2u:
              v54 = *(float32x2_t *)(a3 + 8448);
              goto LABEL_76;
            case 3u:
              v54 = *(float32x2_t *)(a3 + 8464);
              goto LABEL_76;
            case 4u:
              v54 = *(float32x2_t *)(a3 + 8480);
              goto LABEL_76;
            case 5u:
              v54 = *(float32x2_t *)(a3 + 8472);
LABEL_76:
              v80 = vbsl_s8((int8x8_t)vceqz_f32(v54), v80, (int8x8_t)v54);
              break;
            default:
              break;
          }
          switch(UNICORN__mfs_Ling_WrdProminence(*(_QWORD *)(a1 + 8), v49))
          {
            case 0u:
              v55 = *(float32x2_t *)(a3 + 8488);
              goto LABEL_82;
            case 1u:
              v55 = *(float32x2_t *)(a3 + 8496);
              goto LABEL_82;
            case 2u:
              v55 = *(float32x2_t *)(a3 + 8504);
              goto LABEL_82;
            case 3u:
              v55 = *(float32x2_t *)(a3 + 8512);
LABEL_82:
              v80 = vbsl_s8((int8x8_t)vceqz_f32(v55), v80, (int8x8_t)v55);
              break;
            default:
              break;
          }
          switch(UNICORN__mfs_Ling_WrdShpProminence(*(_QWORD *)(a1 + 8), v49))
          {
            case 0u:
              v56 = *(float32x2_t *)(a3 + 8520);
              goto LABEL_90;
            case 1u:
              v56 = *(float32x2_t *)(a3 + 8528);
              goto LABEL_90;
            case 2u:
              v56 = *(float32x2_t *)(a3 + 8536);
              goto LABEL_90;
            case 3u:
              v56 = *(float32x2_t *)(a3 + 8544);
              goto LABEL_90;
            case 4u:
              v56 = *(float32x2_t *)(a3 + 8552);
LABEL_90:
              v57 = vbsl_s8((int8x8_t)vceqz_f32(v56), v80, (int8x8_t)v56);
              break;
            default:
              v57 = v80;
              break;
          }
          v58 = *a2;
          if ((int)v58 >= 1)
          {
            v50 = (int)v50;
            v59 = *(_QWORD *)(a1 + 2096);
            v60 = (char *)(*(_QWORD *)(v51 + 528 * v49 + 312) + 2);
            do
            {
              v61 = *v60++;
              v62 = (unint64_t)v57;
              if ((v61 & 4) == 0)
              {
                v63 = *(float *)(a3 + 8252);
                if (v63 == 0.0)
                  v63 = 1.0;
                v64 = *(float *)(a3 + 8176);
                v62 = __PAIR64__(*(float *)&v57.i32[1] * v63, v57.u32[0]);
                if (v64 != 0.0)
                  *(float *)&v62 = *(float *)v57.i32 * v64;
              }
              if (*(float *)&v62 >= 0.0)
                v65 = *(float *)&v62;
              else
                v65 = 0.0;
              if (v65 > 1.0)
                v65 = 1.0;
              LODWORD(v62) = HIDWORD(v62);
              if (*((float *)&v62 + 1) < 0.0)
                *(float *)&v62 = 0.0;
              if (*(float *)&v62 > 5.0)
                *(float *)&v62 = 5.0;
              if (v50 < 1)
              {
                *(_DWORD *)(v59 + 4 * v50) = v62;
                *(float *)(*(_QWORD *)(a1 + 2088) + 4 * v50) = v65;
              }
              else
              {
                v66 = 4 * v50;
                *(float *)(v59 + v66) = (float)(*(float *)(v59 + 4 * (v50 - 1)) * 0.6)
                                      + (float)(*(float *)&v62 * 0.4);
                *(float *)(*(_QWORD *)(a1 + 2088) + v66) = (float)(*(float *)(*(_QWORD *)(a1 + 2088)
                                                                            + 4 * (v50 - 1))
                                                                 * 0.6)
                                                         + (float)(v65 * 0.4);
              }
              ++v50;
              --v58;
            }
            while (v58);
          }
          ++v49;
        }
        while (v49 < *(int *)(a1 + 608));
      }
    }
    else
    {
      v67 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 1928) + 8), 2 * (int)v7, 4);
      *(_QWORD *)(a1 + 2088) = v67;
      if (!v67)
        return NodeCandidates;
      v79 = (_DWORD *)(a3 + 8968);
      *(_QWORD *)(a1 + 2096) = &v67[(int)v7];
      if ((int)v7 >= 1)
      {
        v68 = v7;
        do
        {
          v67[(int)v7] = *(_DWORD *)(a3 + 8248);
          *v67++ = *(_DWORD *)(a3 + 8172);
          --v68;
        }
        while (v68);
      }
    }
    v69 = v79;
    switch(*v79)
    {
      case 1:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_SEARCHMODE_DRAGON\n");
        NodeCandidates_StatSelect = mfs_Search_FindNodeCandidates_StatSelect(a2, a1, a3);
        goto LABEL_125;
      case 2:
        v71 = "Search mode: MFS_SEARCHMODE_FAST\n";
        goto LABEL_124;
      case 5:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_SEARCHMODE_DRAGON_TAHOE\n");
        NodeCandidates_StatSelect = mfs_Search_FindNodeCandidates_StatSelect_Tahoe(a2, a1, a3);
        goto LABEL_125;
      case 6:
        v71 = "Search mode: MFS_SEARCHMODE_FAST_TAHOE\n";
LABEL_124:
        MFS__log_select_Diag(v6, 2, (uint64_t)v71);
        NodeCandidates_StatSelect = mfs_Search_FindNodeCandidates_StatSelect_UltraLight((int *)a2, a1, a3);
LABEL_125:
        NodeCandidates = NodeCandidates_StatSelect;
        v72 = 0;
        goto LABEL_126;
      case 7:
      case 8:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode not supported\n");
        return 2229280769;
      default:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_DEFAULT\n");
        NodeCandidates = mfs_Search_FindNodeCandidates(a2, a1, a3);
        v72 = 1;
LABEL_126:
        if ((NodeCandidates & 0x80000000) != 0)
          return NodeCandidates;
        v73 = (_DWORD *)heap_Calloc(*(_QWORD **)(v6 + 8), v7, 4);
        *(_QWORD *)(a1 + 2016) = v73;
        NodeCandidates = 2229280778;
        if (!v73)
          return NodeCandidates;
        if ((_DWORD)v7)
        {
          v74 = v7;
          do
          {
            *v73++ = *(_DWORD *)(a3 + 8240);
            --v74;
          }
          while (v74);
        }
        if (*(_DWORD *)(a3 + 8876))
        {
          v75 = (*v79 - 7) > 4
              ? ConnectedContextLength_TahoeVersion(a3, (unsigned __int8 *)a2, a1)
              : ConnectedContextLength(a3, (unsigned __int8 *)a2, a1);
          NodeCandidates = v75;
          if ((v75 & 0x80000000) != 0)
            return NodeCandidates;
        }
        v76 = *v79 - 2;
        if (v76 < 0xA && ((0x3F1u >> v76) & 1) != 0)
        {
          v69 = (_DWORD *)((char *)&unk_1DECECC44 + 4 * (int)v76);
        }
        else
        {
          inited = PruneDPListOnContext(a3, (unsigned __int8 *)a2, a1, v72);
          if ((inited & 0x80000000) != 0)
            return inited;
        }
        if (*v69 == 8)
          v77 = TransWeights_InitCopy_Default(a3, (int *)a2, a1, v7);
        else
          v77 = TransWeights_InitCopy_0(a3, (int *)a2, a1, v7);
        NodeCandidates = v77;
        if ((v77 & 0x80000000) != 0)
          return NodeCandidates;
        inited = Detect_Sparse_Grid(a3, a1);
        if ((inited & 0x80000000) != 0)
          return inited;
        v78 = *(_QWORD *)(a1 + 2000);
        if (!*(_DWORD *)v78 && *(_DWORD *)(v78 + 4) == 6)
          *(_QWORD *)v78 = 0x300000003;
        break;
    }
  }
  v8 = (int *)(a3 + 25140);
  v9 = *(uint64_t **)(a1 + 2640);
  if (v9)
  {
    v10 = *(unsigned int *)(a1 + 1960);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *((_DWORD *)v9 + 5);
      v13 = *v9;
      do
      {
        v14 = v12 + v11;
        v15 = *(_DWORD *)(v13 + 48 * (v12 + v11));
        if (v15)
        {
          if (v15 == 1)
          {
            v16 = *(_QWORD *)(a1 + 1952) + 32 * v11;
            v17 = *(unsigned int *)(v16 + 16);
            if ((_DWORD)v17)
            {
              v18 = 0;
              v19 = v13 + 48 * v14;
              v20 = *(unsigned int *)(v19 + 24);
              v21 = (int **)(v19 + 8);
              do
              {
                if ((_DWORD)v20)
                {
                  v22 = (_DWORD *)(*(_QWORD *)v16 + 8 * v18);
                  v25 = *v22;
                  v23 = (float *)(v22 + 1);
                  v24 = v25;
                  v26 = *v21;
                  v27 = v20;
                  do
                  {
                    v28 = *v26++;
                    if (v24 == v28)
                      *v23 = *v23 + 5000.0;
                    --v27;
                  }
                  while (v27);
                }
                ++v18;
              }
              while (v18 != v17);
            }
          }
        }
        else
        {
          v29 = *(_DWORD *)(*(_QWORD *)(v13 + 48 * v14 + 8)
                          + 4 * (*(_DWORD *)(v13 + 48 * v14 + 24) - 1));
          if (v29 < a2[274] - 1)
          {
            v30 = *(_QWORD *)(a1 + 1952) + 32 * v11;
            v31 = *(unsigned int *)(v30 + 16);
            if ((_DWORD)v31)
            {
              v32 = 0;
              v33 = *(int **)v30;
              while (1)
              {
                v34 = *v33;
                v33 += 2;
                if (v34 == v29)
                  break;
                if (v31 == ++v32)
                  goto LABEL_25;
              }
              v32 = v32;
            }
            else
            {
              v32 = 0;
            }
            if (v32 != v31)
              goto LABEL_27;
LABEL_25:
            if (*v8 >= 2)
            {
              v32 = 0;
              **(_DWORD **)v30 = v29;
LABEL_27:
              if (v31)
              {
                v35 = 0;
                v36 = 8 * v32;
                v37 = 8 * v31;
                do
                {
                  if (v36 != v35)
                    *(float *)(*(_QWORD *)v30 + v35 + 4) = *(float *)(*(_QWORD *)v30 + v35 + 4) + 5000.0;
                  v35 += 8;
                }
                while (v37 != v35);
              }
            }
          }
        }
        ++v11;
      }
      while (v11 != v10);
    }
  }
  NodeCandidates = mfs_Search_SparseDP((uint64_t)a2, a1, a1 + 2248, a3);
  if ((NodeCandidates & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a1 + 2200))
    {
      FreeRemainingStreams(a1);
      v39 = *(_DWORD *)(a1 + 32);
      if (v39 >= 1)
      {
        v40 = 0;
        v41 = 12;
        do
        {
          v42 = *(_QWORD *)(a1 + 24);
          if (*(_DWORD *)(v42 + v41) != 2)
          {
            BET3FLT__FreePStreamParam((_QWORD *)(v42 + v41 + 12));
            v39 = *(_DWORD *)(a1 + 32);
          }
          ++v40;
          v41 += 1528;
        }
        while (v40 < v39);
      }
    }
    MFS__log_select_Diag(v6, 1, (uint64_t)"}\n");
    if (*(_DWORD *)(a1 + 2592) && (!v8[11] || *v8 >= 2))
      mfs_DeInitHashTable(v6, a1);
  }
  return NodeCandidates;
}

uint64_t TransWeights_InitCopy_0(uint64_t a1, int *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  float v8;
  _QWORD *v9;
  int32x2_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x4_t **v18;
  float v19;
  float32x4_t *v20;
  float v21;
  float32x4_t *v22;
  int v23;
  float **v24;
  int v25;
  float v26;
  float *v27;
  float v28;
  float32x4_t *v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;
  int v34;
  float32x4_t v35;

  v33 = *a2;
  if (*a2 >= 0)
    v7 = *a2;
  else
    v7 = *a2 + 1;
  if ((*(_DWORD *)(a1 + 8968) - 7) >= 5)
    v8 = 1.0;
  else
    v8 = 2.0;
  v9 = BET3FLT__ddcalloc(*(_QWORD **)(*(_QWORD *)(a3 + 1928) + 8), a4, 4);
  if (!v9)
    return 2229280778;
  v11 = v9;
  v10.i32[0] = 1.0;
  if ((*(_DWORD *)(a1 + 8968) - 7) >= 5)
    *(float *)v10.i32 = (float)(*(float *)(a1 + 8160) + *(float *)(a1 + 8124)) + *(float *)(a1 + 8128);
  if (*(int *)(a3 + 608) >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v7 >> 1;
    if (v7 >> 1 <= 2)
      v16 = 2;
    else
      v16 = v7 >> 1;
    v32 = v16;
    v31 = v16 - 1;
    v34 = v7 >> 1;
    v35 = (float32x4_t)vdupq_lane_s32(v10, 0);
    do
    {
      v17 = *(_QWORD *)(a3 + 600);
      if (v14)
      {
        if (v15 < *a2)
        {
          v18 = (float32x4_t **)&v11[v13];
          do
          {
            (*v18)->f32[0] = UNICORN__mfs_Ling_TransWeightsDiphADJ(*(_QWORD **)(a3 + 8), *v14) * *(float *)(a1 + 8160);
            (*v18)->f32[1] = UNICORN__mfs_Ling_TransWeightsDiphMCP(*(_QWORD **)(a3 + 8), *v14) * *(float *)(a1 + 8124);
            v19 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(_QWORD **)(a3 + 8), *v14);
            v20 = *v18++;
            v20->f32[2] = v19 * *(float *)(a1 + 8128);
            v20->i32[3] = 0;
            *v20 = vdivq_f32(*v20, v35);
            ++v15;
            ++v13;
          }
          while (v15 < *a2);
        }
        *(float *)v11[v13] = v8
                           * (float)(UNICORN__mfs_Ling_TransWeightsPhonADJ(*(_QWORD **)(a3 + 8), *v14)
                                   * *(float *)(a1 + 8160));
        *(float *)(v11[v13] + 4) = v8
                                   * (float)(UNICORN__mfs_Ling_TransWeightsPhonMCP(*(_QWORD **)(a3 + 8), *v14)
                                           * *(float *)(a1 + 8124));
        v21 = UNICORN__mfs_Ling_TransWeightsPhonLF0(*(_QWORD **)(a3 + 8), *v14);
        v22 = (float32x4_t *)v11[v13];
        v22->f32[2] = v8 * (float)(v21 * *(float *)(a1 + 8128));
        v22->i32[3] = 0;
        *v22 = vdivq_f32(*v22, v35);
        v23 = v13 + 1;
        v15 = v34;
        if (v33 >= 4)
        {
          v24 = (float **)&v11[v23];
          v23 = v32 + v13;
          v25 = v31;
          do
          {
            v26 = v8
                * (float)(UNICORN__mfs_Ling_TransWeightsDiphADJ(*(_QWORD **)(a3 + 8), *v14) * *(float *)(a1 + 8160));
            v27 = *v24;
            **v24 = v26;
            if ((*(_DWORD *)(a1 + 8968) - 7) <= 4 && v14[6] == *a2)
              *v27 = v26 + 1.0;
            (*v24)[1] = v8
                      * (float)(UNICORN__mfs_Ling_TransWeightsDiphMCP(*(_QWORD **)(a3 + 8), *v14) * *(float *)(a1 + 8124));
            v28 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(_QWORD **)(a3 + 8), *v14);
            v29 = (float32x4_t *)*v24++;
            v29->f32[2] = v8 * (float)(v28 * *(float *)(a1 + 8128));
            v29->i32[3] = 0;
            *v29 = vdivq_f32(*v29, v35);
            --v25;
          }
          while (v25);
          v15 = v34;
        }
      }
      else
      {
        v23 = v13 + v15;
      }
      v14 = (int *)(v17 + 528 * v12++);
      v13 = v23;
    }
    while (v12 < *(int *)(a3 + 608));
  }
  result = 0;
  *(_QWORD *)(a3 + 2072) = v11;
  return result;
}

uint64_t TransWeights_InitCopy_Default(uint64_t a1, int *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v8;
  _QWORD *v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  float32x4_t v18;
  int v19;
  float32x4_t **v20;
  int v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t **v24;
  int v25;
  float32x4_t *v26;
  uint64_t v27;

  v7 = *a2;
  if (*a2 >= 0)
    v8 = *a2;
  else
    v8 = v7 + 1;
  v9 = BET3FLT__ddcalloc(*(_QWORD **)(*(_QWORD *)(a3 + 1928) + 8), a4, 4);
  if (!v9)
    return 2229280778;
  v10.i32[0] = 1.0;
  if ((*(_DWORD *)(a1 + 8968) - 7) >= 5)
    *(float *)v10.i32 = (float)(*(float *)(a1 + 8160) + *(float *)(a1 + 8124)) + *(float *)(a1 + 8128);
  v11 = *(unsigned int *)(a3 + 608);
  if ((int)v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v8 >> 1;
    v16 = *(_QWORD *)(a3 + 600);
    if (v8 >> 1 <= 2)
      v17 = 2;
    else
      v17 = v8 >> 1;
    v18 = (float32x4_t)vdupq_lane_s32(v10, 0);
    v19 = v17 - 1;
    do
    {
      if (v14)
      {
        if (v15 < *a2)
        {
          v20 = (float32x4_t **)&v9[v13];
          v21 = *a2 - v15;
          v13 += v21;
          do
          {
            v22 = *v20++;
            v22->i32[0] = *(_DWORD *)(a1 + 8160);
            v22->i32[1] = *(_DWORD *)(a1 + 8124);
            v22->i32[2] = *(_DWORD *)(a1 + 8128);
            v22->i32[3] = 0;
            *v22 = vdivq_f32(*v22, v18);
            --v21;
          }
          while (v21);
        }
        v23 = (float32x4_t *)v9[v13];
        v23->i32[0] = *(_DWORD *)(a1 + 8160);
        v23->i32[1] = *(_DWORD *)(a1 + 8124);
        v23->i32[2] = *(_DWORD *)(a1 + 8128);
        v23->i32[3] = 0;
        *v23 = vdivq_f32(*v23, v18);
        ++v13;
        if (v7 >= 4)
        {
          v24 = (float32x4_t **)&v9[v13];
          v25 = v19;
          do
          {
            v26 = *v24++;
            v26->i32[0] = *(_DWORD *)(a1 + 8160);
            v26->i32[1] = *(_DWORD *)(a1 + 8124);
            v26->i32[2] = *(_DWORD *)(a1 + 8128);
            v26->i32[3] = 0;
            *v26 = vdivq_f32(*v26, v18);
            ++v13;
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        v13 += v15;
      }
      v14 = v16 + 528 * v12++;
    }
    while (v12 != v11);
  }
  v27 = 0;
  *(_QWORD *)(a3 + 2072) = v9;
  return v27;
}

uint64_t Detect_Sparse_Grid(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v4 = a2 + 1992;
  v11 = 0;
  UNICORN__mfs_S32Vect_Clear((_QWORD *)(a2 + 1992));
  v5 = *(_DWORD *)(a2 + 1936);
  if (v5 < 1)
  {
    result = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    result = 0;
    do
    {
      v10 = *(_DWORD *)(*(_QWORD *)(a2 + 1952) + 32 * v6 + 16);
      if (v10 >= 21)
      {
        v10 = (int)(float)(*(float *)(a1 + 8236) * (float)v10);
        if (*(_DWORD *)(a1 + 8240) < v10)
          v10 = *(_DWORD *)(a1 + 8240);
      }
      if (v10 < 1)
      {
        if (!v8)
        {
          if (v6 - (int)v11 < 2)
          {
            LODWORD(v11) = v6;
          }
          else
          {
            result = mfs_DPLinks_Add(v4, &v11);
            if ((result & 0x80000000) != 0)
              return result;
            v7 = 0;
            v6 = HIDWORD(v11);
            v5 = *(_DWORD *)(a2 + 1936);
          }
          v8 = 1;
        }
      }
      else if (v8 == 1)
      {
        v8 = 0;
        LODWORD(v11) = v6;
        v7 = 1;
      }
      HIDWORD(v11) = ++v6;
    }
    while (v6 < v5);
    if (v7 && !v8)
      result = mfs_DPLinks_Add(v4, &v11);
  }
  if (!*(_DWORD *)(a2 + 2008))
    return mfs_DPLinks_Add(v4, &v11);
  return result;
}

uint64_t mfs_S32Vect_Add(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= *(_DWORD *)(a1 + 20))
  {
    v5 = heap_Realloc(*(uint64_t **)a1, *(_QWORD *)(a1 + 8), 4 * (v4 + 1));
    if (!v5)
      return 2229280778;
    *(_QWORD *)(a1 + 8) = v5;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v4 + 1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
  }
  v6 = 0;
  *(_DWORD *)(v5 + 4 * v4) = a2;
  ++*(_DWORD *)(a1 + 16);
  return v6;
}

uint64_t mfs_DPLinks_Add(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= *(_DWORD *)(a1 + 20))
  {
    v5 = heap_Realloc(*(uint64_t **)a1, *(_QWORD *)(a1 + 8), 8 * (v4 + 1));
    if (!v5)
      return 2229280778;
    *(_QWORD *)(a1 + 8) = v5;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v4 + 1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
  }
  v6 = 0;
  *(_QWORD *)(v5 + 8 * v4) = *a2;
  ++*(_DWORD *)(a1 + 16);
  return v6;
}

uint64_t mfs_TCost_CandidateCostStream_kld_Obersee(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;

  v14 = *(_DWORD *)(a1 + 144);
  v15 = *(float **)(a1 + 32);
  v34 = 0.0;
  v35 = 0.0;
  if (*v15 >= 0.0)
    v16 = *v15;
  else
    v16 = 0.01;
  if (v15[v14 - 1] >= 0.0)
    v17 = v15[v14 - 1];
  else
    v17 = 0.01;
  mfs_getBeginEndPitch_Obersee(a2, a4, &v35, &v34);
  if (v35 >= 0.0)
    v18 = v35;
  else
    v18 = 0.01;
  if (v34 >= 0.0)
    v19 = v34;
  else
    v19 = 0.01;
  v34 = v19;
  v35 = v18;
  v20 = 1.0 - *(float *)(*(_QWORD *)(a2 + 1072) + 8932);
  v21 = mfs_TCost_LF0_BND_distance(v16, v18, v17, v19);
  v22 = v21;
  v23 = *(float *)(*(_QWORD *)(a2 + 1072) + 8932);
  LOBYTE(v21) = *(_BYTE *)(a4 + 27);
  *(float *)(a7 + 8) = (float)((float)(v23
                                     * mfs_TCost_LF0_SLP_distance(v16, v35, v17, v34, (float)v14, (float)LODWORD(v21)))
                             + (float)(v20 * v22))
                     * (float)(*(float *)(a1 + 4) * *(float *)(a1 + 148));
  v26 = *(unsigned __int16 *)(a4 + 22);
  v27 = *(unsigned __int8 *)(a4 + 27);
  if ((int)(*(_DWORD *)(a1 + 144) - v27) >= 0)
    v28 = *(_DWORD *)(a1 + 144) - v27;
  else
    v28 = v27 - *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a7 + 4) = 0;
  if (*(_BYTE *)(a1 + 216))
  {
    v36 = 0.0;
    result = mfs_kld_lookup(a2, a3, v26, a5, a6, &v36, v24, v25);
    if ((result & 0x80000000) != 0)
      return result;
    v30 = *(float *)(a7 + 4) + (float)(v36 * *(float *)(a1 + 152));
    *(float *)(a7 + 4) = v30;
  }
  else
  {
    v30 = 0.0;
  }
  v31 = (float)v28;
  *(float *)(a7 + 4) = v30 * *(float *)(a1 + 4);
  v32 = *(float *)(a1 + 4) * *(float *)(a1 + 156);
  if (*(_DWORD *)(*(_QWORD *)(a2 + 1072) + 8928) == 6)
    v33 = (float)((float)(v31 * 0.03) / (float)v27) * v32;
  else
    v33 = (float)(v32 * v31) * 0.01;
  result = 0;
  *(float *)a7 = v33;
  return result;
}

uint64_t mfs_InitStream(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x1A18uLL);
  *((_QWORD *)a2 + 241) = a1;
  return BET3FLT__InitVStream(a1, (char *)a2, a3);
}

void mfs_DeInitStream(unsigned int *a1)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (*((_QWORD *)a1 + 241))
  {
    mfs_CostList_DeInit((_QWORD *)a1 + 243);
    if (a1[496])
      mfs_CostList_DeInit((_QWORD *)a1 + 246);
    v2 = a1[516];
    if (v2)
    {
      if (v2 == 1)
      {
        v3 = (uint64_t *)*((_QWORD *)a1 + 255);
        if (v3)
        {
          do
          {
            if (*v3)
            {
              heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), *v3);
              *v3 = 0;
            }
            v4 = (uint64_t *)v3[1];
            heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), (uint64_t)v3);
            v3 = v4;
          }
          while (v4);
        }
      }
    }
    else
    {
      v5 = (uint64_t *)*((_QWORD *)a1 + 253);
      if (v5)
      {
        do
        {
          if (*v5)
          {
            heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), *v5);
            *v5 = 0;
          }
          v6 = (uint64_t *)v5[1];
          heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), (uint64_t)v5);
          v5 = v6;
        }
        while (v6);
      }
    }
    v7 = (uint64_t *)*((_QWORD *)a1 + 321);
    if (v7)
    {
      mfs_uselect_Finalize_Obersee(v7);
      v8 = *((_QWORD *)a1 + 321);
      if (v8)
      {
        heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v8);
        *((_QWORD *)a1 + 321) = 0;
      }
    }
    v9 = *((_QWORD *)a1 + 252);
    if (v9)
    {
      heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v9);
      *((_QWORD *)a1 + 252) = 0;
    }
    BET3FLT__dd_free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), *((uint64_t **)a1 + 259));
    v10 = *((_QWORD *)a1 + 261);
    if (v10)
    {
      heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v10);
      *((_QWORD *)a1 + 261) = 0;
    }
    v11 = *((_QWORD *)a1 + 263);
    if (v11)
    {
      v12 = a1[155];
      if (!(_DWORD)v12)
        goto LABEL_29;
      for (i = 0; i < v12; ++i)
      {
        v14 = *(_QWORD *)(*((_QWORD *)a1 + 263) + 8 * i);
        if (v14)
        {
          heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v14);
          *(_QWORD *)(*((_QWORD *)a1 + 263) + 8 * i) = 0;
          v12 = a1[155];
        }
      }
      v11 = *((_QWORD *)a1 + 263);
      if (v11)
      {
LABEL_29:
        heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v11);
        *((_QWORD *)a1 + 263) = 0;
      }
    }
    for (j = 612; j != 632; j += 2)
    {
      v16 = *(_QWORD *)&a1[j];
      if (v16)
      {
        heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v16);
        *(_QWORD *)&a1[j] = 0;
      }
    }
    v17 = *((_QWORD *)a1 + 254);
    if (v17)
    {
      heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v17);
      *((_QWORD *)a1 + 254) = 0;
    }
    v18 = *((_QWORD *)a1 + 256);
    if (v18)
    {
      heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v18);
      *((_QWORD *)a1 + 256) = 0;
    }
    v19 = *((_QWORD *)a1 + 331);
    if (v19)
    {
      heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v19);
      *((_QWORD *)a1 + 331) = 0;
    }
    v20 = *((_QWORD *)a1 + 332);
    if (v20)
    {
      heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 241) + 8), v20);
      *((_QWORD *)a1 + 332) = 0;
    }
    UNICORN__mfs_S32Vect_Clear((_QWORD *)a1 + 249);
    mfs_UnitSequence_DeInit((uint64_t)(a1 + 528));
    mfs_SegmentList_DeInit((_QWORD *)a1 + 276);
    mfs_SegmentList_DeInit((_QWORD *)a1 + 281);
    v21 = *((_QWORD *)a1 + 8);
    if (v21 && *(_DWORD *)(v21 + 456))
    {
      v22 = 0;
      do
      {
        if (*(_DWORD *)(v21 + 4 * v22 + 416))
        {
          BET3FLT__DeInitMSDUttModel((_QWORD *)a1 + 7, v22);
          v21 = *((_QWORD *)a1 + 8);
        }
        ++v22;
      }
      while (v22 < *(unsigned int *)(v21 + 456));
    }
    MFS__DeInitVStream((int *)a1);
  }
  bzero(a1, 0x1A18uLL);
}

uint64_t mfs_LoadStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;
  int *v15;
  int v16;

  result = MFS__LoadVStream((uint64_t *)a1, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    v7 = *(unsigned int *)(a1 + 32);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 24);
      v10 = (_DWORD *)(v9 + 344);
      do
      {
        if (*(_DWORD *)(v9 + 1528 * v8 + 12))
        {
          v11 = *(unsigned int *)(a3 + 4 * v8 + 264);
          if ((int)v11 >= 1)
          {
            v12 = (int *)(*(_QWORD *)(a2 + 8 * v8 + 2016) + 4);
            v13 = v10;
            do
            {
              *(v13 - 50) = *(v12 - 1);
              v14 = *v12;
              v12 += 2;
              *v13++ = v14;
              --v11;
            }
            while (v11);
          }
        }
        ++v8;
        v10 += 382;
      }
      while (v8 != v7);
      v15 = *(int **)(a1 + 24);
      do
      {
        v16 = *(_DWORD *)(a3 + 4 * v15[3] + 8796);
        v15[368] = v16;
        v15[186] = v16;
        v15 += 382;
        --v7;
      }
      while (v7);
    }
    UNICORN__mfs_S32Vect_Init(*(_QWORD *)(a1 + 1928), (_QWORD *)(a1 + 1992));
    result = mfs_UnitSequence_Init(*(_QWORD *)(a1 + 1928), a1 + 2112, a2);
    if ((result & 0x80000000) == 0)
    {
      result = mfs_SegmentList_Init(*(_QWORD *)(a1 + 1928), a2, a1 + 2208);
      if ((result & 0x80000000) == 0)
        return mfs_SegmentList_Init(*(_QWORD *)(a1 + 1928), a2, a1 + 2248);
    }
  }
  return result;
}

uint64_t mfs_UnitSequence_Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a3;
  UNICORN__mfs_S32Vect_Init(a1, (_QWORD *)(a2 + 32));
  UNICORN__mfs_S32Vect_Init(a1, (_QWORD *)(a2 + 56));
  return 0;
}

_QWORD *mfs_UnitSequence_DeInit(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 24) = 0;
  UNICORN__mfs_S32Vect_Clear((_QWORD *)(a1 + 32));
  return UNICORN__mfs_S32Vect_Clear((_QWORD *)(a1 + 56));
}

uint64_t mfs_UnitSequence_Sequence(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int v20;
  int MessageOffsetMsec;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1096);
  v5 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 16), 264 * *(unsigned int *)(a1 + 48));
  if (!v5)
    return 2229280778;
  v6 = v5;
  *(_QWORD *)(a1 + 16) = v5;
  v7 = *(unsigned int *)(a1 + 48);
  if (v7 < 2)
    goto LABEL_8;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8 + 4);
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8++) + 1;
    if (v10 != v11)
    {
      v12 = *(_QWORD *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
      *(_DWORD *)v12 = v9;
      *(_DWORD *)(v12 + 4) = v8;
      *(_OWORD *)(v12 + 8) = 0uLL;
      *(_OWORD *)(v12 + 24) = 0uLL;
      *(_OWORD *)(v12 + 40) = 0uLL;
      *(_OWORD *)(v12 + 56) = 0uLL;
      *(_OWORD *)(v12 + 72) = 0uLL;
      *(_OWORD *)(v12 + 88) = 0uLL;
      *(_OWORD *)(v12 + 104) = 0uLL;
      *(_OWORD *)(v12 + 120) = 0uLL;
      *(_OWORD *)(v12 + 136) = 0uLL;
      *(_OWORD *)(v12 + 152) = 0uLL;
      *(_OWORD *)(v12 + 168) = 0uLL;
      *(_OWORD *)(v12 + 184) = 0uLL;
      *(_OWORD *)(v12 + 200) = 0uLL;
      *(_OWORD *)(v12 + 216) = 0uLL;
      *(_OWORD *)(v12 + 232) = 0uLL;
      *(_OWORD *)(v12 + 248) = 0uLL;
      ++*(_DWORD *)(a1 + 24);
      v7 = *(unsigned int *)(a1 + 48);
      v9 = v8;
    }
  }
  while (v8 + 1 < v7);
  if ((_DWORD)v8 == v9)
  {
LABEL_8:
    v13 = *(_DWORD *)(a1 + 24);
    if (v13)
      goto LABEL_9;
    return 0;
  }
  v23 = *(_QWORD *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
  *(_DWORD *)v23 = v9;
  *(_DWORD *)(v23 + 4) = v8 + 1;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  *(_OWORD *)(v23 + 184) = 0u;
  *(_OWORD *)(v23 + 200) = 0u;
  *(_OWORD *)(v23 + 216) = 0u;
  *(_OWORD *)(v23 + 232) = 0u;
  *(_OWORD *)(v23 + 248) = 0u;
  v13 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v13;
  if (!v13)
    return 0;
LABEL_9:
  v14 = 0;
  result = 0;
  v16 = v4 - 1;
  while (1)
  {
    v17 = (int *)(v6 + 264 * v14);
    v18 = *v17;
    v20 = v17[1];
    v19 = v17 + 1;
    if ((int)v18 < v20)
      break;
LABEL_17:
    if (++v14 >= (unint64_t)v13)
      return result;
  }
  while (1)
  {
    mfs_getUnitDataFromMfsData(*(unsigned __int8 **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v18), (uint64_t *)&v24);
    MessageOffsetMsec = mfs_GetMessageOffsetMsec(*(_QWORD *)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v18));
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v18) == v16 ? -1 : *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v18);
    result = mfs_SegmentList_Add(a2, v22, *((_BYTE *)v24 + 13), MessageOffsetMsec, (unsigned __int16)(*((_WORD *)v24 + 4) * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1072) + 24)));
    if ((result & 0x80000000) != 0)
      return result;
    if (++v18 >= *v19)
    {
      v13 = *(_DWORD *)(a1 + 24);
      goto LABEL_17;
    }
  }
}

uint64_t mfs_UnitSequence_GetTemplateDur(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 *v8;

  if ((a3 & 0x80000000) != 0)
    return 0;
  if (*(_DWORD *)(a1 + 48) <= (signed int)a3)
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a3);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 1072) + 8328))
  {
    v6 = 0u;
    v7 = 0u;
    mfs_getUnitData_Obersee(v4, a2, v3, (uint64_t)&v6);
    return BYTE11(v7);
  }
  else
  {
    v6 = 0uLL;
    v8 = &v6;
    mfs_getUnitDataFromMfsData((unsigned __int8 *)v4, v3, (uint64_t *)&v8);
    return *((unsigned __int16 *)v8 + 4);
  }
}

uint64_t mfs_UnitSequence_GetTemplateId(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a2)
    return 0x7FFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * a2);
}

uint64_t mfs_UnitSequence_Log(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;

  if (*(_DWORD *)(result + 24))
  {
    v1 = result;
    v2 = 0;
    v3 = *(_QWORD *)(result + 40);
    v4 = *(_QWORD *)(result + 16);
    do
    {
      v5 = (unsigned int *)(v4 + 264 * v2);
      v6 = *(_DWORD *)(v3 + 4 * (int)*v5);
      v7 = *(_QWORD *)(v1 + 8);
      if (v6 < *(_DWORD *)(v7 + 1096) - 1)
        mfs_GetMsgName(v7, v6);
      v8 = (_DWORD *)(v4 + 264 * v2 + 4);
      MFS__log_select_Diag(*(_QWORD *)v1, 1, (uint64_t)"%s.pcm : %d - %d\n");
      v9 = *v5;
      if (v9 < *v8)
      {
        do
        {
          MFS__log_select_Diag(*(_QWORD *)v1, 1, (uint64_t)"%d , ");
          ++v9;
        }
        while (v9 < *v8);
      }
      result = MFS__log_select_Diag(*(_QWORD *)v1, 1, (uint64_t)"\n");
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t mfs_DataCache_Init_Obersee(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  void *v9;
  uint64_t v10;

  result = 2229280774;
  if (a1 && a4 && a6)
  {
    if (a3 <= 0x40)
    {
      *a1 = a2;
      a1[1] = a3;
      *((_QWORD *)a1 + 1) = a4;
      *((_QWORD *)a1 + 2) = a5;
      *((_QWORD *)a1 + 5) = a6;
      v9 = (void *)heap_Calloc(*(_QWORD **)(a6 + 8), 1, 4 * a2);
      *((_QWORD *)a1 + 4) = v9;
      if (v9)
      {
        memset(v9, 255, 4 * *a1);
        v10 = heap_Calloc(*(_QWORD **)(a6 + 8), 1, a1[1] * (unint64_t)*a1);
        *((_QWORD *)a1 + 3) = v10;
        if (v10)
          return 0;
        else
          return 2229280778;
      }
      else
      {
        return 2229280778;
      }
    }
    else
    {
      return 2229280775;
    }
  }
  return result;
}

double mfs_DataCache_DeInit_Obersee(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      heap_Free(*(_QWORD **)(a2 + 8), v4);
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
      heap_Free(*(_QWORD **)(a2 + 8), v5);
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t mfs_DataCache_ReadAndWrite_Obersee(uint64_t a1, unsigned int a2, void *__dst)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  v5 = a2 % *(_DWORD *)a1;
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v6 + 4 * v5) == a2)
  {
    v7 = 0;
    v8 = (const void *)(*(_QWORD *)(a1 + 24) + ((_DWORD)v5 << 6));
  }
  else
  {
    *(_DWORD *)(v6 + 4 * v5) = a2;
    v7 = (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
    v8 = __dst;
    __dst = (void *)(*(_QWORD *)(a1 + 24) + ((_DWORD)v5 << 6));
  }
  memcpy(__dst, v8, *(unsigned int *)(a1 + 4));
  return v7;
}

uint64_t mfs_DataCachePair_Init_Obersee(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  result = 2229280774;
  if (a1 && a4 && a6)
  {
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a3;
    *(_QWORD *)(a1 + 8) = a5;
    v13 = heap_Calloc(*(_QWORD **)(a6 + 8), 1, 48);
    *(_QWORD *)(a1 + 24) = v13;
    if (v13)
    {
      v14 = heap_Calloc(*(_QWORD **)(a6 + 8), 1, 48);
      *(_QWORD *)(a1 + 32) = v14;
      result = 2229280778;
      if (v14)
      {
        result = mfs_DataCache_Init_Obersee(*(unsigned int **)(a1 + 24), a2, a3, a4, a5, a6);
        if ((result & 0x80000000) == 0)
        {
          result = mfs_DataCache_Init_Obersee(*(unsigned int **)(a1 + 32), a2, a3, a4, a5, a6);
          if ((result & 0x80000000) == 0)
          {
            result = 0;
            *(_DWORD *)(a1 + 16) = 0;
          }
        }
      }
    }
    else
    {
      return 2229280778;
    }
  }
  return result;
}

double mfs_DataCachePair_DeInit_Obersee(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    mfs_DataCache_DeInit_Obersee(v4, a2);
    heap_Free(*(_QWORD **)(a2 + 8), *(_QWORD *)(a1 + 24));
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    mfs_DataCache_DeInit_Obersee(v5, a2);
    heap_Free(*(_QWORD **)(a2 + 8), *(_QWORD *)(a1 + 32));
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t mfs_DataCachePair_SetMode_Obersee(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

int8x16_t mfs_DataCachePair_SwapCaches_Obersee(uint64_t a1)
{
  int8x16_t result;

  result = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t mfs_DataCachePair_ReadAndWrite_Obersee(uint64_t a1, unsigned int a2, void *__dst)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = a2 % *(_DWORD *)v5;
    if (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 4 * v6) == a2)
    {
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 24) + (v6 << 6)), *(unsigned int *)(v5 + 4));
      return 0;
    }
    v4 = *(_QWORD *)(a1 + 32);
    return mfs_DataCache_ReadAndWrite_Obersee(v4, a2, __dst);
  }
  if (!v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    return mfs_DataCache_ReadAndWrite_Obersee(v4, a2, __dst);
  }
  return 2229280775;
}

uint64_t select_bet4_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2229280769;
  result = 0;
  *a2 = &ISelect_Bet4;
  return result;
}

uint64_t select_bet4_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2229280775;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 25967;
  }
  return result;
}

uint64_t select_bet4_ClassClose()
{
  return 0;
}

uint64_t select_bet4_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Object;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjOpen;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84[2];
  char *v85;
  unsigned int v86;
  uint64_t v87;
  _BYTE v88[24];
  uint64_t v89;
  _OWORD v90[8];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v86 = 0;
  *(_QWORD *)v84 = 0;
  v85 = 0;
  v5 = 2229280775;
  v83 = 0;
  memset(v90, 0, sizeof(v90));
  if (a5)
  {
    inited = InitRsrcFunction(a3, a4, v84);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      if ((safeh_HandleCheck(a1, a2, 25967, 408) & 0x80000000) == 0)
      {
        *(_QWORD *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Entering select_bet4_ObjOpen", v12, v13, v14, v81);
        v15 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v84 + 8), 1, 10992);
        if (!v15)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 58000, 0, v16, v17, v18, v19, v82);
          v5 = 2229280778;
LABEL_28:
          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Leaving select_bet4_ObjOpen: %x", v44, v45, v46, v5);
          return v5;
        }
        v20 = v15;
        *(_QWORD *)v15 = a3;
        *(_QWORD *)(v15 + 8) = a4;
        v21 = *(_QWORD *)v84;
        *(_DWORD *)(v15 + 10928) = 0;
        *(_QWORD *)(v15 + 16) = v21;
        *(_QWORD *)(v15 + 24) = a1;
        ForcedEEController_Clear(v15 + 10944);
        Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v84 + 48), (uint64_t)"SYNTHSTREAM", &v83);
        if ((Object & 0x80000000) != 0
          || (*(_QWORD *)(v20 + 40) = *(_QWORD *)(v83 + 8),
              Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v84 + 48), (uint64_t)"LINGDB", &v83),
              (Object & 0x80000000) != 0))
        {
          v5 = Object;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58001, 0, v23, v24, v25, v26, v82);
        }
        else
        {
          v27 = *(_QWORD *)(v83 + 8);
          *(_QWORD *)(v20 + 48) = v27;
          ObjOpen = MFS__select_bet3_FeatureExtractObjOpen(a3, a4, *(_QWORD *)(v20 + 40), v27, (_QWORD *)(v20 + 224));
          if ((ObjOpen & 0x80000000) == 0)
          {
            ObjOpen = betX_CreateRegularBrokerString(*(uint64_t *)v84, 0, (char *)v90, 0x80uLL);
            if ((ObjOpen & 0x80000000) == 0)
            {
              v29 = *(_QWORD *)(v20 + 24);
              if (!v29 || (v30 = *(_QWORD *)(v29 + 48)) == 0)
                v30 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 48);
              ObjOpen = objc_GetAddRefCountedObject(v30, (uint64_t)v90, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))select_bet4_loc_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))select_bet4_loc_ObjcVoiceClose, *(uint64_t *)v84, &v83);
              if ((ObjOpen & 0x80000000) == 0)
              {
                v31 = *(_QWORD *)v84;
                v32 = *(_QWORD *)(v83 + 32);
                *(_QWORD *)(v20 + 56) = v32;
                paramc_ParamSetStr(*(_QWORD *)(v31 + 40), (uint64_t)"voicecomponentid", (char *)(v32 + 66842));
                ObjOpen = select_bet4_loc_VoiceSetup((_QWORD *)v20);
                if ((ObjOpen & 0x80000000) == 0)
                {
                  v33 = *(_QWORD *)(*(_QWORD *)v84 + 40);
                  v87 = v20;
                  *(_OWORD *)v88 = xmmword_1EA94A9C8;
                  if ((paramc_ListenerAdd(v33, "frequencyhz", &v87) & 0x80000000) != 0)
                    log_OutPublic(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58002, "%s%s", v34, v35, v36, v37, "param");
                  if (((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v84 + 40), (uint64_t)"bet4suppresschunking", &v85) & 0x80000000) != 0
                     || !*v85)
                    && (v38 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v84 + 40), (uint64_t)"bet4suppresschunking", "no"), (v38 & 0x80000000) != 0))
                  {
                    v5 = v38;
                  }
                  else
                  {
                    v43 = *(_QWORD *)(*(_QWORD *)v84 + 40);
                    v87 = v20;
                    *(_OWORD *)v88 = xmmword_1EA94A9C8;
                    v5 = paramc_ListenerAdd(v43, "bet4suppresschunking", &v87);
                    if ((v5 & 0x80000000) == 0)
                    {
LABEL_32:
                      if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v84 + 40), (uint64_t)"model_template_ratio", &v85) & 0x80000000) == 0&& v85)
                      {
                        v48 = *(_QWORD *)(v20 + 56);
                        if (LH_stricmp(v85, "median"))
                        {
                          if (LH_stricmp(v85, "high"))
                            goto LABEL_39;
                          *(_DWORD *)(v48 + 9080) = 2;
                          v52 = *(_QWORD *)(*(_QWORD *)v84 + 32);
                          v53 = "Model Template Ration: high has not been implemented yet!";
                        }
                        else
                        {
                          *(_QWORD *)(v48 + 8292) = 0x3D23D70A40066666;
                          *(_QWORD *)(v48 + 9004) = 0x400000000;
                          *(_DWORD *)(v48 + 9080) = 1;
                          *(_DWORD *)(v48 + 140) = 1068708659;
                          *(_DWORD *)(v48 + 168) = 1068708659;
                          select_bet4_loc_SetSynthParamFloat(*(uint64_t *)v84, (uint64_t)"bet2voicevuvrelamp", 1.4);
                          select_bet4_loc_SetSynthParamFloat(*(uint64_t *)v84, (uint64_t)"bet2voicemvfboost", *(float *)(v48 + 168));
                          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: f32WContext: %4.2f", v54, v55, v56, COERCE__INT64(*(float *)(v48 + 8292)));
                          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: f32WGenericContext: %4.2f", v57, v58, v59, COERCE__INT64(*(float *)(v48 + 8296)));
                          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: bEnableCCL: %d", v60, v61, v62, *(unsigned int *)(v48 + 9004));
                          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: s32LenCCL: %d", v63, v64, v65, *(unsigned int *)(v48 + 9008));
                          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: s32ModelTemplateRatio: %d", v66, v67, v68, *(unsigned int *)(v48 + 9080));
                          log_OutText(*(_QWORD *)(*(_QWORD *)v84 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: VUV_REL_AMP: %4.2f", v69, v70, v71, COERCE__INT64(*(float *)(v48 + 140)));
                          v52 = *(_QWORD *)(*(_QWORD *)v84 + 32);
                          v53 = "Parameter change: MVF_BOOST: %4.2f";
                          *(double *)&v82 = *(float *)(v48 + 168);
                        }
                        log_OutText(v52, (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)v53, v49, v50, v51, v82);
                      }
LABEL_39:
                      if ((v5 & 0x80000000) == 0)
                      {
                        v72 = 0;
                        v73 = "rate";
                        do
                        {
                          if (strcmp(v73, "bet4suppresschunking"))
                          {
                            if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)v84 + 40), (uint64_t)v73, (int *)&v86) & 0x80000000) != 0)
                            {
                              v86 = dword_1DECECC80[v72];
                              v74 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)v84 + 40), (uint64_t)v73, v86);
                              if ((v74 & 0x80000000) != 0)
                                goto LABEL_51;
                            }
                            v74 = select_bet4_loc_ParamSet(v20, v73, v86);
                            if ((v74 & 0x80000000) != 0)
                              goto LABEL_51;
                            v79 = *(_QWORD *)(*(_QWORD *)v84 + 40);
                            v87 = v20;
                            *(_OWORD *)v88 = xmmword_1EA94A9C8;
                            v74 = paramc_ListenerAdd(v79, v73, &v87);
                            if ((v74 & 0x80000000) != 0)
                              goto LABEL_51;
                          }
                          v87 = 1;
                          *(_QWORD *)v88 = &ISelect_Bet4;
                          *(_OWORD *)&v88[8] = *(_OWORD *)a5;
                          v89 = 0;
                          v74 = objc_RegisterObject(*(_QWORD *)(*(_QWORD *)v84 + 48), (uint64_t)"SELECTBET4", (__int128 *)&v87);
                          if ((v74 & 0x80000000) != 0)
                          {
LABEL_51:
                            v5 = v74;
                            log_OutPublic(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58002, "%s%s", v75, v76, v77, v78, "param");
                            goto LABEL_27;
                          }
                          *(_DWORD *)(v20 + 10928) = 1;
                          v73 = off_1EA94A9A0[++v72];
                        }
                        while (v72 != 3);
                        *(_QWORD *)a5 = v20;
                        *(_DWORD *)(a5 + 8) = 25968;
                        v80 = *(_QWORD *)(a5 + 8);
                        v87 = 1;
                        *(_QWORD *)v88 = &ISelect_Bet4;
                        *(_QWORD *)&v88[8] = v20;
                        *(_QWORD *)&v88[16] = v80;
                        v89 = 0;
                        if ((objc_RegisterObject(*(_QWORD *)(*(_QWORD *)v84 + 48), (uint64_t)"SELECTBET4", (__int128 *)&v87) & 0x80000000) == 0)*(_DWORD *)(v20 + 10928) = 1;
                        v5 = critsec_ObjOpen(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 16), *(_QWORD **)(*(_QWORD *)(v20 + 16) + 8), (uint64_t *)(v20 + 32));
                        goto LABEL_28;
                      }
                      goto LABEL_27;
                    }
                  }
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58002, "%s%s", v39, v40, v41, v42, "param");
                  goto LABEL_32;
                }
              }
            }
          }
          v5 = ObjOpen;
        }
LABEL_27:
        *(_QWORD *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 25968;
        select_bet4_ObjClose(v20, *(_QWORD *)(a5 + 8));
        *(_QWORD *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_28;
      }
      return 2229280776;
    }
  }
  return v5;
}

uint64_t select_bet4_ObjClose(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  int ObjClose;
  int v24;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v3 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if (v3 < 0)
    return 2229280776;
  LODWORD(v7) = v3;
  v8 = *(_QWORD *)(a1 + 16);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Entering select_bet4_ObjClose", v4, v5, v6, v32);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v10 = critsec_ObjClose(v9);
    if (v10 < 0)
      LODWORD(v7) = v10;
  }
  for (i = 0; i != 4; ++i)
  {
    v12 = off_1EA94A9D8[i];
    v13 = *(_QWORD *)(v8 + 40);
    v33 = a1;
    v34 = xmmword_1EA94A9C8;
    v14 = paramc_ListenerRemove(v13, v12, (__int128 *)&v33);
    if ((int)v7 > -1 && v14 < 0)
      v7 = v14;
    else
      v7 = v7;
  }
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (!v17 || (v18 = *(_QWORD *)(v17 + 48)) == 0)
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
    v19 = objc_ReleaseObject(v18, v16);
    *(_QWORD *)(a1 + 56) = 0;
    if ((int)v7 > -1 && v19 < 0)
      v7 = v19;
    else
      v7 = v7;
    select_bet4_loc_VoiceSetup((_QWORD *)a1);
  }
  v21 = *(_QWORD *)(a1 + 224);
  if (v21)
  {
    ObjClose = BET3FLT__select_bet3_FeatureExtractObjClose(v21);
    if ((int)v7 > -1 && ObjClose < 0)
      v7 = ObjClose;
    else
      v7 = v7;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v24 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v24 < 0)
      v7 = v24;
    else
      v7 = v7;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v26 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v26 < 0)
      v7 = v26;
    else
      v7 = v7;
  }
  if (*(_DWORD *)(a1 + 10928) == 1)
    objc_UnregisterObject(*(_QWORD *)(v8 + 48), (uint64_t)"SELECTBET4");
  heap_Free(*(_QWORD **)(v8 + 8), a1);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Leaving select_bet4_ObjClose: %x", v28, v29, v30, v7);
  return v7;
}

uint64_t select_bet4_ObjReopen(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AddRefCountedObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char __s2[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)__s2 = 0u;
  v22 = 0u;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 25968, 10992) & 0x80000000) != 0)
    return 2229280776;
  v6 = a1[2];
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Entering select_bet4_ObjReopen", v3, v4, v5, v19);
  if ((betX_CreateRegularBrokerString(v6, 0, __s2, 0x80uLL) & 0x80000000) != 0
    || (v7 = (const char *)a1[7]) != 0 && !strcmp(v7, __s2))
  {
    AddRefCountedObject = select_bet4_loc_SetSynthParams((uint64_t)a1);
  }
  else
  {
    v8 = a1[3];
    if (!v8 || (v9 = *(_QWORD *)(v8 + 48)) == 0)
      v9 = *(_QWORD *)(a1[2] + 48);
    AddRefCountedObject = objc_GetAddRefCountedObject(v9, (uint64_t)__s2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))select_bet4_loc_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))select_bet4_loc_ObjcVoiceClose, v6, &v20);
    if ((AddRefCountedObject & 0x80000000) == 0)
    {
      v11 = a1[7];
      if (v11)
      {
        v12 = a1[3];
        if (!v12 || (v13 = *(_QWORD *)(v12 + 48)) == 0)
          v13 = *(_QWORD *)(a1[2] + 48);
        objc_ReleaseObject(v13, v11);
      }
      a1[7] = *(_QWORD *)(v20 + 32);
      AddRefCountedObject = select_bet4_loc_VoiceSetup(a1);
    }
  }
  v14 = AddRefCountedObject;
  paramc_ParamSetStr(*(_QWORD *)(v6 + 40), (uint64_t)"voicecomponentid", (char *)(a1[7] + 66842));
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Leaving select_bet4_ObjReopen: %x", v15, v16, v17, v14);
  return v14;
}

uint64_t select_bet4_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v8 = 2229280776;
  if ((safeh_HandleCheck(a1, a2, 25968, 10992) & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 10936) = *(_QWORD *)(a1 + 56) + 128;
    if (ForcedEEController_SetProcessStart(*(uint64_t **)(a1 + 16), a1 + 10944))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40)
                                                                                               + 64))(a3, a4, 78, "application/x-realspeak-cspp-sptchk;version=4.0",
        0,
        0,
        a1 + 512);
      (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40)
                                                                                               + 64))(a3, a4, 78, "application/x-realspeak-cspp-sgt;version=4.0",
        0,
        0,
        a1 + 528);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-bet3-speech-frames;version=5.0",
              0,
              1,
              a1 + 256);
      if ((v12 & 0x80000000) == 0)
      {
        v17 = *(_QWORD *)(a1 + 40);
        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v17 + 64);
        v19 = (*(uint64_t (**)(void))(v17 + 152))();
        v12 = v18(a3, a4, 78, "application/x-realspeak-markers-pp;version=4.0", v19, 1, a1 + 272);
        if ((v12 & 0x80000000) == 0)
        {
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-bandpass-filter;version=4.0",
                  0,
                  1,
                  a1 + 240);
          if ((v12 & 0x80000000) == 0)
          {
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-f0begin;version=4.0",
                    0,
                    1,
                    a1 + 400);
            if ((v12 & 0x80000000) == 0)
            {
              v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-f0end;version=4.0",
                      0,
                      1,
                      a1 + 416);
              if ((v12 & 0x80000000) == 0)
              {
                v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-duration;version=4.0",
                        0,
                        1,
                        a1 + 432);
                if ((v12 & 0x80000000) == 0)
                {
                  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-maxfade-l;version=4.0",
                          0,
                          1,
                          a1 + 448);
                  if ((v12 & 0x80000000) == 0)
                  {
                    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-maxfade-r;version=4.0",
                            0,
                            1,
                            a1 + 464);
                    if ((v12 & 0x80000000) == 0)
                    {
                      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-adjacent-l;version=4.0",
                              0,
                              1,
                              a1 + 480);
                      if ((v12 & 0x80000000) == 0)
                      {
                        v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-adjacent-r;version=4.0",
                                0,
                                1,
                                a1 + 496);
                        if ((v12 & 0x80000000) == 0)
                        {
                          v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usids;version=4.0",
                                  0,
                                  1,
                                  a1 + 288);
                          if ((v12 & 0x80000000) == 0)
                          {
                            v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usoffsets;version=5.0",
                                    0,
                                    1,
                                    a1 + 304);
                            if ((v12 & 0x80000000) == 0)
                            {
                              v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usdurs-32;version=5.0",
                                      0,
                                      1,
                                      a1 + 320);
                              if ((v12 & 0x80000000) == 0)
                              {
                                v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-stsids;version=4.0",
                                        0,
                                        1,
                                        a1 + 336);
                                if ((v12 & 0x80000000) == 0)
                                {
                                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usfrozen;version=4.0",
                                          0,
                                          0,
                                          a1 + 384) & 0x80000000) == 0)
                                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Optional input stream %s opened", v20, v21, v22, (uint64_t)"application/x-realspeak-usfrozen;version=4.0");
                                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usnoreusebias;version=4.0",
                                          0,
                                          0,
                                          a1 + 352) & 0x80000000) == 0)
                                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Optional input stream %s opened", v23, v24, v25, (uint64_t)"application/x-realspeak-usnoreusebias;version=4.0");
                                  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usprosodybias;version=4.0",
                                          0,
                                          0,
                                          a1 + 368);
                                  if ((v26 & 0x80000000) != 0)
                                  {
                                    v8 = 0;
                                  }
                                  else
                                  {
                                    v8 = v26;
                                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Optional input stream %s opened", v27, v28, v29, (uint64_t)"application/x-realspeak-usprosodybias;version=4.0");
                                  }
                                  goto LABEL_26;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v8 = v12;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58004, "%s%s", v13, v14, v15, v16, "contentType");
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Forced early emission requires a clock external service", v9, v10, v11, v31);
      v8 = 2229280786;
    }
    select_bet4_ProcessEnd(a1, a2);
LABEL_26:
    *(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8564) = select_bet4_UpdateEarlyEmission(*(_QWORD *)(a1 + 16));
  }
  return v8;
}

uint64_t select_bet4_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  int v24;
  kaldi::nnet1::Component *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v56;
  int v57;
  int v59;
  int v61;
  int v63;
  int v65;
  int v67;
  int v69;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int ProcessEnd;
  int v84;
  int v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t Process;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float *v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  float *v111;
  unsigned int v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  unsigned int i;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _DWORD *v130;
  uint64_t Stream;
  int v132;
  uint64_t v133;
  const float *v134;
  float32x2_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  _DWORD *v175;
  int v176;
  double v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  int *v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  BOOL v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int hasCharPtrArg;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  _DWORD *v241;
  uint64_t v242;
  float v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  _DWORD *v249;
  _DWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  float v257;
  float v258;
  int v259;
  _DWORD *v260;
  _DWORD *v261;
  _DWORD *v262;
  int v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  double v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  _DWORD *v314;
  uint64_t v315;
  _DWORD *v316;
  _DWORD *v317;
  _DWORD *v318;
  _DWORD *v319;
  _DWORD *v320;
  _DWORD *v321;
  _DWORD *v322;
  uint64_t v323;
  _DWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  int *v348;
  int v349;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _DWORD *v371;
  int *v372;
  int *v373;
  int *v374;
  int v375;
  int v376;
  _DWORD *v377;
  _DWORD *v378;
  _DWORD *v379;
  _DWORD *v380;
  _DWORD *v381;
  _DWORD *v382;
  _DWORD *v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD v387[2];

  v384 = 0;
  if ((safeh_HandleCheck(a1, a2, 25968, 10992) & 0x80000000) != 0)
    return 2229280776;
  *a5 = 1;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Entering select_bet4_Process function", v9, v10, v11, v364);
  v15 = (unsigned int *)(a1 + 4200);
  v16 = *(_DWORD *)(a1 + 10880);
  if (!*(_QWORD *)(a1 + 6128))
  {
    if (!v16)
      goto LABEL_19;
    goto LABEL_14;
  }
  if (v16)
  {
LABEL_14:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Finally deinitialising stream", v12, v13, v14, v365);
    v25 = (kaldi::nnet1::Component *)critsec_Enter(*(_QWORD **)(a1 + 32));
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 56);
    v28 = kaldi::nnet1::Component::IsUpdatable(v25) - *(_DWORD *)(a1 + 6812);
    log_OutText(*(_QWORD *)(v26 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"For early emission timing estimate, utterance consisted of %d ms, computation time was %d ms", v29, v30, v31, *(unsigned int *)(a1 + 6804));
    v35 = *(_DWORD *)(a1 + 6804);
    v36 = *(_QWORD *)(v27 + 37640);
    v37 = *(unsigned int *)(v36 + 6408);
    *(_DWORD *)(v36 + 6400) += v35 - *(_DWORD *)(v36 + 4 * v37);
    *(_DWORD *)(v36 + 4 * v37) = v35;
    v38 = v36 + 4 * *(unsigned int *)(v36 + 6408);
    *(_DWORD *)(v36 + 6404) += v28 - *(_DWORD *)(v38 + 3200);
    *(_DWORD *)(v38 + 3200) = v28;
    v39 = (*(_DWORD *)(v36 + 6408) + 1) % 0x320u;
    *(_DWORD *)(v36 + 6408) = v39;
    v40 = *(float *)(v36 + 6412);
    if (v40 != 0.0 || v39 >= 0x32)
    {
      v41 = *(_DWORD *)(v36 + 6404);
      if (v41)
      {
        v40 = (double)*(int *)(v36 + 6400) / (double)v41;
        *(float *)(v36 + 6412) = v40;
      }
    }
    log_OutText(*(_QWORD *)(v26 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Current search-xRT estimate for early emission is %.4f", v32, v33, v34, COERCE__INT64(v40));
    critsec_Leave(*(_QWORD **)(a1 + 32));
    mfs_DeInitStream((unsigned int *)(a1 + 4200));
    *(_DWORD *)(a1 + 10880) = 0;
LABEL_19:
    *(_DWORD *)(a1 + 10916) = 0;
    v42 = a1 + 544;
    inited = MFS__select_bet3_FeatureExtractProcessStart(*(uint64_t **)(a1 + 224), *(_QWORD *)(a1 + 56) + 37888, a3, a4, (_QWORD *)(a1 + 544), &v384);
    if ((inited & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58005, "%s%x", v43, v44, v45, v46, "lhError");
      return inited;
    }
    if (*(__int16 *)(a1 + 554) <= 1)
    {
      v47 = v384;
      if (v384)
      {
        v48 = *(_QWORD *)(a1 + 256);
        if (v48)
        {
          LODWORD(inited) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v48, *(_QWORD *)(a1 + 264));
          *(_QWORD *)(a1 + 256) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 264) = v49;
        }
        if (*(_QWORD *)(a1 + 272))
        {
          if (*(_DWORD *)(a1 + 4064))
          {
            LODWORD(inited) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 104))();
            if ((inited & 0x80000000) != 0)
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v50, v51, v52, v53, "contentType");
          }
          v54 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280));
          if ((int)inited > -1 && v54 < 0)
            v56 = v54;
          else
            v56 = inited;
          v57 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296));
          if (v56 > -1 && v57 < 0)
            v56 = v57;
          v59 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408));
          if (v56 > -1 && v59 < 0)
            v56 = v59;
          v61 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 416), *(_QWORD *)(a1 + 424));
          if (v56 > -1 && v61 < 0)
            v56 = v61;
          v63 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440));
          if (v56 > -1 && v63 < 0)
            v56 = v63;
          v65 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456));
          if (v56 > -1 && v65 < 0)
            v56 = v65;
          v67 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 472));
          if (v56 > -1 && v67 < 0)
            v56 = v67;
          v69 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
          if (v56 > -1 && v69 < 0)
            v56 = v69;
          v71 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 504));
          if (v56 > -1 && v71 < 0)
            LODWORD(inited) = v71;
          else
            LODWORD(inited) = v56;
          *(_QWORD *)(a1 + 400) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 408) = v73;
          *(_QWORD *)(a1 + 416) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 424) = v74;
          *(_QWORD *)(a1 + 432) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 440) = v75;
          *(_QWORD *)(a1 + 448) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 456) = v76;
          *(_QWORD *)(a1 + 464) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 472) = v77;
          *(_QWORD *)(a1 + 480) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 488) = v78;
          *(_QWORD *)(a1 + 496) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 504) = v79;
          *(_QWORD *)(a1 + 272) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 280) = v80;
          *(_QWORD *)(a1 + 288) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 296) = v81;
        }
        v47 = 1;
      }
      *a5 = v47;
      ProcessEnd = MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (_QWORD *)(a1 + 544));
      if ((int)inited > -1 && ProcessEnd < 0)
        v84 = ProcessEnd;
      else
        v84 = inited;
      v85 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 64))(a3, a4);
      if (v84 > -1 && v85 < 0)
        return v85;
      else
        return v84;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Features have been extracted", v44, v45, v46, v365);
    *(_DWORD *)(a1 + 10900) = 0;
    inited = mfs_InitStream(*(_QWORD *)(a1 + 16), (void *)(a1 + 4200), *(_DWORD **)(a1 + 10936));
    critsec_Enter(*(_QWORD **)(a1 + 32));
    *(_DWORD *)(a1 + 6816) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 37640) + 6412);
    critsec_Leave(*(_QWORD **)(a1 + 32));
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Stream initialised for the first time", v87, v88, v89, v366);
    if ((inited & 0x80000000) == 0)
    {
      v93 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 6584) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 6600) = v93;
      v94 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 6616) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 6632) = v94;
      v95 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 6520) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + 6536) = v95;
      v96 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 6552) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 6568) = v96;
      v97 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 6488) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a1 + 6504) = v97;
      Process = MFS__select_bet3_FeatureExtractProcess(*(uint64_t **)(a1 + 224), *(_QWORD *)(a1 + 10936), a3, a4, *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), *(_QWORD *)(a1 + 528), *(_QWORD *)(a1 + 536), (unsigned int *)(a1 + 232), a1 + 544, (uint64_t *)(a1 + 10888), (_DWORD *)(a1 + 10896));
      if ((Process & 0x80000000) != 0)
      {
        inited = Process;
      }
      else if (*(__int16 *)(a1 + 554) < 1)
      {
        inited = 0;
      }
      else
      {
        v372 = a5;
        v99 = 0;
        v375 = *(unsigned __int16 *)(a1 + 554);
        v100 = *(_QWORD *)(a1 + 56);
        v101 = v100 + 66288;
        v102 = v100 + 37888;
        do
        {
          v103 = *(unsigned int *)(v101 + 8);
          if ((_DWORD)v103)
          {
            v104 = 0;
            v105 = *(_QWORD *)v101;
            v106 = (float *)(*(_QWORD *)v101 + 8);
            do
            {
              if (featex_bet5_loc_TransRulesMatch(v102, v105, a1 + 544, (__int16)v99, v104))
              {
                v107 = *((unsigned __int8 *)v106 - 1) + v99 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 544) + 3360);
                *(_DWORD *)(*(_QWORD *)(a1 + 4128) + 4 * v107) = (float)((float)(*v106
                                                                                               * (float)*(unsigned int *)(*(_QWORD *)(a1 + 4128) + 4 * v107))
                                                                                       + 0.5);
                v103 = *(unsigned int *)(v101 + 8);
              }
              ++v104;
              v106 += 3;
            }
            while (v104 < v103);
          }
          v108 = *(unsigned int *)(v101 + 24);
          if ((_DWORD)v108)
          {
            v109 = 0;
            v110 = *(_QWORD *)(v101 + 16);
            v111 = (float *)(v110 + 8);
            do
            {
              if (featex_bet5_loc_TransRulesMatch(v102, v110, a1 + 544, (__int16)v99, v109))
              {
                v112 = *((unsigned __int8 *)v111 - 1) + v99 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 544) + 3360);
                *(_DWORD *)(*(_QWORD *)(a1 + 4136) + 4 * v112) = (float)((float)(*v111
                                                                                               * (float)*(unsigned int *)(*(_QWORD *)(a1 + 4136) + 4 * v112))
                                                                                       + 0.5);
                v108 = *(unsigned int *)(v101 + 24);
              }
              ++v109;
              v111 += 3;
            }
            while (v109 < v108);
          }
          ++v99;
        }
        while (v99 != v375);
        inited = 0;
        a5 = v372;
        v15 = (unsigned int *)(a1 + 4200);
      }
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Feature extraction successful", v90, v91, v92, v367);
    *(_DWORD *)(a1 + 10916) = 0;
    *(_DWORD *)(a1 + 10896) = 0;
    v115 = *(_QWORD *)(a1 + 6840);
    if (v115)
    {
      FreeBET4TuningData((_QWORD *)a1, v115);
      *(_QWORD *)(a1 + 6840) = 0;
    }
    if ((inited & 0x80000000) != 0)
      goto LABEL_324;
    v386 = 0;
    v387[0] = 0;
    v385 = 0;
    LODWORD(v383) = 0;
    v116 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _DWORD **))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), v387, &v383);
    v117 = v383;
    if (v116 < 0 || !(_DWORD)v383)
      v387[0] = 0;
    v118 = v383 >> 2;
    LODWORD(v383) = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _DWORD **))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), &v386, &v383) & 0x80000000) != 0|| !(_DWORD)v383)
    {
      v386 = 0;
    }
    else if (v117 >= 4)
    {
      if (v383 / 0x1F8 != v118)
        goto LABEL_315;
    }
    else
    {
      v118 = v383 / 0x1F8;
    }
    LODWORD(v383) = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _DWORD **))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), &v385, &v383) & 0x80000000) != 0|| !(_DWORD)v383)
    {
      v385 = 0;
      if (!v118)
      {
LABEL_133:
        v123 = *(__int16 *)(a1 + 4068);
        if (v123 < 1)
        {
          i = 0;
        }
        else
        {
          for (i = 0; i < v123; i = (unsigned __int16)(i + 1))
          {
            if (*(_DWORD *)(*(_QWORD *)(a1 + 4152) + 4 * i) != -1)
              break;
          }
        }
        if (i == v123)
          goto LABEL_315;
        v118 = *(unsigned __int16 *)(a1 + 4068);
      }
    }
    else
    {
      v122 = v383 >> 3;
      if (v118)
      {
        if (v122 != (unsigned __int16)v118)
          goto LABEL_315;
        goto LABEL_273;
      }
      v118 = v383 >> 3;
      if (!v122)
        goto LABEL_133;
    }
LABEL_273:
    v233 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 24);
    v234 = v233;
    if (!v233)
      goto LABEL_316;
    *(_DWORD *)(v233 + 8) = v118;
    v235 = v118;
    v236 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v118, 48);
    *(_QWORD *)v234 = v236;
    if (v236)
    {
      v374 = a5;
      v237 = -1;
      if (v118)
      {
        v238 = 0;
        while (1)
        {
          v239 = v238;
          *(_BYTE *)(v236 + 48 * v238 + 28) = 0;
          if (!v386)
            break;
          v240 = *(_DWORD *)(v386 + 504 * v238);
          if (!v240)
            break;
          v241 = (_DWORD *)(*(_QWORD *)v234 + 48 * v239);
          *v241 = 1;
          v241[6] = v240;
          v242 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (v240 + 1), 4);
          v236 = *(_QWORD *)v234;
          *(_QWORD *)(*(_QWORD *)v234 + 48 * v239 + 8) = v242;
          if (!v242)
            goto LABEL_326;
          v244 = v236 + 48 * v239;
          LODWORD(v383) = 0;
          v247 = *(_DWORD *)(v244 + 24);
          v245 = (unsigned int *)(v244 + 24);
          v246 = v247;
          if (v247)
          {
            v246 = 0;
            v248 = v386;
            do
            {
              *(_DWORD *)(v242 + 4 * v246) = *(_DWORD *)(v248 + 504 * v239 + 4 * v246 + 4);
              v246 = (_DWORD)v383 + 1;
              LODWORD(v383) = v246;
            }
            while (v246 < *v245);
          }
          v249 = (_DWORD *)(v242 + 4 * v246);
LABEL_293:
          *v249 = -1;
          v253 = v385;
          if (!v385)
            goto LABEL_305;
          v254 = v385 + 8 * v239;
          v255 = *(unsigned __int8 *)(v254 + 6);
          v256 = *(unsigned __int8 *)(v254 + 4);
          if (!(v255 | v256))
            goto LABEL_305;
          if (v256 == 1)
          {
            v257 = 2.5;
          }
          else
          {
            if (v256 != 2)
              goto LABEL_300;
            v257 = -2.5;
          }
          *(_DWORD *)(v234 + 16) = 1;
          LOBYTE(v243) = *(_BYTE *)(v253 + 8 * v239 + 5);
          v243 = (float)LODWORD(v243) / 100.0;
          *(float *)(v236 + 48 * v239 + 20) = v257 * v243;
LABEL_300:
          if (v255 == 1)
          {
            v258 = 2.5;
            goto LABEL_304;
          }
          if (v255 == 2)
          {
            v258 = -2.5;
LABEL_304:
            *(_DWORD *)(v234 + 12) = 1;
            LOBYTE(v243) = *(_BYTE *)(v253 + 8 * v239 + 7);
            *(float *)(v236 + 48 * v239 + 16) = v258 * (float)((float)LODWORD(v243) / 100.0);
          }
LABEL_305:
          v238 = v239 + 1;
          if (v239 + 1 == v235)
          {
            v237 = v239;
            goto LABEL_307;
          }
        }
        v250 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 2, 4);
        v236 = *(_QWORD *)v234;
        *(_QWORD *)(*(_QWORD *)v234 + 48 * v239 + 8) = v250;
        if (!v250)
        {
LABEL_326:
          FreeBET4TuningData((_QWORD *)a1, v234);
          v234 = 0;
          a5 = v374;
          goto LABEL_316;
        }
        *(_DWORD *)(v236 + 48 * v239 + 24) = 1;
        if (!v387[0] || *(_DWORD *)(v387[0] + 4 * v239) == -1)
        {
          if (*(_DWORD *)(*(_QWORD *)(a1 + 4152) + 4 * v239) == -1)
          {
            *(_DWORD *)(v236 + 48 * v239) = 2;
            *v250 = 0;
            goto LABEL_292;
          }
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 5, 0, (uint64_t)"%s: %u", v119, v120, v121, (uint64_t)"Locked unit");
          v236 = *(_QWORD *)v234;
          v251 = *(_QWORD *)v234 + 48 * v239;
          *(_DWORD *)v251 = 0;
          v252 = *(_QWORD *)(a1 + 4152);
        }
        else
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 5, 0, (uint64_t)"%s: %u", v119, v120, v121, (uint64_t)"Locked unit");
          v236 = *(_QWORD *)v234;
          v251 = *(_QWORD *)v234 + 48 * v239;
          *(_DWORD *)v251 = 0;
          v252 = v387[0];
        }
        v250 = *(_DWORD **)(v251 + 8);
        *v250 = *(_DWORD *)(v252 + 4 * v239);
LABEL_292:
        v249 = v250 + 1;
        goto LABEL_293;
      }
LABEL_307:
      *(_DWORD *)(v236 + 48 * v237) = 4;
      v259 = *(_DWORD *)(v234 + 12);
      if (v259 || *(_DWORD *)(v234 + 16))
      {
        a5 = v374;
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8328))
        {
          v260 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 25296);
          if (v260)
          {
            v261 = v260;
            v262 = v260 + 6286;
            memcpy(v260, (const void *)(*(_QWORD *)(a1 + 56) + 128), 0x62D0uLL);
            v261[2062] = *v262;
            v263 = v262[3];
            v261[2040] = v262[2];
            v261[2045] = v263;
            *((_QWORD *)v261 + 1028) = *((_QWORD *)v261 + 3145);
            v261[2060] = v262[6];
            if (v259)
              v261[2000] = v262[1];
            *(_QWORD *)(a1 + 10936) = v261;
          }
        }
      }
      else
      {
        a5 = v374;
      }
LABEL_316:
      *(_QWORD *)(a1 + 6840) = v234;
      v264 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8560) == 1)
      {
        log_OutText(*(_QWORD *)(v264 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Chunking suppressed therefore features will not be chunked", v119, v120, v121, v368);
        *(_DWORD *)(a1 + 10912) = 1;
        v265 = (_QWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 8);
        *(_QWORD *)(a1 + 10920) = v265;
        if (v265)
        {
          inited = 0;
          *v265 = v42;
LABEL_322:
          v269 = 4;
LABEL_425:
          *a5 = v269;
          return inited;
        }
        inited = 2229280778;
      }
      else
      {
        inited = mfs_SplitFeatures(v264, a1 + 544, (uint64_t *)(a1 + 10920), (unsigned int *)(a1 + 10912));
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Number of feature objects after chunking is %d", v266, v267, v268, *(unsigned int *)(a1 + 10912));
        if (*(_DWORD *)(a1 + 10912) == 1)
          **(_QWORD **)(a1 + 10920) = v42;
        if ((inited & 0x80000000) == 0)
          goto LABEL_322;
      }
LABEL_324:
      mfs_DeInitStream(v15);
      return inited;
    }
    FreeBET4TuningData((_QWORD *)a1, v234);
LABEL_315:
    v234 = 0;
    goto LABEL_316;
  }
  if (!*(_DWORD *)(a1 + 10916))
  {
    if (*(_DWORD *)(a1 + 6792))
    {
      v113 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v114 = "u32SplitFeatIdx is 0, restart after early emission";
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8564) == 1)
    {
      v113 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v114 = "u32SplitFeatIdx is 0, early emission first entry";
    }
    else
    {
      *(_DWORD *)(a1 + 6792) = 2;
      v113 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v114 = "u32SplitFeatIdx is 0, regular emission selected";
    }
    log_OutText(v113, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v114, v12, v13, v14, v365);
    goto LABEL_143;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8328) && *(_DWORD *)(a1 + 6792) == 1)
  {
LABEL_143:
    inited = 0;
    goto LABEL_144;
  }
  v17 = *(_QWORD *)(a1 + 6840);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Reinitialising stream for chunked input", v12, v13, v14, v365);
  v18 = *(_QWORD *)(a1 + 6840);
  if (v18)
    *(_DWORD *)(v18 + 20) += (*(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920)
                                                     + 8 * (*(_DWORD *)(a1 + 10916) - 1))
                                         + 10)
                            - 1)
                           * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 25424);
  mfs_DeInitStream((unsigned int *)(a1 + 4200));
  inited = mfs_InitStream(*(_QWORD *)(a1 + 16), (void *)(a1 + 4200), *(_DWORD **)(a1 + 10936));
  *(_QWORD *)(a1 + 6840) = v17;
  if ((inited & 0x80000000) == 0)
  {
    v23 = *(_QWORD *)(a1 + 10936);
    if (*(_DWORD *)(v23 + 8328))
      v24 = 2 * (*(_DWORD *)(v23 + 8564) == 0);
    else
      v24 = 2;
    v125 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 6584) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a1 + 6600) = v125;
    v126 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 6616) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 6632) = v126;
    v127 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a1 + 6520) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 6536) = v127;
    v128 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a1 + 6552) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a1 + 6568) = v128;
    v129 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 6488) = *(_OWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 6792) = v24;
    *(_OWORD *)(a1 + 6504) = v129;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"u32SplitFeatIdx is %d, stream reinitialised for reuse", v19, v20, v21, *(unsigned int *)(a1 + 10916));
LABEL_144:
  v130 = (_DWORD *)(a1 + 10880);
  if (*(_DWORD *)(a1 + 6792) != 1)
  {
    Stream = mfs_LoadStream(a1 + 4200, *(_QWORD *)(a1 + 56) + 25424, *(_QWORD *)(a1 + 10936));
    *(_QWORD *)(a1 + 4208) = *(_QWORD *)(*(_QWORD *)(a1 + 10920) + 8 * *(unsigned int *)(a1 + 10916));
    if ((Stream & 0x80000000) != 0)
    {
      inited = Stream;
      goto LABEL_160;
    }
    inited = mfs_ParamGenStart(a1 + 4200, (int *)(*(_QWORD *)(a1 + 56) + 25424), *(_DWORD **)(a1 + 10936));
  }
  if ((inited & 0x80000000) == 0)
  {
    v132 = *(_DWORD *)(a1 + 6792);
    v133 = *(unsigned int *)(a1 + 4232);
    if ((int)v133 >= 1)
    {
      v134 = (const float *)(*(_QWORD *)(a1 + 4224) + 8);
      do
      {
        v135 = vld1_dup_f32(v134);
        *((float32x2_t *)v134 - 1) = v135;
        v134 += 382;
        --v133;
      }
      while (v133);
    }
    v136 = *(_QWORD *)(a1 + 10936);
    if (*(_DWORD *)(v136 + 8328))
      v137 = mfs_StatisticalSelection_Obersee(a1 + 4200, a1 + 10944, (int *)(*(_QWORD *)(a1 + 56) + 25424), v136);
    else
      v137 = mfs_StatisticalSelection(a1 + 4200, (unsigned int *)(*(_QWORD *)(a1 + 56) + 25424), *(_QWORD *)(a1 + 10936));
    inited = v137;
    v141 = *(unsigned int *)(a1 + 4232);
    if ((int)v141 >= 1)
    {
      v142 = (_DWORD *)(*(_QWORD *)(a1 + 4224) + 8);
      do
      {
        *v142 = *(v142 - 2);
        v142 += 382;
        --v141;
      }
      while (v141);
    }
    if ((v137 & 0x80000000) == 0)
      goto LABEL_162;
    goto LABEL_161;
  }
LABEL_160:
  v132 = 0;
LABEL_161:
  MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (_QWORD *)(a1 + 544));
LABEL_162:
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Ready to synthesize", v138, v139, v140, v365);
  if ((inited & 0x80000000) == 0)
    inited = mfs_ParamGen(a1 + 4200, (int *)(*(_QWORD *)(a1 + 56) + 25424), *(_QWORD *)(a1 + 10936), (_DWORD *)(a1 + 10880));
  if (*(_DWORD *)(a1 + 6792))
  {
    v146 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8328) == 1)
  {
    v146 = *(_DWORD *)(a1 + 6784) / *(_DWORD *)(*(_QWORD *)(a1 + 56) + 25424);
  }
  else
  {
    v376 = v132;
    if (*(_DWORD *)(a1 + 6472) < 2u)
    {
      LODWORD(v148) = 1;
    }
    else
    {
      v147 = 0;
      v148 = 1;
      do
      {
        if (v147)
        {
          if (*(_DWORD *)(*(_QWORD *)(a1 + 6464) + v147 + 28) == -1)
            break;
          v149 = v148;
        }
        else
        {
          v149 = 1;
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Potential early-emission segment # %d has %d states, starts with unit %d, is %d ms", v143, v144, v145, v149);
        ++v148;
        v147 += 28;
      }
      while (v148 < *(unsigned int *)(a1 + 6472));
    }
    v150 = v148;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early emission target is %d ms\n", v143, v144, v145, *(unsigned int *)(a1 + 6808));
    v154 = 0;
    v155 = 0;
    v156 = 12;
    while (v155 < *(_DWORD *)(a1 + 6808))
    {
      v155 += *(_DWORD *)(*(_QWORD *)(a1 + 6464) + v156);
      ++v154;
      v156 += 28;
      if (v150 == v154)
        goto LABEL_182;
    }
    v150 = v154;
LABEL_182:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"To satisfy early emission requirement, %d segments will be emitted", v151, v152, v153, v150);
    v160 = *(_QWORD *)(a1 + 6464);
    v161 = 0;
    if ((_DWORD)v150)
    {
      v162 = v150;
      v163 = (int *)(v160 + 16);
      do
      {
        v164 = *v163;
        v163 += 7;
        v161 += v164;
        --v162;
      }
      while (v162);
    }
    *(_DWORD *)(a1 + 6836) = v161 - 1;
    v165 = (*(_DWORD *)(v160 + 28 * (v150 - 1))
                        + *(_DWORD *)(v160 + 28 * (v150 - 1) + 16)
                        - 1);
    *(_DWORD *)(a1 + 6832) = v165;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Subsequent emission will be forced to have unit %d at time index %d\n", v157, v158, v159, v165);
    *(_DWORD *)(a1 + 6800) = v150;
    v146 = v161 / *(_DWORD *)(*(_QWORD *)(a1 + 56) + 25424);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early emission will consist of %d segments (including silence) for a total of %d ms\n", v166, v167, v168, v150);
    v132 = v376;
  }
  v169 = *(_DWORD *)(a1 + 6472);
  if (!v169)
    goto LABEL_191;
  v170 = *(_QWORD *)(a1 + 10936);
  if (!*(_DWORD *)(v170 + 8328))
  {
    v171 = *(_DWORD *)(a1 + 6792);
    if (!v171)
      goto LABEL_198;
  }
  v172 = *(_DWORD *)(a1 + 10912);
  v173 = v172 - 1;
  if (v172 == 1)
  {
    v169 = 0;
LABEL_191:
    v171 = 0;
    goto LABEL_199;
  }
  v174 = *(_DWORD *)(a1 + 10916);
  if (v174 && (v175 = *(_DWORD **)(a1 + 6464), *v175 == -1))
  {
    v176 = v175[3];
    v177 = (double)v176 * 0.4;
    v175[3] = (int)v177;
    v171 = (v176 - (int)v177) / *(_DWORD *)(v170 + 24);
  }
  else
  {
    v171 = 0;
  }
  if (v174 != v173 && (v178 = *(_QWORD *)(a1 + 6464), v179 = v169 - 1, *(_DWORD *)(v178 + 28 * v179) == -1))
  {
    v270 = v178 + 28 * v179;
    v271 = *(_DWORD *)(v270 + 12);
    v272 = (double)v271 * 0.4;
    *(_DWORD *)(v270 + 12) = (int)v272;
    v169 = (v271 - (int)v272) / *(_DWORD *)(v170 + 24);
  }
  else
  {
LABEL_198:
    v169 = 0;
  }
LABEL_199:
  if (v132 != 1)
  {
    v180 = *(unsigned int *)(a1 + 10916);
    v181 = *(_QWORD *)(*(_QWORD *)(a1 + 10920) + 8 * v180);
    v182 = *(_DWORD *)(v181 + 3520) + *(__int16 *)(v181 + 10) + *(_DWORD *)(a1 + 10896);
    *(_DWORD *)(a1 + 10896) = v182;
    if ((_DWORD)v180)
    {
      if (*(_DWORD *)(a1 + 10912) != 1)
        *(_DWORD *)(a1 + 10896) = v182 - 1;
    }
  }
  if ((inited & 0x80000000) != 0)
    goto LABEL_424;
  v183 = (uint64_t *)(a1 + 10888);
  v184 = *(_QWORD *)(a1 + 10888);
  if (v184)
  {
    v185 = *(unsigned int *)(a1 + 10900);
    v186 = *(_DWORD *)(a1 + 10896);
    v187 = *(_DWORD *)(a1 + 6792);
    if (v186 > v185)
    {
      v188 = (int *)(v184 + 32 * v185);
      v189 = v146;
      if (v187)
        v189 = *(_DWORD *)(a1 + 4808);
      v190 = *(_DWORD *)(a1 + 4816);
      if (v190 < v189)
      {
        v191 = 0;
        v192 = *(_DWORD *)(a1 + 10908);
        while (1)
        {
          v193 = *v188;
          v188[3] = v192;
          if (v193 != 33)
          {
            v188[4] = 0;
            goto LABEL_223;
          }
          v194 = *(_DWORD *)(*(_QWORD *)(a1 + 4800) + 528 * v190 + 24);
          v188[4] = v194;
          if (v188[6] == 35)
          {
            if (!v171 || v190)
            {
              if (!v169)
                goto LABEL_222;
              v196 = *(_DWORD *)(a1 + 4808);
              v197 = __OFSUB__(v196, 1);
              v198 = v196 - 1;
              if (v198 < 0 != v197 || v190 != v198)
                goto LABEL_222;
              if (v190)
              {
                v195 = v169;
                if (v194 <= v169)
                  goto LABEL_222;
LABEL_215:
                v194 -= v195;
                v188[4] = v194;
                goto LABEL_222;
              }
            }
            v195 = v171;
            if (v194 > v171)
              goto LABEL_215;
          }
LABEL_222:
          v192 += v194;
          *(_DWORD *)(a1 + 10908) = v192;
          *(_DWORD *)(a1 + 4816) = ++v190;
LABEL_223:
          v188 += 8;
          v199 = (v191 + 1);
          if (v190 < v189)
          {
            v200 = v185 + 1 + v191++;
            if (v200 < v186)
              continue;
          }
          goto LABEL_228;
        }
      }
      v199 = 0;
LABEL_228:
      if (v187 || v146 == *(_DWORD *)(a1 + 4808))
      {
        if (*v130)
        {
          v201 = v199 + v185;
          if ((int)v199 + (int)v185 < v186)
          {
            v202 = *(_DWORD *)(a1 + 10908);
            v203 = v188 + 4;
            do
            {
              *(v203 - 1) = v202;
              *v203 = 0;
              v203 += 8;
              ++v201;
            }
            while (v201 < v186);
            v199 = v186 - v185;
          }
        }
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"About to write %d markers, starting with index %d", v143, v144, v145, v199);
      v207 = *(unsigned int *)(a1 + 10900);
      if (v207 < (int)v207 + (int)v199)
      {
        v373 = a5;
        v208 = 32 * v207;
        do
        {
          v209 = *(_DWORD *)(*v183 + v208);
          if (v209 == 0x4000)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Outputting marker with index %4d:tag=%d Value=?some pointer? posCur=%d lenCur=%d", v204, v205, v206, v207);
          }
          else
          {
            hasCharPtrArg = marker_hasCharPtrArg(v209);
            v214 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
            if (hasCharPtrArg)
              log_OutText(v214, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Outputting marker with index %4d:tag=%d szValue=%s posCur=%d lenCur=%d", v210, v211, v212, v207);
            else
              log_OutText(v214, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Outputting marker with index %4d:tag=%d u32Value=%d posCur=%d lenCur=%d", v210, v211, v212, v207);
          }
          if (*(_DWORD *)(*v183 + v208) == 33)
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Marker was a PHONEME_MARKER with symbol %c", v204, v205, v206, *(unsigned int *)(*v183 + v208 + 24));
          ++v207;
          v208 += 32;
        }
        while (v207 < (*(_DWORD *)(a1 + 10900) + v199));
        LODWORD(v207) = *(_DWORD *)(a1 + 10900);
        v130 = (_DWORD *)(a1 + 10880);
        a5 = v373;
      }
      if ((_DWORD)v199)
      {
        inited = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 10888) + 32 * v207, (32 * v199));
        if ((inited & 0x80000000) != 0)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v215, v216, v217, v218, "contentType");
      }
      v219 = *(_DWORD *)(a1 + 10900) + v199;
      *(_DWORD *)(a1 + 10900) = v219;
      v187 = *(_DWORD *)(a1 + 6792);
      if (v187)
      {
        v15 = (unsigned int *)(a1 + 4200);
        if (*(_DWORD *)(a1 + 10912) != 1)
          *(_DWORD *)(a1 + 10900) = v219 - 1;
      }
      else
      {
        v15 = (unsigned int *)(a1 + 4200);
      }
    }
  }
  else
  {
    v187 = *(_DWORD *)(a1 + 6792);
  }
  if (v187 != 1 && (inited & 0x80000000) == 0)
  {
    v387[0] = v15;
    v220 = *(unsigned int *)(a1 + 4232);
    if ((int)v220 >= 1)
    {
      v221 = *(_DWORD **)(a1 + 4224);
      do
      {
        *v221 = 0;
        v221 += 382;
        --v220;
      }
      while (v220);
    }
    inited = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), v387, 8);
    if ((inited & 0x80000000) != 0)
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v222, v223, v224, v225, "contentType");
  }
  if ((inited & 0x80000000) != 0)
    goto LABEL_424;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 10936) + 8348, 4);
  if ((inited & 0x80000000) != 0)
  {
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_423:
    log_OutPublic(v232, (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v226, v227, v228, v229, "contentType");
    goto LABEL_424;
  }
  if (!*v130)
    goto LABEL_424;
  v386 = 0;
  v387[0] = 0;
  v385 = 0;
  v382 = 0;
  v383 = 0;
  v380 = 0;
  v381 = 0;
  v378 = 0;
  v379 = 0;
  v377 = 0;
  v371 = v130;
  if (v132 == 2)
    goto LABEL_268;
  if (v132 != 1)
  {
    if (v132)
    {
      v231 = 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 6792) == 2)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early emission was countermanded, regular emission took place instead", v227, v228, v229, v369);
LABEL_268:
        v230 = 0;
        v231 = *(_DWORD *)(a1 + 6472);
        goto LABEL_332;
      }
      v230 = *(_DWORD *)(a1 + 6800);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 8328))
        goto LABEL_331;
      v231 = *(_DWORD *)(a1 + 6800);
    }
    v230 = 0;
    goto LABEL_332;
  }
  v230 = *(_DWORD *)(a1 + 6800);
LABEL_331:
  v231 = *(_DWORD *)(a1 + 6472) - v230;
LABEL_332:
  v273 = 4 * v231;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v274 = v273;
  else
    v274 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), &v383, v274) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v275, v276, v277, v278, "contentType");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v279 = v273;
  else
    v279 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 416), *(_QWORD *)(a1 + 424), &v382, v279) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v280, v281, v282, v283, "contentType");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v284 = v273;
  else
    v284 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), &v381, v284) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v285, v286, v287, v288, "contentType");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v289 = v273;
  else
    v289 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), &v380, v289) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v290, v291, v292, v293, "contentType");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v294 = v273;
  else
    v294 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 472), &v379, v294) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v295, v296, v297, v298, "contentType");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v299 = v273;
  else
    v299 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488), &v378, v299) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v300, v301, v302, v303, "contentType");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v304 = v273;
  else
    v304 = 4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 504), &v377, v304) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v305, v306, v307, v308, "contentType");
  v309 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), v387, 4 * v231);
  if ((v309 & 0x80000000) != 0)
  {
LABEL_422:
    inited = v309;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  v310 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), &v386, 4 * v231);
  if ((v310 & 0x80000000) != 0)
  {
    inited = v310;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  inited = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), &v385, 4 * v231);
  if ((inited & 0x80000000) != 0)
  {
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (v231)
  {
    v311 = 0;
    v312 = 0;
    v313 = v385;
    do
    {
      v314 = (_DWORD *)(*(_QWORD *)(a1 + 6464) + 28 * (v230 + v311));
      *(_DWORD *)(v387[0] + 4 * v311) = *v314;
      *(_DWORD *)(v386 + 4 * v311) = v314[2];
      *(_DWORD *)(v313 + 4 * v311) = v314[3];
      v369 = v230 + v311;
      MFS__log_select_Diag(*(_QWORD *)(a1 + 16), 1, (uint64_t)"syntheval:Feeding segment %4d unit sequence to synth: id:%u  ofs:%d  dur:%d\n");
      v313 = v385;
      v312 += *(_DWORD *)(v385 + 4 * v311++);
    }
    while (v231 != v311);
  }
  v315 = *(_QWORD *)(a1 + 10936);
  if (*(_DWORD *)(v315 + 8328))
  {
    kaldi::CuMatrixBase<float>::~CuMatrixBase(v15);
    v315 = *(_QWORD *)(a1 + 10936);
  }
  if (!*(_DWORD *)(v315 + 25184))
    goto LABEL_384;
  inited = mfs_Psola_CalculateAdjustments((int *)(*(_QWORD *)(a1 + 56) + 25424), (uint64_t)v15);
  if ((inited & 0x80000000) != 0)
  {
LABEL_424:
    v269 = 2;
    goto LABEL_425;
  }
  if (!v231)
    goto LABEL_385;
  v317 = v382;
  v316 = v383;
  v319 = v380;
  v318 = v381;
  v321 = v378;
  v320 = v379;
  v322 = v377;
  v323 = v231;
  v324 = (_DWORD *)(*(_QWORD *)(a1 + 6856) + 20);
  do
  {
    *v316++ = *(v324 - 2);
    *v317++ = *(v324 - 1);
    *v318++ = *v324;
    *v319++ = v324[1];
    *v320++ = v324[2];
    *v321++ = v324[3];
    *v322++ = v324[4];
    v324 += 10;
    --v323;
  }
  while (v323);
LABEL_384:
  if ((inited & 0x80000000) != 0)
    goto LABEL_424;
LABEL_385:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v325 = v273;
  else
    v325 = 4;
  v326 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), v325);
  if ((v326 & 0x80000000) != 0)
  {
    inited = v326;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v327 = v273;
  else
    v327 = 4;
  v328 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 416), *(_QWORD *)(a1 + 424), v327);
  if ((v328 & 0x80000000) != 0)
  {
    inited = v328;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v329 = v273;
  else
    v329 = 4;
  v330 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), v329);
  if ((v330 & 0x80000000) != 0)
  {
    inited = v330;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v331 = v273;
  else
    v331 = 4;
  v332 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), v331);
  if ((v332 & 0x80000000) != 0)
  {
    inited = v332;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v333 = v273;
  else
    v333 = 4;
  v334 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 472), v333);
  if ((v334 & 0x80000000) != 0)
  {
    inited = v334;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v335 = v273;
  else
    v335 = 4;
  v336 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488), v335);
  if ((v336 & 0x80000000) != 0)
  {
    inited = v336;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 10936) + 25184))
    v337 = v273;
  else
    v337 = 4;
  v338 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 504), v337);
  if ((v338 & 0x80000000) != 0)
  {
    inited = v338;
    v232 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  v309 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), v273);
  if ((v309 & 0x80000000) != 0)
    goto LABEL_422;
  v339 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), v273);
  if ((v339 & 0x80000000) != 0)
  {
    inited = v339;
    v351 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_437:
    log_OutPublic(v351, (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v340, v341, v342, v343, "contentType");
    goto LABEL_424;
  }
  v344 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), v273);
  if ((v344 & 0x80000000) != 0)
  {
    inited = v344;
    v351 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_437;
  }
  v345 = *(_QWORD *)(a1 + 10936);
  if (*(_DWORD *)(v345 + 8328) && *(_DWORD *)(v345 + 8564))
  {
    v346 = *(unsigned int *)(a1 + 6472);
    if ((_DWORD)v346)
    {
      v347 = 0;
      v348 = (int *)(*(_QWORD *)(a1 + 6464) + 16);
      do
      {
        v349 = *v348;
        v348 += 7;
        v347 += v349;
        --v346;
      }
      while (v346);
    }
    else
    {
      v347 = 0;
    }
    if (v347 < 3 * *(_DWORD *)(a1 + 4808) - 1)
      goto LABEL_444;
  }
  v352 = *(_DWORD *)(a1 + 6360);
  if (!v352)
  {
LABEL_444:
    inited = 0;
  }
  else
  {
    inited = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 6352), (4 * v352));
    if ((inited & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v353, v341, v342, v343, "contentType");
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v354, v355, v356, v357, "contentType");
      goto LABEL_424;
    }
  }
  if (!*v371)
    goto LABEL_424;
  if (*(_DWORD *)(a1 + 6792))
  {
    v358 = *(_DWORD *)(a1 + 10916) + 1;
    *(_DWORD *)(a1 + 10916) = v358;
    *(_QWORD *)(a1 + 6780) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 6792) = 1;
    v358 = *(_DWORD *)(a1 + 10916);
  }
  v359 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  if (v358 == *(_DWORD *)(a1 + 10912))
  {
    log_OutText(v359, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Completed synthesis", v341, v342, v343, v369);
    if (*v183)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *v183);
      *v183 = 0;
      *(_QWORD *)(a1 + 10896) = 0;
      *(_DWORD *)(a1 + 10904) = 0;
    }
    mfs_FreeSplitFeatures(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 10920), *(_DWORD *)(a1 + 10912));
    *(_QWORD *)(a1 + 10912) = 0;
    *(_QWORD *)(a1 + 10920) = 0;
    FreeBET4TuningData((_QWORD *)a1, *(_QWORD *)(a1 + 6840));
    *(_QWORD *)(a1 + 6840) = 0;
    v360 = MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (_QWORD *)(a1 + 544));
    if (v360 >= 0)
      inited = inited;
    else
      inited = v360;
    *a5 = 1;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Setting *peResults to FULL", v361, v362, v363, v370);
  }
  else
  {
    log_OutText(v359, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Setting *peResults to PARTIAL", v341, v342, v343, v369);
    *a5 = 2;
    *v371 = 0;
  }
  return inited;
}

uint64_t select_bet4_ProcessEnd(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  int ProcessEnd;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v80;
  int v81;
  uint64_t v82;

  v3 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if (v3 < 0)
    return 2229280776;
  LODWORD(v4) = v3;
  FreeBET4TuningData((_QWORD *)a1, *(_QWORD *)(a1 + 6840));
  mfs_DeInitStream((unsigned int *)(a1 + 4200));
  *(_DWORD *)(a1 + 10880) = 0;
  ProcessEnd = MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (_QWORD *)(a1 + 544));
  if (ProcessEnd >= 0)
    v4 = v4;
  else
    v4 = ProcessEnd;
  v6 = *(_QWORD *)(a1 + 10888);
  if (v6)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v6);
    *(_QWORD *)(a1 + 10888) = 0;
    *(_QWORD *)(a1 + 10896) = 0;
    *(_DWORD *)(a1 + 10904) = 0;
  }
  *(_DWORD *)(a1 + 10908) = 0;
  v7 = *(_QWORD *)(a1 + 10920);
  if (v7)
  {
    mfs_FreeSplitFeatures(*(_QWORD *)(a1 + 16), v7, *(_DWORD *)(a1 + 10912));
    *(_QWORD *)(a1 + 10920) = 0;
  }
  FreeBET4TuningData((_QWORD *)a1, *(_QWORD *)(a1 + 6840));
  *(_QWORD *)(a1 + 6840) = 0;
  *(_QWORD *)(a1 + 10912) = 0;
  v8 = *(_QWORD *)(a1 + 512);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v8, *(_QWORD *)(a1 + 520));
    *(_QWORD *)(a1 + 512) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 520) = v10;
    if (v9 >= 0 || (int)v4 <= -1)
      v4 = v4;
    else
      v4 = v9;
  }
  v12 = *(_QWORD *)(a1 + 528);
  if (v12)
  {
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v12, *(_QWORD *)(a1 + 536));
    *(_QWORD *)(a1 + 528) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 536) = v14;
    if ((int)v4 > -1 && v13 < 0)
      v4 = v13;
    else
      v4 = v4;
  }
  v16 = *(_QWORD *)(a1 + 256);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v16, *(_QWORD *)(a1 + 264));
    *(_QWORD *)(a1 + 256) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 264) = v18;
    if ((int)v4 > -1 && v17 < 0)
      v4 = v17;
    else
      v4 = v4;
  }
  v20 = *(_QWORD *)(a1 + 272);
  if (v20)
  {
    v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v20, *(_QWORD *)(a1 + 280));
    *(_QWORD *)(a1 + 272) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 280) = v22;
    if ((int)v4 > -1 && v21 < 0)
      v4 = v21;
    else
      v4 = v4;
  }
  v24 = *(_QWORD *)(a1 + 352);
  if (v24)
  {
    v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v24, *(_QWORD *)(a1 + 360));
    *(_QWORD *)(a1 + 352) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 360) = v26;
    if ((int)v4 > -1 && v25 < 0)
      v4 = v25;
    else
      v4 = v4;
  }
  v28 = *(_QWORD *)(a1 + 368);
  if (v28)
  {
    v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v28, *(_QWORD *)(a1 + 376));
    *(_QWORD *)(a1 + 368) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 376) = v30;
    if ((int)v4 > -1 && v29 < 0)
      v4 = v29;
    else
      v4 = v4;
  }
  v32 = *(_QWORD *)(a1 + 384);
  if (v32)
  {
    v33 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v32, *(_QWORD *)(a1 + 392));
    *(_QWORD *)(a1 + 384) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 392) = v34;
    if ((int)v4 > -1 && v33 < 0)
      v4 = v33;
    else
      v4 = v4;
  }
  v36 = *(_QWORD *)(a1 + 336);
  if (v36)
  {
    v37 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v36, *(_QWORD *)(a1 + 344));
    *(_QWORD *)(a1 + 336) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 344) = v38;
    if ((int)v4 > -1 && v37 < 0)
      v4 = v37;
    else
      v4 = v4;
  }
  v40 = *(_QWORD *)(a1 + 288);
  if (v40)
  {
    v41 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v40, *(_QWORD *)(a1 + 296));
    *(_QWORD *)(a1 + 288) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 296) = v42;
    if ((int)v4 > -1 && v41 < 0)
      v4 = v41;
    else
      v4 = v4;
  }
  v44 = *(_QWORD *)(a1 + 304);
  if (v44)
  {
    v45 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v44, *(_QWORD *)(a1 + 312));
    *(_QWORD *)(a1 + 304) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 312) = v46;
    if ((int)v4 > -1 && v45 < 0)
      v4 = v45;
    else
      v4 = v4;
  }
  v48 = *(_QWORD *)(a1 + 320);
  if (v48)
  {
    v49 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v48, *(_QWORD *)(a1 + 328));
    *(_QWORD *)(a1 + 320) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 328) = v50;
    if ((int)v4 > -1 && v49 < 0)
      v4 = v49;
    else
      v4 = v4;
  }
  v52 = *(_QWORD *)(a1 + 240);
  if (v52)
  {
    v53 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v52, *(_QWORD *)(a1 + 248));
    *(_QWORD *)(a1 + 240) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 248) = v54;
    if ((int)v4 > -1 && v53 < 0)
      v4 = v53;
    else
      v4 = v4;
  }
  v56 = *(_QWORD *)(a1 + 400);
  if (v56)
  {
    v57 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v56, *(_QWORD *)(a1 + 408));
    *(_QWORD *)(a1 + 400) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 408) = v58;
    if ((int)v4 > -1 && v57 < 0)
      v4 = v57;
    else
      v4 = v4;
  }
  v60 = *(_QWORD *)(a1 + 416);
  if (v60)
  {
    v61 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v60, *(_QWORD *)(a1 + 424));
    *(_QWORD *)(a1 + 416) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 424) = v62;
    if ((int)v4 > -1 && v61 < 0)
      v4 = v61;
    else
      v4 = v4;
  }
  v64 = *(_QWORD *)(a1 + 432);
  if (v64)
  {
    v65 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v64, *(_QWORD *)(a1 + 440));
    *(_QWORD *)(a1 + 432) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 440) = v66;
    if ((int)v4 > -1 && v65 < 0)
      v4 = v65;
    else
      v4 = v4;
  }
  v68 = *(_QWORD *)(a1 + 448);
  if (v68)
  {
    v69 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v68, *(_QWORD *)(a1 + 456));
    *(_QWORD *)(a1 + 448) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 456) = v70;
    if ((int)v4 > -1 && v69 < 0)
      v4 = v69;
    else
      v4 = v4;
  }
  v72 = *(_QWORD *)(a1 + 464);
  if (v72)
  {
    v73 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v72, *(_QWORD *)(a1 + 472));
    *(_QWORD *)(a1 + 464) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 472) = v74;
    if ((int)v4 > -1 && v73 < 0)
      v4 = v73;
    else
      v4 = v4;
  }
  v76 = *(_QWORD *)(a1 + 480);
  if (v76)
  {
    v77 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v76, *(_QWORD *)(a1 + 488));
    *(_QWORD *)(a1 + 480) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 488) = v78;
    if ((int)v4 > -1 && v77 < 0)
      v4 = v77;
    else
      v4 = v4;
  }
  v80 = *(_QWORD *)(a1 + 496);
  if (v80)
  {
    v81 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(v80, *(_QWORD *)(a1 + 504));
    *(_QWORD *)(a1 + 496) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 504) = v82;
    if ((int)v4 > -1 && v81 < 0)
      return v81;
    else
      return v4;
  }
  return v4;
}

uint64_t select_bet4_GetAlphabetInformation(uint64_t a1, int a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  const char **v10;
  const char *v11;
  int v12;
  char *v13;
  char *v14;

  v5 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if ((v5 & 0x80000000) != 0)
    return 2229280776;
  if (!*(_QWORD *)(a1 + 56))
    return 2229280785;
  v6 = v5;
  bzero(a3, 0x985uLL);
  v7 = 0;
  v8 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v7 + 40032) != 255)
    {
      v9 = &a3[(unsigned __int16)v8];
      *v9 = v7;
      v9[514] = *(_BYTE *)(*(_QWORD *)(a1 + 56) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v7 + 40032) + 39004);
      v9[257] = *(_BYTE *)(*(_QWORD *)(a1 + 56) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v7 + 40032) + 38747);
      v9[771] = *(_BYTE *)(*(_QWORD *)(a1 + 56) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v7 + 40032) + 39261);
      v9[1028] = *(_BYTE *)(*(_QWORD *)(a1 + 56) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v7 + 40032) + 39518);
      ++v8;
    }
    ++v7;
  }
  while (v7 != 256);
  __strcpy_chk();
  v10 = *(const char ***)(*(_QWORD *)(a1 + 56) + 40352);
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      v12 = 0;
      v13 = a3 + 1413;
      do
      {
        v14 = strcat(v13, v11);
        *(_WORD *)&v13[strlen(v14)] = 32;
        v11 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 40352) + 8 * (unsigned __int16)++v12);
      }
      while (v11);
    }
  }
  return v6;
}

uint64_t select_bet4_QueryCapability(uint64_t a1, int a2, const char *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v7 = 2229280768;
  v8 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if ((v8 & 0x80000000) != 0)
    return 2229280776;
  v9 = *(_QWORD *)(a1 + 56);
  if (!v9)
    return 2229280785;
  v10 = v8;
  v11 = (_DWORD *)(v9 + 41056);
  if (!strcmp(a3, "PRM"))
  {
    if ((*v11 & 0x80000000) == 0 || (v11[2] & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_11;
  }
  if (!strcmp(a3, "BND"))
  {
    if ((v11[1] & 0x80000000) == 0
      || (v11[2] & 0x80000000) == 0
      || (v11[3] & 0x80000000) == 0
      || (v11[4] & 0x80000000) == 0
      || (v11[5] & 0x80000000) == 0
      || (v11[6] & 0x80000000) == 0
      || (v11[7] & 0x80000000) == 0
      || (v11[8] & 0x80000000) == 0
      || (v11[9] & 0x80000000) == 0
      || (v11[11] & 0x80000000) == 0)
    {
LABEL_22:
      *a4 = 1;
      return v10;
    }
LABEL_11:
    *a4 = 0;
    return v10;
  }
  if (!strcmp(a3, "max-PRM"))
  {
    *(_BYTE *)a4 = 3;
    return v10;
  }
  return v7;
}

uint64_t select_bet4_loc_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t Data;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  unsigned int v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE __dst[408];
  void *__src;
  char *__s1;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char v178;
  _OWORD v179[5];
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  __src = 0;
  memset(__dst, 0, sizeof(__dst));
  inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0)
    return inited;
  memcpy(__dst, __src, sizeof(__dst));
  *(_OWORD *)&__dst[32] = *(_OWORD *)(a5 + 32);
  v177 = 0;
  v176 = 0;
  v175 = 0;
  v173 = 0;
  v174 = 0;
  v171 = 0;
  v172 = 0;
  v170 = 0;
  v169 = 0;
  __s1 = 0;
  *(_QWORD *)(a4 + 32) = 0;
  v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "SEL4", 1031, (uint64_t *)&v177);
  if (v11 < 0)
    return (v11 & 0x1FFFu) - 2065686528;
  v12 = heap_Calloc(*(_QWORD **)&__dst[8], 1, 66912);
  v17 = v12;
  if (!v12)
  {
    log_OutPublic(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 58000, 0, v13, v14, v15, v16, v158);
    Data = 2229280778;
    goto LABEL_47;
  }
  v18 = (_DWORD *)(v12 + 66316);
  v19 = (_DWORD *)(v12 + 25312);
  __strcpy_chk();
  __strcpy_chk();
  *(_QWORD *)&v20 = -1;
  *((_QWORD *)&v20 + 1) = -1;
  *(_OWORD *)(v17 + 40032) = v20;
  *(_OWORD *)(v17 + 40048) = v20;
  *(_OWORD *)(v17 + 40064) = v20;
  *(_OWORD *)(v17 + 40080) = v20;
  *(_OWORD *)(v17 + 40096) = v20;
  *(_OWORD *)(v17 + 40112) = v20;
  *(_OWORD *)(v17 + 40128) = v20;
  *(_OWORD *)(v17 + 40144) = v20;
  *(_OWORD *)(v17 + 40160) = v20;
  *(_OWORD *)(v17 + 40176) = v20;
  *(_OWORD *)(v17 + 40192) = v20;
  *(_OWORD *)(v17 + 40208) = v20;
  *(_OWORD *)(v17 + 40224) = v20;
  *(_OWORD *)(v17 + 40240) = v20;
  *(_OWORD *)(v17 + 40256) = v20;
  *(_OWORD *)(v17 + 40272) = v20;
  *(_OWORD *)(v17 + 41204) = v20;
  *(_OWORD *)(v17 + 40936) = v20;
  *(_OWORD *)(v17 + 40952) = v20;
  *(_OWORD *)(v17 + 40968) = v20;
  *(_OWORD *)(v17 + 40984) = v20;
  *(_OWORD *)(v17 + 41000) = v20;
  *(_OWORD *)(v17 + 41016) = v20;
  *(_OWORD *)(v17 + 41032) = v20;
  *(_OWORD *)(v17 + 41048) = v20;
  *(_OWORD *)(v17 + 41064) = v20;
  *(_OWORD *)(v17 + 41080) = v20;
  *(_OWORD *)(v17 + 41096) = v20;
  *(_OWORD *)(v17 + 41112) = v20;
  *(_OWORD *)(v17 + 41128) = v20;
  *(_OWORD *)(v17 + 41144) = v20;
  *(_OWORD *)(v17 + 41160) = v20;
  *(_OWORD *)(v17 + 41176) = v20;
  *(_OWORD *)(v17 + 41192) = v20;
  *(_OWORD *)(v17 + 41280) = v20;
  *(_OWORD *)(v17 + 41264) = v20;
  *(_DWORD *)(v17 + 40412) = 1;
  if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4maxstaticmemmap", (unsigned int *)(v17 + 66316)) & 0x80000000) != 0)
    *v18 = -1;
  *(_BYTE *)(v17 + 66842) = 0;
  mfs_InitParam(v17 + 128);
  memset(v179, 0, sizeof(v179));
  v22 = select_bet4_ParseRiff((uint64_t)__dst, v17, (uint64_t)v177, 0, (const char *)v179, 0, 0, v21);
  if ((v22 & 0x80000000) != 0)
  {
    Data = v22;
    v178 = 0;
    if (LOBYTE(v179[0]))
    {
      v52 = 0;
      do
      {
        __strcat_chk();
        __strcat_chk();
        ++v52;
      }
      while (*((_BYTE *)v179 + 5 * (unsigned __int16)v52));
    }
    log_OutPublic(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 58003, "%s%s%s%s%s%x", v23, v24, v25, v26, "file");
    goto LABEL_47;
  }
  paramc_ParamSetStr(*(uint64_t *)&__dst[40], (uint64_t)"voicecomponentid", (char *)(v17 + 66842));
  if (!*(_BYTE *)(v17 + 7519) || *(int *)(v17 + 260) <= 0)
  {
    Data = 2229280772;
    log_OutPublic(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 58006, "%s%s", v27, v28, v29, v30, "file");
    goto LABEL_47;
  }
  v31 = (_DWORD *)(v17 + 25424);
  v32 = *(uint64_t **)(v17 + 40352);
  if (v32)
  {
    v33 = *v32;
    if (v33)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        *(_QWORD *)(v17 + 8 * v34 + 5432) = v33;
        v34 = (unsigned __int16)++v35;
        v33 = *(_QWORD *)(*(_QWORD *)(v17 + 40352) + 8 * (unsigned __int16)v35);
      }
      while (v33);
    }
  }
  log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Memory mapped %s: %lu bytes in %lu chunks", v28, v29, v30, (uint64_t)a3);
  v36 = mfs_InitData((uint64_t)__dst, (void *)(v17 + 25424), (_DWORD *)(v17 + 128));
  if ((v36 & 0x80000000) != 0)
  {
    Data = v36;
    goto LABEL_47;
  }
  Data = mfs_LoadData((uint64_t)__dst, (int *)(v17 + 25424), v17 + 128);
  if ((Data & 0x80000000) == 0)
  {
    logAverageSizesOfClusters((uint64_t)__dst, (int *)(v17 + 25424), 1u);
    logAverageSizesOfClusters((uint64_t)__dst, (int *)(v17 + 25424), 2u);
    logAverageSizesOfClusters((uint64_t)__dst, (int *)(v17 + 25424), 0);
    *(_WORD *)(v17 + 41466) = *v31;
    *(_QWORD *)&v45 = 0x100000001;
    *((_QWORD *)&v45 + 1) = 0x100000001;
    *(_OWORD *)(v17 + 41056) = v45;
    *(_OWORD *)(v17 + 41072) = v45;
    *(_QWORD *)(v17 + 41088) = 0x100000001;
    *(_DWORD *)(v17 + 41100) = 1;
    *(_OWORD *)(v17 + 41108) = v45;
    *(_OWORD *)(v17 + 41124) = v45;
    *(_OWORD *)(v17 + 41140) = v45;
    *(_OWORD *)(v17 + 41156) = v45;
    *(_OWORD *)(v17 + 41172) = v45;
    *(_OWORD *)(v17 + 41188) = v45;
    *(_DWORD *)(v17 + 41204) = 1;
    *(_DWORD *)(v17 + 40638) = 33620481;
    *(_BYTE *)(v17 + 40665) = 1;
    *(_QWORD *)(v17 + 40643) = 0x101010101010101;
    *(_QWORD *)(v17 + 40651) = 0x101010101010101;
    *(_DWORD *)(v17 + 40687) = -1;
    *(_WORD *)(v17 + 40691) = -255;
    BYTE1(v45) = 1;
    WORD1(v45) = 257;
    BYTE5(v45) = 1;
    WORD3(v45) = 257;
    BYTE9(v45) = 1;
    WORD5(v45) = 257;
    BYTE13(v45) = 1;
    HIWORD(v45) = 257;
    *(_OWORD *)(v17 + 40786) = v45;
    *(_OWORD *)(v17 + 40773) = v45;
    *(_OWORD *)(v17 + 40757) = v45;
    *(_QWORD *)(v17 + 40809) = 0x101010101010101;
    *(_QWORD *)(v17 + 40817) = 0x101010101010101;
    *(_QWORD *)(v17 + 40825) = 0x101010101010101;
    if ((*(_DWORD *)(v17 + 40992) & 0x80000000) == 0)
    {
      *(_WORD *)(v17 + 40667) = 257;
      if ((*(_DWORD *)(v17 + 41096) & 0x80000000) == 0)
        *(_BYTE *)(v17 + 40711) = 1;
    }
    if ((*(_DWORD *)(v17 + 41008) & 0x80000000) == 0)
      *(_BYTE *)(v17 + 40669) = 1;
    if ((*(_DWORD *)(v17 + 41024) & 0x80000000) == 0)
      *(_BYTE *)(v17 + 40670) = 1;
    if ((*(_DWORD *)(v17 + 41028) & 0x80000000) == 0)
      *(_BYTE *)(v17 + 40671) = 1;
    *(_WORD *)(v17 + 40807) = 257;
    if ((*(_DWORD *)(v17 + 41032) & 0x80000000) == 0)
      *(_BYTE *)(v17 + 40672) = 1;
    if ((*(_DWORD *)(v17 + 41036) & 0x80000000) == 0)
      *(_BYTE *)(v17 + 40673) = 1;
    if ((*(_DWORD *)(v17 + 40956) & 0x80000000) == 0)
      *(_WORD *)(v17 + 40661) = 257;
    if ((*(_DWORD *)(v17 + 41280) & 0x80000000) == 0 || (*(_DWORD *)(v17 + 41284) & 0x80000000) == 0)
      *(_BYTE *)(v17 + 40660) = 8;
    if ((*(_DWORD *)(v17 + 40960) & 0x80000000) == 0)
      *(_WORD *)(v17 + 40663) = 257;
    if (*(_DWORD *)(v17 + 40448))
      *(_BYTE *)(v17 + 40682) = 9;
    *(_WORD *)(v17 + 40712) = 257;
    *(_QWORD *)(v17 + 40701) = 0x101010101010101;
    *(_WORD *)(v17 + 40709) = 257;
    if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4silvit", (unsigned int *)&v173) & 0x80000000) != 0)
    {
      v50 = *(_QWORD *)&__dst[32];
      v49 = *(unsigned int *)(v17 + 8384);
      v51 = "Silence Prune Max remains at its default of %d";
    }
    else
    {
      v49 = v173;
      *(_DWORD *)(v17 + 8384) = v173;
      v50 = *(_QWORD *)&__dst[32];
      v51 = "Silence Prune Max set to %d from pipeline header";
    }
    log_OutText(v50, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v51, v46, v47, v48, v49);
    if ((paramc_ParamGetStr(*(uint64_t *)&__dst[40], (uint64_t)"bet4suppresschunking", &__s1) & 0x80000000) != 0)
    {
      *(_DWORD *)(v17 + 8688) = 0;
    }
    else
    {
      v57 = strcmp(__s1, "yes");
      *(_DWORD *)(v17 + 8688) = v57 == 0;
      if (!v57)
      {
        v58 = "BET4 input chunking will be switched off, from pipeline header";
        goto LABEL_63;
      }
    }
    v58 = "BET4 input chunking will not be switched off";
LABEL_63:
    log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v58, v54, v55, v56, v159);
    if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4psolamode", (unsigned int *)&v172 + 1) & 0x80000000) != 0)
    {
      v63 = *(_QWORD *)&__dst[32];
      v62 = *v19;
      v64 = "PSOLA mode remains at its default of %d";
    }
    else
    {
      v62 = HIDWORD(v172);
      if (!HIDWORD(v172))
      {
        *v19 = 0;
        log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"PSOLA mode set to zero (i.e. disabled) from pipeline header", v59, v60, v61, v160);
LABEL_69:
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionadditionalstates", &v169) & 0x80000000) != 0)
        {
          v69 = *(_QWORD *)&__dst[32];
          v68 = *(unsigned int *)(v17 + 8696);
          v70 = "Early-emission additional states remains at its default of %d (ignored - was only used in old obsolete v"
                "ersion of early-emission)";
        }
        else
        {
          v68 = v169;
          *(_DWORD *)(v17 + 8696) = v169;
          v69 = *(_QWORD *)&__dst[32];
          v70 = "Early-emission additional search states set to %d from pipeline header (ignored - was only used in old o"
                "bsolete version of early-emission)";
        }
        log_OutText(v69, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v70, v65, v66, v67, v68);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionminphonsfirst", (unsigned int *)&v170 + 1) & 0x80000000) != 0)
        {
          v75 = *(_QWORD *)&__dst[32];
          v74 = *(unsigned int *)(v17 + 8700);
          v76 = "Early-emission minimum number of states for first emission remains at its default of %d";
        }
        else
        {
          v74 = (*v31 * HIDWORD(v170));
          *(_DWORD *)(v17 + 8700) = v74;
          v75 = *(_QWORD *)&__dst[32];
          v76 = "Early-emission minimum number of states for first emission set to %d from pipeline header";
        }
        log_OutText(v75, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v76, v71, v72, v73, v74);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionminphonssubsequent", (unsigned int *)&v170 + 1) & 0x80000000) != 0)
        {
          v80 = *(_DWORD *)(v17 + 8700) >> 1;
          *(_DWORD *)(v17 + 8704) = v80;
          v81 = *(_QWORD *)&__dst[32];
          v82 = "Early-emission minimum number of states for subsequent emission remains at its default of %d";
        }
        else
        {
          v80 = (*v31 * HIDWORD(v170));
          *(_DWORD *)(v17 + 8704) = v80;
          v81 = *(_QWORD *)&__dst[32];
          v82 = "Early-emission minimum number of states for subsequent emission set to %d from pipeline header";
        }
        log_OutText(v81, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v82, v77, v78, v79, v80);
        v83 = *(_DWORD *)(v17 + 8704);
        if (v83 >= 1000 * *v31)
          *(_DWORD *)(v17 + 8704) = v83 % 0x3E8;
        v84 = (_DWORD *)(v17 + 8708);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionmaxhypotheses", (unsigned int *)(v17 + 8708)) & 0x80000000) != 0)
        {
          *v84 = -1;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum number of hypotheses: not set", v85, v86, v87, v161);
        }
        else
        {
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum number of hypotheses set to %d from pipeline header", v85, v86, v87, *v84);
        }
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionmaxphonambiguitywindow", (unsigned int *)&v170) & 0x80000000) != 0)
        {
          *(_DWORD *)(v17 + 8712) = -1;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum size of ambiguity window: not set", v88, v89, v90, v162);
        }
        else
        {
          v91 = v170;
          *(_DWORD *)(v17 + 8712) = *v31 * v170;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum size of ambiguity window set to %d phons from pipeline header", v88, v89, v90, v91);
        }
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"applicationstartbuffersizebytes", (unsigned int *)&v170) & 0x80000000) != 0|| *(int *)(v17 + 136) < 1)
        {
          *(_DWORD *)(v17 + 8716) = -1;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Application start buffer size: not set", v92, v93, v94, v163);
        }
        else
        {
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Application start buffer size is set to %d bytes from pipeline header", v92, v93, v94, v170);
          *(_DWORD *)(v17 + 8716) = 1000 * (int)v170 / (2 * *(_DWORD *)(v17 + 136));
        }
        *(_DWORD *)(v17 + 8692) = select_bet4_UpdateEarlyEmission((uint64_t)__dst);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4beamwidth", (unsigned int *)&v176 + 1) & 0x80000000) != 0
          || !HIDWORD(v176))
        {
          v99 = *(_QWORD *)&__dst[32];
          *(double *)&v100 = *(float *)(v17 + 8376);
          v101 = "Beam Width remains at its default of %.2f";
        }
        else
        {
          v98 = (double)HIDWORD(v176) / 1000.0;
          *(float *)(v17 + 8376) = v98;
          v99 = *(_QWORD *)&__dst[32];
          *(double *)&v100 = v98;
          v101 = "Beam Width set to %.2f from pipeline header";
        }
        log_OutText(v99, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v101, v95, v96, v97, v100);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodelimit", (unsigned int *)&v176) & 0x80000000) != 0
          || (v105 = v176, !(_DWORD)v176))
        {
          v106 = *(_QWORD *)&__dst[32];
          v105 = *(unsigned int *)(v17 + 8352);
          v107 = "Node Limit remains at its default of %d";
        }
        else
        {
          *(_DWORD *)(v17 + 8352) = v176;
          *(_DWORD *)(v17 + 8356) = v105;
          v106 = *(_QWORD *)&__dst[32];
          v107 = "Node Limit set to %d from pipeline header";
        }
        log_OutText(v106, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v107, v102, v103, v104, v105);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4prunepercent", (unsigned int *)&v175 + 1) & 0x80000000) != 0)
        {
          v112 = *(_QWORD *)&__dst[32];
          *(double *)&v113 = *(float *)(v17 + 8360);
          v114 = "Prune Percent remains at its default of %.2f";
        }
        else
        {
          if (HIDWORD(v175) > 0x64)
          {
            log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Prune Percent value from pipeline header out of range, ignored.", v108, v109, v110, v164);
LABEL_104:
            if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4prunepercent", (unsigned int *)&v175) & 0x80000000) != 0)
            {
              v119 = *(_QWORD *)&__dst[32];
              *(double *)&v120 = *(float *)(v17 + 8364);
              v121 = "Node Prune Percent remains at its default of %.2f";
            }
            else
            {
              if (v175 > 0x64)
              {
                log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Node Prune Percent value from pipeline header out of range, ignored.", v115, v116, v117, v165);
LABEL_110:
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodeprunemax", (unsigned int *)&v174 + 1) & 0x80000000) != 0|| (v125 = HIDWORD(v174), !HIDWORD(v174)))
                {
                  v126 = *(_QWORD *)&__dst[32];
                  v125 = *(unsigned int *)(v17 + 8368);
                  v127 = "Node Prune Max remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8368) = HIDWORD(v174);
                  v126 = *(_QWORD *)&__dst[32];
                  v127 = "Node Prune Max set to %d from pipeline header";
                }
                log_OutText(v126, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v127, v122, v123, v124, v125);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodeprunemaxunvoiced", (unsigned int *)&v174) & 0x80000000) != 0|| (v131 = v174, !(_DWORD)v174))
                {
                  v132 = *(_QWORD *)&__dst[32];
                  v131 = *(unsigned int *)(v17 + 8372);
                  v133 = "Node Prune Max Unvoiced remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8372) = v174;
                  v132 = *(_QWORD *)&__dst[32];
                  v133 = "Node Prune Max Unvoiced set to %d from pipeline header";
                }
                log_OutText(v132, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v133, v128, v129, v130, v131);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4searchmode", (unsigned int *)&v173 + 1) & 0x80000000) != 0)
                {
                  v138 = *(_QWORD *)&__dst[32];
                  v137 = *(unsigned int *)(v17 + 9096);
                  v139 = "Search mode remains at its default of %d";
                }
                else
                {
                  v137 = HIDWORD(v173);
                  *(_DWORD *)(v17 + 9096) = HIDWORD(v173);
                  v138 = *(_QWORD *)&__dst[32];
                  v139 = "Search mode set to %d from pipeline header";
                }
                log_OutText(v138, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v139, v134, v135, v136, v137);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodescoremax", (unsigned int *)&v172) & 0x80000000) != 0
                  || (v143 = v172, !(_DWORD)v172))
                {
                  v144 = *(_QWORD *)&__dst[32];
                  v143 = *(unsigned int *)(v17 + 8444);
                  v145 = "Node Score Max remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8444) = v172;
                  v144 = *(_QWORD *)&__dst[32];
                  v145 = "Node Score Max set to %d from pipeline header";
                }
                log_OutText(v144, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v145, v140, v141, v142, v143);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodeprunemin", (unsigned int *)&v171 + 1) & 0x80000000) != 0|| (v149 = HIDWORD(v171), !HIDWORD(v171)))
                {
                  v150 = *(_QWORD *)&__dst[32];
                  v149 = *(unsigned int *)(v17 + 8448);
                  v151 = "Node Prune Min remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8448) = HIDWORD(v171);
                  v150 = *(_QWORD *)&__dst[32];
                  v151 = "Node Prune Min set to %d from pipeline header";
                }
                log_OutText(v150, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v151, v146, v147, v148, v149);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlypruning", (unsigned int *)&v171) & 0x80000000) != 0
                  || (v155 = v171, !(_DWORD)v171))
                {
                  v156 = *(_QWORD *)&__dst[32];
                  v155 = *(unsigned int *)(v17 + 8452);
                  v157 = "Early Pruning remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8452) = v171;
                  v156 = *(_QWORD *)&__dst[32];
                  v157 = "Early Pruning set to %d from pipeline header";
                }
                log_OutText(v156, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v157, v152, v153, v154, v155);
                goto LABEL_47;
              }
              v118 = (double)v175 / 100.0;
              *(float *)(v17 + 8364) = v118;
              v119 = *(_QWORD *)&__dst[32];
              *(double *)&v120 = v118;
              v121 = "Node Prune Percent set to %.2f from pipeline header";
            }
            log_OutText(v119, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v121, v115, v116, v117, v120);
            goto LABEL_110;
          }
          v111 = (double)HIDWORD(v175) / 100.0;
          *(float *)(v17 + 8360) = v111;
          v112 = *(_QWORD *)&__dst[32];
          *(double *)&v113 = v111;
          v114 = "Prune Percent set to %.2f from pipeline header";
        }
        log_OutText(v112, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v114, v108, v109, v110, v113);
        goto LABEL_104;
      }
      *v19 = HIDWORD(v172);
      v63 = *(_QWORD *)&__dst[32];
      v64 = "PSOLA mode set to non-zero %d from pipeline header";
    }
    log_OutText(v63, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v64, v59, v60, v61, v62);
    goto LABEL_69;
  }
LABEL_47:
  if (v177)
  {
    ssftriff_reader_ObjClose(v177, v37, v38, v39, v40, v41, v42, v43);
    v177 = 0;
  }
  if ((Data & 0x80000000) != 0)
  {
    if ((Data & 0x7FF01FFF) == 0xA200014)
      Data = 2229280772;
    else
      Data = Data;
    select_bet4_loc_VoiceClose(__dst, v17);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v17;
  }
  return Data;
}

uint64_t select_bet4_loc_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  _QWORD *v6;

  v6 = 0;
  inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0)
    select_bet4_loc_VoiceClose(v6, *(_QWORD *)(a3 + 32));
  return inited;
}

uint64_t select_bet4_loc_ParamCheckChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t result;

  *a4 = 1;
  if (!strcmp(__s1, "frequencyhz"))
  {
    if (*(_QWORD *)(a1 + 256))
    {
      result = 2229280785;
LABEL_12:
      *a4 = 0;
      return result;
    }
    return 0;
  }
  if (!strcmp(__s1, "waitfactor"))
  {
    if ((LH_atoi(a3) & 0x80000000) != 0)
    {
LABEL_11:
      result = 2229280783;
      goto LABEL_12;
    }
    return 0;
  }
  if (strcmp(__s1, "bet4suppresschunking"))
    return 0;
  result = strcmp(a3, "yes");
  if ((_DWORD)result)
  {
    result = strcmp(a3, "no");
    if ((_DWORD)result)
      goto LABEL_11;
  }
  return result;
}

uint64_t select_bet4_loc_ParamLearnChange(_QWORD *a1, char *__s1, const char *a3)
{
  uint64_t v6;
  float v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v13;

  if (!strcmp(__s1, "frequencyhz"))
  {
    if (a1[32])
      return 2229280785;
    else
      return 0;
  }
  else if (!strcmp(__s1, "rate") || !strcmp(__s1, "waitfactor"))
  {
    v13 = LH_atoi(a3);
    return select_bet4_loc_ParamSet((uint64_t)a1, __s1, (uint64_t)v13);
  }
  else
  {
    if (!strcmp(__s1, "bet4suppresschunking"))
    {
      v6 = a1[1367];
      v7 = *(float *)(v6 + 8248);
      if (v7 > 0.0 && v7 < 10.0)
      {
        *(_DWORD *)(v6 + 8560) = strcmp(a3, "yes") == 0;
        log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Set suppress-chunking value %s", v9, v10, v11, (uint64_t)a3);
      }
    }
    return 0;
  }
}

uint64_t select_bet4_loc_VoiceSetup(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[7];
  for (i = 8; i != 28; i += 2)
  {
    v5 = a1[i];
    if (v5)
    {
      brk_DataClose(*(_QWORD *)(v2 + 24), v5);
      a1[i] = 0;
    }
  }
  if (!v3)
    return 0;
  v6 = (_DWORD *)(v3 + 26656);
  v7 = 8;
  while (1)
  {
    if (!*((_QWORD *)v6 - 1))
    {
      if (*v6)
      {
        result = brk_DataOpenEx(*(_QWORD *)(v2 + 24), v3, 0, (uint64_t)&a1[v7]);
        if ((result & 0x80000000) != 0)
          break;
      }
    }
    v6 += 8;
    v7 += 2;
    if (v7 == 28)
    {
      a1[1367] = v3 + 128;
      return select_bet4_loc_SetSynthParams((uint64_t)a1);
    }
  }
  return result;
}

uint64_t select_bet4_loc_SetSynthParamFloat(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11[32];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __sprintf_chk(v11, 0, 0x20uLL, "%f", a3);
  v9 = paramc_ParamSetStr(*(_QWORD *)(a1 + 40), a2, v11);
  if ((v9 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 58009, "%s%s%s%f%s%x", v5, v6, v7, v8, "parameter");
  return v9;
}

uint64_t select_bet4_loc_ParamSet(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (strcmp(__s1, "waitfactor"))
    return 0;
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 232) = a3;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet4_ParseRiff(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  uint64_t v11;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  _WORD *v69;
  void *v70;
  unsigned int v71;
  unsigned int v72;
  const char *v73;
  float v75;
  float v76;
  float v78;
  float v81;
  float v82;
  float v84;
  float v86;
  float v88;
  float v89;
  char *v94;
  float v99;
  float v102;
  float v104;
  float v107;
  float v110;
  float v113;
  float v116;
  float v119;
  float v122;
  float v125;
  float v128;
  float v131;
  float v134;
  float v138;
  float v142;
  float v146;
  float v150;
  float v154;
  float v158;
  float v162;
  float v166;
  float v170;
  float v174;
  float v178;
  float v182;
  float v184;
  float v186;
  float v188;
  float v190;
  float v192;
  float v194;
  float v196;
  float v198;
  float v201;
  float v204;
  float v207;
  float v210;
  BOOL v212;
  float v213;
  float v216;
  float v219;
  float v222;
  float v225;
  BOOL v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v234;
  float v236;
  float v237;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v251;
  float v254;
  float v269;
  float v274;
  float v277;
  float v287;
  float v295;
  float v297;
  float v298;
  uint64_t v322;
  unint64_t v323;
  int RiffStringTable;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t ChunkData;
  const char *v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  size_t v336;
  int v337;
  unsigned int v338;
  unsigned __int8 *v339;
  unsigned int v340;
  char *v341;
  unsigned int v342;
  unsigned int v343;
  size_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned __int16 *v361;
  size_t v362;
  int v363;
  _DWORD *v364;
  uint64_t v365;
  int *v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  unsigned int v373;
  uint64_t v374;
  _BYTE *v375;
  char *v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  int v380;
  unint64_t v381;
  int v382;
  _DWORD *v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  unsigned __int16 v387;
  void *v388;
  int *v389;
  unsigned int v390;
  unsigned __int16 v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  int Position;
  int v396;
  int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  uint64_t v401;
  unint64_t v402;
  _DWORD *v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int v409;
  size_t v410;
  int *v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  unsigned int v415;
  unsigned int v416;
  int MfsData;
  uint64_t v418;
  int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  int v424;
  int v425;
  _WORD *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  unint64_t v432;
  int v433;
  unint64_t v434;
  int v435;
  unint64_t v436;
  int v437;
  unint64_t v438;
  int v439;
  unint64_t v440;
  int v441;
  unint64_t v442;
  int v443;
  unint64_t v444;
  int v445;
  unint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  int v456;
  unint64_t v457;
  int v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int v463;
  int v464;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t *v478;
  _QWORD *v479;
  uint64_t *v480;
  uint64_t *v481;
  uint64_t *v482;
  uint64_t *v483;
  _BYTE *v484;
  _QWORD *v485;
  _BYTE *v486;
  _QWORD *v487;
  _BYTE *v488;
  _QWORD *v489;
  _BYTE *v490;
  void *v491;
  uint64_t *v492;
  _BYTE *v493;
  uint64_t *v494;
  _BYTE *v495;
  uint64_t *v496;
  unsigned int v497;
  void *v498;
  uint64_t *v499;
  char *v500;
  uint64_t v501;
  char *__s;
  unsigned int v504;
  char *__dst;
  const char *v508;
  int *v509;
  unsigned int v510;
  int *v511;
  int *v512;
  int *v513;
  int v515[2];
  char *v516;
  unsigned int v517;
  char __src[4];
  unsigned __int8 v519;
  int v520;
  _BYTE v521[62];
  uint64_t v522[128];
  void *v523;
  int v524;
  uint64_t v525;

  v504 = a7;
  v8 = a6;
  v9 = a5;
  v11 = a3;
  v525 = *MEMORY[0x1E0C80C00];
  v497 = 0;
  v501 = a2 + 66296;
  v496 = (uint64_t *)(a2 + 41256);
  v509 = (int *)(a2 + 16560);
  v520 = 0;
  v519 = 0;
  *(_DWORD *)__src = 0;
  __dst = (char *)&a5[5 * a4];
  v491 = (void *)(a2 + 7484);
  v498 = (void *)(a2 + 40388);
  v468 = (_QWORD *)(a2 + 14632);
  v469 = (_QWORD *)(a2 + 16792);
  v470 = (_QWORD *)(a2 + 17272);
  v471 = (_QWORD *)(a2 + 17032);
  v472 = (_QWORD *)(a2 + 16552);
  v473 = (_QWORD *)(a2 + 23512);
  v474 = (_QWORD *)(a2 + 23272);
  v475 = (_QWORD *)(a2 + 18472);
  v477 = (_QWORD *)(a2 + 9352);
  v476 = (_QWORD *)(a2 + 9592);
  v479 = (_QWORD *)(a2 + 18232);
  v489 = (_QWORD *)(a2 + 11992);
  v499 = (uint64_t *)(a2 + 7744);
  v500 = (char *)(a2 + 66842);
  v485 = (_QWORD *)(a2 + 66304);
  v487 = (_QWORD *)(a2 + 66288);
  v492 = (uint64_t *)(a2 + 41320);
  v494 = (uint64_t *)(a2 + 41312);
  v478 = (uint64_t *)(a2 + 40360);
  v480 = (uint64_t *)(a2 + 40352);
  v483 = (uint64_t *)(a2 + 41224);
  v482 = (uint64_t *)(a2 + 41232);
  v481 = (uint64_t *)(a2 + 41240);
  v484 = (_BYTE *)(a2 + 66160);
  v486 = (_BYTE *)(a2 + 40288);
  v488 = (_BYTE *)(a2 + 39261);
  v490 = (_BYTE *)(a2 + 39518);
  v493 = (_BYTE *)(a2 + 39004);
  v495 = (_BYTE *)(a2 + 38747);
  __s = (char *)(a2 + 38490);
  v13 = a5 + 5;
  v508 = a5 + 5;
  do
  {
    v14 = ssftriff_reader_OpenChunk(v11, __src, (unsigned int *)&v520, 0, (uint64_t)a5, a6, a7, a8);
    if ((v14 & 0x80000000) != 0)
      break;
    strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (!strcmp(v9, "FEEX"))
      {
        if (!(*(_DWORD *)__src ^ 0x54414356 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
          }
          v62 = a1;
          v63 = a2;
          v64 = v11;
          v65 = 2;
          goto LABEL_1034;
        }
        if (!(*(_DWORD *)__src ^ 0x504F4256 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v70 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v70;
          }
          else
          {
            v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((v14 & 0x80000000) != 0)
              return v14;
            v70 = v523;
          }
          if (v520 >= 0xF8)
            v362 = 248;
          else
            v362 = v520;
          memcpy(v498, v70, v362);
          goto LABEL_1229;
        }
        if (!(*(_DWORD *)__src ^ 0x33455250 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((v14 & 0x80000000) != 0)
              return v14;
          }
          v386 = v520;
          if (v520 >= 2)
          {
            v387 = 0;
            do
            {
              if (*((unsigned __int16 *)v523 + v387) < 0x47u)
              {
                *(_DWORD *)(a2 + 4 * *((unsigned __int16 *)v523 + v387) + 40936) = 1;
              }
              else
              {
                log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v327, v328, v329, *((unsigned __int16 *)v523 + v387));
                v386 = v520;
              }
              ++v387;
            }
            while (v386 >> 1 > v387);
          }
          goto LABEL_1219;
        }
        if (!(*(_DWORD *)__src ^ 0x33415254 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((v14 & 0x80000000) != 0)
              return v14;
          }
          v390 = v520;
          if (v520 >= 2)
          {
            v391 = 0;
            do
            {
              if (*((unsigned __int16 *)v523 + v391) < 8u)
              {
                *(_DWORD *)(a2 + 4 * *((unsigned __int16 *)v523 + v391) + 41264) = 1;
              }
              else
              {
                log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v349, v350, v351, *((unsigned __int16 *)v523 + v391));
                v390 = v520;
              }
              ++v391;
            }
            while (v390 >> 1 > v391);
          }
          goto LABEL_1219;
        }
        if (*(_DWORD *)__src ^ 0x46415254 | v519)
        {
          if (!(*(_DWORD *)__src ^ 0x334D4850 | v519))
          {
            v523 = 0;
            if (v8)
            {
              v388 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
              v523 = v388;
            }
            else
            {
              v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
              if ((v14 & 0x80000000) != 0)
                return v14;
              v388 = v523;
            }
            if (v520 >= 0x100)
              v410 = 256;
            else
              v410 = v520;
            memcpy(v491, v388, v410);
            goto LABEL_1219;
          }
          if (*(_DWORD *)__src ^ 0x52585443 | v519)
            goto LABEL_1216;
          v39 = a1;
        }
        else
        {
          v523 = 0;
          if (v8)
          {
            v383 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v383;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v383 = v523;
          }
          *((_WORD *)__s + 1379) = *v383;
          ssftriff_reader_Seek(v11, 4u, 1);
          v404 = heap_Calloc(*(_QWORD **)(a1 + 8), 12, *((unsigned __int16 *)__s + 1379));
          *v496 = v404;
          if (!v404)
            return 2229280778;
          v39 = a1;
        }
        v345 = select_bet4_ParseRiff(v39, a2, v11, 2, v9, 0, 0);
        goto LABEL_1177;
      }
      if (!strcmp(v9, "STM3"))
      {
        *(_DWORD *)v521 = 0;
        v56 = *(int *)(a2 + 260);
        if (*(_DWORD *)__src ^ 0x33435453 | v519)
        {
          if (*(_DWORD *)__src ^ 0x33455254 | v519)
          {
            if (*(_DWORD *)__src ^ 0x33464450 | v519)
            {
              if (*(_DWORD *)__src ^ 0x334E4957 | v519)
              {
                if (*(_DWORD *)__src ^ 0x34435453 | v519)
                {
                  if (!(*(_DWORD *)__src ^ 0x34575453 | v519))
                  {
                    v523 = 0;
                    if (v8)
                    {
                      v403 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
                    }
                    else
                    {
                      v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v29, v30, v31, v32, v33);
                      if ((v14 & 0x80000000) != 0)
                        return v14;
                      v403 = v523;
                    }
                    v418 = a2 + 4 * v56;
                    *(_DWORD *)(v418 + 8168) = *v403;
                    *(_DWORD *)(v418 + 8208) = v403[1];
                    goto LABEL_1219;
                  }
                  v57 = *(int *)(a2 + 260);
                  if (*(_DWORD *)__src ^ 0x34445155 | v519)
                  {
                    if (!(*(_DWORD *)__src ^ 0x34425155 | v519))
                    {
                      v58 = v520;
                      v59 = a2;
                      v60 = v11;
                      v61 = 14;
                      goto LABEL_1208;
                    }
                    if (*(_DWORD *)__src ^ 0x34504E55 | v519)
                    {
                      if (!(*(_DWORD *)__src ^ 0x34494350 | v519))
                      {
                        MfsData = select_bet4_ParseRiff(a1, a2, v11, 2, v9, v8, v504);
                        goto LABEL_1214;
                      }
                      if (*(_DWORD *)__src ^ 0x344D5647 | v519)
                      {
                        if (*(_DWORD *)__src ^ 0x3449434A | v519)
                        {
                          if (*(_DWORD *)__src ^ 0x3453434A | v519)
                          {
                            if (*(_DWORD *)__src ^ 0x34474E53 | v519)
                              goto LABEL_1216;
                            v58 = v520;
                            v59 = a2;
                            v60 = v11;
                            v61 = 28;
                          }
                          else
                          {
                            v58 = v520;
                            v59 = a2;
                            v60 = v11;
                            v61 = 27;
                          }
                        }
                        else
                        {
                          v58 = v520;
                          v59 = a2;
                          v60 = v11;
                          v61 = 26;
                        }
                      }
                      else
                      {
                        v58 = v520;
                        v59 = a2;
                        v60 = v11;
                        v61 = 24;
                      }
LABEL_1208:
                      MfsData = select_bet4_LoadMfsData(v59, v60, v61, v57, v58, v8, v504, 0);
                      goto LABEL_1214;
                    }
                    v406 = v520;
                    v407 = a2;
                    v408 = v11;
                    v409 = 10;
                  }
                  else
                  {
                    v406 = v520;
                    v407 = a2;
                    v408 = v11;
                    v409 = 13;
                  }
                  LODWORD(v14) = select_bet4_LoadMfsData(v407, v408, v409, v57, v406, v8, v504, 1);
                  goto LABEL_1219;
                }
                LODWORD(v516) = 0;
                v522[0] = 0;
                if (v8)
                {
                  v389 = (int *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
                }
                else
                {
                  v14 = ssftriff_reader_GetChunkData(v11, v520, v522, v29, v30, v31, v32, v33);
                  if ((v14 & 0x80000000) != 0)
                    return v14;
                  v389 = (int *)v522[0];
                }
                v411 = (int *)(a2 + 4 * v56);
                v411[2032] = *v389;
                v411[2062] = v389[1];
                v411[2078] = v389[2];
                v411[2218] = v389[3];
                v411[2198] = v389[4];
                v411[2208] = v389[5];
                v411[2231] = v389[6];
                v411[2241] = v389[7];
                v522[0] = (uint64_t)(v389 + 8);
                if (v411[98] >= 1)
                {
                  v412 = v56;
                  v413 = 0;
                  v513 = v411 + 98;
                  v414 = (_QWORD *)(a2 + 8 * v412 + 2392);
                  v415 = *(_DWORD *)v521;
                  do
                  {
                    LOBYTE(v523) = 0;
                    LODWORD(v516) = 256;
                    LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v522[0], v520, v415, &v523, (unsigned int *)&v516);
                    if ((v14 & 0x80000000) != 0)
                      break;
                    *(_QWORD *)(*v414 + 8 * v413) = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), (char *)&v523);
                    if (!*(_QWORD *)(*v414 + 8 * v413))
                      goto LABEL_1201;
                    v415 = *(_DWORD *)v521 + (_DWORD)v516;
                    *(_DWORD *)v521 += (_DWORD)v516;
                    ++v413;
                  }
                  while (v413 < *v513);
                }
                goto LABEL_1202;
              }
              v384 = a2 + 128 + 4 * v56;
              v385 = *(_DWORD *)(v384 + 304);
              v330 = a2 + 128 + 120 * (int)v56 + 24 * v385 + 3864;
              *(_DWORD *)(v384 + 304) = v385 + 1;
            }
            else
            {
              v522[0] = 0;
              if (v8)
              {
                v352 = v8 + ssftriff_reader_GetPosition(v11) - v504;
                v522[0] = v352;
              }
              else
              {
                ChunkData = ssftriff_reader_GetChunkData(v11, v520, v522, v29, v30, v31, v32, v33);
                if ((ChunkData & 0x80000000) != 0)
                  return ChunkData;
                v352 = v522[0];
              }
              *(_DWORD *)v521 = 256;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v352, v520, 0, &v523, (unsigned int *)v521);
              if ((v14 & 0x80000000) != 0)
              {
                v330 = 0;
              }
              else
              {
                v392 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), (char *)&v523);
                v393 = a2 + 128 + 4 * v56;
                v394 = *(int *)(v393 + 344);
                *(_QWORD *)(a2 + 128 + 40 * (int)v56 + 8 * v394 + 1304) = v392;
                if ((v521[0] & 3) != 0)
                  *(_DWORD *)v521 -= *(_DWORD *)v521 | 0xFFFFFFFC;
                v330 = a2 + 120 * (int)v56 + 24 * (int)v394 + 2792;
                *(_DWORD *)(v393 + 344) = v394 + 1;
              }
            }
          }
          else
          {
            v330 = a2 + 24 * (int)v56 + 2552;
          }
          if ((v14 & 0x80000000) == 0 && v330)
          {
            v523 = 0;
            if (a6)
            {
              Position = ssftriff_reader_GetPosition(v11);
              v396 = *(_DWORD *)v521;
              *(_QWORD *)(v330 + 8) = a6 + Position - v504 + *(unsigned int *)v521;
              v397 = v520 - v396;
            }
            else
            {
              v398 = *(unsigned __int16 *)(v501 + 544);
              LODWORD(v14) = -2065686524;
              if (v398 > 0x3F)
                goto LABEL_1202;
              if (*(_DWORD *)v521)
              {
                ssftriff_reader_Seek(v11, *(unsigned int *)v521, 1);
                v398 = *(unsigned __int16 *)(v501 + 544);
              }
              LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v398 + 66328), &v523, v29, v30, v31, v32, v33);
              if ((v14 & 0x80000000) != 0)
                goto LABEL_1202;
              ++*(_WORD *)(v501 + 544);
              v399 = v520;
              *(_DWORD *)(v501 + 24) += v520;
              *(_QWORD *)(v330 + 8) = v523;
              v397 = v399 - *(_DWORD *)v521;
            }
            *(_DWORD *)(v330 + 16) = v397;
          }
LABEL_1202:
          v8 = a6;
          goto LABEL_1219;
        }
        LODWORD(v516) = 0;
        v522[0] = 0;
        if (v8)
        {
          v322 = v8 + ssftriff_reader_GetPosition(v11) - v504;
          v522[0] = v322;
        }
        else
        {
          v14 = ssftriff_reader_GetChunkData(v11, v520, v522, v29, v30, v31, v32, v33);
          if ((v14 & 0x80000000) != 0)
            return v14;
          v322 = v522[0];
        }
        v363 = *(_DWORD *)v521;
        v364 = (_DWORD *)(a2 + 4 * v56);
        v364[88] = *(_DWORD *)(v322 + *(unsigned int *)v521);
        *(_DWORD *)v521 = v363 + 4;
        v365 = *(unsigned int *)(v322 + (v363 + 4));
        v364[98] = v365;
        *(_DWORD *)v521 = v363 + 8;
        v366 = v364 + 98;
        v364[568] = *(_BYTE *)(v322 + (v363 + 8)) != 0;
        *(_DWORD *)v521 = v363 + 9;
        v364[558] = *(_DWORD *)(v322 + (v363 + 9));
        v367 = v363 + 13;
        *(_DWORD *)v521 = v363 + 13;
        if ((int)v365 < 1)
        {
LABEL_1091:
          LOBYTE(v523) = 0;
          LODWORD(v516) = 256;
          LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v322, v520, v367, &v523, (unsigned int *)&v516);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_1202;
          v376 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), (char *)&v523);
          v377 = (_QWORD *)(a2 + 8 * v56);
          v377[34] = v376;
          *(_DWORD *)v521 += (_DWORD)v516;
          if (v376)
          {
            v512 = v366;
            if (*v366 >= 1)
            {
              v378 = 0;
              v379 = v377 + 309;
              v467 = v377 + 289;
              while (1)
              {
                LOBYTE(v523) = 0;
                LODWORD(v516) = 256;
                v380 = ssftriff_reader_ReadStringZ(v11, v522[0], v520, *(unsigned int *)v521, &v523, (unsigned int *)&v516);
                if (v380 < 0)
                  break;
                *(_QWORD *)(*v379 + 8 * v378) = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), (char *)&v523);
                if (!*(_QWORD *)(*v379 + 8 * v378))
                  goto LABEL_1201;
                *(_DWORD *)v521 += (_DWORD)v516;
                LOBYTE(v523) = 0;
                LODWORD(v516) = 256;
                LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v522[0], v520, *(unsigned int *)v521, &v523, (unsigned int *)&v516);
                if ((v14 & 0x80000000) == 0)
                {
                  *(_QWORD *)(*v467 + 8 * v378) = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), (char *)&v523);
                  if (!*(_QWORD *)(*v467 + 8 * v378))
                    goto LABEL_1201;
                  *(_DWORD *)v521 += (_DWORD)v516;
                  if (++v378 < *v512)
                    continue;
                }
                goto LABEL_1202;
              }
              LODWORD(v14) = v380;
            }
            goto LABEL_1202;
          }
        }
        else
        {
          v511 = v364 + 98;
          v368 = heap_Calloc(*(_QWORD **)(a1 + 8), v365, 8);
          v369 = a2 + 8 * v56;
          *(_QWORD *)(v369 + 2472) = v368;
          if (!v368)
            LODWORD(v14) = -2065686518;
          if ((v14 & 0x80000000) != 0)
            goto LABEL_1202;
          v370 = heap_Calloc(*(_QWORD **)(a1 + 8), *v511, 8);
          *(_QWORD *)(v369 + 2312) = v370;
          if (!v370)
          {
            LODWORD(v14) = -2065686518;
            goto LABEL_1202;
          }
          v371 = heap_Calloc(*(_QWORD **)(a1 + 8), *v511, 8);
          *(_QWORD *)(a2 + 8 * v56 + 2392) = v371;
          if (v371)
          {
            v366 = v511;
            v322 = v522[0];
            v367 = *(_DWORD *)v521;
            goto LABEL_1091;
          }
        }
LABEL_1201:
        LODWORD(v14) = -2065686518;
        goto LABEL_1202;
      }
      if (!strcmp(v9, "WCI4"))
      {
        if (!(*(_DWORD *)__src ^ 0x50525453 | v519))
        {
          v34 = v520;
          v35 = a2;
          v36 = v11;
          v37 = 17;
          goto LABEL_1225;
        }
        if (!(*(_DWORD *)__src ^ 0x34495453 | v519))
        {
          v34 = v520;
          v35 = a2;
          v36 = v11;
          v37 = 19;
          goto LABEL_1225;
        }
        if (*(_DWORD *)__src ^ 0x4C494350 | v519)
          goto LABEL_1216;
        v20 = v520;
        v21 = a2;
        v22 = v11;
        v23 = 18;
LABEL_126:
        v38 = 0;
        goto LABEL_1062;
      }
      if (!strcmp(v9, "SCI4"))
      {
        if (!(*(_DWORD *)__src ^ 0x50525453 | v519))
        {
          v34 = v520;
          v35 = a2;
          v36 = v11;
          v37 = 20;
          goto LABEL_1225;
        }
        if (!(*(_DWORD *)__src ^ 0x34495453 | v519))
        {
          v34 = v520;
          v35 = a2;
          v36 = v11;
          v37 = 22;
          goto LABEL_1225;
        }
        if (*(_DWORD *)__src ^ 0x4C494350 | v519)
          goto LABEL_1216;
        v20 = v520;
        v21 = a2;
        v22 = v11;
        v23 = 21;
        goto LABEL_126;
      }
      if (strcmp(v9, "UND4"))
        goto LABEL_1216;
      if (!(*(_DWORD *)__src ^ 0x4C4C5355 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 3;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x4E454C55 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 4;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x58544355 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 5;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x52554455 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 6;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x4C534255 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 7;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x52534955 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 8;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x464F4D55 | v519))
      {
        v34 = v520;
        v35 = a2;
        v36 = v11;
        v37 = 9;
LABEL_1225:
        v38 = 0;
LABEL_1226:
        v346 = v8;
        v347 = v504;
        v348 = 0;
LABEL_1227:
        RiffStringTable = select_bet4_LoadMfsData(v35, v36, v37, v38, v34, v346, v347, v348);
        goto LABEL_1228;
      }
    }
    else
    {
      if (a4)
      {
        if (strcmp(v9, "FEEX"))
          goto LABEL_53;
        if (!strcmp(v13, "VCAT"))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v40, v41, v42, v43, v44);
            if ((v14 & 0x80000000) != 0)
              return v14;
          }
          if (!(*(_DWORD *)__src ^ 0x48504C41 | v519))
          {
            LODWORD(v522[0]) = 257;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, (uint64_t)v523, v520, 0, __s, (unsigned int *)v522);
            if ((v14 & 0x80000000) == 0)
            {
              *((_WORD *)__s + 947) = 255;
              if (*__s)
              {
                v335 = 0;
                v336 = 0;
                v337 = 0;
                v338 = 255;
                do
                {
                  v339 = (unsigned __int8 *)(a2 + v336 + 38490);
                  v340 = *v339;
                  if (v340 >= v338)
                  {
                    v342 = *v339;
                    v341 = __s;
                  }
                  else
                  {
                    v341 = __s;
                    __s[1894] = v340;
                    v342 = *v339;
                    v338 = v340;
                  }
                  if (v342 <= v335)
                  {
                    v343 = v342;
                  }
                  else
                  {
                    v341[1895] = v342;
                    v343 = *v339;
                    v335 = v342;
                  }
                  *(_BYTE *)(a2 + v343 + 40032) = v337;
                  v336 = (v337 + 1);
                  v344 = strlen(v341);
                  v337 = v336;
                }
                while (v344 > v336);
              }
            }
            v8 = a6;
            goto LABEL_1219;
          }
          if (*(_DWORD *)__src ^ 0x43494F56 | v519)
          {
            if (*(_DWORD *)__src ^ 0x4F564F43 | v519)
            {
              if (*(_DWORD *)__src ^ 0x45464153 | v519)
              {
                if (*(_DWORD *)__src ^ 0x534F4C50 | v519)
                {
                  if (*(_DWORD *)__src ^ 0x46464944 | v519)
                  {
                    if (*(_DWORD *)__src ^ 0x4C43554E | v519)
                    {
                      if (*(_DWORD *)__src ^ 0x464E4547 | v519)
                      {
                        if (*(_DWORD *)__src ^ 0x41474154 | v519)
                        {
                          if (*(_DWORD *)__src ^ 0x414F5442 | v519)
                            goto LABEL_1216;
                          v427 = v523;
                          v428 = v520;
                          v429 = a1;
                          v430 = v11;
                          v431 = v478;
                        }
                        else
                        {
                          v427 = v523;
                          v428 = v520;
                          v429 = a1;
                          v430 = v11;
                          v431 = v480;
                        }
                        MfsData = uselect_LoadRiffStringTable(v429, v430, v427, v428, v431);
                      }
                      else
                      {
                        MfsData = select_bet3_LoadRiffGenericFeatureMap(a1, v11, (unsigned __int16 *)v523, v520, v483, v482, v481);
                      }
LABEL_1214:
                      LODWORD(v14) = MfsData;
LABEL_1219:
                      v13 = v508;
                      goto LABEL_1229;
                    }
                    LODWORD(v522[0]) = 128;
                    v372 = v523;
                    v373 = v520;
                    v374 = v11;
                    v375 = v484;
                  }
                  else
                  {
                    LODWORD(v522[0]) = 64;
                    v372 = v523;
                    v373 = v520;
                    v374 = v11;
                    v375 = v486;
                  }
                }
                else
                {
                  LODWORD(v522[0]) = 257;
                  v372 = v523;
                  v373 = v520;
                  v374 = v11;
                  v375 = v488;
                }
              }
              else
              {
                LODWORD(v522[0]) = 257;
                v372 = v523;
                v373 = v520;
                v374 = v11;
                v375 = v490;
              }
            }
            else
            {
              LODWORD(v522[0]) = 257;
              v372 = v523;
              v373 = v520;
              v374 = v11;
              v375 = v493;
            }
          }
          else
          {
            LODWORD(v522[0]) = 257;
            v372 = v523;
            v373 = v520;
            v374 = v11;
            v375 = v495;
          }
          MfsData = ssftriff_reader_ReadStringZ(v374, (uint64_t)v372, v373, 0, v375, (unsigned int *)v522);
          goto LABEL_1214;
        }
        if (!strcmp(v13, "TRAF") && !(*(_DWORD *)__src ^ 0x54414546 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v361 = (unsigned __int16 *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v45, v46, v47, v48, v49);
            if ((v14 & 0x80000000) != 0)
              return v14;
            v361 = (unsigned __int16 *)v523;
          }
          v400 = *v361;
          v523 = v361 + 1;
          if (v400 >= 8)
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 58010, "%s%hu", v357, v358, v359, v360, "feature");
            return 2229280772;
          }
          *(_DWORD *)(a2 + 4 * v400 + 41264) = v497;
          v401 = *v496 + 12 * v497;
          *(_DWORD *)v401 = v400;
          *(_WORD *)(v401 + 8) = v361[1];
          *(_DWORD *)(v401 + 4) = *((_DWORD *)v361 + 1);
          ++v497;
          goto LABEL_1229;
        }
        if (strcmp(v13, "CTXR"))
        {
LABEL_53:
          if (strcmp(v9, "STM3") || strcmp(v13, "PCI4"))
            goto LABEL_1216;
          v38 = *(unsigned int *)(a2 + 260);
          if (*(_DWORD *)(a2 + 8456))
          {
            if (!(*(_DWORD *)__src ^ 0x4943504F | v519))
            {
              v34 = v520;
              v35 = a2;
              v36 = v11;
              v37 = 55;
              goto LABEL_1226;
            }
            if (!(*(_DWORD *)__src ^ 0x4C43504F | v519))
            {
              v20 = v520;
              v21 = a2;
              v22 = v11;
              v23 = 56;
              goto LABEL_1062;
            }
LABEL_1216:
            v419 = 0;
            LOBYTE(v523) = 0;
            do
            {
              __strcat_chk();
              __strcat_chk();
              ++v419;
            }
            while (a4 >= (unsigned __int16)v419);
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Unknown data: %s for %s", v420, v421, v422, (uint64_t)&v523);
            goto LABEL_1219;
          }
          if (!(*(_DWORD *)__src ^ 0x49494350 | v519))
          {
            v34 = v520;
            v35 = a2;
            v36 = v11;
            v37 = 15;
            goto LABEL_1226;
          }
          if (*(_DWORD *)__src ^ 0x4C494350 | v519)
            goto LABEL_1216;
          v20 = v520;
          v21 = a2;
          v22 = v11;
          v23 = 16;
LABEL_1062:
          v345 = select_bet4_LoadMfsData(v21, v22, v23, v38, v20, v8, v504, 0);
LABEL_1177:
          LODWORD(v14) = v345;
          goto LABEL_1219;
        }
        if (!(*(_DWORD *)__src ^ 0x464C5552 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v69 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v69;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(v11, v520, &v523, v50, v51, v52, v53, v54);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v69 = v523;
          }
          v353 = v520;
          v354 = a1;
          v355 = v11;
          v356 = v494;
          goto LABEL_1182;
        }
        if (!(*(_DWORD *)__src ^ 0x544C5552 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v69 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v69;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(v11, v520, &v523, v50, v51, v52, v53, v54);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v69 = v523;
          }
          v353 = v520;
          v354 = a1;
          v355 = v11;
          v356 = v492;
          goto LABEL_1182;
        }
        if (*(_DWORD *)__src ^ 0x34445254 | v519)
        {
          if (!(*(_DWORD *)__src ^ 0x34505254 | v519))
          {
            v55 = *(unsigned __int16 *)(v501 + 544);
            if (v55 <= 0x3F)
            {
              LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v55 + 66328), v485, v50, v51, v52, v53, v54);
              if ((v14 & 0x80000000) == 0)
              {
                ++*(_WORD *)(v501 + 544);
                v416 = v520;
                *(_DWORD *)(v501 + 24) += v520;
                *(_DWORD *)(v501 + 16) = v416 / 0xC;
              }
            }
            else
            {
              LODWORD(v14) = -2065686524;
            }
            goto LABEL_1219;
          }
          goto LABEL_1216;
        }
        v402 = *(unsigned __int16 *)(v501 + 544);
        if (v402 <= 0x3F)
        {
          LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v402 + 66328), v487, v50, v51, v52, v53, v54);
          if ((v14 & 0x80000000) == 0)
          {
            ++*(_WORD *)(v501 + 544);
            v405 = v520;
            *(_DWORD *)(v501 + 24) += v520;
            *(_DWORD *)v501 = v405 / 0xC;
          }
          goto LABEL_1229;
        }
        goto LABEL_1165;
      }
      if (!(*(_DWORD *)__src ^ 0x464E4956 | v519))
      {
        LODWORD(v516) = 0;
        *(_QWORD *)v521 = 0;
        if (v8)
        {
          *(_QWORD *)v521 = v8 + ssftriff_reader_GetPosition(v11) - v504;
        }
        else
        {
          v14 = ssftriff_reader_GetChunkData(v11, v520, v521, v15, v16, v17, v18, v19);
          if ((v14 & 0x80000000) != 0)
            return v14;
        }
        v66 = v520;
        if (v520)
        {
          v67 = 0;
          do
          {
            LOBYTE(v522[0]) = 0;
            LOBYTE(v523) = 0;
            LODWORD(v516) = 1024;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v521, v66, v67, &v523, (unsigned int *)&v516);
            if ((v14 & 0x80000000) == 0 && v67 < v520)
            {
              v67 += v516;
              LODWORD(v516) = 1024;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v521, v520, v67, v522, (unsigned int *)&v516);
            }
            if ((v14 & 0x80000000) != 0)
              break;
            if (!(v523 ^ 0x44495547 | BYTE4(v523))
              || (v523 == (void *)0x6E656E6F706D6F43 ? (v68 = v524 == 4475252) : (v68 = 0), v68))
            {
              strcpy(v500, (const char *)v522);
              break;
            }
            v67 += v516;
            v66 = v520;
          }
          while (v67 < v520);
        }
LABEL_1021:
        v8 = a6;
        goto LABEL_1229;
      }
      if (!(*(_DWORD *)__src ^ 0x47464356 | v519))
      {
        v517 = 0;
        *(_QWORD *)v515 = 0;
        v516 = 0;
        if (v8)
        {
          *(_QWORD *)v515 = v8 + ssftriff_reader_GetPosition(v11) - v504;
        }
        else
        {
          v14 = ssftriff_reader_GetChunkData(v11, v520, v515, v15, v16, v17, v18, v19);
          if ((v14 & 0x80000000) != 0)
            return v14;
        }
        v71 = v520;
        if (v520)
        {
          v72 = 0;
          do
          {
            LOBYTE(v523) = 0;
            v521[0] = 0;
            v517 = 64;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v515, v71, v72, v521, &v517);
            if ((v14 & 0x80000000) == 0 && v72 < v520)
            {
              v72 += v517;
              v517 = 256;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v515, v520, v72, &v523, &v517);
            }
            if ((v14 & 0x80000000) != 0)
              break;
            v510 = v517;
            strcpy((char *)v522, "bet4voiceoverride.");
            __strcat_chk();
            if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)v522, &v516) & 0x80000000) == 0)
            {
              v73 = v516;
              if (v516)
              {
                if (*v516)
                  goto LABEL_1019;
              }
            }
            v73 = (const char *)&v523;
            v516 = (char *)&v523;
            if (*(_DWORD *)v521 == 1213221953 && *(unsigned __int16 *)&v521[4] == 65)
            {
              v75 = atof(v73);
              *(float *)(a2 + 128) = v75;
            }
            if (!(*(_DWORD *)v521 ^ 0x41544542 | v521[4]))
            {
              v76 = atof(v73);
              *(float *)(a2 + 132) = v76;
            }
            if (!(*(unsigned __int16 *)v521 ^ 0x5346 | v521[2]))
              *(_DWORD *)(a2 + 136) = LH_atoi(v73);
            if (*(_QWORD *)v521 == 0x5F4C45525F565556 && *(_DWORD *)&v521[8] == 5262657)
            {
              v78 = atof(v516);
              *(float *)(a2 + 140) = v78;
            }
            if (*(_DWORD *)v521 == 1162105423 && *(unsigned __int16 *)&v521[4] == 82)
              *(_DWORD *)(a2 + 144) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x49535F454D415246 && *(_QWORD *)&v521[3] == 0x455A49535F454DLL)
              *(_DWORD *)(a2 + 152) = LH_atoi(v516);
            if (*(_DWORD *)v521 == 5195858)
            {
              v81 = atof(v516);
              *(float *)(a2 + 160) = v81;
            }
            if (*(_DWORD *)v521 == 5001046)
            {
              v82 = atof(v516);
              *(float *)(a2 + 164) = v82;
            }
            if (*(_QWORD *)v521 == 0x534F4F425F46564DLL && *(unsigned __int16 *)&v521[8] == 84)
            {
              v84 = atof(v516);
              *(float *)(a2 + 168) = v84;
            }
            if (*(_DWORD *)v521 == 1381969990 && *(_DWORD *)&v521[3] == 5195858)
            {
              v86 = atof(v516);
              *(float *)(a2 + 172) = v86;
            }
            if (*(_DWORD *)v521 == 1398747206 && *(_DWORD *)&v521[3] == 4478035)
            {
              v88 = atof(v516);
              *(float *)(a2 + 176) = v88;
            }
            if (*(_QWORD *)v521 == 0x4E41454D5F3046)
            {
              v89 = atof(v516);
              *(float *)(a2 + 180) = v89;
            }
            if (*(_QWORD *)v521 == 0x434E454C49535F42 && *(_QWORD *)&v521[8] == 0x48544E59535F45)
              *(_DWORD *)(a2 + 7752) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x465F484345455053 && *(_QWORD *)&v521[7] == 0x4E41454D5F3046)
              *(_DWORD *)(a2 + 184) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x495241565F464450
              && *(_QWORD *)&v521[8] == 0x5059545F45434E41
              && *(unsigned __int16 *)&v521[16] == 69)
            {
              *(_DWORD *)(a2 + 200) = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x52454B41455242)
            {
              v94 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v516);
              *(_QWORD *)(a2 + 208) = v94;
              if (!v94)
                LODWORD(v14) = -2065686518;
            }
            if (*(_QWORD *)v521 == 0x474E454C5F4B5242 && *(_QWORD *)&v521[3] == 0x4854474E454C5FLL)
              *(_DWORD *)(a2 + 216) = LH_atoi(v516);
            if (*(_DWORD *)v521 == 1598771778 && *(_DWORD *)&v521[3] == 4412511)
              *(_DWORD *)(a2 + 220) = LH_atoi(v516);
            if (!(*(_QWORD *)v521 ^ 0x4441505A5F4B5242 | v521[8]))
              *(_DWORD *)(a2 + 224) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x54535F4E474C41)
              *(_DWORD *)(a2 + 240) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x48505F4E474C41)
              *(_DWORD *)(a2 + 244) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x5F54534F434A5F46
              && *(_QWORD *)&v521[8] == 0x415F544847494557
              && *(_QWORD *)&v521[11] == 0x4A44415F544847)
            {
              v99 = atof(v516);
              *(float *)(a2 + 8288) = v99;
            }
            if (*(_QWORD *)v521 == 0x5F54534F434A5F46
              && *(_QWORD *)&v521[8] == 0x535F544847494557
              && *(_QWORD *)&v521[11] == 0x4C4C535F544847)
            {
              v102 = atof(v516);
              *(float *)(a2 + 8516) = v102;
            }
            if (*(_QWORD *)v521 == 0x54535F4C4C535F46 && *(_QWORD *)&v521[3] == 0x504554535F4C4CLL)
            {
              v104 = atof(v516);
              *(float *)(a2 + 8512) = v104;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x465F544E535F534FLL
              && *(_QWORD *)&v521[13] == 0x4C414E49465F54)
            {
              v107 = atof(v516);
              *(float *)(a2 + 8528) = v107;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x465F544E535F534FLL
              && *(_QWORD *)&v521[13] == 0x4C414E49465F54)
            {
              v110 = atof(v516);
              *(float *)(a2 + 8532) = v110;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x465F5248505F534FLL
              && *(_QWORD *)&v521[13] == 0x4C414E49465F52)
            {
              v113 = atof(v516);
              *(float *)(a2 + 8536) = v113;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x465F5248505F534FLL
              && *(_QWORD *)&v521[13] == 0x4C414E49465F52)
            {
              v116 = atof(v516);
              *(float *)(a2 + 8540) = v116;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x495F544E535F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              v119 = atof(v516);
              *(float *)(a2 + 8544) = v119;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x495F544E535F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              v122 = atof(v516);
              *(float *)(a2 + 8548) = v122;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x495F5248505F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              v125 = atof(v516);
              *(float *)(a2 + 8552) = v125;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x495F5248505F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              v128 = atof(v516);
              *(float *)(a2 + 8556) = v128;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x4D5F5248505F534FLL
              && *(_QWORD *)&v521[11] == 0x44494D5F524850)
            {
              v131 = atof(v516);
              *(float *)(a2 + 8560) = v131;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x4D5F5248505F534FLL
              && *(_QWORD *)&v521[11] == 0x44494D5F524850)
            {
              v134 = atof(v516);
              *(float *)(a2 + 8564) = v134;
            }
            if (*(_QWORD *)v521 == 0x574452575F515F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x49535F544E45535FLL
              && *(_QWORD *)&v521[21] == 0x454C474E49535FLL)
            {
              v138 = atof(v516);
              *(float *)(a2 + 8568) = v138;
            }
            if (*(_QWORD *)v521 == 0x574452575F425F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x49535F544E45535FLL
              && *(_QWORD *)&v521[21] == 0x454C474E49535FLL)
            {
              v142 = atof(v516);
              *(float *)(a2 + 8572) = v142;
            }
            if (*(_QWORD *)v521 == 0x574452575F515F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x4E495F544E45535FLL
              && *(_QWORD *)&v521[22] == 0x4C414954494E49)
            {
              v146 = atof(v516);
              *(float *)(a2 + 8576) = v146;
            }
            if (*(_QWORD *)v521 == 0x574452575F425F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x4E495F544E45535FLL
              && *(_QWORD *)&v521[22] == 0x4C414954494E49)
            {
              v150 = atof(v516);
              *(float *)(a2 + 8580) = v150;
            }
            if (*(_QWORD *)v521 == 0x574452575F515F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x49465F544E45535FLL
              && *(unsigned int *)&v521[24] == 4997454)
            {
              v154 = atof(v516);
              *(float *)(a2 + 8584) = v154;
            }
            if (*(_QWORD *)v521 == 0x574452575F425F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x49465F544E45535FLL
              && *(unsigned int *)&v521[24] == 4997454)
            {
              v158 = atof(v516);
              *(float *)(a2 + 8588) = v158;
            }
            if (*(_QWORD *)v521 == 0x574452575F515F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x4E49535F3450495FLL
              && *(unsigned int *)&v521[24] == 4541511)
            {
              v162 = atof(v516);
              *(float *)(a2 + 8592) = v162;
            }
            if (*(_QWORD *)v521 == 0x574452575F425F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x4E49535F3450495FLL
              && *(unsigned int *)&v521[24] == 4541511)
            {
              v166 = atof(v516);
              *(float *)(a2 + 8596) = v166;
            }
            if (*(_QWORD *)v521 == 0x574452575F515F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x494E495F3450495FLL
              && *(_QWORD *)&v521[21] == 0x4C414954494E49)
            {
              v170 = atof(v516);
              *(float *)(a2 + 8600) = v170;
            }
            if (*(_QWORD *)v521 == 0x574452575F425F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x494E495F3450495FLL
              && *(_QWORD *)&v521[21] == 0x4C414954494E49)
            {
              v174 = atof(v516);
              *(float *)(a2 + 8604) = v174;
            }
            if (*(_QWORD *)v521 == 0x574452575F515F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x4E49465F3450495FLL
              && *(_QWORD *)&v521[19] == 0x4C414E49465F34)
            {
              v178 = atof(v516);
              *(float *)(a2 + 8608) = v178;
            }
            if (*(_QWORD *)v521 == 0x574452575F425F46
              && *(_QWORD *)&v521[8] == 0x504853534F504452
              && *(_QWORD *)&v521[16] == 0x4E49465F3450495FLL
              && *(_QWORD *)&v521[19] == 0x4C414E49465F34)
            {
              v182 = atof(v516);
              *(float *)(a2 + 8612) = v182;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46 && *(_QWORD *)&v521[8] == 0x434341555F4D52)
            {
              v184 = atof(v516);
              *(float *)(a2 + 8616) = v184;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46 && *(_QWORD *)&v521[8] == 0x434341555F4D52)
            {
              v186 = atof(v516);
              *(float *)(a2 + 8620) = v186;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46 && *(_QWORD *)&v521[8] == 0x434341445F4D52)
            {
              v188 = atof(v516);
              *(float *)(a2 + 8624) = v188;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46 && *(_QWORD *)&v521[8] == 0x434341445F4D52)
            {
              v190 = atof(v516);
              *(float *)(a2 + 8628) = v190;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46 && *(_QWORD *)&v521[7] == 0x4343415F4D5250)
            {
              v192 = atof(v516);
              *(float *)(a2 + 8632) = v192;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46 && *(_QWORD *)&v521[7] == 0x4343415F4D5250)
            {
              v194 = atof(v516);
              *(float *)(a2 + 8636) = v194;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46 && *(_QWORD *)&v521[8] == 0x48504D455F4D52)
            {
              v196 = atof(v516);
              *(float *)(a2 + 8640) = v196;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46 && *(_QWORD *)&v521[8] == 0x48504D455F4D52)
            {
              v198 = atof(v516);
              *(float *)(a2 + 8644) = v198;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x41555F5048534D52
              && *(_QWORD *)&v521[11] == 0x434341555F5048)
            {
              v201 = atof(v516);
              *(float *)(a2 + 8648) = v201;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x41555F5048534D52
              && *(_QWORD *)&v521[11] == 0x434341555F5048)
            {
              v204 = atof(v516);
              *(float *)(a2 + 8652) = v204;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x41445F5048534D52
              && *(_QWORD *)&v521[11] == 0x434341445F5048)
            {
              v207 = atof(v516);
              *(float *)(a2 + 8656) = v207;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x41445F5048534D52
              && *(_QWORD *)&v521[11] == 0x434341445F5048)
            {
              v210 = atof(v516);
              *(float *)(a2 + 8660) = v210;
            }
            v212 = *(_QWORD *)v521 == 0x504452575F515F46
                && *(_QWORD *)&v521[8] == 0x43415F5048534D52
                && *(unsigned __int16 *)&v521[16] == 67;
            v9 = a5;
            if (v212)
            {
              v213 = atof(v516);
              *(float *)(a2 + 8664) = v213;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x43415F5048534D52
              && *(unsigned __int16 *)&v521[16] == 67)
            {
              v216 = atof(v516);
              *(float *)(a2 + 8668) = v216;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x554E5F5048534D52
              && *(unsigned __int16 *)&v521[16] == 67)
            {
              v219 = atof(v516);
              *(float *)(a2 + 8672) = v219;
            }
            if (*(_QWORD *)v521 == 0x504452575F425F46
              && *(_QWORD *)&v521[8] == 0x554E5F5048534D52
              && *(unsigned __int16 *)&v521[16] == 67)
            {
              v222 = atof(v516);
              *(float *)(a2 + 8676) = v222;
            }
            if (*(_QWORD *)v521 == 0x504452575F515F46
              && *(_QWORD *)&v521[8] == 0x4D455F5048534D52
              && *(_QWORD *)&v521[11] == 0x48504D455F5048)
            {
              v225 = atof(v516);
              *(float *)(a2 + 8680) = v225;
            }
            v227 = *(_QWORD *)v521 == 0x504452575F425F46
                && *(_QWORD *)&v521[8] == 0x4D455F5048534D52
                && *(_QWORD *)&v521[11] == 0x48504D455F5048;
            v11 = a3;
            if (v227)
            {
              v228 = atof(v516);
              *(float *)(a2 + 8684) = v228;
            }
            if (!(*(_QWORD *)v521 ^ 0x575F4D4145425F46 | *(_QWORD *)&v521[8] ^ 0x564E555F48544449 | v521[16]))
            {
              v229 = atof(v516);
              *(float *)(a2 + 8380) = v229;
            }
            if (*(_QWORD *)v521 == 0x564E555F515F46)
            {
              v230 = atof(v516);
              *(float *)(a2 + 8304) = v230;
            }
            if (*(_DWORD *)v521 == 5332806)
            {
              v231 = atof(v516);
              *(float *)(a2 + 8300) = v231;
            }
            if (*(_QWORD *)v521 == 0x4C5F45444F4E5F4ELL && *(_QWORD *)&v521[5] == 0x54494D494C5F45)
              *(_DWORD *)(a2 + 8352) = LH_atoi(v516);
            if (!(*(_QWORD *)v521 ^ 0x4F4E5F564E495F4ELL | *(_QWORD *)&v521[8] ^ 0x54494D494C5F4544 | v521[16]))
              *(_DWORD *)(a2 + 8356) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x5F454E5552505F46 && *(unsigned int *)&v521[8] == 5522256)
            {
              v234 = atof(v516);
              *(float *)(a2 + 8360) = v234;
            }
            if (*(_QWORD *)v521 == 0x575F4D4145425F46 && *(_QWORD *)&v521[5] == 0x48544449575F4DLL)
            {
              v236 = atof(v516);
              *(float *)(a2 + 8376) = v236;
            }
            if (!(*(_QWORD *)v521 ^ 0x505F45444F4E5F46 | *(_QWORD *)&v521[8] ^ 0x5443505F454E5552 | v521[16]))
            {
              v237 = atof(v516);
              *(float *)(a2 + 8364) = v237;
            }
            if (!(*(_QWORD *)v521 ^ 0x505F45444F4E5F4ELL | *(_QWORD *)&v521[8] ^ 0x58414D5F454E5552 | v521[16]))
              *(_DWORD *)(a2 + 8368) = LH_atoi(v516);
            if (!(*(_QWORD *)v521 ^ 0x5449564C49535F4ELL | v521[8]))
              *(_DWORD *)(a2 + 8384) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x55534E4F48505F4ELL
              && *(_QWORD *)&v521[8] == 0x414E45505F545342
              && *(_DWORD *)&v521[16] == 5854284)
            {
              *(_DWORD *)(a2 + 8388) = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x5F48435449505F42
              && *(_QWORD *)&v521[8] == 0x4E4152545F4C5953
              && *(unsigned __int16 *)&v521[16] == 83)
            {
              *(_DWORD *)(a2 + 8392) = LH_atoi(v516) != 0;
            }
            if (!(*(_QWORD *)v521 ^ 0x48505F5255445F42 | *(_QWORD *)&v521[8] ^ 0x534E4152545F4E4FLL | v521[16]))
              *(_DWORD *)(a2 + 8396) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x48505F5255445F42 && *(_QWORD *)&v521[7] == 0x5447545F4E4F48)
              *(_DWORD *)(a2 + 8400) = LH_atoi(v516) != 0;
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREV_DIFF_THRESH"))
            {
              v243 = atof(v516);
              *(float *)(a2 + 8412) = v243;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREV_DIFF_WEIGHT"))
            {
              v244 = atof(v516);
              *(float *)(a2 + 8416) = v244;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREVPREV_DIFF_THRESH"))
            {
              v245 = atof(v516);
              *(float *)(a2 + 8420) = v245;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREVPREV_DIFF_WEIGHT"))
            {
              v246 = atof(v516);
              *(float *)(a2 + 8424) = v246;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_MODEL_PREV_DIFF_THRESH"))
            {
              v247 = atof(v516);
              *(float *)(a2 + 8428) = v247;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_MODEL_PREV_DIFF_WEIGHT"))
            {
              v248 = atof(v516);
              *(float *)(a2 + 8432) = v248;
            }
            if (*(_QWORD *)v521 == 0x48505F5255445F46
              && *(_QWORD *)&v521[8] == 0x534E4152545F4E4FLL
              && *(_QWORD *)&v521[16] == 0x4853455248545FLL)
            {
              v251 = atof(v516);
              *(float *)(a2 + 8436) = v251;
            }
            if (*(_QWORD *)v521 == 0x48505F5255445F46
              && *(_QWORD *)&v521[8] == 0x534E4152545F4E4FLL
              && *(_QWORD *)&v521[16] == 0x5448474945575FLL)
            {
              v254 = atof(v516);
              *(float *)(a2 + 8440) = v254;
            }
            v13 = v508;
            if (!(*(_QWORD *)v521 ^ 0x535F45444F4E5F4ELL | *(_QWORD *)&v521[8] ^ 0x58414D5F45524F43 | v521[16]))
              *(_DWORD *)(a2 + 8444) = LH_atoi(v516);
            if (!(*(_QWORD *)v521 ^ 0x505F45444F4E5F4ELL | *(_QWORD *)&v521[8] ^ 0x4E494D5F454E5552 | v521[16]))
              *(_DWORD *)(a2 + 8448) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x5F594C5241455F4ELL && *(_QWORD *)&v521[8] == 0x474E494E555250)
              *(_DWORD *)(a2 + 8452) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x45535245424F5F42 && *(unsigned __int16 *)&v521[8] == 69)
              *(_DWORD *)(a2 + 8456) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x45535245424F5F4ELL
              && *(_QWORD *)&v521[8] == 0x435F4C43504F5F45
              && *(_QWORD *)&v521[16] == 0x53534552504D4FLL)
            {
              *(_DWORD *)(a2 + 8464) = LH_atou(v516);
            }
            if (!strcmp(v521, "N_OBERSEE_OPCL_HUFFMAN_MAXSIZE_UNCOMPRESS"))
              *(_DWORD *)(a2 + 8468) = LH_atou(v516);
            if (*(_QWORD *)v521 == 0x45535245424F5F4ELL
              && *(_QWORD *)&v521[8] == 0x494E554C4C415F45
              && *(_QWORD *)&v521[16] == 0x4F435F4154414454
              && *(_QWORD *)&v521[23] == 0x53534552504D4FLL)
            {
              *(_DWORD *)(a2 + 8460) = LH_atou(v516);
            }
            if (*(_QWORD *)v521 == 0x45535245424F5F4ELL
              && *(_QWORD *)&v521[8] == 0x5441444D59535F45
              && *(_QWORD *)&v521[16] == 0x4552504D4F435F41
              && *(_QWORD *)&v521[19] == 0x53534552504D4FLL)
            {
              *(_DWORD *)(a2 + 8472) = LH_atou(v516);
            }
            if (*(_QWORD *)v521 == 0x464F455059545F4ELL
              && *(_QWORD *)&v521[8] == 0x534F434843544950
              && *(unsigned __int16 *)&v521[16] == 84)
            {
              *(_DWORD *)(a2 + 9056) = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x5348435449505F46
              && *(_QWORD *)&v521[8] == 0x4749455745504F4CLL
              && *(_QWORD *)&v521[11] == 0x54484749455745)
            {
              v269 = atof(v516);
              *(float *)(a2 + 9060) = v269;
            }
            if (*(_DWORD *)v521 == 1346527042 && *(unsigned __int16 *)&v521[4] == 70)
              *(_DWORD *)(a2 + 8476) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x545F5045434D5F42
              && *(_QWORD *)&v521[8] == 0x465F54534F435447
              && *(_QWORD *)&v521[11] == 0x5849465F54534FLL)
            {
              *(_DWORD *)(a2 + 8480) = LH_atoi(v516) != 0;
            }
            if (*(_QWORD *)v521 == 0x544E4F435F575F46 && *(unsigned int *)&v521[8] == 5527621)
            {
              v274 = atof(v516);
              *(float *)(a2 + 8292) = v274;
            }
            if (*(_QWORD *)v521 == 0x454E45475F575F46
              && *(_QWORD *)&v521[8] == 0x544E4F435F434952
              && *(unsigned int *)&v521[16] == 5527621)
            {
              v277 = atof(v516);
              *(float *)(a2 + 8296) = v277;
            }
            if (*(_QWORD *)v521 == 0x43494C5058455F42
              && *(_QWORD *)&v521[8] == 0x454E4F48505F5449
              && *(_QWORD *)&v521[15] == 0x4C45444F4D5F45)
            {
              *(_DWORD *)(a2 + 8784) = LH_atoi(v516) != 0;
            }
            if (*(_QWORD *)v521 == 0x5F45544154535F42
              && *(_QWORD *)&v521[8] == 0x554B4341425F4D4CLL
              && *(unsigned __int16 *)&v521[16] == 80)
            {
              *(_DWORD *)(a2 + 8912) = LH_atoi(v516) != 0;
            }
            if (*(_QWORD *)v521 == 0x54535F4C4C415F42 && *(_QWORD *)&v521[7] == 0x4D4C5F45544154)
              *(_DWORD *)(a2 + 8916) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x464F4B4341425F42 && *(unsigned __int16 *)&v521[8] == 70)
              *(_DWORD *)(a2 + 8920) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x454C42414E455F42 && *(_QWORD *)&v521[5] == 0x4C43435F454C42)
              *(_DWORD *)(a2 + 9004) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x43435F4E454C5F4ELL && *(unsigned __int16 *)&v521[8] == 76)
              *(_DWORD *)(a2 + 9008) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x48545F4C4C535F46 && *(_DWORD *)&v521[8] == 5457234)
            {
              v287 = atof(v516);
              *(float *)(a2 + 9012) = v287;
            }
            if (*(_QWORD *)v521 == 0x454C42414E455F42
              && *(_QWORD *)&v521[8] == 0x5248545F4C4C535FLL
              && *(_QWORD *)&v521[11] == 0x53455248545F4CLL)
            {
              *(_DWORD *)(a2 + 9016) = LH_atoi(v516) != 0;
            }
            if (*(_QWORD *)v521 == 0x4E555F58414D5F4ELL
              && *(_QWORD *)&v521[8] == 0x555F455341425449
              && *(_QWORD *)&v521[13] == 0x5354494E555F45)
            {
              *(_DWORD *)(a2 + 9068) = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x414F4C58414D5F4ELL && *(_QWORD *)&v521[8] == 0x5354494E555F44)
              *(_DWORD *)(a2 + 9072) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x4F48504952545F42
              && *(_QWORD *)&v521[8] == 0x454C4C49465F454ELL
              && *(unsigned __int16 *)&v521[16] == 82)
            {
              *(_DWORD *)(a2 + 9076) = LH_atoi(v516) != 0;
            }
            if (!(*(_QWORD *)v521 ^ 0x41515F4D59535F46 | v521[8]))
            {
              v295 = atof(v516);
              *(float *)(a2 + 8308) = v295;
            }
            if (*(_QWORD *)v521 == 0x5F45524E45475F46 && *(unsigned __int16 *)&v521[8] == 87)
            {
              v297 = atof(v516);
              *(float *)(a2 + 9092) = v297;
            }
            if (!(*(_QWORD *)v521 ^ 0x575F4E4E45565F46 | v521[8]))
            {
              v298 = atof(v516);
              *(float *)(a2 + 9100) = v298;
            }
            if (*(_QWORD *)v521 == 0x4843524145535F4ELL && *(_QWORD *)&v521[6] == 0x45444F4D5F4843)
              *(_DWORD *)(a2 + 9096) = LH_atoi(v516);
            if (!(*(_QWORD *)v521 ^ 0x5345524E45475F4ELL | v521[8]))
              *(_DWORD *)(a2 + 9084) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x5F45524E45475F4ELL && *(unsigned int *)&v521[8] == 5523284)
              *(_DWORD *)(a2 + 9088) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x4252455449565F4ELL
              && *(_QWORD *)&v521[8] == 0x45444F4345445F49
              && *(_QWORD *)&v521[16] == 0x4E41495241565F52
              && *(unsigned __int16 *)&v521[24] == 84)
            {
              v509[2177] = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x505F45444F4E5F4ELL
              && *(_QWORD *)&v521[8] == 0x58414D5F454E5552
              && *(_QWORD *)&v521[13] == 0x564E555F58414DLL)
            {
              *(_DWORD *)(a2 + 8372) = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x5F414C4F53505F4ELL && *(_QWORD *)&v521[5] == 0x45444F4D5F414CLL)
              v509[2188] = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x5F414C4F53505F4ELL
              && *(_QWORD *)&v521[8] == 0x415255445F4E494DLL
              && *(_QWORD *)&v521[16] == 0x5441525F4E4F4954
              && *(_QWORD *)&v521[19] == 0x4F495441525F4ELL)
            {
              v509[2195] = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x5F414C4F53505F4ELL
              && *(_QWORD *)&v521[8] == 0x415255445F58414DLL
              && *(_QWORD *)&v521[16] == 0x5441525F4E4F4954
              && *(_QWORD *)&v521[19] == 0x4F495441525F4ELL)
            {
              v509[2196] = LH_atoi(v516);
            }
            if (!(*(_QWORD *)v521 ^ 0x4552504D4F435F4ELL | *(_QWORD *)&v521[8] ^ 0x41444D59535F5353 | *(_QWORD *)&v521[16] ^ 0x53544145465F4154 | v521[24]))
              *(_DWORD *)(a2 + 8488) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x4341504D4F435F4ELL
              && *(_QWORD *)&v521[8] == 0x5441444D59535F54
              && *(_QWORD *)&v521[16] == 0x53544145465F41)
            {
              *(_DWORD *)(a2 + 8500) = LH_atoi(v516);
            }
            if (!strcmp(v521, "N_COMPRESS_MFS_DATA_COST_JOIN_ELEMENTS"))
              *(_DWORD *)(a2 + 8492) = LH_atoi(v516);
            if (*(_QWORD *)v521 == 0x4552504D4F435F4ELL
              && *(_QWORD *)&v521[8] == 0x445F53464D5F5353
              && *(_QWORD *)&v521[16] == 0x54494E555F415441
              && *(_QWORD *)&v521[22] == 0x415441445F5449)
            {
              *(_DWORD *)(a2 + 8496) = LH_atoi(v516);
            }
            if (*(_QWORD *)v521 == 0x4C4B5F4553555F42 && *(_QWORD *)&v521[8] == 0x54534F43545F44)
              v509[2214] = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x4946454E4F545F42 && *(_QWORD *)&v521[5] == 0x5245544C494645)
              *(_DWORD *)(a2 + 8484) = LH_atoi(v516) != 0;
            if (*(_QWORD *)v521 == 0x45444F4345445F42
              && *(_QWORD *)&v521[8] == 0x4F52465F30464C5FLL
              && *(_QWORD *)&v521[13] == 0x564A5F4D4F5246)
            {
              *(_DWORD *)(a2 + 8408) = LH_atoi(v516) != 0;
            }
LABEL_1019:
            if ((v14 & 0x80000000) != 0)
              break;
            v72 += v510;
            v71 = v520;
          }
          while (v72 < v520);
        }
        goto LABEL_1021;
      }
      if (!(*(_DWORD *)__src ^ 0x58454546 | v519))
      {
        v62 = a1;
        v63 = a2;
        v64 = v11;
        v65 = 1;
LABEL_1034:
        v332 = v9;
        v333 = 0;
        v334 = 0;
        goto LABEL_1035;
      }
      if (!(*(_DWORD *)__src ^ 0x34544350 | v519))
      {
        v523 = 0;
        if (v8)
        {
          v69 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          v523 = v69;
        }
        else
        {
          ChunkData = ssftriff_reader_GetChunkData(v11, v520, &v523, v15, v16, v17, v18, v19);
          if ((ChunkData & 0x80000000) != 0)
            return ChunkData;
          v69 = v523;
        }
        v353 = v520;
        v354 = a1;
        v355 = v11;
        v356 = v499;
LABEL_1182:
        RiffStringTable = uselect_LoadRiffStringTable(v354, v355, v69, v353, v356);
        goto LABEL_1228;
      }
      if (*(_DWORD *)__src ^ 0x334D5453 | v519)
      {
        if (!(*(_DWORD *)__src ^ 0x34435655 | v519))
        {
          v34 = v520;
          v35 = a2;
          v36 = v11;
          v37 = 11;
          v38 = 0;
          v346 = 0;
          v347 = 0;
          v348 = 1;
          goto LABEL_1227;
        }
        if (!(*(_DWORD *)__src ^ 0x34495655 | v519))
        {
          v381 = *(unsigned __int16 *)(v501 + 544);
          if (v381 <= 0x3F)
          {
            v382 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v381 + 66328), v489, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v382;
              *(_DWORD *)(a2 + 12000) = v382;
            }
            goto LABEL_1219;
          }
LABEL_1165:
          LODWORD(v14) = -2065686524;
          goto LABEL_1229;
        }
        if (!(*(_DWORD *)__src ^ 0x34504B50 | v519)
          || !(*(_DWORD *)__src ^ 0x34424B50 | v519)
          || !(*(_DWORD *)__src ^ 0x344F4B50 | v519)
          || !(*(_DWORD *)__src ^ 0x34554B50 | v519))
        {
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Select data file includes PSOLA data and cannot be used on this engine, PSOLA data should be included in the synth file.", v17, v18, v19, v466);
          LODWORD(v14) = -2065686503;
          goto LABEL_1229;
        }
        if (!(*(_DWORD *)__src ^ 0x34454A43 | v519))
        {
          v423 = *(unsigned __int16 *)(v501 + 544);
          if (v423 <= 0x3F)
          {
            v424 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v423 + 66328), v479, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v424;
              v509[420] = v424;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34444E55 | v519))
        {
          if (*(_DWORD *)(a2 + 8496) == 1)
          {
            v62 = a1;
            v63 = a2;
            v64 = v11;
            v65 = 1;
            v332 = v9;
            v333 = v8;
            v334 = v504;
LABEL_1035:
            RiffStringTable = select_bet4_ParseRiff(v62, v63, v64, v65, v332, v333, v334);
LABEL_1228:
            LODWORD(v14) = RiffStringTable;
            goto LABEL_1229;
          }
          v434 = *(unsigned __int16 *)(v501 + 544);
          if (v434 <= 0x3F)
          {
            v435 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v434 + 66328), v476, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v435;
              *(_DWORD *)(a2 + 9600) = v435;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34524E55 | v519))
        {
          v432 = *(unsigned __int16 *)(v501 + 544);
          if (v432 <= 0x3F)
          {
            v433 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v432 + 66328), v477, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v433;
              *(_DWORD *)(a2 + 9360) = v433;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34475356 | v519))
        {
          v436 = *(unsigned __int16 *)(v501 + 544);
          if (v436 <= 0x3F)
          {
            v437 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v436 + 66328), v475, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v437;
              v509[480] = v437;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x4953564F | v519))
        {
          v438 = *(unsigned __int16 *)(v501 + 544);
          if (v438 <= 0x3F)
          {
            v439 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v438 + 66328), v474, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v439;
              v509[1680] = v439;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x4453564F | v519))
        {
          v440 = *(unsigned __int16 *)(v501 + 544);
          if (v440 <= 0x3F)
          {
            v441 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v440 + 66328), v473, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v441;
              v509[1740] = v441;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x344D5953 | v519))
        {
          v442 = *(unsigned __int16 *)(v501 + 544);
          if (v442 <= 0x3F)
          {
            v443 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v442 + 66328), v472, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v443;
              *v509 = v443;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34445953 | v519))
        {
          v444 = *(unsigned __int16 *)(v501 + 544);
          if (v444 <= 0x3F)
          {
            v445 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v444 + 66328), v471, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v445;
              v509[120] = v445;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34575953 | v519))
        {
          v446 = *(unsigned __int16 *)(v501 + 544);
          if (v446 <= 0x3F)
          {
            v447 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v446 + 66328), v470, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v447;
              v509[180] = v447;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34425953 | v519))
        {
          v457 = *(unsigned __int16 *)(v501 + 544);
          if (v457 <= 0x3F)
          {
            v458 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v457 + 66328), v469, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v458;
              v509[60] = v458;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (*(_DWORD *)__src ^ 0x34494357 | v519 && *(_DWORD *)__src ^ 0x34494353 | v519)
        {
          if (!(*(_DWORD *)__src ^ 0x34565649 | v519))
          {
            v459 = *(unsigned __int16 *)(v501 + 544);
            if (v459 <= 0x3F)
            {
              v464 = v520;
              LODWORD(v14) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v459 + 66328), v468, v15, v16, v17, v18, v19);
              if ((v14 & 0x80000000) == 0)
              {
                ++*(_WORD *)(v501 + 544);
                *(_DWORD *)(v501 + 24) += v464;
                *(_DWORD *)(a2 + 14640) = v464;
              }
            }
            else
            {
              LODWORD(v14) = -2065686524;
            }
LABEL_1291:
            v8 = a6;
            v13 = v508;
            v11 = a3;
            goto LABEL_1298;
          }
          if (!strcmp(v9, "KID4"))
          {
            if (!(*(_DWORD *)__src ^ 0x3444494B | v519))
            {
              v460 = v520;
              v461 = a2;
              v11 = a3;
              v462 = a3;
              v463 = 49;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "KMT4"))
          {
            if (!(*(_DWORD *)__src ^ 0x34544D4B | v519))
            {
              v460 = v520;
              v461 = a2;
              v11 = a3;
              v462 = a3;
              v463 = 50;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "KMQ4"))
          {
            if (!(*(_DWORD *)__src ^ 0x34514D4B | v519))
            {
              v460 = v520;
              v461 = a2;
              v11 = a3;
              v462 = a3;
              v463 = 51;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "KMP4"))
          {
            if (!(*(_DWORD *)__src ^ 0x34504D4B | v519))
            {
              v460 = v520;
              v461 = a2;
              v11 = a3;
              v462 = a3;
              v463 = 52;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "OAUD"))
          {
            v460 = v520;
            v461 = a2;
            v11 = a3;
            v462 = a3;
            v463 = 53;
            goto LABEL_1297;
          }
          if (!strcmp(a5, "OAUB"))
          {
            v460 = v520;
            v461 = a2;
            v11 = a3;
            v462 = a3;
            v463 = 57;
            goto LABEL_1297;
          }
          if (!strcmp(a5, "OAUF"))
          {
            v460 = v520;
            v461 = a2;
            v11 = a3;
            v462 = a3;
            v463 = 58;
            goto LABEL_1297;
          }
          if (!strcmp(a5, "OSDT"))
          {
            v460 = v520;
            v461 = a2;
            v11 = a3;
            v462 = a3;
            v463 = 61;
LABEL_1297:
            v8 = a6;
            LODWORD(v14) = select_bet4_LoadMfsData(v461, v462, v463, 0, v460, a6, v504, 0);
            v13 = v508;
LABEL_1298:
            v9 = a5;
            goto LABEL_1229;
          }
          v9 = a5;
          v8 = a6;
          v11 = a3;
          if (strcmp(a5, "OSDO"))
            goto LABEL_1216;
          v20 = v520;
          v21 = a2;
          v22 = a3;
          v23 = 62;
          goto LABEL_126;
        }
        v448 = ssftriff_reader_GetPosition(v11);
        v523 = 0;
        v454 = *(unsigned __int16 *)(v501 + 544);
        LODWORD(v14) = -2065686524;
        if (v454 <= 0x3F)
        {
          v455 = v448;
          v456 = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v454 + 66328), &v523, v449, v450, v451, v452, v453);
          if ((v456 & 0x80000000) == 0)
          {
            ++*(_WORD *)(v501 + 544);
            *(_DWORD *)(v501 + 24) += v520;
            ssftriff_reader_Seek(v11, 4u, 1);
            v456 = select_bet4_ParseRiff(a1, a2, v11, 1, v9, v523, v455);
          }
          LODWORD(v14) = v456;
        }
        goto LABEL_1021;
      }
      v523 = 0;
      if (v520 >= *(_DWORD *)(v501 + 20))
      {
        v326 = 0;
        v325 = 0;
LABEL_1103:
        LODWORD(v14) = select_bet4_ParseRiff(a1, a2, v11, 1, v9, v326, v325);
        ++*(_DWORD *)(a2 + 260);
        goto LABEL_1229;
      }
      v323 = *(unsigned __int16 *)(v501 + 544);
      LODWORD(v14) = -2065686524;
      if (v323 <= 0x3F)
      {
        RiffStringTable = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v323 + 66328), &v523, v15, v16, v17, v18, v19);
        if (RiffStringTable < 0)
          goto LABEL_1228;
        v325 = ssftriff_reader_GetPosition(v11);
        ++*(_WORD *)(v501 + 544);
        *(_DWORD *)(v501 + 24) += v520;
        v326 = v523;
        goto LABEL_1103;
      }
    }
LABEL_1229:
    v425 = ssftriff_reader_CloseChunk(v11);
    if ((int)v14 > -1 && v425 < 0)
      v14 = v425;
    else
      v14 = v14;
  }
  while ((v14 & 0x80000000) == 0);
  if ((v14 & 0x1FFF) == 0x14)
  {
    v14 = 0;
    *__dst = 0;
  }
  return v14;
}

uint64_t logAverageSizesOfClusters(uint64_t result, int *a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;

  if (*(_DWORD *)(*((_QWORD *)a2 + 134) + 8328))
    v3 = a3 > 2;
  else
    v3 = 1;
  if (!v3)
  {
    v6 = result;
    result = MFS__log_select_Diag(result, 1, (uint64_t)(&off_1EA94AA00)[a3]);
    if (*a2 >= 1)
    {
      v7 = 2;
      do
      {
        v8 = a2 + 11;
        if (a3)
          v8 = (int *)(*(_QWORD *)&a2[2 * a3 + 12] + 4 * v7);
        v9 = *v8;
        v10 = *(_QWORD *)(*(_QWORD *)&a2[2 * a3 + 428] + 8 * v7);
        v11 = 0;
        if (v10)
          v12 = v9 == 0;
        else
          v12 = 1;
        if (!v12)
        {
          if ((v9 + 1) > 2)
            v13 = (v9 + 1);
          else
            v13 = 2;
          v14 = (int *)(v10 + 20);
          v15 = v13 - 1;
          do
          {
            v16 = *v14;
            v14 += 4;
            v11 += v16;
            --v15;
          }
          while (v15);
        }
        result = MFS__log_select_Diag(v6, 1, (uint64_t)"state %d : %d pdfs - average %d");
        v3 = v7++ <= *a2;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t select_bet4_UpdateEarlyEmission(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v8;
  char *__src;

  __src = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"bet4earlyemission", &__src) & 0x80000000) != 0
    && (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"bet4earlyemissionallowed", &__src) & 0x80000000) != 0
    || !StringToBool(__src))
  {
    v5 = 0;
    v6 = "Early-emission has not been switched on";
  }
  else
  {
    v5 = 1;
    v6 = "Early-emission is switched on, from pipeline header or configuration";
  }
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v6, v2, v3, v4, v8);
  return v5;
}

_QWORD *select_bet4_loc_VoiceClose(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  _WORD *v15;
  uint64_t *v16;
  int v17;
  uint64_t **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  if (a2)
  {
    v3 = (uint64_t)result;
    v4 = a2 + 40352;
    v5 = *(_QWORD **)(a2 + 40352);
    if (v5 && *v5)
    {
      v6 = 0;
      v7 = 1;
      do
      {
        *(_QWORD *)(a2 + 8 * v6 + 5432) = 0;
        v6 = v7;
      }
      while (*(_QWORD *)(*(_QWORD *)v4 + 8 * v7++));
    }
    v9 = *(_QWORD *)(a2 + 41256);
    if (v9)
    {
      heap_Free((_QWORD *)result[1], v9);
      *(_QWORD *)(v4 + 904) = 0;
    }
    uselect_FreeRiffStringTable((_QWORD *)v3, *(uint64_t **)(a2 + 7744));
    *(_QWORD *)(a2 + 7744) = 0;
    uselect_FreeRiffStringTable((_QWORD *)v3, *(uint64_t **)(v4 + 968));
    uselect_FreeRiffStringTable((_QWORD *)v3, *(uint64_t **)(v4 + 960));
    v10 = *(uint64_t **)(v4 + 872);
    v11 = *(uint64_t ***)(v4 + 880);
    v12 = *(uint64_t **)(v4 + 888);
    if (v10)
    {
      v13 = *v10;
      if (*v10)
      {
        v14 = 0;
        do
        {
          heap_Free(*(_QWORD **)(v3 + 8), v13);
          v13 = v10[(unsigned __int16)++v14];
        }
        while (v13);
      }
      heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v10);
    }
    v15 = (_WORD *)(a2 + 66840);
    if (v11)
    {
      v16 = *v11;
      if (*v11)
      {
        v17 = 0;
        v18 = v11;
        do
        {
          v19 = *v16;
          if (*v16)
          {
            v20 = 0;
            do
            {
              heap_Free(*(_QWORD **)(v3 + 8), v19);
              ++v20;
              v16 = *v18;
              v19 = (*v18)[(unsigned __int16)v20];
            }
            while (v19);
          }
          heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v16);
          v18 = &v11[(unsigned __int16)++v17];
          v16 = *v18;
        }
        while (*v18);
      }
      heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v11);
    }
    if (v12)
    {
      v21 = *v12;
      if (*v12)
      {
        v22 = 0;
        do
        {
          heap_Free(*(_QWORD **)(v3 + 8), v21);
          v21 = v12[(unsigned __int16)++v22];
        }
        while (v21);
      }
      heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v12);
    }
    uselect_FreeRiffStringTable((_QWORD *)v3, *(uint64_t **)v4);
    uselect_FreeRiffStringTable((_QWORD *)v3, *(uint64_t **)(v4 + 8));
    mfs_DeInitData(v3, a2 + 25424);
    mfs_DeInitParam(v3, (_DWORD *)(a2 + 128));
    if (*v15)
    {
      v30 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a2 + 66328 + 8 * v30++), v23, v24, v25, v26, v27, v28, v29);
      while (v30 < (unsigned __int16)*v15);
    }
    *v15 = 0;
    *(_BYTE *)a2 = 0;
    return heap_Free(*(_QWORD **)(v3 + 8), a2);
  }
  return result;
}

uint64_t select_bet4_LoadMfsData(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v12;
  int Position;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v8 = a5;
  v9 = a4;
  if (a6)
  {
    v12 = a7;
    Position = ssftriff_reader_GetPosition(a2);
    result = 0;
    v16 = a1 + 240 * a3 + 24 * v9;
    *(_QWORD *)(v16 + 9112) = a6 + (Position - v12);
    *(_DWORD *)(v16 + 9120) = v8;
  }
  else if ((_DWORD)a8 && *(_DWORD *)(a1 + 66316) <= a5)
  {
    v18 = a1 + 240 * a3 + 24 * (int)a4;
    *(_DWORD *)(v18 + 9120) = a5;
    v19 = ssftriff_reader_GetPosition(a2);
    result = 0;
    *(_DWORD *)(v18 + 9124) = v19;
  }
  else
  {
    v17 = *(unsigned __int16 *)(a1 + 66840);
    if (v17 <= 0x3F)
    {
      result = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 8 * v17 + 66328), (_QWORD *)(a1 + 240 * a3 + 24 * (int)a4 + 9112), a4, a5, 0, a7, a8);
      if ((result & 0x80000000) == 0)
      {
        ++*(_WORD *)(a1 + 66840);
        *(_DWORD *)(a1 + 66320) += v8;
        *(_DWORD *)(a1 + 240 * a3 + 24 * v9 + 9120) = v8;
      }
    }
    else
    {
      return 2229280772;
    }
  }
  return result;
}

BOOL StringToBool(char *__src)
{
  char v1;
  char *v2;
  uint64_t v3;
  __darwin_ct_rune_t v4;
  int v5;
  char __dst[4];
  unsigned __int8 v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  strncpy(__dst, __src, 0x13uLL);
  v9 = 48;
  v1 = __dst[0];
  if (__dst[0])
  {
    v2 = &__dst[1];
    v3 = MEMORY[0x1E0C80978];
    while (1)
    {
      v4 = v1;
      if (v1 < 0)
        break;
      if ((*(_DWORD *)(v3 + 4 * v1 + 60) & 0x8000) != 0)
        goto LABEL_5;
LABEL_6:
      v5 = *v2++;
      v1 = v5;
      if (!v5)
        return *(_DWORD *)__dst == 7562617
            || *(unsigned __int16 *)__dst == 49
            || (*(_DWORD *)__dst ^ 0x65757274 | v8) == 0;
    }
    if (!__maskrune(v1, 0x8000uLL))
      goto LABEL_6;
LABEL_5:
    *(v2 - 1) = __tolower(v4);
    goto LABEL_6;
  }
  return *(_DWORD *)__dst == 7562617 || *(unsigned __int16 *)__dst == 49 || (*(_DWORD *)__dst ^ 0x65757274 | v8) == 0;
}

uint64_t select_bet4_loc_SetSynthParams(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 56);
  result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicealpha", *(float *)(v2 + 128));
  if ((result & 0x80000000) == 0)
  {
    result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicebeta", *(float *)(v2 + 132));
    if ((result & 0x80000000) == 0)
    {
      result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicevol", *(float *)(v2 + 164));
      if ((result & 0x80000000) == 0)
      {
        result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicevuvrelamp", *(float *)(v2 + 140));
        if ((result & 0x80000000) == 0)
        {
          result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicemvfboost", *(float *)(v2 + 168));
          if ((result & 0x80000000) == 0)
          {
            result = select_bet4_loc_SetSynthParamInt(v1, (uint64_t)"bet2voiceframesize", *(_DWORD *)(v2 + 152));
            if ((result & 0x80000000) == 0)
            {
              result = select_bet4_loc_SetSynthParamInt(v1, (uint64_t)"bet2voiceorder", *(_DWORD *)(v2 + 144));
              if ((result & 0x80000000) == 0)
              {
                result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicef0std", *(float *)(v2 + 176));
                if ((result & 0x80000000) == 0)
                {
                  result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicef0mean", *(float *)(v2 + 180));
                  if ((result & 0x80000000) == 0)
                  {
                    result = select_bet4_loc_SetSynthParamInt(v1, (uint64_t)"voicepitchavghz", *(_DWORD *)(v2 + 184));
                    if ((result & 0x80000000) == 0)
                      return select_bet4_loc_SetSynthParamString(v1, (char *)(v2 + 7800));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t select_bet4_loc_SetSynthParamInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = paramc_ParamSetInt(*(_QWORD *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 58009, "%s%s%s%d%s%x", v4, v5, v6, v7, "parameter");
  return v8;
}

uint64_t select_bet4_loc_SetSynthParamString(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = paramc_ParamSetStr(*(_QWORD *)(a1 + 40), (uint64_t)"synth_type", a2);
  if ((v7 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET4", 58009, "%s%s%s%s%s%x", v3, v4, v5, v6, "parameter");
  return v7;
}

_QWORD *FreeBET4TuningData(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = result;
    if (*(_DWORD *)(a2 + 12) || *(_DWORD *)(a2 + 16))
    {
      v4 = result[1367];
      if (!*(_DWORD *)(v4 + 8328))
      {
        v5 = result[7];
        if (v4 != v5 + 128)
        {
          heap_Free(*(_QWORD **)(result[2] + 8), v4);
          v5 = v3[7];
        }
        v3[1367] = v5 + 128;
      }
    }
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v7 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 8;
        do
        {
          v10 = *(_QWORD *)(*(_QWORD *)a2 + v9);
          if (v10)
          {
            heap_Free(*(_QWORD **)(v3[2] + 8), v10);
            v7 = *(unsigned int *)(a2 + 8);
          }
          ++v8;
          v9 += 48;
        }
        while (v8 < v7);
        v6 = *(_QWORD *)a2;
      }
      heap_Free(*(_QWORD **)(v3[2] + 8), v6);
    }
    return heap_Free(*(_QWORD **)(v3[2] + 8), a2);
  }
  return result;
}

uint64_t mfs_UnitSequence_SequenceEarlyEmission_Obersee(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t UnitData_Obersee;
  int MessageOffsetMsec;
  int v12;
  __int128 v14;
  __int128 v15;

  v3 = a1[72];
  v4 = *(_DWORD *)(*(_QWORD *)(v3 + 2120) + 1096);
  *(_DWORD *)(v3 + 2600) = *(_DWORD *)(v3 + 2272);
  v5 = a3 - a2;
  if (a3 <= a2)
    return 0;
  v7 = v4 - 1;
  v14 = 0u;
  v15 = 0u;
  v8 = a2;
  do
  {
    v9 = *(_DWORD *)(*(_QWORD *)(v3 + 2152) + 4 * v8);
    UnitData_Obersee = mfs_getUnitData_Obersee(*(_QWORD *)(v3 + 2120), *a1, v9, (uint64_t)&v14);
    if ((UnitData_Obersee & 0x80000000) != 0)
      break;
    MessageOffsetMsec = mfs_GetMessageOffsetMsec(*(_QWORD *)(v3 + 2120), v9);
    if (++v8 < (unint64_t)*(unsigned int *)(v3 + 2160))
    {
      v12 = v9 == v7 ? -1 : v9;
      UnitData_Obersee = mfs_SegmentList_Add(v3 + 2248, v12, SBYTE9(v15), MessageOffsetMsec, (unsigned __int16)(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 2120) + 1072) + 24)* BYTE11(v15)));
      if ((UnitData_Obersee & 0x80000000) != 0)
        break;
    }
    --v5;
  }
  while (v5);
  return UnitData_Obersee;
}

uint64_t mfs_UnitSequence_Sequence_Obersee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t UnitData_Obersee;
  uint64_t v15;
  int MessageOffsetMsec;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;

  v21 = 0u;
  v22 = 0u;
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1096);
  *(_DWORD *)(a2 + 24) = 0;
  v7 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 16), 264 * *(unsigned int *)(a1 + 48));
  if (!v7)
    return 2229280778;
  *(_QWORD *)(a1 + 16) = v7;
  if (!*(_DWORD *)(a1 + 48))
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v6 - 1;
  while (1)
  {
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8);
    UnitData_Obersee = mfs_getUnitData_Obersee(*(_QWORD *)(a1 + 8), a3, v13, (uint64_t)&v21);
    if ((UnitData_Obersee & 0x80000000) != 0)
      break;
    if (v8)
    {
      ++v9;
      if ((_DWORD)v21 != v11)
      {
        v15 = *(_QWORD *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
        *(_DWORD *)v15 = v10;
        *(_DWORD *)(v15 + 4) = v9;
        *(_OWORD *)(v15 + 8) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 56) = 0u;
        *(_OWORD *)(v15 + 72) = 0u;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *(_OWORD *)(v15 + 120) = 0u;
        *(_OWORD *)(v15 + 136) = 0u;
        *(_OWORD *)(v15 + 152) = 0u;
        *(_OWORD *)(v15 + 168) = 0u;
        *(_OWORD *)(v15 + 184) = 0u;
        *(_OWORD *)(v15 + 200) = 0u;
        *(_OWORD *)(v15 + 216) = 0u;
        *(_OWORD *)(v15 + 232) = 0u;
        *(_OWORD *)(v15 + 248) = 0u;
        ++*(_DWORD *)(a1 + 24);
        v10 = v9;
      }
    }
    MessageOffsetMsec = mfs_GetMessageOffsetMsec(*(_QWORD *)(a1 + 8), v13);
    ++v8;
    v17 = *(unsigned int *)(a1 + 48);
    if (v8 < v17)
    {
      if (v13 == v12)
        v18 = -1;
      else
        v18 = v13;
      UnitData_Obersee = mfs_SegmentList_Add(a2, v18, SBYTE9(v22), MessageOffsetMsec, (unsigned __int16)(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1072) + 24) * BYTE11(v22)));
      if ((UnitData_Obersee & 0x80000000) != 0)
        return UnitData_Obersee;
      v17 = *(unsigned int *)(a1 + 48);
    }
    v11 = v13;
    if (v8 >= v17)
    {
      if (v9 != v10)
      {
        v19 = *(_QWORD *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
        *(_DWORD *)v19 = v10;
        *(_DWORD *)(v19 + 4) = v9 + 1;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        *(_OWORD *)(v19 + 152) = 0u;
        *(_OWORD *)(v19 + 168) = 0u;
        *(_OWORD *)(v19 + 184) = 0u;
        *(_OWORD *)(v19 + 200) = 0u;
        *(_OWORD *)(v19 + 216) = 0u;
        *(_OWORD *)(v19 + 232) = 0u;
        *(_OWORD *)(v19 + 248) = 0u;
        ++*(_DWORD *)(a1 + 24);
      }
      return UnitData_Obersee;
    }
  }
  return UnitData_Obersee;
}

uint64_t CandidatePhonemeDuration(unsigned __int8 *a1, unsigned int a2, int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  _QWORD *v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  mfs_getUnitDataFromMfsData(a1, a2, (uint64_t *)&v12);
  v6 = *((unsigned __int16 *)v12 + 4);
  v7 = a3 - 2;
  if (a3 > 2)
  {
    v8 = a2 - 1;
    do
    {
      mfs_getUnitDataFromMfsData(a1, v8, (uint64_t *)&v12);
      v6 = v6 + *((unsigned __int16 *)v12 + 4);
      --v8;
      --v7;
    }
    while (v7);
  }
  v9 = 2 - a3;
  if (v9 + *(_DWORD *)a1 >= 2)
  {
    v10 = 1;
    do
    {
      mfs_getUnitDataFromMfsData(a1, a2 + v10, (uint64_t *)&v12);
      v6 = v6 + *((unsigned __int16 *)v12 + 4);
      ++v10;
    }
    while (v10 < v9 + *(_DWORD *)a1);
  }
  return v6;
}

uint64_t CandidatePhonemeDurationDistance(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  char v8;
  unsigned int v9;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 12232) + a2);
  v6 = v5 - a4;
  if (v5 - a4 < 0)
    v6 = a4 - v5;
  v8 = v5 < a4 && v6 > a5;
  v9 = v6 << v8;
  if (v6 > 2 * a5)
    return (5 * v6);
  else
    return v9;
}

uint64_t mfs_InitData(uint64_t a1, void *a2, _DWORD *a3)
{
  void *v6;

  bzero(a2, 0x30B0uLL);
  v6 = (void *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 6416);
  *((_QWORD *)a2 + 1527) = v6;
  if (!v6)
    return 2229280778;
  bzero(v6, 0x1910uLL);
  return BET3FLT__InitVData(a1, a2, a3);
}

void mfs_DeInitData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 12232);
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v4);
    *(_QWORD *)(a2 + 12232) = 0;
  }
  v5 = *(_QWORD *)(a2 + 1072);
  if (v5 && *(_DWORD *)(v5 + 8368) == 1)
    mfs_deInitUnitDataCompact((_QWORD *)a1, (_QWORD *)(a2 + 1104));
  v6 = *(_QWORD *)(a2 + 12440);
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v6);
    *(_QWORD *)(a2 + 12440) = 0;
  }
  v7 = *(_QWORD *)(a2 + 12448);
  if (v7)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v7);
    *(_QWORD *)(a2 + 12448) = 0;
  }
  v8 = *(_QWORD *)(a2 + 12240);
  if (v8)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v8);
    *(_QWORD *)(a2 + 12240) = 0;
  }
  v9 = *(_QWORD *)(a2 + 2400);
  if (v9)
    heap_Free(*(_QWORD **)(a1 + 8), v9);
  v10 = -160;
  v11 = (uint64_t *)(a2 + 1552);
  do
  {
    v12 = v11[20];
    v13 = *v11;
    if (*v11)
    {
      *v11 = v13 + 16;
      heap_Free(*(_QWORD **)(a1 + 8), v13 + 16);
    }
    if (v12)
      heap_Free(*(_QWORD **)(a1 + 8), v12);
    TrieIntInit((_QWORD *)(a2 + 1552 + v10 + 728));
    ++v11;
    v10 += 16;
  }
  while (v10);
  mfs_HarchData_DeInit((_OWORD *)(a2 + 1944));
  mfs_StateNGram_DeInit((_OWORD *)(a2 + 2280));
  mfs_symData_DeInit((_QWORD *)a2);
  v14 = *(_DWORD **)(a2 + 1072);
  if (v14 && v14[2082])
  {
    if ((v14[2086] - 3) <= 1)
    {
      mfs_BPESymData_DeInit_Obersee(a2);
      v14 = *(_DWORD **)(a2 + 1072);
    }
    if (v14[2083] == 1)
      mfs_AllUnitCompData_DeInit_Obersee(a2);
  }
  BET3FLT__DeInitVData(a1, (_OWORD *)a2);
  v15 = *(_QWORD *)(a2 + 12216);
  if (v15)
    heap_Free(*(_QWORD **)(a1 + 8), v15);
  bzero((void *)a2, 0x30B0uLL);
}

_QWORD *mfs_deInitUnitDataCompact(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v3 = result;
    v4 = a2[10];
    if (v4)
    {
      result = heap_Free((_QWORD *)result[1], v4);
      a2[10] = 0;
    }
    v5 = a2[11];
    if (v5)
    {
      result = heap_Free((_QWORD *)v3[1], v5);
      a2[11] = 0;
    }
    v6 = a2[12];
    if (v6)
    {
      result = heap_Free((_QWORD *)v3[1], v6);
      a2[12] = 0;
    }
  }
  return result;
}

uint64_t mfs_isUnitRemoved(uint64_t result, unsigned int a2)
{
  if (result)
    return ((1 << (a2 & 7)) & *(unsigned __int8 *)(result + ((unint64_t)a2 >> 3))) >> (a2 & 7);
  return result;
}

uint64_t mfs_initUnitDataCompact(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _WORD *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 *v46;
  __int16 v47;

  v11 = *(_QWORD *)(a2 + 1072);
  if (a3 && v11)
  {
    v12 = *(_QWORD *)(v11 + 9704);
    v13 = *(_DWORD *)(v11 + 9952) >> 1;
    *a3 = *(_DWORD *)(v11 + 9712) >> 2;
    a3[1] = v13;
    v14 = *(_QWORD *)(v11 + 9944);
    *((_QWORD *)a3 + 2) = v12;
    *((_QWORD *)a3 + 3) = v14;
    v15 = *(_QWORD *)(v11 + 10184);
    a3[2] = *(_DWORD *)(v11 + 10192);
    v16 = *(_QWORD *)(v11 + 10424);
    *((_QWORD *)a3 + 4) = v15;
    *((_QWORD *)a3 + 5) = v16;
    a3[12] = *(_DWORD *)(v11 + 10672);
    *((_QWORD *)a3 + 7) = *(_QWORD *)(v11 + 10664);
  }
  v17 = *(unsigned int *)(v11 + 132);
  if ((int)v17 < 1)
    goto LABEL_25;
  v18 = 0;
  v19 = (_DWORD *)(v11 + 264);
  do
  {
    v20 = *(v19 - 10);
    if ((v20 != 1 || *(_DWORD *)(v11 + 25288) != 1) && v20 != 0)
      v18 += *v19;
    ++v19;
    --v17;
  }
  while (v17);
  if (!v18)
  {
LABEL_25:
    MFS__log_select_Error(a1, 0, (uint64_t)"iStrRecordLen can not be 0!\n", a4, a5, a6, a7, a8);
    a3[28] = 0;
    v34 = 2229281034;
LABEL_42:
    mfs_deInitUnitDataCompact((_QWORD *)a1, a3);
    return v34;
  }
  a3[28] = v18;
  v23 = heap_Calloc(*(_QWORD **)(a1 + 8), *a3, 2);
  if (!v23)
    goto LABEL_41;
  v29 = a3[1];
  if ((_DWORD)v29)
  {
    v30 = 0;
    v31 = 0;
    v32 = *((_QWORD *)a3 + 3);
    do
    {
      if (*(_WORD *)(v32 + 2 * v30))
      {
        v33 = 0;
        do
          *(_WORD *)(v23 + 2 * (v31 + v33++)) = v30;
        while (v33 < *(unsigned __int16 *)(v32 + 2 * v30));
        v31 += v33;
      }
      ++v30;
    }
    while (v30 != v29);
  }
  else
  {
    v29 = 0;
  }
  *((_QWORD *)a3 + 10) = v23;
  v35 = (_WORD *)heap_Calloc(*(_QWORD **)(a1 + 8), v29, 2);
  if (!v35)
    goto LABEL_41;
  v36 = (_WORD *)*((_QWORD *)a3 + 3);
  *v35 = *v36;
  v37 = a3[1];
  if (v37 >= 2)
  {
    v38 = 1;
    v39 = 1;
    do
    {
      v35[(unsigned __int16)v39] = v36[(unsigned __int16)v39] + v35[v38 - 1];
      v38 = (unsigned __int16)++v39;
    }
    while (v37 > (unsigned __int16)v39);
  }
  *((_QWORD *)a3 + 11) = v35;
  *((_QWORD *)a3 + 13) = *(_QWORD *)(v11 + 11144);
  v40 = *((_QWORD *)a3 + 10);
  v41 = *(_QWORD *)(a2 + 1072);
  v42 = heap_Calloc(*(_QWORD **)(a1 + 8), *a3, 2);
  if (!v42)
  {
LABEL_41:
    v34 = 2229280778;
    MFS__log_select_Error(a1, 0, (uint64_t)"Not enough memory\n", v24, v25, v26, v27, v28);
    goto LABEL_42;
  }
  v43 = *a3;
  if (v43 >= 2)
  {
    v44 = 0;
    v45 = *(_QWORD *)(a2 + 2384);
    do
    {
      if (*(unsigned __int16 *)(v40 + 2 * v44 + 2) == *(unsigned __int16 *)(v40 + 2 * v44))
      {
        v46 = (__int16 *)(v42 + 2 * v44);
        v47 = *v46;
        v46[1] = *v46;
        if (!v45
          || !(((1 << (v44 & 7)) & *(unsigned __int8 *)(v45 + (v44 >> 3))) >> (v44 & 7)))
        {
          v46[1] = v47 + *(_WORD *)(v41 + 24) * *(unsigned __int8 *)(*((_QWORD *)a3 + 5) + v44);
        }
      }
      else
      {
        *(_WORD *)(v42 + 2 * v44 + 2) = 0;
      }
      ++v44;
    }
    while (v43 - 1 != v44);
  }
  v34 = 0;
  *(_WORD *)(v42 + 2 * (v43 - 1)) = 0;
  *((_QWORD *)a3 + 12) = v42;
  return v34;
}

uint64_t mfs_getUnitDataFromMfsData(unsigned __int8 *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  char *v17;
  char v18;

  v3 = *((_QWORD *)a1 + 134);
  v4 = *(_DWORD *)(v3 + 8368);
  if (v4 != 1)
  {
    if (v4)
      return 2229281034;
    v5 = 0;
    *a3 = *((_QWORD *)a1 + 136) + 16 * a2;
    return v5;
  }
  v6 = *a3;
  v7 = *((_DWORD *)a1 + 276);
  if (v7 - 1 == a2)
  {
    v5 = 0;
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = -65536;
    *(_DWORD *)(v6 + 12) = 65793;
    return v5;
  }
  v8 = *a1;
  v9 = *((_QWORD *)a1 + 148);
  v10 = *(unsigned __int16 *)(v9 + 2 * a2);
  v11 = *(_DWORD *)(*((_QWORD *)a1 + 140) + 4 * a2);
  *(_WORD *)(v6 + 10) = v10;
  *(_DWORD *)v6 = v11;
  *(_WORD *)(v6 + 8) = *(unsigned __int8 *)(*((_QWORD *)a1 + 143) + a2);
  v12 = *((_QWORD *)a1 + 142);
  v13 = a2 / v8;
  *(_BYTE *)(v6 + 13) = *(_BYTE *)(v12 + a2 / v8);
  if (a2 >= v8 && (v14 = *(unsigned __int16 *)(v9 + 2 * a2), v14 <= *(unsigned __int16 *)(v9 + 2 * (a2 - v8))))
  {
    if (v7 > a2 && v7 - v8 < a2 || (v16 = v8 + a2, v16 < v7) && v14 < *(unsigned __int16 *)(v9 + 2 * v16))
    {
      v15 = 0;
      *(_BYTE *)(v6 + 12) = *(_BYTE *)(v12 + (v13 - 1));
      goto LABEL_17;
    }
    *(_BYTE *)(v6 + 12) = *(_BYTE *)(v12 + (v13 - 1));
  }
  else
  {
    *(_BYTE *)(v6 + 12) = 0;
  }
  if ((v13 + 1) < *((_DWORD *)a1 + 278))
  {
    v15 = *(_BYTE *)(v12 + (v13 + 1));
LABEL_17:
    *(_BYTE *)(v6 + 14) = v15;
  }
  *(_DWORD *)(v6 + 4) = *(unsigned __int16 *)(*((_QWORD *)a1 + 150) + 2 * a2) / *(int *)(v3 + 24)
                      + *(_DWORD *)(*((_QWORD *)a1 + 151) + 4 * v10) / *((_DWORD *)a1 + 304);
  v17 = (char *)*((_QWORD *)a1 + 145);
  v5 = 0;
  if (*((_DWORD *)a1 + 288) == 1)
    v18 = *v17;
  else
    v18 = v17[a2];
  *(_BYTE *)(v6 + 15) = v18;
  return v5;
}

uint64_t mfs_LoadData(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t VData;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned __int16 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  _WORD *v32;
  int v33;
  const char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int UnitDataRecordSize_Obersee;
  unsigned int v38;
  uint64_t v39;
  uint64_t inited;
  unsigned int *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned int v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t i;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  int *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _WORD *v128;
  uint64_t v129;
  __int16 *v130;
  __int16 v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  _WORD *v136;
  uint64_t v137;
  __int16 *v138;
  __int16 v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  _WORD *v143;
  uint64_t v144;
  __int16 *v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  char *v150;
  char v151;
  char *v152;
  __int16 *v153;
  __int16 *v154;
  __int16 *v155;
  int *v156;

  VData = MFS__LoadVData(a1, (uint64_t)a2, a3);
  if ((VData & 0x80000000) != 0)
    return VData;
  v12 = (unsigned int *)(a3 + 16432);
  v13 = 2229280778;
  a2[115] = 1;
  *((_QWORD *)a2 + 134) = a3;
  v14 = *(_DWORD *)(a3 + 8328);
  if (v14 == 1)
  {
    if (!*(_DWORD *)(a3 + 23392))
    {
      *((_QWORD *)a2 + 135) = *(_QWORD *)(a3 + 8984);
LABEL_32:
      if (*(_DWORD *)(a3 + 8332) == 1)
      {
        mfs_AllUnitCompData_Init_Obersee((_QWORD *)a3, (uint64_t)a2);
        v35 = a2[472];
        v36 = 8 * *(_DWORD *)(a3 + 21712);
        a2[274] = v36 / v35 + 1;
        if (v36 % v35 < 9)
          goto LABEL_45;
      }
      else
      {
        UnitDataRecordSize_Obersee = mfs_getUnitDataRecordSize_Obersee();
        v38 = *(_DWORD *)(a3 + 21712);
        a2[274] = v38 / UnitDataRecordSize_Obersee + 1;
        if (!(v38 % UnitDataRecordSize_Obersee))
        {
          a2[275] = UnitDataRecordSize_Obersee;
LABEL_45:
          a2[594] = 0;
          *((_QWORD *)a2 + 298) = *(_QWORD *)(a3 + 9224);
          a2[598] = *(_DWORD *)(a3 + 9232) >> 2;
          goto LABEL_46;
        }
      }
      v34 = "MFS_DATA_OBERSEE_ALLUNITDATA block does not appear to match runtime engine!\n";
LABEL_37:
      v39 = a1;
LABEL_38:
      MFS__log_select_Error(v39, 0, (uint64_t)v34, v7, v8, v9, v10, v11);
      return 2229281034;
    }
    v24 = *(_QWORD *)(a3 + 23144);
    v25 = *(_WORD *)(a3 + 23152) - 1;
    v26 = *(unsigned __int8 *)(v24 + v25);
    v27 = heap_Calloc(*(_QWORD **)(a1 + 8), *v12 << 10, 8);
    if (!v27)
      return 2229280778;
    *((_QWORD *)a2 + 300) = v27;
    v28 = 4 * v26 * *v12;
    if ((_DWORD)v28)
    {
      v29 = 0;
      v30 = *(_WORD **)(a3 + 23384);
      do
      {
        if (*v30)
        {
          v31 = v29 % v25;
          if (*(unsigned __int8 *)(v24 + v31) * *(unsigned __int8 *)(v24 + v31) != (unsigned __int16)*v30)
            return 2229281034;
          v32 = v30 + 1;
          *(_QWORD *)(*((_QWORD *)a2 + 300) + 8 * v29) = v32;
          v30 = &v32[*(unsigned __int8 *)(v24 + v31) * *(unsigned __int8 *)(v24 + v31)];
        }
        else
        {
          v30 += 2;
        }
        ++v29;
      }
      while (v28 != v29);
    }
  }
  else
  {
    if (v14 || !*(_DWORD *)(a3 + 18352))
    {
      *((_QWORD *)a2 + 135) = *(_QWORD *)(a3 + 8984);
      goto LABEL_15;
    }
    v15 = heap_Calloc(*(_QWORD **)(a1 + 8), 1792 * *v12, 8);
    *((_QWORD *)a2 + 300) = v15;
    if (!v15)
      return 2229280778;
    v16 = *(_DWORD **)(a3 + 18344);
    v17 = *v12;
    if (*v16 == 1)
      v17 = 1792 * *v12;
    if (v17)
    {
      v18 = 0;
      v19 = (unsigned __int16 *)&v16[*v16 == 1];
      v20 = v19;
      do
      {
        v21 = *v20;
        v20 += 2;
        if (v21)
        {
          *(_QWORD *)(*((_QWORD *)a2 + 300) + v18) = v20;
          v20 = v19 + 32770;
        }
        v18 += 8;
        v19 = v20;
      }
      while (8 * v17 != v18);
    }
  }
  v33 = *(_DWORD *)(a3 + 8328);
  *((_QWORD *)a2 + 135) = *(_QWORD *)(a3 + 8984);
  if (v33 == 1)
    goto LABEL_32;
LABEL_15:
  v22 = *(_DWORD *)(a3 + 8368);
  if (v22 == 1)
  {
    *((_QWORD *)a2 + 298) = *(_QWORD *)(a3 + 10904);
    a2[598] = *(_DWORD *)(a3 + 10912);
    a2[594] = 1;
    if ((mfs_initUnitDataCompact(a1, (uint64_t)a2, (unsigned int *)a2 + 276, v7, v8, v9, v10, v11) & 0x80000000) != 0)
      return 2229281034;
    v23 = a2[276];
  }
  else
  {
    *((_QWORD *)a2 + 298) = *(_QWORD *)(a3 + 9224);
    a2[598] = *(_DWORD *)(a3 + 9232) >> 2;
    if (v22)
    {
      v34 = "Unknown UND4 compressing algorithm!\n";
      goto LABEL_37;
    }
    *((_QWORD *)a2 + 136) = *(_QWORD *)(a3 + 9464);
    v23 = *(_DWORD *)(a3 + 9472) >> 4;
  }
  a2[274] = v23;
  if (*(_DWORD *)(a3 + 8272))
  {
    VData = mfs_fastPhoneDur(a1, a2);
    if ((VData & 0x80000000) != 0)
      return VData;
  }
LABEL_46:
  v41 = *(unsigned int **)(a3 + 11624);
  if (v41 && ((v42 = *(_DWORD **)(a3 + 11864), *(_DWORD *)(a3 + 8328)) || v42))
  {
    v49 = *v41;
    *((_BYTE *)a2 + 12456) = v49;
    v50 = heap_Calloc(*(_QWORD **)(a1 + 8), v49, 24);
    if (!v50)
      return 2229280778;
    if ((_DWORD)v49)
    {
      v51 = 0;
      v52 = (_DWORD *)v50;
      do
      {
        v51 += 4;
        *v52 = *(unsigned int *)((char *)v41 + v51);
        v52 += 6;
      }
      while (4 * v49 != v51);
      v53 = v51 + 4;
      v54 = (_BYTE *)(v50 + 5);
      v55 = v49;
      do
      {
        *v54 = *(unsigned int *)((char *)v41 + v53);
        v54 += 24;
        v53 += 4;
        --v55;
      }
      while (v55);
      v56 = 0;
      v57 = (char *)v41 + v53;
      do
      {
        v58 = 0;
        if (v56)
        {
          v59 = v56;
          v60 = v50;
          do
          {
            v61 = *(unsigned __int8 *)(v60 + 5);
            v62 = *(_DWORD *)v60;
            v60 += 24;
            v58 += 4 * v61 * v62;
            --v59;
          }
          while (v59);
        }
        *(_QWORD *)(v50 + 24 * v56++ + 8) = &v57[v58];
      }
      while (v56 != v49);
    }
    if (*(_DWORD *)(a3 + 8328))
    {
      LODWORD(v48) = 0;
    }
    else
    {
      v68 = 4 * v42[2];
      v69 = v68 + 20;
      LODWORD(v48) = *(_DWORD *)((char *)v42 + (v68 + 16)) / (*v42 + 1);
      v70 = *(unsigned int *)((char *)v42 + (v68 + 20));
      if ((_DWORD)v70)
      {
        v71 = v68 + 24;
        v72 = (_BYTE *)(v50 + 4);
        v73 = *(unsigned int *)((char *)v42 + v69);
        do
        {
          *v72 = *(_DWORD *)((char *)v42 + v71);
          v72 += 24;
          v71 += 4;
          --v73;
        }
        while (v73);
        v74 = 0;
        v75 = (char *)v42 + v71;
        do
        {
          v76 = 0;
          if (v74)
          {
            v77 = v74;
            v78 = (unsigned __int8 *)(v50 + 4);
            do
            {
              v79 = *v78;
              v78 += 24;
              v76 += v48 * v79;
              --v77;
            }
            while (v77);
          }
          *(_QWORD *)(v50 + 24 * v74++ + 16) = &v75[v76];
        }
        while (v74 != v70);
      }
    }
    *((_QWORD *)a2 + 1555) = v50;
  }
  else if (*(_QWORD *)(a3 + 11408))
  {
    v43 = *(unsigned int *)(a3 + 132);
    if ((int)v43 >= 1)
    {
      v44 = 0;
      v45 = a2 + 308;
      v46 = 24 * v43;
      v47 = 224;
      do
      {
        if (*(_DWORD *)(a3 + v47))
        {
          *((_QWORD *)v45 - 1) = *(_QWORD *)(a3 + v44 + 11384);
          *v45 = *(_DWORD *)(a3 + v44 + 11396);
        }
        v44 += 24;
        v45 += 8;
        v47 += 4;
      }
      while (v46 != v44);
    }
    v48 = *(unsigned int *)(a3 + 11416) / (4 * (unint64_t)*(unsigned int *)(a3 + 268));
  }
  else
  {
    if (!*(_QWORD *)(a3 + 12128))
      goto LABEL_86;
    v63 = *(unsigned int *)(a3 + 132);
    if ((int)v63 >= 1)
    {
      v64 = (_DWORD *)(a3 + 224);
      v65 = a2 + 312;
      v66 = a3;
      do
      {
        if (*v64++)
        {
          *(v65 - 1) = *(_QWORD *)(v66 + 12104);
          *v65 = *(_QWORD *)(v66 + 12344);
          *((_DWORD *)v65 - 4) = *(_DWORD *)(v66 + 11396);
        }
        v65 += 4;
        v66 += 24;
        --v63;
      }
      while (v63);
    }
    v48 = *(unsigned int *)(a3 + 12136) / (2 * (unint64_t)*(unsigned int *)(a3 + 268));
  }
  a2[386] = v48;
LABEL_86:
  if (*(_DWORD *)(a3 + 8328))
  {
    v80 = *a2;
    v81 = *(_QWORD *)(a3 + 22208);
    v82 = *(_QWORD *)(a3 + 22232);
    v83 = *(_QWORD *)(a3 + 22184);
    v84 = heap_Calloc(*(_QWORD **)(a1 + 8), v80 + 2, 8);
    *((_QWORD *)a2 + 215) = v84;
    if (!v84)
      return 2229280778;
    v85 = heap_Calloc(*(_QWORD **)(a1 + 8), v80 + 2, 8);
    *((_QWORD *)a2 + 216) = v85;
    if (!v85)
      return 2229280778;
    v86 = heap_Calloc(*(_QWORD **)(a1 + 8), v80 + 2, 8);
    *((_QWORD *)a2 + 214) = v86;
    if (!v86)
      return 2229280778;
    if ((int)v80 >= 1)
    {
      v87 = 16 * a2[11];
      v88 = 2;
      do
      {
        *(_QWORD *)(*((_QWORD *)a2 + 215) + 8 * v88) = v81;
        *(_QWORD *)(*((_QWORD *)a2 + 215) + 8 * v88) -= 16;
        v81 += 16 * *(int *)(*((_QWORD *)a2 + 7) + 4 * v88);
        *(_QWORD *)(*((_QWORD *)a2 + 216) + 8 * v88) = v82;
        *(_QWORD *)(*((_QWORD *)a2 + 216) + 8 * v88) -= 16;
        v82 += 16 * *(int *)(*((_QWORD *)a2 + 8) + 4 * v88);
        *(_QWORD *)(*((_QWORD *)a2 + 214) + 8 * v88) = v83;
        *(_QWORD *)(*((_QWORD *)a2 + 214) + 8 * v88++) -= 16;
        v83 += v87;
      }
      while ((_DWORD)v80 + 2 != v88);
    }
    v89 = a2 + 448;
    *((_QWORD *)a2 + 225) = *(_QWORD *)(a3 + 22448);
    *((_QWORD *)a2 + 226) = *(_QWORD *)(a3 + 22472);
    v90 = 22424;
  }
  else
  {
    v91 = *(_QWORD *)(a3 + 12608);
    v92 = *(_QWORD *)(a3 + 12632);
    v93 = *(_QWORD *)(a3 + 12584);
    v94 = heap_Calloc(*(_QWORD **)(a1 + 8), *a2, 8);
    *((_QWORD *)a2 + 195) = v94;
    if (!v94)
      return 2229280778;
    *((_QWORD *)a2 + 195) = v94 - 16;
    v95 = heap_Calloc(*(_QWORD **)(a1 + 8), *a2, 8);
    *((_QWORD *)a2 + 196) = v95;
    if (!v95)
      return 2229280778;
    *((_QWORD *)a2 + 196) = v95 - 16;
    v96 = heap_Calloc(*(_QWORD **)(a1 + 8), *a2, 8);
    *((_QWORD *)a2 + 194) = v96;
    if (!v96)
      return 2229280778;
    *((_QWORD *)a2 + 194) = v96 - 16;
    v97 = *a2;
    if ((int)v97 >= 1)
    {
      v98 = v97 + 2;
      v99 = 8 * a2[11];
      v100 = 2;
      do
      {
        *(_QWORD *)(*((_QWORD *)a2 + 195) + 8 * v100) = v91;
        *(_QWORD *)(*((_QWORD *)a2 + 195) + 8 * v100) -= 8;
        v91 += 8 * *(int *)(*((_QWORD *)a2 + 7) + 4 * v100);
        *(_QWORD *)(*((_QWORD *)a2 + 196) + 8 * v100) = v92;
        *(_QWORD *)(*((_QWORD *)a2 + 196) + 8 * v100) -= 8;
        v92 += 8 * *(int *)(*((_QWORD *)a2 + 8) + 4 * v100);
        *(_QWORD *)(*((_QWORD *)a2 + 194) + 8 * v100) = v93;
        *(_QWORD *)(*((_QWORD *)a2 + 194) + 8 * v100++) -= 8;
        v93 += v99;
      }
      while (v98 != v100);
    }
    v89 = a2 + 408;
    *((_QWORD *)a2 + 205) = *(_QWORD *)(a3 + 12848);
    *((_QWORD *)a2 + 206) = *(_QWORD *)(a3 + 12872);
    v90 = 12824;
  }
  *v89 = *(_QWORD *)(a3 + v90);
  VData = mfs_HarchData_Load((uint64_t)(a2 + 486), a3);
  if ((VData & 0x80000000) != 0)
    return VData;
  *((_QWORD *)a2 + 251) = *(_QWORD *)(a3 + 14504);
  v101 = *(unsigned int *)(a3 + 132);
  if ((int)v101 >= 1)
  {
    v102 = (_DWORD *)(a3 + 224);
    v103 = (_QWORD *)(a3 + 14744);
    v104 = a2 + 504;
    do
    {
      if (*v102++)
        *v104 = *v103;
      v103 += 3;
      ++v104;
      --v101;
    }
    while (v101);
  }
  *((_QWORD *)a2 + 262) = *(_QWORD *)(a3 + 15248);
  VData = UNICORN__mfs_SparseMtx_Load((uint64_t)(a2 + 534), a3 + 15480);
  if ((VData & 0x80000000) != 0)
    return VData;
  inited = UNICORN__mfs_SparseMtx_Load((uint64_t)(a2 + 538), a3 + 15504);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(_DWORD *)(a3 + 8784))
    inited = mfs_StateNGram_Load((uint64_t)(a2 + 570), *a2, a3 + 15720);
  if (!mfs_symData_Init(a3, a2, a1))
    return 2229280778;
  v106 = *((_QWORD *)a2 + 134);
  if (*(_DWORD *)(v106 + 8328))
  {
    if ((*(_DWORD *)(v106 + 8344) - 3) <= 1)
    {
      inited = mfs_BPESymData_Init_Obersee(a3, (uint64_t)a2, a1, v7, v8, v9, v10, v11);
      if ((inited & 0x80000000) != 0)
        return inited;
    }
  }
  v107 = *(_DWORD *)(a3 + 8364);
  if (v107 != 1)
  {
    if (!v107)
    {
      *((_QWORD *)a2 + 1528) = *(_QWORD *)(a3 + 18104);
LABEL_118:
      v108 = *(_QWORD *)(a3 + 20744);
      if (v108)
        *((_QWORD *)a2 + 1531) = v108;
      if (*(_QWORD *)(a3 + 20984))
      {
        mfs_loadKLDMTX(a2, a3);
        inited = 0;
      }
      if (*(_QWORD *)(a3 + 21224))
      {
        mfs_loadKLDMTX_Quant((uint64_t)a2, a3);
        inited = 0;
      }
      v109 = *(_QWORD *)(a3 + 21464);
      if (v109)
      {
        a2[3064] = 2;
        *((_QWORD *)a2 + 1533) = v109;
        v110 = 32;
        for (i = 8; i != 32; i += 8)
          v110 += 4 * *(_DWORD *)(v109 + i);
        inited = 0;
        *((_QWORD *)a2 + 1534) = v109 + v110;
        *((_QWORD *)a2 + 1535) = v109 + v110 + 16 * *(_DWORD *)(v109 + 4);
      }
      MFS__log_select_Diag(a1, 1, (uint64_t)"Loaded %d states from %d threshold at %d\n");
      return inited;
    }
    v34 = "Loaded MFS_DATA_COST_JOIN_ELEMENTS failed, unsupported compression setting!\n";
    v39 = 0;
    goto LABEL_38;
  }
  v113 = *(unsigned __int8 **)(a3 + 18104);
  v155 = 0;
  v156 = 0;
  v153 = 0;
  v154 = 0;
  v152 = 0;
  MFS__log_select_Diag(a1, 1, (uint64_t)"decompressing MFS_DATA_COST_JOIN_ELEMENTS, mode=%d\n");
  v114 = *(unsigned int *)v113;
  v115 = heap_Calloc(*(_QWORD **)(a1 + 8), v114, 12);
  if (!v115)
    goto LABEL_163;
  v116 = *((_DWORD *)v113 + 1);
  v117 = do_huffman_uncompress(a1, (uint64_t)(v113 + 8), (uint64_t *)&v156, v116, 4 * (int)v114);
  v118 = (uint64_t)v156;
  if ((v117 & 0x80000000) != 0)
  {
    v13 = v117;
    if (v156)
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v156);
    goto LABEL_163;
  }
  if ((_DWORD)v114)
  {
    v119 = v114;
    v120 = (_DWORD *)v115;
    v121 = v156;
    do
    {
      v122 = *v121++;
      *v120 = v122;
      v120 += 3;
      --v119;
    }
    while (v119);
  }
  else if (!v156)
  {
    goto LABEL_143;
  }
  heap_Free(*(_QWORD **)(a1 + 8), v118);
LABEL_143:
  v123 = *(_DWORD *)&v113[v116 + 8];
  v124 = v116 + 12;
  v125 = do_huffman_uncompress(a1, (uint64_t)&v113[v124], (uint64_t *)&v155, v123, 2 * (int)v114);
  if ((v125 & 0x80000000) != 0)
  {
LABEL_162:
    v13 = v125;
    goto LABEL_163;
  }
  v126 = v123 + v124;
  v127 = (uint64_t)v155;
  if ((_DWORD)v114)
  {
    v128 = (_WORD *)(v115 + 4);
    v129 = v114;
    v130 = v155;
    do
    {
      v131 = *v130++;
      *v128 = v131;
      v128 += 6;
      --v129;
    }
    while (v129);
  }
  else if (!v155)
  {
    goto LABEL_150;
  }
  heap_Free(*(_QWORD **)(a1 + 8), v127);
  v155 = 0;
LABEL_150:
  v132 = *(_DWORD *)&v113[v126];
  v133 = (v126 + 4);
  v125 = do_huffman_uncompress(a1, (uint64_t)&v113[v133], (uint64_t *)&v154, v132, 2 * (int)v114);
  if ((v125 & 0x80000000) != 0)
    goto LABEL_162;
  v134 = v132 + v133;
  v135 = (uint64_t)v154;
  if ((_DWORD)v114)
  {
    v136 = (_WORD *)(v115 + 6);
    v137 = v114;
    v138 = v154;
    do
    {
      v139 = *v138++;
      *v136 = v139;
      v136 += 6;
      --v137;
    }
    while (v137);
  }
  else if (!v154)
  {
    goto LABEL_157;
  }
  heap_Free(*(_QWORD **)(a1 + 8), v135);
  v154 = 0;
LABEL_157:
  v140 = *(_DWORD *)&v113[v134];
  v141 = (v134 + 4);
  v125 = do_huffman_uncompress(a1, (uint64_t)&v113[v141], (uint64_t *)&v153, v140, 2 * (int)v114);
  if ((v125 & 0x80000000) != 0)
    goto LABEL_162;
  v142 = (uint64_t)v153;
  if ((_DWORD)v114)
  {
    v143 = (_WORD *)(v115 + 8);
    v144 = v114;
    v145 = v153;
    do
    {
      v146 = *v145++;
      *v143 = v146;
      v143 += 6;
      --v144;
    }
    while (v144);
    goto LABEL_175;
  }
  if (v153)
  {
LABEL_175:
    heap_Free(*(_QWORD **)(a1 + 8), v142);
    v153 = 0;
  }
  v147 = do_lzfast_uncompress(a1, &v113[v140 + 4 + v141], (uint64_t *)&v152, *(_DWORD *)&v113[v140 + v141], v114);
  inited = v147;
  if ((v147 & 0x80000000) == 0)
  {
    v148 = (uint64_t)v152;
    if ((_DWORD)v114)
    {
      v149 = (_BYTE *)(v115 + 10);
      v150 = v152;
      do
      {
        v151 = *v150++;
        *v149 = v151;
        v149 += 12;
        --v114;
      }
      while (v114);
    }
    else if (!v152)
    {
LABEL_184:
      *((_QWORD *)a2 + 1528) = v115;
      *((_QWORD *)a2 + 1530) = v115;
      MFS__log_select_Diag(a1, 1, (uint64_t)"decompressing MFS_DATA_COST_JOIN_ELEMENTS, mode=%d done!\n");
      goto LABEL_118;
    }
    heap_Free(*(_QWORD **)(a1 + 8), v148);
    goto LABEL_184;
  }
  v13 = v147;
LABEL_163:
  if (v155)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v155);
  if (v154)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v154);
  if (v153)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v153);
  if (v152)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v152);
  if (v115)
    heap_Free(*(_QWORD **)(a1 + 8), v115);
  return v13;
}

uint64_t mfs_fastPhoneDur(uint64_t a1, int *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  signed int v6;
  signed int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  _QWORD v15[2];

  v3 = a2[274];
  v4 = *a2;
  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  v5 = heap_Calloc(*(_QWORD **)(a1 + 8), v3, 1);
  *((_QWORD *)a2 + 1529) = v5;
  if (!v5)
    return 2229280778;
  v6 = v3 / v4 * v4;
  if (v6 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    LODWORD(v9) = *a2;
    do
    {
      if ((int)v9 >= 1)
      {
        v10 = 0;
        do
        {
          v11 = v10 + 2;
          *(_BYTE *)(*((_QWORD *)a2 + 1529) + (v7 + v10)) = CandidatePhonemeDuration((unsigned __int8 *)a2, v7 + (int)v10, (int)v10 + 2);
          v9 = *a2;
          ++v10;
        }
        while (v11 <= v9);
        v8 = v7 + v10 - 1;
      }
      v7 += v9;
    }
    while (v7 < v6);
  }
  if (v8 < a2[274])
  {
    v13 = v8;
    do
    {
      mfs_getUnitDataFromMfsData((unsigned __int8 *)a2, v13, (uint64_t *)&v14);
      *(_BYTE *)(*((_QWORD *)a2 + 1529) + v13++) = *((_BYTE *)v14 + 8);
    }
    while (v13 < a2[274]);
  }
  return 0;
}

uint64_t do_huffman_uncompress(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 1);
  if (v8)
  {
    v14 = v8;
    Huffman_Uncompress(a2);
    MFS__log_select_Diag(a1, 0, (uint64_t)"Huffman decoding, from: %d Bytes, to: %d Bytes, rate: %f%%\n");
    result = 0;
    *a3 = v14;
  }
  else
  {
    MFS__log_select_Error(a1, 0, (uint64_t)"Not enough memory\n", v9, v10, v11, v12, v13);
    return 2229280778;
  }
  return result;
}

uint64_t do_lzfast_uncompress(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v9 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 1);
  if (v9)
  {
    v15 = v9;
    LZ_Uncompress(a2, v9, a4);
    MFS__log_select_Diag(a1, 0, (uint64_t)"Lz_fast decoding, from: %d Bytes, to: %d Bytes\n, rate: %f%%\n");
    result = 0;
    *a3 = v15;
  }
  else
  {
    MFS__log_select_Error(a1, 0, (uint64_t)"Not enough memory\n", v10, v11, v12, v13, v14);
    return 2229280778;
  }
  return result;
}

_DWORD *mfs_loadKLDMTX(_DWORD *result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  int **v9;
  int v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v2 = *(int **)(a2 + 20984);
  result[3064] = 0;
  if ((int)*result >= 1)
  {
    LODWORD(v3) = *result + 2;
    if ((int)v3 <= 3)
      v3 = 3;
    else
      v3 = v3;
    v4 = v11;
    v5 = v3 - 2;
    v6 = v5;
    do
    {
      v7 = *v2++;
      *v4++ = v7;
      --v6;
    }
    while (v6);
    v8 = (int *)v11;
    v9 = (int **)(result + 3070);
    do
    {
      *v9++ = v2;
      v10 = *v8++;
      v2 += ((v10 - 1) * v10) >> 1;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t mfs_loadKLDMTX_Quant(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(_DWORD *)(result + 12256) = 1;
  v2 = *(_DWORD **)(a2 + 21224);
  if (*(int *)result <= 0)
  {
    *(_BYTE *)(result + 12264) = *v2;
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)result + 2;
    if ((int)v3 <= 3)
      v3 = 3;
    else
      v3 = v3;
    v4 = v3 - 2;
    v5 = v2 + 1;
    v6 = v4;
    do
    {
      ++v5;
      --v6;
    }
    while (v6);
    *(_BYTE *)(result + 12264) = *(v5 - 1);
    v7 = result + 12288;
    do
    {
      v8 = v7 + 4 * v6;
      *(_DWORD *)(v8 + 72) = *v5;
      *(_DWORD *)(v8 + 112) = v5[1];
      v9 = (int)v5[2];
      v10 = v5 + 3;
      *(_QWORD *)(v7 + 8 * v6) = v10;
      v5 = (_DWORD *)((char *)v10 + v9);
      ++v6;
    }
    while (v4 != v6);
  }
  return result;
}

void *mfs_GetMsgName(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return &mfs_GetMsgName_szEmpty;
  v2 = *(_QWORD *)(a1 + 1080);
  if (!v2)
    return &mfs_GetMsgName_szEmpty;
  v3 = v2 + 30 * a2;
  if (*(_DWORD *)(a1 + 1096) - 1 > a2)
    return (void *)v3;
  else
    return &mfs_GetMsgName_szEmpty;
}

uint64_t mfs_GetMessageOffsetMsec(uint64_t a1, signed int a2)
{
  signed int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v11[2];
  _QWORD *v12;
  _QWORD v13[2];

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 1072);
  if (*(_DWORD *)(v4 + 8328))
  {
    v5 = *(_QWORD *)(a1 + 1080);
    if (v5)
      return *(unsigned __int16 *)(v5 + 30 * a2 + 23);
    else
      return 0;
  }
  else if (*(_DWORD *)(v4 + 8368) == 1)
  {
    return *(unsigned __int16 *)(*(_QWORD *)(a1 + 1200) + 2 * a2);
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0;
    v11[1] = 0;
    v12 = v13;
    v10 = v11;
    v11[0] = 0;
    mfs_getUnitDataFromMfsData((unsigned __int8 *)a1, a2, (uint64_t *)&v12);
    v7 = (uint64_t)v12;
    do
    {
      v8 = v2;
      v9 = __OFSUB__(v2--, 1);
    }
    while (v2 < 0 == v9
         && (mfs_getUnitDataFromMfsData((unsigned __int8 *)a1, v2, (uint64_t *)&v10) & 0x80000000) == 0
         && *((unsigned __int16 *)v10 + 5) == *(unsigned __int16 *)(v7 + 10));
    mfs_getUnitDataFromMfsData((unsigned __int8 *)a1, v8, (uint64_t *)&v10);
    return (*(_DWORD *)(*(_QWORD *)(a1 + 1072) + 24) * (*(_DWORD *)(v7 + 4) - *((_DWORD *)v10 + 1)));
  }
}

uint64_t mfs_uselect_Init_Obersee(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 1928);
  *a1 = v6;
  a1[72] = a2;
  a1[73] = a3;
  a1[74] = a4;
  fastallo_Init((_WORD *)a1 + 4, *(_QWORD *)(v6 + 8), 4096);
  *((_DWORD *)a1 + 142) = 0;
  v7 = 75;
  while (1)
  {
    result = mfs_CandidateList_Init_Obersee((uint64_t)&a1[v7], *(_QWORD *)(*a1 + 8));
    if ((_DWORD)result)
      break;
    v7 += 10;
    if (v7 == 105)
    {
      *((_DWORD *)a1 + 210) = -1;
      a1[2251] = 0;
      v14 = (_DWORD *)a1[74];
      if (v14[2084] == 2)
      {
        v15 = heap_Alloc(*(_QWORD *)(*a1 + 8), v14[2085]);
        a1[2251] = v15;
        if (!v15)
          return 2229280778;
        v14 = (_DWORD *)a1[74];
      }
      if ((v14[2086] - 3) > 1)
        return 0;
      result = mfs_BPESymDataCache_Init_Obersee((uint64_t)(a1 + 2253), a3, *a1, v9, v10, v11, v12, v13);
      if (!(_DWORD)result)
        return 0;
      return result;
    }
  }
  return result;
}

uint64_t mfs_uselect_Finalize_Obersee(uint64_t *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[72])
  {
    fastallo_Terminate(a1 + 1);
    for (i = 75; i != 105; i += 10)
      mfs_CandidateList_DeInit_Obersee(&a1[i], *(_QWORD **)(*a1 + 8));
    v3 = a1[2251];
    if (v3)
      heap_Free(*(_QWORD **)(*a1 + 8), v3);
    if ((*(_DWORD *)(a1[74] + 8344) - 3) <= 1)
      mfs_BPESymDataCache_DeInit_Obersee((uint64_t)(a1 + 2253), *a1);
    mfs_Viterbi_DeInit_Obersee((uint64_t)(a1 + 106));
    a1[72] = 0;
  }
  return 0;
}

uint64_t mfs_Viterbi_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(a4 + 128) = 0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = 0;
  v5 = *(_QWORD *)(a2 + 1928);
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 32) = 0;
  v6 = 2229280778;
  if (*(_DWORD *)(a2 + 2064) != 2)
  {
    v17 = heap_Calloc(*(_QWORD **)(v5 + 8), 1024, 32);
    *(_QWORD *)(a4 + 48) = v17;
    if (!v17)
      return v6;
    v18 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a4 + 8), 1024, 32);
    *(_QWORD *)(a4 + 56) = v18;
    if (!v18)
      return v6;
    v19 = 0;
    v20 = *(_QWORD *)(a4 + 48) + 24;
    do
    {
      *(_QWORD *)(v18 + 24 + v19) = 0;
      *(_QWORD *)(v20 + v19) = 0;
      v19 += 32;
    }
    while (v19 != 0x8000);
    *(_QWORD *)(a4 + 72) = 0x40000000400;
LABEL_17:
    v6 = 0;
    *(_DWORD *)(a4 + 40) = 0;
    return v6;
  }
  v7 = *(unsigned int *)(a3 + 8240);
  v8 = heap_Calloc(*(_QWORD **)(v5 + 8), v7, 32);
  *(_QWORD *)(a4 + 48) = v8;
  if (v8)
  {
    v9 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a4 + 8), v7, 32);
    *(_QWORD *)(a4 + 56) = v9;
    if (v9)
    {
      if ((_DWORD)v7)
      {
        v10 = (_QWORD *)(v9 + 24);
        v11 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 24);
        v12 = v7;
        do
        {
          *v10 = 0;
          v10 += 4;
          *v11 = 0;
          v11 += 4;
          --v12;
        }
        while (v12);
      }
      *(_DWORD *)(a4 + 72) = v7;
      *(_DWORD *)(a4 + 76) = v7;
      *(_DWORD *)(a4 + 104) = v7;
      v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a4 + 8), v7, 4);
      *(_QWORD *)(a4 + 96) = v13;
      if (v13)
      {
        v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a4 + 8), *(unsigned int *)(a4 + 104), 1);
        *(_QWORD *)(a4 + 88) = v14;
        if (v14)
        {
          v15 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a4 + 8), *(unsigned int *)(a4 + 104), 4);
          *(_QWORD *)(a4 + 112) = v15;
          if (v15)
          {
            v16 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a4 + 8), *(unsigned int *)(a4 + 104), 4);
            *(_QWORD *)(a4 + 120) = v16;
            if (v16)
              goto LABEL_17;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t mfs_Viterbi_Reset(uint64_t a1, int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 2064) != 2)
  {
    v7 = a3 - a2 + 1;
    if (v7 > v6)
    {
      if (*(_DWORD *)(a1 + 72))
      {
        v18 = 0;
        v19 = *(_QWORD *)(a1 + 48);
        v20 = 24;
        do
        {
          v21 = *(_QWORD *)(v19 + v20);
          if (v21)
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v21);
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + v20) = 0;
          }
          v22 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), (a3 - a2 + 1), 4);
          v19 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(v19 + v20) = v22;
          if (!v22)
            return 2229280778;
          ++v18;
          v20 += 32;
        }
        while (v18 < *(unsigned int *)(a1 + 72));
      }
      if (*(_DWORD *)(a1 + 76))
      {
        v23 = 0;
        v24 = *(_QWORD *)(a1 + 56);
        v25 = 24;
        while (1)
        {
          v26 = *(_QWORD *)(v24 + v25);
          if (v26)
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v26);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + v25) = 0;
          }
          v27 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), (a3 - a2 + 1), 4);
          v24 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(v24 + v25) = v27;
          if (!v27)
            return 2229280778;
          ++v23;
          v25 += 32;
          if (v23 >= *(unsigned int *)(a1 + 76))
            goto LABEL_29;
        }
      }
    }
    goto LABEL_29;
  }
  v7 = a3 - a2 + 1;
  if (v7 <= v6)
    goto LABEL_29;
  if (*(_DWORD *)(a1 + 72))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 48);
    v10 = 24;
    do
    {
      v11 = *(_QWORD *)(v9 + v10);
      if (v11)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v11);
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + v10) = 0;
      }
      v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), (a3 - a2 + 1), 4);
      v9 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v9 + v10) = v12;
      if (!v12)
        return 2229280778;
      ++v8;
      v10 += 32;
    }
    while (v8 < *(unsigned int *)(a1 + 72));
  }
  if (!*(_DWORD *)(a1 + 76))
  {
LABEL_29:
    result = 0;
    *(_DWORD *)(a1 + 36) = a3;
    *(_DWORD *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 32) = a2;
    return result;
  }
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  v15 = 24;
  while (1)
  {
    v16 = *(_QWORD *)(v14 + v15);
    if (v16)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v16);
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + v15) = 0;
    }
    v17 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), (a3 - a2 + 1), 4);
    v14 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v14 + v15) = v17;
    if (!v17)
      return 2229280778;
    ++v13;
    v15 += 32;
    if (v13 >= *(unsigned int *)(a1 + 76))
      goto LABEL_29;
  }
}

uint64_t mfs_Viterbi_DeInit(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = a1[6];
  if (*(_DWORD *)(a1[3] + 2064) == 2)
  {
    if (v2)
    {
      v3 = *((unsigned int *)a1 + 18);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = 24;
        do
        {
          if (*(_QWORD *)(v2 + v5))
          {
            heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(v2 + v5));
            v2 = a1[6];
            *(_QWORD *)(v2 + v5) = 0;
            v3 = *((unsigned int *)a1 + 18);
          }
          ++v4;
          v5 += 32;
        }
        while (v4 < v3);
      }
      heap_Free(*(_QWORD **)(*a1 + 8), v2);
      a1[6] = 0;
      v6 = *((unsigned int *)a1 + 19);
      v7 = a1[7];
      if ((_DWORD)v6)
      {
        v8 = 0;
        v9 = 24;
        do
        {
          if (*(_QWORD *)(v7 + v9))
          {
            heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(v7 + v9));
            v7 = a1[7];
            *(_QWORD *)(v7 + v9) = 0;
            v6 = *((unsigned int *)a1 + 19);
          }
          ++v8;
          v9 += 32;
        }
        while (v8 < v6);
      }
      heap_Free(*(_QWORD **)(*a1 + 8), v7);
      a1[7] = 0;
    }
    *((_DWORD *)a1 + 26) = 0;
    v10 = a1[12];
    if (v10)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v10);
      a1[12] = 0;
    }
    v11 = a1[11];
    if (v11)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v11);
      a1[11] = 0;
    }
    v12 = a1[14];
    if (v12)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v12);
      a1[14] = 0;
    }
    v13 = a1[15];
    if (v13)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v13);
      v14 = a1 + 15;
LABEL_31:
      *v14 = 0;
    }
  }
  else if (v2)
  {
    if (*((_DWORD *)a1 + 18))
    {
      v15 = 0;
      v16 = 24;
      do
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(a1[6] + v16));
        ++v15;
        v16 += 32;
      }
      while (v15 < *((unsigned int *)a1 + 18));
      v2 = a1[6];
    }
    heap_Free(*(_QWORD **)(*a1 + 8), v2);
    a1[6] = 0;
    if (*((_DWORD *)a1 + 19))
    {
      v17 = 0;
      v18 = 24;
      do
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(a1[7] + v18));
        ++v17;
        v18 += 32;
      }
      while (v17 < *((unsigned int *)a1 + 19));
    }
    v19 = *(_QWORD **)(*a1 + 8);
    v20 = a1[7];
    v14 = a1 + 7;
    heap_Free(v19, v20);
    goto LABEL_31;
  }
  return 0;
}

uint64_t mfs_Viterbi_Decode(uint64_t a1)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  kaldi::nnet1::Component *v13;
  float v14;
  kaldi::nnet1::Component *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  float v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  uint64_t v36;
  float *v37;
  float v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float *v58;
  int v59;
  _QWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  float *v66;
  float v67;
  uint64_t v68;
  int v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;

  v2 = *(float *)(*(_QWORD *)(a1 + 16) + 8172);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 2152);
  v77 = *(_DWORD *)(v3 + 2164);
  v78 = *(_QWORD *)(v3 + 2136);
  v5 = *(_DWORD *)(v3 + 2148);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 2072);
  MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Default Viterbi Decoder Variant 0 has been selected\n");
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 2592);
  if (v8 == 2)
  {
    LODWORD(v11) = *(_DWORD *)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 36);
    v15 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi regular search and emission, from=%d, to=%d\n");
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v15);
    v14 = 0.0;
  }
  else if (v8 == 1)
  {
    LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568) + *(_DWORD *)(v7 + 2596);
    v12 = *(_DWORD *)(a1 + 36);
    v14 = *(float *)(a1 + 84);
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Completing Viterbi decomposition after successful early emission, from=%d, to=%d\n");
  }
  else
  {
    if (v8)
    {
      v20 = 0;
      v22 = 0;
      v17 = 0;
      v14 = 0.0;
      goto LABEL_70;
    }
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Final output state for early emission is %d\n");
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2596);
    if (!v9 || (v10 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568), (v9 + 2 * v10) > *(_DWORD *)(a1 + 36)))
    {
      MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi early emission will not take place - regular emission instead, from=%d, to=%d\n");
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2592) = 2;
      return result;
    }
    LODWORD(v11) = *(_DWORD *)(a1 + 32);
    v12 = v10 + v9;
    v13 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi early emission will go ahead, from=%d, to=%d\n");
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v13);
    v14 = 0.0;
  }
  if (v11 >= v12)
  {
    v20 = 0;
    v22 = 0;
    v17 = 0;
LABEL_70:
    *(_DWORD *)(a1 + 80) = v20;
    *(float *)(a1 + 84) = v14;
    v69 = v17 + v22;
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Pruning: total paths is %d\n");
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Winning Path is %d , with score %f\n");
    if (v69)
      MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Pruning percentage is %.2f\n");
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Number of join costs calculated is %d\n");
    return 0;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1.0 - v2;
  v11 = v11;
  v72 = v12;
  v22 = 0;
  v71 = v4;
  while (1)
  {
    v23 = *(unsigned int *)(a1 + 32);
    v24 = *(_DWORD *)(a1 + 76);
    if (v11 != v23)
    {
      *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
      *(int32x2_t *)(a1 + 64) = vrev64_s32(*(int32x2_t *)(a1 + 64));
      v25 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = v24;
      *(_DWORD *)(a1 + 76) = v25;
      v24 = v25;
    }
    v27 = *(_QWORD *)(a1 + 24);
    v26 = *(_DWORD *)(*(_QWORD *)(v27 + 1952) + 32 * v11 + 16);
    LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(v27 + 2016) + 4 * v11);
    if (v26 < v27)
      LODWORD(v27) = v26;
    *(_DWORD *)(a1 + 68) = v27;
    if (v27 <= v24)
      goto LABEL_23;
    v75 = v17;
    v28 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 56), 32 * v27);
    *(_QWORD *)(a1 + 56) = v28;
    if (!v28)
      return 2229280778;
    v73 = v22;
    v29 = *(unsigned int *)(a1 + 76);
    LODWORD(v27) = *(_DWORD *)(a1 + 68);
    if (v29 < v27)
      break;
LABEL_22:
    *(_DWORD *)(a1 + 76) = v27;
    v23 = *(unsigned int *)(a1 + 32);
    v22 = v73;
    v17 = v75;
LABEL_23:
    if (v11 == v23)
    {
      if ((_DWORD)v27)
      {
        v32 = *(_QWORD *)(a1 + 56);
        v27 = v27;
        v33 = (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1952) + 32 * v11) + 4);
        do
        {
          *(float *)v32 = v21 * *v33;
          **(float **)(v32 + 24) = *(v33 - 1);
          v32 += 32;
          v33 += 2;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      v34 = *(float *)(*(_QWORD *)(a1 + 16) + 8248);
      if (v11 != (_DWORD)v23 + 1 && v34 <= 4.0)
      {
        v36 = *(unsigned int *)(a1 + 64);
        if ((_DWORD)v36)
        {
          v37 = *(float **)(a1 + 48);
          v38 = v14 + v34;
          do
          {
            if (*v37 <= v38)
            {
              ++v17;
            }
            else
            {
              *v37 = 10000000.0;
              ++v22;
            }
            v37 += 8;
            --v36;
          }
          while (v36);
        }
      }
      v76 = v17;
      if ((_DWORD)v27)
      {
        v39 = *(_DWORD **)(a1 + 56);
        v27 = v27;
        do
        {
          *v39 = 1259902592;
          v39 += 8;
          --v27;
        }
        while (v27);
      }
      ssft_qsort(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), 32, (uint64_t (*)(unint64_t, unint64_t))mfs_Sort_By_PathScore);
      if (*(_DWORD *)(a1 + 68))
      {
        v74 = v22;
        v40 = 0;
        v14 = 10000000.0;
        do
        {
          v41 = *(_QWORD *)(a1 + 24);
          v42 = *(float *)(*(_QWORD *)(a1 + 16) + 8172);
          v43 = *(_QWORD *)(*(_QWORD *)(v41 + 1952) + 32 * v11) + 8 * v40;
          v44 = *(float *)(v43 + 4);
          v45 = *(_QWORD *)(v41 + 2032);
          v46 = *(_DWORD *)v43;
          v47 = *(_DWORD *)(v41 + 2060);
          v48 = (_QWORD *)(v45 + 8 * (v47 & v46));
          do
          {
            v49 = (_DWORD *)*v48;
            v50 = (_DWORD *)*v48;
            v51 = *v50;
            v48 = v50 + 4;
          }
          while (v51 != v46);
          v52 = *(unsigned int *)(a1 + 64);
          v53 = *(_QWORD *)(a1 + 48);
          if ((int)v52 >= 1)
          {
            v54 = 0;
            v55 = (float)(1.0 - v42) * v44;
            do
            {
              v56 = *(float *)(v53 + 32 * v54);
              if (v56 != 10000000.0)
              {
                v57 = v55 + v56;
                v58 = (float *)(*(_QWORD *)(a1 + 56) + 32 * v40);
                if ((float)(v55 + v56) > *v58)
                  break;
                v59 = *(_DWORD *)(*(_QWORD *)(v53 + 32 * v54 + 24) + 4 * (v11 + ~*(_DWORD *)(a1 + 32)));
                if (v46 - v59 != 1)
                {
                  v60 = (_QWORD *)(v45 + 8 * (v59 & v47));
                  do
                  {
                    v61 = (_DWORD *)*v60;
                    v62 = (_DWORD *)*v60;
                    v63 = *v62;
                    v60 = v62 + 4;
                  }
                  while (v63 != v59);
                  v64 = v61[2];
                  if ((v64 & 2) != 0)
                  {
                    v66 = *(float **)(v6 + 8 * v11);
                    v65 = v49[1];
                    v67 = 0.0;
                  }
                  else
                  {
                    v65 = v49[1];
                    v66 = *(float **)(v6 + 8 * v11);
                    v67 = 0.0;
                    if ((v65 & 2) == 0)
                      v67 = v66[2] * *(float *)(v4 + 4 * (((v64 >> 14) & 0x1FF) + ((v65 >> 14) & 0x1FF) * v77));
                  }
                  v57 = v56
                      + (float)(v55
                              + (float)(v42
                                      * (float)((float)(v67 + *v66)
                                              + (float)(v66[1]
                                                      * *(float *)(v78
                                                                 + 4
                                                                 * (((v64 >> 2) & 0xFFF) + ((v65 >> 2) & 0xFFF) * v5))))));
                }
                ++v16;
                if (v57 < *v58)
                {
                  *v58 = v57;
                  v19 = v54;
                  v18 = v46;
                }
              }
              ++v54;
            }
            while (v54 != v52);
          }
          memcpy(*(void **)(*(_QWORD *)(a1 + 56) + 32 * v40 + 24), *(const void **)(v53 + 32 * v19 + 24), 4 * (v11 - *(_DWORD *)(a1 + 32)));
          v68 = *(_QWORD *)(a1 + 56) + 32 * v40;
          *(_DWORD *)(*(_QWORD *)(v68 + 24) + 4 * (v11 - *(_DWORD *)(a1 + 32))) = v18;
          if (*(float *)v68 < v14)
          {
            v20 = v40;
            v14 = *(float *)v68;
          }
          ++v40;
        }
        while (v40 < *(unsigned int *)(a1 + 68));
        v22 = v74;
      }
      else
      {
        v14 = 10000000.0;
      }
      v17 = v76;
    }
    if (++v11 == v72)
      goto LABEL_70;
  }
  v30 = (32 * v29) | 0x18;
  while (1)
  {
    v31 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), *(unsigned int *)(a1 + 40), 4);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + v30) = v31;
    if (!v31)
      return 2229280778;
    ++v29;
    v27 = *(unsigned int *)(a1 + 68);
    v30 += 32;
    if (v29 >= v27)
    {
      v4 = v71;
      goto LABEL_22;
    }
  }
}

uint64_t mfs_Sort_By_PathScore(float *a1, float *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

uint64_t mfs_Viterbi_Decode_MCP_S9_LF0_S8_X2B(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  kaldi::nnet1::Component *v18;
  int v19;
  kaldi::nnet1::Component *v20;
  int IsUpdatable;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  int v41;
  float v42;
  float v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  int v48;
  _DWORD *v49;
  int32x4_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  float v65;
  _DWORD *v66;
  uint64_t v67;
  float v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  float v73;
  float v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  float v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  float v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  float *v112;
  unsigned int *v113;
  unsigned int *v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  unsigned int v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  unsigned int *v160;
  unsigned int *v161;
  float v162;
  float v163;
  int v164;
  BOOL v165;
  unsigned int v166;
  float v167;
  float v168;
  int v169;
  float v170;
  float v171;
  int v172;
  float v173;
  float v174;
  float v175;
  int v176;
  uint64_t v177;
  float *v178;
  float v179;
  uint64_t v180;
  uint64_t v181;
  float *v182;
  uint64_t v183;
  _DWORD *v184;
  unsigned int *v185;
  unsigned int *v186;
  uint64_t v187;
  float v188;
  float v189;
  BOOL v190;
  int v191;
  unsigned int v192;
  float v193;
  float v194;
  float v195;
  float v196;
  BOOL v197;
  unsigned int v198;
  float v199;
  int v200;
  float v201;
  float v202;
  float v203;
  uint64_t v204;
  void **v205;
  float *v206;
  uint64_t v207;
  int v208;
  float *v209;
  float v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  uint64_t v224;
  int v225;
  float v226;
  uint64_t v227;
  _DWORD *v228;
  float *v229;
  float v230;
  float v231;
  int v232;
  uint64_t v233;
  int v234;
  int v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _DWORD v241[3];
  _DWORD v242[3];
  _DWORD v243[3];
  uint64_t v244;

  v244 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(float **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = v3[2097];
  v6 = v3[2043];
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v221 = *(_QWORD *)(v8 + 2136);
  v222 = *(_QWORD *)(v8 + 2152);
  v216 = *(_QWORD *)(v4 + 2072);
  v10 = v3[2096];
  v243[0] = 1065353216;
  *(float *)&v243[1] = v10 + 1.0;
  *(float *)&v243[2] = v10 + 1.0;
  v242[0] = 0;
  *(float *)&v242[1] = v10;
  *(float *)&v242[2] = v10;
  v241[0] = 1065353216;
  *(float *)&v241[1] = v10 + 1.0;
  *(float *)&v241[2] = v10 + 1.0;
  MFS__log_select_Diag(v7, 1, (uint64_t)"S8_X2B Viterbi Decoder Variant 2 has been selected\n");
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 2592);
  v13 = 0.0;
  if (v12 == 2)
  {
    v16 = *(_DWORD *)(a1 + 32);
    v17 = *(_DWORD *)(a1 + 36);
    v20 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi regular search and emission, from=%d, to=%d\n");
    IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v20);
    v11 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v11 + 2612) = IsUpdatable;
  }
  else if (v12 == 1)
  {
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568) + *(_DWORD *)(v11 + 2596);
    v17 = *(_DWORD *)(a1 + 36);
    v13 = *(float *)(a1 + 84);
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Completing Viterbi decomposition after successful early emission, from=%d, to=%d\n");
    v11 = *(_QWORD *)(a1 + 24);
  }
  else if (v12)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Final output state for early emission is %d\n");
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2596);
    if (!v14
      || (v15 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568), (v14 + 2 * v15) > *(_DWORD *)(a1 + 36)))
    {
      MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi early emission will not take place - regular emission instead, from=%d, to=%d\n");
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2592) = 2;
      return 0;
    }
    v16 = *(_DWORD *)(a1 + 32);
    v17 = v15 + v14;
    v18 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi early emission will go ahead, from=%d, to=%d\n");
    v19 = kaldi::nnet1::Component::IsUpdatable(v18);
    v11 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v11 + 2612) = v19;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 12224);
  v23 = *(_QWORD *)(v11 + 1952);
  if (v16 == *(_DWORD *)(a1 + 32))
  {
    v24 = *(_DWORD *)(*(_QWORD *)(v11 + 2016) + 4 * v16);
    if (*(_DWORD *)(v23 + 32 * v16 + 16) >= v24)
      v25 = v24;
    else
      v25 = *(_DWORD *)(v23 + 32 * v16 + 16);
    *(_DWORD *)(a1 + 68) = v25;
    if (v25)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a1 + 56);
      v28 = (float *)(*(_QWORD *)(v23 + 32 * v16) + 4);
      v29 = 32 * v25;
      do
      {
        v30 = v27 + v26;
        *(float *)v30 = (float)(1.0 - v6) * *v28;
        *(_DWORD *)(v30 + 4) = 0;
        *(_DWORD *)(v30 + 8) = 0;
        *(_DWORD *)(v30 + 16) = 0;
        **(float **)(v27 + v26 + 24) = *(v28 - 1);
        v26 += 32;
        v28 += 2;
      }
      while (v29 != v26);
    }
    ++v16;
  }
  if (v16 >= v17)
  {
    v232 = 0;
  }
  else
  {
    v232 = 0;
    v31 = 0;
    v217 = 0;
    v234 = 0;
    v32 = v16;
    v219 = v2 + 8;
    v33 = 0.0;
    v215 = v23;
    do
    {
      v34 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v34 + 8264))
      {
        v33 = 0.0;
        if (v32 % 3 == 1)
        {
          if (mfs_Ling_IsVowel(v34, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v32 / 3))
          {
            v35 = *(unsigned int *)(a1 + 132);
            if (v35 <= 0xC7)
              *(_DWORD *)(a1 + 132) = v35 + 1;
            v33 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * v35 + 2664);
          }
        }
      }
      v226 = v33;
      v36 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v36 + 8268))
      {
        v37 = *(uint64_t **)(a1 + 24);
        if (v32 % 3 == 2
          && (v38 = mfs_Ling_IsSilence(v36, v37[1], v32 / 3),
              v37 = *(uint64_t **)(a1 + 24),
              !v38))
        {
          v39 = *(unsigned int *)(a1 + 128);
          v40 = (char *)v37 + 4 * v39;
          v234 = *((_DWORD *)v40 + 867);
          if (v39 <= 0x18F)
            *(_DWORD *)(a1 + 128) = v39 + 1;
          v217 = *((_DWORD *)v40 + 1268);
        }
        else
        {
          v234 = 0;
          v217 = 0;
        }
      }
      else
      {
        v37 = *(uint64_t **)(a1 + 24);
      }
      v41 = v32;
      v42 = *(float *)(v37[261] + 4 * v32);
      v43 = *(float *)(v37[262] + 4 * v32);
      v44 = *(float **)(v216 + 8 * v32);
      v45 = v42 * *v44;
      v46 = v42 * v44[2];
      v47 = v42 * v44[1];
      MFS__log_select_Diag(*(_QWORD *)a1, 20, (uint64_t)"Join cost %d\n");
      MFS__log_select_Diag(*(_QWORD *)a1, 20, (uint64_t)"Normalized ADJ weight %f\n");
      MFS__log_select_Diag(*(_QWORD *)a1, 20, (uint64_t)"Normalized LF0 weight %f\n");
      MFS__log_select_Diag(*(_QWORD *)a1, 20, (uint64_t)"Normalized MCP weight %f\n");
      v48 = *(_DWORD *)(a1 + 32);
      v49 = *(_DWORD **)(a1 + 48);
      v233 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v233;
      *(_QWORD *)(a1 + 56) = v49;
      v50 = *(int32x4_t *)(a1 + 64);
      *(int32x4_t *)(a1 + 64) = vrev64q_s32(v50);
      v227 = v23 + 32 * v32;
      LODWORD(v51) = *(_DWORD *)(v227 + 16);
      v52 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2016) + 4 * v32);
      if (v51 >= v52)
        v51 = v52;
      else
        v51 = v51;
      *(_DWORD *)(a1 + 68) = v51;
      v218 = v32;
      if (v43 <= 4.0)
      {
        v54 = v32;
        v53 = 0;
        if (v54 != v48 + 1 && v50.i32[1])
        {
          v53 = 0;
          v55 = v50.u32[1];
          v56 = (float *)v233;
          do
          {
            if (*v56 > (float)(v13 + v43))
            {
              *v56 = 10000000.0;
              ++v53;
            }
            v56 += 8;
            --v55;
          }
          while (v55);
        }
      }
      else
      {
        v53 = 0;
      }
      if ((_DWORD)v51)
      {
        v57 = v49;
        do
        {
          *v57 = 1259902592;
          v57 += 8;
          --v51;
        }
        while (v51);
      }
      v228 = v49;
      v224 = (v41 - v48);
      ssft_qsort(v233, v50.u32[1], 32, (uint64_t (*)(unint64_t, unint64_t))mfs_Sort_By_PathScore_faster);
      v58 = (*(_DWORD *)(a1 + 64) - v53);
      *(_DWORD *)(a1 + 64) = v58;
      v33 = v226;
      if ((int)v58 >= 1)
      {
        v59 = 0;
        v60 = (uint64_t *)(v233 + 24);
        do
        {
          v61 = *v60;
          v60 += 4;
          v62 = *(_DWORD *)(v61 + 4 * (v224 - 1));
          v63 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v63 + 4 * v59) = v62;
          *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v59) = *(_DWORD *)(v22 + 12 * v62);
          *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v59) = *(unsigned __int16 *)(v22
                                                                             + 12 * *(unsigned int *)(v63 + 4 * v59)
                                                                             + 4);
          *(_BYTE *)(*(_QWORD *)(a1 + 88) + v59) = *(_BYTE *)(v22 + 12 * *(unsigned int *)(v63 + 4 * v59) + 10);
          ++v59;
        }
        while (v58 != v59);
      }
      if (*(_DWORD *)(a1 + 68))
      {
        v64 = 0;
        v223 = 1.0 - v42;
        v65 = (float)v234;
        v220 = v233 + 64;
        v13 = 10000000.0;
        v66 = v228;
        do
        {
          v231 = v13;
          if (v33 == 0.0 && (v67 = *(_QWORD *)(a1 + 16), !*(_DWORD *)(v67 + 8268)))
          {
            v69 = 0;
            v68 = 0.0;
          }
          else
          {
            v235 = 0;
            v239 = 0u;
            v240 = 0u;
            v237 = 0u;
            v238 = 0u;
            v236 = 0u;
            mfs_ParamMap_GetAcousticVector(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), *(unsigned int *)(*(_QWORD *)v227 + 8 * v64), (uint64_t)&v236, &v235);
            if (v33 == 0.0)
            {
              v68 = 0.0;
            }
            else if (*(float *)v237 >= 0.0)
            {
              v68 = *(float *)v237;
            }
            else
            {
              v68 = 0.0;
            }
            v66 = v228;
            v67 = *(_QWORD *)(a1 + 16);
            if (*(_DWORD *)(v67 + 8268))
              v69 = v235;
            else
              v69 = 0;
          }
          v70 = *(_QWORD *)(a1 + 112);
          v71 = *(_QWORD *)(a1 + 120);
          v72 = (float *)(*(_QWORD *)v227 + 8 * v64);
          v73 = v72[1];
          v74 = *v72;
          v75 = *(_DWORD *)(a1 + 64);
          v76 = *(unsigned __int8 *)(v22 + 12 * *(unsigned int *)v72 + 10);
          if (v76 <= 2)
          {
            v77 = v76;
            do
            {
              *(float *)&v241[v77] = (float)(v5 * *(float *)&v242[v77]) + (float)(v45 * *(float *)&v243[v77]);
              ++v77;
            }
            while (v77 != 3);
          }
          v78 = v223 * v73;
          v79 = LODWORD(v74) - 1;
          v80 = v75;
          v81 = &v241[v76];
          v82 = v22 + 12 * LODWORD(v74);
          v83 = v221 + ((unint64_t)*(unsigned __int16 *)(v82 + 8) << 11);
          v84 = v222 + ((unint64_t)*(unsigned __int16 *)(v82 + 6) << 10);
          v85 = *(float *)&v66[8 * v64] - v78;
          v225 = v69;
          v229 = (float *)&v66[8 * v64];
          v230 = v74;
          if (v234)
          {
            v86 = *(_QWORD *)(a1 + 88);
            v87 = v75 & 3;
            if ((v75 & 3) != 0)
            {
              v88 = 0;
              v89 = (float *)(v233 + 16);
              v90 = (float)v217;
              while (1)
              {
                v91 = *(v89 - 4);
                if (v91 > v85)
                  break;
                v92 = (float)(*(float *)&v81[*(unsigned __int8 *)(v86 + v88)]
                            + (float)(v46 * *(float *)(v84 + 4 * *(unsigned int *)(v70 + 4 * v88))))
                    + (float)(v47 * *(float *)(v83 + 4 * *(unsigned int *)(v71 + 4 * v88)));
                if (v79 == *(_DWORD *)(v2 + 4 * v88))
                  v92 = 0.0;
                v93 = v91 + v92;
                v94 = v69 - v234 + *(_DWORD *)v89;
                if (v94 < 0)
                  v94 = -v94;
                if ((float)(*(float *)(v67 + 8308) * (float)v217) <= (float)v94)
                  v93 = v93 + (float)((float)(*(float *)(v67 + 8312) * (float)v94) / v65);
                if (v93 < v85)
                {
                  v85 = v93;
                  v31 = v88;
                }
                ++v88;
                v89 += 8;
                if (v87 == v88)
                {
                  v70 += 4 * (v87 - 1) + 4;
                  v71 += 4 * (v87 - 1) + 4;
                  goto LABEL_194;
                }
              }
            }
            else
            {
              v90 = (float)v217;
LABEL_194:
              if (v75 >= 4)
              {
                v153 = 0;
                v154 = v69 - v234;
                v155 = v87;
                v156 = *(float *)(v67 + 8308) * v90;
                v157 = v220 + 32 * v87;
                v158 = v86 + v87 + 1;
                v159 = (_DWORD *)(v219 + 4 * v87);
                do
                {
                  v160 = (unsigned int *)(v71 + 4 * v153);
                  v161 = (unsigned int *)(v70 + 4 * v153);
                  v162 = (float)(*(float *)&v81[*(unsigned __int8 *)(v158 + v153 - 1)]
                               + (float)(v46 * *(float *)(v84 + 4 * *v161)))
                       + (float)(v47 * *(float *)(v83 + 4 * *v160));
                  if (v79 == *(v159 - 2))
                    v162 = 0.0;
                  v163 = *(float *)(v157 - 64) + v162;
                  v164 = v154 + *(_DWORD *)(v157 - 48);
                  if (v164 < 0)
                    v164 = -v164;
                  if (v156 <= (float)v164)
                    v163 = v163 + (float)((float)(*(float *)(v67 + 8312) * (float)v164) / v65);
                  v165 = v163 < v85;
                  if (v163 < v85)
                    v85 = v163;
                  v166 = v155 + v153;
                  if (!v165)
                    v166 = v31;
                  v167 = (float)(*(float *)&v81[*(unsigned __int8 *)(v158 + v153)]
                               + (float)(v46 * *(float *)(v84 + 4 * v161[1])))
                       + (float)(v47 * *(float *)(v83 + 4 * v160[1]));
                  if (v79 == *(v159 - 1))
                    v167 = 0.0;
                  v168 = *(float *)(v157 - 32) + v167;
                  v169 = v154 + *(_DWORD *)(v157 - 16);
                  if (v169 < 0)
                    v169 = -v169;
                  if (v156 <= (float)v169)
                    v168 = v168 + (float)((float)(*(float *)(v67 + 8312) * (float)v169) / v65);
                  if (v168 < v85)
                  {
                    v85 = v168;
                    v166 = v155 + v153 + 1;
                  }
                  v170 = (float)(*(float *)&v81[*(unsigned __int8 *)(v158 + v153 + 1)]
                               + (float)(v46 * *(float *)(v84 + 4 * v161[2])))
                       + (float)(v47 * *(float *)(v83 + 4 * v160[2]));
                  if (v79 == *v159)
                    v170 = 0.0;
                  v171 = *(float *)v157 + v170;
                  v172 = v154 + *(_DWORD *)(v157 + 16);
                  if (v172 < 0)
                    v172 = -v172;
                  if (v156 <= (float)v172)
                    v171 = v171 + (float)((float)(*(float *)(v67 + 8312) * (float)v172) / v65);
                  if (v171 >= v85)
                  {
                    v31 = v166;
                  }
                  else
                  {
                    v85 = v171;
                    v31 = v155 + v153 + 2;
                  }
                  v173 = *(float *)(v157 + 32);
                  if (v173 > v85)
                    break;
                  v174 = (float)(*(float *)&v81[*(unsigned __int8 *)(v158 + v153 + 2)]
                               + (float)(v46 * *(float *)(v84 + 4 * v161[3])))
                       + (float)(v47 * *(float *)(v83 + 4 * v160[3]));
                  if (v79 == v159[1])
                    v174 = 0.0;
                  v175 = v173 + v174;
                  v176 = v154 + *(_DWORD *)(v157 + 48);
                  if (v176 < 0)
                    v176 = -v176;
                  if (v156 <= (float)v176)
                    v175 = v175 + (float)((float)(*(float *)(v67 + 8312) * (float)v176) / v65);
                  if (v175 < v85)
                  {
                    v85 = v175;
                    v31 = v155 + v153 + 3;
                  }
                  v153 += 4;
                  v157 += 128;
                  v159 += 4;
                }
                while (v155 + v153 < v80);
              }
            }
          }
          else
          {
            v95 = v75 & 3;
            v96 = *(_QWORD *)(a1 + 88);
            if (v68 == 0.0)
            {
              if ((v75 & 3) != 0)
              {
                v177 = 0;
                v178 = (float *)v233;
                while (*v178 <= v85)
                {
                  v179 = (float)(*(float *)&v81[*(unsigned __int8 *)(v96 + v177)]
                               + (float)(v46 * *(float *)(v84 + 4 * *(unsigned int *)(v70 + 4 * v177))))
                       + (float)(v47 * *(float *)(v83 + 4 * *(unsigned int *)(v71 + 4 * v177)));
                  if (v79 == *(_DWORD *)(v2 + 4 * v177))
                    v179 = 0.0;
                  if ((float)(*v178 + v179) < v85)
                  {
                    v85 = *v178 + v179;
                    v31 = v177;
                  }
                  ++v177;
                  v178 += 8;
                  if ((v75 & 3) == v177)
                  {
                    v70 += 4 * (v95 - 1) + 4;
                    v71 += 4 * (v95 - 1) + 4;
                    goto LABEL_244;
                  }
                }
              }
              else
              {
LABEL_244:
                if (v75 >= 4)
                {
                  v180 = 0;
                  v181 = v75 & 3;
                  v182 = (float *)(v220 + 32 * v95);
                  v183 = v96 + v95 + 1;
                  v184 = (_DWORD *)(v219 + 4 * v95);
                  do
                  {
                    v185 = (unsigned int *)(v71 + 4 * v180);
                    v186 = (unsigned int *)(v70 + 4 * v180);
                    v187 = v183 + v180;
                    v188 = (float)(*(float *)&v81[*(unsigned __int8 *)(v183 + v180 - 1)]
                                 + (float)(v46 * *(float *)(v84 + 4 * *v186)))
                         + (float)(v47 * *(float *)(v83 + 4 * *v185));
                    if (v79 == *(v184 - 2))
                      v188 = 0.0;
                    v189 = *(v182 - 16) + v188;
                    v190 = v189 < v85;
                    if (v189 < v85)
                      v85 = v189;
                    v191 = v181 + v180;
                    if (v190)
                      v192 = v181 + v180;
                    else
                      v192 = v31;
                    v193 = (float)(*(float *)&v81[*(unsigned __int8 *)(v183 + v180)]
                                 + (float)(v46 * *(float *)(v84 + 4 * v186[1])))
                         + (float)(v47 * *(float *)(v83 + 4 * v185[1]));
                    if (v79 == *(v184 - 1))
                      v193 = 0.0;
                    v194 = *(v182 - 8) + v193;
                    if (v194 < v85)
                    {
                      v85 = v194;
                      v192 = v191 + 1;
                    }
                    v195 = (float)(*(float *)&v81[*(unsigned __int8 *)(v187 + 1)]
                                 + (float)(v46 * *(float *)(v84 + 4 * v186[2])))
                         + (float)(v47 * *(float *)(v83 + 4 * v185[2]));
                    if (v79 == *v184)
                      v195 = 0.0;
                    v196 = *v182 + v195;
                    v197 = v196 < v85;
                    if (v196 < v85)
                      v85 = v196;
                    v198 = v191 + 2;
                    if (v197)
                      v31 = v198;
                    else
                      v31 = v192;
                    v199 = v182[8];
                    if (v199 > v85)
                      break;
                    v200 = v184[1];
                    v184 += 4;
                    v201 = (float)(*(float *)&v81[*(unsigned __int8 *)(v187 + 2)]
                                 + (float)(v46 * *(float *)(v84 + 4 * v186[3])))
                         + (float)(v47 * *(float *)(v83 + 4 * v185[3]));
                    if (v79 == v200)
                      v201 = 0.0;
                    v202 = v199 + v201;
                    if (v202 < v85)
                    {
                      v85 = v202;
                      v31 = v181 + v180 + 3;
                    }
                    v180 += 4;
                    v182 += 32;
                  }
                  while (v181 + v180 < v80);
                }
              }
            }
            else if ((v75 & 3) != 0)
            {
              v97 = 0;
              v98 = (float *)(v233 + 8);
              while (1)
              {
                v99 = *(v98 - 2);
                if (v99 > v85)
                  break;
                v100 = (float)(*(float *)&v81[*(unsigned __int8 *)(v96 + v97)]
                             + (float)(v46 * *(float *)(v84 + 4 * *(unsigned int *)(v70 + 4 * v97))))
                     + (float)(v47 * *(float *)(v83 + 4 * *(unsigned int *)(v71 + 4 * v97)));
                if (v79 == *(_DWORD *)(v2 + 4 * v97))
                  v100 = 0.0;
                v101 = v99 + v100;
                if (*v98 != 0.0)
                {
                  v102 = *v98 - v68;
                  v103 = -v102;
                  if (v102 >= 0.0)
                    v103 = *v98 - v68;
                  v104 = v102 - (float)(*(v98 - 1) - v33);
                  if (v104 < 0.0)
                    v104 = -v104;
                  v105 = v98[1];
                  v106 = v105 - v68;
                  if ((float)(v105 - v68) < 0.0)
                    v106 = -(float)(v105 - v68);
                  if (v105 == 0.0)
                    v107 = 0.0;
                  else
                    v107 = v106;
                  if (v103 > *(float *)(v67 + 8284))
                    v101 = v101 + (float)(*(float *)(v67 + 8288) * v103);
                  if (v107 > *(float *)(v67 + 8292))
                    v101 = v101 + (float)(*(float *)(v67 + 8296) * v107);
                  if (v104 > *(float *)(v67 + 8300))
                    v101 = v101 + (float)(*(float *)(v67 + 8304) * v104);
                }
                if (v101 < v85)
                {
                  v85 = v101;
                  v31 = v97;
                }
                ++v97;
                v98 += 8;
                if (v95 == v97)
                {
                  v70 += 4 * (v95 - 1) + 4;
                  v71 += 4 * (v95 - 1) + 4;
                  goto LABEL_106;
                }
              }
            }
            else
            {
LABEL_106:
              if (v75 >= 4)
              {
                v108 = 0;
                v109 = v95;
                v110 = v96 + v95 + 1;
                v111 = (_DWORD *)(v219 + 4 * v95);
                v112 = (float *)(v220 + 32 * v109);
                do
                {
                  v113 = (unsigned int *)(v71 + 4 * v108);
                  v114 = (unsigned int *)(v70 + 4 * v108);
                  v115 = (float)(*(float *)&v81[*(unsigned __int8 *)(v110 + v108 - 1)]
                               + (float)(v46 * *(float *)(v84 + 4 * *v114)))
                       + (float)(v47 * *(float *)(v83 + 4 * *v113));
                  if (v79 == *(v111 - 2))
                    v115 = 0.0;
                  v116 = *(v112 - 16) + v115;
                  v117 = *(v112 - 14);
                  if (v117 != 0.0)
                  {
                    v118 = v117 - v68;
                    v119 = -v118;
                    if (v118 >= 0.0)
                      v119 = v118;
                    v120 = v118 - (float)(*(v112 - 15) - v33);
                    if (v120 < 0.0)
                      v120 = -v120;
                    v121 = *(v112 - 13);
                    v122 = v121 - v68;
                    if ((float)(v121 - v68) < 0.0)
                      v122 = -(float)(v121 - v68);
                    if (v121 == 0.0)
                      v123 = 0.0;
                    else
                      v123 = v122;
                    if (v119 > *(float *)(v67 + 8284))
                      v116 = v116 + (float)(*(float *)(v67 + 8288) * v119);
                    if (v123 > *(float *)(v67 + 8292))
                      v116 = v116 + (float)(*(float *)(v67 + 8296) * v123);
                    if (v120 > *(float *)(v67 + 8300))
                      v116 = v116 + (float)(*(float *)(v67 + 8304) * v120);
                  }
                  v124 = v109 + v108;
                  if (v116 < v85)
                    v85 = v116;
                  else
                    v124 = v31;
                  v125 = (float)(*(float *)&v81[*(unsigned __int8 *)(v110 + v108)]
                               + (float)(v46 * *(float *)(v84 + 4 * v114[1])))
                       + (float)(v47 * *(float *)(v83 + 4 * v113[1]));
                  if (v79 == *(v111 - 1))
                    v125 = 0.0;
                  v126 = *(v112 - 8) + v125;
                  v127 = *(v112 - 6);
                  if (v127 != 0.0)
                  {
                    v128 = v127 - v68;
                    v129 = -v128;
                    if (v128 >= 0.0)
                      v129 = v128;
                    v130 = v128 - (float)(*(v112 - 7) - v33);
                    if (v130 < 0.0)
                      v130 = -v130;
                    v131 = *(v112 - 5);
                    v132 = v131 - v68;
                    if ((float)(v131 - v68) < 0.0)
                      v132 = -(float)(v131 - v68);
                    if (v131 == 0.0)
                      v133 = 0.0;
                    else
                      v133 = v132;
                    if (v129 > *(float *)(v67 + 8284))
                      v126 = v126 + (float)(*(float *)(v67 + 8288) * v129);
                    if (v133 > *(float *)(v67 + 8292))
                      v126 = v126 + (float)(*(float *)(v67 + 8296) * v133);
                    if (v130 > *(float *)(v67 + 8300))
                      v126 = v126 + (float)(*(float *)(v67 + 8304) * v130);
                  }
                  if (v126 < v85)
                  {
                    v85 = v126;
                    v124 = v109 + v108 + 1;
                  }
                  v134 = (float)(*(float *)&v81[*(unsigned __int8 *)(v110 + v108 + 1)]
                               + (float)(v46 * *(float *)(v84 + 4 * v114[2])))
                       + (float)(v47 * *(float *)(v83 + 4 * v113[2]));
                  if (v79 == *v111)
                    v134 = 0.0;
                  v135 = *v112 + v134;
                  v136 = v112[2];
                  if (v136 != 0.0)
                  {
                    v137 = v136 - v68;
                    v138 = -v137;
                    if (v137 >= 0.0)
                      v138 = v137;
                    v139 = v137 - (float)(v112[1] - v33);
                    if (v139 < 0.0)
                      v139 = -v139;
                    v140 = v112[3];
                    v141 = v140 - v68;
                    if ((float)(v140 - v68) < 0.0)
                      v141 = -(float)(v140 - v68);
                    if (v140 == 0.0)
                      v142 = 0.0;
                    else
                      v142 = v141;
                    if (v138 > *(float *)(v67 + 8284))
                      v135 = v135 + (float)(*(float *)(v67 + 8288) * v138);
                    if (v142 > *(float *)(v67 + 8292))
                      v135 = v135 + (float)(*(float *)(v67 + 8296) * v142);
                    if (v139 > *(float *)(v67 + 8300))
                      v135 = v135 + (float)(*(float *)(v67 + 8304) * v139);
                  }
                  if (v135 >= v85)
                  {
                    v31 = v124;
                  }
                  else
                  {
                    v85 = v135;
                    v31 = v109 + v108 + 2;
                  }
                  v143 = v112[8];
                  if (v143 > v85)
                    break;
                  v144 = (float)(*(float *)&v81[*(unsigned __int8 *)(v110 + v108 + 2)]
                               + (float)(v46 * *(float *)(v84 + 4 * v114[3])))
                       + (float)(v47 * *(float *)(v83 + 4 * v113[3]));
                  if (v79 == v111[1])
                    v144 = 0.0;
                  v145 = v143 + v144;
                  v146 = v112[10];
                  if (v146 != 0.0)
                  {
                    v147 = v146 - v68;
                    v148 = -v147;
                    if (v147 >= 0.0)
                      v148 = v147;
                    v149 = v147 - (float)(v112[9] - v33);
                    if (v149 < 0.0)
                      v149 = -v149;
                    v150 = v112[11];
                    v151 = v150 - v68;
                    if ((float)(v150 - v68) < 0.0)
                      v151 = -(float)(v150 - v68);
                    if (v150 == 0.0)
                      v152 = 0.0;
                    else
                      v152 = v151;
                    if (v148 > *(float *)(v67 + 8284))
                      v145 = v145 + (float)(*(float *)(v67 + 8288) * v148);
                    if (v152 > *(float *)(v67 + 8292))
                      v145 = v145 + (float)(*(float *)(v67 + 8296) * v152);
                    if (v149 > *(float *)(v67 + 8300))
                      v145 = v145 + (float)(*(float *)(v67 + 8304) * v149);
                  }
                  if (v145 < v85)
                  {
                    v85 = v145;
                    v31 = v109 + v108 + 3;
                  }
                  v108 += 4;
                  v111 += 4;
                  v112 += 32;
                }
                while (v109 + v108 < v80);
              }
            }
          }
          v203 = v78 + v85;
          v204 = v22;
          v205 = (void **)&v66[8 * v64];
          memcpy(v205[3], *(const void **)(v233 + 32 * v31 + 24), 4 * v224);
          v66 = v228;
          *v229 = v203;
          v206 = (float *)v205[3];
          v22 = v204;
          v206[v224] = v230;
          v207 = *(_QWORD *)(a1 + 16);
          if (*(_DWORD *)(v207 + 8264))
          {
            if (v68 == 0.0)
            {
              v211 = v233 + 32 * v31;
              *(_QWORD *)&v228[8 * v64 + 2] = *(_QWORD *)(v211 + 8);
              v210 = *(float *)(v211 + 4);
            }
            else
            {
              v208 = *(_DWORD *)(v233 + 32 * v31 + 8);
              v209 = (float *)&v228[8 * v64];
              v209[2] = v68;
              *((_DWORD *)v209 + 3) = v208;
              v210 = v226;
            }
            *(float *)&v228[8 * v64 + 1] = v210;
          }
          v13 = v231;
          if (*(_DWORD *)(v207 + 8268))
          {
            if (v234)
              v212 = 0;
            else
              v212 = *(_DWORD *)(v233 + 32 * v31 + 16) + v225;
            v228[8 * v64 + 4] = v212;
          }
          if (v203 < v231)
            v13 = v203;
          v213 = v232;
          if (v203 < v231)
            v213 = v64;
          v232 = v213;
          ++v64;
          v33 = v226;
        }
        while (v64 < *(unsigned int *)(a1 + 68));
      }
      else
      {
        v13 = 10000000.0;
      }
      v32 = v218 + 1;
      v23 = v215;
    }
    while (v218 + 1 != v17);
  }
  *(_DWORD *)(a1 + 80) = v232;
  *(float *)(a1 + 84) = v13;
  return 0;
}

uint64_t mfs_Sort_By_PathScore_faster(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

uint64_t mfs_Viterbi_Decode_MCP_S9_LF0_S8(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  kaldi::nnet1::Component *v13;
  float v14;
  kaldi::nnet1::Component *v15;
  unsigned int v16;
  int v17;
  float v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  float *v36;
  float v37;
  uint64_t v38;
  int v39;
  float v40;
  float *v41;
  _DWORD *v42;
  int v43;
  int v44;
  unint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t result;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t __n;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  _BYTE *v84;
  _QWORD *v85;
  _QWORD v86[3];

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(float *)(*(_QWORD *)(a1 + 16) + 8172);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v75 = *(_QWORD *)(v5 + 2136);
  v76 = *(_QWORD *)(v5 + 2152);
  v73 = *(_QWORD *)(v2 + 2072);
  v86[0] = 0;
  v86[1] = 0;
  v85 = v86;
  MFS__log_select_Diag(v4, 1, (uint64_t)"S8 Viterbi Decoder Variant 1 has been selected\n");
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 2592);
  if (v8 == 2)
  {
    v11 = *(_DWORD *)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 36);
    v15 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi regular search and emission, from=%d, to=%d\n");
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v15);
    v14 = 0.0;
  }
  else if (v8 == 1)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568) + *(_DWORD *)(v7 + 2596);
    v12 = *(_DWORD *)(a1 + 36);
    v14 = *(float *)(a1 + 84);
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Completing Viterbi decomposition after successful early emission, from=%d, to=%d\n");
  }
  else
  {
    if (v8)
    {
      v17 = 0;
      v14 = 0.0;
      goto LABEL_63;
    }
    MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Final output state for early emission is %d\n");
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2596);
    if (!v9 || (v10 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568), (v9 + 2 * v10) > *(_DWORD *)(a1 + 36)))
    {
      MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi early emission will not take place - regular emission instead, from=%d, to=%d\n");
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2592) = 2;
      return result;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v10 + v9;
    v13 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"Viterbi early emission will go ahead, from=%d, to=%d\n");
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v13);
    v14 = 0.0;
  }
  if (v11 >= v12)
  {
    v17 = 0;
LABEL_63:
    result = 0;
    *(_DWORD *)(a1 + 80) = v17;
    *(float *)(a1 + 84) = v14;
    return result;
  }
  v16 = 0;
  v17 = 0;
  v71 = v3;
  v18 = 1.0 - v3;
  v19 = v11;
  v72 = v12;
  while (1)
  {
    v20 = *(float **)(v73 + 8 * v19);
    v22 = v20[1];
    v21 = v20[2];
    v23 = *v20;
    v24 = *(unsigned int *)(a1 + 32);
    v25 = *(_DWORD *)(a1 + 76);
    if (v19 != v24)
    {
      *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
      *(int32x2_t *)(a1 + 64) = vrev64_s32(*(int32x2_t *)(a1 + 64));
      v26 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = v25;
      *(_DWORD *)(a1 + 76) = v26;
      v25 = v26;
    }
    v28 = *(_QWORD *)(a1 + 24);
    v27 = *(_DWORD *)(*(_QWORD *)(v28 + 1952) + 32 * v19 + 16);
    LODWORD(v28) = *(_DWORD *)(*(_QWORD *)(v28 + 2016) + 4 * v19);
    if (v27 < v28)
      LODWORD(v28) = v27;
    *(_DWORD *)(a1 + 68) = v28;
    if (v28 > v25)
      break;
    v33 = v24;
    v34 = v24;
LABEL_23:
    v80 = 32 * v19;
    v74 = v19;
    if (v19 != v33)
    {
      v37 = *(float *)(*(_QWORD *)(a1 + 16) + 8248);
      if (v37 > 4.0 || v19 == v34 + 1 || (v38 = *(unsigned int *)(a1 + 64), !(_DWORD)v38))
      {
        v39 = 0;
        if (!(_DWORD)v28)
          goto LABEL_40;
      }
      else
      {
        v39 = 0;
        v40 = v14 + v37;
        v41 = *(float **)(a1 + 48);
        do
        {
          if (*v41 > v40)
          {
            *v41 = 10000000.0;
            ++v39;
          }
          v41 += 8;
          --v38;
        }
        while (v38);
        if (!(_DWORD)v28)
          goto LABEL_40;
      }
      v42 = *(_DWORD **)(a1 + 56);
      v28 = v28;
      do
      {
        *v42 = 1259902592;
        v42 += 8;
        --v28;
      }
      while (v28);
LABEL_40:
      ssft_qsort(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), 32, (uint64_t (*)(unint64_t, unint64_t))mfs_Sort_By_PathScore);
      v43 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 64) -= v39;
      if (v43)
      {
        v44 = v19;
        v45 = 0;
        v14 = 10000000.0;
        v77 = v71 * v21;
        v46 = v71 * v22;
        v47 = v71 * v23;
        v48 = (v44 - v24);
        v49 = (v48 - 1);
        v79 = v48;
        __n = 4 * v48;
        do
        {
          v50 = (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1952) + v80) + 8 * v45);
          v51 = v50[1];
          v52 = *(unsigned int *)v50;
          mfs_getUnitDataFromMfsData(*(unsigned __int8 **)(a1 + 8), *(_DWORD *)v50, (uint64_t *)&v85);
          v53 = *(_QWORD *)(a1 + 56);
          v54 = *(float *)(v53 + 32 * v45);
          v55 = *(_DWORD *)(a1 + 64);
          if (v55 >= 1)
          {
            v82 = v17;
            v56 = 0;
            v57 = 0;
            v58 = v18;
            v59 = v18 * v51;
            v60 = v52 - 1;
            v61 = (char *)&unk_1DECECCD0 + 4 * *((unsigned __int8 *)v85 + 15);
            v81 = v52;
            v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2048) + 8 * v52);
            v63 = v75 + ((unint64_t)*(unsigned __int16 *)(v62 + 4) << 11);
            v83 = v76 + ((unint64_t)*(unsigned __int8 *)(v62 + 2) << 10);
            v84 = (_BYTE *)v62;
            do
            {
              v64 = *(_QWORD *)(a1 + 48);
              v65 = v59 + *(float *)(v64 + v56);
              if (v65 > v54)
                break;
              v66 = *(unsigned int *)(*(_QWORD *)(v64 + v56 + 24) + 4 * v49);
              if (v60 != (_DWORD)v66)
              {
                v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2048) + 8 * v66);
                v68 = 0.0;
                if (!*(_BYTE *)(v67 + 1) && !*v84)
                  v68 = v77 * *(float *)(v83 + 4 * *(unsigned __int8 *)(v67 + 3));
                mfs_getUnitDataFromMfsData(*(unsigned __int8 **)(a1 + 8), v66, (uint64_t *)&v85);
                v65 = v65
                    + (float)((float)(v68 + (float)(v47 * *(float *)&v61[4 * *((unsigned __int8 *)v85 + 15)]))
                            + (float)(v46 * *(float *)(v63 + 4 * *(unsigned __int16 *)(v67 + 6))));
                v55 = *(_DWORD *)(a1 + 64);
              }
              if (v65 < v54)
              {
                v16 = v57;
                v54 = v65;
              }
              ++v57;
              v56 += 32;
            }
            while (v57 < v55);
            v53 = *(_QWORD *)(a1 + 56);
            v17 = v82;
            v18 = v58;
            LODWORD(v52) = v81;
          }
          memcpy(*(void **)(v53 + 32 * v45 + 24), *(const void **)(*(_QWORD *)(a1 + 48) + 32 * v16 + 24), __n);
          v69 = *(_QWORD *)(a1 + 56) + 32 * v45;
          *(float *)v69 = v54;
          *(_DWORD *)(*(_QWORD *)(v69 + 24) + 4 * v79) = v52;
          if (v54 < v14)
          {
            v17 = v45;
            v14 = v54;
          }
          ++v45;
        }
        while (v45 < *(unsigned int *)(a1 + 68));
      }
      else
      {
        v14 = 10000000.0;
      }
      goto LABEL_59;
    }
    if ((_DWORD)v28)
    {
      v35 = *(_QWORD *)(a1 + 56);
      v28 = v28;
      v36 = (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1952) + 32 * v19) + 4);
      do
      {
        *(float *)v35 = v18 * *v36;
        **(float **)(v35 + 24) = *(v36 - 1);
        v35 += 32;
        v36 += 2;
        --v28;
      }
      while (v28);
    }
LABEL_59:
    v19 = v74 + 1;
    if (v74 + 1 == v72)
      goto LABEL_63;
  }
  v29 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 56), 32 * v28);
  *(_QWORD *)(a1 + 56) = v29;
  if (!v29)
    return 2229280778;
  v30 = *(unsigned int *)(a1 + 76);
  LODWORD(v28) = *(_DWORD *)(a1 + 68);
  if (v30 >= v28)
  {
LABEL_21:
    *(_DWORD *)(a1 + 76) = v28;
    v33 = *(unsigned int *)(a1 + 32);
    v34 = *(_DWORD *)(a1 + 32);
    goto LABEL_23;
  }
  v31 = (32 * v30) | 0x18;
  while (1)
  {
    v32 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), *(unsigned int *)(a1 + 40), 4);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + v31) = v32;
    if (!v32)
      return 2229280778;
    ++v30;
    v28 = *(unsigned int *)(a1 + 68);
    v31 += 32;
    if (v30 >= v28)
      goto LABEL_21;
  }
}

uint64_t mfs_Viterbi_ResultScore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v3 + 2592))
    v4 = *(_DWORD *)(a1 + 36);
  else
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8568) + *(_DWORD *)(v3 + 2596);
  v5 = *(unsigned int *)(a1 + 32);
  if (v5 < v4)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a3 + 8);
    do
    {
      *(_DWORD *)(v7 + 4 * v5) = *(_DWORD *)(*(_QWORD *)(v6 + 32 * *(unsigned int *)(a1 + 80) + 24)
                                           + 4 * (v5 - *(_DWORD *)(a1 + 32)));
      *(_DWORD *)(v8 + 4 * v5++) = 0;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t mfs_Ling_LogPhonCtxt(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  int v14;

  result = BET3FLT__log_select_GetLogLevel(*(_QWORD *)(a1 + 32));
  if (result >= 3)
  {
    v9 = *(_QWORD *)(a3 + 32);
    if (a4 >= 1)
    {
      for (i = 0; i != 256; ++i)
      {
        if (*(unsigned __int8 *)(a2 + 7356 + i) == *(unsigned __int8 *)(v9 + (a4 - 1)))
          break;
      }
    }
    for (j = 0; j != 256; ++j)
    {
      if (*(unsigned __int8 *)(a2 + 7356 + j) == *(unsigned __int8 *)(v9 + a4))
        break;
    }
    v12 = a4 + 1;
    if ((int)v12 < *(__int16 *)(a3 + 10))
    {
      v13 = 0;
      v14 = *(unsigned __int8 *)(v9 + v12);
      do
      {
        if (*(unsigned __int8 *)(a2 + 7356 + v13) == v14)
          break;
        ++v13;
      }
      while (v13 != 256);
    }
    return MFS__log_select_Diag(a1, 3, (uint64_t)"[%c-%c+%c]");
  }
  return result;
}

uint64_t mfs_Ling_HmmPhonemeToLhTts(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 0;
  while (*(unsigned __int8 *)(a1 + 7356 + v2) != a2)
  {
    if (++v2 == 256)
    {
      LOBYTE(v2) = 0;
      return v2;
    }
  }
  return v2;
}

uint64_t mfs_Ling_CenterPhoneme(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + a2);
}

uint64_t mfs_Ling_SylPos(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + a2);
}

uint64_t mfs_Ling_WrdPosShpInPhrs(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 1496);
  if (v2)
    return *(unsigned __int8 *)(v2 + a2);
  else
    return 6;
}

BOOL mfs_Ling_IsSyllableBegin(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 112) + a2) != 0;
}

BOOL mfs_Ling_IsWordBegin(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 112) + a2) > 1u;
}

const char *mfs_Ling_IsVowel(uint64_t a1, uint64_t a2, int a3)
{
  const char *result;

  result = *(const char **)(*(_QWORD *)(a1 + 7616) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + a3));
  if (result)
    return (const char *)(strcmp(result, "VV") == 0);
  return result;
}

const char *mfs_Ling_IsSilence(uint64_t a1, uint64_t a2, int a3)
{
  const char *result;

  result = *(const char **)(*(_QWORD *)(a1 + 7616) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + a3));
  if (result)
    return (const char *)(strcmp(result, "SIL") == 0);
  return result;
}

const char *mfs_Ling_IsVowelVowelTrans(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *result;

  if (a3 < 1)
    v5 = 0;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + (a3 - 1));
  v6 = *(_QWORD *)(a1 + 7616);
  result = *(const char **)(v6 + 8 * v5);
  if (result)
  {
    if (!strcmp(result, "VV"))
    {
      result = *(const char **)(v6 + 8 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + a3));
      if (result)
        return (const char *)(strcmp(result, "VV") == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL mfs_Ling_IsInvariantPhoneme(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  const char *v4;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + a3);
  v4 = *(const char **)(*(_QWORD *)(a1 + 7616) + 8 * v3);
  if (!v4)
    return 0;
  if (!strcmp(*(const char **)(*(_QWORD *)(a1 + 7616) + 8 * v3), "SIL") || !strcmp(v4, "UC"))
    return 1;
  if (strcmp(v4, "MC"))
    return 0;
  return *(_BYTE *)(*(_QWORD *)(a2 + 184) + a3) != 2;
}

BOOL mfs_Ling_IsVoiced(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  const char *v4;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + a3);
  v4 = *(const char **)(*(_QWORD *)(a1 + 7616) + 8 * v3);
  return v4 && (!strcmp(*(const char **)(*(_QWORD *)(a1 + 7616) + 8 * v3), "VC") || !strcmp(v4, "VV"));
}

uint64_t mfs_ParamGenStart(uint64_t a1, int *a2, _DWORD *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  BOOL v64;
  int v65;
  int v66;
  float v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int LF0PDF_PerStateRho;
  uint64_t v86;
  uint64_t v87;
  int32x2_t *v88;
  unsigned int DurPDF;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int32x2_t *v98;
  unsigned __int16 *v99;
  int *v100;
  _QWORD *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int inited;
  uint64_t v106;
  __int16 v107;
  char v108;
  __int16 v109;
  char v110;

  v6 = (char *)(a1 + 56);
  v7 = *(_QWORD *)a1;
  MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"-%s\n");
  inited = MFS__InitUttModel(v7, v6, a2, *(__int16 *)(*(_QWORD *)(a1 + 8) + 10));
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_DWORD *)(a1 + 16) = a3[8];
  *(_QWORD *)(a1 + 1928) = v7;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_DWORD *)(a1 + 2200) = 0;
  v13 = a3[7];
  if (v13 < 1 || v13 >= *(_DWORD *)(a1 + 620))
  {
    LODWORD(v15) = *(_DWORD *)(a1 + 608);
    if ((int)v15 < 1)
    {
      v19 = 0.0;
      v18 = 0.0;
LABEL_88:
      if (v13 < 1 || (*(float *)(a1 + 16) = (float)((float)v13 - v19) / v18, (int)v15 < 1))
      {
LABEL_93:
        MFS__log_select_Diag(v7, 2, (uint64_t)">> tree search done\n");
        AddBreakMarks_1(a1, a2, (uint64_t)a3);
        if (BET3FLT__log_select_GetLogLevel(*(_QWORD *)(v7 + 32)) >= 0x15)
          OutLabel_2(a1);
        inited = ParamGenLT_1(a1, a2, 0);
        v90 = *(_QWORD *)(*(_QWORD *)(a1 + 600) + 528 * *(int *)(a1 + 608) - 512);
        *(_DWORD *)(v90 + 4 * *a2) = *(_DWORD *)(v90 + 4 * *a2 + 4) + *(_DWORD *)(v90 + 4 * *a2) - 1;
        *(_DWORD *)(v90 + 4 * *a2 + 4) = 1;
        MFS__log_select_Diag(v7, 1, (uint64_t)"+%s\n");
      }
      else
      {
        v86 = 0;
        v87 = 0;
        while (1)
        {
          v88 = (int32x2_t *)(*(_QWORD *)(a1 + 600) + v86);
          DurPDF = BET3FLT__FindDurPDF(v88, a2, 0, v88[4].i32[0], *(_DWORD *)(*(_QWORD *)(a1 + 24) + 1492), *(float *)(a1 + 16));
          if ((DurPDF & 0x80000000) != 0)
            return DurPDF;
          SetSilenceDuration_1(a1, a2, (uint64_t)a3, (int *)v88);
          *(_DWORD *)(a1 + 624) += v88[3].i32[0];
          ++v87;
          v86 += 528;
          if (v87 >= *(int *)(a1 + 608))
            goto LABEL_93;
        }
      }
      return inited;
    }
    v16 = 0;
    v95 = 0;
    v96 = 0;
    v103 = (uint64_t)(a2 + 116);
    v17 = *(_DWORD *)(a1 + 32);
    v93 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1784);
    v18 = 0.0;
    v19 = 0.0;
    v104 = v7;
    v100 = a2;
    while (1)
    {
      v106 = *(_QWORD *)(a1 + 600);
      if (v17 >= 1)
      {
        v20 = 0;
        v21 = a3 + 326;
        do
        {
          v22 = a3[v20 + 86];
          if ((int)v22 < 1)
          {
LABEL_16:
            LODWORD(v23) = 0;
          }
          else
          {
            v23 = 0;
            v24 = (const char **)&a3[2 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + v16) + 1326];
            while (1)
            {
              v25 = *(const char **)&v21[2 * v23];
              if (v25)
              {
                if (*v24 && !strcmp(v25, *v24))
                  break;
              }
              if (v22 == ++v23)
                goto LABEL_16;
            }
          }
          *(_DWORD *)(v106 + 528 * v16 + 4 * v20++ + 32) = v23;
          v21 += 10;
        }
        while (v20 < *(int *)(a1 + 32));
      }
      v98 = (int32x2_t *)(v106 + 528 * v16);
      MFS__log_select_Diag(v7, 21, (uint64_t)"[phoneme %d]\n");
      a2 = v100;
      if (v93)
      {
        if (a3[29])
        {
          v31 = v7;
          v32 = 58016;
          v33 = "Phoneme level segmentation is not currently supported\n";
LABEL_23:
          MFS__log_select_Error(v31, v32, (uint64_t)v33, v26, v27, v28, v29, v30);
          goto LABEL_64;
        }
        if (a3[28])
        {
          v31 = v7;
          v32 = 58017;
          v33 = "State level segmentation is not currently supported\n";
          goto LABEL_23;
        }
      }
      v39 = v106 + 528 * v16;
      *(_DWORD *)(v39 + 8) = MFS__TreeSearch(*(_QWORD *)(a1 + 8), v16, v103, 0, 0);
      v40 = (int *)(v39 + 8);
      MFS__log_select_Diag(v7, 6, (uint64_t)"DUR pdf id %d\n");
      if (a3[7])
      {
        v41 = *v100;
        if ((int)v41 >= 1)
        {
          v42 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v100 + 21) + 8 * *(int *)(v106 + 528 * v16 + 32))
                                    + 8 * *v40)
                        + 8);
          v43 = (v41 + 2) - 2;
          do
          {
            v19 = v19 + *v42;
            v18 = v18 + v42[v41];
            ++v42;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        v108 = 0;
        v107 = 0;
        UNICORN__mfs_Ling_GetPhonCtxt(*(_QWORD *)(a1 + 8), v98->i32[0], &v107);
        if (HIBYTE(v107) == 1 && (_BYTE)v107 && v108)
          goto LABEL_45;
        v44 = *(uint64_t **)(a1 + 2640);
        if (!v44)
          goto LABEL_45;
        v45 = *v100;
        if (!(_DWORD)v45)
          goto LABEL_45;
        v46 = 0;
        v47 = (int)v45;
        v48 = *v44;
        v49 = *((_DWORD *)v44 + 5) + v45 * v16;
        do
        {
          if (*(float *)(v48 + 48 * v49 + 16) != 0.0)
            v46 = 1;
          ++v49;
          --v45;
        }
        while (v45);
        if (!v46)
        {
LABEL_45:
          v58 = BET3FLT__FindDurPDF(v98, v100, 0, *(_DWORD *)(v106 + 528 * v16 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 1492), 0.0);
        }
        else
        {
          v50 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 1928) + 8), v47, 4);
          if (!v50)
            return -2065686518;
          v51 = v50;
          v52 = *v100;
          if ((_DWORD)v52)
          {
            v53 = *(uint64_t **)(a1 + 2640);
            v54 = *v53;
            v55 = *((_DWORD *)v53 + 5) + v52 * v16;
            v56 = (_DWORD *)v50;
            do
            {
              *v56++ = *(_DWORD *)(v54 + 48 * v55++ + 16);
              --v52;
            }
            while (v52);
          }
          MFS__FindDurPDF_PerStateRho((uint64_t)v98, v100, v50, 0, *(_DWORD *)(v106 + 528 * v16 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 1492));
          v57 = v51;
          a2 = v100;
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 1928) + 8), v57);
          v58 = inited;
        }
        inited = v58;
        if ((v58 & 0x80000000) != 0)
          return inited;
        SetSilenceDuration_1(a1, a2, (uint64_t)a3, (int *)v98);
        v110 = 0;
        v109 = 0;
        UNICORN__mfs_Ling_GetPhonCtxt(*(_QWORD *)(a1 + 8), v98->i32[0], &v109);
        v59 = (int *)(v106 + 528 * v16 + 24);
        if (HIBYTE(v109) == 1 && (_BYTE)v109 && v110)
        {
          *v59 = 0;
          LODWORD(v60) = *a2;
          if (*a2 < 1)
          {
            v68 = 0;
          }
          else
          {
            v61 = *(_QWORD *)(v106 + 528 * v16 + 16);
            v62 = 2;
            do
            {
              v63 = (float)*(int *)(v61 + 4 * v62) * 0.8;
              v65 = v60 + 4;
              v64 = (int)v60 < -4;
              v66 = v60 + 5;
              if (!v64)
                v66 = v65;
              if (v62 == v66 >> 1)
                v63 = v63 * 0.8;
              if (v63 >= 1.0)
                v67 = v63 + 0.5;
              else
                v67 = 1.5;
              *(_DWORD *)(v61 + 4 * v62) = (int)v67;
              v68 = *v59 + (int)v67;
              *v59 = v68;
              v60 = *a2;
              v64 = v62++ <= v60;
            }
            while (v64);
          }
        }
        else
        {
          v68 = *v59;
        }
        *(_DWORD *)(a1 + 624) += v68;
      }
LABEL_64:
      if (a3[2198])
      {
        inited = -2065686527;
        v91 = v7;
LABEL_97:
        MFS__log_select_Error(v91, 58011, (uint64_t)"bBackoff is not currently supported at %s:%d\n", v34, v35, v36, v37, v38);
        return inited;
      }
      v17 = *(_DWORD *)(a1 + 32);
      if (v17 >= 1)
      {
        v69 = 0;
        while (1)
        {
          v70 = *(_QWORD *)(a1 + 24);
          if (!*(_DWORD *)(v70 + 1528 * v69 + 1480))
          {
            if (*(_DWORD *)(v70 + 1528 * v69 + 1488))
            {
              v71 = a1 + 8 * v69;
              v72 = *a2 * v16;
              v95 = *(_QWORD *)(*(_QWORD *)(v71 + 304) + 8 * v72);
              v96 = *(_QWORD *)(*(_QWORD *)(v71 + 224) + 8 * v72);
            }
            v73 = (char *)a2 + 2 * v69;
            if (*((_WORD *)v73 + 324))
              break;
          }
LABEL_68:
          if (++v69 >= v17)
            goto LABEL_85;
        }
        v74 = 0;
        v75 = 0;
        v76 = v106 + 528 * v16;
        v77 = (_QWORD *)(v76 + 8 * v69);
        v99 = (unsigned __int16 *)(v73 + 648);
        v101 = v77 + 9;
        v102 = &a2[2 * v69 + 142];
        v78 = v77 + 19;
        v79 = v77 + 29;
        v94 = &a2[v69 + 1];
        v97 = (int *)(v76 + 4 * v69 + 32);
        while (2)
        {
          v80 = *(unsigned __int16 *)(*(_QWORD *)v102 + v74);
          *(_DWORD *)(*v101 + 4 * v80) = MFS__TreeSearch(*(_QWORD *)(a1 + 8), v16, v103, v69, v75);
          MFS__log_select_Diag(v104, 6, (uint64_t)"%s pdf state %d id %d\n");
          if (a3[2198])
          {
            inited = -2065686527;
            v91 = v104;
            goto LABEL_97;
          }
          v81 = *(_QWORD *)(a1 + 24);
          if (*(_DWORD *)(v81 + 1528 * v69 + 1488))
          {
            v82 = v80 - 2;
            v83 = v82 + v82 * *v94;
            *(_QWORD *)(*v78 + 8 * v80) = v96 + 4 * v83;
            *(_QWORD *)(*v78 + 8 * v80) -= 4;
            *(_QWORD *)(*v79 + 8 * v80) = v95 + 4 * v83;
            *(_QWORD *)(*v79 + 8 * v80) -= 4;
            v84 = *(_QWORD *)(a1 + 2640);
            if (v84 && a3[v69 + 56] == 2)
              LF0PDF_PerStateRho = MFS__FindLF0PDF_PerStateRho(v69, v80, (uint64_t)v98, (uint64_t)v100, (uint64_t)a3, *v97, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 1528 * v69 + 1492), *(float *)(*(_QWORD *)v84+ 48 * (*(_DWORD *)(v84 + 20) + v82 + *v100 * v16)+ 20));
            else
              LF0PDF_PerStateRho = BET3FLT__FindMsdPDF(v69, v80, (uint64_t)v98, (uint64_t)v100, (uint64_t)a3, *v97);
            goto LABEL_82;
          }
          if (*(_DWORD *)(v81 + 1528 * v69 + 1484))
          {
            LF0PDF_PerStateRho = BET3FLT__FindContPDF(v69, v80, (uint64_t)v98, (uint64_t)v100, *v97);
LABEL_82:
            inited = LF0PDF_PerStateRho;
            if ((LF0PDF_PerStateRho & 0x80000000) != 0)
              return inited;
          }
          ++v75;
          v74 += 16;
          if (v75 >= *v99)
          {
            v17 = *(_DWORD *)(a1 + 32);
            v7 = v104;
            a2 = v100;
            goto LABEL_68;
          }
          continue;
        }
      }
LABEL_85:
      ++v16;
      v15 = *(int *)(a1 + 608);
      if (v16 >= v15)
      {
        v13 = a3[7];
        goto LABEL_88;
      }
    }
  }
  MFS__log_select_Error(v7, 55018, (uint64_t)"Specified length of generated speech is too short (this sentence is composed from %d states), specify more than %d milliseconds\n", v8, v9, v10, v11, v12);
  return -2065686521;
}

uint64_t SetSilenceDuration_1(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v4 = *(_QWORD *)(result + 8);
  v5 = *a4;
  if (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v5) == 1)
  {
    v6 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 1784) + 2 * v5) / *(int *)(a3 + 24);
    LODWORD(v5) = *a2;
    if (v6 <= *a2)
    {
      if ((int)v5 >= 1)
      {
        v12 = *((_QWORD *)a4 + 2);
        v13 = 2;
        do
        {
          *(_DWORD *)(v12 + 4 * v13) = 1;
          v9 = v13++ <= *a2;
        }
        while (v9);
        LODWORD(v5) = *a2;
      }
      a4[6] = v5;
    }
    else
    {
      if (v6 >= a4[6])
      {
        if ((int)v5 <= 0)
        {
          a4[6] = 0;
          return result;
        }
        v11 = 0;
        v10 = 0;
        v14 = *((_QWORD *)a4 + 2);
        v15 = 2;
        do
        {
          v16 = *(_DWORD *)(v14 + 4 * v15);
          if (v16 <= 0)
          {
            v16 = 1;
            *(_DWORD *)(v14 + 4 * v15) = 1;
            LODWORD(v5) = *a2;
          }
          v17 = v15 == 2 || v15 == (_DWORD)v5 + 1;
          if (v17)
            v18 = 0;
          else
            v18 = v16;
          v10 += v18;
          if (!v17)
            v16 = 0;
          v11 += v16;
          v9 = v15++ <= (int)v5;
        }
        while (v9);
      }
      else
      {
        if ((int)v5 >= 1)
        {
          v7 = *((_QWORD *)a4 + 2);
          v8 = 2;
          do
          {
            *(_DWORD *)(v7 + 4 * v8) = 1;
            v9 = v8++ <= *a2;
          }
          while (v9);
          LODWORD(v5) = *a2;
        }
        v10 = v5 - 2;
        v11 = 2;
      }
      a4[6] = v11;
      if ((int)v5 >= 3)
      {
        v19 = (float)(v6 - v11) / (float)v10;
        v20 = *((_QWORD *)a4 + 2);
        v21 = 3;
        do
        {
          if (v21 >= (int)v5)
            v22 = v6 - v11;
          else
            v22 = (int)(float)(v19 * (float)*(int *)(v20 + 4 * v21));
          *(_DWORD *)(v20 + 4 * v21) = v22;
          if (v22 <= 0)
          {
            v22 = 1;
            *(_DWORD *)(v20 + 4 * v21) = 1;
          }
          v11 = a4[6] + v22;
          a4[6] = v11;
          v5 = *a2;
          v9 = v21++ < v5;
        }
        while (v9);
      }
    }
  }
  return result;
}

uint64_t AddBreakMarks_1(uint64_t a1, int *a2, uint64_t a3)
{
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v6 = *(const char **)(a3 + 80);
  result = strcmp(v6, "PHRASE");
  if ((_DWORD)result)
  {
    result = strcmp(v6, "WORD");
    if ((_DWORD)result)
    {
      result = strcmp(v6, "SYLLABLE");
      if ((_DWORD)result)
      {
        result = strcmp(v6, "TIME");
        if ((_DWORD)result)
        {
          result = strcmp(v6, "NONE");
          if ((_DWORD)result)
            return MFS__log_select_Error(*(_QWORD *)a1, 58019, (uint64_t)"valid breaker is required\n", v8, v9, v10, v11, v12);
        }
        else
        {
          v25 = *(unsigned int *)(a1 + 608);
          if ((int)v25 >= 1)
          {
            v26 = 0;
            v27 = 0;
            v28 = *(_DWORD *)(a3 + 88);
            v29 = *a2;
            v30 = *(_QWORD *)(a1 + 600);
            v31 = v28;
            v32 = 0;
            do
            {
              if (v29 >= 1)
              {
                result = *(_QWORD *)(v30 + 528 * v26 + 16) + 8;
                v33 = (v29 + 2) - 2;
                v32 = v27;
                do
                {
                  v34 = *(_DWORD *)result;
                  result += 4;
                  v32 += v34;
                  --v33;
                }
                while (v33);
              }
              if (v32 > v31)
              {
                v31 = v27 + v28;
                v35 = v30 + 528 * v26;
                result = *(_DWORD *)(v35 + 4) | 2u;
                *(_DWORD *)(v35 + 4) = result;
              }
              ++v26;
              v27 = v32;
            }
            while (v26 != v25);
          }
        }
      }
      else
      {
        v21 = *(_DWORD *)(a1 + 608);
        if (v21 >= 3)
        {
          v22 = (v21 - 2);
          v23 = *(int **)(a1 + 600);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
          do
          {
            if (*(_BYTE *)(v24 + *v23))
              v23[133] |= 2u;
            v23 += 132;
            --v22;
          }
          while (v22);
        }
      }
    }
    else
    {
      v17 = *(_DWORD *)(a1 + 608);
      if (v17 >= 3)
      {
        v18 = (v17 - 2);
        v19 = *(int **)(a1 + 600);
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
        do
        {
          if ((*(_BYTE *)(v20 + *v19) & 0xFE) == 2)
            v19[133] |= 2u;
          v19 += 132;
          --v18;
        }
        while (v18);
      }
    }
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 608);
    if (v13 >= 3)
    {
      v14 = (v13 - 2);
      v15 = *(int **)(a1 + 600);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
      do
      {
        if (*(_BYTE *)(v16 + *v15) == 3)
          v15[133] |= 2u;
        v15 += 132;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t OutLabel_2(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (*(int *)(result + 608) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v1 + 600) + v2;
      result = MFS__log_select_Diag(*(_QWORD *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 528;
    }
    while (v3 < *(int *)(v1 + 608));
  }
  return result;
}

uint64_t ParamGenLT_1(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int inited;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int **v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  int v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  int **v87;
  uint64_t *v88;
  int *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int **v93;
  uint64_t *v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  void (***v141)(uint64_t *, _QWORD);
  void (***v142)(uint64_t *, _QWORD);
  uint64_t *v144;
  uint64_t **v145;
  int ***v146;
  int *v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  unsigned int v151;
  _QWORD *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  int *v171;
  uint64_t v172;
  _OWORD v173[4];
  _OWORD v174[4];
  _QWORD v175[92];

  v6 = *(_QWORD *)a1;
  memset(v174, 0, sizeof(v174));
  memset(v173, 0, sizeof(v173));
  MFS__log_select_Diag(v6, 1, (uint64_t)"-%s\n");
  bzero(v175, 0x2D8uLL);
  BET3FLT__InitSMatrices(v6, v174);
  BET3FLT__InitSMatrices(v6, v173);
  if (a3)
  {
    heap_Free(*(_QWORD **)(v6 + 8), *(_QWORD *)(a1 + 48));
    *(_QWORD *)(a1 + 48) = 0;
    heap_Free(*(_QWORD **)(v6 + 8), *(_QWORD *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
    v7 = *(unsigned int *)(a1 + 32);
    if ((int)v7 >= 1)
    {
      v8 = *(_QWORD *)(a1 + 24);
      do
      {
        if (!*(_DWORD *)(v8 + 1480))
          *(_DWORD *)(v8 + 44) = 0;
        v8 += 1528;
        --v7;
      }
      while (v7);
    }
  }
  v151 = -2065686518;
  v9 = heap_Calloc(*(_QWORD **)(v6 + 8), (*(_DWORD *)(a1 + 624) + 1), 1);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = heap_Calloc(*(_QWORD **)(v6 + 8), (*(_DWORD *)(a1 + 624) + 1), 4);
    *(_QWORD *)(a1 + 40) = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(a1 + 608);
      if (v11 < 1)
      {
        v13 = 0;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = *a2;
        do
        {
          if (v14 >= 1)
          {
            v15 = *(_QWORD *)(a1 + 600) + 528 * v12;
            v18 = *(_QWORD *)(v15 + 16);
            v16 = (uint64_t *)(v15 + 16);
            v17 = v18;
            v19 = v16 + 37;
            v20 = 2;
            do
            {
              if (*(int *)(v17 + 4 * v20) >= 1)
              {
                v13 = (int)v13;
                v21 = 1;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 48) + v13) = *(_BYTE *)(*v19 + v20);
                  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v13) = *(_DWORD *)(v16[38] + 4 * v20);
                  v22 = *(unsigned int *)(a1 + 32);
                  if ((int)v22 >= 1)
                  {
                    v23 = *(_DWORD **)(a1 + 24);
                    do
                    {
                      if (v23[372] && ((1 << v23[3]) & (unint64_t)*(unsigned __int8 *)(*v19 + v20)) >> v23[3])
                        ++v23[11];
                      v23 += 382;
                      --v22;
                    }
                    while (v22);
                  }
                  ++v13;
                  v17 = *v16;
                  v76 = v21++ < *(_DWORD *)(*v16 + 4 * v20);
                }
                while (v76);
                v14 = *a2;
              }
              v76 = v20++ <= v14;
            }
            while (v76);
            v11 = *(_DWORD *)(a1 + 608);
          }
          ++v12;
        }
        while (v12 < v11);
      }
      if (*(int *)(a1 + 32) < 1)
      {
        v151 = 0;
        goto LABEL_136;
      }
      v147 = a2;
      v24 = 0;
      v25 = 0;
      v151 = 0;
      v161 = a3;
      while (1)
      {
        v26 = *(_QWORD *)(a1 + 24);
        v27 = v26 + 1528 * v24;
        v28 = (uint64_t *)(v27 + 24);
        v156 = v24;
        v144 = (uint64_t *)(v27 + 24);
        v148 = v26;
        v150 = v13;
        if (!*(_DWORD *)(v27 + 1484))
          goto LABEL_79;
        v29 = v26 + 1528 * v24;
        *(_DWORD *)(v29 + 44) = v13;
        v149 = (unsigned int *)(v29 + 44);
        *(_DWORD *)(v29 + 772) = v13;
        inited = BET3FLT__InitPStreamParam(v28, 0);
        if ((inited & 0x80000000) != 0)
        {
LABEL_135:
          v151 = inited;
          goto LABEL_136;
        }
        v151 = BET3FLT__InitPStreamSM(v28, 0);
        if ((v151 & 0x80000000) != 0)
          goto LABEL_136;
        v31 = v26 + 1528 * v24;
        v33 = *(_DWORD *)(v31 + 40);
        v32 = (int *)(v31 + 40);
        if (v33 < 1)
          goto LABEL_79;
        v34 = 0;
        v35 = (uint64_t *)(v149 + 177);
        v36 = v26 + 1528 * v156;
        v37 = (int **)(v36 + 784);
        v163 = (_QWORD *)(v36 + 96);
        v165 = 0;
        v162 = (_QWORD *)(v36 + 824);
        v167 = (_QWORD *)(v36 + 832);
        v169 = (_QWORD *)(v36 + 104);
        v38 = (_DWORD *)(v36 + 872);
        v39 = (_DWORD *)(v36 + 1072);
        v40 = (_DWORD *)(v36 + 1272);
        v145 = (uint64_t **)(v36 + 64);
        v146 = (int ***)(v36 + 792);
        v152 = v149 + 177;
        v171 = v32;
        do
        {
          v158 = v34;
          inited = BET3FLT__InitPStreamParam(v35, (uint64_t)v175);
          if ((inited & 0x80000000) != 0)
            goto LABEL_135;
          v151 = BET3FLT__InitPStreamSM(v35, (uint64_t)v173);
          if ((v151 & 0x80000000) != 0)
            goto LABEL_136;
          v155 = *(unsigned int *)(a1 + 608);
          if ((int)v155 < 1)
          {
            v150 = 0;
LABEL_69:
            v79 = v158;
            goto LABEL_70;
          }
          v41 = 0;
          v42 = 0;
          v153 = *(_QWORD *)(a1 + 600);
          v43 = v148 + 1528 * v156 + 4 * v158;
          v44 = (_DWORD *)(v43 + 144);
          v45 = (_DWORD *)(v43 + 344);
          v46 = (_DWORD *)(v43 + 544);
          v154 = *v147;
          v159 = (*v147 + 2);
          do
          {
            v157 = v41;
            if (v154 >= 1)
            {
              v47 = v153 + 528 * v41;
              v48 = *(_QWORD *)(v47 + 16);
              v49 = (_BYTE *)(v47 + 4);
              v50 = v47 + 8 * v156;
              v51 = (_QWORD *)(v50 + 152);
              v52 = (_QWORD *)(v50 + 232);
              v53 = 2;
              while (1)
              {
                v54 = *(_DWORD *)(v48 + 4 * v53);
                if (v54 >= 1)
                  break;
LABEL_55:
                if (++v53 == v159)
                  goto LABEL_56;
              }
              v42 = (int)v42;
              v55 = 1;
              while (1)
              {
                if (a3 > 1)
                {
                  v56 = (unsigned int *)*v37;
                  if ((*v49 & 4) == 0)
                  {
                    v57 = *v56;
                    if ((int)v57 >= 1)
                    {
                      v58 = v165;
                      v59 = *(_QWORD *)(*v163 + 8 * v42);
                      v60 = *(_DWORD **)(*v162 + 8 * v42);
                      v61 = *(_QWORD *)(*v169 + 8 * v42);
                      v62 = *(_DWORD **)(*v167 + 8 * v42);
                      v63 = 4 * *v171;
                      do
                      {
                        *(_DWORD *)(v59 + v58) = 0;
                        *v60++ = 0;
                        *(_DWORD *)(v61 + v58) = 1065353216;
                        v58 += v63;
                        *v62++ = 1065353216;
                        --v57;
                      }
                      while (v57);
                    }
                    goto LABEL_53;
                  }
                }
                else
                {
                  v56 = (unsigned int *)*v37;
                }
                v64 = *v56;
                if ((int)v64 >= 1)
                {
                  v65 = *(_QWORD *)(*v51 + 8 * v53);
                  v66 = *(_QWORD *)(*v163 + 8 * v42);
                  v67 = *(_DWORD **)(*v162 + 8 * v42);
                  v68 = *(_QWORD *)(*v52 + 8 * v53);
                  v69 = *(_QWORD *)(*v169 + 8 * v42);
                  v70 = 4 * *v171;
                  v71 = v165;
                  v72 = *(_DWORD **)(*v167 + 8 * v42);
                  do
                  {
                    v73 = *(_DWORD *)(v65 + v71);
                    *(_DWORD *)(v66 + v71) = v73;
                    *v67++ = v73;
                    v74 = *(_DWORD *)(v68 + v71);
                    *(_DWORD *)(v69 + v71) = v74;
                    *v72++ = v74;
                    *v38 = *v44;
                    *v39 = *v45;
                    *v40 = *v46;
                    v71 += v70;
                    --v64;
                  }
                  while (v64);
                }
LABEL_53:
                ++v42;
                v75 = v55++ == v54;
                if (v75)
                  goto LABEL_55;
              }
            }
LABEL_56:
            v41 = v157 + 1;
          }
          while (v157 + 1 != v155);
          if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 1528 * v156 + 1492))
            v76 = 1;
          else
            v76 = (int)v42 < 1;
          v150 = v42;
          if (v76)
            goto LABEL_69;
          v77 = 0;
          v160 = v42;
          LODWORD(v78) = **v37;
          v79 = v158;
          v80 = v169;
          do
          {
            if ((int)v78 >= 1)
            {
              v81 = 0;
              v82 = *(_QWORD *)(*v80 + 8 * v77);
              do
              {
                v83 = v79 + *v171 * (uint64_t)(int)v81;
                v84 = BET3FLT__bet3_finv(*(float *)(v82 + 4 * v83));
                v80 = v169;
                v79 = v158;
                v82 = *(_QWORD *)(*v169 + 8 * v77);
                *(float *)(v82 + 4 * v83) = v84;
                *(float *)(*(_QWORD *)(*v167 + 8 * v77) + 4 * v81++) = v84;
                v78 = **v37;
              }
              while (v81 < v78);
              a3 = v161;
            }
            ++v77;
          }
          while (v77 != v160);
LABEL_70:
          v85 = *(_QWORD *)(a1 + 24);
          if (a3)
          {
            (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v85 + 1528 * v156 + 1512) + 8 * v79))(v152, 0);
            v86 = *v149;
            if ((int)v86 >= 1)
            {
              v87 = *v146;
              v88 = *v145;
              do
              {
                v89 = *v87++;
                v90 = *v89;
                v91 = *v88++;
                *(_DWORD *)(v91 + 4 * v158) = v90;
                --v86;
              }
              while (v86);
            }
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v85 + 1528 * v156 + 1504) + 8 * v79))(v152, 0);
            v92 = *v149;
            if ((int)v92 >= 1)
            {
              v93 = *v146;
              v94 = *v145;
              do
              {
                v95 = *v93++;
                v96 = *v95;
                v97 = *v94++;
                *(_DWORD *)(v97 + 4 * v158) = v96;
                --v92;
              }
              while (v92);
            }
          }
          BET3FLT__FreePStreamSM((uint64_t)v152);
          BET3FLT__FreePStreamParam(v152);
          v35 = (uint64_t *)(v149 + 177);
          v34 = v158 + 1;
          v165 += 4;
        }
        while (v158 + 1 < *v171);
LABEL_79:
        v98 = v156;
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 24) + 1528 * v156 + 1488) || !*(_DWORD *)(v148 + 1528 * v156 + 44))
        {
          v101 = v150;
          goto LABEL_130;
        }
        inited = BET3FLT__InitPStreamParam(v144, 0);
        if ((inited & 0x80000000) != 0)
          goto LABEL_135;
        v151 = BET3FLT__InitPStreamSM(v144, 0);
        if ((v151 & 0x80000000) != 0)
          goto LABEL_136;
        v168 = *(unsigned int *)(a1 + 608);
        if ((int)v168 < 1)
        {
          v101 = 0;
          goto LABEL_130;
        }
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v164 = *(_QWORD *)(a1 + 600);
        v102 = v148 + 1528 * v156;
        v103 = v102 + 56;
        v104 = (uint64_t *)(v102 + 96);
        v105 = (uint64_t *)(v102 + 104);
        v166 = *v147;
        v172 = (*v147 + 2);
LABEL_85:
        v170 = v99;
        if (v166 < 1)
          goto LABEL_115;
        v106 = v164 + 528 * v99;
        v107 = *(_QWORD *)(v106 + 16);
        v108 = (_BYTE *)(v106 + 4);
        v109 = v106 + 8 * v98;
        v110 = (_QWORD *)(v109 + 152);
        v111 = (_QWORD *)(v109 + 232);
        v112 = 2;
LABEL_87:
        v113 = *(_DWORD *)(v107 + 4 * v112);
        if (v113 < 1)
          goto LABEL_114;
        v114 = *(_QWORD *)(a1 + 24) + 1528 * v98;
        v115 = *(unsigned int *)(v114 + 36);
        v116 = *(_QWORD *)(a1 + 48);
        v117 = *(_DWORD *)(v114 + 12);
        v118 = 1;
        v119 = 1 << v117;
        v120 = (int)v101;
        v121 = (1 << v117);
LABEL_89:
        if ((int)v115 >= 1)
          break;
LABEL_109:
        if ((unint64_t)(v119 & *(_BYTE *)(v116 + v120)) >> v117)
          ++v100;
        ++v120;
        LODWORD(v101) = v101 + 1;
        v75 = v118++ == v113;
        if (!v75)
          goto LABEL_89;
        v101 = v120;
        v98 = v156;
LABEL_114:
        if (++v112 != v172)
          goto LABEL_87;
LABEL_115:
        ++v99;
        if (v170 + 1 != v168)
          goto LABEL_85;
        v134 = *(_QWORD *)(a1 + 24);
        if (*(_DWORD *)(v134 + 1528 * v98 + 1492))
          v135 = 1;
        else
          v135 = v100 < 1;
        if (!v135)
        {
          v136 = 0;
          do
          {
            if (*(int *)(v134 + 1528 * v156 + 36) >= 1)
            {
              v137 = 0;
              v138 = *(_QWORD *)(*v105 + 8 * v136);
              do
              {
                v139 = BET3FLT__bet3_finv(*(float *)(v138 + 4 * v137));
                v138 = *(_QWORD *)(*v105 + 8 * v136);
                *(float *)(v138 + 4 * v137++) = v139;
                v134 = *(_QWORD *)(a1 + 24);
              }
              while (v137 < *(int *)(v134 + 1528 * v156 + 36));
            }
            ++v136;
          }
          while (v136 != v100);
        }
        if (v100 < 1)
        {
          a3 = v161;
          v98 = v156;
        }
        else
        {
          v98 = v156;
          v140 = v134 + 1528 * v156;
          v141 = (void (***)(uint64_t *, _QWORD))(v140 + 1504);
          v142 = (void (***)(uint64_t *, _QWORD))(v140 + 1512);
          a3 = v161;
          if (!v161)
            v142 = v141;
          (**v142)(v144, 0);
        }
LABEL_130:
        v24 = v98 + 1;
        v13 = v101;
        if (v24 >= *(int *)(a1 + 32))
        {
LABEL_136:
          BET3FLT__FreePStreamParam(v175);
          BET3FLT__FreeSMatrices((uint64_t)v174);
          BET3FLT__FreeSMatrices((uint64_t)v173);
          MFS__log_select_Diag(v6, 1, (uint64_t)"+%s\n");
          return v151;
        }
      }
      v122 = 0;
      v123 = *(_QWORD *)(*(_QWORD *)v103 + 8);
      while (1)
      {
        v25 |= v121;
        v124 = *(int **)(v123 + 8 * v122);
        v125 = *v124;
        v126 = v124[1];
        if (v125 <= v126)
        {
          v127 = v126 - v125 + 1;
          v128 = v101 + v125;
          do
          {
            v129 = v121 ^ 0xFF;
            if ((v128 & 0x80000000) == 0)
            {
              v129 = v121 ^ 0xFF;
              if (*(_DWORD *)(a1 + 624) >= (signed int)v128)
                v129 = *(unsigned __int8 *)(v116 + v128);
            }
            v25 &= v129;
            ++v128;
            --v127;
          }
          while (v127);
        }
        if (!((unint64_t)(v119 & *(_BYTE *)(v116 + v120)) >> v117))
          goto LABEL_108;
        if (!v122 || (v119 & v25) >> v117)
        {
          if (v161 <= 1)
          {
            v132 = *v104;
            v130 = *v105;
LABEL_106:
            v133 = 4 * v122 + 4;
            *(_DWORD *)(*(_QWORD *)(v132 + 8 * v100) + 4 * v122) = *(_DWORD *)(*(_QWORD *)(*v110 + 8 * v112) + v133);
            v131 = *(float *)(*(_QWORD *)(*v111 + 8 * v112) + v133);
            goto LABEL_107;
          }
          v132 = *v104;
          v130 = *v105;
          if ((*v108 & 4) != 0)
            goto LABEL_106;
          *(_DWORD *)(*(_QWORD *)(v132 + 8 * v100) + 4 * v122) = 0;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(*v104 + 8 * v100) + 4 * v122) = 0;
          v130 = *v105;
        }
        v131 = 1.0;
LABEL_107:
        *(float *)(*(_QWORD *)(v130 + 8 * v100) + 4 * v122) = v131;
LABEL_108:
        if (++v122 == v115)
          goto LABEL_109;
      }
    }
  }
  return v151;
}

uint64_t mfs_ParamGen(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  _DWORD *v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t i;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t j;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  int TemplateDur;
  unsigned int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  _DWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  int v109;
  int v110;
  _DWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 48);
  MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"mfs_ParamGen {\n");
  v147 = a3;
  if (*(_DWORD *)(a3 + 8328) && *(_DWORD *)(a3 + 8564))
  {
    v140 = a4;
    v142 = v7;
    if (!*(_DWORD *)(a1 + 2588))
      BackupDurations(a1, a2);
    if (!*(_DWORD *)(a1 + 2200))
    {
      MFS__log_select_Diag(v7, 1, (uint64_t)"mfs_ParamGen:: Not skipping second pass (early emission mode)\n");
      v145 = *(_QWORD *)(a1 + 1928);
      v9 = *(_DWORD *)(a1 + 2232);
      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 2224) + 28 * (v9 - 1);
        v11 = *(_DWORD *)(v10 + 12) + *(_DWORD *)(v10 + 8);
      }
      else
      {
        v11 = 0;
      }
      MFS__log_select_Diag(v145, 1, (uint64_t)"  -> UpdateStateDurations (early emission mode)\n");
      v55 = *(_DWORD *)(a1 + 2588);
      v56 = v55 / *a2;
      if (v56 < *(_DWORD *)(a1 + 608))
      {
        v57 = v55 % *a2 + 2;
        v58 = v56;
        while (1)
        {
          v139 = v58;
          v59 = *(_QWORD *)(a1 + 600);
          LODWORD(v60) = *a2;
          v61 = *a2 + 2;
          if (v57 >= v61)
          {
            v62 = 0;
            v67 = v57;
          }
          else
          {
            v62 = 0;
            v138 = *(_QWORD *)(a1 + 600);
            v63 = v59 + 528 * v139;
            v64 = (_QWORD *)(v63 + 16);
            v65 = (_DWORD *)(v63 + 4);
            v66 = v57;
            v67 = v57;
            do
            {
              TemplateDur = mfs_UnitSequence_GetTemplateDur(a1 + 2112, *(_QWORD *)(a1 + 1928), v55);
              if (TemplateDur)
              {
                *(_DWORD *)(*v64 + 4 * v66) = TemplateDur;
              }
              else
              {
                *v65 |= 4u;
                v62 = 1;
              }
              v69 = *(_DWORD *)(a1 + 2588);
              if (v69 < *(_DWORD *)(a1 + 2584))
              {
                *(_DWORD *)(a1 + 2588) = v69 + 1;
                ++v67;
              }
              ++v66;
              v60 = *a2;
              v61 = v60 + 2;
              ++v55;
            }
            while (v66 < v60 + 2);
            v59 = v138;
          }
          if (v57 == 2)
          {
            if (*(_DWORD *)(v147 + 8256))
              v70 = v62 == 0;
            else
              v70 = 1;
            if (!v70)
            {
              if (v61 < 3)
              {
                v71 = 0;
              }
              else
              {
                v71 = 0;
                v72 = v59 + 528 * v139;
                v73 = (_QWORD *)(v72 + 328);
                v74 = (_QWORD *)(v72 + 16);
                v75 = 4 * v61;
                v76 = 8;
                do
                {
                  if (v76 != 12)
                    v71 = *(_DWORD *)(*v73 + v76) + v71 - *(_DWORD *)(*v74 + v76);
                  v76 += 4;
                }
                while (v75 != v76);
              }
              v77 = *(_QWORD *)(v59 + 528 * v139 + 16);
              v78 = *(_DWORD *)(v77 + 12);
              if (v78 + v71 < 0 != __OFADD__(v78, v71))
                v71 = 1 - v78;
              *(_DWORD *)(v77 + 12) = v71 + v78;
              LODWORD(v60) = *a2;
            }
            if ((int)v60 < 1)
            {
              v79 = 0;
            }
            else
            {
              v79 = 0;
              v80 = (v60 + 2) - 2;
              v81 = (int *)(*(_QWORD *)(v59 + 528 * v139 + 16) + 8);
              do
              {
                v82 = *v81++;
                v79 += v82;
                --v80;
              }
              while (v80);
            }
            v83 = v59 + 528 * v139;
            *(_DWORD *)(a1 + 624) += v79 - *(_DWORD *)(v83 + 24);
            *(_DWORD *)(v83 + 24) = v79;
            MFS__log_select_Diag(v145, 5, (uint64_t)"syntheval:Phoneme %d has duration %d\n");
            MFS__log_select_Diag(v145, 5, (uint64_t)"At phoneme %d output we have totalframe %d\n");
          }
          if (v57 < v67)
            break;
          v84 = v139;
LABEL_90:
          if (*(_DWORD *)(a1 + 2588) != *(_DWORD *)(a1 + 2584))
          {
            v58 = v84 + 1;
            v57 = 2;
            if (v58 < *(int *)(a1 + 608))
              continue;
          }
          goto LABEL_92;
        }
        v84 = v139;
        v85 = (_QWORD *)(v59 + 528 * v139 + 16);
        v86 = v147;
        v87 = 4 * v57;
        while (1)
        {
          MFS__log_select_Diag(v145, 5, (uint64_t)"Adding parametric segment %d (uttph%d,st%d) unitid %d  offset %d  dur %d\n");
          if ((mfs_SegmentList_Add(a1 + 2208, -1, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + v139), v11, *(_DWORD *)(v86 + 24) * *(_DWORD *)(*v85 + v87)) & 0x80000000) != 0)break;
          v86 = v147;
          v11 += *(_DWORD *)(v147 + 24) * *(_DWORD *)(*v85 + v87);
          ++v57;
          v87 += 4;
          if (v67 == v57)
            goto LABEL_90;
        }
      }
    }
LABEL_92:
    v7 = v142;
    *v140 = 1;
    a3 = v147;
    goto LABEL_93;
  }
  v12 = 2229280775;
  v13 = *(unsigned int *)(a1 + 32);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 24);
    v16 = -1;
    do
    {
      v17 = *(_DWORD *)(v15 + 12);
      if (v17 == 2)
      {
        v14 = v15;
      }
      else if (v17 == 1)
      {
        v16 = *(_DWORD *)(v15 + 44);
      }
      v15 += 1528;
      --v13;
    }
    while (v13);
    if (v16 != -1 && v14)
    {
      MFS__log_select_Diag(v7, 1, (uint64_t)"s32NumFrames as measured in mfsengine.c is %d\n");
      v18 = heap_Calloc(*(_QWORD **)(v7 + 8), v16, 4);
      *(_QWORD *)(a1 + 2648) = v18;
      if (!v18)
        return 2229280778;
      v141 = a4;
      if (v16 >= 1)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          v21 = 0.0;
          if ((*(_BYTE *)(v8 + v19) & 4) != 0)
          {
            v22 = *(float *)(a3 + 48);
            v23 = exp(**(float **)(*(_QWORD *)(v14 + 64) + 8 * v20));
            v21 = *(float *)(a3 + 52) + (float)(v22 * v23);
            ++v20;
          }
          MFS__log_select_Diag(v7, 10, (uint64_t)"At frame %d, model trajectory F0 is %.6f\n");
          *(float *)(*(_QWORD *)(a1 + 2648) + 4 * v19++) = v21;
        }
        while (v16 != v19);
      }
      BET3FLT__FreePStreamParam((_QWORD *)(v14 + 24));
      *v141 = 1;
      v24 = *(unsigned int *)(a1 + 32);
      if ((int)v24 >= 1)
      {
        v25 = *(_DWORD **)(a1 + 24);
        do
        {
          if (!v25[370])
            *v25 = 0;
          v25 += 382;
          --v24;
        }
        while (v24);
      }
      BackupDurations(a1, a2);
      if (!*(_DWORD *)(a1 + 2200))
      {
        v143 = v7;
        MFS__log_select_Diag(v7, 1, (uint64_t)"mfs_ParamGen:: Not skipping second pass\n");
        v146 = *(_QWORD *)(a1 + 1928);
        MFS__log_select_Diag(v146, 1, (uint64_t)"  -> UpdateStateDurations\n");
        *(_DWORD *)(a1 + 624) = 0;
        if (*(int *)(a1 + 608) >= 1)
        {
          v89 = 0;
          v90 = 0;
          do
          {
            v91 = *(_QWORD *)(a1 + 600);
            v92 = v91 + 528 * v89;
            *(_DWORD *)(v92 + 24) = 0;
            v93 = (int *)(v92 + 24);
            if (*a2 < 1)
            {
              v101 = 0;
            }
            else
            {
              v94 = 0;
              v95 = v91 + 528 * v89;
              v96 = (uint64_t *)(v95 + 16);
              v97 = (_DWORD *)(v95 + 4);
              v98 = 2;
              do
              {
                v99 = mfs_UnitSequence_GetTemplateDur(a1 + 2112, *(_QWORD *)(a1 + 1928), v90 + (int)v98 - 2);
                if (v99)
                {
                  v100 = *v96;
                  *(_DWORD *)(*v96 + 4 * v98) = v99;
                }
                else
                {
                  *v97 |= 4u;
                  v100 = *v96;
                  v99 = *(_DWORD *)(*v96 + 4 * v98);
                  v94 = 1;
                }
                v101 = *v93 + v99;
                *v93 = v101;
                ++v98;
                v102 = *a2;
              }
              while (v98 < v102 + 2);
              a3 = v147;
              if (*(_DWORD *)(v147 + 8256) && v94)
              {
                v103 = 0;
                if ((int)v102 >= 1)
                {
                  v104 = 8;
                  do
                  {
                    if (v104 != 12)
                      v103 = *(_DWORD *)(*(_QWORD *)(v91 + 528 * v89 + 328) + v104) + v103 - *(_DWORD *)(v100 + v104);
                    v104 += 4;
                  }
                  while (4 * (v102 + 2) != v104);
                }
                v105 = *(_DWORD *)(v100 + 12);
                if (v105 + v103 < 0 != __OFADD__(v105, v103))
                  v103 = 1 - v105;
                *(_DWORD *)(v100 + 12) = v103 + v105;
                v101 = v103 + *v93;
                *v93 = v101;
                v90 = v90 + v98 - 2;
              }
              else
              {
                v90 = v90 + v98 - 2;
              }
            }
            *(_DWORD *)(a1 + 624) += v101;
            MFS__log_select_Diag(v146, 5, (uint64_t)"syntheval:Phoneme %d has duration %d\n");
            MFS__log_select_Diag(v146, 5, (uint64_t)"At phoneme %d output we have totalframe %d\n");
            ++v89;
          }
          while (v89 < *(int *)(a1 + 608));
        }
        v106 = *(unsigned int *)(a1 + 2272);
        v107 = 0.0;
        if ((int)v106 >= 1)
        {
          v108 = 0;
          v109 = 0;
          v110 = 0;
          v111 = *(_DWORD **)(a1 + 2264);
          do
          {
            if (*v111 == -1)
            {
              v112 = *(_DWORD *)(a3 + 24)
                   * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 528 * ((int)v108 / *a2) + 16)
                               + 4 * ((int)v108 % *a2 + 2));
              v110 += v112;
            }
            else
            {
              v112 = v111[3];
            }
            v109 += v112;
            ++v108;
            v111 += 7;
          }
          while (v106 != v108);
          if (v109)
          {
            v107 = (float)v110 / (float)v109;
            if (v107 > 0.89)
              v107 = 1.0;
          }
        }
        v113 = *(unsigned int *)(a1 + 32);
        v7 = v143;
        if ((int)v113 >= 1)
        {
          v114 = 0;
          v115 = *(_QWORD *)(a1 + 24);
          v116 = v115;
          do
          {
            if (!*(_DWORD *)(v115 + 1528 * v114 + 1480))
            {
              v117 = *(unsigned int *)(v115 + 1528 * v114 + 40);
              if ((int)v117 >= 1)
              {
                v118 = v116;
                do
                {
                  *(float *)(v118 + 144) = (float)((float)(1.0 - v107) * *(float *)(v118 + 544))
                                         + (float)(*(float *)(v118 + 144) * v107);
                  v118 += 4;
                  --v117;
                }
                while (v117);
              }
            }
            ++v114;
            v116 += 1528;
          }
          while (v114 != v113);
        }
        if ((*(_DWORD *)(a3 + 8968) - 7) >= 5 && !*(_DWORD *)(a3 + 8328))
        {
          if ((int)v113 >= 1)
          {
            v119 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_DWORD *)(v119 + 16) = *(_DWORD *)(v119 + 1480) == 0;
              v119 += 1528;
              --v113;
            }
            while (v113);
          }
          UpdateStreamDurations((uint64_t *)a1, a2);
          v120 = FetchAndFillInTemplateParameters((unsigned __int8 *)a2, a3, a1, 1);
          if ((v120 & 0x80000000) != 0)
            return v120;
        }
        FreeRemainingStreams(a1);
        if (*(int *)(a1 + 32) >= 1)
        {
          v121 = 0;
          v122 = 24;
          do
          {
            BET3FLT__FreePStreamParam((_QWORD *)(*(_QWORD *)(a1 + 24) + v122));
            ++v121;
            v122 += 1528;
          }
          while (v121 < *(int *)(a1 + 32));
        }
        v120 = ParamGenLT_1(a1, a2, 1u);
        if ((v120 & 0x80000000) != 0)
          return v120;
        if ((*(_DWORD *)(a3 + 8968) - 7) < 5 || *(_DWORD *)(a3 + 8328))
          goto LABEL_29;
        v120 = FetchAndFillInTemplateParameters((unsigned __int8 *)a2, a3, a1, 0);
        if ((v120 & 0x80000000) != 0)
          return v120;
        if (*(int *)(a1 + 32) >= 1)
        {
          v123 = 0;
          v124 = *(_QWORD *)(a1 + 24);
          v125 = 1480;
          do
          {
            if (!*(_DWORD *)(v124 + v125))
            {
              v126 = v125 == 3008 ? v124 + 1552 : v124 + v125 - 1456;
              mlpg_cpy(v126);
              v124 = *(_QWORD *)(a1 + 24);
              v127 = *(_QWORD *)(v124 + v125 - 1344);
              if (v127)
              {
                heap_Free(*(_QWORD **)(v143 + 8), v127);
                v124 = *(_QWORD *)(a1 + 24);
                *(_QWORD *)(v124 + v125 - 1344) = 0;
              }
            }
            ++v123;
            v125 += 1528;
          }
          while (v123 < *(int *)(a1 + 32));
        }
      }
LABEL_29:
      v26 = *(float *)(a3 + 8840);
      v27 = *(_QWORD *)(a1 + 24);
      if (v26 != 1.0)
      {
        v28 = *(unsigned int *)(v27 + 1572);
        v29 = v26 == 0.0 || (int)v28 < 1;
        if (!v29)
        {
          v30 = 0;
          v31 = *(_QWORD *)(v27 + 1592);
          v32 = *(unsigned int *)(v27 + 1568);
          v33 = (float)(v32 - 1);
          v34 = 0.0;
          v35 = 0.0;
          v36 = 0.0;
          v37 = 0.0;
          do
          {
            if ((int)v32 >= 2)
            {
              for (i = 1; i != v32; ++i)
              {
                v37 = v37 + (float)(int)i;
                v39 = *(float *)(*(_QWORD *)(v31 + 8 * v30) + 4 * i);
                v36 = v36 + v39;
                v35 = v35 + (float)(i * i);
                v34 = v34 + (float)((float)(int)i * v39);
              }
            }
            if ((int)v32 >= 2)
            {
              v41 = *(_QWORD *)(v31 + 8 * v30);
              for (j = 1; j != v32; ++j)
              {
                v40 = (float)((float)(v33 * v34) - (float)(v37 * v36))
                    / (float)((float)(v33 * v35) - (float)(v37 * v37));
                *(float *)(v41 + 4 * j) = (float)((float)((float)(v36 - (float)(v40 * v37)) / v33)
                                                + (float)((float)(int)j * v40))
                                        + (float)(v26
                                                * (float)(*(float *)(v41 + 4 * j)
                                                        - (float)((float)((float)(v36 - (float)(v40 * v37)) / v33)
                                                                + (float)((float)(int)j * v40))));
              }
            }
            ++v30;
          }
          while (v30 != v28);
        }
      }
      v43 = *(float *)(a3 + 8844);
      v44 = *(_QWORD *)(v27 + 3120);
      v45 = *(unsigned int *)(v27 + 3100);
      if ((_DWORD)v45)
      {
        if (v43 != 1.0 && v43 != 0.0)
        {
          v46 = (float)(int)v45;
          v47 = 1.0 / (float)(int)v45;
          if ((int)v45 >= 1)
          {
            v48 = 0;
            v49 = 0.0;
            v50 = 0.0;
            v51 = 0.0;
            v52 = 0.0;
            do
            {
              v52 = v52 + (float)(int)v48;
              v53 = **(float **)(v44 + 8 * v48);
              v51 = v51 + v53;
              v50 = v50 + (float)(v48 * v48);
              v49 = v49 + (float)((float)(int)v48++ * v53);
            }
            while (v45 != v48);
            v54 = 1;
LABEL_162:
            if (v54)
            {
              v128 = 0;
              v129 = (float)((float)(v46 * v49) - (float)(v52 * v51)) / (float)((float)(v46 * v50) - (float)(v52 * v52));
              v130 = v47 * (float)(v51 - (float)(v129 * v52));
              do
              {
                **(float **)(v44 + 8 * v128) = (float)(v130 + (float)((float)(int)v128 * v129))
                                             + (float)(v43
                                                     * (float)(**(float **)(v44 + 8 * v128)
                                                             - (float)(v130 + (float)((float)(int)v128 * v129))));
                ++v128;
              }
              while (v45 != v128);
            }
            goto LABEL_165;
          }
          v54 = 0;
LABEL_161:
          v52 = 0.0;
          v51 = 0.0;
          v50 = 0.0;
          v49 = 0.0;
          goto LABEL_162;
        }
      }
      else if (v43 != 1.0 && v43 != 0.0)
      {
        v54 = 0;
        v46 = 0.0;
        v47 = 3.4028e38;
        goto LABEL_161;
      }
LABEL_165:
      FreeRemainingStreams(a1);
      if (*(_QWORD *)(a1 + 2224)
        || (v131 = *(_QWORD *)a1,
            MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"  -> GetParametricSegments\n"),
            v132 = *(_DWORD *)(a1 + 608),
            v132 < 1))
      {
LABEL_93:
        v12 = mfs_SegmentList_Merge((uint64_t *)(a1 + 2248), a1 + 2208, *(_DWORD *)(a3 + 25184), (uint64_t)a2, *(_QWORD *)(a1 + 1928));
        if ((v12 & 0x80000000) == 0)
          MFS__log_select_Diag(v7, 1, (uint64_t)"}\n");
        return v12;
      }
      v133 = 0;
      v134 = 0;
      v12 = 0;
      LODWORD(v135) = *a2;
      v144 = v7;
      do
      {
        if ((int)v135 >= 1)
        {
          v136 = (_QWORD *)(*(_QWORD *)(a1 + 600) + 528 * v133 + 16);
          v137 = 2;
          while (1)
          {
            MFS__log_select_Diag(v131, 5, (uint64_t)"Adding parametric segment %d (uttph%d,st%d) unitid %d  offset %d  dur %d\n");
            v12 = mfs_SegmentList_Add(a1 + 2208, -1, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + v133), v134, *(_DWORD *)(a3 + 24) * *(_DWORD *)(*v136 + 4 * v137));
            if ((v12 & 0x80000000) != 0)
              return v12;
            v134 += *(_DWORD *)(a3 + 24) * *(_DWORD *)(*v136 + 4 * v137);
            v135 = *a2;
            v29 = v137++ <= v135;
            if (!v29)
            {
              v132 = *(_DWORD *)(a1 + 608);
              v7 = v144;
              break;
            }
          }
        }
        ++v133;
      }
      while (v133 < v132);
      if ((v12 & 0x80000000) == 0)
        goto LABEL_93;
    }
  }
  return v12;
}

uint64_t BackupDurations(uint64_t result, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(unsigned int *)(result + 608);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 600);
    v5 = *a2;
    do
    {
      if ((v5 - 1) <= 0xFFFFFFFC)
      {
        v6 = v4 + 528 * v3;
        v7 = *(_QWORD *)(v6 + 16);
        v8 = *(_QWORD *)(v6 + 328);
        v9 = 2;
        do
        {
          *(_DWORD *)(v8 + 4 * v9) = *(_DWORD *)(v7 + 4 * v9);
          ++v9;
          v5 = *a2;
        }
        while (v9 < (*a2 + 2));
        v2 = *(unsigned int *)(result + 608);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t UpdateStreamDurations(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  BOOL v21;

  v4 = *a1;
  heap_Free(*(_QWORD **)(*a1 + 8), a1[6]);
  a1[6] = 0;
  heap_Free(*(_QWORD **)(v4 + 8), a1[5]);
  a1[5] = 0;
  result = heap_Calloc(*(_QWORD **)(v4 + 8), (*((_DWORD *)a1 + 156) + 1), 1);
  a1[6] = result;
  if (result)
  {
    result = heap_Calloc(*(_QWORD **)(v4 + 8), (*((_DWORD *)a1 + 156) + 1), 4);
    a1[5] = result;
    if (result)
    {
      v6 = *((unsigned int *)a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = (_DWORD *)(a1[3] + 44);
        do
        {
          if (*(v7 - 7))
            *v7 = 0;
          v7 += 382;
          --v6;
        }
        while (v6);
      }
      v8 = *((_DWORD *)a1 + 152);
      if (v8 >= 1)
      {
        v9 = 0;
        LODWORD(v10) = 0;
        v11 = *a2;
        do
        {
          if (v11 >= 1)
          {
            v12 = a1[75] + 528 * v9;
            v15 = *(_QWORD *)(v12 + 16);
            v13 = (uint64_t *)(v12 + 16);
            v14 = v15;
            v16 = v13 + 37;
            v17 = 2;
            do
            {
              result = *(unsigned int *)(v14 + 4 * v17);
              if ((int)result >= 1)
              {
                v10 = (int)v10;
                v18 = 1;
                do
                {
                  *(_BYTE *)(a1[6] + v10) = *(_BYTE *)(*v16 + v17);
                  *(_DWORD *)(a1[5] + 4 * v10) = *(_DWORD *)(v13[38] + 4 * v17);
                  v19 = *((unsigned int *)a1 + 8);
                  if ((int)v19 >= 1)
                  {
                    v20 = (_DWORD *)a1[3];
                    do
                    {
                      if (v20[4]
                        && (!v20[372] || ((1 << v20[3]) & (unint64_t)*(unsigned __int8 *)(*v16 + v17)) >> v20[3]))
                      {
                        ++v20[11];
                      }
                      v20 += 382;
                      --v19;
                    }
                    while (v19);
                  }
                  ++v10;
                  result = (v18 + 1);
                  v14 = *v13;
                  v21 = v18++ < *(_DWORD *)(*v13 + 4 * v17);
                }
                while (v21);
                v11 = *a2;
              }
              v21 = v17++ <= v11;
            }
            while (v21);
            v8 = *((_DWORD *)a1 + 152);
          }
          ++v9;
        }
        while (v9 < v8);
      }
    }
  }
  return result;
}

uint64_t FetchAndFillInTemplateParameters(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int TemplateId;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  _QWORD *v46;
  int *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  _QWORD *v61;
  float *v62;
  float v63;
  int v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  _QWORD *v92;
  _QWORD v93[2];
  int v94;
  _OWORD v95[5];
  _OWORD v96[5];
  _OWORD v97[5];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 1928);
  v94 = 0;
  memset(v96, 0, sizeof(v96));
  memset(v95, 0, sizeof(v95));
  MFS__log_select_Diag(v8, 1, (uint64_t)"  -> FetchAndFillInTemplateParameters\n");
  if (*(_DWORD *)(a2 + 8328))
    return 2229280769;
  v10 = a2;
  v90 = a1;
  memset(v97, 0, sizeof(v97));
  v11 = *(unsigned int *)(a3 + 32);
  v86 = a2;
  if ((int)v11 >= 1)
  {
    bzero(v96, 8 * v11);
    bzero(v95, 8 * v11);
    v10 = a2;
    v12 = 0;
    v13 = a2 + 264;
    v14 = 1480;
    do
    {
      v15 = *(_QWORD *)(a3 + 24);
      if (!*(_DWORD *)(v15 + v14))
      {
        if (a4 == 1)
        {
          v16 = v15 + v14 - 936;
          *(_QWORD *)(v16 + 192) = 0;
          *(_OWORD *)(v16 + 160) = 0u;
          *(_OWORD *)(v16 + 176) = 0u;
          *(_OWORD *)(v16 + 128) = 0u;
          *(_OWORD *)(v16 + 144) = 0u;
          *(_OWORD *)(v16 + 96) = 0u;
          *(_OWORD *)(v16 + 112) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          *(_OWORD *)(v16 + 80) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)v16 = 0u;
          *(_OWORD *)(v16 + 16) = 0u;
          v17 = (unsigned int *)(v15 + v14 - 1436);
          *((_QWORD *)v96 + v12) = BET3FLT__ddcalloc(*(_QWORD **)(v8 + 8), *v17, *(_DWORD *)(v13 + 4 * v12));
          v18 = BET3FLT__ddcalloc(*(_QWORD **)(v8 + 8), *v17, *(_DWORD *)(v13 + 4 * v12));
          v10 = a2;
          *((_QWORD *)v95 + v12) = v18;
        }
        v19 = v15 + v14;
        v20 = (uint64_t *)(v19 - 1344);
        v21 = *(_QWORD *)(v19 - 1344);
        if (v21)
        {
          heap_Free(*(_QWORD **)(v8 + 8), v21);
          v10 = a2;
          *v20 = 0;
        }
        v22 = (_DWORD *)(v19 - 1436);
        v23 = *v22;
        if ((int)v23 >= 1)
        {
          v24 = heap_Calloc(*(_QWORD **)(v8 + 8), v23, 1);
          v10 = a2;
          *v20 = v24;
        }
        *v22 = 0;
        LODWORD(v11) = *(_DWORD *)(a3 + 32);
      }
      ++v12;
      v14 += 1528;
    }
    while (v12 < (int)v11);
  }
  v84 = v8;
  v25 = *(_DWORD *)(a3 + 608);
  if (v25 < 1)
  {
    v83 = 0;
  }
  else
  {
    v26 = 0;
    v83 = 0;
    v27 = 0;
    LODWORD(v28) = *(_DWORD *)v90;
    do
    {
      if ((int)v28 >= 1)
      {
        v82 = v26;
        v29 = *(_QWORD *)(a3 + 600) + 528 * v26;
        v87 = (_QWORD *)(v29 + 16);
        v88 = v29;
        v30 = (_QWORD *)(v29 + 312);
        v31 = 2;
        do
        {
          v91 = v27;
          TemplateId = mfs_UnitSequence_GetTemplateId(a3 + 2112, v27);
          if (TemplateId
            && (v93[0] = 0,
                v93[1] = 0,
                v92 = v93,
                v89 = TemplateId,
                mfs_getUnitDataFromMfsData(v90, TemplateId, (uint64_t *)&v92),
                *(_DWORD *)(*v87 + 4 * v31) == *((unsigned __int16 *)v92 + 4)))
          {
            result = mfs_ParamMap_MapSection(v8, (uint64_t)v90, a3, v89, (uint64_t)v92, (uint64_t)v97, (uint64_t)&v94, v33);
            if ((result & 0x80000000) != 0)
              return result;
            v83 = result;
            v85 = *(_QWORD *)a3;
            mfs_GetMsgName((uint64_t)v90, v89);
            MFS__log_select_Diag(v85, 3, (uint64_t)"%d mapping %s msg, offset %u dur %hu %d\n");
            v34 = v94;
            if (v94 >= 1)
            {
              v35 = 0;
              LODWORD(v36) = *(_DWORD *)(a3 + 32);
              do
              {
                if ((int)v36 >= 1)
                {
                  v37 = 0;
                  v38 = 544;
                  do
                  {
                    v39 = *(_QWORD *)(a3 + 24);
                    if (*(_DWORD *)(v39 + 1528 * v37 + 1484))
                    {
                      v40 = v86 + 4 * v37;
                      v41 = *(_DWORD *)(v40 + 264);
                      v42 = *(_QWORD *)(a3 + 24);
                      if (v41 >= 1)
                      {
                        v43 = 0;
                        v44 = (int *)(v40 + 264);
                        v45 = v39 + 1528 * v37;
                        v46 = (_QWORD *)(v45 + 96);
                        v47 = (int *)(v45 + 44);
                        v48 = (_QWORD *)(v45 + 64);
                        v49 = (_QWORD *)(v45 + 104);
                        v50 = (_QWORD *)(v45 + 136);
                        v51 = 4 * v35 * v41;
                        do
                        {
                          if (a4 == 1)
                          {
                            v52 = *(float *)(*((_QWORD *)v97 + v37) + v51 + 4 * v43);
                            v53 = *v47;
                            *(float *)(*(_QWORD *)(*((_QWORD *)v95 + v37) + 8 * v53) + 4 * v43) = v52;
                            *(float *)(v39 + v38 + 4 * v43) = v52 + *(float *)(v39 + v38 + 4 * v43);
                            *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v96 + v37) + 8 * v53) + 4 * v43) = 1065353216;
                          }
                          else
                          {
                            v54 = *v47;
                            v55 = *(_QWORD *)(*v46 + 8 * v54);
                            *(_DWORD *)(v55 + 4 * v43) = 0;
                            v56 = *(float *)(*((_QWORD *)v97 + v37) + v51 + 4 * v43) + 0.0;
                            *(float *)(v55 + 4 * v43) = v56;
                            *(float *)(v55 + 4 * v43) = v56
                                                      + (float)(*(float *)(*(_QWORD *)(*v48 + 8 * v54) + 4 * v43) * 0.0);
                            *(float *)(*(_QWORD *)(*v49 + 8 * v54) + 4 * v43) = *(float *)(*(_QWORD *)(*v49 + 8 * v54)
                                                                                         + 4 * v43)
                                                                              * 100000.0;
                            *(_BYTE *)(*v50 + v54) = 1;
                            v41 = *v44;
                          }
                          ++v43;
                        }
                        while (v43 < v41);
                        v42 = *(_QWORD *)(a3 + 24);
                      }
                      ++*(_DWORD *)(v39 + 1528 * v37 + 44);
                    }
                    else
                    {
                      v42 = *(_QWORD *)(a3 + 24);
                    }
                    if (*(_DWORD *)(v42 + 1528 * v37 + 1488)
                      && ((1 << v37) & (unint64_t)*(unsigned __int8 *)(*v30 + v31)) >> v37)
                    {
                      v57 = *(int *)(v86 + 4 * v37 + 264) * (uint64_t)v35;
                      v58 = *((_QWORD *)v97 + v37);
                      v59 = *(float *)(v58 + 4 * v57);
                      if (v59 != -1.0e10)
                      {
                        v60 = *(int *)(v39 + 1528 * v37 + 44);
                        if (a4 == 1)
                        {
                          **(float **)(*((_QWORD *)v95 + v37) + 8 * v60) = v59;
                          *(float *)(v39 + 1528 * v37 + 544) = v59 + *(float *)(v39 + 1528 * v37 + 544);
                          **(_DWORD **)(*((_QWORD *)v96 + v37) + 8 * v60) = 1065353216;
                        }
                        else
                        {
                          v61 = (_QWORD *)(v39 + 1528 * v37);
                          v62 = *(float **)(v61[12] + 8 * v60);
                          *v62 = 0.0;
                          v63 = (float)(**(float **)(v61[8] + 8 * v60) * 0.0) + 0.0;
                          *v62 = v63;
                          *v62 = v63 + *(float *)(v58 + 4 * v57);
                          *(_BYTE *)(v61[17] + v60) = 1;
                        }
                      }
                      ++*(_DWORD *)(v39 + 1528 * v37 + 44);
                    }
                    ++v37;
                    v36 = *(int *)(a3 + 32);
                    v38 += 1528;
                  }
                  while (v37 < v36);
                  v34 = v94;
                }
                ++v35;
              }
              while (v35 < v34);
            }
            mfs_ParamMap_UnMapSection(a3);
          }
          else
          {
            FillInDuration(a3, v88, v31);
          }
          v27 = v91 + 1;
          v28 = *(int *)v90;
        }
        while (v31++ <= v28);
        v25 = *(_DWORD *)(a3 + 608);
        v10 = v86;
        v26 = v82;
      }
      ++v26;
    }
    while (v26 < v25);
  }
  if (a4 == 1)
  {
    v65 = *(_DWORD *)(a3 + 32);
    if (v65 >= 1)
    {
      for (i = 0; i < v65; ++i)
      {
        v67 = *(_QWORD *)(a3 + 24);
        if (!*(_DWORD *)(v67 + 1528 * i + 1480))
        {
          v68 = v10 + 4 * i;
          if (*(int *)(v68 + 264) >= 1)
          {
            v69 = 0;
            v70 = (int *)(v68 + 264);
            v71 = (int *)(v67 + 1528 * i + 44);
            do
            {
              v94 = 0;
              v72 = *v71;
              if (*v71 < 1)
              {
                v77 = 0.0;
              }
              else
              {
                v73 = 0;
                v74 = 0;
                v75 = *((_QWORD *)v96 + i);
                do
                {
                  if (*(float *)(*(_QWORD *)(v75 + 8 * v74) + 4 * v69) == 1.0)
                  {
                    v94 = ++v73;
                    v72 = *v71;
                  }
                  ++v74;
                }
                while (v74 < v72);
                if (v73)
                {
                  *(float *)(v67 + 1528 * i + 4 * v69 + 544) = *(float *)(v67 + 1528 * i + 4 * v69 + 544) / (float)v73;
                  v76 = v73;
                }
                else
                {
                  v76 = 0;
                }
                if (v72 < 1)
                {
                  v77 = 0.0;
                  if (!v73)
                    goto LABEL_74;
                }
                else
                {
                  v78 = 0;
                  v79 = 8 * v72;
                  v77 = 0.0;
                  do
                  {
                    if (*(float *)(*(_QWORD *)(*((_QWORD *)v96 + i) + v78) + 4 * v69) == 1.0)
                    {
                      v80 = *(float *)(*(_QWORD *)(*((_QWORD *)v95 + i) + v78) + 4 * v69)
                          - *(float *)(v67 + 1528 * i + 4 * v69 + 544);
                      v77 = v77 + (float)(v80 * v80);
                    }
                    v78 += 8;
                  }
                  while (v79 != v78);
                  if (!v73)
                    goto LABEL_74;
                }
                v77 = v77 / (float)v76;
              }
LABEL_74:
              v81 = v67 + 1528 * i + 4 * v69;
              *(float *)(v81 + 544) = v77;
              MFS__log_select_Diag(*(_QWORD *)a3, 2, (uint64_t)"Mod(%d) dim(%d) frames(%d) gv_m(%f) <- gv_t(%f)\n");
              *(_DWORD *)(v81 + 144) = *(_DWORD *)(v81 + 544);
              *(float *)(v81 + 344) = *(float *)(v81 + 344) * 0.001;
              ++v69;
            }
            while (v69 < *v70);
          }
          BET3FLT__dd_free(*(_QWORD **)(v84 + 8), *((uint64_t **)v96 + i));
          BET3FLT__dd_free(*(_QWORD **)(v84 + 8), *((uint64_t **)v95 + i));
          v65 = *(_DWORD *)(a3 + 32);
          v10 = v86;
        }
      }
    }
  }
  return v83;
}

uint64_t FreeRemainingStreams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"--- FreeRemainingStreams -\n");
  if (*(int *)(a1 + 32) >= 1)
  {
    v2 = 0;
    v3 = 24;
    do
    {
      BET3FLT__FreePStreamSM(*(_QWORD *)(a1 + 24) + v3);
      ++v2;
      v3 += 1528;
    }
    while (v2 < *(int *)(a1 + 32));
  }
  return MFS__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"--- FreeRemainingStreams +\n");
}

uint64_t FillInDuration(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *(unsigned int *)(result + 32);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_DWORD **)(result + 24);
    do
    {
      if (v5[371]
        || v5[372] && ((1 << v4) & (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2 + 312) + a3)) >> v4)
      {
        v5[11] += *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * a3);
      }
      ++v4;
      v5 += 382;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t MFS__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int16 v30;

  v8 = a1;
  v30 = 0;
  v9 = *a4;
  if (a4[4] - v9 >= 8 && *(_BYTE *)(*((_QWORD *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    v12 = a3;
    v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      v14 = BET3FLT__xfread2ptr_BET3((_QWORD *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if ((*a4 & 1) != 0)
          ++*a4;
        v15 = heap_Calloc(*(_QWORD **)(v8 + 8), 16, (unsigned __int16)*v13);
        v21 = a2 + 8 * v12;
        *(_QWORD *)(v21 + 104) = v15;
        v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          MFS__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13)
          return 0;
        v23 = 0;
        v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1)
            break;
          v25 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2))
            break;
          v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13)
            return v26;
        }
        v26 = 2229280772;
        v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        v28 = 55015;
      }
      else
      {
        v26 = 2229280772;
        v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        v28 = 55013;
      }
    }
    else
    {
      v26 = 2229280772;
      v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      v28 = 55012;
    }
  }
  else
  {
    v26 = 2229280772;
    v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    v28 = 55011;
  }
  MFS__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t MFS__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;

  LOWORD(v5) = 0;
  v6 = a3 + 8 * a4;
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 16 * a5 + 8);
  v9 = a2 + 2;
  v10 = a2 + 1;
  while (2)
  {
    v11 = -(uint64_t)(__int16)v5;
    v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    v13 = (unsigned __int8 *)(v7 + *v12);
    v14 = *v13;
    v15 = v13[1];
    v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2)
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + (a2 - 2));
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1)
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + (a2 - 1));
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10))
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v10);
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          v16 = -1;
          if (v13[1])
            goto LABEL_24;
        }
        else
        {
          v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v9);
          if (v13[1])
            goto LABEL_24;
        }
        goto LABEL_39;
      default:
        if ((_DWORD)v14 == 3)
        {
          v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1784) + 2 * a2);
          v18 = v17 > 0x19;
          v16 = 10 * v17;
          if (v18)
            v16 = -1;
          if (!v13[1])
            goto LABEL_39;
        }
        else
        {
          v19 = *(_QWORD *)(a1 + 8 * v14 + 16);
          if (!v19)
            goto LABEL_39;
          v16 = *(_BYTE *)(v19 + a2);
          if (!v13[1])
            goto LABEL_39;
        }
LABEL_24:
        v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v20[1] >= v16)
            goto LABEL_30;
        }
        else
        {
          v21 = v15 - 1;
          if (v21)
          {
            v22 = 0;
            while (1)
            {
              v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22))
                ++v23;
              v24 = v23 >> 1;
              v25 = v20[v24];
              if (v25 == v16)
                break;
              if (v16 < v25)
                v21 = v24 - 1;
              else
                v22 = v24 + 1;
              if (v22 > v21)
                goto LABEL_39;
            }
LABEL_30:
            v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16)
            goto LABEL_30;
        }
LABEL_39:
        if ((v5 & 0x8000) != 0)
          continue;
        return v5;
    }
  }
}

uint64_t mlpg_cpy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        v4 = 0;
        v5 = *(_QWORD *)(result + 112);
        do
        {
          if (v5)
          {
            if (*(_BYTE *)(v5 + v4) == 1)
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8 * v4) + 4 * v2) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 72) + 8 * v4)
                                                                                               + 4 * v2);
          }
          ++v4;
        }
        while (v3 != v4);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

float mlpg(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t i;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  float v31;
  float *v32;
  float v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float **v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float **v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float v52;
  float *v53;
  uint64_t j;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float **v68;

  v4 = *(unsigned int *)(a1 + 20);
  if ((int)v4 <= 0)
  {
    v9 = *(float ***)(a1 + 96);
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v5 = 0;
    v6 = a2;
    v8 = *(_QWORD *)(a1 + 72);
    v7 = *(_QWORD *)(a1 + 80);
    v9 = *(float ***)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 104);
    v11 = *(unsigned int *)(a1 + 24);
    v12 = *(unsigned int **)(a1 + 32);
    v13 = *v12;
    v66 = v13;
    v67 = a2;
    v68 = v9;
    do
    {
      v14 = *(_QWORD *)(v7 + 8 * v5);
      *(float *)(v10 + 4 * v5) = *(float *)(v14 + 4 * v6) * *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v6);
      v15 = v9[v5];
      *v15 = *(float *)(v14 + 4 * v6);
      if ((int)v11 >= 2)
      {
        bzero(v15 + 1, 4 * (v11 - 1));
        v13 = v66;
        v6 = v67;
        v9 = v68;
      }
      if ((int)v13 >= 2)
      {
        v16 = *((_QWORD *)v12 + 1);
        for (i = 1; i != v13; ++i)
        {
          v18 = *(int **)(v16 + 8 * i);
          v19 = *v18;
          v20 = v18[1];
          if ((int)v19 <= (int)v20)
          {
            v21 = -4 * v19;
            v22 = -v19;
            do
            {
              if (v19 + v5 < v4)
              {
                v23 = *(_QWORD *)(*((_QWORD *)v12 + 2) + 8 * i);
                v24 = *(float *)(v23 - 4 * v19);
                if (v24 != 0.0)
                {
                  v25 = a2 + *(_DWORD *)(a1 + 16) * i;
                  v26 = 8 * (v19 + v5);
                  v27 = v24 * *(float *)(*(_QWORD *)(v7 + v26) + 4 * v25);
                  *(float *)(v10 + 4 * v5) = *(float *)(v10 + 4 * v5)
                                           + (float)(v27 * *(float *)(*(_QWORD *)(v8 + v26) + 4 * v25));
                  if ((int)v11 >= 1)
                  {
                    v28 = 0;
                    v29 = v23 + v21;
                    do
                    {
                      v30 = v22 + v28 <= v20 && v28 < (uint64_t)(v4 - v5);
                      if (v30)
                      {
                        v31 = *(float *)(v29 + 4 * v28);
                        if (v31 != 0.0)
                          v15[v28] = v15[v28] + (float)(v27 * v31);
                      }
                      ++v28;
                    }
                    while (v11 != v28);
                  }
                }
              }
              ++v19;
              v21 -= 4;
              --v22;
            }
            while ((_DWORD)v20 + 1 != (_DWORD)v19);
          }
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  v32 = *v9;
  v33 = sqrtf(**v9);
  **v9 = v33;
  if ((int)v11 >= 2)
  {
    v34 = v11 - 1;
    v35 = v32 + 1;
    do
    {
      *v35 = *v35 / v33;
      ++v35;
      --v34;
    }
    while (v34);
  }
  if ((int)v4 <= 1)
  {
    v53 = *(float **)(a1 + 88);
    *v53 = **(float **)(a1 + 104) / v33;
  }
  else
  {
    v36 = 0;
    v37 = 1;
    v38 = v9;
    do
    {
      if ((int)v11 < 2)
      {
        *v9[v37] = sqrtf(*v9[v37]);
      }
      else
      {
        v39 = v36;
        v40 = 1;
        do
        {
          if ((v39 & 0x8000000000000000) == 0)
          {
            v41 = v9[v39][v40];
            *v9[v37] = *v9[v37] - (float)(v41 * v41);
          }
          ++v40;
          --v39;
        }
        while (v11 != v40);
        v42 = v9[v37];
        v43 = sqrtf(*v42);
        *v42 = v43;
        v44 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32);
        v45 = 1;
        do
        {
          v46 = v45 + 1;
          if ((int)v44 > 0)
          {
            v47 = v45;
            v48 = v38;
            v49 = v44;
            do
            {
              if (v45 != (_DWORD)v11 - 1)
                v42[v45] = v42[v45] - (float)((*v48)[v47] * (*v48)[v46]);
              --v47;
              --v48;
              --v49;
            }
            while (v49);
          }
          v42[v45] = v42[v45] / v43;
          ++v45;
        }
        while (v46 != v11);
      }
      ++v37;
      ++v36;
      ++v38;
    }
    while (v37 != v4);
    v50 = 0;
    v51 = *(float **)(a1 + 104);
    v52 = *v51 / *v32;
    v53 = *(float **)(a1 + 88);
    *v53 = v52;
    for (j = 1; j != v4; ++j)
    {
      v55 = 0.0;
      if ((int)v11 >= 2)
      {
        v56 = v50;
        v57 = 1;
        do
        {
          if ((v56 & 0x8000000000000000) == 0)
          {
            v58 = v9[v56][v57];
            if (v58 != 0.0)
              v55 = v55 + (float)(v58 * v53[v56]);
          }
          ++v57;
          --v56;
        }
        while (v11 != v57);
      }
      v53[j] = (float)(v51[j] - v55) / *v9[j];
      ++v50;
    }
  }
  result = v53[(int)v4 - 1] / *v9[(int)v4 - 1];
  v60 = *(_QWORD *)(a1 + 40);
  *(float *)(*(_QWORD *)(v60 + 8 * ((int)v4 - 1)) + 4 * a2) = result;
  if ((int)v4 >= 2)
  {
    v61 = (v4 - 2);
    v62 = v60 + 8 * v61;
    do
    {
      v63 = 0.0;
      if ((int)v11 >= 2)
      {
        v64 = 1;
        do
        {
          if (v61 + v64 < (uint64_t)v4)
          {
            v65 = v9[v61][v64];
            if (v65 != 0.0)
              v63 = v63 + (float)(v65 * *(float *)(*(_QWORD *)(v62 + 8 * v64) + 4 * a2));
          }
          ++v64;
        }
        while (v11 != v64);
      }
      result = (float)(v53[v61] - v63) / *v9[v61];
      *(float *)(*(_QWORD *)(v60 + 8 * v61) + 4 * a2) = result;
      v62 -= 8;
      v30 = v61-- <= 0;
    }
    while (!v30);
  }
  return result;
}

uint64_t dummy_solver(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        v4 = *(uint64_t **)(result + 40);
        v5 = v3;
        do
        {
          v6 = *v4++;
          *(_DWORD *)(v6 + 4 * v2) = 0;
          --v5;
        }
        while (v5);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

void mlpg_c(uint64_t a1, int a2)
{
  double v4;

  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

uint64_t MFS__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t inited;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  *a5 = 0;
  inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(v16 + 8), 1, 24);
    if (v9)
    {
      *v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t MFS__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6)
{
  char *__s1;

  __s1 = 0;
  bzero(a5, 0xE48uLL);
  *a5 = a2;
  if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)a5, a6);
}

uint64_t MFS__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int GenericFeatureLayers;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int Index;
  unsigned int v58;
  const char *v59;
  unsigned int v60;
  uint64_t j;
  const char *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t k;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  _DWORD *v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t result;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v108;
  uint64_t *v109;
  char v110;
  char v111;
  unsigned int v112[4];
  uint64_t v113;

  v14 = a1;
  v113 = *MEMORY[0x1E0C80C00];
  v15 = *a1;
  if (a11)
    v16 = a12 == 0;
  else
    v16 = 1;
  v17 = !v16;
  v106 = v17;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  v18 = 0;
  v19 = 0;
  v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(_BYTE *)(*(_QWORD *)a10 + 2748 + v18) == 1)
      ++v19;
    ++v18;
  }
  while (v18 != 218);
  v21 = heap_Calloc(*(_QWORD **)(v15 + 8), (v19 * v20), 1);
  if (!v21)
    goto LABEL_118;
  v26 = v21;
  v108 = a3;
  v109 = v14;
  for (i = 0; i != 218; ++i)
  {
    v28 = *(_QWORD *)a10;
    v29 = *(unsigned __int8 *)(*(_QWORD *)a10 + i + 2748);
    if (*(_BYTE *)(*(_QWORD *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        v30 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 2);
        *(_QWORD *)(a10 + 8 * i + 1760) = v30;
        if (!v30)
          goto LABEL_43;
      }
      else if (v29 == 1)
      {
        *(_QWORD *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            v31 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 9);
            *(_QWORD *)(a10 + 3560) = v31;
            if (!v31)
              goto LABEL_43;
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              v34 = heap_Calloc(*(_QWORD **)(v15 + 8), (v33 * v20), 4);
              *(_QWORD *)(a10 + 3568) = v34;
              if (!v34)
                goto LABEL_43;
            }
            continue;
          case '4':
            v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              v36 = heap_Calloc(*(_QWORD **)(v15 + 8), (v35 * v20), 4);
              *(_QWORD *)(a10 + 3576) = v36;
              if (!v36)
                goto LABEL_43;
            }
            continue;
          case '5':
            v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              v38 = heap_Calloc(*(_QWORD **)(v15 + 8), (v37 * v20), 4);
              *(_QWORD *)(a10 + 3584) = v38;
              if (!v38)
                goto LABEL_43;
            }
            continue;
          case '6':
            v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              v40 = heap_Calloc(*(_QWORD **)(v15 + 8), (v39 * v20), 4);
              *(_QWORD *)(a10 + 3592) = v40;
              if (!v40)
                goto LABEL_43;
            }
            continue;
          case '8':
            v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              v42 = heap_Calloc(*(_QWORD **)(v15 + 8), (v41 * v20), 1);
              *(_QWORD *)(a10 + 3600) = v42;
              if (!v42)
                goto LABEL_43;
            }
            continue;
          default:
            if ((_DWORD)i == 24)
            {
              v32 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 8);
              *(_QWORD *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                v43 = -2065686518;
                log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(_QWORD *)(*v14 + 32), (uint64_t)"SELECT_BET3", 55007, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  v44 = *(unsigned __int16 *)(*(_QWORD *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    v43 = -2065686513;
    goto LABEL_120;
  }
  v45 = (void *)heap_Calloc(*(_QWORD **)(v15 + 8), v44 * v20, 4);
  *(_QWORD *)(a10 + 3608) = v45;
  if (!v45)
  {
    v43 = -2065686518;
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v102);
    goto LABEL_120;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a10 + 3578) * (_DWORD)v20)
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(_QWORD *)a10 + 3578) * v20);
  GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*v14, (uint64_t)"SELECT_BET3", (_QWORD *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    v43 = GenericFeatureLayers;
    goto LABEL_120;
  }
  v43 = usextract_Process(*v14, (uint64_t)"SELECT_BET3", v14[2], a3, a4, a10, v51, v52);
  if ((v43 & 0x80000000) == 0)
  {
    v104 = a4;
    if (*(_QWORD *)(a10 + 3504))
    {
      v53 = *(_QWORD *)a10;
      v54 = **(const char ***)(*(_QWORD *)a10 + 3336);
      if (v54)
      {
        v55 = 0;
        v56 = 1;
        do
        {
          if (!strncmp(v54, "INNO_", 5uLL))
          {
            v58 = atoi(v54 + 5) + 79;
            if (v58 <= 0x5E)
              *(_QWORD *)(a10 + 8 * v58 + 16) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
          }
          else
          {
            Index = usextract_getIndex(*(const char ***)(*(_QWORD *)(v53 + 3344) + 8 * v55), "FEATIDX", (unint64_t)"");
            if (Index == -1)
            {
              v53 = *(_QWORD *)a10;
              v59 = *(const char **)(*(_QWORD *)(*(_QWORD *)a10 + 3336) + 8 * v55);
              if (!strcmp(v59, "POS"))
              {
                *(_QWORD *)(a10 + 504) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
              }
              else if (!strcmp(v59, "PHR"))
              {
                *(_QWORD *)(a10 + 512) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
              }
            }
            else
            {
              v53 = *(_QWORD *)a10;
              *(_QWORD *)(a10
                        + 8
                        * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a10 + 3352) + 8 * v55) + Index)
                        + 16) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
            }
          }
          v55 = v56;
          v54 = *(const char **)(*(_QWORD *)(v53 + 3336) + 8 * v56++);
        }
        while (v54);
      }
    }
    v103 = *(__int16 *)(a10 + 10);
    v60 = v103 & ~(v103 >> 31);
    if (BET3FLT__log_select_GetLogLevel(*(_QWORD *)(v15 + 32)) >= 6)
    {
      LH_itoa(0x4Eu, (char *)v112, 0xAu);
      for (j = 0; j != 218; ++j)
      {
        v62 = "application/x-realspeak-usplosives;version=4.0";
        switch((int)j)
        {
          case 2:
            v111 = 5;
            v110 = 0;
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v111,
              1u,
              0);
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              *(_QWORD *)(a10 + 8 * j + 16),
              v60,
              0);
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v110,
              1u,
              0);
            continue;
          case 3:
            v62 = "application/x-realspeak-usdurs;version=4.0";
            goto LABEL_71;
          case 4:
            goto LABEL_71;
          case 5:
            v62 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_71:
            v63 = *(unsigned __int8 *)(*(_QWORD *)a10 + j + 2748);
            if (v63 == 2)
            {
              log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(_QWORD *)(a10 + 8 * j + 1760), 2 * v60, 0);
            }
            else if (v63 == 1)
            {
              log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(_QWORD *)(a10 + 8 * j + 16), v60, 0);
            }
            break;
          default:
            continue;
        }
      }
    }
    v105 = v103 & ~(v103 >> 31);
    v64 = *(unsigned int *)(a10 + 3520);
    if ((_DWORD)v64)
    {
      v65 = 0;
      for (k = 0; k < v64; ++k)
      {
        if (*(_DWORD *)(*(_QWORD *)(a10 + 3512) + v65) == 25)
        {
          v112[0] = 0;
          paramc_ParamGetUInt(*(_QWORD *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
          v67 = *(_DWORD *)(*(_QWORD *)(a10 + 3512) + v65 + 24);
          *a9 = v67;
          v43 = paramc_ParamSetInt(*(_QWORD *)(v15 + 40), (uint64_t)"waitfactor", v67);
          if (v43 < 0)
          {
            log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v68, v69, v70, v71, "parameter");
            goto LABEL_134;
          }
          v64 = *(unsigned int *)(a10 + 3520);
        }
        v65 += 32;
      }
    }
    featextract_adjustSilAudioOrder(a10);
    a3 = v108;
    v14 = v109;
    LODWORD(v72) = v103 & ~(v103 >> 31);
    if (!v106 || (v73 = *(_DWORD *)(a10 + 3520), v74 = v73 + v105, *a12 = v74, !(v73 + v105)))
    {
LABEL_97:
      if (v103 < 1)
      {
        a4 = v104;
      }
      else
      {
        v90 = 0;
        v91 = (unsigned __int16)v72;
        if (v72 <= 1)
          v72 = 1;
        else
          v72 = v72;
        v92 = v91 - 1;
        v93 = a2;
        do
        {
          v94 = *(_QWORD *)(a10 + 248);
          if (!*(_BYTE *)(v94 + v90))
            *(_BYTE *)(v94 + v90) = -1;
          v95 = *(_QWORD *)(a10 + 192);
          if (*(_BYTE *)(*(_QWORD *)(a10 + 32) + v90) == 35)
            v96 = 1;
          else
            v96 = 2 * *(_BYTE *)(v95 + v90);
          *(_BYTE *)(v95 + v90) = v96;
          v97 = *(_QWORD *)(a10 + 32);
          if (v92 == v90 && *(_BYTE *)(v97 + v90) == 35)
          {
            v112[0] = 0;
            paramc_ParamGetUInt(*(_QWORD *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
            v98 = 0;
            v99 = *(_QWORD *)(a10 + 1784);
            if (v112[0] != 1)
              v98 = *(unsigned __int16 *)(v99 + 2 * v90) + 200 * *a9;
            if (v98 <= 1)
              v98 = 1;
            if (v98 >= 0xFFFF)
              LOWORD(v98) = -1;
            *(_WORD *)(v99 + 2 * v90) = v98;
            v97 = *(_QWORD *)(a10 + 32);
            v93 = a2;
          }
          *(_BYTE *)(v97 + v90) = *(_BYTE *)(v93 + *(unsigned __int8 *)(v97 + v90) + 7356);
          ++v90;
        }
        while (v72 != v90);
LABEL_134:
        a4 = v104;
LABEL_44:
        a3 = v108;
        v14 = v109;
      }
      goto LABEL_120;
    }
    v75 = heap_Calloc(*(_QWORD **)(v15 + 8), v74, 32);
    *a11 = v75;
    a4 = v104;
    if (v75)
    {
      v76 = (void *)heap_Calloc(*(_QWORD **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
      if (v76)
      {
        v77 = (uint64_t)v76;
        memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
        LODWORD(v72) = v103 & ~(v103 >> 31);
        if (*a12)
        {
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v81 = 0;
          while (v81 < *(unsigned int *)(a10 + 3520))
          {
            if (v80 >= v105)
            {
              v87 = (_OWORD *)(*a11 + v78);
              v88 = (_OWORD *)(*(_QWORD *)(a10 + 3512) + 32 * v81);
              v89 = v88[1];
              *v87 = *v88;
              v87[1] = v89;
              ++v81;
              goto LABEL_95;
            }
            v82 = v80;
            if (!*(_WORD *)(v77 + 2 * v80))
              goto LABEL_93;
            v83 = (_OWORD *)(*a11 + v78);
            v84 = (_OWORD *)(*(_QWORD *)(a10 + 3512) + 32 * v81);
            v85 = v84[1];
            *v83 = *v84;
            v83[1] = v85;
            ++v81;
            --*(_WORD *)(v77 + 2 * v80);
LABEL_95:
            ++v79;
            v78 += 32;
            if (v79 >= *a12)
              goto LABEL_96;
          }
          v82 = v80;
LABEL_93:
          v86 = (_DWORD *)(*a11 + v78);
          *v86 = 33;
          v86[6] = *(unsigned __int8 *)(*(_QWORD *)(a10 + 32) + v82);
          ++v80;
          goto LABEL_95;
        }
LABEL_96:
        heap_Free(*(_QWORD **)(v15 + 8), v77);
        goto LABEL_97;
      }
    }
LABEL_118:
    v43 = -2065686518;
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
  }
LABEL_120:
  if (a12 && a11 && v43 < 0 && *a11)
  {
    heap_Free(*(_QWORD **)(v15 + 8), *a11);
    *a11 = 0;
    *a12 = 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(v14[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1)
    return v43;
  else
    return result;
}

uint64_t MFS__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*a2)
    return 0;
  v4 = *a1;
  v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((_QWORD *)*a1, (uint64_t)"SELECT_BET3", a2);
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(_BYTE *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        v14 = a2[v10 + 220];
        if (v14)
LABEL_11:
          heap_Free(*(_QWORD **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          v13 = a2[v10 + 2];
          if (v13)
            heap_Free(*(_QWORD **)(v4 + 8), v13);
          v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            v14 = a2[445];
            if (v14)
              goto LABEL_11;
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            v14 = a2[446];
            if (v14)
              goto LABEL_11;
            break;
          case '4':
            v14 = a2[447];
            if (v14)
              goto LABEL_11;
            break;
          case '5':
            v14 = a2[448];
            if (v14)
              goto LABEL_11;
            break;
          case '6':
            v14 = a2[449];
            if (v14)
              goto LABEL_11;
            break;
          case '8':
            v14 = a2[450];
            if (v14)
              goto LABEL_11;
            break;
          default:
            if ((_DWORD)v10 == 24)
            {
              v14 = a2[444];
              if (v14)
                goto LABEL_11;
            }
            else
            {
LABEL_20:
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, "%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  v15 = a2[451];
  if (v15)
    heap_Free(*(_QWORD **)(v4 + 8), v15);
  *a2 = 0;
  return v5;
}

uint64_t MFS__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  int *v29;
  uint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  unsigned int *v47;
  int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v5 = a1;
  v6 = a3;
  if (a2[a3 + 84])
  {
    v7 = &a2[a3];
    v9 = v7[32];
    v8 = (int *)(v7 + 32);
    v10 = heap_Calloc(*(_QWORD **)(a1 + 8), v9, 8);
    *((_QWORD *)a2 + 21) = v10;
    if (!v10)
      return 2229280778;
    if (*v8 >= 1)
    {
      v11 = 0;
      v12 = 0;
      v13 = (int *)(a2 + 11);
      while (1)
      {
        v14 = (unsigned int *)(a4 + 24 * v11);
        if (BET3FLT__xfread_BET3(a2, 4u, 1, v14) != 1 || (*a2 & 0x80000000) != 0)
        {
          v67 = "LoadModelFile: the number of HMM states is illegal for %s %d\n";
          v68 = v5;
          v69 = 55020;
          goto LABEL_67;
        }
        if (BET3FLT__xfread_BET3(a2 + 11, 4u, 1, v14) != 1 || (v20 = *v13, *v13 < 0))
        {
          v67 = "LoadModelFile: the number of PDFs is illegal for %s %d\n";
          v68 = v5;
          v69 = 55021;
          goto LABEL_67;
        }
        if (!v12)
        {
          v21 = heap_Calloc(*(_QWORD **)(v5 + 8), (*v8 * v20), 8);
          if (!v21)
            return 2229280778;
          v12 = v21;
          v20 = *v13;
        }
        v22 = v6;
        *(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) = v12 + 8 * v20 * (int)v11;
        *(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) -= 8;
        if (v20 >= 1)
          break;
LABEL_16:
        ++v11;
        v6 = v22;
        if (v11 >= *v8)
          goto LABEL_17;
      }
      v23 = 0;
      v24 = *a2;
      v25 = 8;
      while (1)
      {
        v26 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) + v25), 4u, (2 * v24), v14);
        v24 = *a2;
        if (v26 != 2 * *a2)
          break;
        v27 = *(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) + 8 * v23;
        *(_QWORD *)(v27 + 8) -= 8;
        ++v23;
        v25 += 8;
        if (v23 >= (int)a2[11])
          goto LABEL_16;
      }
      v67 = "LoadModelFile: PDF read failed for %s %d\n";
      v68 = v5;
      v69 = 55022;
      goto LABEL_67;
    }
  }
LABEL_17:
  v28 = &a2[v6];
  if (v28[94])
  {
    v29 = (int *)(v28 + 32);
    v30 = heap_Calloc(*(_QWORD **)(v5 + 8), v28[32], 8);
    v31 = &a2[2 * v6];
    *((_QWORD *)v31 + 22) = v30;
    v32 = v31 + 44;
    v33 = 2229280778;
    if (!v30)
      return v33;
    v73 = heap_Calloc(*(_QWORD **)(v5 + 8), *a2 * *v29, 8);
    if (!v73)
      return v33;
    if (*v29 >= 1)
    {
      v34 = 0;
      v35 = &a2[v6 + 1];
      v36 = &a2[2 * v6 + 12];
      v71 = v5;
      v74 = v6;
      while (1)
      {
        v37 = (unsigned int *)(a4 + 24 * v34);
        if (BET3FLT__xfread_BET3(v35, 4u, 1, v37) != 1 || (*v35 & 0x80000000) != 0)
        {
          v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
          v68 = v5;
          v69 = 55023;
          goto LABEL_67;
        }
        v38 = BET3FLT__xfread2ptr_BET3(v36, 4u, *a2, v37);
        if (v38 != *a2)
        {
          v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
          v68 = v5;
          v69 = 55024;
          goto LABEL_67;
        }
        v39 = *(_QWORD *)v36;
        *(_QWORD *)v36 -= 8;
        if (v38 > 0)
          break;
        *(_QWORD *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
        *(_QWORD *)(*v32 + 8 * v34) -= 16;
LABEL_34:
        ++v34;
        v5 = v71;
        v6 = v74;
        if (v34 >= *v29)
          goto LABEL_35;
      }
      v40 = 0;
      do
      {
        if ((*(_DWORD *)(v39 + 4 * v40) & 0x80000000) != 0)
        {
          v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
          v68 = v5;
          v69 = 55025;
          goto LABEL_67;
        }
        ++v40;
      }
      while ((v38 + 2) - 2 != v40);
      *(_QWORD *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
      *(_QWORD *)(*v32 + 8 * v34) -= 16;
      v41 = *(_QWORD *)v36;
      v42 = *v35;
      v43 = 16;
      v44 = 2;
      while (1)
      {
        v45 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*(_QWORD *)(*v32 + 8 * v34) + v43), 4u, 2 * *(_DWORD *)(v41 + 4 * v44) * v42, v37);
        v41 = *(_QWORD *)v36;
        v42 = *v35;
        if (v45 != 2 * *(_DWORD *)(*(_QWORD *)v36 + 4 * v44) * *v35)
          break;
        v43 += 8;
        v46 = v44++ <= (int)*a2;
        if (!v46)
          goto LABEL_34;
      }
      v67 = "LoadModelFile: PDF read failed for %s %d\n";
      v68 = v71;
      v69 = 55026;
      goto LABEL_67;
    }
  }
LABEL_35:
  if (!v28[104])
    return 0;
  v47 = &a2[v6];
  v49 = v47[32];
  v48 = (int *)(v47 + 32);
  v50 = heap_Calloc(*(_QWORD **)(v5 + 8), v49, 8);
  v75 = v6;
  v51 = &a2[2 * v6];
  *((_QWORD *)v51 + 32) = v50;
  v33 = 2229280778;
  if (v50)
  {
    v52 = heap_Calloc(*(_QWORD **)(v5 + 8), *a2 * *v48, 8);
    if (v52)
    {
      if (*v48 >= 1)
      {
        v53 = v52;
        v54 = 0;
        v55 = v51 + 64;
        v56 = &a2[v75 + 1];
        v57 = &a2[2 * v75 + 12];
        v72 = v5;
        while (1)
        {
          v58 = (unsigned int *)(a4 + 24 * v54);
          if (BET3FLT__xfread_BET3(v56, 4u, 1, v58) != 1 || (*v56 & 0x80000000) != 0)
          {
            v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
            v68 = v5;
            v69 = 55027;
            goto LABEL_67;
          }
          v59 = BET3FLT__xfread2ptr_BET3(v57, 4u, *a2, v58);
          if (v59 != *a2)
          {
            v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
            v68 = v5;
            v69 = 55028;
            goto LABEL_67;
          }
          v60 = *(_QWORD *)v57;
          *(_QWORD *)v57 -= 8;
          if (v59 > 0)
            break;
          *(_QWORD *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
          *(_QWORD *)(*v55 + 8 * v54) -= 16;
LABEL_52:
          v33 = 0;
          ++v54;
          v5 = v72;
          if (v54 >= *v48)
            return v33;
        }
        v61 = 0;
        do
        {
          if ((*(_DWORD *)(v60 + 4 * v61) & 0x80000000) != 0)
          {
            v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
            v68 = v5;
            v69 = 55029;
            goto LABEL_67;
          }
          ++v61;
        }
        while ((v59 + 2) - 2 != v61);
        *(_QWORD *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
        *(_QWORD *)(*v55 + 8 * v54) -= 16;
        v62 = *(_QWORD *)v57;
        v63 = *v56;
        v64 = 16;
        v65 = 2;
        while (1)
        {
          v66 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*(_QWORD *)(*v55 + 8 * v54) + v64), 4u, 4 * *(_DWORD *)(v62 + 4 * v65) * v63, v58);
          v62 = *(_QWORD *)v57;
          v63 = *v56;
          if (v66 != 4 * *(_DWORD *)(*(_QWORD *)v57 + 4 * v65) * *v56)
            break;
          v64 += 8;
          v46 = v65++ <= (int)*a2;
          if (!v46)
            goto LABEL_52;
        }
        v67 = "LoadModelFile: PDF read failed for %s %d\n";
        v68 = v72;
        v69 = 55030;
LABEL_67:
        MFS__log_select_Error(v68, v69, (uint64_t)v67, v15, v16, v17, v18, v19);
        return 2229280772;
      }
      return 0;
    }
  }
  return v33;
}

uint64_t MFS__FindDurPDF_PerStateRho(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  double v20;
  float v21;
  float v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v6 = *(int *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  LODWORD(v7) = *a2;
  if (*a2 >= 1)
  {
    v13 = 0;
    v14 = a5;
    v15 = 0.0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v14) + 8 * v6);
      v17 = *(float *)(v16 + 4 * v13 + 8);
      v18 = *(float *)(a3 + 4 * v13);
      v19 = *(float *)(v16 + 4 * (v13 + (int)v7) + 8);
      if (a6)
        v19 = BET3FLT__bet3_finv(v19);
      v20 = sqrt(v19);
      v21 = v20;
      v22 = v17 + (float)(v18 * v21);
      if (v22 < 0.0)
        v22 = 0.0;
      if (a2[115])
      {
        if (v22 > 4000.0)
          v22 = 4000.0;
      }
      else if (v22 > 4000.0)
      {
        v22 = v15 * 0.5;
      }
      v23 = (int)((float)(v22 + (float)a4) + 0.5);
      v24 = *(_QWORD *)(a1 + 16) + 4 * v13;
      if (v23 <= 1)
        v23 = 1;
      *(_DWORD *)(v24 + 8) = v23;
      v25 = *(_DWORD *)(a1 + 28) + (int)(v20 + 0.5);
      *(_DWORD *)(a1 + 24) += v23;
      *(_DWORD *)(a1 + 28) = v25;
      a4 += (int)(float)(v22 - (float)*(int *)(v24 + 8));
      v7 = *a2;
      v26 = v13 + 2;
      ++v13;
      v15 = v22;
    }
    while (v26 <= v7);
  }
  return 0;
}

uint64_t MFS__FindLF0PDF_PerStateRho(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  float *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  double v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v8 = a4 + 4 * a1;
  v11 = *(_DWORD *)(v8 + 4);
  v10 = (int *)(v8 + 4);
  v9 = v11;
  if (v11 >= 1)
  {
    v14 = a2;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * a1 + 256) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(_QWORD *)(a3 + 8 * a1 + 72) + 4 * a2) - 4) * v9;
    v16 = a3 + 8 * a1;
    v17 = (_QWORD *)(v16 + 152);
    v18 = (_QWORD *)(v16 + 232);
    v19 = a5 + 4 * a1;
    v20 = a8;
    v21 = (float *)(v19 + 2104);
    v22 = (_DWORD *)(v19 + 224);
    v23 = 1;
    do
    {
      v24 = v15 + 4 * (4 * (int)v23 - 4);
      v25 = (float *)(*(_QWORD *)(*v17 + 8 * v14) + 4 * v23);
      *v25 = *(float *)v24;
      v26 = *(float *)(v24 + 4);
      *(float *)(*(_QWORD *)(*v18 + 8 * v14) + 4 * v23) = v26;
      if (a8 != 0.0)
      {
        if (a7)
        {
          v27 = sqrt(BET3FLT__bet3_finv(v26));
          v25 = (float *)(*(_QWORD *)(*v17 + 8 * v14) + 4 * v23);
        }
        else
        {
          v27 = sqrt(v26);
        }
        v28 = v27 * v20;
        *v25 = *v25 + v28;
      }
      if (v23 == 1)
      {
        *(_DWORD *)(*(_QWORD *)(a3 + 320) + 4 * v14) = *(_DWORD *)(v24 + 8);
        v29 = 1 << *v22;
        v30 = *(_QWORD *)(a3 + 312);
        if (*(float *)(v24 + 8) <= *v21)
          v31 = *(_BYTE *)(v30 + v14) & ~(_BYTE)v29;
        else
          v31 = *(_BYTE *)(v30 + v14) | v29;
        *(_BYTE *)(v30 + v14) = v31;
      }
    }
    while (v23++ < *v10);
  }
  return 0;
}

uint64_t MFS__InitUttModel(uint64_t a1, char *a2, int *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = 2229280778;
  bzero(a2, 0x240uLL);
  *(_QWORD *)a2 = a1;
  *((_QWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 138) = a4;
  *((_DWORD *)a2 + 141) = *a3 * a4;
  v9 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 528);
  *((_QWORD *)a2 + 68) = v9;
  if (v9)
  {
    v10 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
    *((_QWORD *)a2 + 4) = v10;
    if (v10)
    {
      v11 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
      *((_QWORD *)a2 + 43) = v11;
      if (v11)
      {
        v12 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 1);
        *((_QWORD *)a2 + 41) = v12;
        if (v12)
        {
          v13 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
          *((_QWORD *)a2 + 42) = v13;
          if (v13)
          {
            v14 = a3[114];
            if (v14 >= 1)
            {
              v15 = 0;
              v16 = a2 + 168;
              v17 = a3;
              do
              {
                if (!v17[84])
                {
                  v18 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
                  *(v16 - 10) = v18;
                  if (!v18)
                    return v8;
                  v19 = *(_QWORD **)(a1 + 8);
                  v20 = *((_DWORD *)a2 + 138);
                  v21 = v17[104]
                      ? BET3FLT__ddcalloc(v19, 2 * v20 * *a3, v17[1] + 1)
                      : (_QWORD *)heap_Calloc(v19, (2 * v20 * *a3), 8);
                  *v16 = v21;
                  if (!v21)
                    return v8;
                  v16[10] = &v21[*a3 * *((_DWORD *)a2 + 138)];
                  v14 = a3[114];
                }
                ++v15;
                ++v17;
                ++v16;
              }
              while (v15 < v14);
            }
            v22 = *((unsigned int *)a2 + 138);
            if ((int)v22 >= 1)
            {
              v23 = 0;
              v24 = *a3;
              v25 = 152;
              do
              {
                v26 = *((_QWORD *)a2 + 68);
                v27 = v26 + 528 * v23;
                *(_DWORD *)v27 = v23;
                v28 = v23 * v24;
                v29 = *((_QWORD *)a2 + 43) + 4 * v23 * v24;
                v30 = *((_QWORD *)a2 + 41) + v23 * v24;
                v31 = *((_QWORD *)a2 + 42) + 4 * v23 * v24;
                *(_QWORD *)(v27 + 16) = *((_QWORD *)a2 + 4) + 4 * v23 * v24 - 8;
                *(_QWORD *)(v27 + 312) = v30 - 2;
                *(_QWORD *)(v27 + 320) = v31 - 8;
                *(_QWORD *)(v27 + 328) = v29 - 8;
                if (v14 >= 1)
                {
                  v32 = (uint64_t *)(v26 + v25);
                  v33 = a2 + 168;
                  v34 = v14;
                  v35 = a3 + 84;
                  do
                  {
                    if (!*v35++)
                    {
                      v37 = *(v33 - 10) + 4 * v28;
                      *(v32 - 10) = v37;
                      v38 = *v33 + 8 * v28;
                      *v32 = v38;
                      v39 = v33[10] + 8 * v28;
                      *(v32 - 10) = v37 - 8;
                      *v32 = v38 - 16;
                      v32[10] = v39 - 16;
                    }
                    ++v32;
                    ++v33;
                    --v34;
                  }
                  while (v34);
                }
                ++v23;
                v25 += 528;
              }
              while (v23 != v22);
            }
            return 0;
          }
        }
      }
    }
  }
  return v8;
}

_QWORD *MFS__DeInitUttModel(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = result;
  if (*result && result[68])
  {
    v2 = result[1];
    v3 = result[4];
    if (v3)
    {
      heap_Free(*(_QWORD **)(*result + 8), v3);
      v1[4] = 0;
    }
    v4 = v1[43];
    if (v4)
    {
      heap_Free(*(_QWORD **)(*v1 + 8), v4);
      v1[43] = 0;
    }
    v5 = v1[41];
    if (v5)
    {
      heap_Free(*(_QWORD **)(*v1 + 8), v5);
      v1[41] = 0;
    }
    v6 = v1[42];
    if (v6)
    {
      heap_Free(*(_QWORD **)(*v1 + 8), v6);
      v1[42] = 0;
    }
    if (*(int *)(v2 + 456) >= 1)
    {
      v7 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 336 + 4 * v7))
        {
          v8 = &v1[v7];
          v9 = v8[11];
          if (v9)
          {
            heap_Free(*(_QWORD **)(*v1 + 8), v9);
            v8[11] = 0;
          }
          v10 = v8[21];
          if (v10)
          {
            heap_Free(*(_QWORD **)(*v1 + 8), v10);
            v8[21] = 0;
          }
        }
        ++v7;
      }
      while (v7 < *(int *)(v2 + 456));
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v1[68]);
  }
  v1[68] = 0;
  *((_DWORD *)v1 + 138) = 0;
  *v1 = 0;
  return result;
}

void MFS__mlpg2(uint64_t a1, int a2)
{
  double v4;

  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

uint64_t MFS__log_out_Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  char *v9;
  int v10;

  v9 = (char *)(a3 - 1);
  do
    v10 = *++v9;
  while (v10 == 10);
  return log_VOutEvent(*(uint64_t ***)(a1 + 32), a2, v9, &a9);
}

uint64_t MFS__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 - 1;
  do
    v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", (a2 + 2), 0, v3);
}

uint64_t MFS__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  return log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t MFS__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  unsigned int *v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int **v31;
  int *v32;
  int v33;
  int v34;

  v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5)
    return 0;
  v9 = 2229280778;
  v10 = BET3FLT__ddcalloc(*(_QWORD **)(a1 + 8), *v5, 2);
  v11 = a2 + 40 * a3;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (int ***)(v11 + 8);
  if (v10)
  {
    v13 = heap_Calloc(*(_QWORD **)(a1 + 8), *v5, 8);
    v14 = a2 + 40 * a3;
    *(_QWORD *)(v14 + 16) = v13;
    v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(_QWORD *)**v12 = 0;
      **v15 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4);
      v16 = (_DWORD *)**v15;
      if (v16)
      {
        *v16 = 1065353216;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            v30 = 0;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v31 = *v12;
            v17 = v17;
            do
            {
              v32 = *v31;
              v33 = **v31;
              if (v30 > v33)
              {
                *v28 = v33;
                v30 = v33;
              }
              v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        v18 = 1;
        v19 = 1;
        while (1)
        {
          v20 = BET3FLT__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20)
            break;
          (*v15)[v19] += 4 * (v20 >> 1);
          v26 = (*v12)[v19];
          *v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17)
            goto LABEL_9;
        }
        MFS__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

uint64_t MFS__LoadVData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t ModelFile;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  const char *v33;
  uint64_t v34;
  uint64_t v35;

  if (*(int *)(a2 + 456) < 1)
    return 0;
  v6 = 0;
  v7 = a2 + 464;
  v8 = a2 + 672;
  v9 = a3 + 2664;
  v10 = (unsigned int *)(a3 + 2424);
  do
  {
    ModelFile = MFS__LoadModelFile(a1, (unsigned int *)a2, v6, v9);
    if ((ModelFile & 0x80000000) != 0)
      return ModelFile;
    ModelFile = MFS__LoadTreesFile(a1, v7, v6, v10, a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0)
      return ModelFile;
    ModelFile = MFS__LoadDWinFile(a1, v8, v6, (unsigned int *)(v9 + 1200));
    if ((ModelFile & 0x80000000) != 0)
      return ModelFile;
    ++v6;
    v20 = *(int *)(a2 + 456);
    v9 += 120;
    v10 += 6;
  }
  while (v6 < v20);
  if ((int)v20 < 1)
    return 0;
  v21 = 0;
  while (1)
  {
    if (!*(_QWORD *)(a2 + 8 * v21 + 568))
    {
      v31 = 2229280775;
      v33 = "%s tree is required\n";
      v34 = a1;
      v35 = 55032;
      goto LABEL_37;
    }
    v22 = a2 + 4 * v21;
    if (*(_DWORD *)(v22 + 336) && !*(_QWORD *)(a2 + 168))
    {
LABEL_38:
      v31 = 2229280775;
      v33 = "%s PDF is required\n";
      v34 = a1;
      v35 = 55033;
      goto LABEL_37;
    }
    v23 = *(_DWORD *)(v22 + 376);
    if (v23)
    {
      if (!*(_QWORD *)(a2 + 8 * v21 + 176))
        goto LABEL_38;
      if (!*(_DWORD *)(a2 + 4 * v21 + 416))
      {
        v24 = 1;
        goto LABEL_19;
      }
    }
    else if (!*(_DWORD *)(a2 + 4 * v21 + 416))
    {
      goto LABEL_31;
    }
    if (!*(_QWORD *)(a2 + 8 * v21 + 256))
      goto LABEL_38;
    v24 = 0;
LABEL_19:
    v25 = *(unsigned int *)(a2 + 4 * v21 + 128);
    if ((int)v25 >= 1)
      break;
LABEL_26:
    if (v23)
      v30 = 0;
    else
      v30 = v24;
    if ((v30 & 1) == 0 && *(_DWORD *)(a2 + 4 * v21 + 4) % *(_DWORD *)(v8 + 40 * v21))
    {
      v31 = 2229280775;
      v33 = "The number of dynamic windows for %s is not correct %d %d\n";
      v34 = a1;
      v35 = 55035;
      goto LABEL_37;
    }
LABEL_31:
    v31 = 0;
    if (++v21 == *(_DWORD *)(a2 + 456))
      return v31;
  }
  v26 = 0;
  v27 = a2 + 8 * v21;
  v28 = (_QWORD *)(v27 + 176);
  v29 = (_QWORD *)(v27 + 256);
  while ((!v23 || *(_QWORD *)(*v28 + 8 * v26)) && ((v24 & 1) != 0 || *(_QWORD *)(*v29 + 8 * v26)))
  {
    if (v25 == ++v26)
      goto LABEL_26;
  }
  v31 = 2229280775;
  v33 = "%s PDF layer %d is required\n";
  v34 = a1;
  v35 = 55034;
LABEL_37:
  MFS__log_select_Error(v34, v35, (uint64_t)v33, v15, v16, v17, v18, v19);
  return v31;
}

uint64_t MFS__LoadVStream(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  const char *v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  int v44;
  uint64_t v46;
  const char *v47;
  uint64_t v49;

  if (*((int *)a1 + 8) < 1)
    return 0;
  v3 = a3;
  v4 = a2;
  v6 = 0;
  v7 = a2 + 672;
  v8 = a1[3];
  v49 = a2 + 672;
  while (1)
  {
    v9 = (_DWORD *)(v7 + 40 * v6);
    v10 = v8 + 1528 * v6;
    *(_QWORD *)(v10 + 56) = v9;
    v11 = *(_DWORD *)(v10 + 1484);
    if (v11)
      *(_QWORD *)(v8 + 1528 * v6 + 784) = v9;
    if (!*(_DWORD *)(v8 + 1528 * v6 + 1480))
      break;
    if (v11)
      goto LABEL_7;
LABEL_8:
    if (++v6 >= *((int *)a1 + 8))
      return 0;
  }
  v13 = v4 + 4 * v6;
  v14 = v8 + 1528 * v6;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v13 + 4);
  v15 = *(_DWORD *)(v13 + 4) / *v9;
  *(_DWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 1496) = *(_QWORD *)(v3 + 92);
  v16 = heap_Calloc(*(_QWORD **)(*a1 + 8), (2 * v15), 8);
  v17 = a1[3];
  *(_QWORD *)(v17 + 1528 * v6 + 1504) = v16;
  if (!v16)
    return 2229280778;
  v18 = v17 + 1528 * v6;
  v19 = *(int *)(v18 + 40);
  *(_QWORD *)(v18 + 1512) = v16 + 8 * v19;
  if ((int)v19 >= 1)
  {
    v20 = 0;
    v21 = v3 + 8 * v6;
    v22 = (_QWORD *)(v21 + 2184);
    v23 = (uint64_t *)(v21 + 2264);
    do
    {
      v24 = *(const char **)(*v22 + 8 * v20);
      if (!strcmp(v24, "MLPG"))
      {
        v31 = (uint64_t (*)())mlpg;
      }
      else if (!strcmp(v24, "MLPG2"))
      {
        v31 = (uint64_t (*)())MFS__mlpg2;
      }
      else if (!strcmp(v24, "MLPG_GV"))
      {
        v31 = (uint64_t (*)())mlpg_gv;
      }
      else if (!strcmp(v24, "MLPG_OPT"))
      {
        v31 = mlpg_opt;
      }
      else if (!strcmp(v24, "MLPG_C"))
      {
        v31 = (uint64_t (*)())mlpg_c;
      }
      else if (!strcmp(v24, "MLPG_GVC"))
      {
        v31 = (uint64_t (*)())mlpg_gvc;
      }
      else if (!strcmp(v24, "MLPG_GVNORM"))
      {
        v31 = (uint64_t (*)())mlpg_gvnorm;
      }
      else
      {
        v25 = strcmp(v24, "DUMMY_SOLVER");
        v31 = (uint64_t (*)())dummy_solver;
        if (v25)
        {
          v46 = *a1;
          v47 = "invalid solver for stream %d: %s\n";
          goto LABEL_64;
        }
      }
      *(_QWORD *)(*(_QWORD *)(v17 + 1528 * v6 + 1504) + 8 * v20) = v31;
      v32 = *v23;
      if (*v23)
      {
        v33 = *(const char **)(v32 + 8 * v20);
        if (v33)
        {
          if (!strcmp(*(const char **)(v32 + 8 * v20), "MLPG"))
          {
            v34 = (uint64_t (*)())mlpg;
          }
          else if (!strcmp(v33, "MLPG2"))
          {
            v34 = (uint64_t (*)())MFS__mlpg2;
          }
          else if (!strcmp(v33, "MLPG_GV"))
          {
            v34 = (uint64_t (*)())mlpg_gv;
          }
          else if (!strcmp(v33, "MLPG_OPT"))
          {
            v34 = mlpg_opt;
          }
          else if (!strcmp(v33, "MLPG_C"))
          {
            v34 = (uint64_t (*)())mlpg_c;
          }
          else if (!strcmp(v33, "MLPG_GVC"))
          {
            v34 = (uint64_t (*)())mlpg_gvc;
          }
          else if (!strcmp(v33, "MLPG_GVNORM"))
          {
            v34 = (uint64_t (*)())mlpg_gvnorm;
          }
          else
          {
            if (strcmp(v33, "DUMMY_SOLVER"))
            {
              if (*v33)
              {
                v46 = *a1;
                v47 = "invalid solver 2 for stream %d: %s\n";
                goto LABEL_64;
              }
              goto LABEL_50;
            }
            v34 = (uint64_t (*)())dummy_solver;
          }
          *(_QWORD *)(*(_QWORD *)(a1[3] + 1528 * v6 + 1512) + 8 * v20) = v34;
        }
      }
LABEL_50:
      ++v20;
      v17 = a1[3];
      v19 = *(int *)(v17 + 1528 * v6 + 40);
    }
    while (v20 < v19);
  }
  v35 = heap_Calloc(*(_QWORD **)(*a1 + 8), v19, 4);
  v36 = a1[3];
  *(_QWORD *)(v36 + 1528 * v6 + 1520) = v35;
  if (!v35)
    return 2229280778;
  v37 = v36 + 1528 * v6;
  v39 = *(_DWORD *)(v37 + 40);
  v38 = (int *)(v37 + 40);
  if (v39 < 1)
  {
LABEL_60:
    v4 = a2;
    MFS__log_select_Diag(*a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    v8 = a1[3];
    v7 = v49;
    if (!*(_DWORD *)(v8 + 1528 * v6 + 1484))
      goto LABEL_8;
LABEL_7:
    v12 = v8 + 1528 * v6;
    *(_DWORD *)(v12 + 764) = *(_DWORD *)(v4 + 4 * v6 + 4);
    *(_DWORD *)(v12 + 768) = 1;
    goto LABEL_8;
  }
  v40 = v35;
  v41 = 0;
  v42 = *(_QWORD *)(v3 + 8 * v6 + 2344);
  while (1)
  {
    v43 = *(const char **)(v42 + 8 * v41);
    if (!strcmp(v43, "OFF"))
    {
      v44 = 0;
      goto LABEL_58;
    }
    if (strcmp(v43, "ON"))
      break;
    v44 = 1;
LABEL_58:
    *(_DWORD *)(v40 + 4 * v41++) = v44;
    if (v41 >= *v38)
    {
      v3 = a3;
      goto LABEL_60;
    }
  }
  v46 = *a1;
  v47 = "valid breaker setting is required for stream %d\n";
LABEL_64:
  MFS__log_select_Error(v46, 55036, (uint64_t)v47, v26, v27, v28, v29, v30);
  return 2229280775;
}

void MFS__DeInitVStream(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 && *(_QWORD *)a1)
  {
    if (a1[8] >= 1)
    {
      v2 = 0;
      v3 = *((_QWORD *)a1 + 3);
      v4 = 1520;
      do
      {
        if (!v3)
          break;
        BET3FLT__FreePStreamSM(v3 + v4 - 1496);
        BET3FLT__FreePStreamParam((_QWORD *)(*((_QWORD *)a1 + 3) + v4 - 1496));
        BET3FLT__FreePStreamSM(*((_QWORD *)a1 + 3) + v4 - 768);
        BET3FLT__FreePStreamParam((_QWORD *)(*((_QWORD *)a1 + 3) + v4 - 768));
        v3 = *((_QWORD *)a1 + 3);
        v5 = *(_QWORD *)(v3 + v4 - 16);
        if (v5)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v5);
          v3 = *((_QWORD *)a1 + 3);
          *(_QWORD *)(v3 + v4 - 16) = 0;
        }
        v6 = *(_QWORD *)(v3 + v4);
        if (v6)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v6);
          v3 = *((_QWORD *)a1 + 3);
          *(_QWORD *)(v3 + v4) = 0;
        }
        ++v2;
        v4 += 1528;
      }
      while (v2 < a1[8]);
    }
    v7 = *((_QWORD *)a1 + 6);
    if (v7)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v7);
      *((_QWORD *)a1 + 6) = 0;
    }
    v8 = *((_QWORD *)a1 + 5);
    if (v8)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v8);
      *((_QWORD *)a1 + 5) = 0;
    }
    v9 = *((_QWORD *)a1 + 3);
    if (v9)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v9);
      *((_QWORD *)a1 + 3) = 0;
    }
    MFS__DeInitUttModel((_QWORD *)a1 + 7);
    bzero(a1, 0x788uLL);
  }
}

void MFS__InitVParam(_DWORD *a1)
{
  bzero(a1, 0x1F38uLL);
  a1[32] = 1;
}

void MFS__DeInitVParam(uint64_t a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t m;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unsigned int *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t n;
  uint64_t v44;
  uint64_t ii;
  uint64_t v46;

  if (a2[955])
  {
    for (i = 0; i != 20; ++i)
    {
      if (*(_QWORD *)(a2[955] + 8 * i))
      {
        for (j = 0; j != 800; j += 8)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(a2[955] + 8 * i) + j);
          if (v6)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v6);
            *(_QWORD *)(*(_QWORD *)(a2[955] + 8 * i) + j) = 0;
          }
        }
        v7 = *(_QWORD *)(a2[955] + 8 * i);
        if (v7)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v7);
          *(_QWORD *)(a2[955] + 8 * i) = 0;
        }
      }
      v8 = *(_QWORD *)(a2[956] + 8 * i);
      if (v8)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v8);
        *(_QWORD *)(a2[956] + 8 * i) = 0;
      }
      v9 = *(_QWORD *)(a2[954] + 8 * i);
      if (v9)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v9);
        *(_QWORD *)(a2[954] + 8 * i) = 0;
      }
    }
    v10 = a2[955];
    if (v10)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v10);
      a2[955] = 0;
    }
    v11 = a2[956];
    if (v11)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v11);
      a2[956] = 0;
    }
    v12 = a2[954];
    if (v12)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v12);
      a2[954] = 0;
    }
  }
  v13 = a2[10];
  if (v13)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v13);
    a2[10] = 0;
  }
  v14 = a2[15];
  if (v14)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v14);
    a2[15] = 0;
  }
  v15 = a2[957];
  if (v15)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v15);
    a2[957] = 0;
  }
  v16 = 0;
  v17 = a2;
  do
  {
    v18 = (char *)&a2[v16];
    v19 = *((_QWORD *)v18 + 18);
    if (v19)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v19);
      *((_QWORD *)v18 + 18) = 0;
    }
    v20 = *((_QWORD *)v18 + 53);
    if (v20)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v20);
      *((_QWORD *)v18 + 53) = 0;
    }
    for (k = 0; k != 5; ++k)
    {
      v22 = &v17[k];
      v23 = v17[k + 63];
      if (v23)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v23);
        v22[63] = 0;
      }
      v24 = v22[163];
      if (v24)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v24);
        v22[163] = 0;
      }
    }
    for (m = 213; m != 218; ++m)
    {
      v26 = v17[m];
      if (v26)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v26);
        v17[m] = 0;
      }
    }
    v27 = (char *)a2 + 4 * v16;
    if (*((_DWORD *)v27 + 66))
    {
      v28 = 0;
      v29 = (unsigned int *)(v27 + 264);
      v30 = (char *)&a2[v16];
      v31 = v30 + 2344;
      v32 = v30 + 2184;
      v33 = v30 + 2264;
      do
      {
        if (*v31)
        {
          v34 = *(_QWORD *)(*v31 + 8 * v28);
          if (v34)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v34);
            *(_QWORD *)(*v31 + 8 * v28) = 0;
          }
        }
        if (*v32)
        {
          v35 = *(_QWORD *)(*v32 + 8 * v28);
          if (v35)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v35);
            *(_QWORD *)(*v32 + 8 * v28) = 0;
          }
        }
        if (*v33)
        {
          v36 = *(_QWORD *)(*v33 + 8 * v28);
          if (v36)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v36);
            *(_QWORD *)(*v33 + 8 * v28) = 0;
          }
        }
        ++v28;
      }
      while (v28 < *v29);
    }
    v37 = (char *)&a2[v16];
    v38 = *((_QWORD *)v37 + 293);
    if (v38)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v38);
      *((_QWORD *)v37 + 293) = 0;
    }
    v39 = *((_QWORD *)v37 + 273);
    if (v39)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v39);
      *((_QWORD *)v37 + 273) = 0;
    }
    v40 = (char *)&a2[v16];
    v41 = *((_QWORD *)v40 + 283);
    if (v41)
    {
      v42 = v40 + 2264;
      heap_Free(*(_QWORD **)(a1 + 8), v41);
      *v42 = 0;
    }
    ++v16;
    v17 += 5;
  }
  while (v16 != 10);
  for (n = 663; n != 919; ++n)
  {
    v44 = a2[n];
    if (v44)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v44);
      a2[n] = 0;
    }
  }
  if (a2[952])
  {
    for (ii = 0; ii != 2048; ii += 8)
    {
      v46 = *(_QWORD *)(a2[952] + ii);
      if (v46)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v46);
        *(_QWORD *)(a2[952] + ii) = 0;
      }
    }
    heap_Free(*(_QWORD **)(a1 + 8), a2[952]);
  }
  bzero(a2, 0x1F38uLL);
}

unsigned __int8 *LZ_Uncompress(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  char v14;
  char v15;
  unsigned int v16;
  int v17;

  if (a3)
  {
    v3 = 0;
    v4 = *result;
    v5 = 1;
    do
    {
      v6 = v5 + 1;
      v7 = result[v5];
      if (v7 == v4)
      {
        if (result[v6])
        {
          v8 = result[v6] & 0x7F;
          if ((result[v6] & 0x80) != 0)
          {
            v9 = 1;
            do
            {
              v10 = result[v6 + v9];
              v8 = v10 & 0x7F | (v8 << 7);
              ++v9;
            }
            while ((v10 & 0x80) != 0);
          }
          else
          {
            LODWORD(v9) = 1;
          }
          v11 = 0;
          v6 = (v9 + v6);
          v12 = &result[v6];
          do
          {
            v13 = v11;
            v15 = *v12++;
            v14 = v15;
            v11 = v15 & 0x7F | (v11 << 7);
            LODWORD(v6) = v6 + 1;
          }
          while (v15 < 0);
          if (v8)
          {
            v16 = v8 + v3;
            v17 = -(v14 & 0x7F | (v13 << 7));
            do
            {
              *(_BYTE *)(a2 + v3) = *(_BYTE *)(a2 + v17 + v3);
              ++v3;
              --v8;
            }
            while (v8);
            v3 = v16;
          }
        }
        else
        {
          *(_BYTE *)(a2 + v3++) = v4;
          LODWORD(v6) = v5 + 2;
        }
      }
      else
      {
        *(_BYTE *)(a2 + v3++) = v7;
      }
      v5 = v6;
    }
    while (v6 < a3);
  }
  return result;
}

unsigned __int8 *Huffman_Uncompress(uint64_t a1)
{
  unsigned __int8 *result;
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  _BYTE *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE v17[12264];
  uint64_t v18;

  result = (unsigned __int8 *)MEMORY[0x1E0C80A78](a1);
  v18 = *MEMORY[0x1E0C80C00];
  if (v4)
  {
    v5 = v3;
    v6 = v2;
    v15 = result;
    v16 = 0;
    v14 = 0;
    result = (unsigned __int8 *)_Huffman_RecoverTree((uint64_t)v17, &v15, &v14);
    if (v5)
    {
      v7 = 0;
      v8 = v15;
      LOBYTE(v9) = v16;
      do
      {
        v10 = *((_DWORD *)result + 4);
        if (v10 < 0)
        {
          v11 = result;
          do
          {
            v12 = *v8;
            v13 = 7 - v9;
            v9 = ((_BYTE)v9 + 1) & 7;
            if (!v9)
              ++v8;
            LODWORD(v16) = v9;
            v15 = v8;
            if (((v12 >> v13) & 1) != 0)
              v11 += 8;
            v11 = *(unsigned __int8 **)v11;
            v10 = *((_DWORD *)v11 + 4);
          }
          while (v10 < 0);
        }
        *v6++ = v10;
        ++v7;
      }
      while (v7 != v5);
    }
  }
  return result;
}

_QWORD *_Huffman_RecoverTree(uint64_t a1, unsigned __int8 **a2, unsigned int *a3)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v16;

  v4 = *a3;
  v5 = (_QWORD *)(a1 + 24 * (*a3)++);
  v6 = a1 + 24 * v4;
  *(_DWORD *)(v6 + 16) = -1;
  v7 = (int *)(v6 + 16);
  *v5 = 0;
  v5[1] = 0;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = **a2;
  v11 = ((_BYTE)v9 + 1) & 7;
  if ((((_BYTE)v9 + 1) & 7) == 0)
    v8 = *a2 + 1;
  *((_DWORD *)a2 + 2) = v11;
  *a2 = v8;
  if (((v10 >> (7 - v9)) & 1) != 0)
  {
    v12 = *v8 << v11;
    v13 = v8[1];
    *a2 = v8 + 1;
    *v7 = (v13 >> (8 - v11)) | v12;
  }
  else
  {
    v16 = a1 + 24 * v4;
    *v5 = ((uint64_t (*)(void))_Huffman_RecoverTree)();
    *(_QWORD *)(v16 + 8) = _Huffman_RecoverTree(a1, a2, a3);
  }
  return v5;
}

uint64_t writeToPeriVec_0(uint64_t a1, unsigned int a2, __int16 a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6 <= a2)
  {
    v7 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 8), 2 * (v6 + 150));
    if (!v7)
      return 2164269066;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) += 150;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  v8 = 0;
  *(_WORD *)(v7 + 2 * a2) = a3;
  return v8;
}

uint64_t Psola_GetDecodedUnitData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, _WORD *a9, int *a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t UnitData;
  uint64_t Segment;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  char *v26;
  double v27;
  uint64_t v28;
  float *v29;
  float v30;
  uint64_t v32;
  float *v33;
  float v34;
  int v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  char *v40;

  if (!a3)
    return 0;
  v38 = 0;
  v39 = 0;
  v37[0] = 0;
  v37[1] = 0;
  UnitData = Lookup_GetUnitData(*(_QWORD **)(a1 + 24), a4, (uint64_t)v37);
  if ((UnitData & 0x80000000) != 0)
    return UnitData;
  if (a6 + a5 + a7 <= a8)
  {
    v20 = HIDWORD(v37[0]);
    if (HIDWORD(v37[0]) >= a5)
      v21 = a5;
    else
      v21 = HIDWORD(v37[0]);
    *a10 = v21;
    *a11 = a6;
    *a12 = a7;
    v22 = *a10;
    v23 = *a10 + a7 + *a11;
    v40 = 0;
    if (*(_DWORD *)(a1 + 76))
      v24 = *(_DWORD *)(a1 + 21304);
    else
      v24 = 0;
    Segment = concat_getSegment(a1, a4, v20 - v22, v23, (uint64_t)&v38, v24);
    v25 = HIDWORD(v39);
    v26 = v40;
    if (HIDWORD(v39))
    {
      v27 = *(double *)(a1 + 21336);
      v28 = HIDWORD(v39);
      v29 = (float *)v40;
      do
      {
        v30 = v27 * *v29;
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
    if (*(_DWORD *)(a1 + 21316) == 1)
    {
      concat_applyBPF(*(_QWORD *)a1, v26, v25);
      v25 = HIDWORD(v39);
      v26 = v40;
    }
    if (v25)
    {
      v32 = v25;
      v33 = (float *)v26;
      do
      {
        v34 = *v33;
        if (*v33 <= 32767.0)
        {
          if (v34 >= -32768.0)
            v35 = (int)v34;
          else
            LOWORD(v35) = 0x8000;
        }
        else
        {
          LOWORD(v35) = 0x7FFF;
        }
        *a9++ = v35;
        ++v33;
        --v32;
      }
      while (v32);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v26);
  }
  else
  {
    *a10 = 0;
    *a11 = 0;
    Segment = 2164269065;
    *a12 = 0;
  }
  return Segment;
}

uint64_t concat_getSegment(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6;
  int *v9;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  float v29;

  v6 = a4;
  *(_DWORD *)(a5 + 12) = a4;
  v9 = (int *)(a5 + 12);
  *(_DWORD *)(a5 + 8) = a4;
  if (a4 <= 0)
  {
    *v9 = 0;
    log_wsola_Diag(*(_QWORD *)a1, 1, (uint64_t)"WARNING: Segment in unit %d has a duration of %d\n");
    return 2164269063;
  }
  v11 = *(uint64_t **)(*(_QWORD *)a1 + 8);
  if (!a6)
  {
    v16 = heap_Calloc(v11, a4, 2);
    if (!v16)
    {
      v14 = 2164269066;
      goto LABEL_32;
    }
    v22 = (__int16 *)v16;
    if (a2 <= 0xFFFFFFFD)
    {
      Lookup_Init(*(_QWORD *)(a1 + 24), a3, *v9);
      Lookup_Decode(*(_QWORD *)(a1 + 24), v9, (uint64_t)v22);
      v6 = *v9;
    }
    if (a2 == -2)
    {
      v25 = *(_DWORD *)(a1 + 72);
      if (v25 <= a3)
      {
        log_wsola_Error(*(_QWORD *)a1, 59012, 0, v17, v18, v19, v20, v21);
        return 2164269071;
      }
      if (*v9 + a3 > v25)
        v6 = v25 - a3;
      v24 = (_QWORD *)(a1 + 64);
    }
    else
    {
      if (a2 != -1)
        goto LABEL_23;
      v23 = *(_DWORD *)(a1 + 56);
      if (v23 <= a3)
        goto LABEL_23;
      if (*v9 + a3 > v23)
        v6 = v23 - a3;
      v24 = (_QWORD *)(a1 + 48);
    }
    memcpy(v22, (const void *)(*v24 + 2 * a3), 2 * v6);
LABEL_23:
    v26 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a5 + 16), 4 * *(unsigned int *)(a5 + 12));
    *(_QWORD *)(a5 + 16) = v26;
    if (v26)
    {
      v27 = *v9;
      if ((_DWORD)v27)
      {
        for (i = 0; i != v27; ++i)
        {
          v29 = 0.0;
          if (i < v6)
            v29 = (float)v22[i];
          *(float *)(v26 + 4 * i) = v29;
        }
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v22);
      return 0;
    }
    v14 = 2164269066;
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v22);
LABEL_32:
    log_wsola_Error(*(_QWORD *)a1, 59000, 0, v17, v18, v19, v20, v21);
    return v14;
  }
  v12 = (void *)heap_Realloc(v11, *(_QWORD *)(a5 + 16), 4 * a4);
  *(_QWORD *)(a5 + 16) = v12;
  if (v12)
  {
    v13 = *v9;
    if ((_DWORD)v13)
      bzero(v12, 4 * v13);
    return 0;
  }
  v14 = 2164269066;
  log_wsola_Diag(*(_QWORD *)a1, 1, (uint64_t)"ERROR: Out of memory\n");
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), 0);
  return v14;
}

uint64_t Psola_SynthSilence_0(uint64_t *a1, int *a2, int a3, int *a4)
{
  int v7;
  int v8;
  _BYTE v10[2];

  v7 = (1000 * a3 + 500) / 1000;
  Psola_FlushOlaBufPart_1(a1, a2, *a4);
  v8 = *a4 + v7;
  *a4 = v8;
  if (*a2 <= v8)
    Psola_AddToOlaBufAux_1(a1, a2, (uint64_t)v10, 0, 0, v8);
  return 0;
}

void Psola_FlushOlaBufPart_1(uint64_t *a1, _DWORD *a2, int a3)
{
  int v3;
  int v6;
  int v7;
  signed int v8;
  signed int v9;
  signed int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  _OWORD v15[12];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a3 - *a2;
  if (v3 >= 1)
  {
    v6 = a2[1];
    v7 = a2[2];
    if (v3 >= v7)
      v8 = a2[2];
    else
      v8 = v3;
    if (v8 >= 2400 - v6)
      v9 = 2400 - v6;
    else
      v9 = v8;
    if (v3 >= v7)
      v10 = v7 - v9;
    else
      v10 = v3 - v9;
    if (v9 >= 1)
    {
      Wsola__write_audioX(a1, (uint64_t)(a2 + 3), v6, v9);
      bzero((char *)a2 + 2 * a2[1] + 12, 2 * v9);
    }
    if (v10 >= 1)
    {
      Wsola__write_audioX(a1, (uint64_t)(a2 + 3), 0, v10);
      bzero(a2 + 3, 2 * v10);
    }
    v11 = v3 - v9 - v10;
    if (v11 >= 1)
    {
      v16 = 0;
      memset(v15, 0, sizeof(v15));
      do
      {
        if (v11 >= 100)
          v12 = 100;
        else
          v12 = v11;
        Wsola__write_audioX(a1, (uint64_t)v15, 0, v12);
        v13 = __OFSUB__(v11, v12);
        v11 -= v12;
      }
      while (!((v11 < 0) ^ v13 | (v11 == 0)));
    }
    v14 = a2[1] + v3;
    *a2 += v3;
    a2[1] = v14 % 2400;
    a2[2] -= v10 + v9;
  }
}

uint64_t Psola_Initialise(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = 2164269066;
  v11 = heap_Calloc(*(_QWORD **)(a2 + 8), 1, 136);
  *a1 = v11;
  if (v11)
  {
    v12 = v11;
    *(_BYTE *)(v11 + 112) = 1;
    v13 = heap_Alloc(*(_QWORD *)(a2 + 8), 4812);
    *(_QWORD *)(v12 + 16) = v13;
    if (v13)
    {
      v14 = heap_Alloc(*(_QWORD *)(a2 + 8), 48000);
      *(_QWORD *)(v12 + 24) = v14;
      if (v14)
      {
        v15 = heap_Alloc(*(_QWORD *)(a2 + 8), 48);
        *(_QWORD *)(v12 + 32) = v15;
        if (v15)
        {
          *(_QWORD *)(v15 + 8) = 961;
          v16 = heap_Alloc(*(_QWORD *)(a2 + 8), 1922);
          v17 = *(uint64_t **)(v12 + 32);
          *v17 = v16;
          if (v16)
          {
            v17[3] = 961;
            v18 = heap_Alloc(*(_QWORD *)(a2 + 8), 1922);
            v19 = *(_QWORD **)(v12 + 32);
            v19[2] = v18;
            if (*v19)
            {
              v19[5] = 961;
              v20 = heap_Alloc(*(_QWORD *)(a2 + 8), 1922);
              *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32) = v20;
              if (v20)
              {
                v21 = newPeriDesc(a2);
                *(_QWORD *)(v12 + 64) = v21;
                if (v21)
                {
                  v22 = newPeriDesc(a2);
                  *(_QWORD *)(v12 + 72) = v22;
                  if (v22)
                  {
                    bzero(*(void **)(v12 + 16), 0x12CCuLL);
                    *(_QWORD *)(v12 + 88) = 0;
                    v23 = *(_QWORD *)(v12 + 72);
                    *(_WORD *)v23 = 0;
                    *(_DWORD *)(v23 + 2) = 0;
                    v24 = *(_QWORD *)(v12 + 64);
                    *(_WORD *)v24 = 0;
                    *(_DWORD *)(v24 + 2) = 0;
                    v25 = Psola_SetUpCrossFading_1(a3, 100, 100, (unsigned __int16 *)v23, (unsigned __int16 *)v24, (_DWORD *)(v12 + 8), (int *)(v12 + 12));
                    if ((v25 & 0x80000000) != 0)
                    {
                      return v25;
                    }
                    else
                    {
                      v10 = 0;
                      *(_QWORD *)v12 = 0x100000000;
                      *(_DWORD *)(v12 + 96) = 0;
                      *(_DWORD *)(v12 + 100) = a3;
                      *(_DWORD *)(v12 + 40) = 0;
                      *(float *)(v12 + 116) = (float)a4;
                      *(float *)(v12 + 120) = (float)a5;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v10;
}

uint64_t Psola_SetUpCrossFading_1(int a1, int a2, int a3, unsigned __int16 *a4, unsigned __int16 *a5, _DWORD *a6, int *a7)
{
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int16 v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;

  v11 = a2 * a1;
  v12 = 274877907 * a2 * a1;
  v13 = (unint64_t)v12 >> 63;
  v14 = v12 >> 38;
  v15 = a3 * a1 / 1000;
  v16 = a4[1] + *a4;
  *a7 = 0;
  if (a4[2])
  {
    v43 = (unint64_t)v12 >> 63;
    v45 = a2 * a1;
    v17 = 0;
    v18 = 0;
    do
    {
      if (v17 >= a5[1] >> 1 || v18 >= v15)
        break;
      v20 = *((_QWORD *)a5 + 8);
      v21 = *(__int16 *)(v20 + 2 * (v17 + *a5));
      writeToPeriVec_0((uint64_t)(a4 + 28), v16 + v17, *(_WORD *)(v20 + 2 * (v17 + *a5)));
      v18 = *a7 + v21;
      *a7 = v18;
      ++v17;
    }
    while (v17 < a4[2]);
    v11 = v45;
    LODWORD(v13) = v43;
  }
  else
  {
    LOWORD(v17) = 0;
  }
  v46 = v14 + v13;
  a4[2] = v17;
  *a6 = 0;
  LODWORD(v22) = *a5;
  if (*a5)
  {
    v23 = 0;
    if (a4[1] && v11 >= 1000)
    {
      v24 = 2 * v16 - 2;
      v25 = -1;
      v26 = 1;
      do
      {
        v27 = v25;
        v28 = *(__int16 *)(*((_QWORD *)a4 + 8) + v24);
        writeToPeriVec_0((uint64_t)(a5 + 28), v22 + v25, *(_WORD *)(*((_QWORD *)a4 + 8) + v24));
        v23 = *a6 + v28;
        *a6 = v23;
        v22 = *a5;
        if (v26 >= v22)
          break;
        v25 = v27 - 1;
        v29 = v26++ >= ((unint64_t)a4[1] + 1) >> 1;
        v24 -= 2;
      }
      while (!v29 && v23 < v46);
      v31 = -v27;
    }
    else
    {
      v31 = 0;
    }
    v32 = v22;
  }
  else
  {
    v23 = 0;
    v31 = 0;
    v32 = 0;
  }
  v33 = v32 - v31;
  if ((int)(v32 - v31) >= 1)
  {
    v34 = a5[1];
    v35 = a5[2];
    if (v33 < v32 + v34 + v35)
    {
      v42 = v32 - v31;
      v44 = v15;
      v36 = 0;
      v37 = 2 * -v31 + 2 * v32;
      v38 = v35 + v34 - -v31;
      do
      {
        writeToPeriVec_0((uint64_t)(a5 + 4), v36, *(_WORD *)(*((_QWORD *)a5 + 2) + v37 + 2 * v36));
        writeToPeriVec_0((uint64_t)(a5 + 16), v36, *(_WORD *)(*((_QWORD *)a5 + 5) + v37 + 2 * v36));
        writeToPeriVec_0((uint64_t)(a5 + 28), v36, *(_WORD *)(*((_QWORD *)a5 + 8) + v37 + 2 * v36));
        ++v36;
      }
      while (v38 != v36);
      LOWORD(v22) = *a5;
      v23 = *a6;
      LOWORD(v33) = v42;
      v15 = v44;
    }
    *a5 = v22 - v33;
  }
  v39 = v46;
  if (v23 < v46)
    v39 = v23;
  *a6 = v39;
  v40 = *a7;
  if (*a7 >= v15)
    v40 = v15;
  *a7 = v40;
  if (!((*a6 + v40 < 0) ^ __OFADD__(*a6, v40) | (*a6 + v40 == 0)) || !a4[1])
    return 0;
  if (a5[1])
    return 2164269071;
  return 0;
}

uint64_t Psola_Synthesis(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  void *MsgName;
  void *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int16 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _WORD *v33;
  uint64_t result;
  uint64_t i;
  _WORD **v36;
  uint64_t v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  unsigned __int16 *v45;
  _WORD *v46;
  __int16 *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned __int16 *v53;
  uint64_t v54;
  int v55;
  __int16 *v56;
  int v57;
  int v58;
  __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  unsigned __int16 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  _BOOL4 v74;
  BOOL v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  _WORD *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  BOOL v93;
  int v94;
  int v95;
  int v96;
  int v97;
  __int16 *v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  __int16 *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  __int16 *v122;
  _WORD *v123;
  int v124;
  __int16 v125;
  unsigned __int16 *v126;
  int v127;
  __int16 *v128;
  _WORD *v129;
  int v130;
  __int16 v131;
  __int16 *v132;
  int v133;
  int v134;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  unsigned __int16 v140;
  uint64_t v141;
  __int16 v142;
  __int16 v143;
  void *v144;
  void *v145;
  unsigned int v146;
  uint64_t *v147;
  int *v148;
  int *v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t *v155;
  __int16 v156;
  __int16 v157;
  _WORD **v158;
  uint64_t v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int *v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned __int16 *v176;
  int v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  _QWORD v184[2];

  v2 = (int *)a2;
  v3 = a1;
  v4 = a1 + 21280;
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(int *)(a2 + 96);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v5 + 40 * (int)v6);
  if ((_DWORD)v6)
    v9 = *(_DWORD *)(v5 + 40 * (int)(v6 - *(unsigned __int8 *)(a2 + 112)));
  else
    v9 = -1;
  v10 = v5 + 40 * (int)v6;
  v11 = (float)*(unsigned int *)(v3 + 40) / 1000.0;
  *(_DWORD *)v4 = v8;
  *(int32x2_t *)(v3 + 21288) = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v10 + 4)), v11));
  *(_DWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 20) = 34;
  *(_DWORD *)(v4 + 24) = v8 == -1;
  *(_DWORD *)(v4 + 28) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  MsgName = mfs_GetMsgName(v7, v8);
  v13 = MsgName;
  v15 = *(_DWORD *)(v10 + 4);
  v14 = *(_DWORD *)(v10 + 8);
  v16 = *((_QWORD *)v2 + 16);
  v17 = *(_QWORD *)(v16 + 8 * v6);
  *((_QWORD *)v2 + 7) = v17;
  if (!(_DWORD)v6)
  {
    *((_QWORD *)v2 + 6) = 0;
    v36 = (_WORD **)(v2 + 12);
LABEL_30:
    v37 = *((_QWORD *)v2 + 9);
    *(_DWORD *)v37 = 0;
    *(_WORD *)(v37 + 4) = 0;
LABEL_31:
    v38 = v2[25];
    v39 = *(_DWORD *)(v5 + 40 * (int)v6 + 24);
    v40 = v14;
    if ((int)v6 < 1)
      v41 = 100;
    else
      v41 = *(_DWORD *)(v5 + 40 * (v6 - 1) + 28);
    v182 = 0;
    result = Psola_SetUpCrossFading_1(v38, v39, v41, *((unsigned __int16 **)v2 + 8), *((unsigned __int16 **)v2 + 9), (_DWORD *)&v182 + 1, (int *)&v182);
    if ((result & 0x80000000) != 0)
      return result;
    if ((_DWORD)v6)
    {
      v42 = v15;
      if (v9 == -1)
      {
        v15 = v2[25] * *((unsigned __int16 *)v2 + 41) / 0x3E8;
        log_wsola_Diag(*(_QWORD *)v3, 3, (uint64_t)"Parametric silence for s32i = %d\n");
      }
      else
      {
        log_wsola_Diag(*(_QWORD *)v3, 3, (uint64_t)"Non silence unit %d for s32i = %d\n");
        if (**v36)
          v15 = -1;
        else
          v15 = (int)((double)(v2[25] * *((unsigned __int16 *)v2 + 41)) / 1000.0);
      }
      log_wsola_Diag(*(_QWORD *)v3, 3, (uint64_t)"SynthSilence debugging, s32i=%d, s32SilLen %d\n");
      log_wsola_Diag(*(_QWORD *)v3, 3, (uint64_t)"SynthSilence - next unit is going to be %d\n");
      if ((v15 & 0x80000000) != 0)
      {
        v45 = (unsigned __int16 *)*((_QWORD *)v2 + 6);
        v46 = (_WORD *)*((_QWORD *)v2 + 3);
        v184[0] = 0;
        v183 = 0;
        v47 = (__int16 *)*((_QWORD *)v45 + 2);
        v48 = *v47;
        if (v48 <= 0)
          v49 = -v48;
        else
          v49 = 0;
        v50 = (unsigned __int16)(v45[1] + v45[2] + v45[3] - 1);
        v51 = *(__int16 *)(*((_QWORD *)v45 + 5) + 2 * v50) + v47[v50];
        result = Psola_GetDecodedUnitData(v3, v43, (uint64_t)(v2 + 20), v9, v49, *v45, (v51 - *v45) & ~((v51 - *v45) >> 31), 0x5DC0u, v46, (int *)v184 + 1, &v183, v184);
        if ((result & 0x80000000) != 0)
          return result;
        result = 2164269065;
        v52 = HIDWORD(v184[0]);
        if (HIDWORD(v184[0]) + **((__int16 **)v45 + 2) < 0
          || HIDWORD(v184[0]) + v51 > v183 + HIDWORD(v184[0]) + LODWORD(v184[0]))
        {
          return result;
        }
        log_wsola_Diag(*(_QWORD *)v3, 3, (uint64_t)"About to call synthesis for unitID %d\n");
        v53 = (unsigned __int16 *)*((_QWORD *)v2 + 8);
        v54 = *v53;
        v55 = v53[1];
        v176 = v53;
        v56 = (__int16 *)*((_QWORD *)v53 + 8);
        v57 = 0;
        if ((_DWORD)v54)
        {
          v58 = v54;
          v59 = v56;
          LOWORD(v15) = v42;
          v60 = (unsigned __int16 *)*((_QWORD *)v2 + 8);
          do
          {
            v61 = *v59++;
            v57 += v61;
            --v58;
          }
          while (v58);
        }
        else
        {
          LOWORD(v15) = v42;
          v60 = (unsigned __int16 *)*((_QWORD *)v2 + 8);
        }
        v94 = v55 + v54;
        v95 = v2[2];
        v96 = v2[3];
        v97 = 0;
        if (v55)
        {
          v98 = &v56[v54];
          do
          {
            v99 = *v98++;
            v97 += v99;
            --v55;
          }
          while (v55);
        }
        v100 = v94 + v60[2];
        v101 = HIDWORD(v182);
        v102 = *v2;
        v170 = v96 + v95;
        if ((v170 < 0) ^ __OFADD__(v96, v95) | (v170 == 0))
        {
          v103 = (unsigned __int16)v56[v54];
          v170 = (int)((v103 + (v103 >> 15)) << 16) >> 17;
          v166 = *v2;
        }
        else
        {
          v166 = v102 - v95;
        }
        v168 = v182 + HIDWORD(v182);
        if (((int)v182 + HIDWORD(v182) < 0) ^ __OFADD__((_DWORD)v182, HIDWORD(v182)) | ((_DWORD)v182 + HIDWORD(v182) == 0))
        {
          v104 = (unsigned __int16)v56[v94 - 1];
          v101 = (__int16)(v104 + (v104 >> 15)) >> 1;
          v168 = v101;
        }
        v105 = v102 + v97;
        if ((_DWORD)v100)
        {
          v143 = v15;
          v145 = v13;
          v106 = 0;
          v107 = 0;
          v108 = *((_QWORD *)v2 + 3);
          v109 = *((_QWORD *)v2 + 4);
          v160 = v2 + 10;
          v172 = (int *)*((_QWORD *)v2 + 2);
          v153 = v105 - v101;
          v149 = v2;
          v174 = *((_QWORD *)v2 + 6);
          v181 = v102 - v57;
          v147 = (uint64_t *)(v109 + 16);
          v141 = (v100 - 1);
          v151 = (v100 + 1);
          v164 = v52;
          v162 = v100;
          v159 = v108;
          v155 = (uint64_t *)v3;
          v157 = v40;
          do
          {
            v179 = v107;
            if (v106)
            {
              if (v106 == v100)
              {
                v110 = *(__int16 *)(*((_QWORD *)v60 + 2) + 2 * v141);
                LODWORD(v111) = *(__int16 *)(*(_QWORD *)(v174 + 40) + 2 * v110);
                result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)v3 + 8), v108, v52 + *(__int16 *)(*(_QWORD *)(v174 + 16) + 2 * v110), v111, (uint64_t *)v109);
                if ((result & 0x80000000) != 0)
                  return result;
                LODWORD(v112) = 0;
                v113 = 0;
                v114 = (__int16 *)(*((_QWORD *)v60 + 8) + 2 * v141);
              }
              else
              {
                v116 = *(unsigned __int16 *)(*((_QWORD *)v60 + 5) + 2 * v106);
                v117 = *(__int16 *)(*((_QWORD *)v60 + 2) + 2 * v106);
                v118 = v117 - 1;
                v119 = *(_QWORD *)(v174 + 40);
                v120 = *(_QWORD *)(v174 + 16);
                if (v116)
                {
                  v111 = *(__int16 *)(v119 + 2 * v117);
                  v112 = *(__int16 *)(v119 + 2 * v118);
                  v121 = *(__int16 *)(v120 + 2 * v117);
                  result = Psola_ReallocIfNeeded(*(uint64_t **)(*(_QWORD *)v3 + 8), (uint64_t *)v109, v111);
                  if ((int)v111 >= 1 && (result & 0x80000000) == 0)
                  {
                    v122 = (__int16 *)(v108 + 2 * (v52 + v121));
                    v123 = (_WORD *)(*(_QWORD *)v109 + 2 * v111 - 2);
                    v124 = v111;
                    do
                    {
                      v125 = *v122++;
                      *v123-- = v125;
                      --v124;
                    }
                    while (v124);
                  }
                  v126 = v176;
                  if ((result & 0x80000000) != 0)
                    return result;
                  v127 = *(__int16 *)(*(_QWORD *)(v174 + 16) + 2 * v118);
                  result = Psola_ReallocIfNeeded(*(uint64_t **)(*(_QWORD *)v3 + 8), v147, v112);
                  if ((int)v112 >= 1 && (result & 0x80000000) == 0)
                  {
                    v128 = (__int16 *)(v108 + 2 * (v52 + v127));
                    v129 = (_WORD *)(*v147 + 2 * v112 - 2);
                    v130 = v112;
                    do
                    {
                      v131 = *v128++;
                      *v129-- = v131;
                      --v130;
                    }
                    while (v130);
                  }
                }
                else
                {
                  LODWORD(v111) = *(__int16 *)(v119 + 2 * v118);
                  LODWORD(v112) = *(__int16 *)(v119 + 2 * v117);
                  result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)v3 + 8), v108, v52 + *(__int16 *)(v120 + 2 * v118), v111, (uint64_t *)v109);
                  if ((result & 0x80000000) != 0)
                    return result;
                  result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)v3 + 8), v108, v52 + *(__int16 *)(*(_QWORD *)(v174 + 16) + 2 * v117), v112, v147);
                  v126 = v176;
                }
                if ((result & 0x80000000) != 0)
                  return result;
                v132 = (__int16 *)(*((_QWORD *)v126 + 8) + 2 * v106);
                v133 = *v132;
                v114 = v132 - 1;
                v113 = v133;
              }
              v134 = *v114;
              if ((int)v111 > v134)
              {
                memmove(*(void **)v109, (const void *)(*(_QWORD *)v109 + 2 * ((int)v111 - *v114)), 2 * *v114);
                LODWORD(v111) = v134;
              }
            }
            else
            {
              v115 = **((__int16 **)v60 + 2);
              LODWORD(v112) = *(__int16 *)(*(_QWORD *)(v174 + 40) + 2 * v115);
              result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)v3 + 8), v108, v52 + *(__int16 *)(*(_QWORD *)(v174 + 16) + 2 * v115), v112, v147);
              if ((result & 0x80000000) != 0)
                return result;
              LODWORD(v111) = 0;
              v113 = **((__int16 **)v60 + 8);
            }
            if ((int)v112 >= v113)
              LODWORD(v112) = v113;
            Psola_ApplyHanning_1(*(__int16 **)(v109 + 32), v160, *(__int16 **)v109, v111, 1);
            Psola_ApplyHanning_1(*(__int16 **)(v109 + 32), v160, *(__int16 **)(v109 + 16), v112, 0);
            Psola_ApplyFadingPart(*(__int16 **)v109, v111, v181 - v111, v166, v170, 1);
            Psola_ApplyFadingPart(*(__int16 **)(v109 + 16), v112, v181, v166, v170, 1);
            Psola_ApplyFadingPart(*(__int16 **)v109, v111, v181 - v111, v153, v168, 0);
            Psola_ApplyFadingPart(*(__int16 **)(v109 + 16), v112, v181, v153, v168, 0);
            v3 = (uint64_t)v155;
            Psola_AddToOlaBuf_1(v155, v172, *(_QWORD *)v109, v111, v181 - v111);
            Psola_AddToOlaBuf_1(v155, v172, *(_QWORD *)(v109 + 16), v112, v181);
            v107 = 1;
            v181 += v113;
            v40 = v157;
            v52 = v164;
            v100 = v162;
            v108 = v159;
            if (!v179)
            {
              if (v181 >= *v149 + 961 || v106 == v162)
              {
                Psola_FlushOlaBufPart_1(v155, v172, *v149);
                v107 = 1;
              }
              else
              {
                v107 = 0;
              }
            }
            ++v106;
            v60 = v176;
          }
          while (v106 != v151);
          v2 = v149;
          v105 = *v149 + v97;
          v13 = v145;
          LOWORD(v15) = v143;
        }
        *v2 = v105;
      }
      else
      {
        Psola_SynthSilence_0((uint64_t *)v3, *((int **)v2 + 2), v15, v2);
        LOWORD(v15) = v42;
      }
    }
    log_wsola_Diag(*(_QWORD *)v3, 3, (uint64_t)"BANANA: Synthesis of unit %d has just been completed\n\n");
    *((_WORD *)v2 + 40) = v15;
    *((_WORD *)v2 + 41) = v40;
    v2[21] = 0;
    *((_QWORD *)v2 + 11) = v13;
    *((int8x16_t *)v2 + 4) = vextq_s8(*((int8x16_t *)v2 + 4), *((int8x16_t *)v2 + 4), 8uLL);
    v44 = v182;
    v2[2] = HIDWORD(v182);
    v2[3] = v44;
    v2[1] = 3 - v2[1];
LABEL_45:
    ++v2[24];
    return Lookup_DeInit(*(uint64_t **)(v3 + 24));
  }
  *((_QWORD *)v2 + 6) = *(_QWORD *)(v16 + 8 * ((int)v6 - 1));
  v158 = (_WORD **)(v2 + 12);
  if (v8 == -1)
  {
    v36 = (_WORD **)(v2 + 12);
    goto LABEL_30;
  }
  v18 = *(_WORD *)(v17 + 4);
  if (!v18)
  {
    ++*((_BYTE *)v2 + 112);
    goto LABEL_45;
  }
  v156 = v14;
  *((_BYTE *)v2 + 112) = 1;
  v19 = *(double *)(v3 + 21352) * 0.5 + 100.0;
  v139 = v5;
  v20 = (_DWORD *)(v5 + 40 * (int)v6);
  v21 = v20[3] * (int)v19;
  v22 = (v21 + 50) / 100;
  v23 = v20[4] * (int)v19;
  v24 = (v23 + 50) / 100;
  v20[3] = v22;
  v20[4] = v24;
  v25 = v20[5];
  v26 = *(unsigned __int16 *)(v17 + 2);
  v140 = v26 + v18;
  v27 = v26 + v18 - 1;
  v28 = 0;
  if (v26 <= v27)
  {
    v29 = *(unsigned __int16 *)(v17 + 2);
    do
      v28 += *(__int16 *)(*(_QWORD *)(v17 + 40) + 2 * (unsigned __int16)v29++);
    while ((unsigned __int16)v29 <= v27);
  }
  v150 = v2[25];
  if (v25 < 0)
  {
    if (v150 >= 0)
      v30 = v2[25];
    else
      v30 = v150 + 1;
    v31 = (1000 * v28 + (v30 >> 1)) / v150;
    if (v31 >= 0)
      v32 = (1000 * v28 + (v30 >> 1)) / v150;
    else
      v32 = v31 + 1;
    v25 = (-1000 * v25 + (v32 >> 1)) / v31;
  }
  v142 = v15;
  v144 = MsgName;
  v146 = v9;
  v180 = v28;
  if (v25)
    v180 = (v25 * v28 + 500) / 1000;
  v148 = v2;
  v33 = (_WORD *)*((_QWORD *)v2 + 9);
  result = 2164269074;
  if (v21 >= 50 && v23 < 50 || v21 <= 49 && v23 > 49)
    return result;
  *v33 = 0;
  v154 = v3;
  v175 = (v21 + 50) / 100;
  v173 = v25;
  if ((_DWORD)v26)
  {
    v177 = (v23 + 50) / 100;
    for (i = 0; i != v26; ++i)
    {
      writeToPeriVec_0((uint64_t)(v33 + 4), i, i);
      writeToPeriVec_0((uint64_t)(v33 + 16), i, 0);
      writeToPeriVec_0((uint64_t)(v33 + 28), i, *(_WORD *)(*(_QWORD *)(v17 + 40) + 2 * i));
      ++*v33;
    }
    v22 = v175;
    v25 = v173;
    v24 = v177;
  }
  else
  {
    LODWORD(i) = 0;
  }
  v33[1] = 0;
  if (v26 <= v27)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v152 = v24 - v22;
    if (v28 >= 0)
      v69 = v28;
    else
      v69 = v28 + 1;
    v136 = v69 >> 1;
    v165 = (uint64_t)(v33 + 4);
    v161 = (uint64_t)(v33 + 16);
    v163 = (uint64_t)(v33 + 28);
    v178 = v17;
    v167 = v6;
    while (1)
    {
      v70 = (unsigned __int16)v26;
      v71 = *(unsigned __int16 *)(*(_QWORD *)(v17 + 40) + 2 * (unsigned __int16)v26);
      if (v25)
        v68 += (v25 * (int)v71 + 500) / 1000;
      else
        v68 = v67 + v71;
      v72 = i <= 0x2710 ? 10000 : i;
      v73 = (unsigned __int16)v26 == v27 && v67 == 0;
      v74 = v73;
      v75 = v67 + (v71 >> 1) > v68 && !v74;
      v137 = v66;
      if (!v75)
        break;
LABEL_121:
      v66 = v137 + v71;
      LOWORD(v26) = v70 + 1;
      v3 = v154;
      v17 = v178;
      if ((unsigned __int16)(v70 + 1) > v27)
        goto LABEL_58;
    }
    v76 = 0;
    v169 = v71 >> 1;
    v171 = v72;
    v138 = v136 + v66 * v152;
    while (1)
    {
      v77 = v22;
      if (v25)
      {
        v78 = v178;
        v79 = v171;
        if (!v180)
          goto LABEL_93;
        v80 = (int)(v180 / 2 + v67 * v152) / v180;
      }
      else
      {
        v78 = v178;
        v79 = v171;
        if (!v28)
          goto LABEL_93;
        v80 = v138 / v28;
      }
      v77 = v80 + v22;
LABEL_93:
      v81 = v71;
      if (*(_WORD *)(*(_QWORD *)(v78 + 64) + 2 * v70) == 1)
      {
        if (v77 < 1)
        {
          v81 = v71;
          if ((v77 & 0x80000000) == 0)
            goto LABEL_98;
          v77 = -v77;
          v82 = v77 >> 1;
          v83 = v150;
        }
        else
        {
          v82 = 1000 * *(__int16 *)(*(_QWORD *)(v78 + 40) + 2 * v70);
          v83 = v77 >> 1;
        }
        v81 = (int)(v82 + v83) / v77;
      }
LABEL_98:
      if (v79 == (_DWORD)i)
        return 2164269065;
      if (v81 <= 0x10)
        v84 = 16;
      else
        v84 = v81;
      if (v84 >= 0x3C1)
        v85 = 961;
      else
        v85 = v84;
      v86 = v33;
      v87 = v78;
      v88 = v68;
      v89 = v70;
      v6 = v71;
      writeToPeriVec_0(v165, i, v70);
      writeToPeriVec_0(v163, i, v85);
      v90 = *(_QWORD *)(v87 + 64);
      v33 = v86;
      if (*(_WORD *)(v90 + 2 * v89))
        v91 = 0;
      else
        v91 = v76;
      writeToPeriVec_0(v161, i, v91);
      v71 = v6;
      v70 = v89;
      v25 = v173;
      v27 = v140 - 1;
      LODWORD(v6) = v167;
      v22 = v175;
      v76 = 1 - v76;
      v67 += v85;
      if (v173)
        v68 = v88;
      else
        v68 = v67;
      LODWORD(i) = i + 1;
      ++v86[1];
      v93 = (_DWORD)v70 == (unsigned __int16)(v140 - 1) && v67 == 0;
      if (v67 + v169 > v68 && !v93)
        goto LABEL_121;
    }
  }
LABEL_58:
  v62 = *(_WORD *)(v17 + 4) + *(_WORD *)(v17 + 2) + *(_WORD *)(v17 + 6);
  v33[2] = 0;
  if (v140 >= v62)
  {
LABEL_65:
    v2 = v148;
    v13 = v144;
    v9 = v146;
    LOWORD(v15) = v142;
    LOWORD(v14) = v156;
    v5 = v139;
    v36 = v158;
    goto LABEL_31;
  }
  v63 = v140;
  v64 = v62;
  if (i <= 0x2710)
    v65 = 10000;
  else
    v65 = i;
  while (v65 != (_DWORD)i)
  {
    writeToPeriVec_0((uint64_t)(v33 + 4), i, v63);
    writeToPeriVec_0((uint64_t)(v33 + 16), i, 0);
    writeToPeriVec_0((uint64_t)(v33 + 28), i, *(_WORD *)(*(_QWORD *)(v17 + 40) + 2 * v63));
    LODWORD(i) = i + 1;
    ++v33[2];
    if (v64 == ++v63)
    {
      v3 = v154;
      goto LABEL_65;
    }
  }
  return 2164269065;
}

uint64_t concat_initUnit(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)(a1 + 21280) = a2;
  *(_DWORD *)(a1 + 21288) = a3;
  *(_DWORD *)(a1 + 21292) = a4;
  *(_DWORD *)(a1 + 21296) = 0;
  *(_BYTE *)(a1 + 21300) = 34;
  *(_DWORD *)(a1 + 21308) = 0;
  *(_DWORD *)(a1 + 21312) = 0;
  *(_DWORD *)(a1 + 21304) = a2 == -1;
  return 0;
}

uint64_t Psola_OutputFinalSilence(uint64_t *a1, uint64_t a2)
{
  int v4;

  v4 = (int)((double)(*(_DWORD *)(a2 + 100)
                                  * *(_DWORD *)(*(_QWORD *)(a2 + 104) + 40 * *(int *)(a2 + 96) - 32))
           / 1000.0);
  if (v4 >= 1)
    Psola_SynthSilence_0(a1, *(int **)(a2 + 16), v4, (int *)a2);
  Psola_FlushOlaBufPart_1(a1, *(_DWORD **)(a2 + 16), *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8) + **(_DWORD **)(a2 + 16));
  return 0;
}

_QWORD *Psola_Deinitialise(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = a2[2];
  if (v4)
    heap_Free(*(_QWORD **)(a1 + 8), v4);
  v5 = a2[3];
  if (v5)
    heap_Free(*(_QWORD **)(a1 + 8), v5);
  v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (*v6)
    {
      heap_Free(*(_QWORD **)(a1 + 8), *v6);
      v6 = (uint64_t *)a2[4];
    }
    if (v6[2])
    {
      heap_Free(*(_QWORD **)(a1 + 8), v6[2]);
      v6 = (uint64_t *)a2[4];
    }
    if (v6[4])
    {
      heap_Free(*(_QWORD **)(a1 + 8), v6[4]);
      v6 = (uint64_t *)a2[4];
    }
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v6);
  }
  v7 = (uint64_t *)a2[8];
  if (v7)
    freePeriDesc(a1, v7);
  v8 = (uint64_t *)a2[9];
  if (v8)
    freePeriDesc(a1, v8);
  v9 = a2[13];
  if (v9)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v9);
    a2[13] = 0;
  }
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a2);
}

float mfs_Wsola__fade_out(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  if (a3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = *(float **)(a2 + 16);
    v6 = a3;
    v7 = *(_QWORD *)(a4 + 16);
    do
    {
      result = *v5 * *(float *)(v7 + 4 * v4);
      *v5++ = result;
      v4 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t Wsola__write_audioX(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v8 = a4;
  v9 = heap_Calloc(*(_QWORD **)(*a1 + 8), a4, 2);
  if (v9)
  {
    v15 = v9;
    if (a4)
    {
      v16 = 0;
      do
      {
        *(_WORD *)(v9 + 2 * v16) = *(_WORD *)(a2 + 2 * (a3 + v16));
        ++v16;
      }
      while (v8 != v16);
      v17 = (void (*)(uint64_t, uint64_t, uint64_t))a1[4];
      if (v17)
        v17(a1[2], v9, v8);
    }
    heap_Free(*(_QWORD **)(*a1 + 8), v15);
    return 0;
  }
  else
  {
    log_wsola_Error(*a1, 59000, 0, v10, v11, v12, v13, v14);
    return 2164269066;
  }
}

uint64_t Wsola__write_audio(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  if (*((_DWORD *)a1 + 5348) == 1)
    return 0;
  v8 = a4;
  v9 = heap_Calloc(*(_QWORD **)(*a1 + 8), a4, 2);
  if (v9)
  {
    v15 = v9;
    if (a4)
    {
      v16 = 0;
      v17 = *(_QWORD *)(a2 + 16);
      do
      {
        *(_WORD *)(v9 + 2 * v16) = (int)*(float *)(v17 + 4 * (a3 + v16));
        ++v16;
      }
      while (v8 != v16);
      v18 = (void (*)(uint64_t, uint64_t, uint64_t))a1[4];
      if (v18)
        v18(a1[2], v9, v8);
    }
    heap_Free(*(_QWORD **)(*a1 + 8), v15);
    return 0;
  }
  log_wsola_Error(*a1, 59000, 0, v10, v11, v12, v13, v14);
  return 2164269066;
}

uint64_t Wsola__silence_output(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!a2)
    return 0;
  v4 = UNICORN__Vector__Create(*(_QWORD **)(*a1 + 8), a2);
  v7 = v4;
  *(_DWORD *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 12) = a2;
  v5 = Wsola__write_audio(a1, v4, 0, a2);
  UNICORN__Window__Remove(&v7);
  return v5;
}

uint64_t concat_initW(uint64_t a1, double a2)
{
  uint64_t v3;
  int v4;
  double v6;
  char v7;
  double v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 80) = 0;
  v3 = a1 + 80;
  v4 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 21392) = 0;
  *(_DWORD *)(a1 + 21272) = *(_DWORD *)(a1 + 21320) != 0;
  if (v4 <= 15999)
  {
    if (v4 != 8000 && v4 != 8018)
    {
      if (v4 == 11025)
      {
        LODWORD(a2) = *(_DWORD *)(a1 + 21324);
        v6 = (double)*(unint64_t *)&a2;
        v7 = 2;
        v8 = 11.025;
        goto LABEL_13;
      }
LABEL_19:
      log_wsola_Diag(*(_QWORD *)a1, 1, (uint64_t)"ERROR: Unsupported sampling rate = %d\n");
      return 2164269063;
    }
    goto LABEL_11;
  }
  if (v4 == 16000)
  {
LABEL_11:
    HIDWORD(v9) = 1083129856;
    v6 = (float)v4 / 1000.0;
    LODWORD(v9) = *(_DWORD *)(a1 + 21324);
    v8 = (double)v9;
    v7 = 1;
    goto LABEL_13;
  }
  if (v4 != 22050)
  {
    if (v4 != 16036)
      goto LABEL_19;
    goto LABEL_11;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 21324);
  v6 = (double)*(unint64_t *)&a2;
  v7 = 4;
  v8 = 22.05;
LABEL_13:
  v10 = (int)(v6 * v8) & 0xFFFFFFFC;
  *(_BYTE *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 88) = v10;
  *(_DWORD *)(a1 + 92) = v10 >> 1;
  *(_DWORD *)(a1 + 96) = 2 * v10;
  *(_DWORD *)(a1 + 100) = 3 * v10;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  if (!*(_QWORD *)(a1 + 128))
  {
    v11 = UNICORN__Vector__Create(*(_QWORD **)(*(_QWORD *)a1 + 8), 3 * v10);
    *(_QWORD *)(a1 + 128) = v11;
    if (!v11)
      return 2164269066;
  }
  v12 = *(_QWORD *)(a1 + 136);
  if (!v12)
  {
    v12 = UNICORN__Vector__Create(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_DWORD *)(a1 + 96));
    *(_QWORD *)(a1 + 136) = v12;
    if (!v12)
      return 2164269066;
  }
  UNICORN__Wsola__windowinit(v3, v12);
  return 0;
}

uint64_t concat_deinitW(uint64_t a1)
{
  UNICORN__Window__Remove((uint64_t *)(a1 + 144));
  UNICORN__Window__Remove((uint64_t *)(a1 + 136));
  return 0;
}

uint64_t concat_final_deinitW(uint64_t *a1)
{
  UNICORN__Window__Remove(a1 + 18);
  UNICORN__Window__Remove(a1 + 17);
  UNICORN__Window__Remove(a1 + 16);
  return 0;
}

uint64_t concat_volume(uint64_t a1, int a2, int a3)
{
  double v3;
  uint64_t v5;
  float *v6;
  float v7;
  int v8;

  v3 = *(double *)(a1 + 21336);
  if (v3 != 1.0 && a3 >= 1)
  {
    v5 = a3;
    v6 = (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16) + 4 * a2);
    do
    {
      v7 = v3 * *v6;
      *v6 = v7;
      v8 = -956301312;
      if (v7 < -32768.0 || (v8 = 1191181824, v7 > 32767.0))
        *(_DWORD *)v6 = v8;
      ++v6;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t concat_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, int a10, int a11)
{
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 21320) = a11 != 0;
  *(_DWORD *)(a9 + 76) = a10;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 16) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_DWORD *)(a9 + 56) = a8;
  return 0;
}

uint64_t concat_startSynthesis(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;

  v2 = Wsola__newunit_0(a1, a1 + 21280);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *(_DWORD *)(a1 + 92);
    if (v3)
    {
      Wsola__write_audio((uint64_t *)a1, *(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 120), v3);
      v4 = *(_DWORD *)(a1 + 92);
    }
    else
    {
      v4 = 0;
    }
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 120) + v4;
    Wsola__middle_0(a1);
    Wsola__tail_0(a1);
    *(_DWORD *)(a1 + 21328) = 1;
  }
  return v2;
}

uint64_t Wsola__newunit_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  char v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *__src;
  _QWORD v17[2];

  v4 = *(_DWORD *)(a2 + 8);
  v17[0] = 0;
  v17[1] = 0;
  v5 = *(_DWORD *)a2;
  if ((v5 & 0x80000000) == 0)
  {
    Lookup_GetUnitData(*(_QWORD **)(a1 + 24), v5, (uint64_t)v17);
    v4 = HIDWORD(v17[0]);
  }
  v6 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 116) = v6;
  v7 = *(_BYTE *)(a2 + 20);
  if ((v7 & 2) != 0)
  {
    v8 = *(_DWORD *)(a1 + 88);
    v9 = v4 >= v8;
    v10 = v4 - v8;
    if (v4 < v8)
      v8 = v4;
    v6 += v8;
    if (v9)
      v4 = v10;
    else
      v4 = 0;
    *(_DWORD *)(a1 + 116) = v6;
    *(_DWORD *)(a1 + 120) = v8;
  }
  if ((v7 & 0x20) != 0)
  {
    v6 += *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 116) = v6;
  }
  if (v6 > *(_DWORD *)(a1 + 108))
  {
    UNICORN__Window__Remove((uint64_t *)(a1 + 144));
    v11 = UNICORN__Vector__Create(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_DWORD *)(a1 + 116));
    *(_QWORD *)(a1 + 144) = v11;
    if (!v11)
      return 2164269066;
    v6 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)(a1 + 108) = v6;
  }
  v14 = 0;
  v15 = 0;
  __src = 0;
  if (*(_DWORD *)(a1 + 76))
    v12 = *(_DWORD *)(a2 + 24);
  else
    v12 = 0;
  result = concat_getSegment(a1, *(_DWORD *)a2, v4, v6, (uint64_t)&v14, v12);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 116) = HIDWORD(v15);
    bzero(*(void **)(*(_QWORD *)(a1 + 144) + 16), 4 * *(unsigned int *)(*(_QWORD *)(a1 + 144) + 8));
    if (__src)
      memcpy(*(void **)(*(_QWORD *)(a1 + 144) + 16), __src, 4 * *(int *)(a1 + 116));
    concat_volume(a1, 0, *(_DWORD *)(a1 + 116));
    if (*(_DWORD *)(a1 + 21316) == 1)
      concat_applyBPF(*(_QWORD *)a1, *(char **)(*(_QWORD *)(a1 + 144) + 16), *(_DWORD *)(a1 + 116));
    if (__src)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)__src);
    result = 0;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 12) + *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 112) = 0;
  }
  return result;
}

uint64_t Wsola__middle_0(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if ((*(_BYTE *)(result + 21300) & 0x20) != 0)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 124);
    v3 = *(_DWORD *)(result + 112);
    v4 = *(_DWORD *)(result + 92) + v3;
    v5 = v2 - v4;
    if (v2 - v4 >= 1)
    {
      result = Wsola__write_audio((uint64_t *)result, *(_QWORD *)(result + 144), v3, v2 - v4);
      *(_DWORD *)(v1 + 112) += v5;
    }
  }
  return result;
}

uint64_t Wsola__tail_0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v1 = *(_DWORD *)(a1 + 92);
  v2 = *(int *)(a1 + 112);
  v3 = v1 + v2;
  v4 = *(_DWORD *)(a1 + 124);
  if ((int)v2 <= v4)
    v1 = v1 + v2 - v4;
  if (v3 <= v4)
    v5 = 0;
  else
    v5 = v1;
  v6 = *(int *)(a1 + 116) - v2;
  *(_DWORD *)(a1 + 21312) = v5;
  if (*(_DWORD *)(a1 + 21272))
    *(_DWORD *)(*(_QWORD *)(a1 + 128) + 12) = v6;
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16);
    v10 = 4 * v2;
    do
    {
      v11 = 0;
      if (v8 < v6)
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16) + v10 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v8++) = v11;
    }
    while (v7 != v8);
  }
  return Lookup_DeInit(*(uint64_t **)(a1 + 24));
}

uint64_t concat_midSynthesis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  float v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  double v29;
  unsigned int v30;
  unint64_t v31;
  float v32;
  double v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  uint64_t v47;
  double v48;
  unsigned int v49;
  float v50;
  double v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  float *v65;
  float *v66;
  float *v67;
  unint64_t v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float *v78;
  unsigned int v79;
  float v80;
  unsigned int v81;
  float v82;
  float v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  double v87;
  float *v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float *v94;
  float *v95;
  unint64_t v96;
  float *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float *v107;
  unsigned int v108;
  unsigned int v109;
  float v110;
  float v111;
  float v112;
  unsigned int v113;
  unsigned int v114;
  _DWORD *v115;
  uint64_t v116;
  float v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  unsigned int v127;
  int v128;
  int v129;
  unsigned int v130;
  BOOL v131;
  int v132;
  uint64_t v134;
  float *v135;
  int v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  float __dst[1];
  int v142;
  _DWORD v143[2640];
  uint64_t v144;

  v1 = MEMORY[0x1E0C80A78](a1);
  v144 = *MEMORY[0x1E0C80C00];
  v2 = Wsola__newunit_0(v1, v1 + 21280);
  v3 = v2;
  if ((v2 & 0x80000000) != 0)
    return v3;
  v4 = *(_DWORD *)(v1 + 21272);
  if ((v4 - 1) >= 2)
  {
    if (v4)
    {
      v30 = 0;
      v19 = *(_QWORD *)(v1 + 128);
      LODWORD(v31) = *(_DWORD *)(v1 + 88);
    }
    else
    {
      v19 = *(_QWORD *)(v1 + 128);
      v20 = *(_QWORD *)(v1 + 144);
      v21 = *(unsigned int *)(v1 + 96);
      if ((_DWORD)v21)
      {
        v22 = *(const void **)(v20 + 16);
        memcpy(__dst, *(const void **)(v19 + 16), 4 * v21);
        memcpy(v143, v22, 4 * v21);
      }
      v23 = *(_DWORD *)(v1 + 100);
      if (v21 < v23)
        memcpy(&v143[v21], (const void *)(*(_QWORD *)(v20 + 16) + 4 * v21), 4 * (v23 + ~(_DWORD)v21) + 4);
      v24 = *(unsigned __int8 *)(v1 + 104);
      if ((_DWORD)v21)
      {
        v25 = 0;
        v26 = 0.0;
        v27 = 0.0;
        do
        {
          v28 = *(float *)&v143[v25];
          v26 = v26 + (float)(v28 * v28);
          v27 = v27 + (float)(v28 * __dst[v25]);
          v25 += v24;
        }
        while (v25 < v21);
        v29 = v27;
      }
      else
      {
        v26 = 0.0;
        v29 = 0.0;
      }
      v105 = 250.0;
      if (v26 >= 250.0)
        v105 = v26;
      v106 = v29 / sqrt(v105);
      v31 = *(unsigned int *)(v1 + 88);
      if (v31 >= v24)
      {
        v30 = 0;
        v107 = (float *)v143;
        v108 = *(unsigned __int8 *)(v1 + 104);
        do
        {
          if ((_DWORD)v21)
          {
            v109 = 0;
            v110 = 0.0;
            do
            {
              v110 = v110 + (float)(v107[v24 + v109] * __dst[v109]);
              v109 += v24;
            }
            while (v109 < v21);
          }
          else
          {
            v110 = 0.0;
          }
          v26 = (float)(v26 - (float)(*v107 * *v107)) + (float)(v107[v21] * v107[v21]);
          v111 = 250.0;
          if (v26 >= 250.0)
            v111 = v26;
          v112 = v110 / sqrt(v111);
          if (v106 < v112)
          {
            v30 = v108;
            v106 = v112;
          }
          v108 += v24;
          v107 += v24;
        }
        while (v108 <= v31);
      }
      else
      {
        v30 = 0;
      }
      if ((_DWORD)v24 != 1)
      {
        v113 = (v30 - (v24 >> 1)) & ~((int)(v30 - (v24 >> 1)) >> 31);
        v114 = v30 + (v24 >> 1);
        if (v114 >= v31)
          v114 = *(_DWORD *)(v1 + 88);
        if (v113 <= v114)
        {
          v115 = &v143[v113];
          do
          {
            if ((_DWORD)v21)
            {
              v116 = 0;
              v117 = 0.0;
              v118 = 0.0;
              do
              {
                v119 = *(float *)&v115[v116];
                v117 = v117 + (float)(v119 * v119);
                v118 = v118 + (float)(v119 * __dst[v116++]);
              }
              while (v21 != v116);
            }
            else
            {
              v118 = 0.0;
              v117 = 0.0;
            }
            if (v117 < 250.0)
              v117 = 250.0;
            v120 = v118 / sqrt(v117);
            if (v106 < v120)
            {
              v30 = v113;
              v106 = v120;
            }
            ++v115;
            ++v113;
          }
          while (v113 <= v114);
        }
      }
      if ((_DWORD)v31)
      {
        v121 = 0;
        v122 = *(_QWORD *)(v19 + 16);
        v123 = *(_QWORD *)(v20 + 16) + 4 * v30;
        v124 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 16);
        do
        {
          v125 = (float)(*(float *)(v124 + v121) * *(float *)(v123 + v121))
               + (float)(*(float *)(v124 + 4 * v31 + v121) * *(float *)(v122 + v121));
          if (v125 >= 0.0)
            v126 = 0.5;
          else
            v126 = -0.5;
          *(float *)(v122 + v121) = v125 + v126;
          v121 += 4;
        }
        while (4 * v31 != v121);
      }
    }
    goto LABEL_154;
  }
  v140 = v2;
  v5 = *(_QWORD *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 144);
  v7 = *(unsigned int *)(v1 + 100);
  if ((_DWORD)v7)
    bzero((void *)(v1 + 152), 4 * v7);
  v8 = *(unsigned int *)(v1 + 96);
  if ((_DWORD)v8)
  {
    v9 = *(const void **)(v6 + 16);
    memcpy(__dst, *(const void **)(v5 + 16), 4 * v8);
    memcpy(v143, v9, 4 * v8);
  }
  if (v8 < v7)
    memcpy(&v143[v8], (const void *)(*(_QWORD *)(v6 + 16) + 4 * v8), 4 * (v7 + ~(_DWORD)v8) + 4);
  v10 = 0.0;
  if ((_DWORD)v8)
  {
    v11 = __dst;
    v12 = (float *)v143;
    v13 = v8;
    v14 = 0.0;
    do
    {
      v15 = *v12++;
      v16 = v15;
      v10 = v10 + (float)(v16 * v16);
      v17 = *v11++;
      v14 = v14 + (float)(v16 * v17);
      --v13;
    }
    while (v13);
    v18 = v14;
  }
  else
  {
    v18 = 0.0;
  }
  v32 = 250.0;
  if (v10 >= 250.0)
    v32 = v10;
  v33 = v18 / sqrt(v32);
  v34 = v33;
  *(float *)(v1 + 152) = v34;
  if (v4)
  {
    v35 = *(_DWORD *)(v5 + 12);
    if (v8 < v35)
      v35 = v8;
  }
  else
  {
    v35 = 0;
  }
  v31 = *(unsigned int *)(v1 + 88);
  if (!(_DWORD)v31)
  {
    v30 = 0;
    v39 = v33;
    goto LABEL_58;
  }
  v30 = 0;
  if ((v31 + 1) > 2)
    v36 = (v31 + 1);
  else
    v36 = 2;
  v37 = (float *)v143;
  v38 = 1;
  v39 = v33;
  do
  {
    if (v4)
    {
      if (!v35)
        goto LABEL_45;
      v40 = 0;
      v41 = 0.0;
      do
      {
        v41 = v41 + (float)(v37[v40 + 1] * __dst[v40]);
        ++v40;
      }
      while (v35 != v40);
    }
    else
    {
      if (!(_DWORD)v8)
      {
LABEL_45:
        v41 = 0.0;
        goto LABEL_46;
      }
      v42 = 0;
      v41 = 0.0;
      do
      {
        v41 = v41 + (float)(v37[v42 + 1] * __dst[v42]);
        ++v42;
      }
      while (v8 != v42);
    }
LABEL_46:
    v10 = (float)(v10 - (float)(*v37 * *v37)) + (float)(v37[v8] * v37[v8]);
    ++v37;
    v43 = 250.0;
    if (v10 >= 250.0)
      v43 = v10;
    v44 = v41 / sqrt(v43);
    *(float *)(v1 + 4 * v38 + 152) = v44;
    if (v39 < v44)
    {
      v30 = v38;
      v39 = v44;
    }
    ++v38;
  }
  while (v38 != v36);
  if (v31 >= 3
    && v30 > (int)v31 - 2
    && (v45 = *(float *)(v1 + 152 + 4 * v31), v45 >= *(float *)(v1 + 152 + 4 * (v31 - 1)))
    && v45 >= *(float *)(v1 + 4 * (v31 - 2) + 152))
  {
    if ((int)v31 >= 2)
      v46 = 2;
    else
      v46 = v31;
    if ((int)v31 >= 2)
      v136 = 2;
    else
      v136 = v31;
    v137 = 24;
    v138 = v31;
    while (v136 != (_DWORD)v138)
    {
      if (*(float *)(v1 + 152 + 4 * v138) < *(float *)(v1 + 4 * (v138 - 1) + 152))
      {
        LODWORD(v47) = 1;
        v46 = v138;
        goto LABEL_62;
      }
      --v138;
      LODWORD(v47) = 1;
      v137 -= 4;
      if (!v137)
      {
        v46 = v31 - 6;
        goto LABEL_62;
      }
    }
LABEL_61:
    LODWORD(v47) = 1;
  }
  else
  {
    if ((int)v30 > 1)
      goto LABEL_60;
LABEL_58:
    if (*(float *)(v1 + 156) > v34 || *(float *)(v1 + 160) > v34)
    {
LABEL_60:
      v46 = v31 - 1;
      goto LABEL_61;
    }
    v134 = 0;
    v46 = v31 - 1;
    v47 = ((_DWORD)v31 - 2) & ~(((int)v31 - 2) >> 31);
    v135 = (float *)(v1 + 156);
    while (v47 != v134)
    {
      if (*(v135 - 1) < *v135)
      {
        LODWORD(v47) = v134;
        break;
      }
      ++v134;
      ++v135;
      if (v134 == 6)
      {
        LODWORD(v47) = 6;
        break;
      }
    }
  }
LABEL_62:
  if (v47 <= v46)
  {
    v48 = -1.0;
    v49 = v30;
    do
    {
      if ((_DWORD)v47)
      {
        v50 = *(float *)(v1 + 152 + 4 * v47);
        if (v50 >= *(float *)(v1 + 152 + 4 * (v47 - 1)))
        {
          v52 = v50 < *(float *)(v1 + 4 * (v47 + 1) + 152);
          v51 = v50;
          v52 = !v52 && v48 < v51;
          if (v52)
          {
            v48 = v51;
            v49 = v47;
          }
        }
      }
      LODWORD(v47) = v47 + 1;
    }
    while (v47 <= v46);
    v53 = v48 <= 0.0 || v30 == v49;
    if (!v53 && v48 * 1.4 >= v39)
      v30 = v49;
  }
  if ((v31 + 1) > 1)
    v54 = (v31 + 1);
  else
    v54 = 1;
  v55 = (float *)(v1 + 152);
  v56 = 0.0;
  do
  {
    v57 = *v55++;
    v58 = v57;
    if (v56 < v57)
      v56 = v58;
    --v54;
  }
  while (v54);
  v59 = v56 * 1.2;
  *(float *)(v1 + 4 * v30 + 152) = v59;
  v60 = *(float **)(v5 + 16);
  v61 = v31 >> 1;
  v62 = -(v31 >> 2);
  v63 = (int)v31 >> 1;
  v64 = ((int)v31 >> 1) - (v31 >> 2);
  v139 = *(_QWORD *)(v6 + 16);
  if (v31 >= 2 && v63 >= (int)(v31 >> 2))
  {
    v65 = (float *)((char *)v60 + 4 * v63 - (v31 & 0xFFFFFFFC));
    v66 = (float *)(*(_QWORD *)(v6 + 16) + 4 * v30 + 4 * v63 - (v31 & 0xFFFFFFFC));
    v67 = (float *)v143;
    v68 = v31 >> 1;
    do
    {
      v69 = *v66++;
      v70 = v69;
      v71 = *v65++;
      *v67++ = (float)(v71 * v71) + (float)(v70 * v70);
      --v68;
    }
    while (v68);
    v72 = (v61 - 1);
    __dst[v72] = 1.0e31;
    if (v31 >= 6)
    {
      v73 = v143;
      v74 = 1;
      do
      {
        v75 = 0;
        v76 = 0.0;
        do
          v76 = v76 + *(float *)&v73[v75++];
        while (v75 != 3);
        __dst[v74++] = v76;
        ++v73;
      }
      while (v74 != v72);
      v77 = v72 - 1;
      v78 = (float *)&v142;
      v79 = 1 - (v31 >> 2);
      v80 = 1.0e31;
      v81 = -(v31 >> 2);
      do
      {
        v82 = *v78++;
        v83 = v82;
        if (v82 < v80)
        {
          v81 = v79;
          v80 = v83;
        }
        ++v79;
        --v77;
      }
      while (v77);
      if (v80 < 1.0e31)
        v62 = v81;
    }
  }
  if ((v64 & 0x80000000) == 0)
  {
    v84 = v62 + v64;
    if ((int)(v62 + v64) < 1)
    {
      v85 = 0;
    }
    else
    {
      bzero(v143, 4 * (v62 + v64));
      memset_pattern16(__dst, &unk_1DECECF10, 4 * v84);
      v85 = v84;
    }
    if ((int)v85 < (int)v31)
    {
      bzero(&__dst[v85], 4 * (v31 - v85));
      memset_pattern16(&v143[v85], &unk_1DECECF10, 4 * (v31 - v85));
    }
    if (v31 >= 2)
    {
      v86 = 0;
      v87 = (float)(int)v61 + (float)(int)v61;
      v88 = &__dst[v84];
      v89 = (float *)&v143[v84];
      do
      {
        v90 = cos(((float)v86 + (float)v86) * 3.14159265 / v87);
        v91 = v90 * -0.5 + 0.5;
        *v89++ = v91;
        v92 = cos(((float)(int)v61 + (float)(int)v61) * 3.14159265 / v87);
        v93 = v92 * -0.5 + 0.5;
        *v88++ = v93;
        ++v86;
        LODWORD(v61) = v61 - 1;
      }
      while ((_DWORD)v61);
    }
  }
  if ((_DWORD)v31)
  {
    v94 = (float *)v143;
    v95 = __dst;
    v96 = v31;
    v97 = (float *)(v139 + 4 * v30);
    do
    {
      v98 = *v95++;
      v99 = v98;
      v100 = *v94++;
      v101 = v100;
      v102 = *v97++;
      v103 = (float)(v101 * v102) + (float)(v99 * *v60);
      if (v103 >= 0.0)
        v104 = 0.5;
      else
        v104 = -0.5;
      *v60++ = v103 + v104;
      --v96;
    }
    while (v96);
  }
  v19 = v5;
  v3 = v140;
LABEL_154:
  Wsola__write_audio((uint64_t *)v1, v19, 0, v31);
  v127 = *(_DWORD *)(v1 + 92) - v30;
  v128 = *(_DWORD *)(v1 + 21292) + v127;
  *(_DWORD *)(v1 + 21292) = v128;
  *(_DWORD *)(v1 + 21296) = v127;
  if (v128 < 0)
    *(_DWORD *)(v1 + 21292) = 0;
  v129 = *(_DWORD *)(v1 + 124);
  v130 = *(_DWORD *)(v1 + 120) + v30;
  *(_DWORD *)(v1 + 112) = v130;
  v131 = __OFSUB__(v130, v129);
  v132 = v130 - v129;
  if ((v132 < 0) ^ v131 | (v132 == 0))
    v132 = 0;
  *(_DWORD *)(v1 + 21308) = v132;
  Wsola__middle_0(v1);
  Wsola__tail_0(v1);
  return v3;
}

uint64_t concat_endSynthesis(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1 + 21328;
  if (a2)
  {
    *(_BYTE *)(a1 + 21384) = 1;
    Wsola__write_audio((uint64_t *)a1, *(_QWORD *)(a1 + 128), 0, *(_DWORD *)(a1 + 92));
  }
  *(_BYTE *)(v3 + 56) = 0;
  *(_DWORD *)v3 = 0;
  UNICORN__Window__Remove((uint64_t *)(a1 + 128));
  return 0;
}

uint64_t Psola_AssignPeriRangesDyna(unsigned __int16 *a1)
{
  unsigned __int16 v1;
  uint64_t v2;
  uint64_t v4;
  __int16 *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1[3];
  v2 = (unsigned __int16)(a1[2] + a1[1] + v1);
  if (a1[2] + a1[1] + v1)
  {
    v4 = 0;
    a1[1] = 0;
    v5 = (__int16 *)*((_QWORD *)a1 + 2);
    while (*v5 < 0)
    {
      a1[1] = ++v4;
      ++v5;
      if (v2 == v4)
      {
        a1[2] = 0;
LABEL_16:
        a1[3] = v2 - v4;
        return 0;
      }
    }
    a1[2] = 0;
    if (v4 >= v2)
      goto LABEL_16;
    v6 = 0;
    v7 = v2 - v4;
    v8 = *a1;
    do
    {
      v9 = *v5++;
      if (v9 >= v8)
        break;
      a1[2] = ++v6;
      --v7;
    }
    while (v7);
    a1[3] = v2 - (v4 + v6);
    if (!(_WORD)v4 && v6)
    {
      a1[1] = 1;
      if (v6 == 1)
      {
        v10 = (v2 - 1);
        if ((_DWORD)v2 != 1)
        {
          do
          {
            writeToPeriVec_0((uint64_t)(a1 + 4), v2, *(_WORD *)(*((_QWORD *)a1 + 2) + 2 * v10));
            writeToPeriVec_0((uint64_t)(a1 + 16), v2, *(_WORD *)(*((_QWORD *)a1 + 5) + 2 * v10));
            writeToPeriVec_0((uint64_t)(a1 + 28), v2, *(_WORD *)(*((_QWORD *)a1 + 8) + 2 * v10));
            LODWORD(v2) = v2 - 1;
            --v10;
          }
          while ((_DWORD)v10);
        }
        writeToPeriVec_0((uint64_t)(a1 + 16), 1u, **((__int16 **)a1 + 5) / 2);
        writeToPeriVec_0((uint64_t)(a1 + 16), 0, **((_WORD **)a1 + 5) - *(_WORD *)(*((_QWORD *)a1 + 5) + 2));
        writeToPeriVec_0((uint64_t)(a1 + 4), 1u, **((_WORD **)a1 + 5) + **((_WORD **)a1 + 2));
        v11 = (uint64_t)(a1 + 28);
        writeToPeriVec_0(v11, 0, 0);
        writeToPeriVec_0(v11, 1u, 0);
      }
      else
      {
        a1[2] = v6 - 1;
      }
    }
  }
  return 0;
}

void Psola_AddToOlaBuf_1(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v10;
  int v11;
  BOOL v12;
  _BYTE v13[2];

  if (*a2 <= a5)
  {
    v5 = a5;
    v6 = a4;
    if (a4 < 1)
    {
      Psola_AddToOlaBufAux_1(a1, a2, (uint64_t)v13, 0, 0, a5);
    }
    else
    {
      v10 = 0;
      do
      {
        if (v6 >= 2400)
          v11 = 2400;
        else
          v11 = v6;
        Psola_AddToOlaBufAux_1(a1, a2, a3, v10, v11, v5);
        v10 += v11;
        v5 += v11;
        v12 = __OFSUB__(v6, v11);
        v6 -= v11;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
}

void Psola_AddToOlaBufAux_1(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _WORD *v17;
  __int16 *v18;
  int v19;
  __int16 v20;
  int v21;
  _WORD *v22;
  __int16 *v23;
  __int16 v24;
  int v25;

  v11 = a6 + a5;
  v12 = a6 + a5 - 2400;
  v13 = *a2;
  if (v12 > *a2)
  {
    Psola_FlushOlaBufPart_1(a1, a2, v12);
    v13 = *a2;
  }
  v14 = (a6 - v13 + a2[1]) % 2400;
  if (2400 - v14 >= a5)
    v15 = a5;
  else
    v15 = 2400 - v14;
  v16 = a5 - v15;
  if (v15 >= 1)
  {
    v17 = (_WORD *)a2 + v14 + 6;
    v18 = (__int16 *)(a3 + 2 * a4);
    v19 = v15;
    do
    {
      v20 = *v18++;
      *v17++ += v20;
      --v19;
    }
    while (v19);
  }
  if (v16 >= 1)
  {
    v21 = v15 + a4;
    v22 = a2 + 3;
    v23 = (__int16 *)(a3 + 2 * v21);
    do
    {
      v24 = *v23++;
      *v22++ += v24;
      --v16;
    }
    while (v16);
  }
  v25 = v11 - v13;
  if (a2[2] > v25)
    v25 = a2[2];
  a2[2] = v25;
}

__int16 *Psola_ApplyHanning_1(__int16 *result, int *a2, __int16 *a3, int a4, int a5)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  if (a4)
  {
    if (*a2 != a4)
    {
      if (a4 >= 1)
      {
        v5 = 0;
        v6 = result;
        do
        {
          *v6++ = HanningTab_1[(int)v5 / a4]
                + (HanningTab_1[(int)v5 / a4 + 1] - HanningTab_1[(int)v5 / a4]) * ((int)v5 % a4) / a4;
          v5 += 200;
        }
        while (200 * a4 != v5);
      }
      *a2 = a4;
    }
    if (a5)
    {
      if (a4 >= 1)
      {
        v7 = a4;
        do
        {
          v8 = *result++;
          *a3 = v8 * *a3 / 0x8000;
          ++a3;
          --v7;
        }
        while (v7);
      }
    }
    else if (a4 >= 1)
    {
      v9 = a4;
      do
      {
        v10 = *result++;
        *a3 = (0x7FFF - v10) * *a3 / 0x8000;
        ++a3;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t synth_bet4_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ISynth_Bet4;
  return result;
}

uint64_t synth_bet4_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2164269063;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 9357;
  }
  return result;
}

uint64_t synth_bet4_ClassClose()
{
  return 0;
}

uint64_t synth_bet4_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Int;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  __int128 v50;
  uint64_t (*v51)(uint64_t, char *, const char *);
  char *__s1;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;

  Object = 2164269066;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  __s1 = 0;
  v50 = xmmword_1EA94AA18;
  v51 = synth_bet4_loc_ParamLearnChange;
  if (!a5)
    return 2164269063;
  inited = InitRsrcFunction(a3, a4, &v55);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((safeh_HandleCheck(a1, a2, 9357, 408) & 0x80000000) == 0)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    log_OutText(*(_QWORD *)(v55 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Entering synth_bet4_ObjOpen", v12, v13, v14, v47);
    v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v55 + 8), 1, 22680);
    if (v15)
    {
      v20 = (uint64_t)v15;
      *v15 = a3;
      v15[1] = a4;
      v21 = v55;
      v15[2] = v55;
      v15[3] = a1;
      v15[15] = 0;
      Int = critsec_ObjOpen(*(_QWORD *)(v21 + 16), *(_QWORD **)(v21 + 8), v15 + 4);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = synth_bet4_loc_ParamSet(v20, "rate_baseline", v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 40), (uint64_t)"rate", (int *)&v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = synth_bet4_loc_ParamSet(v20, "rate", v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = synth_bet4_loc_ParamSet(v20, "pitch_baseline", v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 40), (uint64_t)"pitch", (int *)&v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = synth_bet4_loc_ParamSet(v20, "pitch", v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      *(_QWORD *)&v50 = v20;
      Int = synth_bet4_loc_ParamGetListen(v20, "volume", 0, 100, 0x50u, &v50, (int *)&v53);
      if ((Int & 0x80000000) != 0)
        goto LABEL_31;
      Int = synth_bet4_loc_ParamGetListen(v20, "rate_baseline", 50, 400, 0x64u, &v50, (int *)&v53);
      if ((Int & 0x80000000) != 0
        || (Int = synth_bet4_loc_ParamGetListen(v20, "rate", 50, 400, 0x64u, &v50, (int *)&v53), (Int & 0x80000000) != 0)
        || (Int = synth_bet4_loc_ParamGetListen(v20, "waitfactor", 0, 9, 2u, &v50, (int *)&v53), (Int & 0x80000000) != 0)
        || (Int = synth_bet4_loc_ParamGetListen(v20, "pitch_baseline", 50, 200, 0x64u, &v50, (int *)&v53),
            (Int & 0x80000000) != 0)
        || (Int = synth_bet4_loc_ParamGetListen(v20, "pitch", 50, 200, 0x64u, &v50, (int *)&v53), (Int & 0x80000000) != 0)
        || (Int = synth_bet4_loc_ParamGetListen(v20, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v50, (int *)&v53),
            (Int & 0x80000000) != 0)
        || (*(_DWORD *)(v20 + 72) = v53, Int = synth_bet4_loc_SynthInit(v20), (Int & 0x80000000) != 0))
      {
LABEL_31:
        Object = Int;
      }
      else
      {
        v23 = mfs_WSOLA__Create(*(_QWORD *)(v20 + 16), *(_WORD *)(v20 + 84));
        *(_QWORD *)(v20 + 21496) = v23;
        if (v23)
        {
          v28 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(v20 + 16) + 8), (*(_DWORD *)(v20 + 84) << 7) / 0x3E8uLL, 2);
          *(_QWORD *)(v20 + 21472) = v28;
          v29 = v55;
          if (v28)
          {
            Object = objc_GetObject(*(_QWORD *)(v55 + 48), (uint64_t)"SYNTHSTREAM", &v54);
            if ((Object & 0x80000000) == 0)
            {
              *(_QWORD *)(v20 + 40) = *(_QWORD *)(v54 + 8);
              if ((objc_GetObject(*(_QWORD *)(v55 + 48), (uint64_t)"AUDIOFETCHER", &v54) & 0x80000000) != 0)
              {
                v46 = *(_QWORD *)(v20 + 16);
              }
              else
              {
                v34 = v54;
                if (*(_BYTE *)v54 == 1)
                {
                  v35 = *(_QWORD *)(v54 + 8);
                  if (v35)
                  {
                    *(_QWORD *)(v20 + 48) = v35;
                    *(_OWORD *)(v20 + 56) = *(_OWORD *)(v34 + 16);
LABEL_44:
                    if (!Lookup_HasSupportForPsola(*(_QWORD *)(v20 + 120), (_DWORD *)(v20 + 22640), (_DWORD *)(v20 + 22644)))*(_QWORD *)(v20 + 22640) = 0;
                    if (!Lookup_HasSupportForWsola(*(_QWORD *)(v20 + 120), (_DWORD *)(v20 + 21420)))
                      *(_DWORD *)(v20 + 21420) = 0;
                    *(_DWORD *)(v20 + 22672) = 0;
                    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 40), (uint64_t)"bet4suppressbet3pcm", &__s1) & 0x80000000) == 0)
                    {
                      if (!strcmp(__s1, "yes"))
                        *(_DWORD *)(v20 + 22672) = 1;
                      paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 40));
                    }
                    *(_QWORD *)a5 = v20;
                    *(_DWORD *)(a5 + 8) = 9356;
                    goto LABEL_35;
                  }
                }
                objc_ReleaseObject(*(_QWORD *)(v55 + 48), (uint64_t)"AUDIOFETCHER");
                v46 = v55;
              }
              log_OutPublic(*(_QWORD *)(v46 + 32), (uint64_t)"SYNTH_BET4", 59001, 0, v30, v31, v32, v33, v48);
              goto LABEL_44;
            }
            v29 = *(_QWORD *)(v20 + 16);
            v45 = 59001;
          }
          else
          {
            v45 = 59000;
          }
        }
        else
        {
          v45 = 59000;
          v29 = v55;
        }
        log_OutPublic(*(_QWORD *)(v29 + 32), (uint64_t)"SYNTH_BET4", v45, 0, v24, v25, v26, v27, v48);
      }
      *(_QWORD *)a5 = v20;
      *(_DWORD *)(a5 + 8) = 9356;
      synth_bet4_ObjClose((_QWORD *)v20, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v16, v17, v18, v19, v48);
    }
LABEL_35:
    log_OutText(*(_QWORD *)(v55 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjOpen: %x", v36, v37, v38, Object);
    log_OutEvent(*(uint64_t ***)(v55 + 32), 24, &byte_1DEBD87CE, v39, v40, v41, v42, v43, v49);
    return Object;
  }
  return 2164269064;
}

uint64_t synth_bet4_ObjClose(_QWORD *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  int v28;
  uint64_t v30;
  int v31;
  int v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 9356, 22680);
  if (v3 < 0)
    return 2164269064;
  v7 = v3;
  v8 = a1[2];
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Entering synth_bet4_ObjClose", v4, v5, v6, v43);
  v9 = *(_QWORD *)(v8 + 40);
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v10 = paramc_ListenerRemove(v9, "volume", (__int128 *)&v44);
  v11 = *(_QWORD *)(v8 + 40);
  if (v10 >= 0)
    v12 = v7;
  else
    v12 = v10;
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v13 = paramc_ListenerRemove(v11, "rate", (__int128 *)&v44);
  v14 = *(_QWORD *)(v8 + 40);
  if (v13 < 0 && v12 > -1)
    v12 = v13;
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v16 = paramc_ListenerRemove(v14, "rate_baseline", (__int128 *)&v44);
  v17 = *(_QWORD *)(v8 + 40);
  if (v16 < 0 && v12 > -1)
    v12 = v16;
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v19 = paramc_ListenerRemove(v17, "waitfactor", (__int128 *)&v44);
  v20 = *(_QWORD *)(v8 + 40);
  if (v19 < 0 && v12 > -1)
    v12 = v19;
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v22 = paramc_ListenerRemove(v20, "pitch", (__int128 *)&v44);
  v23 = *(_QWORD *)(v8 + 40);
  if (v22 < 0 && v12 > -1)
    v12 = v22;
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v25 = paramc_ListenerRemove(v23, "pitch_baseline", (__int128 *)&v44);
  v26 = *(_QWORD *)(v8 + 40);
  if (v25 < 0 && v12 > -1)
    v12 = v25;
  v44 = a1;
  v45 = *(__int128 *)((char *)&xmmword_1EA94AA18 + 8);
  v28 = paramc_ListenerRemove(v26, "audiooutputbufsamples", (__int128 *)&v44);
  if (v28 >= 0 || v12 <= -1)
    v30 = v12;
  else
    v30 = v28;
  if (a1[5])
  {
    v31 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v30 > -1 && v31 < 0)
      v30 = v31;
    else
      v30 = v30;
  }
  if (a1[6])
  {
    v33 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"AUDIOFETCHER");
    if (v33 >= 0 || (int)v30 <= -1)
      v30 = v30;
    else
      v30 = v33;
  }
  if (a1[15])
  {
    v30 = Lookup_ObjClose(a1 + 15);
    a1[15] = 0;
  }
  if (a1[2687])
    mfs_WSOLA__Remove(a1 + 2687);
  v35 = a1[2684];
  if (v35)
    heap_Free(*(_QWORD **)(a1[2] + 8), v35);
  v36 = a1[4];
  if (v36)
  {
    v37 = critsec_ObjClose(v36);
    if ((int)v30 > -1 && v37 < 0)
      v30 = v37;
    else
      v30 = v30;
  }
  heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjClose: %x", v39, v40, v41, v30);
  return v30;
}

uint64_t synth_bet4_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if ((safeh_HandleCheck(a1, a2, 9356, 22680) & 0x80000000) != 0)
    return 2164269064;
  v6 = *(_QWORD *)(a1 + 16);
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Entering synth_bet4_ObjReopen", v3, v4, v5, v16);
  v10 = synth_bet4_loc_SynthInit(a1);
  if ((v10 & 0x80000000) == 0)
  {
    if (!Lookup_HasSupportForPsola(*(_QWORD *)(a1 + 120), (_DWORD *)(a1 + 22640), (_DWORD *)(a1 + 22644)))
      *(_QWORD *)(a1 + 22640) = 0;
    if (!Lookup_HasSupportForWsola(*(_QWORD *)(a1 + 120), (_DWORD *)(a1 + 21420)))
      *(_DWORD *)(a1 + 21420) = 0;
  }
  v11 = *(unsigned __int16 **)(a1 + 21496);
  if (v11 && *(_DWORD *)(a1 + 84) != *v11)
  {
    log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjReopen: Changing speaking rate", v7, v8, v9, v17);
    mfs_WSOLA__Remove((uint64_t *)(a1 + 21496));
    v12 = mfs_WSOLA__Create(*(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 84));
    *(_QWORD *)(a1 + 21496) = v12;
    if (v12)
      v13 = v10;
    else
      v13 = 2164269066;
    if ((v13 & 0x80000000) != 0)
    {
      v10 = v13;
    }
    else
    {
      v14 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 21472), ((*(_DWORD *)(a1 + 84) << 7) / 0x1F4u) & 0xFFFFFE);
      if (v14)
        *(_QWORD *)(a1 + 21472) = v14;
      else
        v10 = 2164269066;
    }
  }
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjReopen: %x", v7, v8, v9, v10);
  return v10;
}

uint64_t synth_bet4_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if ((safeh_HandleCheck(a1, a2, 9356, 22680) & 0x80000000) != 0)
    return 2164269064;
  synstrmaux_InitStreamOpener(a1 + 21552, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4");
  *(_BYTE *)(a1 + 21480) = 0;
  *(_DWORD *)(a1 + 22636) = 0;
  *(_OWORD *)(a1 + 22616) = 0u;
  *(_OWORD *)(a1 + 22656) = 0u;
  if (synstrmaux_BuildAudioContentType("audio/L16;rate=", *(_DWORD *)(a1 + 84), (char *)(a1 + 21504), 0x30uLL) > 0x2F)
    return 9;
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-bandpass-filter;version=4.0",
    0,
    a1 + 22456);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-f0begin;version=4.0",
    0,
    a1 + 22472);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-f0end;version=4.0",
    0,
    a1 + 22488);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-duration;version=4.0",
    0,
    a1 + 22504);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-maxfade-l;version=4.0",
    0,
    a1 + 22520);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-maxfade-r;version=4.0",
    0,
    a1 + 22536);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-adjacent-l;version=4.0",
    0,
    a1 + 22552);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-adjacent-r;version=4.0",
    0,
    a1 + 22568);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), a1 + 21504, 0, a1 + 22376);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 22392);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-usids;version=4.0",
    0,
    a1 + 22408);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-usoffsets;version=5.0",
    0,
    a1 + 22424);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-usdurs-32;version=5.0",
    0,
    a1 + 22440);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 21552), a1 + 21504, a1 + 22584);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    a1 + 22600);
  v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 21552), *(_QWORD *)(a1 + 40), a3, a4);
  if ((v8 & 0x80000000) != 0)
    synth_bet4_ProcessEnd(a1, a2);
  return v8;
}

uint64_t synth_bet4_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  _DWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  double v102;
  char *v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  const char *v107;
  char *v108;
  int *v109;
  BOOL v110;
  int v112;
  int *v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char *v131;
  unsigned int *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  _QWORD *v143;
  unsigned int v144;
  char *v145;
  unsigned int *v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int16 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  size_t v211;
  unsigned int v212;
  _DWORD *v213;
  unsigned int *v214;
  uint64_t v215;
  int *v216;
  unsigned int *v217;
  unint64_t v218;
  _DWORD *v219;
  _DWORD *v220;
  uint64_t *v221;
  _DWORD *v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _DWORD *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246[4];

  v245 = 0;
  *(_QWORD *)v246 = 0;
  v244 = 0;
  v243 = 0;
  v241 = 0;
  v242 = 0;
  v239 = 0;
  v240 = 0;
  v237 = 0;
  v238 = 0;
  v235 = 0;
  v236 = 0;
  v233 = 0;
  v234 = 0;
  v231 = 0;
  v232 = 0;
  v230 = 0;
  v7 = safeh_HandleCheck(a1, a2, 9356, 22680);
  if ((v7 & 0x80000000) != 0)
    return 2164269064;
  *a5 = 1;
  if (!*(_QWORD *)(a1 + 48))
    return v7;
  v229 = 0;
  v228 = 0;
  v226 = 0;
  v227 = 0;
  v225 = 0;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 40) + 80))(*(_QWORD *)(a1 + 22456), *(_QWORD *)(a1 + 22464), a1 + 21412, 4, &v225);
  if ((v8 & 0x80000000) != 0)
  {
    v23 = v8;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_64:
    log_OutPublic(v63, (uint64_t)"SYNTH_BET4", 59005, "%s%s%s%x", v9, v10, v11, v12, "contentType");
    return v23;
  }
  v13 = v225;
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, int *))(*(_QWORD *)(a1 + 40) + 144))(*(_QWORD *)(a1 + 22408), *(_QWORD *)(a1 + 22416), v246, &v243);
  if ((v14 & 0x80000000) != 0)
  {
    v23 = v14;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59004, "%s%x", v15, v16, v17, v18, "lhError");
    return v23;
  }
  v23 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, uint64_t *))(*(_QWORD *)(a1 + 40) + 144))(*(_QWORD *)(a1 + 22392), *(_QWORD *)(a1 + 22400), &v246[1], &v244);
  if ((v23 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59004, "%s%x", v19, v20, v21, v22, "lhError");
    return v23;
  }
  if (!v246[1])
  {
    if (!v243 || !(_DWORD)v244)
      goto LABEL_75;
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 21552), *(_QWORD *)(a1 + 40));
  }
  v24 = (*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, unsigned int *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22408), *(_QWORD *)(a1 + 22416), &v239, v246);
  if ((v24 & 0x80000000) != 0)
  {
    v23 = v24;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v25 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22424), *(_QWORD *)(a1 + 22432), &v238, &v245);
  if ((v25 & 0x80000000) != 0)
  {
    v23 = v25;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v26 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22440), *(_QWORD *)(a1 + 22448), &v237, (char *)&v244 + 4);
  if ((v26 & 0x80000000) != 0)
  {
    v23 = v26;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v27 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, unsigned int *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22472), *(_QWORD *)(a1 + 22480), &v236, &v229);
  if ((v27 & 0x80000000) != 0)
  {
    v23 = v27;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v28 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22488), *(_QWORD *)(a1 + 22496), &v235, &v228);
  if ((v28 & 0x80000000) != 0)
  {
    v23 = v28;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v29 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22504), *(_QWORD *)(a1 + 22512), &v234, (char *)&v227 + 4);
  if ((v29 & 0x80000000) != 0)
  {
    v23 = v29;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v30 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22520), *(_QWORD *)(a1 + 22528), &v233, &v227);
  if ((v30 & 0x80000000) != 0)
  {
    v23 = v30;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v31 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22536), *(_QWORD *)(a1 + 22544), &v232, (char *)&v226 + 4);
  if ((v31 & 0x80000000) != 0)
  {
    v23 = v31;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v32 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22552), *(_QWORD *)(a1 + 22560), &v231, &v226);
  if ((v32 & 0x80000000) != 0)
  {
    v23 = v32;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v33 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22568), *(_QWORD *)(a1 + 22576), &v230, (char *)&v225 + 4);
  if ((v33 & 0x80000000) != 0)
  {
    v23 = v33;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v34 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22376), *(_QWORD *)(a1 + 22384), &v242, (char *)&v245 + 4);
  if ((v34 & 0x80000000) != 0)
  {
    v23 = v34;
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  v23 = (*(uint64_t (**)(_QWORD, _QWORD, char **, unsigned int *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 22392), *(_QWORD *)(a1 + 22400), &v241, &v246[1]);
  if ((v23 & 0x80000000) != 0)
  {
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  if (!*(_DWORD *)(a1 + 22672))
  {
    v65 = v246[0];
    v66 = v245;
    if (HIDWORD(v244) < v245)
      v66 = HIDWORD(v244);
    if (v66 < v246[0])
      v65 = v66;
    v67 = v65 & 0xFFFFFFFC;
    do
    {
      if (!v67)
        goto LABEL_20;
      v68 = *(_DWORD *)((char *)v239 + v67 - 4);
      v67 -= 4;
    }
    while (v68 != -1);
    if (HIDWORD(v245) >> 1 < (*(_DWORD *)(v237 + v67) + *(_DWORD *)(v238 + v67)) * (*(_DWORD *)(a1 + 84) / 1000))
    {
LABEL_75:
      *a5 = 0;
      return v23;
    }
  }
LABEL_20:
  if (v246[1])
  {
    v35 = (*(uint64_t (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 22600), *(_QWORD *)(a1 + 22608), &v240);
    if ((v35 & 0x80000000) != 0)
    {
      v23 = v35;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v36, v37, v38, v39, "stream");
      return v23;
    }
  }
  v23 = critsec_Enter(*(_QWORD **)(a1 + 32));
  if ((v23 & 0x80000000) == 0)
  {
    v40 = v246[0];
    if (v246[0] >= v245)
      v40 = v245;
    if (v40 >= HIDWORD(v244))
      v40 = HIDWORD(v244);
    HIDWORD(v245) >>= 1;
    v246[0] = v40 >> 2;
    v41 = v246[1];
    v212 = v246[1] >> 5;
    v246[1] >>= 5;
    if (v41 < 0x20 || !v241 || !v240)
      goto LABEL_214;
    v221 = (uint64_t *)(a1 + 96);
    v211 = v41 & 0xFFFFFFE0;
    memcpy(v240, v241, v211);
    if (!v13)
      goto LABEL_79;
    v45 = (_DWORD *)(a1 + 22636);
    if (v229 > 4)
    {
      *v45 = 1;
      if (*(_DWORD *)(a1 + 22640) && *(_DWORD *)(a1 + 22644))
      {
        v46 = *(uint64_t ***)(a1 + 22648);
        if (v46)
        {
          v47 = *v46;
          if (*v46)
          {
            v48 = 0;
            v49 = 1;
            do
            {
              freePeriDesc(*(_QWORD *)(a1 + 16), v47);
              *(_QWORD *)(*(_QWORD *)(a1 + 22648) + 8 * v48) = 0;
              v46 = *(uint64_t ***)(a1 + 22648);
              v48 = v49;
              v47 = v46[v49++];
            }
            while (v47);
          }
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v46);
          *(_QWORD *)(a1 + 22648) = 0;
        }
        if ((Psola_Initialise((uint64_t *)(a1 + 22656), *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 22640), *(_DWORD *)(a1 + 22644)) & 0x80000000) != 0)log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v50, v51, v52, v53, v206);
        v54 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v246[0], 40);
        *(_QWORD *)(*(_QWORD *)(a1 + 22656) + 104) = v54;
        if (!v54)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v55, v56, v57, v58, v206);
        if ((synth_bet4_Psola_GetPeriDescs(a1, (uint64_t)v239, v246[0]) & 0x80000000) != 0)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v59, v60, v61, v62, v206);
        else
          *(_QWORD *)(*(_QWORD *)(a1 + 22656) + 128) = *(_QWORD *)(a1 + 22648);
        goto LABEL_79;
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"PMK data not available, PSOLA not possible", v42, v43, v44, v206);
    }
    *v45 = 0;
LABEL_79:
    v219 = (_DWORD *)(a1 + 22636);
    v214 = (unsigned int *)(a1 + 22624);
    v217 = (unsigned int *)(a1 + 22620);
    v69 = *(_DWORD *)(a1 + 22620);
    if (*(_DWORD *)(a1 + 22624) < v69)
      *v214 = v69;
    v70 = HIDWORD(v245);
    v213 = (_DWORD *)(a1 + 21484);
    *(_DWORD *)(a1 + 21484) = v239[v246[0] - 1] != -1;
    v71 = concat_init(*(_QWORD *)(a1 + 16), 0, 0, (uint64_t)&byte_1DEBD87CE, (uint64_t)synth_bet4_loc_WsolaOutputCB, a1, v242, v70, (uint64_t)v221, *(_DWORD *)(a1 + 22632), 0);
    if (v71 < 0)
    {
      LODWORD(v23) = v71;
      LODWORD(v78) = 0;
      goto LABEL_195;
    }
    LODWORD(v23) = concat_initW((uint64_t)v221, v72);
    if ((v23 & 0x80000000) != 0)
    {
      LODWORD(v78) = 0;
      goto LABEL_158;
    }
    v77 = 0;
    LODWORD(v78) = 0;
    v79 = (_DWORD *)(a1 + 21464);
    v216 = (int *)(a1 + 22668);
    v220 = (_DWORD *)(a1 + 21424);
    v222 = (_DWORD *)(a1 + 22616);
    v210 = (_BYTE *)(a1 + 21480);
    if (v212 <= 1)
      v80 = 1;
    else
      v80 = v212;
    v215 = v80;
    v82 = (_DWORD *)(a1 + 21484);
    v81 = (_DWORD *)(a1 + 22624);
    while (1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"*************************\\", v73, v74, v75, v207);
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"[%d/%d, %d/%d] => ", v83, v84, v85, v77);
      v86 = *(_QWORD *)(a1 + 16);
      v87 = &v241[32 * v77];
      v88 = *((_OWORD *)v87 + 1);
      v223 = *(_OWORD *)v87;
      v224 = v88;
      synth_bet4_loc_PrintMrkIn(v86, (unsigned int *)&v223, v89, v90, v91, v92, v93, v94);
      *v79 = 0;
      v95 = v240;
      v96 = &v240[32 * v77];
      *((_DWORD *)v96 + 3) = *v81;
      if (!*v82 && v77 == v246[1] - 1)
      {
        v97 = &v95[32 * v77];
        v100 = *((_DWORD *)v97 + 4);
        v98 = v97 + 16;
        v99 = v100;
        if (v100 >= 2)
          *v98 = v99 - 1;
      }
      v101 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 80) * *((_DWORD *)v96 + 4));
      v102 = *(double *)(a1 + 21440);
      v76.n128_f64[0] = (double)v101 * 100.0 / v102;
      *(_DWORD *)&v240[32 * v77 + 16] = (int)v76.n128_f64[0];
      v103 = v241;
      v104 = *(_DWORD *)&v241[32 * v77];
      switch(v104)
      {
        case 16:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
          v106 = *(_DWORD *)&v241[32 * v77 + 24];
          v107 = "pitch";
          goto LABEL_135;
        case 17:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
          v106 = *(_DWORD *)&v241[32 * v77 + 24];
          v107 = "timbre";
          goto LABEL_135;
        case 18:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
          v106 = *(_DWORD *)&v241[32 * v77 + 24];
          v107 = "rate";
          goto LABEL_135;
        case 19:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          v127 = 100 * *(_DWORD *)&v241[32 * v77 + 24];
          if (v127 <= 0x13947)
          {
            v129 = v127 / 0xC8;
            if (v129 <= 0x32)
              v128 = 50;
            else
              v128 = v129;
          }
          else
          {
            v128 = 400;
          }
          paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", v128);
          critsec_Enter(*(_QWORD **)(a1 + 32));
          goto LABEL_152;
        case 20:
        case 21:
        case 22:
        case 23:
          goto LABEL_153;
        case 24:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
          v106 = *(_DWORD *)&v241[32 * v77 + 24];
          v107 = "volume";
          goto LABEL_135;
        case 25:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
          v106 = *(_DWORD *)&v241[32 * v77 + 24];
          v107 = "waitfactor";
LABEL_135:
          paramc_ParamSetUInt(v105, (uint64_t)v107, v106);
          critsec_Enter(*(_QWORD **)(a1 + 32));
          goto LABEL_153;
        default:
          if (v104 == 8)
          {
            *(_QWORD *)(a1 + 21440) = 0x4059000000000000;
            if (*v219)
            {
              *v216 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v103[32 * v77 + 24]);
            }
            else
            {
              v136 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
              v137 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v103[32 * v77 + 24]);
              log_OutText(v136, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"XX:MARKERS_AFTER:inserting WSOLA silence of length %d\n", v138, v139, v140, v137);
              v141 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v241[32 * v77 + 24]);
              Wsola__silence_output(v221, v141);
            }
            *(double *)(a1 + 21440) = v102;
            v142 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v241[32 * v77 + 24]);
            *(_DWORD *)&v240[32 * v77 + 16] = v142;
            *v220 = 0;
            goto LABEL_152;
          }
          if (v104 != 33)
            goto LABEL_152;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"posCur: %d >= u32CurFrame: %d?\n", v73, v74, v75, *(unsigned int *)&v241[32 * v77 + 12]);
          v218 = v77 + 1;
          v78 = v78;
          break;
      }
      while (1)
      {
        if (v218 >= v246[1])
        {
          v109 = (int *)(a1 + 22636);
          if (v218 != v246[1])
          {
            v82 = (_DWORD *)(a1 + 21484);
            v81 = (_DWORD *)(a1 + 22624);
            v79 = (_DWORD *)(a1 + 21464);
            goto LABEL_153;
          }
        }
        else
        {
          v108 = v241;
          v109 = (int *)(a1 + 22636);
          if (*(_DWORD *)&v241[32 * v218 + 12] <= *v222)
            goto LABEL_144;
        }
        v110 = v78 >= v246[0] || v78 >= v245;
        if (v110 || v78 >= HIDWORD(v244))
          break;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"%d >= %d\n", v73, v74, v75, *(unsigned int *)&v241[32 * v77 + 12]);
        v112 = v239[v78];
        if (*v109)
        {
          v113 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 22656) + 104) + 40 * *(int *)(*(_QWORD *)(a1 + 22656) + 96));
          *v113 = v112;
          v113[1] = *(_DWORD *)(v238 + 4 * v78);
          v113[2] = *(_DWORD *)(v237 + 4 * v78);
          v113[3] = *(_DWORD *)(v236 + 4 * v78);
          v113[4] = *(_DWORD *)(v235 + 4 * v78);
          v113[5] = *(_DWORD *)(v234 + 4 * v78);
          v113[6] = *(_DWORD *)(v233 + 4 * v78);
          v113[7] = *(_DWORD *)(v232 + 4 * v78);
          v113[8] = *(_DWORD *)(v231 + 4 * v78);
          v113[9] = *(_DWORD *)(v230 + 4 * v78);
        }
        else
        {
          v114 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(v238 + 4 * v78));
          v115 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(v237 + 4 * v78));
          concat_initUnit((uint64_t)v221, v112, v114, v115);
        }
        *(_BYTE *)(a1 + 21481) = 1;
        if (*v220)
        {
          if (*v109)
          {
            Psola_Synthesis((uint64_t)v221, *(_QWORD *)(a1 + 22656));
          }
          else
          {
            LODWORD(v23) = concat_midSynthesis((uint64_t)v221);
            if ((v23 & 0x80000000) != 0)
              goto LABEL_214;
          }
        }
        else
        {
          v116 = *v109;
          if (*v239 != -1)
          {
            if (v116)
            {
LABEL_121:
              Psola_Synthesis((uint64_t)v221, *(_QWORD *)(a1 + 22656));
            }
            else
            {
              LODWORD(v23) = concat_midSynthesis((uint64_t)v221);
              if ((v23 & 0x80000000) != 0)
                goto LABEL_214;
            }
            *v220 = 1;
            goto LABEL_123;
          }
          if (v116)
            goto LABEL_121;
          concat_startSynthesis((uint64_t)v221);
        }
LABEL_123:
        *v222 += (float)((float)((float)((float)((float)*(unsigned int *)(a1 + 136) / 1000.0)
                                                     * (float)*(int *)(v237 + 4 * v78))
                                             / (float)*(unsigned int *)(a1 + 76))
                                     + 0.5);
        if (*v216)
        {
          Psola_SynthSilence_0(v221, *(int **)(*(_QWORD *)(a1 + 22656) + 16), *v216, *(int **)(a1 + 22656));
          *v216 = 0;
        }
        if (!*v109)
          *(_DWORD *)&v240[32 * v77 + 16] += (int)((double)(*(_DWORD *)(a1 + 21408)
                                                          + *(_DWORD *)(a1 + 21404)
                                                          + *(_DWORD *)(a1 + 21392))
                                                 * 100.0
                                                 / *(double *)(a1 + 21440));
        v117 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
        UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(v237 + 4 * v78));
        log_OutText(v117, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"pUnitsIn[%d]=%d, pSynth->u32CurSample=%d, concat_Dur2Sample: %d", v118, v119, v120, v78);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Synth outputting unit id %d , pSynth->u32CurSample=%d", v121, v122, v123, v239[v78]);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"pMrkOut[%d].lenCur = %d + (%d) = %d", v124, v125, v126, v77);
        ++v78;
      }
      if (v218 < v246[1])
      {
        v108 = v241;
LABEL_144:
        if (*(_DWORD *)&v108[32 * v218] == 8 && !*v219)
        {
          mfs_Wsola__fade_out(a1 + 176, *(_QWORD *)(a1 + 224), *(_DWORD *)(a1 + 188), *(_QWORD *)(a1 + 232));
          *v210 = 1;
          Wsola__write_audio(v221, *(_QWORD *)(a1 + 224), 0, *(_DWORD *)(a1 + 188));
          *v210 = 0;
          v130 = *(_DWORD *)(a1 + 180) + *v217;
          v131 = &v240[32 * v77];
          v133 = *((_DWORD *)v131 + 4);
          v132 = (unsigned int *)(v131 + 16);
          v134 = *(v132 - 1);
          if (v130 != v133 + v134)
          {
            v110 = v130 >= v134;
            v135 = v130 - v134;
            if (v135 != 0 && v110)
              *v132 = v135;
            else
              *(_DWORD *)&v240[32 * v246[1] - 16] = 0;
          }
        }
      }
LABEL_152:
      v82 = (_DWORD *)(a1 + 21484);
      v81 = (_DWORD *)(a1 + 22624);
      v79 = (_DWORD *)(a1 + 21464);
LABEL_153:
      *v81 = *(_DWORD *)&v240[32 * v77 + 16] + *(_DWORD *)&v240[32 * v77 + 12];
      if (++v77 == v215)
      {
LABEL_158:
        if (!*v219)
          concat_deinitW((uint64_t)v221);
        if ((v23 & 0x80000000) == 0)
        {
          if (v212 < v246[1] || v78 < v246[0])
          {
            *a5 = 2;
            *v217 += *(_DWORD *)(a1 + 180);
          }
          else
          {
            *a5 = 1;
            if (!*v213)
            {
              if (*v219)
              {
                Psola_OutputFinalSilence(v221, *(_QWORD *)(a1 + 22656));
                *(_BYTE *)(a1 + 21480) = 0;
                *(_DWORD *)(a1 + 21424) = 0;
              }
              else
              {
                concat_endSynthesis((uint64_t)v221, 1);
                v76.n128_f64[0] = mfs_WSOLA__Initialise(*(_QWORD *)(a1 + 21496));
              }
            }
            v143 = *(_QWORD **)(a1 + 22656);
            if (v143)
            {
              Psola_Deinitialise(*(_QWORD *)(a1 + 16), v143);
              *(_QWORD *)(a1 + 22656) = 0;
            }
            v144 = *v217 + *(_DWORD *)(a1 + 180);
            *v217 = v144;
            if (!*v213)
            {
              ++*(_DWORD *)(a1 + 22616);
              v145 = &v240[32 * v246[1] - 32];
              v147 = *((_DWORD *)v145 + 4);
              v146 = (unsigned int *)(v145 + 16);
              v148 = *(v146 - 1);
              if (v144 != v147 + v148)
              {
                v110 = v144 >= v148;
                v149 = v144 - v148;
                if (!v110)
                  v149 = 0;
                *v146 = v149;
                *v214 = v144;
              }
            }
            if (HIDWORD(v245))
            {
              LODWORD(v23) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22376), *(_QWORD *)(a1 + 22384), (2 * HIDWORD(v245)), v76);
              if ((v23 & 0x80000000) != 0)
                log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v150, v73, v74, v75, "contentType");
            }
          }
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Written %d (pSynth->stConcat.w.samples_output)", v73, v74, v75, *(unsigned int *)(a1 + 180));
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Current %d (pSynth->u32CurSample)", v151, v152, v153, *v217);
          v159 = 0;
          do
          {
            v160 = *(_QWORD *)(a1 + 16);
            v161 = v159;
            v162 = 32 * v159;
            v163 = *(_OWORD *)&v240[v162 + 16];
            v223 = *(_OWORD *)&v240[v162];
            v224 = v163;
            synth_bet4_loc_PrintMrkOut(v160, (int *)&v223, (uint64_t)&byte_1DEBD87CE, v154, v155, v156, v157, v158, v208);
            v164 = *(_QWORD *)(a1 + 16);
            v165 = &v240[32 * v161];
            v166 = *((_OWORD *)v165 + 1);
            v223 = *(_OWORD *)v165;
            v224 = v166;
            synth_bet4_loc_PrintMrkOut(v164, (int *)&v223, (uint64_t)"markereval:", v167, v168, v169, v170, v171, v209);
            if (*(_DWORD *)&v240[v162] == 33)
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Synth outputting phoneme marker [%c], off %d, len %d", v156, v157, v158, v240[32 * v161 + 24]);
            v159 = v161 + 1;
          }
          while (v212 > (unsigned __int16)(v161 + 1));
          if ((v23 & 0x80000000) == 0
            && ((*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 22600), *(_QWORD *)(a1 + 22608), v211) & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v172, v173, v174, v175, "stream");
          }
          v176 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22392), *(_QWORD *)(a1 + 22400), v211);
          if (v176 < 0)
          {
            LODWORD(v23) = v176;
            v187 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
          }
          else
          {
            v181 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22408), *(_QWORD *)(a1 + 22416), (4 * v78));
            if (v181 < 0)
            {
              LODWORD(v23) = v181;
              v187 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
            }
            else
            {
              v182 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22424), *(_QWORD *)(a1 + 22432), (4 * v78));
              if ((v182 & 0x80000000) == 0)
              {
                LODWORD(v23) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22440), *(_QWORD *)(a1 + 22448), (4 * v78));
                if ((v23 & 0x80000000) != 0)
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v183, v184, v185, v186, "contentType");
                goto LABEL_195;
              }
              LODWORD(v23) = v182;
              v187 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
            }
          }
          log_OutPublic(v187, (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v177, v178, v179, v180, "contentType");
        }
LABEL_195:
        if (*v219 == 1)
        {
          v188 = 4 * v78;
        }
        else
        {
          v188 = 4 * (*(_DWORD *)(a1 + 22664) == 0);
          *(_DWORD *)(a1 + 22664) = 1;
        }
        LODWORD(v225) = v188;
        if ((v23 & 0x80000000) == 0)
        {
          v189 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22472), *(_QWORD *)(a1 + 22480));
          if (v189 < 0)
          {
            LODWORD(v23) = v189;
            v203 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
          }
          else
          {
            v194 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22488), *(_QWORD *)(a1 + 22496), v225);
            if (v194 < 0)
            {
              LODWORD(v23) = v194;
              v203 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
            }
            else
            {
              v195 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22504), *(_QWORD *)(a1 + 22512), v225);
              if (v195 < 0)
              {
                LODWORD(v23) = v195;
                v203 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
              }
              else
              {
                v196 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22520), *(_QWORD *)(a1 + 22528), v225);
                if (v196 < 0)
                {
                  LODWORD(v23) = v196;
                  v203 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                }
                else
                {
                  v197 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22536), *(_QWORD *)(a1 + 22544), v225);
                  if (v197 < 0)
                  {
                    LODWORD(v23) = v197;
                    v203 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                  }
                  else
                  {
                    v198 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22552), *(_QWORD *)(a1 + 22560), v225);
                    if ((v198 & 0x80000000) == 0)
                    {
                      LODWORD(v23) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 22568), *(_QWORD *)(a1 + 22576), v225);
                      if ((v23 & 0x80000000) != 0)
                        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v199, v200, v201, v202, "contentType");
                      goto LABEL_214;
                    }
                    LODWORD(v23) = v198;
                    v203 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                  }
                }
              }
            }
          }
          log_OutPublic(v203, (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v190, v191, v192, v193, "contentType");
        }
LABEL_214:
        v204 = critsec_Leave(*(_QWORD **)(a1 + 32));
        if (v204 >= 0 || (int)v23 <= -1)
          return v23;
        else
          return v204;
      }
    }
  }
  return v23;
}

uint64_t synth_bet4_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  if ((safeh_HandleCheck(a1, a2, 9356, 22680) & 0x80000000) != 0)
    return 2164269064;
  *(_BYTE *)(a1 + 21480) = 0;
  *(_OWORD *)(a1 + 22616) = 0u;
  Lookup_DeInit(*(uint64_t **)(a1 + 120));
  if (!*(_DWORD *)(a1 + 22636))
    concat_endSynthesis(a1 + 96, 0);
  v3 = *(uint64_t ***)(a1 + 22648);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        freePeriDesc(*(_QWORD *)(a1 + 16), v4);
        *(_QWORD *)(*(_QWORD *)(a1 + 22648) + 8 * v5) = 0;
        v3 = *(uint64_t ***)(a1 + 22648);
        v5 = v6;
        v4 = v3[v6++];
      }
      while (v4);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v3);
    *(_QWORD *)(a1 + 22648) = 0;
  }
  v7 = *(_QWORD **)(a1 + 22656);
  if (v7)
  {
    Psola_Deinitialise(*(_QWORD *)(a1 + 16), v7);
    *(_QWORD *)(a1 + 22656) = 0;
  }
  mfs_WSOLA__Initialise(*(_QWORD *)(a1 + 21496));
  concat_final_deinitW((uint64_t *)(a1 + 96));
  return synstrmaux_CloseStreams((_WORD *)(a1 + 21552), *(_QWORD *)(a1 + 40));
}

uint64_t synth_bet4_loc_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t result;
  BOOL v8;

  if (!strcmp(__s1, "audiooutputbufsamples"))
  {
    if ((int)LH_atoi(a3) <= 0)
      result = 2164269071;
    else
      result = 0;
  }
  else if (!strcmp(__s1, "volume"))
  {
    if (LH_atoi(a3) <= 0x64)
      result = 0;
    else
      result = 2164269071;
  }
  else if (!strcmp(__s1, "rate"))
  {
    if (LH_atoi(a3) - 401 >= 0xFFFFFEA1)
      result = 0;
    else
      result = 2164269071;
  }
  else
  {
    if (!strcmp(__s1, "rate_baseline"))
    {
      v8 = __CFADD__(LH_atoi(a3) - 401, 351);
LABEL_25:
      if (v8)
        result = 0;
      else
        result = 2164269071;
      goto LABEL_28;
    }
    if (!strcmp(__s1, "ratewpm"))
    {
      result = 2164269057;
      goto LABEL_28;
    }
    if (strcmp(__s1, "waitfactor"))
    {
      if (strcmp(__s1, "pitch") && strcmp(__s1, "pitch_baseline"))
      {
        result = 0;
        goto LABEL_28;
      }
      v8 = __CFADD__(LH_atoi(a3) - 201, 151);
      goto LABEL_25;
    }
    if (LH_atoi(a3) <= 9)
      result = 0;
    else
      result = 2164269071;
  }
LABEL_28:
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet4_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  const char *v7;

  if (strcmp(__s1, "audiooutputbufsamples")
    && strcmp(__s1, "volume")
    && strcmp(__s1, "rate")
    && strcmp(__s1, "rate_baseline")
    && strcmp(__s1, "ratewpm")
    && strcmp(__s1, "waitfactor")
    && strcmp(__s1, "pitch")
    && strcmp(__s1, "pitch_baseline"))
  {
    return 0;
  }
  v7 = LH_atoi(a3);
  return synth_bet4_loc_ParamSet(a1, __s1, (uint64_t)v7);
}

uint64_t synth_bet4_loc_ParamSet(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v25;
  unsigned int v26;

  if (!strcmp(a2, "audiooutputbufsamples"))
  {
    v6 = 0;
    if (a3 <= 1)
      v19 = 1;
    else
      v19 = a3;
    *(_DWORD *)(a1 + 72) = v19;
  }
  else
  {
    v6 = critsec_Enter(*(_QWORD **)(a1 + 32));
    if ((v6 & 0x80000000) == 0)
    {
      if (!strcmp(a2, "volume"))
      {
        if (a3 <= 0x64)
        {
          if (a3 <= 0x50)
            v20 = (double)(int)a3 / 80.0;
          else
            v20 = ((double)(int)a3 + -80.0) / 20.0 + 1.0;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set volume %d (synth %f)", v7, v8, v9, a3);
          *(double *)(a1 + 21432) = v20;
          goto LABEL_29;
        }
      }
      else if (!strcmp(a2, "rate_baseline"))
      {
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          v26 = 0;
          *(_DWORD *)(a1 + 92) = a3;
          paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v26);
          synth_bet4_loc_ParamSet(a1, "rate", v26);
          v10 = 0;
          goto LABEL_30;
        }
      }
      else
      {
        if (strcmp(a2, "rate"))
        {
          v10 = 2164269071;
          if (!strcmp(a2, "ratewpm"))
          {
            v10 = 2164269057;
          }
          else if (!strcmp(a2, "waitfactor"))
          {
            if (a3 <= 9)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set wait factor %d (synth %f)", v11, v12, v13, a3);
              *(double *)(a1 + 21456) = (double)(int)a3;
              goto LABEL_29;
            }
          }
          else
          {
            if (!strcmp(a2, "pitch_baseline"))
            {
              v10 = synth_bet4_handle_pitch_baseline(a1, a3);
              goto LABEL_30;
            }
            if (strcmp(a2, "pitch"))
              goto LABEL_29;
            if ((a3 - 201) >= 0xFFFFFF69)
            {
              v14 = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 88), a3);
              v15 = (double)v14 + -100.0 + (double)v14 + -100.0;
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set pitch %d (synth %f)", v16, v17, v18, a3);
              *(double *)(a1 + 21448) = v15;
LABEL_29:
              v10 = v6;
            }
          }
LABEL_30:
          critsec_Leave(*(_QWORD **)(a1 + 32));
          return v10;
        }
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          v25 = (double)(int)MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 92), a3);
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set rate %d (synth %f)", v21, v22, v23, a3);
          *(double *)(a1 + 21440) = v25;
          goto LABEL_29;
        }
      }
      v10 = 2164269071;
      goto LABEL_30;
    }
  }
  return v6;
}

uint64_t synth_bet4_loc_ParamGetListen(uint64_t a1, _BYTE *a2, signed int a3, signed int a4, unsigned int a5, __int128 *a6, int *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  const char *v25;
  __int128 v26;
  uint64_t v27;

  if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, *a7 < a3)
    || (a5 = a4, *a7 > a4))
  {
    v14 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      v20 = v14;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v25 = "parameter";
      v23 = "%s%s";
      v22 = 59009;
      goto LABEL_8;
    }
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v26 = *a6;
  v27 = *((_QWORD *)a6 + 2);
  v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v22 = 59010;
    v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET4", v22, v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet4_loc_SynthInit(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t UInt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Str;
  size_t v10;
  uint64_t Int;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v20;
  char *__s2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *__s1[32];
  char __s[256];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v25 = 0;
  v20 = 0;
  __s2 = 0;
  v3 = (uint64_t *)(a1 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    Lookup_ObjClose((uint64_t *)(a1 + 120));
    *v3 = 0;
  }
  UInt = paramc_ParamGetUInt(*(_QWORD *)(v2 + 40), (uint64_t)"frequencyhz", (unsigned int *)(a1 + 84));
  if ((UInt & 0x80000000) != 0
    || (*(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 84),
        UInt = paramc_ParamGetUInt(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voiceframesize", (unsigned int *)(a1 + 80)),
        (UInt & 0x80000000) != 0)
    || (v23 = 0,
        v24 = 0,
        v22 = 0,
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 80) * *(_DWORD *)(a1 + 84) / 0x3E8u,
        UInt = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"voice", &v24),
        (UInt & 0x80000000) != 0))
  {
    v13 = UInt;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_22:
    log_OutPublic(v18, (uint64_t)"SYNTH_BET4", 59008, "%s%s", v5, v6, v7, v8, "parameter");
    return v13;
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"coder", &v23);
  if ((Str & 0x80000000) != 0
    || (Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"reduction", &v22), (Str & 0x80000000) != 0))
  {
    v13 = Str;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_22;
  }
  __s[0] = 0;
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  v10 = strlen(__s);
  LH_itoa(*(_DWORD *)(a1 + 84) / 0x3E8u, &__s[v10], 0xAu);
  if ((paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"datapackagename", &v20) & 0x80000000) == 0 && v20 && *v20)
  {
    Int = brokeraux_ComposeBrokerString(v2, __s, 0, 0, 0, 0, 0, (char *)__s1, 0x100uLL);
    if ((Int & 0x80000000) != 0)
      return Int;
    __strcpy_chk();
  }
  v12 = Lookup_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), (uint64_t)__s, v3);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = v12;
    *v3 = 0;
    return v13;
  }
  Lookup_GetComponentID(*v3, &__s2);
  if (!__s2 || !*__s2)
  {
LABEL_25:
    *(_DWORD *)(a1 + 22632) = 0;
    Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"volume", (int *)&v25);
    if ((Int & 0x80000000) == 0)
    {
      Int = synth_bet4_loc_ParamSet(a1, "volume", v25);
      if ((Int & 0x80000000) == 0)
      {
        Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v25);
        if ((Int & 0x80000000) == 0)
        {
          Int = synth_bet4_loc_ParamSet(a1, "rate_baseline", v25);
          if ((Int & 0x80000000) == 0)
          {
            Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v25);
            if ((Int & 0x80000000) == 0)
            {
              Int = synth_bet4_loc_ParamSet(a1, "rate", v25);
              if ((Int & 0x80000000) == 0)
              {
                Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", (int *)&v25);
                if ((Int & 0x80000000) == 0)
                {
                  Int = synth_bet4_loc_ParamSet(a1, "waitfactor", v25);
                  if ((Int & 0x80000000) == 0)
                  {
                    Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v25);
                    if ((Int & 0x80000000) == 0)
                    {
                      Int = synth_bet4_loc_ParamSet(a1, "pitch_baseline", v25);
                      if ((Int & 0x80000000) == 0)
                      {
                        Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v25);
                        if ((Int & 0x80000000) == 0)
                          return synth_bet4_loc_ParamSet(a1, "pitch", v25);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Int;
  }
  __s1[0] = 0;
  v13 = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"voicecomponentid", __s1);
  if ((v13 & 0x80000000) != 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_22;
  }
  if (!__s1[0] || !*__s1[0] || !strcmp(__s1[0], __s2))
    goto LABEL_25;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59013, "%s%s", v14, v15, v16, v17, "voice");
  return v13;
}

uint64_t synth_bet4_handle_pitch_baseline(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 - 201) < 0xFFFFFF69)
    return 2164269071;
  v7 = v2;
  v8 = v3;
  v6 = 0;
  *(_DWORD *)(a1 + 88) = a2;
  paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v6);
  synth_bet4_loc_ParamSet(a1, "pitch", v6);
  return 0;
}

uint64_t synth_bet4_Psola_GetPeriDescs(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;

  v6 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 8, (a3 + 1));
  *(_QWORD *)(a1 + 22648) = v6;
  if (!v6)
    return 2164269066;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 22648) + 8 * v7) = newPeriDesc(*(_QWORD *)(a1 + 16));
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 22648) + 8 * v7);
      if (!v9)
        return 2164269066;
      v10 = *(_DWORD *)(a2 + 4 * v7);
      if (v10 == -1)
        break;
      v11 = Lookup_UnitPeriInfo(*(_QWORD **)(a1 + 120), v10, v9);
      if ((v11 & 0x80000000) != 0)
        return v11;
      v8 = Psola_AssignPeriRangesDyna(*(unsigned __int16 **)(*(_QWORD *)(a1 + 22648) + 8 * v7));
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 22648) + 8 * v7);
      if (!*(_WORD *)(v9 + 4))
        goto LABEL_10;
LABEL_12:
      if (a3 == ++v7)
        return v8;
    }
    *(_QWORD *)v9 = 0;
LABEL_10:
    v12 = *(_WORD *)(v9 + 2);
    if (v12)
    {
      *(_WORD *)(v9 + 4) = 1;
      *(_WORD *)(v9 + 2) = v12 - 1;
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t synth_bet4_loc_WsolaOutputCB(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t OutputLength;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  int v38;

  v6 = a1 + 21464;
  v38 = 0;
  *(_BYTE *)(a1 + 21482) = 0;
  v7 = (_BYTE *)(a1 + 21482);
  if (*(double *)(a1 + 21440) != 100.0)
  {
    v21 = 0;
    *(_DWORD *)(a1 + 176) += a3;
    do
    {
LABEL_16:
      v37 = 1;
      *(_DWORD *)v6 = (2 * ((274877907 * (unint64_t)*(unsigned int *)(a1 + 136)) >> 32)) & 0x3FFFFF80;
      mfs_WSOLA__TimeScaleInputBuffer(*(_QWORD *)(a1 + 21496), *(_BYTE *)(v6 + 16), a2, a3, *(_WORD **)(a1 + 21472), (int *)v6, (__int16)((int)*(double *)(a1 + 21440) - 100), &v37, v7);
      OutputLength = WSOLA__GetOutputLength(*(_QWORD *)(a1 + 21496), *(unsigned __int8 *)(v6 + 17), &v38);
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Output: %d %d %d %d | %d\n", v25, v26, v27, a3);
      if (*(unsigned __int8 *)(v6 + 18) - 1 > 1)
        break;
      v31 = v38 ? "Length: %d/%d\n" : "Partial length: %d/%d\n";
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v31, v28, v29, v30, OutputLength);
      if (*(_DWORD *)v6)
      {
        v21 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 22584), *(_QWORD *)(a1 + 22592), *(_QWORD *)(a1 + 21472), (2 * *(_DWORD *)v6));
        if ((v21 & 0x80000000) != 0)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v32, v33, v34, v35, "stream");
        else
          *(_DWORD *)(a1 + 180) += *(_DWORD *)v6;
      }
    }
    while (!v38);
    return v21;
  }
  v8 = *(_QWORD *)(a1 + 21496);
  if (*(int *)(v8 + 112) < 1)
  {
    v21 = 0;
  }
  else
  {
    v9 = WSOLA__GetOutputLength(v8, *(unsigned __int8 *)(v6 + 17), &v38);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Output: %d %d %d %d | %d\n", v10, v11, v12, a3);
    if (v38)
      v16 = "Length";
    else
      v16 = "Partial length: %d/%d\n";
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v16, v13, v14, v15, v9);
    v21 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 22584), *(_QWORD *)(a1 + 22592), *(_QWORD *)(a1 + 21472), (2 * *(_DWORD *)(*(_QWORD *)(a1 + 21496) + 112)));
    if ((v21 & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v17, v18, v19, v20, "stream");
      v22 = *(_QWORD *)(a1 + 21496);
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 21496);
      *(_DWORD *)(a1 + 180) += *(_DWORD *)(v22 + 112);
    }
    *(_DWORD *)(v22 + 112) = 0;
  }
  v38 = 1;
  if ((_DWORD)a3)
  {
    v21 = (*(uint64_t (**)(_QWORD, _QWORD, __int16 *, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 22584), *(_QWORD *)(a1 + 22592), a2, (2 * a3));
    v23 = v38 == 0;
  }
  else
  {
    v23 = 0;
  }
  *(_DWORD *)v6 = a3;
  *(int32x2_t *)(a1 + 176) = vadd_s32(*(int32x2_t *)(a1 + 176), vdup_n_s32(a3));
  if (v23)
    goto LABEL_16;
  return v21;
}

uint64_t synth_bet4_loc_PrintMrkIn(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v8 = *a2;
  if ((int)v8 > 32)
  {
    switch((_DWORD)v8)
    {
      case 0x4000:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[3];
        v10 = "SYNC off %d, len %d";
        break;
      case 0x24:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[3];
        v10 = "LANG off %d, len %d";
        break;
      case 0x21:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = *((char *)a2 + 24);
        v10 = "PHONE [%c], off %d, len %d";
        break;
      default:
LABEL_15:
        v9 = *(_QWORD *)(a1 + 32);
        v10 = "TAG %d off %d, len %d";
        break;
    }
  }
  else
  {
    switch((int)v8)
    {
      case 16:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[6];
        v10 = "PITCH [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 17:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[6];
        v10 = "TIMBRE [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 18:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[6];
        v10 = "RATE [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
        goto LABEL_15;
      case 24:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[6];
        v10 = "VOLUME [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 26:
        v9 = *(_QWORD *)(a1 + 32);
        v8 = a2[3];
        v10 = "AUDIO off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      default:
        if ((_DWORD)v8 == 1)
        {
          v9 = *(_QWORD *)(a1 + 32);
          v8 = a2[3];
          v10 = "WORD off %d, len %d";
        }
        else
        {
          if ((_DWORD)v8 != 8)
            goto LABEL_15;
          v9 = *(_QWORD *)(a1 + 32);
          v8 = a2[6];
          v10 = "PAUSE [%d], off %d, len %d";
        }
        break;
    }
  }
  return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
}

uint64_t synth_bet4_loc_PrintMrkOut(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)" => ", a6, a7, a8, v22);
  v15 = *a2;
  if (*a2 > 32)
  {
    switch(v15)
    {
      case 0x4000:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sSYNC off %d, len %d";
        break;
      case 0x24:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sLANG off %d, len %d";
        break;
      case 0x21:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sPHONE [%c], off %d, len %d";
        break;
      default:
LABEL_15:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sTAG %d off %d, len %d";
        break;
    }
  }
  else
  {
    switch(v15)
    {
      case 16:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sPITCH [%d], off %d, len %d";
        break;
      case 17:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sTIMBRE [%d], off %d, len %d";
        break;
      case 18:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sRATE [%d], off %d, len %d";
        break;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
        goto LABEL_15;
      case 24:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sVOLUME [%d], off %d, len %d";
        break;
      case 26:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = "%sAUDIO off %d, len %d";
        break;
      default:
        if (v15 == 1)
        {
          v16 = *(_QWORD *)(a1 + 32);
          v17 = "%sWORD off %d, len %d";
        }
        else
        {
          if (v15 != 8)
            goto LABEL_15;
          v16 = *(_QWORD *)(a1 + 32);
          v17 = "%sPAUSE [%d], off %d, len %d";
        }
        break;
    }
  }
  log_OutText(v16, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v17, v12, v13, v14, a3);
  return log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"\\************************/", v18, v19, v20, a9);
}

void mfs_Vect__Clear(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 12) = 0;
    bzero(*(void **)(a1 + 24), 8 * *(unsigned int *)(a1 + 8));
  }
}

void mfs_Vect__Reset(uint64_t a1)
{
  if (a1)
    bzero(*(void **)(a1 + 24), 8 * *(unsigned int *)(a1 + 8));
}

uint64_t mfs_Vect__Create(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = heap_Alloc(a1, 40);
  v5 = v4;
  if (v4)
  {
    *(_DWORD *)(v4 + 4) = 0;
    *(_DWORD *)(v4 + 8) = a2;
    *(_DWORD *)(v4 + 12) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)v4 = 22050;
    *(_QWORD *)(v4 + 32) = a1;
    v6 = (void *)heap_Alloc(a1, 8 * a2);
    *(_QWORD *)(v5 + 24) = v6;
    if (v6)
    {
      *(_DWORD *)(v5 + 12) = 0;
      bzero(v6, 8 * *(unsigned int *)(v5 + 8));
    }
    else
    {
      heap_Free(*(_QWORD **)(v5 + 32), v5);
      return 0;
    }
  }
  return v5;
}

uint64_t *mfs_Vect__Remove(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (*result)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(_QWORD **)(v2 + 32);
      if (v3)
      {
        heap_Free(*(_QWORD **)(v2 + 32), v3);
        v2 = *v1;
      }
      *(_QWORD *)(v2 + 24) = 0;
      result = heap_Free(v4, *v1);
      *v1 = 0;
    }
  }
  return result;
}

uint64_t mfs_Vect__Resize(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)(result + 8) >= a2)
    {
      return 1;
    }
    else
    {
      *(_DWORD *)(result + 8) = a2;
      v3 = *(uint64_t **)(result + 32);
      v4 = heap_Realloc(v3, *(_QWORD *)(result + 24), 8 * a2);
      if (v4)
      {
        v5 = v4;
        result = 1;
      }
      else
      {
        *(_QWORD *)(v2 + 8) = 0;
        v6 = *(_QWORD *)(v2 + 24);
        if (v6)
          heap_Free(v3, v6);
        v5 = 0;
        result = 0;
      }
      *(_QWORD *)(v2 + 24) = v5;
    }
  }
  return result;
}

uint64_t mfs_Downsample__Resize(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)(result + 32) == a2)
      return 1;
    LODWORD(v3) = *(_DWORD *)(result + 36);
    if (v3 >= a2)
    {
      *(_DWORD *)(result + 32) = a2;
      if ((v3 & 0x80000000) == 0)
      {
        v13 = 0;
        v14 = *(_QWORD *)(result + 16);
        do
        {
          *(_DWORD *)(v14 + 4 * v13) = ((int)v13 + 1) % (*(_DWORD *)(result + 32) + 1);
          v3 = *(int *)(result + 36);
          v7 = v13++ < v3;
        }
        while (v7);
      }
      if ((v3 & 0x40000000) == 0)
      {
        v15 = 0;
        v16 = *(_QWORD *)(result + 24);
        do
        {
          *(_DWORD *)(v16 + 4 * v15) = (int)v15 % (*(_DWORD *)(result + 32) + 1);
          v7 = v15++ < ((2 * *(_DWORD *)(result + 36)) | 1);
        }
        while (v7);
      }
      v12 = *(_DWORD *)(result + 32) + 1;
      goto LABEL_25;
    }
    *(_DWORD *)(result + 36) = a2;
    result = heap_Realloc(*(uint64_t **)(result + 48), *(_QWORD *)result, 4 * a2 + 4);
    if (result)
    {
      *(_QWORD *)v2 = result;
      result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 8), (4 * *(_DWORD *)(v2 + 36) + 4));
      if (result)
      {
        *(_QWORD *)(v2 + 8) = result;
        result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 16), (4 * *(_DWORD *)(v2 + 36) + 4));
        if (result)
        {
          *(_QWORD *)(v2 + 16) = result;
          result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 24), (8 * *(_DWORD *)(v2 + 36) + 8));
          if (result)
          {
            *(_QWORD *)(v2 + 24) = result;
            LODWORD(v4) = *(_DWORD *)(v2 + 36);
            if ((v4 & 0x80000000) == 0)
            {
              v5 = 0;
              v6 = *(_QWORD *)(v2 + 16);
              do
              {
                *(_DWORD *)(v6 + 4 * v5) = ((int)v5 + 1) % (*(_DWORD *)(v2 + 32) + 1);
                v4 = *(int *)(v2 + 36);
                v7 = v5++ < v4;
              }
              while (v7);
            }
            if ((v4 & 0x40000000) == 0)
            {
              v8 = 0;
              do
              {
                *(_DWORD *)(result + 4 * v8) = (int)v8 % (*(_DWORD *)(v2 + 32) + 1);
                LODWORD(v4) = *(_DWORD *)(v2 + 36);
                v7 = v8++ < (int)((2 * v4) | 1);
              }
              while (v7);
            }
            v9 = *(_DWORD *)(v2 + 32) + 1;
            if (v9 <= v4)
            {
              v10 = *(_QWORD *)v2;
              v11 = *(_QWORD *)(v2 + 8);
              do
              {
                *(_DWORD *)(v10 + 4 * v9) = 0;
                *(_DWORD *)(v11 + 4 * v9++) = 0;
              }
              while (v9 <= v4);
            }
            *(_DWORD *)(v2 + 32) = v4;
            v12 = v4 + 1;
LABEL_25:
            *(_DWORD *)(v2 + 44) = v12 >> 1;
            return 1;
          }
        }
      }
    }
    *(_DWORD *)(v2 + 32) = 0;
  }
  return result;
}

uint64_t *mfs_Downsample__Generate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (a2 > 3)
    return 0;
  v4 = heap_Alloc(a1, 56);
  v5 = (uint64_t *)v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_QWORD *)(v4 + 48) = a1;
    v14 = v4;
    switch(a2)
    {
      case 0u:
        if (!mfs_Downsample__Resize(v4, 7u))
          goto LABEL_18;
        v6 = 0;
        v7 = *v5;
        do
        {
          *(_DWORD *)(v7 + v6 * 4) = mfs_CoeffCorrFast2[v6];
          ++v6;
        }
        while (v6 != 8);
        break;
      case 1u:
        if (!mfs_Downsample__Resize(v4, 0x19u))
          goto LABEL_18;
        v8 = 0;
        v9 = *v5;
        do
        {
          *(_DWORD *)(v9 + v8 * 4) = mfs_CoeffStage1Fast[v8];
          ++v8;
        }
        while (v8 != 26);
        break;
      case 2u:
        if (!mfs_Downsample__Resize(v4, 5u))
          goto LABEL_18;
        v10 = 0;
        v11 = *v5;
        do
        {
          *(_DWORD *)(v11 + v10 * 4) = mfs_CoeffStage2[v10];
          ++v10;
        }
        while (v10 != 5);
        break;
      case 3u:
        if (!mfs_Downsample__Resize(v4, 3u))
        {
LABEL_18:
          Downsample__Remove(&v14);
          return 0;
        }
        v12 = *v5;
        *(_QWORD *)v12 = 0x3F11D5D3BD8FDCAALL;
        *(_DWORD *)(v12 + 8) = 1058133459;
        break;
      default:
        return v5;
    }
  }
  return v5;
}

uint64_t mfs_Downsample__VectorNC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int *v39;
  unsigned int v40;

  if (!a1 || !a2 || !a3 || a5 < a4)
    return 1;
  v9 = *(_DWORD *)(a2 + 12) - 1;
  if (v9 < a4 || v9 < a5)
    return 1;
  v12 = a5 - a4 + 1;
  if (*(_DWORD *)(*a3 + 12) < v12 >> 1)
    mfs_Vect__Resize(*a3, v12 >> 1);
  v13 = *(_DWORD *)(a1 + 44);
  v14 = 2 * v13;
  if (v13 >= 1)
  {
    v15 = a4 - v14 + 1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(unsigned int *)(a1 + 40);
    v19 = v14 + 1;
    do
    {
      if ((v15 & 0x80000000) != 0)
        v20 = 0;
      else
        v20 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 8 * v15);
      *(float *)(v16 + 4 * v18) = (float)v20;
      v15 += 2;
      v18 = *(unsigned int *)(v17 + 4 * v18);
      *(_DWORD *)(a1 + 40) = v18;
      --v19;
    }
    while (v19 > 2);
  }
  v21 = *(_QWORD *)(a2 + 24);
  v22 = (_QWORD *)(v21 + 8 * a4);
  v23 = *(_QWORD **)(*a3 + 24);
  v24 = (int *)(v21 + 8 * (a4 + v14 - 1));
  v25 = *(_DWORD *)(*a3 + 12) - v13;
  if (v25 >= 1)
  {
    v26 = v25 + 1;
    while (1)
    {
      *v23 = *v22;
      v27 = *(_DWORD *)v23 + mfs_Downsample__InterpolateBetweenTwoSamples(a1, *v24);
      *(_DWORD *)v23 = v27;
      v28 = 65534;
      if (v27 > 65534)
        goto LABEL_23;
      if (v27 <= -65537)
        break;
LABEL_24:
      ++v23;
      v22 += 2;
      v24 += 4;
      if (--v26 <= 1)
      {
        v13 = *(_DWORD *)(a1 + 44);
        v14 = 2 * v13;
        goto LABEL_26;
      }
    }
    v28 = -65536;
LABEL_23:
    *(_DWORD *)v23 = v28;
    goto LABEL_24;
  }
LABEL_26:
  v29 = v14 + a5;
  v30 = *(_DWORD *)(a2 + 12);
  if (v29 <= v30)
  {
    if (v13 >= 1)
    {
      v36 = v13 + 1;
      do
      {
        v37 = *v22;
        v22 += 2;
        *v23 = v37;
        LODWORD(v37) = *v24;
        v24 += 4;
        *(_DWORD *)v23++ += mfs_Downsample__InterpolateBetweenTwoSamples(a1, v37);
        --v36;
      }
      while (v36 > 1);
    }
  }
  else
  {
    if ((int)(v30 + ~a5) >= 1)
    {
      v31 = v30 - a5;
      do
      {
        v32 = *v22;
        v22 += 2;
        *v23 = v32;
        LODWORD(v32) = *v24;
        v24 += 4;
        *(_DWORD *)v23++ += mfs_Downsample__InterpolateBetweenTwoSamples(a1, v32);
        --v31;
      }
      while (v31 > 1);
      v13 = *(_DWORD *)(a1 + 44);
      v30 = *(_DWORD *)(a2 + 12);
    }
    v33 = v13 + a5 - v30;
    if (v33 >= 1)
    {
      v34 = v33 + 1;
      do
      {
        v35 = *v22;
        v22 += 2;
        *v23 = v35;
        *(_DWORD *)v23++ += mfs_Downsample__InterpolateBetweenTwoSamples(a1, 0);
        --v34;
      }
      while (v34 > 1);
    }
  }
  v38 = *(_DWORD *)(*a3 + 12);
  if (v38 >= 1)
  {
    v39 = *(int **)(*a3 + 24);
    v40 = v38 + 1;
    do
    {
      *v39 /= 2;
      v39 += 2;
      --v40;
    }
    while (v40 > 1);
  }
  return 1;
}

uint64_t mfs_Downsample__InterpolateBetweenTwoSamples(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  float v9;
  uint64_t v10;
  float v11;
  double v12;
  BOOL v13;
  double v14;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 40);
  v4 = *(unsigned int *)(a1 + 44);
  *(float *)(v2 + 4 * v3) = (float)a2;
  if ((int)v4 < 1)
  {
    v9 = 0.0;
  }
  else
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_DWORD **)a1;
    v8 = (int *)(v6 + 4 * ((int)v3 + 1 + *(_DWORD *)(a1 + 32)));
    v9 = 0.0;
    do
    {
      v10 = *v8--;
      v11 = *(float *)(v2 + 4 * v10) + *(float *)(v2 + 4 * *(int *)(v6 + 4 * v5));
      LODWORD(v10) = *v7++;
      v9 = v9 + (float)(v11 * *(float *)&v10);
      ++v5;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v3);
  v12 = v9;
  v13 = v9 < 0.0;
  v14 = 0.5;
  if (v13)
    v14 = -0.5;
  return (int)(v14 + v12);
}

uint64_t log_wsola_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 - 1;
  do
    v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(_QWORD *)(a1 + 32), (uint64_t)"SYNTH_BET4", (a2 + 2), 0, v3);
}

uint64_t log_wsola_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  return log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SYNTH_BET4", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t mfs_WSOLA__SetWindowOverlap(unsigned __int16 *a1, int a2)
{
  unint64_t v3;
  int v4;
  int v5;
  signed __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64x2_t v18;
  uint64_t v19;
  int64x2_t v20;
  int32x2_t v21;
  double v22;
  float v23;
  float v24;
  float64x2_t v26;
  int64x2_t v27;
  float64x2_t v28;
  uint64x2_t v29;
  float64x2_t __x;
  double v31;
  int32x2_t v32;
  int64x2_t v33;

  a1[1] = a2;
  v3 = 274877907 * *a1 * a2;
  v4 = (v3 >> 63) + (SHIDWORD(v3) >> 6);
  a1[2] = v4;
  a1[8] = 2 * v4;
  a1[9] = v4;
  v5 = (__int16)a1[6];
  v6 = 2 * v5 - v4;
  if (v5 < (__int16)v4)
    v6 = a1[6];
  a1[16] = v6;
  v7 = 2 * (v5 + (__int16)(2 * v4)) - (__int16)v4 + v6;
  *((_DWORD *)a1 + 7) = v7;
  v8 = *((_QWORD *)a1 + 7);
  if (!v8
    || v7 <= *(_DWORD *)(v8 + 12)
    || (v9 = 2164269066, mfs_Vect__Resize(v8, v7) == 1)
    && mfs_Vect__Resize(*((_QWORD *)a1 + 8), *((_DWORD *)a1 + 7)) == 1
    && mfs_Vect__Resize(*((_QWORD *)a1 + 9), *((_DWORD *)a1 + 7) >> 1) == 1
    && mfs_Vect__Resize(*((_QWORD *)a1 + 10), *((_DWORD *)a1 + 7) >> 1) == 1
    && mfs_Vect__Resize(*((_QWORD *)a1 + 11), *((_DWORD *)a1 + 7) >> 2) == 1
    && mfs_Vect__Resize(*((_QWORD *)a1 + 12), *((_DWORD *)a1 + 7) >> 2) == 1)
  {
    v10 = *((_QWORD *)a1 + 5);
    if (v10)
    {
      v11 = (__int16)a1[2];
      v12 = 2 * v11;
      v13 = heap_Realloc(*((uint64_t **)a1 + 41), v10, (2 * v11));
      if (!v13)
        return 2164269066;
      v14 = v13;
      *((_QWORD *)a1 + 5) = v13;
      if (v11 >= 1)
      {
        v15 = 0;
        v16 = (double)(__int16)a1[2];
        if (v12 <= 1)
          v17 = 1;
        else
          v17 = v12;
        v29 = (uint64x2_t)vdupq_n_s64(v17 - 1);
        v18 = (uint64x2_t)xmmword_1DEC3D320;
        v27 = vdupq_n_s64(2uLL);
        v28 = (float64x2_t)vdupq_n_s64(0x400921FB54442D11uLL);
        v19 = ((int)v17 + 1) & 0x1FFFELL;
        v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
        do
        {
          v33 = (int64x2_t)v18;
          v20 = (int64x2_t)vcgeq_u64(v29, v18);
          v21.i32[0] = v15;
          v21.i32[1] = v15 + 1;
          v32 = vmovn_s64(v20);
          __x = vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(v21)), v28), v26);
          v31 = cos(__x.f64[1]);
          v22 = cos(__x.f64[0]);
          if ((v32.i8[0] & 1) != 0)
          {
            v23 = (1.0 - v22) * 0.5;
            *(float *)(v14 + 4 * v15) = v23;
          }
          if ((v32.i8[4] & 1) != 0)
          {
            v24 = (1.0 - v31) * 0.5;
            *(float *)(v14 + 4 * v15 + 4) = v24;
          }
          v15 += 2;
          v18 = (uint64x2_t)vaddq_s64(v33, v27);
        }
        while (v19 != v15);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t mfs_WSOLA__Create(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  signed int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v26;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = heap_Calloc(v4, 336, 1);
  v6 = (unsigned __int16 *)v5;
  v26 = v5;
  if (v5)
  {
    *(_QWORD *)(v5 + 320) = a1;
    *(_QWORD *)(v5 + 328) = v4;
    *(_WORD *)v5 = a2;
    *(_DWORD *)(v5 + 312) = 0;
    if ((mfs_WSOLA__SetWindowOverlap((unsigned __int16 *)v5, 10) & 0x80000000) == 0)
    {
      *((_DWORD *)v6 + 2) = 4;
      v7 = 33555 * (*v6 >> 1);
      v8 = v7 >> 22;
      v6[6] = *v6 / 0xFAu;
      v9 = (__int16)v6[9];
      if ((int)(v7 >> 22) >= v9)
        LOWORD(v8) = 2 * (v7 >> 22) - v9;
      v6[16] = v8;
      v10 = 2 * ((__int16)v6[8] + (v7 >> 22)) - (__int16)v6[2] + (__int16)v8;
      *((_DWORD *)v6 + 7) = v10;
      v11 = *((_QWORD *)v6 + 7);
      if (v11 && v10 > *(_DWORD *)(v11 + 12))
      {
        if (mfs_Vect__Resize(v11, v10) != 1
          || mfs_Vect__Resize(*((_QWORD *)v6 + 8), *((_DWORD *)v6 + 7)) != 1
          || mfs_Vect__Resize(*((_QWORD *)v6 + 9), *((_DWORD *)v6 + 7) >> 1) != 1
          || mfs_Vect__Resize(*((_QWORD *)v6 + 10), *((_DWORD *)v6 + 7) >> 1) != 1
          || mfs_Vect__Resize(*((_QWORD *)v6 + 11), *((_DWORD *)v6 + 7) >> 2) != 1
          || mfs_Vect__Resize(*((_QWORD *)v6 + 12), *((_DWORD *)v6 + 7) >> 2) != 1)
        {
          goto LABEL_24;
        }
        v10 = *((_DWORD *)v6 + 7);
      }
      v12 = mfs_Vect__Create((uint64_t)v4, v10);
      *((_QWORD *)v6 + 7) = v12;
      if (v12)
      {
        v13 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7));
        *((_QWORD *)v6 + 8) = v13;
        if (v13)
        {
          v14 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
          *((_QWORD *)v6 + 9) = v14;
          if (v14)
          {
            v15 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
            *((_QWORD *)v6 + 10) = v15;
            if (v15)
            {
              v16 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
              *((_QWORD *)v6 + 11) = v16;
              if (v16)
              {
                v17 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
                *((_QWORD *)v6 + 12) = v17;
                if (v17)
                {
                  mfs_Vect__Clear(*((_QWORD *)v6 + 7));
                  mfs_Vect__Clear(*((_QWORD *)v6 + 8));
                  mfs_Vect__Clear(*((_QWORD *)v6 + 9));
                  mfs_Vect__Clear(*((_QWORD *)v6 + 10));
                  mfs_Vect__Clear(*((_QWORD *)v6 + 11));
                  mfs_Vect__Clear(*((_QWORD *)v6 + 12));
                  v18 = *((_DWORD *)v6 + 7);
                  v19 = *((_QWORD *)v6 + 8);
                  *(_DWORD *)(*((_QWORD *)v6 + 7) + 12) = v18;
                  *(_DWORD *)(v19 + 12) = v18;
                  v20 = *((_QWORD *)v6 + 10);
                  *(_DWORD *)(*((_QWORD *)v6 + 9) + 12) = v18 >> 1;
                  *(_DWORD *)(v20 + 12) = v18 >> 1;
                  v18 >>= 2;
                  v21 = *((_QWORD *)v6 + 12);
                  *(_DWORD *)(*((_QWORD *)v6 + 11) + 12) = v18;
                  *(_DWORD *)(v21 + 12) = v18;
                  v22 = mfs_Downsample__Generate((uint64_t)v4, 0);
                  *((_QWORD *)v6 + 15) = v22;
                  if (v22)
                  {
                    v23 = heap_Calloc(v4, 128, 4);
                    *((_QWORD *)v6 + 18) = v23;
                    if (v23)
                    {
                      if ((WSOLA__CreateOLAWindow_0((uint64_t)v6) & 0x80000000) == 0)
                      {
                        v24 = v6[9];
                        v6[10] = v24;
                        v6[7] = 1;
                        v6[17] = v6[14] - v24;
                        mfs_WSOLA__Initialise((uint64_t)v6);
                        return (uint64_t)v6;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_24:
    mfs_WSOLA__Remove(&v26);
    return v26;
  }
  return (uint64_t)v6;
}

_QWORD *mfs_WSOLA__Remove(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_QWORD **)(*a1 + 328);
  mfs_Vect__Remove((uint64_t *)(*a1 + 56));
  mfs_Vect__Remove((uint64_t *)(*a1 + 64));
  mfs_Vect__Remove((uint64_t *)(*a1 + 72));
  mfs_Vect__Remove((uint64_t *)(*a1 + 80));
  mfs_Vect__Remove((uint64_t *)(*a1 + 88));
  mfs_Vect__Remove((uint64_t *)(*a1 + 96));
  v3 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    heap_Free(v2, *(_QWORD *)(*a1 + 40));
    v3 = *a1;
  }
  if (*(_QWORD *)(v3 + 120))
  {
    Downsample__Remove((uint64_t *)(v3 + 120));
    v3 = *a1;
  }
  if (*(_QWORD *)(v3 + 144))
  {
    heap_Free(v2, *(_QWORD *)(v3 + 144));
    v3 = *a1;
  }
  result = heap_Free(v2, v3);
  *a1 = 0;
  return result;
}

uint64_t WSOLA__CreateOLAWindow_0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64x2_t v9;
  uint64_t v10;
  int64x2_t v11;
  int32x2_t v12;
  double v13;
  float v14;
  float v15;
  float64x2_t v17;
  int64x2_t v18;
  float64x2_t v19;
  uint64x2_t v20;
  float64x2_t __x;
  double v22;
  int32x2_t v23;
  int64x2_t v24;

  v2 = *(__int16 *)(a1 + 4);
  v3 = 2 * v2;
  v4 = heap_Alloc(*(_QWORD *)(a1 + 328), 4 * (2 * v2));
  *(_QWORD *)(a1 + 40) = v4;
  if (!v4)
    return 2164269066;
  if (v2 >= 1)
  {
    v5 = v4;
    v6 = 0;
    v7 = (double)*(__int16 *)(a1 + 4);
    if (v3 <= 1)
      v8 = 1;
    else
      v8 = v3;
    v20 = (uint64x2_t)vdupq_n_s64(v8 - 1);
    v9 = (uint64x2_t)xmmword_1DEC3D320;
    v18 = vdupq_n_s64(2uLL);
    v19 = (float64x2_t)vdupq_n_s64(0x400921FB54442D11uLL);
    v10 = ((int)v8 + 1) & 0x1FFFELL;
    v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0);
    do
    {
      v24 = (int64x2_t)v9;
      v11 = (int64x2_t)vcgeq_u64(v20, v9);
      v12.i32[0] = v6;
      v12.i32[1] = v6 + 1;
      v23 = vmovn_s64(v11);
      __x = vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(v12)), v19), v17);
      v22 = cos(__x.f64[1]);
      v13 = cos(__x.f64[0]);
      if ((v23.i8[0] & 1) != 0)
      {
        v14 = (1.0 - v13) * 0.5;
        *(float *)(v5 + 4 * v6) = v14;
      }
      if ((v23.i8[4] & 1) != 0)
      {
        v15 = (1.0 - v22) * 0.5;
        *(float *)(v5 + 4 * v6 + 4) = v15;
      }
      v6 += 2;
      v9 = (uint64x2_t)vaddq_s64(v24, v18);
    }
    while (v10 != v6);
  }
  return 0;
}

double mfs_WSOLA__Initialise(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  double result;

  v1 = a1;
  mfs_Vect__Reset(*(_QWORD *)(a1 + 56));
  mfs_Vect__Reset(*(_QWORD *)(v1 + 64));
  mfs_Vect__Reset(*(_QWORD *)(v1 + 72));
  mfs_Vect__Reset(*(_QWORD *)(v1 + 80));
  mfs_Vect__Reset(*(_QWORD *)(v1 + 88));
  mfs_Vect__Reset(*(_QWORD *)(v1 + 96));
  *(_QWORD *)(v1 + 304) = -1;
  *(_DWORD *)(v1 + 312) = 1;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 281) = 0;
  v2 = *(_OWORD **)(v1 + 144);
  result = 0.0;
  v2[30] = 0u;
  v2[31] = 0u;
  v2[28] = 0u;
  v2[29] = 0u;
  v2[26] = 0u;
  v2[27] = 0u;
  v2[24] = 0u;
  v2[25] = 0u;
  v2[22] = 0u;
  v2[23] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v1 += 152;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_DWORD *)(v1 - 130) = 0;
  *(_WORD *)(v1 - 100) = 0;
  return result;
}

uint64_t mfs_WSOLA__TimeScaleInputBuffer(uint64_t a1, char a2, __int16 *a3, uint64_t a4, _WORD *a5, int *a6, int a7, char *a8, _BYTE *a9)
{
  uint64_t v9;
  _WORD *v10;
  __int16 *v12;
  char v14;
  int v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned __int16 v55;
  int v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int v62;
  float v63;
  float v64;
  int *v65;
  int v66;
  int *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  __int16 v72;
  int v73;
  unsigned __int16 v74;
  int v75;
  int v76;
  unsigned __int16 v77;
  unsigned __int16 v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float v86;
  float v87;
  int *v88;
  int v89;
  int *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  _DWORD *v98;
  __int16 v99;
  int v100;
  unsigned __int16 v101;
  int v102;
  int v103;
  unsigned __int16 v104;
  uint64_t v105;
  float v106;
  float v107;
  int *v108;
  int v109;
  int *v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  __int16 v115;
  char v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v123;
  int v124;
  const char *v125;
  int *v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  int *v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  int v141;
  int v142;
  int v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int *v154;
  int v155;
  float v156;
  int v157;
  float v158;
  double v159;
  double v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  unsigned __int8 *v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  int v174;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  __int16 v181;

  v10 = a5;
  v12 = a3;
  v14 = *a8;
  v15 = *(_DWORD *)(a1 + 312);
  if (v15)
  {
    v12 = &a3[*(int *)(a1 + 108)];
    v10 = &a5[*(int *)(a1 + 112)];
  }
  v16 = (_DWORD *)(a1 + 308);
  v17 = (uint64_t *)(a1 + 72);
  v178 = (uint64_t *)(a1 + 88);
  v179 = (uint64_t *)(a1 + 80);
  v177 = (uint64_t *)(a1 + 96);
  v174 = (unsigned __int16)(a7 + 100);
LABEL_4:
  while (2)
  {
    switch(v15)
    {
      case 0:
        mfs_WSOLA__Initialise(a1);
        *(_DWORD *)(a1 + 312) = 1;
        goto LABEL_6;
      case 1:
LABEL_6:
        if (*(unsigned __int16 *)(a1 + 128) == (unsigned __int16)a7)
        {
          v18 = *(_DWORD *)(a1 + 28);
          goto LABEL_28;
        }
        *(_WORD *)(a1 + 128) = a7;
        if (a7)
        {
          v18 = *(_DWORD *)(a1 + 28);
          if ((__int16)v174 < 1)
            goto LABEL_28;
          v28 = *(__int16 *)(a1 + 18);
          v29 = v28 * v174 / 100;
          *(_WORD *)(a1 + 20) = v29;
          *(_WORD *)(a1 + 14) = (__int16)v29 / v28;
          v30 = v18 - v29;
        }
        else
        {
          v31 = *(_WORD *)(a1 + 18);
          *(_WORD *)(a1 + 20) = v31;
          *(_WORD *)(a1 + 14) = 1;
          v18 = *(_DWORD *)(a1 + 28);
          v30 = v18 - v31;
        }
        *(_WORD *)(a1 + 34) = v30;
LABEL_28:
        v32 = *(__int16 *)(a1 + 52);
        *(_WORD *)(a1 + 52) = 1 - v32;
        *(_WORD *)(a1 + 48) = 1 - v32;
        *(_WORD *)(a1 + 50) = v32;
        v33 = *(void **)(*(_QWORD *)(a1 + 56 + 8 * (__int16)(1 - v32)) + 24);
        *(_QWORD *)(a1 + 136) = v33;
        v34 = *(_QWORD *)(a1 + 56 + 8 * v32);
        *(_DWORD *)(a1 + 304) = 0;
        memmove(v33, (const void *)(*(_QWORD *)(v34 + 24) + 8 * (v18 - *(__int16 *)(a1 + 34))), 8 * *(__int16 *)(a1 + 34));
        *(_QWORD *)(a1 + 136) += 8 * *(__int16 *)(a1 + 34);
        *(_DWORD *)(a1 + 312) = 2;
LABEL_29:
        v35 = *v16;
        if (*v16 == -1)
          v35 = *(__int16 *)(a1 + 34);
        v36 = *(_DWORD *)(a1 + 108);
        v37 = *(_DWORD *)(a1 + 28);
        v38 = v37 + v36 - v35;
        if (v38 >= (int)a4)
          v39 = a4;
        else
          v39 = v37 + v36 - v35;
        v40 = v39 - v36 + v35;
        *(_DWORD *)(a1 + 308) = v40;
        if (v39 - v36 >= 1)
        {
          v41 = *(_QWORD *)(a1 + 136);
          v42 = v39 - v36 + 1;
          do
          {
            *(_BYTE *)(v41 + 4) = v14;
            v43 = *v12++;
            *(_DWORD *)v41 = v43;
            v41 += 8;
            --v42;
          }
          while (v42 > 1);
          *(_QWORD *)(a1 + 136) = v41;
        }
        *(_DWORD *)(a1 + 108) = v39;
        if (v38 < (int)a4)
          goto LABEL_44;
        if ((a2 & 1) != 0)
        {
          if (v40 < v37)
          {
            v44 = *(_QWORD *)(a1 + 136);
            v45 = v36 + v37 - v35 - v39;
            do
            {
              *(_BYTE *)(v44 + 4) = v14 | 0x80;
              *(_DWORD *)v44 = 0;
              v44 += 8;
              --v45;
            }
            while (v45);
            *(_QWORD *)(a1 + 136) = v44;
          }
LABEL_44:
          *(_BYTE *)(a1 + 280) = v14;
          *(_QWORD *)v16 = 0x3FFFFFFFFLL;
LABEL_45:
          if (*(_WORD *)(a1 + 128))
          {
            v181 = *(_WORD *)(a1 + 32);
            mfs_Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 56), v17, 0, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 12) - 1);
            mfs_Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 64), v179, 0, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 12) - 1);
            mfs_Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 72), v178, 0, *(_DWORD *)(*(_QWORD *)(a1 + 72) + 12) - 1);
            mfs_Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 80), v177, 0, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 12) - 1);
            v46 = *(__int16 *)(a1 + 32);
            v47 = *(__int16 *)(a1 + 12);
            v48 = v46 - v47 + 3;
            if (v46 >= v47)
              v48 = v46 - v47;
            v49 = v48 >> 2;
            LODWORD(v50) = (__int16)(v48 >> 2) & ~((__int16)(v48 >> 2) >> 31);
            v51 = v50 + ((__int16)(v47 + ((unsigned __int16)(v47 & 0x8000) >> 15)) >> 1);
            v52 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 12);
            v53 = (__int16)v52;
            v54 = v52 - 1;
            if (v53 <= (__int16)v51)
              LOWORD(v51) = v54;
            if ((int)v50 < (__int16)v51)
            {
              v55 = v51;
              v56 = *(__int16 *)(a1 + 18);
              v57 = *(__int16 *)(a1 + 50);
              v58 = *(__int16 *)(a1 + 2 * v57 + 22);
              v59 = __OFADD__(v58, v56);
              v60 = v58 + v56;
              if (v60 < 0 != v59)
                v60 += 3;
              v61 = *(_QWORD *)(*(_QWORD *)(a1 + 88 + 8 * v57) + 24) + 8 * (v60 >> 2);
              v62 = *(__int16 *)(a1 + 16);
              v50 = (unsigned __int16)v50;
              v63 = 0.0;
              do
              {
                v64 = 0.0;
                if (v62 >= 4)
                {
                  v65 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88 + 8 * *(__int16 *)(a1 + 48)) + 24) + 8 * v50);
                  v66 = (int)((v62 + ((v62 >> 29) & 3)) << 16) >> 18;
                  v67 = (int *)v61;
                  do
                  {
                    v69 = *v65;
                    v65 += 2;
                    v68 = v69;
                    v70 = *v67;
                    v67 += 2;
                    v64 = v64 + (float)(v70 * v68);
                    v71 = (__int16)v66--;
                  }
                  while (v71 > 1);
                }
                if (v64 > v63)
                {
                  v63 = v64;
                  LOWORD(v49) = v50;
                }
                ++v50;
              }
              while (v50 != v55);
            }
            v72 = 2 * v49;
            v73 = (__int16)(2 * v49 - 3) & ~((__int16)(2 * v49 - 3) >> 31);
            v74 = v72 + 3;
            v75 = *(_DWORD *)(*v17 + 12);
            v76 = (__int16)v75;
            v77 = v75 - 1;
            if (v76 <= (__int16)v74)
              v74 = v77;
            if (v73 < (__int16)v74)
            {
              v78 = v74;
              v79 = *(__int16 *)(a1 + 18);
              v80 = *(__int16 *)(a1 + 50);
              v81 = *(__int16 *)(a1 + 2 * v80 + 22);
              v59 = __OFADD__(v81, v79);
              v82 = v81 + v79;
              if (v82 < 0 != v59)
                ++v82;
              v83 = *(_QWORD *)(*(_QWORD *)(a1 + 72 + 8 * v80) + 24) + 8 * (v82 >> 1);
              v84 = *(__int16 *)(a1 + 16);
              v85 = (unsigned __int16)v73;
              v86 = 0.0;
              do
              {
                v87 = 0.0;
                if (v84 >= 2)
                {
                  v88 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72 + 8 * *(__int16 *)(a1 + 48)) + 24) + 8 * v85);
                  v89 = (v84 + ((unsigned __int16)(v84 & 0x8000) >> 15)) << 16 >> 17;
                  v90 = (int *)v83;
                  do
                  {
                    v92 = *v88;
                    v88 += 2;
                    v91 = v92;
                    v93 = *v90;
                    v90 += 2;
                    v87 = v87 + (float)(v93 * v91);
                    v94 = (__int16)v89--;
                  }
                  while (v94 > 1);
                }
                if (v87 > v86)
                {
                  v86 = v87;
                  LOWORD(v73) = v85;
                }
                ++v85;
              }
              while (v85 != v78);
            }
            v95 = a4;
            v96 = v9;
            v97 = v17;
            v98 = v16;
            v99 = 2 * v73;
            v100 = (__int16)(v99 - 3) & ~((__int16)(v99 - 3) >> 31);
            v101 = v99 + 3;
            v102 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 12);
            v103 = (__int16)v102;
            v104 = v102 - 1;
            if (v103 <= (__int16)v101)
              v101 = v104;
            if (v100 < (__int16)v101)
            {
              v105 = (unsigned __int16)v100;
              v106 = 0.0;
              do
              {
                v107 = 0.0;
                if (*(__int16 *)(a1 + 16) >= 1)
                {
                  v108 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 24) + 8 * v105);
                  v109 = *(__int16 *)(a1 + 16);
                  v110 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 24)
                               + 8
                               * (*(__int16 *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22) + (uint64_t)*(__int16 *)(a1 + 18)));
                  do
                  {
                    v112 = *v108;
                    v108 += 2;
                    v111 = v112;
                    v113 = *v110;
                    v110 += 2;
                    v107 = v107 + (float)(v113 * v111);
                    v114 = (unsigned __int16)v109--;
                  }
                  while (v114 > 1);
                }
                if (v107 > v106)
                {
                  v106 = v107;
                  LOWORD(v100) = v105;
                }
                ++v105;
              }
              while (v105 != v101);
            }
            log_wsola_Diag(*(_QWORD *)(a1 + 320), 4, (uint64_t)"Best: %d\t%d");
            v115 = v100 + v181 - *(_WORD *)(a1 + 32);
            v16 = v98;
            v17 = v97;
            v9 = v96;
            a4 = v95;
          }
          else
          {
            v115 = *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22);
          }
          *(_WORD *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48)) = v115;
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 24)
              + 8 * (*(__int16 *)(a1 + 18) + (uint64_t)*(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 50)));
          *(_QWORD *)(a1 + 288) = v19;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 24)
                                + 8 * *(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48));
          if (*(_WORD *)(a1 + 128))
          {
            v15 = 5;
            *(_DWORD *)(a1 + 312) = 5;
          }
          else
          {
            *(_DWORD *)(a1 + 312) = 4;
LABEL_87:
            v116 = *(_BYTE *)(v19 + 4);
            if (*(_DWORD *)(a1 + 304) == -1)
              *(_DWORD *)(a1 + 304) = 0;
            v117 = v116 & 0x7F;
            v118 = *(unsigned __int8 *)(a1 + 281);
            if (v118 != (_DWORD)v117)
            {
              if ((_DWORD)v117 == 127)
                v119 = 0;
              else
                v119 = v117;
              v120 = v119 + 1;
              v121 = v119 + 2;
              if (v120 == v118 || v121 == v118)
                goto LABEL_100;
              v123 = v117 - 126;
              if (v117 < 0x7E)
                v123 = v117 + 1;
              if (v123 + 1 == v118)
              {
LABEL_100:
                log_wsola_Diag(*(_QWORD *)(a1 + 320), 1, (uint64_t)"WARNING: switch back from PhonID %u to previous PhonID %u");
                v117 = *(unsigned __int8 *)(a1 + 281);
                *(_BYTE *)(*(_QWORD *)(a1 + 288) + 4) = *(_BYTE *)(*(_QWORD *)(a1 + 288) + 4) & 0x80 | v117;
              }
              else
              {
                if (!*(_BYTE *)(a1 + v117 + 152))
                  *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v117) = 0;
                do
                {
                  *(_BYTE *)(a1 + (unsigned __int16)v118 + 152) = 2;
                  v118 = v118
                       - 127
                       * ((((unsigned __int16)(v118 - ((517 * (unsigned __int16)v118) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v118) >> 16)) >> 6)
                       + 1;
                }
                while ((_DWORD)v117 != (unsigned __int16)v118);
                *(_BYTE *)(a1 + 281) = v117;
              }
              *(_BYTE *)(a1 + v117 + 152) = 1;
              if (*(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(unsigned __int8 *)(a1 + 281)))
              {
                v124 = 1;
                v125 = "ERROR: PhonID %u, restart at length %d";
              }
              else
              {
                v124 = 3;
                v125 = "start output phonID: %d";
              }
              log_wsola_Diag(*(_QWORD *)(a1 + 320), v124, (uint64_t)v125);
            }
            *(_DWORD *)(a1 + 312) = 1;
            v126 = *(int **)(a1 + 288);
            if ((char)v126[1] < 0)
            {
              *a9 = 2;
              *a6 = *(_DWORD *)(a1 + 112);
              v169 = *(unsigned __int8 *)(a1 + 281);
              if (v169 != *(unsigned __int8 *)(a1 + 280))
              {
                do
                {
                  *(_BYTE *)(a1 + (unsigned __int16)v169 + 152) = 2;
                  v169 = v169
                       - 127
                       * ((((unsigned __int16)(v169 - ((517 * (unsigned __int16)v169) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v169) >> 16)) >> 6)
                       + 1;
                }
                while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v169);
                v169 = *(unsigned __int8 *)(a1 + 280);
              }
              *(_BYTE *)(a1 + v169 + 152) = 2;
              *a8 = *(_BYTE *)(a1 + 281);
LABEL_179:
              *(_DWORD *)(a1 + 112) = 0;
              *(_DWORD *)(a1 + 312) = 0;
              return 0;
            }
            v127 = *(unsigned __int8 *)(a1 + 281);
            if (*(_BYTE *)(a1 + 281))
            {
              v128 = *a6;
              v129 = *(_DWORD *)(a1 + 112);
              v130 = *(_DWORD *)(a1 + 304);
              if (*a6 >= v129 + *(__int16 *)(a1 + 4) - v130)
                v128 = v129 + *(__int16 *)(a1 + 4) - v130;
              v131 = v128 - v129;
              if (v128 - v129 > 1 && LOBYTE(v126[2 * (v128 - v129 - 1) + 1]) != (_DWORD)v127)
              {
                v140 = (unsigned __int8 *)(v126 + 1);
                v141 = 1;
                while (v131 + v141 - 1 >= 1)
                {
                  v142 = *v140;
                  v140 += 8;
                  --v141;
                  if (v142 != (_DWORD)v127)
                  {
                    v132 = 0;
                    v128 = v129 - v141;
                    v15 = 4;
                    *(_DWORD *)(a1 + 312) = 4;
                    v131 = -v141;
                    goto LABEL_116;
                  }
                }
              }
              v132 = 1;
              v15 = 1;
LABEL_116:
              *(_DWORD *)(a1 + 304) = v131 + v130;
              *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v127) += v131;
              v133 = v128 - *(_DWORD *)(a1 + 112);
              if (v133 >= 1)
              {
                v134 = v133 + 1;
                do
                {
                  v135 = *v126;
                  v126 += 2;
                  *v10++ = v135;
                  --v134;
                }
                while (v134 > 1);
              }
              *(_QWORD *)(a1 + 288) = v126;
              if (v128 >= *a6)
              {
                *a9 = 1;
                *a6 = v128;
                *a8 = *(_BYTE *)(a1 + 281);
                *(_DWORD *)(a1 + 112) = 0;
                if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
                  goto LABEL_181;
                v170 = 4;
                goto LABEL_183;
              }
              *(_DWORD *)(a1 + 112) = v128;
              if (v132)
                goto LABEL_157;
            }
            else
            {
              v136 = *(__int16 *)(a1 + 4);
              v15 = 1;
              if (*(_WORD *)(a1 + 4))
              {
                v15 = 1;
                if (LOBYTE(v126[2 * v136 - 1]))
                {
                  v137 = v126 - 2;
                  v138 = 1;
                  while (v136 + v138 - 1 >= 1)
                  {
                    v139 = *((unsigned __int8 *)v137 + 12);
                    v137 += 2;
                    --v138;
                    if (v139)
                    {
                      v15 = 4;
                      *(_DWORD *)(a1 + 312) = 4;
                      *(_QWORD *)(a1 + 288) = v137;
                      *(_DWORD *)(a1 + 304) -= v138;
                      goto LABEL_4;
                    }
                  }
                  goto LABEL_158;
                }
              }
            }
          }
          continue;
        }
        *(_DWORD *)(a1 + 108) = 0;
        *a9 = 0;
        *(_BYTE *)(a1 + 280) = v14;
        return 0;
      case 2:
        goto LABEL_29;
      case 3:
        goto LABEL_45;
      case 4:
        v19 = *(_QWORD *)(a1 + 288);
        goto LABEL_87;
      case 5:
        v20 = *(_BYTE *)(*(_QWORD *)(a1 + 288) + 4);
        if (*(_DWORD *)(a1 + 304) == -1)
          *(_DWORD *)(a1 + 304) = 0;
        v21 = v20 & 0x7F;
        v22 = *(unsigned __int8 *)(a1 + 281);
        if (v22 != (_DWORD)v21)
        {
          if ((_DWORD)v21 == 127)
            v23 = 0;
          else
            v23 = v21;
          v24 = v23 + 1;
          v25 = v23 + 2;
          if (v24 == v22 || v25 == v22)
            goto LABEL_22;
          v27 = v21 - 126;
          if (v21 < 0x7E)
            v27 = v21 + 1;
          if (v27 + 1 == v22)
          {
LABEL_22:
            log_wsola_Diag(*(_QWORD *)(a1 + 320), 1, (uint64_t)"ERROR: switch back from PhonID %u to previous PhonID %u");
            v21 = *(unsigned __int8 *)(a1 + 281);
            *(_BYTE *)(*(_QWORD *)(a1 + 288) + 4) = *(_BYTE *)(*(_QWORD *)(a1 + 288) + 4) & 0x80 | v21;
          }
          else
          {
            if (!*(_BYTE *)(a1 + v21 + 152))
              *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v21) = 0;
            do
            {
              *(_BYTE *)(a1 + (unsigned __int16)v22 + 152) = 2;
              v22 = v22
                  - 127
                  * ((((unsigned __int16)(v22 - ((517 * (unsigned __int16)v22) >> 16)) >> 1)
                    + ((517 * (unsigned __int16)v22) >> 16)) >> 6)
                  + 1;
            }
            while ((_DWORD)v21 != (unsigned __int16)v22);
            *(_BYTE *)(a1 + 281) = v21;
          }
          *(_BYTE *)(a1 + v21 + 152) = 1;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(unsigned __int8 *)(a1 + 281)))
          {
            v143 = 1;
            v144 = "WARNING: PhonID %u, restart at length %d";
          }
          else
          {
            v143 = 3;
            v144 = "start output phonID: %d";
          }
          log_wsola_Diag(*(_QWORD *)(a1 + 320), v143, (uint64_t)v144);
        }
        *(_DWORD *)(a1 + 312) = 1;
        v145 = *(_QWORD *)(a1 + 288);
        if (*(char *)(v145 + 4) < 0)
        {
          *a9 = 2;
          *a6 = *(_DWORD *)(a1 + 112);
          v171 = *(unsigned __int8 *)(a1 + 281);
          if (v171 != *(unsigned __int8 *)(a1 + 280))
          {
            do
            {
              *(_BYTE *)(a1 + (unsigned __int16)v171 + 152) = 2;
              v171 = v171
                   - 127
                   * ((((unsigned __int16)(v171 - ((517 * (unsigned __int16)v171) >> 16)) >> 1)
                     + ((517 * (unsigned __int16)v171) >> 16)) >> 6)
                   + 1;
            }
            while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v171);
            v171 = *(unsigned __int8 *)(a1 + 280);
          }
          *(_BYTE *)(a1 + v171 + 152) = 2;
          *a8 = *(_BYTE *)(a1 + 281);
          goto LABEL_179;
        }
        v146 = *(unsigned __int8 *)(a1 + 281);
        if (*(_BYTE *)(a1 + 281))
        {
          v147 = *(_DWORD *)(a1 + 304);
          if (*a6 - *(_DWORD *)(a1 + 112) >= *(__int16 *)(a1 + 4) - v147)
            v148 = *(__int16 *)(a1 + 4) - v147;
          else
            v148 = *a6 - *(_DWORD *)(a1 + 112);
          if (v148 >= 2 && *(unsigned __int8 *)(v145 + 8 * (v148 - 1) + 4) != (_DWORD)v146)
          {
            v166 = (unsigned __int8 *)(v145 + 4);
            v167 = 1;
            while (v148 + v167 - 1 >= 1)
            {
              v168 = *v166;
              v166 += 8;
              --v167;
              if (v168 != (_DWORD)v146)
              {
                v149 = 0;
                v148 = -v167;
                v15 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                goto LABEL_148;
              }
            }
          }
          v149 = 1;
          v15 = 1;
LABEL_148:
          *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v146) += v148;
          v150 = v148 + v147;
          v151 = *(int *)(a1 + 304);
          v152 = *(_DWORD *)(a1 + 112) + v150 - v151;
          *(_DWORD *)(a1 + 112) = v152;
          if (v150 > (int)v151)
          {
            v153 = *(_QWORD *)(a1 + 40);
            v154 = *(int **)(a1 + 296);
            do
            {
              v155 = *(_DWORD *)v145;
              v145 += 8;
              v156 = (float)v155;
              v157 = *v154;
              v154 += 2;
              v158 = (float)(*(float *)(v153 + 4 * v151) * (float)v157)
                   + (float)(*(float *)(v153 + 4 * (v151 + *(__int16 *)(a1 + 4))) * v156);
              v159 = v158;
              if (v158 >= 0.0)
                v160 = 0.5;
              else
                v160 = -0.5;
              *v10++ = (int)(v160 + v159);
              ++v151;
            }
            while (v150 != v151);
            *(_QWORD *)(a1 + 296) = v154;
          }
          *(_QWORD *)(a1 + 288) = v145;
          *(_DWORD *)(a1 + 304) = v150;
          if (v152 >= *a6)
          {
            *a9 = 1;
            *a6 = *(_DWORD *)(a1 + 112);
            *a8 = *(_BYTE *)(a1 + 281);
            *(_DWORD *)(a1 + 112) = 0;
            if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
            {
LABEL_181:
              *(_DWORD *)(a1 + 304) = 0;
              return 0;
            }
            v170 = 5;
LABEL_183:
            *(_DWORD *)(a1 + 312) = v170;
            return 0;
          }
          if (v149)
          {
LABEL_157:
            *(_DWORD *)(a1 + 304) = 0;
            goto LABEL_158;
          }
        }
        else
        {
          v161 = *(__int16 *)(a1 + 4);
          v15 = 1;
          if (*(_BYTE *)(v145 + 8 * (v161 - 1) + 4))
          {
            v162 = 0;
            v163 = 1;
            while (v161 + v163 - 1 >= 1)
            {
              v164 = *(unsigned __int8 *)(v145 + v162 + 4);
              v162 += 8;
              --v163;
              if (v164)
              {
                v15 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                v165 = *(_QWORD *)(a1 + 296) + v162 - 8;
                *(_QWORD *)(a1 + 288) = v145 + v162 - 8;
                *(_QWORD *)(a1 + 296) = v165;
                *(_DWORD *)(a1 + 304) -= v163;
                goto LABEL_4;
              }
            }
LABEL_158:
            v15 = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t ssft_MapTtsegErrToAPI(int a1)
{
  uint64_t result;
  unsigned __int16 v2;

  if ((a1 & 0x80000000) == 0)
    return 0;
  result = a1 & 0x80001FFF;
  if ((int)result <= -2147483393)
  {
    if ((int)result >= -2147483620)
      return 0x80000000;
  }
  else
  {
    if ((int)result > -2147482625)
    {
      if ((result + 2147481600) < 0xD
        || (result + 2147482624) <= 0x16 && ((1 << result) & 0x404001) != 0)
      {
        return result;
      }
      v2 = 2176;
    }
    else
    {
      if ((result + 2147483392) < 0x14 || (_DWORD)result == -2147483136)
        return result;
      v2 = 768;
    }
    if ((_DWORD)result != (v2 | 0x80000000))
      return 0x80000000;
  }
  return result;
}

uint64_t lipsync_ObjOpen(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = 2281070598;
  if (a2)
  {
    v5 = heap_Alloc(a1, 16);
    if (v5)
    {
      v2 = 0;
      *(_QWORD *)(v5 + 8) = a1;
      *(_DWORD *)v5 = 0;
      *a2 = v5;
    }
    else
    {
      return 2281070602;
    }
  }
  return v2;
}

uint64_t lipsync_ObjClose(uint64_t a1)
{
  heap_Free(*(_QWORD **)(a1 + 8), a1);
  return 0;
}

uint64_t lipsync_GetSyncInfo(_WORD *a1, __int16 a2, char *a3, int8x8_t *a4)
{
  uint64_t result;
  int v8;
  unsigned __int16 v9;
  char *v10;
  int8x8_t v11;
  int v12;
  char *PhonemeTableByIndex;
  unsigned int v14;
  int NbrOfLhp;
  int v16;

  result = 2281070598;
  if (!a1 || !a3)
    return result;
  a1[1] = 1;
  *a1 = a2;
  if ((int)lipsyncinfo_GetNbrOfLhp() < 2)
  {
LABEL_7:
    if ((int)lipsyncinfo_GetNbrOfLhp() < 2)
      return 2281070607;
    v12 = 1;
    v9 = 1;
    while (1)
    {
      PhonemeTableByIndex = lipsyncinfo_GetPhonemeTableByIndex(v12);
      if (lipsyncinfo_HeadsMatchLooselyDiphtongs(a3, PhonemeTableByIndex) == 1)
        break;
      v12 = ++v9;
      if ((int)lipsyncinfo_GetNbrOfLhp() <= v9)
        return 2281070607;
    }
  }
  else
  {
    v8 = 1;
    v9 = 1;
    while (1)
    {
      v10 = lipsyncinfo_GetPhonemeTableByIndex(v8);
      if (lipsyncinfo_HeadsMatch(a3, v10))
        break;
      v8 = ++v9;
      if ((int)lipsyncinfo_GetNbrOfLhp() <= v9)
        goto LABEL_7;
    }
  }
  if (!v9)
    return 2281070607;
  if (v9 == 0xFFFF)
  {
LABEL_14:
    result = 0;
    *a4 = v11;
    return result;
  }
  v14 = (unsigned __int16)a1[1];
  NbrOfLhp = lipsyncinfo_GetNbrOfLhp();
  if (v14 > 3 || NbrOfLhp < v9 || (int)lipsyncinfo_GetNbrOfLhp() <= v9)
    return 2281070607;
  v16 = *(__int16 *)lipsyncinfo_GetMouthPosByIndex(v9);
  result = 2281070607;
  if (v9 == v16)
  {
    v11 = vmovn_s16(*(int16x8_t *)(lipsyncinfo_GetMouthPosByIndex(v9) + 2));
    goto LABEL_14;
  }
  return result;
}

uint64_t TextMime2ve(char *__s1, int *a2, int *a3, _DWORD *a4)
{
  int v8;
  int v10;

  if (a4)
    *a4 = 1;
  if (!__s1)
    goto LABEL_9;
  v8 = *__s1;
  if (!*__s1)
    goto LABEL_10;
  if (!strcmp(__s1, "text/plain;charset=utf-8"))
  {
    v8 = 0;
    v10 = 2;
    if (!a3)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!strcmp(__s1, "text/plain;charset=utf-16"))
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    if (strcmp(__s1, "application/synthesis+ssml"))
      return 0;
    if (a4)
      *a4 = 0;
    v8 = 1;
  }
LABEL_10:
  v10 = 1;
  if (a3)
LABEL_11:
    *a3 = v10;
LABEL_12:
  if (a2)
    *a2 = v8;
  return 1;
}

uint64_t ve_ttsInitialize(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  int Interface;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t NullHandle;
  uint64_t v29;
  const void *v30;
  _OWORD v31[2];
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;

  v35 = 0;
  v3 = -2147483638;
  v33 = 0;
  v34 = 0;
  v30 = 0;
  result = 2147483654;
  if (a1 && a2)
  {
    if (*(_WORD *)a1 != 8963 || !*(_QWORD *)(a1 + 16) || !*(_QWORD *)(a1 + 48))
      return ssft_MapTtsegErrToAPI(-2147474688);
    *a2 = 0;
    a2[1] = 0;
    memset(v31, 0, sizeof(v31));
    v32 = 0u;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 8))(*(_QWORD *)(a1 + 24), 1, 552);
    v7 = v6;
    if (!v6)
      goto LABEL_62;
    *(_DWORD *)v6 = 1933790291;
    v8 = *(_OWORD **)(a1 + 16);
    *(_OWORD *)(v6 + 8) = *v8;
    v9 = v6 + 8;
    *(_OWORD *)(v7 + 24) = v8[1];
    v10 = *(_OWORD **)(a1 + 32);
    if (v10)
    {
      *(_OWORD *)(v7 + 72) = *v10;
      *(_OWORD *)(v7 + 88) = v10[1];
    }
    v11 = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(v7 + 104) = *(_OWORD *)v11;
    *(_OWORD *)(v7 + 120) = *(_OWORD *)(v11 + 16);
    *(_QWORD *)(v7 + 136) = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v7 + 152) = *(_QWORD *)(v11 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    if (v12)
    {
      *(_QWORD *)(v7 + 184) = *(_QWORD *)v12;
      *(_OWORD *)(v7 + 200) = *(_OWORD *)(v12 + 8);
      *(_OWORD *)(v7 + 216) = *(_OWORD *)(v12 + 24);
    }
    v13 = *(_QWORD *)(a1 + 64);
    if (v13)
    {
      *(_OWORD *)(v7 + 280) = *(_OWORD *)v13;
      *(_QWORD *)(v7 + 296) = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v7 + 304) = 0;
    }
    v14 = *(__int128 **)(a1 + 80);
    if (v14)
    {
      v15 = *v14;
      *(_QWORD *)(v7 + 344) = *((_QWORD *)v14 + 2);
      *(_OWORD *)(v7 + 328) = v15;
      *(_QWORD *)(v7 + 352) = *(_QWORD *)(a1 + 88);
    }
    v16 = *(_OWORD **)(a1 + 112);
    if (v16)
    {
      *(_OWORD *)(v7 + 360) = *v16;
      *(_OWORD *)(v7 + 376) = v16[1];
      *(_OWORD *)(v7 + 392) = v16[2];
    }
    v17 = *(_OWORD **)(a1 + 120);
    if (v17)
    {
      *(_OWORD *)(v7 + 408) = *v17;
      *(_OWORD *)(v7 + 424) = v17[1];
    }
    v18 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v7 + 64) = v18;
    Interface = heap_cb_Open(v9, v18, (uint64_t)&v35);
    if ((Interface & 0x80000000) == 0)
    {
      Interface = critsec_cb_ClassOpen(v35, *(_QWORD *)(v7 + 64), v7 + 72, *(_QWORD *)(a1 + 40), (uint64_t)&v34);
      if ((Interface & 0x80000000) == 0)
      {
        Interface = osspi_cb_cache_ClassOpen(v35, *(_QWORD *)(v7 + 64), v34, v7 + 104, *(_QWORD *)(a1 + 72), &v33);
        if ((Interface & 0x80000000) == 0)
        {
          Interface = rsrc_Open(v35, v34, 0, 0, v7 + 440);
          if ((Interface & 0x80000000) == 0)
          {
            InitRsrcFunction(*(_WORD **)(v7 + 440), *(_QWORD *)(v7 + 448), (_QWORD *)(v7 + 456));
            v20 = *(_QWORD *)(v7 + 456);
            *(_QWORD *)(v20 + 64) = v33;
            v21 = *(_QWORD *)(a1 + 8);
            if (!v21)
            {
              v3 = -2147483630;
              goto LABEL_58;
            }
            LOWORD(v31[0]) = 3;
            *((_QWORD *)&v32 + 1) = v21;
            Interface = engbrk_GetInterface(0, &v30);
            if ((Interface & 0x80000000) == 0)
            {
              Interface = brk_ClassOpen(*(_WORD **)(v7 + 440), *(_QWORD *)(v7 + 448), v30, (uint64_t)v31, 0, v7 + 472);
              if ((Interface & 0x80000000) == 0)
              {
                Interface = brk_ObjOpen(0, *(_QWORD *)(v7 + 472));
                if ((Interface & 0x80000000) == 0)
                {
                  Interface = objc_ObjOpen(0, *(_WORD **)(v7 + 440), *(_QWORD *)(v7 + 448), (uint64_t *)(v20 + 48));
                  if ((Interface & 0x80000000) == 0)
                  {
                    *(_QWORD *)(v20 + 384) = 0;
                    *(_QWORD *)(v20 + 392) = 0;
                    v22 = *(_QWORD **)(a1 + 96);
                    if (v22 && *v22 && *(_QWORD *)(a1 + 104))
                    {
                      v23 = (_QWORD *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 8);
                      *(_QWORD *)(v20 + 384) = v23;
                      if (!v23)
                      {
LABEL_58:
                        if (*(_QWORD *)(v7 + 456))
                        {
                          ve_ttsUnInitialize(v7, 1749240915);
                          return ssft_MapTtsegErrToAPI(v3);
                        }
                        if (v33)
                          osspi_cb_cache_ClassClose((_QWORD **)v33);
LABEL_62:
                        if (v34)
                          critsec_cb_ClassClose(&v34);
                        if (v35)
                          heap_cb_Close(v35);
                        if (v7)
                          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 24))(*(_QWORD *)(a1 + 24), v7);
                        return ssft_MapTtsegErrToAPI(v3);
                      }
                      *v23 = **(_QWORD **)(a1 + 96);
                      *(_QWORD *)(v20 + 392) = *(_QWORD *)(a1 + 104);
                    }
                    if (*(_QWORD *)(a1 + 112))
                      v24 = v7 + 360;
                    else
                      v24 = 0;
                    if (*(_QWORD *)(a1 + 120))
                      v25 = v7 + 408;
                    else
                      v25 = 0;
                    thread_cb_ClassOpen((uint64_t)v35, *(_QWORD *)(v7 + 64), v24, v25, *(_QWORD *)(a1 + 128), v20 + 400);
                    Interface = paramc_ObjOpen(0, *(_QWORD *)(v7 + 440), *(_QWORD *)(v7 + 448), v20 + 40);
                    if ((Interface & 0x80000000) == 0)
                    {
                      Interface = log_ClassOpen(*(_WORD **)(v7 + 440), *(_QWORD *)(v7 + 448), 0, (uint64_t *)(v7 + 464));
                      if ((Interface & 0x80000000) == 0)
                      {
                        v26 = (uint64_t *)(v20 + 32);
                        Interface = log_ObjOpen(*(_QWORD *)(v7 + 464), (uint64_t *)(v20 + 32));
                        if ((Interface & 0x80000000) == 0)
                        {
                          v29 = 0;
                          if (*(_QWORD *)(v7 + 328) || *(_QWORD *)(v7 + 336) || *(_QWORD *)(v7 + 344))
                            log_SubscriberAdd(*v26, v7 + 328, (uint64_t)&VAutoLogSub);
                          if ((log_GetInterface(1u, &v29) & 0x80000000) == 0)
                          {
                            heap_SetLog(v35);
                            osspi_cb_cache_SetLog((uint64_t)v33, v29, *v26);
                          }
                          Interface = compquery_GetInterface(1u, (_QWORD *)(v7 + 504));
                          if ((Interface & 0x80000000) == 0)
                          {
                            v27 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 504) + 32);
                            NullHandle = safeh_GetNullHandle();
                            Interface = v27(NullHandle);
                            if ((Interface & 0x80000000) == 0)
                            {
                              Interface = ttseg_GetInterface(3, (_QWORD *)(v7 + 480));
                              if ((Interface & 0x80000000) == 0)
                              {
                                Interface = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v7 + 480)
                                                                                               + 16))(*(_QWORD *)(v7 + 440), *(_QWORD *)(v7 + 448), v7 + 488);
                                if ((Interface & 0x80000000) == 0)
                                {
                                  Interface = synthstream_GetInterface(1u, (_QWORD *)(v7 + 528));
                                  if ((Interface & 0x80000000) == 0)
                                  {
                                    Interface = lingdb_GetInterface(1u, (_QWORD *)(v7 + 536));
                                    if ((Interface & 0x80000000) == 0)
                                    {
                                      v3 = bet7_parse_multicore_hdr(*(_QWORD *)(v7 + 456));
                                      if ((v3 & 0x80000000) == 0)
                                      {
                                        *a2 = v7;
                                        *((_DWORD *)a2 + 2) = 1749240915;
                                        return ssft_MapTtsegErrToAPI(v3);
                                      }
                                      goto LABEL_58;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v3 = Interface;
    goto LABEL_58;
  }
  return result;
}

uint64_t ve_ttsUnInitialize(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v2 = 2147483656;
  v23 = 0;
  if (a2 == 1749240915 && *(_DWORD *)a1 == 1933790291)
  {
    if (*(_DWORD *)(a1 + 544))
      return 2147483665;
    if ((InitRsrcFunction(*(_WORD **)(a1 + 440), *(_QWORD *)(a1 + 448), &v23) & 0x80000000) != 0)
      return v2;
    v4 = *(_QWORD **)(a1 + 456);
    v5 = (_QWORD *)v4[1];
    v24 = v4[2];
    v6 = (_QWORD **)v4[8];
    v7 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)a1 = -1933790292;
    v8 = *(_QWORD *)(a1 + 488);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 480) + 24))(v8, *(_QWORD *)(a1 + 496));
      if (v9 < 0)
        goto LABEL_48;
      *(_QWORD *)(a1 + 488) = safeh_GetNullHandle();
      *(_QWORD *)(a1 + 496) = v10;
    }
    else
    {
      v9 = 0;
    }
    v11 = *(_QWORD *)(a1 + 512);
    if (v11)
    {
      v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 504) + 40))(v11, *(_QWORD *)(a1 + 520));
      if (v9 < 0)
        goto LABEL_48;
      *(_QWORD *)(a1 + 512) = safeh_GetNullHandle();
      *(_QWORD *)(a1 + 520) = v12;
    }
    v13 = v23;
    if (v23[4])
    {
      heap_SetLog(v5);
      if (v6)
        osspi_cb_cache_SetLog((uint64_t)v6, 0, 0);
      v9 = log_ObjClose(v23[4]);
      if (v9 < 0)
        goto LABEL_48;
      v13 = v23;
      v23[4] = 0;
    }
    v14 = *(_QWORD *)(a1 + 464);
    if (v14)
    {
      v9 = log_ClassClose(v14);
      if (v9 < 0)
        goto LABEL_48;
      *(_QWORD *)(a1 + 464) = 0;
      v13 = v23;
    }
    v15 = v13[6];
    if (v15)
    {
      v9 = objc_ObjClose(v15);
      if (v9 < 0)
        goto LABEL_48;
      v13 = v23;
      v23[6] = 0;
    }
    v16 = v13[5];
    if (v16)
    {
      v9 = paramc_ObjClose(v16);
      if (v9 < 0)
        goto LABEL_48;
      v13 = v23;
      v23[5] = 0;
    }
    v17 = v13[3];
    if (v17)
    {
      v9 = brk_ObjClose(v17);
      if (v9 < 0)
        goto LABEL_48;
      v13 = v23;
      v23[3] = 0;
    }
    v18 = *(_QWORD *)(a1 + 472);
    if (v18)
    {
      v9 = brk_ClassClose(v18);
      if (v9 < 0)
        goto LABEL_48;
      *(_QWORD *)(a1 + 472) = 0;
      v13 = v23;
    }
    if (v13[50])
    {
      v9 = thread_cb_ClassClose(v13 + 50);
      if (v9 < 0)
        goto LABEL_48;
      v13 = v23;
      v23[50] = 0;
    }
    v19 = v13[48];
    if (v19)
    {
      heap_Free((_QWORD *)v13[1], v19);
      v23[48] = 0;
    }
    v20 = *(_WORD **)(a1 + 440);
    if (v20)
    {
      v9 = rsrc_Close(v20, *(_QWORD *)(a1 + 448));
      if (v9 < 0)
        goto LABEL_48;
      *(_QWORD *)(a1 + 440) = safeh_GetNullHandle();
      *(_QWORD *)(a1 + 448) = v21;
    }
    if (!v6 || (v9 = osspi_cb_cache_ClassClose(v6), (v9 & 0x80000000) == 0))
    {
      if (!v24 || (v9 = critsec_cb_ClassClose(&v24), (v9 & 0x80000000) == 0))
      {
        if (!v5 || (v9 = heap_cb_Close(v5), (v9 & 0x80000000) == 0))
        {
          (*(void (**)(uint64_t, uint64_t))(a1 + 32))(v7, a1);
          return ssft_MapTtsegErrToAPI(v9);
        }
      }
    }
LABEL_48:
    *(_DWORD *)a1 = 1933790291;
    return ssft_MapTtsegErrToAPI(v9);
  }
  return v2;
}

uint64_t ve_ttsOpen(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int inited;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _OWORD v100[2];
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;

  v8 = 2147483656;
  v102 = 0;
  v103 = 0;
  if (a2 != 1749240915)
    return v8;
  v99 = 0;
  v97 = 0u;
  v98 = 0u;
  if (*(_DWORD *)a1 != 1933790291)
    return v8;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Open : Begin", a6, a7, a8, v95);
  v101 = 0u;
  memset(v100, 0, sizeof(v100));
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a3, 1, 624);
  if (!v13)
    return 2147483658;
  v14 = v13;
  *(_QWORD *)(v13 + 40) = a3;
  v15 = *(_QWORD *)(a1 + 344);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 328);
  *(_QWORD *)(v13 + 64) = v15;
  *(_QWORD *)(v13 + 72) = a4;
  ++*(_DWORD *)(a1 + 544);
  v16 = heap_cb_Open(a1 + 8, a3, (uint64_t)&v103);
  if (v16 < 0)
  {
    v87 = v16;
    goto LABEL_32;
  }
  *(_QWORD *)(v14 + 8) = a1;
  *(_DWORD *)(v14 + 544) = 0;
  *(_QWORD *)(v14 + 552) = 0;
  *(_QWORD *)(v14 + 608) = 0;
  *(_DWORD *)v14 = 1934574154;
  *(_QWORD *)(v14 + 112) = 0x10000000CLL;
  SetSavedMimeTypeforPlainText(v14, 0);
  v23 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(_QWORD *)(a1 + 472));
  v28 = *(_QWORD *)(a1 + 456);
  if (v23 < 0)
  {
    v87 = v23;
    log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"VEAPI", 18002, "%s%x", v24, v25, v26, v27, "lhError");
    goto LABEL_32;
  }
  v29 = critsec_ObjOpen(*(_QWORD *)(v28 + 16), v103, (uint64_t *)(v14 + 80));
  if (v29 < 0)
  {
    v87 = v29;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18035, "%s%x", v30, v31, v32, v33, "lherror");
    brk_ObjClose(v102);
    goto LABEL_32;
  }
  inited = rsrc_Open(v103, *(_QWORD *)(*(_QWORD *)(a1 + 456) + 16), v102, 0, v14 + 16);
  if (inited < 0
    || (v39 = v14 + 32,
        inited = InitRsrcFunction(*(_WORD **)(v14 + 16), *(_QWORD *)(v14 + 24), (_QWORD *)(v14 + 32)),
        inited < 0))
  {
    v87 = inited;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18003, "%s%x", v35, v36, v37, v38, "lhError");
    brk_ObjClose(v102);
    critsec_ObjClose(*(_QWORD *)(v14 + 80));
    goto LABEL_32;
  }
  v40 = *(_QWORD *)(v14 + 32);
  v41 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(v40 + 64) = *(_QWORD *)(v41 + 64);
  *(_OWORD *)(v40 + 384) = *(_OWORD *)(v41 + 384);
  *(_QWORD *)(v40 + 400) = *(_QWORD *)(*(_QWORD *)(a1 + 456) + 400);
  *(_DWORD *)(v14 + 88) = 1;
  v42 = *(_QWORD *)(a1 + 464);
  if (v42)
  {
    log_ObjOpen(v42, (uint64_t *)(v40 + 32));
    if (*(_QWORD *)(v14 + 48) || *(_QWORD *)(v14 + 56) || *(_QWORD *)(a1 + 344))
      log_SubscriberAdd(*(_QWORD *)(v40 + 32), v14 + 48, (uint64_t)&VAutoLogSub);
  }
  v43 = (uint64_t *)(v40 + 40);
  v44 = paramc_ObjOpen(0, *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), v40 + 40);
  if (v44 < 0)
  {
    v87 = v44;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 18004, "%s%x", v45, v46, v47, v48, "lhError");
    goto LABEL_32;
  }
  v49 = (uint64_t *)(v40 + 48);
  v50 = objc_ObjOpen(0, *(_WORD **)(v14 + 16), *(_QWORD *)(v14 + 24), (uint64_t *)(v40 + 48));
  if (v50 < 0)
  {
    v93 = v50;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 18005, "%s%x", v51, v52, v53, v54, "lhError");
    goto LABEL_41;
  }
  v55 = paramc_ParamSetUInt(*v43, (uint64_t)"waitfactor", 1u);
  if (v55 < 0
    || (v55 = paramc_ParamSetUInt(*v43, (uint64_t)"maxinputlength", 0xFAu), v55 < 0)
    || (v55 = paramc_ParamSetStr(*v43, (uint64_t)"inputmimetype", "text/plain;charset=utf-16"), v55 < 0)
    || (v55 = paramc_ParamSetStr(*v43, (uint64_t)"lidvoiceswitch", "no"), v55 < 0))
  {
    v93 = v55;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 51020, "%s%x", v56, v57, v58, v59, "lhError");
LABEL_41:
    v87 = v93;
    goto LABEL_32;
  }
  v60 = paramc_ParamSetInt(*v43, (uint64_t)"phonmapmrkenabled", 0);
  if (v60 < 0)
  {
    v94 = v60;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 51020, "%s%x", v61, v62, v63, v64, "lhError");
  }
  else
  {
    *((_QWORD *)&v97 + 1) = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 528);
    *(_QWORD *)&v97 = 1;
    *(_QWORD *)&v98 = safeh_GetNullHandle();
    *((_QWORD *)&v98 + 1) = v65;
    v99 = 0;
    v66 = objc_RegisterObject(*v49, (uint64_t)"SYNTHSTREAM", &v97);
    if ((v66 & 0x80000000) == 0)
    {
      v99 = 0;
      v97 = 0u;
      v98 = 0u;
      LOBYTE(v97) = 1;
      *((_QWORD *)&v97 + 1) = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 536);
      *(_QWORD *)&v98 = safeh_GetNullHandle();
      *((_QWORD *)&v98 + 1) = v71;
      v99 = 0;
      v72 = objc_RegisterObject(*v49, (uint64_t)"LINGDB", &v97);
      if (v72 < 0)
      {
        v87 = v72;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 18007, "%s%x", v73, v74, v75, v76, "lhError");
      }
      else
      {
        *((_QWORD *)&v100[0] + 1) = ssft_hlp_ProcessPcmStream;
        *(_QWORD *)&v101 = ssft_hlp_ProcessTaInfoStream;
        v77 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 480) + 32))(*(_QWORD *)(a1 + 488), *(_QWORD *)(a1 + 496), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), v100, v14, 0, v14 + 96);
        if (v77 < 0)
        {
          v87 = v77;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 18008, "%s%x", v78, v79, v80, v81, "lhError");
        }
        else
        {
          v82 = lipsync_ObjOpen((uint64_t)v103, (uint64_t *)(v14 + 608));
          if ((v82 & 0x80000000) == 0)
          {
            *(_QWORD *)a5 = v14;
            *(_DWORD *)(a5 + 8) = 1750024778;
            log_OutText(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Open : End", v84, v85, v86, v96);
            return 0;
          }
          v87 = v82;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 18011, "%s%x", v83, v84, v85, v86, "lhError");
        }
      }
      goto LABEL_32;
    }
    v94 = v66;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"VEAPI", 18006, "%s%x", v67, v68, v69, v70, "lhError");
  }
  v87 = v94;
LABEL_32:
  if (*(_QWORD *)(v14 + 32))
  {
    ve_ttsClose(v14, 1750024778, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a1 + 32))(a3, v14);
    --*(_DWORD *)(a1 + 544);
    if (v103)
      heap_cb_Close(v103);
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18012, 0, v88, v89, v90, v91, v96);
  return ssft_MapTtsegErrToAPI(v87);
}

uint64_t SetSavedMimeTypeforPlainText(uint64_t a1, char *__s1)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t result;
  int v7;
  int v8;

  v8 = 0;
  TextMime2ve(__s1, 0, 0, &v8);
  if (!v8)
    return 1;
  v4 = *(_QWORD *)(a1 + 616);
  if (v4)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v4);
    v5 = v8 != 0;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)(a1 + 616) = 0;
  result = 1;
  if (__s1)
  {
    if (v5)
    {
      v7 = strlen(__s1);
      result = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), (v7 + 1));
      *(_QWORD *)(a1 + 616) = result;
      if (result)
      {
        strcpy((char *)result, __s1);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ssft_hlp_ProcessPcmStream(uint64_t a1, char a2, _QWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  v37 = 0;
  v38 = 0;
  v34 = 0;
  v33 = 0;
  v35 = 0u;
  v36 = 0u;
  if (!*(_QWORD *)(a1 + 480))
  {
    if (*a3)
    {
      v16 = *(_QWORD *)(a1 + 552);
      *((_QWORD *)&v35 + 1) = *a3;
      *((_QWORD *)&v36 + 1) = v16;
      v17 = ssft_hlp_ReadStopFlag(a1, &v33);
      if ((v17 & 0x80000000) != 0)
        return v17;
      if (v33 == 1)
      {
        *(_QWORD *)&v35 = 0;
        *(_QWORD *)&v36 = 0;
      }
      else
      {
        v18 = *a6;
        *(_QWORD *)&v35 = (2 * *a4);
        *(_QWORD *)&v36 = v18;
        ssft_hlp_convertAndCopyInternalMrkRcrdsToApiMrk(a1, (uint64_t)&v34, a5, v18);
      }
      LODWORD(v37) = 16;
      v38 = &v34;
      if ((a2 & 2) != 0)
      {
        v19 = 0xFFFF;
        *(_DWORD *)(a1 + 452) = 0xFFFF;
      }
      else
      {
        v19 = *(_DWORD *)(a1 + 452);
      }
      HIDWORD(v37) = v19;
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 504))(a1, 1750024778, *(_QWORD *)(a1 + 496), &v37);
      *(_DWORD *)(a1 + 452) = 2;
      if (v20)
      {
        if ((v20 & 0x1FFF) != 0x807)
          return v20 & 0x1FFF | 0x80002000;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 128))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
        ssft_hlp_SetStateInterrupted(a1);
        *a3 = 0;
        *a4 = 0;
        *(_QWORD *)(a1 + 552) = 0;
        v14 = 2147493895;
LABEL_49:
        *a6 = 0;
        return v14;
      }
    }
    if ((a2 & 2) != 0)
    {
      v14 = 0;
      *a3 = 0;
      *a4 = 0;
      return v14;
    }
    v14 = ssft_hlp_ReadStopFlag(a1, &v33);
    if ((v14 & 0x80000000) != 0)
      return v14;
    if (v33 == 1)
    {
      *a3 = 0;
      *a4 = 0;
      *(_QWORD *)(a1 + 552) = 0;
      *(_DWORD *)(a1 + 544) = 0;
      goto LABEL_49;
    }
    v38 = &v34;
    v37 = 8;
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 504))(a1, 1750024778, *(_QWORD *)(a1 + 496), &v37);
    v22 = v21;
    v14 = v21 & 0x1FFF | 0x80002000;
    v23 = v38;
    v24 = v38[2];
    *a3 = v24;
    v25 = (unint64_t)v23[1] >> 1;
    *a4 = v25;
    if (v24 && (_DWORD)v25)
    {
      if (!v21)
      {
        v14 = 0;
        goto LABEL_52;
      }
      if ((v21 & 0x1FFF) != 0x807)
      {
LABEL_48:
        *a3 = 0;
        *a4 = 0;
        *(_QWORD *)(a1 + 552) = 0;
        goto LABEL_49;
      }
    }
    v26 = ssft_hlp_ReadStopFlag(a1, &v33);
    if (v22)
      v27 = v14;
    else
      v27 = v26;
    if (v26 | v33)
    {
      v14 = v27;
    }
    else
    {
      v28 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 128))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
      if (!v22)
        LODWORD(v14) = v28;
      v29 = ssft_hlp_SetStateInterrupted(a1);
      if ((int)v14 <= -1 || v29 == 0)
        v14 = v14;
      else
        v14 = v29;
    }
    if ((v14 & 0x80000000) != 0 || !*a3)
      goto LABEL_48;
LABEL_52:
    v32 = v38;
    *(_QWORD *)(a1 + 552) = v38[4];
    v15 = v32[3] / 0x38uLL;
    goto LABEL_7;
  }
  if (*a4 || *a6)
  {
    **(_DWORD **)(a1 + 472) = 16;
    v12 = *(_QWORD *)(a1 + 480);
    *(_QWORD *)(v12 + 8) = (2 * *a4);
    v13 = *a6;
    *(_QWORD *)(v12 + 24) = v13;
    v14 = ssft_hlp_convertAndCopyInternalMrkRcrdsToApiMrk(a1, v12, a5, v13);
    if ((a2 & 2) != 0)
      return v14;
    goto LABEL_5;
  }
  v14 = 0;
  if ((a2 & 2) != 0)
  {
    **(_DWORD **)(a1 + 472) = 2;
    *a3 = 0;
    *a4 = 0;
    goto LABEL_49;
  }
LABEL_5:
  if ((v14 & 0x80000000) == 0)
  {
    *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 480) + 16);
    *a4 = *(_DWORD *)(a1 + 488) >> 1;
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(*(_QWORD *)(a1 + 480) + 32);
    LODWORD(v15) = *(_DWORD *)(a1 + 492) / 0x38u;
LABEL_7:
    *(_DWORD *)(a1 + 544) = v15;
    *a6 = v15;
  }
  return v14;
}

uint64_t ssft_hlp_ProcessTaInfoStream(uint64_t a1, int a2, int a3, const void **a4, unsigned int *a5, void *__src, unsigned int *a7)
{
  uint64_t v10;
  int v11;
  uint64_t result;
  size_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;

  v22 = 0;
  v23 = 0;
  v20 = 0u;
  v21 = 0u;
  if (a2 == 8)
  {
    v14 = *a5;
    v15 = *a7;
    *(_QWORD *)&v20 = v14;
    *(_QWORD *)&v21 = v15;
    if ((_DWORD)v14 && *a4)
    {
      memmove(*(void **)(a1 + 520), *a4, v14);
      v15 = *a7;
    }
    v16 = *(void **)(a1 + 536);
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(a1 + 520);
    *((_QWORD *)&v21 + 1) = v16;
    memmove(v16, __src, 40 * v15);
    LODWORD(v22) = 2048;
    v23 = &v20;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 504))(a1, 1750024778, *(_QWORD *)(a1 + 496), &v22);
    if (v17)
      return v17 & 0x1FFF | 0x80002000;
    else
      return 0;
  }
  else if (a2 == 4)
  {
    v10 = *a7;
    *(_QWORD *)&v20 = *a5;
    *(_QWORD *)&v21 = v10;
    LODWORD(v22) = 1024;
    v23 = &v20;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, unsigned int *, void *))(a1 + 504))(a1, 1750024778, *(_QWORD *)(a1 + 496), &v22, a5, __src);
    if (v11)
    {
      return v11 & 0x1FFF | 0x80002000;
    }
    else
    {
      v18 = *((_QWORD *)&v20 + 1);
      result = 2147492110;
      if (*((_QWORD *)&v20 + 1))
      {
        v19 = *((_QWORD *)&v21 + 1);
        if (*((_QWORD *)&v21 + 1))
        {
          result = 0;
          *(_QWORD *)(a1 + 512) = *a5;
          *(_QWORD *)(a1 + 528) = *a7;
          *(_QWORD *)(a1 + 520) = v18;
          *(_QWORD *)(a1 + 536) = v19;
        }
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t ve_ttsClose(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  int State;
  int inited;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v31;
  int v33;
  uint64_t v35;
  int v36;
  uint64_t v38;
  int v39;
  uint64_t v41;
  int v42;
  _WORD *v44;
  int v45;
  uint64_t v48;
  _QWORD *v49;

  v8 = 2147483656;
  v49 = 0;
  v9 = a2 != 1750024778 || a1 == 0;
  if (!v9 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Close : Begin", a6, a7, a8, v48);
    HIDWORD(v48) = 0;
    State = ssft_hlp_GetState(a1, (_DWORD *)&v48 + 1);
    if (State < 0)
      return ssft_MapTtsegErrToAPI(State);
    if (HIDWORD(v48) == 1)
    {
      *(_DWORD *)a1 = -1934574155;
      inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v49);
      if ((inited & 0x80000000) == 0)
      {
        v13 = (_QWORD *)v49[1];
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 456) + 32);
        SetSavedMimeTypeforPlainText(a1, 0);
        if (*(_QWORD *)(a1 + 592))
        {
          v18 = objc_ReleaseObject(v49[6], (uint64_t)"PHONMAP");
          if (v18 < 0)
            inited = v18;
        }
        v19 = *(_QWORD *)(a1 + 608);
        if (v19)
        {
          v20 = lipsync_ObjClose(v19);
          if (v20 < 0 && inited > -1)
            inited = v20;
        }
        v22 = *(_QWORD *)(a1 + 96);
        if (v22)
          inited = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 40))(v22, *(_QWORD *)(a1 + 104));
        v23 = v49;
        v24 = v49[4];
        if (v24)
        {
          v25 = log_ObjClose(v24);
          if (v25 < 0 && inited > -1)
            inited = v25;
          v23 = v49;
          v49[4] = 0;
        }
        v27 = v23[6];
        if (v27)
        {
          v28 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v28 + 536))
          {
            v29 = objc_UnregisterObject(v27, (uint64_t)"LINGDB");
            if (v29 < 0 && inited > -1)
              inited = v29;
            v28 = *(_QWORD *)(a1 + 8);
            v23 = v49;
          }
          if (*(_QWORD *)(v28 + 528))
          {
            v31 = objc_UnregisterObject(v23[6], (uint64_t)"SYNTHSTREAM");
            if (v31 < 0 && inited > -1)
              inited = v31;
            v23 = v49;
          }
          v33 = objc_ObjClose(v23[6]);
          if (v33 < 0 && inited > -1)
            inited = v33;
          v23 = v49;
          v49[6] = 0;
        }
        v35 = v23[5];
        if (v35)
        {
          v36 = paramc_ObjClose(v35);
          if (v36 < 0 && inited > -1)
            inited = v36;
          v23 = v49;
          v49[5] = 0;
        }
        v38 = v23[3];
        if (v38)
        {
          v39 = brk_ObjClose(v38);
          if (v39 < 0 && inited > -1)
            inited = v39;
          v49[3] = 0;
        }
        v41 = *(_QWORD *)(a1 + 80);
        if (v41)
        {
          v42 = critsec_ObjClose(v41);
          if (v42 < 0 && inited > -1)
            inited = v42;
          *(_QWORD *)(a1 + 80) = 0;
        }
        v44 = *(_WORD **)(a1 + 16);
        if (v44)
        {
          v45 = rsrc_Close(v44, *(_QWORD *)(a1 + 24));
          if (v45 < 0 && inited > -1)
            inited = v45;
          v49 = 0;
        }
        log_OutText(v14, (uint64_t)"VEAPI", 4, 0, (uint64_t)"Close : End", v15, v16, v17, v48);
        --*(_DWORD *)(*(_QWORD *)(a1 + 8) + 544);
        heap_cb_Close(v13);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 8) + 32))(*(_QWORD *)(a1 + 40), a1);
      }
      return ssft_MapTtsegErrToAPI(inited);
    }
    else
    {
      return 2147483665;
    }
  }
  return v8;
}

uint64_t ssft_hlp_GetState(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 80));
  if ((v4 & 0x80000000) != 0)
  {
    v10 = v4;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v5, v6, v7, v8, "lhError");
    return v10;
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 88);
    return critsec_Leave(*(_QWORD **)(a1 + 80));
  }
}

uint64_t ve_ttsSetOutDevice(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  int inited;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;

  v8 = 2147483656;
  v19 = 0;
  v18 = 0;
  v9 = a2 != 1750024778 || a1 == 0;
  if (!v9 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"SetOutDevice : Begin", a6, a7, a8, v18);
    inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v18);
    if (inited < 0)
    {
      v13 = inited;
    }
    else
    {
      if (!a3)
        return 2147483654;
      if (!*(_QWORD *)(a3 + 8))
        return 2147483666;
      v13 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsSetOutDevice", 2, &v19);
      if ((v13 & 0x80000000) == 0)
      {
        *(_OWORD *)(a1 + 496) = *(_OWORD *)a3;
        ssft_hlp_Unlock(a1, v19);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"SetOutDevice : End", v14, v15, v16, v18);
      }
    }
    return ssft_MapTtsegErrToAPI(v13);
  }
  return v8;
}

uint64_t ssft_hlp_LockFromIdle(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v11 = critsec_Enter(*(_QWORD **)(a1 + 80));
  if ((v11 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%s%s%x", v7, v8, v9, v10, "function");
  }
  else
  {
    if (*(_DWORD *)(a1 + 88) == 1)
    {
      *a4 = 1;
      *(_DWORD *)(a1 + 88) = a3;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18032, "%s%s", v7, v8, v9, v10, "function");
      LODWORD(v11) = -2147475439;
    }
    v12 = critsec_Leave(*(_QWORD **)(a1 + 80));
    if (v12 >= 0 || (int)v11 <= -1)
      return v11;
    else
      return v12;
  }
  return v11;
}

uint64_t ssft_hlp_Unlock(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    if ((critsec_Enter(*(_QWORD **)(result + 80)) & 0x80000000) != 0)
    {
      return log_OutPublic(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v4, v5, v6, v7, "lhError");
    }
    else
    {
      *(_DWORD *)(v3 + 88) = a2;
      return critsec_Leave(*(_QWORD **)(v3 + 80));
    }
  }
  return result;
}

uint64_t ssft_hlp_ProcessMessage2Speech(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t (*v14)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t NullHandle;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v26;
  int v27;

  v8 = *(_DWORD *)(a1 + 440);
  if ((_DWORD)a2 == 2 || v8 != (_DWORD)a2)
  {
    *(_DWORD *)(a1 + 440) = a2;
    v9 = ssft_hlp_PipelineName(a1, 1, a1 + 120);
    if (v9 < 0)
    {
      v13 = v9;
      v17 = 0;
      *(_DWORD *)(a1 + 440) = v8;
      goto LABEL_16;
    }
  }
  else if ((~*(_DWORD *)(a1 + 112) & 0xC) == 0)
  {
    goto LABEL_7;
  }
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 192))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a1 + 310, a2);
  if (v10 < 0)
  {
LABEL_14:
    v13 = v10;
    v17 = 0;
    goto LABEL_16;
  }
LABEL_7:
  *(_QWORD *)(a1 + 456) = safeh_GetNullHandle();
  *(_QWORD *)(a1 + 464) = v11;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  if ((_DWORD)a2 == 2)
    v12 = 256;
  else
    v12 = 1;
  *(_DWORD *)(a1 + 452) = 1;
  v10 = ssft_hlp_PcmNotify(a1, v12);
  if (v10 < 0)
    goto LABEL_14;
  v27 = 0;
  v13 = ssft_hlp_ReadStopFlag(a1, &v27);
  if (!(v13 | v27))
  {
    v14 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                                       + 104);
    NullHandle = safeh_GetNullHandle();
    v13 = v14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a3, a4, NullHandle, v16);
  }
  v17 = 1;
LABEL_16:
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 528) + 40))(a3, a4);
  if (v13 >= 0)
    v19 = v18;
  else
    v19 = v13;
  if (v17)
  {
    if ((_DWORD)a2 == 2)
      v20 = 512;
    else
      v20 = 2;
    v21 = ssft_hlp_PcmNotify(a1, v20);
    if ((int)v19 >= 0)
      v19 = v21;
    else
      v19 = v19;
  }
  if ((~*(_DWORD *)(a1 + 112) & 0xC) != 0)
  {
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 192))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), 0, a2);
    if ((int)v19 >= 0)
      v19 = v22;
    else
      v19 = v19;
  }
  if ((v19 & 0x80000000) == 0)
  {
    v26 = 0;
    v23 = ssft_hlp_ReadStopFlag(a1, &v26);
    if (v26 != 1 || v23 <= -1)
      return v23;
    else
      return 2147493895;
  }
  return v19;
}

uint64_t ve_ttsProcessText2Speech(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t NullHandle;
  uint64_t v22;

  v6 = 2147483656;
  NullHandle = safeh_GetNullHandle();
  v22 = v7;
  v20 = 0;
  if ((_DWORD)a2 == 1750024778 && a1 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2Speech : Begin", v8, v9, v10, v18);
    v11 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsProcessText2Speech", 3, &v20);
    if (v11 < 0)
      return ssft_MapTtsegErrToAPI(v11);
    v15 = -2147475449;
    if (!a3 || !*(_QWORD *)(a3 + 16) || !*(_QWORD *)(a3 + 8))
      goto LABEL_16;
    if (*(_DWORD *)a3 > 1u)
    {
      v15 = -2147474688;
      goto LABEL_16;
    }
    v16 = SetMimeTypeAccordingToTextFormat(a1, *(_DWORD *)a3);
    if (v16 < 0)
    {
LABEL_13:
      v15 = v16;
LABEL_16:
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2Speech : End", v12, v13, v14, v19);
      if (v20)
        ssft_hlp_Unlock(a1, v20);
      return ssft_MapTtsegErrToAPI(v15);
    }
    if (*(_QWORD *)(a1 + 504))
    {
      v16 = ssft_hlp_CreateMessageWithText(a1, a2, a1, a3, 0, &NullHandle);
      if ((v16 & 0x80000000) == 0)
        v16 = ssft_hlp_ProcessMessage2Speech(a1, 0, NullHandle, v22);
      goto LABEL_13;
    }
    ssft_hlp_Unlock(a1, v20);
    return 2147485824;
  }
  return v6;
}

uint64_t SetMimeTypeAccordingToTextFormat(uint64_t a1, int a2)
{
  uint64_t Str;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__s1;

  if (a2 == 1)
  {
    __s1 = 0;
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"inputmimetype", &__s1);
    if ((Str & 0x80000000) != 0)
    {
      v18 = Str;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 51023, "%s%x", v4, v5, v6, v7, "lhError");
    }
    else
    {
      v8 = SetSavedMimeTypeforPlainText(a1, __s1);
      v13 = *(_QWORD *)(a1 + 32);
      if (v8)
      {
        v18 = paramc_ParamSetStr(*(_QWORD *)(v13 + 40), (uint64_t)"inputmimetype", "application/synthesis+ssml");
        if ((v18 & 0x80000000) != 0)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 51020, "%s%x", v14, v15, v16, v17, "lhError");
      }
      else
      {
        v18 = 2147491850;
        log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"VEAPI", 51024, "%s%x", v9, v10, v11, v12, "lhError");
      }
    }
  }
  else
  {
    v19 = *(char **)(a1 + 616);
    if (v19)
    {
      v18 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"inputmimetype", v19);
      if ((v18 & 0x80000000) != 0)
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 51021, "%s%x", v20, v21, v22, v23, "lhError");
      else
        SetSavedMimeTypeforPlainText(a1, 0);
    }
    else
    {
      return 0;
    }
  }
  return v18;
}

uint64_t ssft_hlp_CreateMessageWithText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  const char *__src;
  char *__s1;
  uint64_t NullHandle;
  uint64_t v33;
  void *__dst;
  uint64_t v35;

  v12 = *(_QWORD *)(a4 + 8);
  v11 = *(std::string::value_type **)(a4 + 16);
  __dst = 0;
  v35 = 0;
  NullHandle = safeh_GetNullHandle();
  v33 = v13;
  __s1 = 0;
  if (!a6)
    return 2147483655;
  *a6 = safeh_GetNullHandle();
  a6[1] = v14;
  inited = InitRsrcFunction(*(_WORD **)(a3 + 16), *(_QWORD *)(a3 + 24), &v35);
  if ((inited & 0x80000000) != 0)
    return inited;
  v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 528) + 32);
  v17 = safeh_GetNullHandle();
  v18 = v16(v17);
  if ((v18 & 0x80000000) == 0)
  {
    if ((paramc_ParamGetStr(*(_QWORD *)(v35 + 40), (uint64_t)"inputmimetype", &__s1) & 0x80000000) != 0)
    {
      v19 = "text/plain;charset=utf-16";
      __src = (const char *)&aSMS_UTF16;
      __s1 = "text/plain;charset=utf-16";
      v21 = 20;
    }
    else
    {
      v19 = __s1;
      v20 = strcmp(__s1, "text/plain;charset=utf-8");
      if (v20)
        v21 = 20;
      else
        v21 = 10;
      v22 = (const char *)&aSMS_UTF16;
      if (!v20)
        v22 = "\x1B\\tn=sms\\ .daf";
      __src = v22;
    }
    v24 = strcmp(v19, "text/plain;charset=utf-16") == 0;
    _Gryphon_SetOriginalText(a1, a2, v11, v12, v24);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 528) + 64))(*a6, a6[1], 192, __s1, 0, 2, &NullHandle);
    v25 = a5 != 2 && *(_DWORD *)(a3 + 116) == 2;
    v26 = !v25;
    if (v25)
      v27 = v21;
    else
      v27 = 0;
    if ((v18 & 0x80000000) == 0)
    {
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 528)
                                                                         + 112))(NullHandle, v33, &__dst, v27 + v12);
      if ((v18 & 0x80000000) == 0)
      {
        if ((v26 & 1) == 0)
          memcpy(__dst, __src, v21);
        memcpy((char *)__dst + v27, v11, v12);
        *(_DWORD *)(a3 + 448) = v27;
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 528) + 120))(NullHandle, v33, v27 + v12);
      }
    }
  }
  v23 = v18;
  if (NullHandle)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 528) + 72))(NullHandle, v33);
  if ((v23 & 0x80000000) != 0 && *a6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 528) + 40))(*a6, a6[1]);
    *a6 = safeh_GetNullHandle();
    a6[1] = v28;
  }
  return v23;
}

uint64_t ve_ttsAnalyzeText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int Str;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *__s1;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  uint64_t NullHandle;
  uint64_t v35;

  NullHandle = safeh_GetNullHandle();
  v35 = v6;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  __s1 = 0;
  LODWORD(v30) = *(_DWORD *)a3;
  v32 = 0;
  result = 2147483656;
  if ((_DWORD)a2 != 1750024778 || !a1 || *(_DWORD *)a1 != 1934574154)
    return result;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2Speech : Begin", v7, v8, v9, v27);
  v11 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsAnalyzeText", 3, &v33);
  if (v11 < 0)
    return ssft_MapTtsegErrToAPI(v11);
  v15 = -2147475449;
  if (!*(_QWORD *)(a3 + 16) || !*(_QWORD *)(a3 + 8))
    goto LABEL_17;
  if (*(_DWORD *)a3 > 1u)
  {
    v22 = 0;
    v15 = -2147474688;
    goto LABEL_18;
  }
  Str = SetMimeTypeAccordingToTextFormat(a1, *(_DWORD *)a3);
  if (Str < 0
    || (Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"inputmimetype", &__s1), Str < 0))
  {
    v15 = Str;
LABEL_17:
    v22 = 0;
    goto LABEL_18;
  }
  v17 = __s1;
  if (!strcmp(__s1, "text/plain;charset=utf-16"))
  {
    v31 = *(_QWORD *)(a3 + 8);
    v23 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v24 = v31 + 2;
    goto LABEL_26;
  }
  if (!strcmp(v17, "text/plain;charset=utf-8") || !strcmp(v17, "application/synthesis+ssml"))
  {
    v31 = *(_QWORD *)(a3 + 8);
    v23 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v24 = v31 + 1;
LABEL_26:
    v25 = (void *)heap_Calloc(v23, 1, v24);
    v22 = (uint64_t)v25;
    v32 = v25;
    if (v25)
    {
      memcpy(v25, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 8));
      if (*(_QWORD *)(a1 + 504))
      {
        v26 = ssft_hlp_CreateMessageWithText(a1, a2, a1, (uint64_t)&v30, 2, &NullHandle);
        if ((v26 & 0x80000000) == 0)
          v26 = ssft_hlp_ProcessMessage2Speech(a1, 2, NullHandle, v35);
        v15 = v26;
      }
      else
      {
        v15 = -2147481472;
      }
    }
    else
    {
      v15 = -2147483638;
    }
    goto LABEL_18;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18023, "%s%s", v18, v19, v20, v21, "typeOfChar");
  v22 = 0;
  v15 = -2147483641;
LABEL_18:
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsAnalyzeText : End", v12, v13, v14, v28);
  if (v22)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v22);
  if (v33)
    ssft_hlp_Unlock(a1, v33);
  return ssft_MapTtsegErrToAPI(v15);
}

uint64_t ve_ttsProcessText2SpeechStartingAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int Int;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t NullHandle;
  uint64_t v50;
  char __s2[8];
  char v52[64];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v10 = 2147483656;
  NullHandle = safeh_GetNullHandle();
  v50 = v11;
  v48 = 0;
  v46 = -1;
  v47 = -1;
  v44 = -1;
  v45 = -1;
  v43 = -1;
  v42 = 0;
  strcpy(__s2, "unknown");
  HIBYTE(v41) = 0;
  if ((_DWORD)a2 == 1750024778 && a1 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsProcessText2SpeechStartingAt : Begin", v12, v13, v14, v41);
    v15 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsProcessText2SpeechStartingAt", 3, (_DWORD *)&v48 + 1);
    if (v15 < 0)
      return ssft_MapTtsegErrToAPI(v15);
    v16 = -2147475449;
    if (!a3 || !*(_QWORD *)(a3 + 16) || !*(_QWORD *)(a3 + 8))
      goto LABEL_16;
    if (*(_DWORD *)a3 > 1u)
    {
      v16 = -2147474688;
      goto LABEL_16;
    }
    if (*(_QWORD *)(a1 + 504))
    {
      Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"enablerett", (int *)&v48);
      if (Int < 0)
      {
        v16 = Int;
        goto LABEL_16;
      }
      v16 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"enablerett", 0);
      if (v16 < 0)
      {
LABEL_16:
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"enablerett", v48);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsProcessText2SpeechStartingAt : End", v26, v27, v28, v41);
        if (HIDWORD(v48))
          ssft_hlp_Unlock(a1, SHIDWORD(v48));
        return ssft_MapTtsegErrToAPI(v16);
      }
      v21 = *(unsigned int *)(a4 + 40 * a5 + 8);
      v22 = *(_QWORD *)(a3 + 8);
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsProcessText2SpeechStartingAt : TA Index is out of boundary", v18, v19, v20, v41);
        goto LABEL_16;
      }
      *(_DWORD *)(a1 + 560) = *(_DWORD *)a3;
      *(_QWORD *)(a1 + 568) = v24;
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a3 + 16) + v21;
      v29 = a4 + 40 * a5;
      v30 = *(_QWORD *)(v29 + 16);
      paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"volume", (int *)&v47);
      paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"waitfactor", (int *)&v46);
      paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"rate", (int *)&v45);
      paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"pitch", (int *)&v44);
      paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"readmode", (int *)&v43);
      paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"inputmimetype", &v42);
      __strcpy_chk();
      paramc_ParamSetStrPermanent(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
      paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"lidon", (char *)&v41 + 7);
      if (!*(_QWORD *)(v29 + 16)
        || (*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 184))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v30) != 1)
      {
LABEL_44:
        v40 = ssft_hlp_CreateMessageWithText(a1, a2, a1, a1 + 560, 0, &NullHandle);
        if ((v40 & 0x80000000) == 0)
          v40 = ssft_hlp_ProcessMessage2Speech(a1, 0, NullHandle, v50);
        v16 = v40;
        paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"lidon", (char *)&v41 + 7);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"volume", v47);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"audioinsertervolume", v47);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"waitfactor", v46);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"rate", v45);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"audioinserterrate", v45);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"pitch", v44);
        paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"readmode", v43);
        paramc_ParamSetStrPermanent(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"inputmimetype", v52);
        goto LABEL_16;
      }
      v31 = (char *)(v30 + 64);
      if (!strcmp((const char *)(v30 + 64), __s2) || (v32 = strlen((const char *)(v30 + 64)), v32 == 7))
      {
        v31 = __s2;
      }
      else if (v32 != 3)
      {
        goto LABEL_30;
      }
      paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"lidon", v31);
LABEL_30:
      v33 = *(_DWORD *)(v30 + 4);
      if (v33 != 9999)
      {
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"volume", v33);
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"audioinsertervolume", *(_DWORD *)(v30 + 4));
      }
      v34 = *(_DWORD *)(v30 + 20);
      if (v34 != 9999)
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"waitfactor", v34);
      v35 = *(_DWORD *)(v30 + 8);
      if (v35 != 9999)
      {
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"rate", v35);
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"audioinserterrate", *(_DWORD *)(v30 + 8));
      }
      v36 = *(_DWORD *)(v30 + 12);
      if (v36 != 9999)
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"pitch", v36);
      v37 = *(_DWORD *)(v30 + 24);
      if (v37 != 9999)
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"readmode", v37);
      v38 = *(_DWORD *)(v30 + 28);
      if (v38)
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"initcommonbiasvalue", v38);
      v39 = (char *)(v30 + 32);
      if (strlen(v39) == 3)
        paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"initcommonbiaslanguage", v39);
      goto LABEL_44;
    }
    ssft_hlp_Unlock(a1, SHIDWORD(v48));
    return 2147485824;
  }
  return v10;
}

uint64_t ve_ttsProcessText2SpeechCooperatively(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  BOOL v11;
  int inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int MessageWithText;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __int16 *);
  uint64_t NullHandle;
  uint64_t v33;
  int v34;
  uint64_t (*v35)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __int16 *);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  result = 2147483656;
  v44 = 0;
  v43 = 0;
  v11 = (_DWORD)a2 != 1750024778 || a1 == 0;
  if (!v11 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2SpeechCooperatively : Begin", a6, a7, a8, v41);
    inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v44);
    if (inited < 0)
    {
      MessageWithText = inited;
    }
    else
    {
      MessageWithText = critsec_Enter(*(_QWORD **)(a1 + 80));
      if ((MessageWithText & 0x80000000) == 0)
      {
        v21 = *(_DWORD *)(a1 + 88);
        if ((v21 - 4) >= 2)
        {
          if (v21 == 1)
          {
            *(_DWORD *)(a1 + 88) = 4;
LABEL_17:
            v22 = critsec_Leave(*(_QWORD **)(a1 + 80));
            if (v22 < 0 && MessageWithText > -1)
              MessageWithText = v22;
            if (MessageWithText < 0)
              return ssft_MapTtsegErrToAPI(MessageWithText);
            if (v21 == 1)
            {
              *a4 = 1;
              *(_DWORD *)a5 = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 24) = 0;
              if (!a3 || !*(_QWORD *)(a3 + 16))
              {
                MessageWithText = -2147475449;
                goto LABEL_50;
              }
              MessageWithText = -2147475449;
              if (!*(_QWORD *)(a3 + 8))
                goto LABEL_50;
              if (*(_DWORD *)a3 > 1u)
              {
                MessageWithText = -2147474688;
                goto LABEL_50;
              }
              v27 = SetMimeTypeAccordingToTextFormat(a1, *(_DWORD *)a3);
              if ((v27 & 0x80000000) == 0)
              {
                MessageWithText = ssft_hlp_CreateMessageWithText(a1, a2, a1, a3, 0, (uint64_t *)(a1 + 456));
                if ((MessageWithText & 0x80000000) == 0)
                {
                  v28 = *(_DWORD *)(a1 + 440);
                  if (v28)
                  {
                    *(_DWORD *)(a1 + 440) = 0;
                    v29 = ssft_hlp_PipelineName(a1, 1, a1 + 120);
                    if (v29 < 0)
                    {
                      MessageWithText = v29;
                      *(_DWORD *)(a1 + 440) = v28;
                      goto LABEL_50;
                    }
                  }
                  else if ((~*(_DWORD *)(a1 + 112) & 0xC) == 0)
                  {
                    goto LABEL_51;
                  }
                  v38 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                               + 480)
                                                                                   + 192))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a1 + 310, 0);
                  goto LABEL_45;
                }
LABEL_50:
                v43 = 2;
                goto LABEL_51;
              }
LABEL_48:
              MessageWithText = v27;
              goto LABEL_50;
            }
            if (*(_QWORD *)(a5 + 16) && v21 != 6 && (v30 = *(_QWORD *)(a5 + 8)) != 0)
            {
              *(_QWORD *)(a1 + 472) = a4;
              *(_QWORD *)(a1 + 480) = a5;
              *(_DWORD *)(a1 + 488) = v30;
              *(_DWORD *)(a1 + 492) = *(_QWORD *)(a5 + 24);
              paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)"audiooutputbufsamples", v30 >> 1);
              *a4 = 4;
              *(_DWORD *)a5 = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 24) = 0;
              v31 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 176);
              NullHandle = safeh_GetNullHandle();
              v34 = v31(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 464), NullHandle, v33, &v43);
              MessageWithText = v34;
              if ((v34 & 0x80000000) == 0)
                goto LABEL_51;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 24) = 0;
              if ((v34 & 0x1FFF) != 0x807)
                goto LABEL_50;
            }
            else
            {
              *a4 = 32;
              *(_DWORD *)a5 = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 24) = 0;
              if (v21 == 6)
              {
                *(_QWORD *)(a1 + 472) = a4;
                *(_QWORD *)(a1 + 480) = a5;
                *(_QWORD *)(a1 + 488) = 0;
                v35 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 176);
                v36 = safeh_GetNullHandle();
                MessageWithText = v35(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 464), v36, v37, &v43);
                if ((MessageWithText & 0x1FFF) != 0x807)
                {
LABEL_46:
                  if (MessageWithText < 0)
                    goto LABEL_50;
LABEL_51:
                  if ((v43 & 2) != 0)
                  {
                    *a4 = 2;
                    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 528) + 40))(*(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 464));
                    *(_QWORD *)(a1 + 456) = safeh_GetNullHandle();
                    *(_QWORD *)(a1 + 464) = v39;
                    if ((~*(_DWORD *)(a1 + 112) & 0xC) != 0)
                      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                             + 192))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), 0, 0);
                    if (MessageWithText > -1 && v21 == 6)
                      MessageWithText = -2147473401;
                    ssft_hlp_Unlock(a1, 1);
                  }
                  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2SpeechCooperatively : End", v23, v24, v25, v42);
                  return ssft_MapTtsegErrToAPI(MessageWithText);
                }
              }
              else
              {
                v27 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 128))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
                if (v27 < 0)
                  goto LABEL_48;
              }
            }
            v38 = ssft_hlp_SetStateInterrupted(a1);
LABEL_45:
            MessageWithText = v38;
            goto LABEL_46;
          }
          if (!a3 && v21 == 6)
            goto LABEL_17;
        }
        else if (!a3)
        {
          goto LABEL_17;
        }
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18032, "%s%s", v16, v17, v18, v19, "function");
        MessageWithText = -2147475439;
        goto LABEL_17;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%s%s%x", v16, v17, v18, v19, "function");
    }
    return ssft_MapTtsegErrToAPI(MessageWithText);
  }
  return result;
}

uint64_t ssft_hlp_PipelineName(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t inited;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[11];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = 0;
  inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v14);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (!a2)
  {
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    memset(v15, 0, sizeof(v15));
    __strcpy_chk();
    __strcpy_chk();
    v7 = *(unsigned __int16 *)(a3 + 96);
    if (v7 == 11)
    {
      v8 = 11025;
    }
    else if (v7 == 22)
    {
      v8 = 22050;
    }
    else
    {
      v8 = 1000 * v7;
    }
    DWORD2(v16) = v8;
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    DWORD1(v23) = 7168880;
    inited = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                             + 504)
                                                                                 + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 512), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 520), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 40), v15);
    if ((inited & 0x80000000) == 0)
    {
      __strcpy_chk();
      __strcpy_chk();
      *(_WORD *)(a3 + 96) = DWORD2(v16) / 0x3E8;
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      goto LABEL_10;
    }
    return inited;
  }
LABEL_10:
  LH_utoa(*(unsigned __int16 *)(a3 + 96), (char *)v15, 0xAu);
  strcpy((char *)(a3 + 190), "pipeline/");
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  v9 = *(unsigned __int8 *)(a3 + 98);
  if (*(_BYTE *)(a3 + 98)
    && (v9 != 102 && v9 != 70
     || (*(unsigned __int8 *)(a3 + 99) | 0x20) != 0x75
     || (*(unsigned __int8 *)(a3 + 100) | 0x20) != 0x6C
     || (*(unsigned __int8 *)(a3 + 101) | 0x20) != 0x6C
     || *(_BYTE *)(a3 + 102)))
  {
    __strcat_chk();
    __strcat_chk();
    if (*(_BYTE *)(a3 + 162) && strcmp((const char *)(a3 + 162), "0.0.0"))
      __strcat_chk();
    __strcat_chk();
  }
  v11 = *(_DWORD *)(a3 + 320);
  if (v11 != 2)
  {
    if (v11 == 1)
      goto LABEL_26;
    if (v11)
      return 2147491841;
  }
  __strcat_chk();
  __strcat_chk();
LABEL_26:
  __strcat_chk();
  v10 = brk_TagQueryEx(*(_QWORD *)(v14 + 24), a3 + 190, (uint64_t)"BROKERSTRING", 1, (uint64_t)&v13);
  if ((v10 & 0x80000000) == 0)
    brk_TagRelease(*(_QWORD *)(v14 + 24), v13);
  return v10;
}

uint64_t ssft_hlp_SetStateInterrupted(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v10;

  v6 = critsec_Enter(*(_QWORD **)(a1 + 80));
  if ((v6 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v2, v3, v4, v5, "lhError");
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 88);
    if (v7 > 6)
    {
      v6 = 2147491857;
    }
    else
    {
      v8 = 1 << v7;
      if ((v8 & 7) != 0)
      {
        v6 = 2147491857;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18032, 0, v2, v3, v4, v5, v10);
      }
      else if ((v8 & 0x18) != 0)
      {
        *(_DWORD *)(a1 + 88) = 6;
      }
    }
    critsec_Leave(*(_QWORD **)(a1 + 80));
  }
  return v6;
}

uint64_t ve_ttsSetParamList(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v25;
  const char *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  int v39;
  const char *v41;
  int v42;
  int v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  char *v57;
  __int16 v58;
  uint64_t v59;
  char v60[128];
  _DWORD __dst[82];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = 2147483656;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  if (a2 != 1750024778)
    return v8;
  if (!a1)
    return v8;
  memset(__dst, 0, 324);
  if (*(_DWORD *)a1 != 1934574154)
    return v8;
  LODWORD(v10) = a4;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsSetParamList : Begin", a6, a7, a8, v51);
  if (!a3)
    return 2147483654;
  inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v59);
  if (inited < 0)
    return ssft_MapTtsegErrToAPI(inited);
  memcpy(__dst, (const void *)(a1 + 120), 0x144uLL);
  v17 = *(_DWORD *)(a1 + 112);
  v18 = *(_DWORD *)(a1 + 116);
  if ((~v17 & 0xC) != 0 && (v10 > 1 || *a3 != 20))
    goto LABEL_96;
  if (!BYTE2(__dst[47]))
  {
    if ((_DWORD)v10)
    {
      v44 = v10;
      v45 = a3;
      while (1)
      {
        v46 = *v45;
        v45 += 33;
        if ((v46 - 1) < 4)
          break;
        if (!--v44)
          goto LABEL_96;
      }
      v19 = 1;
      goto LABEL_11;
    }
LABEL_96:
    inited = -2147475439;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18019, "%s%x", v13, v14, v15, v16, "lhError");
    goto LABEL_141;
  }
  v19 = 0;
  if (!(_DWORD)v10)
  {
    LODWORD(v25) = 0;
    LODWORD(v54) = 0;
    v43 = 0;
LABEL_99:
    if (v19)
    {
      if ((_DWORD)v10)
        BYTE2(__dst[24]) = 0;
      if (!v43)
        BYTE2(__dst[40]) = 0;
      inited = ssft_hlp_PipelineName(a1, 0, (uint64_t)__dst);
      if (inited < 0)
      {
        if (!(LOBYTE(__dst[0]) | LOBYTE(__dst[16])))
          goto LABEL_113;
        if (!(_DWORD)v54)
          LOWORD(__dst[24]) = 0;
        BYTE2(__dst[24]) = 0;
        if (!(_DWORD)v10)
          BYTE2(__dst[32]) = 0;
        if (!v43)
          BYTE2(__dst[40]) = 0;
        inited = ssft_hlp_PipelineName(a1, 0, (uint64_t)__dst);
        if (inited < 0)
        {
LABEL_113:
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18020, "%s%x", v47, v14, v15, v16, "lhError");
          goto LABEL_138;
        }
      }
    }
    else if (inited < 0)
    {
      goto LABEL_138;
    }
    if (((*(_DWORD *)(a1 + 112) >> 2) & (*(_DWORD *)(a1 + 112) << 28 >> 31)) != ((v17 & 0xC) == 12))
    {
      if ((v17 & 0xC) == 0xC)
      {
LABEL_121:
        *(_DWORD *)(a1 + 440) = 0;
        __dst[80] = 0;
        inited = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                           + 192))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), (char *)&__dst[47] + 2, 0);
        if ((inited & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 112) = v17;
          *(_DWORD *)(a1 + 116) = v18;
          goto LABEL_124;
        }
LABEL_126:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18022, "%s%x", v48, v14, v15, v16, "lhError");
        goto LABEL_138;
      }
      inited = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                         + 192))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), 0, 0);
      if (inited < 0)
        goto LABEL_126;
    }
    if (v19 != 1 || (v17 & 8) == 0 || (v17 & 4) == 0)
    {
      *(_DWORD *)(a1 + 112) = v17;
      *(_DWORD *)(a1 + 116) = v18;
      if (!v19)
        goto LABEL_138;
LABEL_124:
      memcpy((void *)(a1 + 120), __dst, 0x144uLL);
      if (!(_DWORD)v25)
        goto LABEL_141;
      goto LABEL_139;
    }
    goto LABEL_121;
  }
LABEL_11:
  v10 = v10;
  v20 = v10;
  v21 = a3;
  v55 = v19;
  while (1)
  {
    v23 = *v21;
    v21 += 33;
    v22 = v23;
    if ((v23 - 8) >= 4 && v22 != 24)
      break;
    if (!--v20)
    {
      v25 = 0;
      goto LABEL_19;
    }
  }
  v49 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsSetParamList", 2, &v56);
  inited = v49;
  if (v49 < 0)
  {
    v56 = 0;
    goto LABEL_139;
  }
  v25 = 1;
LABEL_19:
  v53 = 0;
  v54 = 0;
  v26 = (const char *)(a3 + 1);
  while (1)
  {
    switch(*((_DWORD *)v26 - 1))
    {
      case 1:
        ssft_loc_strncpy(v26, (char *)__dst, 64);
        v58 = 0;
        if (strlen((const char *)__dst) == 3
          && (ssft_loc_ConvertToLanguageTLW(*(_QWORD *)(a1 + 32), &v57, &v58, (char *)__dst) & 0x80000000) == 0)
        {
          __strcpy_chk();
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v57);
          v57 = 0;
        }
        goto LABEL_25;
      case 2:
        ssft_loc_strncpy(v26, (char *)&__dst[16], 32);
LABEL_25:
        v55 = 1;
        goto LABEL_88;
      case 3:
        ssft_loc_strncpy(v26, (char *)&__dst[32] + 2, 32);
        HIDWORD(v54) = 1;
        v55 = 1;
        goto LABEL_88;
      case 4:
        v27 = *(unsigned __int16 *)v26;
        if (v27 > 0xF)
        {
          if (v27 != 16 && v27 != 22 && v27 != 48)
            goto LABEL_145;
          goto LABEL_81;
        }
        if (v27 == 8 || v27 == 11)
        {
LABEL_81:
          LOWORD(__dst[24]) = v27;
          v55 = 1;
          LODWORD(v54) = 1;
          goto LABEL_88;
        }
LABEL_145:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18013, "%s%u", v13, v14, v15, v16, "frequency");
        goto LABEL_146;
      case 5:
        ssft_loc_strncpy(v26, v60, 128);
        v28 = *(_QWORD *)(v59 + 40);
        v29 = v60;
        v30 = "extraesclang";
        goto LABEL_78;
      case 6:
        ssft_loc_strncpy(v26, v60, 128);
        v28 = *(_QWORD *)(v59 + 40);
        v29 = v60;
        v30 = "extraesctn";
        goto LABEL_78;
      case 7:
        v31 = v25;
        v32 = *(unsigned __int16 *)v26;
        v33 = "text/plain;charset=utf-16";
        if (v32 != 1)
          v33 = 0;
        if (v32 == 2)
          v34 = "text/plain;charset=utf-8";
        else
          v34 = (char *)v33;
        if (v34)
        {
          inited = paramc_ParamSetStrPermanent(*(_QWORD *)(v59 + 40), (uint64_t)"inputmimetype", v34);
          SetSavedMimeTypeforPlainText(a1, v34);
          v25 = v31;
          goto LABEL_88;
        }
        inited = -2147475441;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18017, "%s%u", v13, v14, v15, v16, "typeOfChar");
        if (!(_DWORD)v31)
          goto LABEL_141;
LABEL_139:
        if (v56)
          ssft_hlp_Unlock(a1, v56);
LABEL_141:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsSetParamList : End", v14, v15, v16, v52);
        return ssft_MapTtsegErrToAPI(inited);
      case 8:
        v35 = paramc_ParamSetUIntPermanent(*(_QWORD *)(v59 + 40), (uint64_t)"volume", *(unsigned __int16 *)v26);
        if (v35 < 0)
          goto LABEL_130;
        v36 = *(_QWORD *)(v59 + 40);
        v37 = *(unsigned __int16 *)v26;
        v38 = "audioinsertervolume";
        goto LABEL_86;
      case 9:
        v35 = paramc_ParamSetUIntPermanent(*(_QWORD *)(v59 + 40), (uint64_t)"rate", *(unsigned __int16 *)v26);
        if (v35 < 0)
        {
LABEL_130:
          inited = v35;
          goto LABEL_137;
        }
        v36 = *(_QWORD *)(v59 + 40);
        v37 = *(unsigned __int16 *)v26;
        v38 = "audioinserterrate";
        goto LABEL_86;
      case 0xA:
        v36 = *(_QWORD *)(v59 + 40);
        v37 = *(unsigned __int16 *)v26;
        v38 = "pitch";
        goto LABEL_86;
      case 0xB:
        inited = paramc_ParamSetUIntPermanent(*(_QWORD *)(v59 + 40), (uint64_t)"waitfactor", *(unsigned __int16 *)v26);
        paramc_ParamSetUIntPermanent(*(_QWORD *)(v59 + 40), (uint64_t)"waitfactorsetbyapi", 1u);
        goto LABEL_88;
      case 0xC:
        v36 = *(_QWORD *)(v59 + 40);
        v37 = *(unsigned __int16 *)v26;
        v38 = "readmode";
        goto LABEL_86;
      case 0xD:
        v18 = *(unsigned __int16 *)v26;
        if ((v18 - 1) < 2)
          goto LABEL_88;
        inited = -2147475441;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18016, "%s%u", v13, v14, v15, v16, "textMode");
        goto LABEL_138;
      case 0xE:
        v37 = *(unsigned __int16 *)v26;
        if (v37 - 2501 < 0xFFFFF654)
        {
          inited = -2147475441;
LABEL_137:
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18019, "%s%d%s%x", v13, v14, v15, v16, "parameterID");
LABEL_138:
          if (!(_DWORD)v25)
            goto LABEL_141;
          goto LABEL_139;
        }
        v36 = *(_QWORD *)(v59 + 40);
        v38 = "maxinputlength";
LABEL_86:
        v42 = paramc_ParamSetUIntPermanent(v36, (uint64_t)v38, v37);
LABEL_87:
        inited = v42;
LABEL_88:
        if (inited < 0)
          goto LABEL_137;
        v26 += 132;
        if (!--v10)
        {
          LODWORD(v10) = HIDWORD(v54);
          v19 = v55;
          v43 = v53;
          goto LABEL_99;
        }
        break;
      case 0xF:
        if (*(_WORD *)v26 == 1)
        {
          v28 = *(_QWORD *)(v59 + 40);
          v30 = "lidscope";
          v29 = "user-defined";
        }
        else
        {
          if (*(_WORD *)v26)
            goto LABEL_131;
          v28 = *(_QWORD *)(v59 + 40);
          v30 = "lidscope";
          v29 = "none";
        }
        goto LABEL_78;
      case 0x10:
        if (*(_WORD *)v26 == 1)
        {
          v28 = *(_QWORD *)(v59 + 40);
          v30 = "lidvoiceswitch";
          v29 = "yes";
        }
        else
        {
          if (*(_WORD *)v26)
            goto LABEL_131;
          v28 = *(_QWORD *)(v59 + 40);
          v30 = "lidvoiceswitch";
          v29 = "no";
        }
        goto LABEL_78;
      case 0x11:
        if (*(_WORD *)v26 == 1)
        {
          v28 = *(_QWORD *)(v59 + 40);
          v30 = "lidmode";
          v29 = "forced-choice";
        }
        else
        {
          if (*(_WORD *)v26)
          {
LABEL_131:
            inited = -2147475441;
            if (!(_DWORD)v25)
              goto LABEL_141;
            goto LABEL_139;
          }
          v28 = *(_QWORD *)(v59 + 40);
          v30 = "lidmode";
          v29 = "memory-bias";
        }
LABEL_78:
        v42 = paramc_ParamSetStrPermanent(v28, (uint64_t)v30, v29);
        goto LABEL_87;
      case 0x12:
        ssft_loc_strncpy(v26, v60, 128);
        v28 = *(_QWORD *)(v59 + 40);
        v29 = v60;
        v30 = "lidlanguages";
        goto LABEL_78;
      case 0x13:
        v39 = *(unsigned __int16 *)v26;
        if (v39 == 10007)
        {
          v36 = *(_QWORD *)(v59 + 40);
          v38 = "markermode";
          v37 = -1;
        }
        else if (v39 == 1)
        {
          v36 = *(_QWORD *)(v59 + 40);
          v38 = "markermode";
          v37 = 1199;
        }
        else
        {
          if (*(_WORD *)v26)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18014, "%s%u", v13, v14, v15, v16, "markerMode");
LABEL_146:
            inited = -2147475449;
            if ((_DWORD)v25)
              goto LABEL_139;
            goto LABEL_141;
          }
          v36 = *(_QWORD *)(v59 + 40);
          v38 = "markermode";
          v37 = 0;
        }
        goto LABEL_86;
      case 0x14:
        v17 = *(unsigned __int16 *)v26;
        if (v17 == 12 || v17 == 3)
          goto LABEL_88;
        inited = -2147475441;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18015, "%s%x", v13, v14, v15, v16, "initMode");
        goto LABEL_138;
      case 0x15:
        if (*v26)
          v41 = v26;
        else
          v41 = "0.0.0";
        ssft_loc_strncpy(v41, (char *)&__dst[40] + 2, 12);
        HIDWORD(v54) = 1;
        v55 = 1;
        v53 = 1;
        goto LABEL_88;
      case 0x16:
        v36 = *(_QWORD *)(v59 + 40);
        v37 = *(unsigned __int16 *)v26;
        v38 = "disablefinalsentencesilence";
        goto LABEL_86;
      case 0x18:
        v36 = *(_QWORD *)(v59 + 40);
        v37 = *(unsigned __int16 *)v26;
        v38 = "timbre";
        goto LABEL_86;
      default:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18018, "%s%d", v13, v14, v15, v16, "parameterID");
        goto LABEL_146;
    }
  }
}

uint64_t ssft_loc_strncpy(const char *a1, char *a2, __int16 a3)
{
  uint64_t result;

  if (a1)
  {
    if (strlen(a1) <= (unsigned __int16)(a3 - 1))
    {
      strcpy(a2, a1);
      return 0;
    }
    else
    {
      *a2 = 0;
      return 2147483657;
    }
  }
  else
  {
    result = 2147483654;
    *a2 = 0;
  }
  return result;
}

uint64_t ssft_loc_ConvertToLanguageTLW(uint64_t a1, char **a2, _WORD *a3, char *a4)
{
  uint64_t result;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  int v16;
  char *v17;
  int v18;
  _WORD *v19;
  char *v20;
  char *__s1;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  result = 2147483654;
  if (!a2)
    return result;
  if (!a3)
    return result;
  result = brk_ComponentTableIteratorOpen(*(_QWORD *)(a1 + 24), (uint64_t)"pipeline/*", (uint64_t)&v24);
  if ((result & 0x80000000) != 0)
    return result;
  if ((brk_ComponentTableIteratorNext(v24) & 0x80000000) != 0)
  {
LABEL_32:
    v13 = 2147483668;
    goto LABEL_33;
  }
  v19 = a3;
  while (1)
  {
    if ((brk_TagIteratorOpen(*(_QWORD *)(a1 + 24), v23, "PARAMETERS/*", 1, &v22) & 0x80000000) != 0)
      goto LABEL_31;
    v20 = 0;
    __s1 = 0;
    if ((brk_TagIteratorNext(v22, (uint64_t)&__s1, (uint64_t)&v20) & 0x80000000) != 0)
    {
      v11 = 0;
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = __s1;
        if (__s1)
        {
          if (!strcmp(__s1, "language"))
          {
            v10 = v20;
          }
          else if (!strcmp(v12, "langcode"))
          {
            v9 = v20;
          }
          else if (!strcmp(v12, "langid"))
          {
            v11 = (unsigned __int16)LH_atou(v20);
          }
        }
      }
      while ((brk_TagIteratorNext(v22, (uint64_t)&__s1, (uint64_t)&v20) & 0x80000000) == 0);
    }
    brk_TagIteratorClose(v22);
    v22 = 0;
    if (!v10 || !v9)
      goto LABEL_31;
    if (!v11)
      v11 = (unsigned __int16)LH_atou(v10);
    if (*a2)
    {
      if (!LH_stricmp(v10, *a2))
      {
        v14 = a4;
        v15 = v9;
LABEL_35:
        strcpy(v14, v15);
        v13 = 0;
        *v19 = v11;
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    if (!*v19 && *a4)
      break;
    if (v11 == (unsigned __int16)*v19)
    {
      strcpy(a4, v9);
      v16 = strlen(v10);
      v17 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), (v16 + 1));
      *a2 = v17;
      v13 = 2147483658;
      if (v17)
      {
        strcpy(v17, v10);
        v13 = 0;
      }
      goto LABEL_33;
    }
LABEL_31:
    if ((brk_ComponentTableIteratorNext(v24) & 0x80000000) != 0)
      goto LABEL_32;
  }
  if (LH_stricmp(v9, a4))
    goto LABEL_31;
  v18 = strlen(v10);
  v14 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), (v18 + 1));
  *a2 = v14;
  v13 = 2147483658;
  if (v14)
  {
    v15 = v10;
    goto LABEL_35;
  }
LABEL_33:
  brk_ComponentTableIteratorClose(v24);
  return v13;
}

uint64_t ve_ttsGetParamList(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int inited;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  const char *v28;
  const char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  int Str;
  uint64_t v37;
  uint64_t v38;
  char *__s1;
  uint64_t v40;
  int v41;

  v8 = 2147483656;
  __s1 = 0;
  v40 = 0;
  v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154)
    return v8;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsGetParamList : Begin", a6, a7, a8, v37);
  if (!a3)
    return 2147483654;
  inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v40);
  if (inited < 0)
    return ssft_MapTtsegErrToAPI(inited);
  if (!a4)
    goto LABEL_65;
  v18 = a4;
  v19 = (char *)(a3 + 4);
  v20 = 1;
  while (2)
  {
    switch(*((_DWORD *)v19 - 1))
    {
      case 1:
        v21 = (char *)(a1 + 120);
        goto LABEL_48;
      case 2:
        v21 = (char *)(a1 + 184);
        goto LABEL_48;
      case 3:
        v21 = (char *)(a1 + 250);
        goto LABEL_48;
      case 4:
        LOWORD(v22) = *(_WORD *)(a1 + 216);
        goto LABEL_53;
      case 5:
        v23 = *(_QWORD *)(v40 + 40);
        v24 = "extraesclang";
        goto LABEL_46;
      case 6:
        v23 = *(_QWORD *)(v40 + 40);
        v24 = "extraesctn";
        goto LABEL_46;
      case 7:
        inited = paramc_ParamGetStr(*(_QWORD *)(v40 + 40), (uint64_t)"inputmimetype", &__s1);
        if (inited < 0)
          goto LABEL_65;
        v41 = 0;
        if (TextMime2ve(__s1, 0, &v41, 0))
          goto LABEL_52;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18023, "%s%s", v13, v14, v15, v16, "typeOfChar");
        inited = -2147483641;
        goto LABEL_65;
      case 8:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "volume";
        goto LABEL_51;
      case 9:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "rate";
        goto LABEL_51;
      case 0xA:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "pitch";
        goto LABEL_51;
      case 0xB:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "waitfactor";
        goto LABEL_51;
      case 0xC:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "readmode";
        goto LABEL_51;
      case 0xD:
        v22 = *(_DWORD *)(a1 + 116);
        goto LABEL_53;
      case 0xE:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "maxinputlength";
        goto LABEL_51;
      case 0xF:
        inited = paramc_ParamGetStr(*(_QWORD *)(v40 + 40), (uint64_t)"lidscope", &__s1);
        if (inited < 0)
          goto LABEL_65;
        v27 = __s1;
        if (!strcmp(__s1, "none"))
          goto LABEL_59;
        v28 = v27;
        v29 = "user-defined";
        goto LABEL_36;
      case 0x10:
        inited = paramc_ParamGetStr(*(_QWORD *)(v40 + 40), (uint64_t)"lidvoiceswitch", &__s1);
        if (inited < 0)
          goto LABEL_65;
        v30 = __s1;
        if (!strcmp(__s1, "no"))
          goto LABEL_59;
        v28 = v30;
        v29 = "yes";
        goto LABEL_36;
      case 0x11:
        inited = paramc_ParamGetStr(*(_QWORD *)(v40 + 40), (uint64_t)"lidmode", &__s1);
        if (inited < 0)
          goto LABEL_65;
        v31 = __s1;
        if (!strcmp(__s1, "memory-bias"))
          goto LABEL_59;
        v28 = v31;
        v29 = "forced-choice";
LABEL_36:
        if (strcmp(v28, v29))
          goto LABEL_64;
        goto LABEL_40;
      case 0x13:
        v32 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        inited = paramc_ParamGetUInt(v32, (uint64_t)"markermode", (unsigned int *)&v41);
        if (inited < 0)
        {
          if (*(_WORD *)v19)
          {
LABEL_40:
            *(_WORD *)v19 = 1;
            if (inited < 0)
              goto LABEL_65;
            goto LABEL_55;
          }
        }
        else
        {
          v33 = (unsigned __int16)v41;
          *(_WORD *)v19 = v41;
          if (v33)
            goto LABEL_40;
        }
LABEL_59:
        *(_WORD *)v19 = 0;
        if (inited < 0)
          goto LABEL_65;
        goto LABEL_55;
      case 0x14:
        v22 = *(_DWORD *)(a1 + 112);
        goto LABEL_53;
      case 0x15:
        v21 = (char *)(a1 + 282);
        goto LABEL_48;
      case 0x16:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "disablefinalsentencesilence";
        goto LABEL_51;
      case 0x17:
        v23 = *(_QWORD *)(v40 + 40);
        v24 = "noclmset";
LABEL_46:
        Str = paramc_ParamGetStr(v23, (uint64_t)v24, &__s1);
        if ((Str & 0x80000000) == 0)
        {
          v21 = __s1;
LABEL_48:
          inited = ssft_loc_strncpy(v21, v19, 128);
          if (inited < 0)
            goto LABEL_65;
LABEL_55:
          v19 += 132;
          if (v20++ >= v18)
            goto LABEL_65;
          continue;
        }
        inited = Str;
LABEL_65:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsGetParamList : End", v14, v15, v16, v38);
        return ssft_MapTtsegErrToAPI(inited);
      case 0x18:
        v25 = *(_QWORD *)(v40 + 40);
        v41 = 0;
        v26 = "timbre";
LABEL_51:
        inited = paramc_ParamGetUInt(v25, (uint64_t)v26, (unsigned int *)&v41);
        if ((inited & 0x80000000) == 0)
        {
LABEL_52:
          LOWORD(v22) = v41;
LABEL_53:
          *(_WORD *)v19 = v22;
        }
        if ((inited & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_65;
      default:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18018, "%s%d", v13, v14, v15, v16, "parameterID");
LABEL_64:
        inited = -2147483641;
        goto LABEL_65;
    }
  }
}

uint64_t ve_ttsResourceLoad(uint64_t a1, int a2, const char *a3, uint64_t a4, char *a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char **v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  unsigned __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = 2147483656;
  v39 = 0;
  if (a2 == 1750024778 && a1 != 0 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceLoad : Begin", (uint64_t)a6, a7, a8, v37);
    v8 = 2147483654;
    if (a3)
    {
      if (a5 && a6)
      {
        if (a4)
        {
          v15 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsResourceLoad", 2, &v39);
          if (v15 < 0)
            return ssft_MapTtsegErrToAPI(v15);
          v8 = 2147491850;
          v16 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), 1, 16);
          if (v16)
          {
            v17 = (uint64_t *)v16;
            if (!strcmp(a3, "application/x-vocalizer-resources"))
            {
              bzero(v40, 0x810uLL);
              v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                                                + 240))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), 0, a5, a4, v40);
              if (v23 < 0)
              {
LABEL_40:
                if (v23 < 0)
                {
                  if (*v17)
                    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), *v17);
                  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v17);
                  v17 = 0;
                }
                *a6 = v17;
                ssft_hlp_Unlock(a1, v39);
                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceLoad : End", v34, v35, v36, v38);
                return ssft_MapTtsegErrToAPI(v23);
              }
              v25 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v41, 16);
              *v17 = v25;
              if (v25)
              {
                if (v41)
                {
                  v26 = 0;
                  v27 = 0;
                  while (1)
                  {
                    v28 = (const char **)&v40[8 * v27];
                    v29 = strlen(v28[2]);
                    v30 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v29 + 15, 1);
                    if (!v30)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), *v17);
                      goto LABEL_35;
                    }
                    v31 = (uint64_t)v30;
                    v32 = strcat(v30, v28[2]);
                    strcpy((char *)(v31 + strlen(v32)), ";loader=broker");
                    v23 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 72))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v31, v28[130], 0, 0, *v17 + v26);
                    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v31);
                    if (v23 < 0)
                      break;
                    ++v27;
                    v26 += 16;
                    if (v27 >= v41)
                      goto LABEL_39;
                  }
                  if (v27)
                  {
                    v33 = 0;
                    do
                    {
                      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                             + 80))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(*v17 + v33), *(_QWORD *)(*v17 + v33 + 8));
                      v33 += 16;
                      --v27;
                    }
                    while (v27);
                  }
                }
LABEL_39:
                *((_DWORD *)v17 + 2) = v41;
                (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 248))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v40);
                goto LABEL_40;
              }
            }
            else
            {
              v18 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), 1, 16);
              *v17 = v18;
              if (v18)
              {
                v19 = IsThisUrlOrRealPath(a5, 0);
                if (v19)
                  v20 = a5;
                else
                  v20 = 0;
                if (v19)
                  v21 = 0;
                else
                  v21 = a5;
                if (v19)
                  v22 = 0;
                else
                  v22 = a4;
                v23 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 72))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a3, v20, v21, v22, *v17);
                *((_DWORD *)v17 + 2) = 0;
                goto LABEL_40;
              }
            }
LABEL_35:
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v17);
          }
        }
        else
        {
          return 2147483655;
        }
      }
    }
  }
  return v8;
}

uint64_t ve_ttsResourceUnload(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v20 = 0;
  v8 = a2 != 1750024778 || a1 == 0;
  if (v8 || *(_DWORD *)a1 != 1934574154)
    return 2147483656;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceUnload : Begin", a6, a7, a8, v18);
  v11 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsResourceUnload", 2, &v20);
  if ((v11 & 0x80000000) == 0)
  {
    if (a3)
    {
      if (*((_DWORD *)a3 + 2))
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480)
                                                                          + 80))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(*a3 + v12), *(_QWORD *)(*a3 + v12 + 8));
          if (v11 < 0)
            break;
          ++v13;
          v12 += 16;
        }
        while (v13 < *((unsigned int *)a3 + 2));
      }
      else
      {
        v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 80))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)*a3, *(_QWORD *)(*a3 + 8));
      }
      if (*a3)
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), *a3);
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)a3);
    }
    ssft_hlp_Unlock(a1, v20);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceUnload : End", v15, v16, v17, v19);
  }
  return ssft_MapTtsegErrToAPI(v11);
}

uint64_t ve_ttsStop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  int State;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v8 = 2147483656;
  v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154)
    return v8;
  v23 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsStop : Begin", a6, a7, a8, v21);
  State = ssft_hlp_GetState(a1, &v23);
  if (State < 0)
    goto LABEL_21;
  if ((v23 - 5) < 0xFFFFFFFE)
    return 2147483665;
  State = ssft_hlp_PcmNotify(a1, 32);
  if (State < 0)
  {
LABEL_21:
    v20 = State;
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 480) + 128))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    if ((v13 & 0x1FFF) == 0x11)
      v14 = 0;
    else
      v14 = v13;
    v15 = ssft_hlp_SetStateInterrupted(a1);
    if (v14)
      v19 = 0;
    else
      v19 = v15 < 0;
    if (v19)
      v20 = v15;
    else
      v20 = v14;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsStop : End", v16, v17, v18, v22);
  }
  return ssft_MapTtsegErrToAPI(v20);
}

uint64_t ssft_hlp_PcmNotify(uint64_t a1, int a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, _QWORD, _DWORD *);
  int v3;
  _DWORD v5[2];
  uint64_t v6;

  v5[0] = a2;
  v5[1] = 0;
  v6 = 0;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *))(a1 + 504);
  if (v2 && (v3 = v2(a1, 1750024778, *(_QWORD *)(a1 + 496), v5)) != 0)
    return v3 & 0x1FFF | 0x80002000;
  else
    return 0;
}

uint64_t ve_ttsPause(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  int State;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v8 = 2147483656;
  v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154)
    return v8;
  v19 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Pause : Begin", a6, a7, a8, v17);
  State = ssft_hlp_GetState(a1, &v19);
  if (State < 0)
    return ssft_MapTtsegErrToAPI(State);
  if ((v19 - 5) < 0xFFFFFFFE)
    return 2147483665;
  v13 = ssft_hlp_PcmNotify(a1, 64);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Pause : End", v14, v15, v16, v18);
  return ssft_MapTtsegErrToAPI(v13);
}

uint64_t ve_ttsResume(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  int State;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v8 = 2147483656;
  v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154)
    return v8;
  v19 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Resume : Begin", a6, a7, a8, v17);
  State = ssft_hlp_GetState(a1, &v19);
  if (State < 0)
    return ssft_MapTtsegErrToAPI(State);
  if ((v19 - 5) < 0xFFFFFFFE)
    return 2147483665;
  v13 = ssft_hlp_PcmNotify(a1, 128);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Resume : End", v14, v15, v16, v18);
  return ssft_MapTtsegErrToAPI(v13);
}

uint64_t ve_ttsGetLanguageList(uint64_t a1, int a2, char *a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unint64_t v22;
  const char *v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v8 = 2147483656;
  v28 = 0;
  if (a2 == 1749240915 && *(_DWORD *)a1 == 1933790291)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLanguageList : Begin", a6, a7, a8, v26);
    if (a4)
    {
      v12 = 0;
      v13 = (unsigned __int16)*a4;
      if (a3 && *a4)
      {
        v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), v13, 86);
        if (!v14)
        {
          v19 = -2147483638;
          goto LABEL_31;
        }
        v12 = v14;
        LODWORD(v13) = (unsigned __int16)*a4;
      }
      v28 = v13;
      v18 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, unsigned int *))(*(_QWORD *)(a1 + 504)
                                                                                             + 64))(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), "eng/vocalizerautomotive", v12, &v28);
      v19 = v18;
      if (v18 < 0)
      {
        v20 = v28;
        if (!v12)
          goto LABEL_26;
        if ((v18 & 0x1FFF) != 9 || v28 == 0)
          goto LABEL_26;
      }
      else
      {
        v20 = v28;
        if (!v12)
        {
          *a4 = v28;
          goto LABEL_31;
        }
        if (!v28)
        {
          *a4 = 0;
          goto LABEL_27;
        }
      }
      if (*a4)
      {
        v22 = 0;
        v23 = (const char *)v12;
        while (1)
        {
          v24 = ssft_loc_strncpy(v23, a3, 128);
          if (v24 < 0)
            break;
          v24 = ssft_loc_strncpy(v23 + 64, a3 + 128, 4);
          if (v24 < 0)
            break;
          v24 = ssft_loc_strncpy(v23 + 72, a3 + 132, 128);
          if (v24 < 0)
            break;
          ++v22;
          v20 = v28;
          if (v22 < v28)
          {
            a3 += 260;
            v23 += 86;
            if (v22 < (unsigned __int16)*a4)
              continue;
          }
          v19 = 0;
          goto LABEL_26;
        }
        v19 = v24;
        goto LABEL_31;
      }
LABEL_26:
      *a4 = v20;
      if (!v12)
      {
LABEL_31:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLanguageList : End", v15, v16, v17, v27);
        return ssft_MapTtsegErrToAPI(v19);
      }
LABEL_27:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), v12);
      goto LABEL_31;
    }
    return 2147483654;
  }
  return v8;
}

uint64_t ve_ttsGetNtsInfo(uint64_t a1, int a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int16 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38[32];
  char v39[72];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = 2147483656;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (a2 != 1749240915)
    return v8;
  memset(v39, 0, 64);
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  memset(v38, 0, 22);
  if (*(_DWORD *)a1 != 1933790291)
    return v8;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetNtsInfo : Begin", a6, a7, a8, v29);
  if (a3)
  {
    v12 = strlen(a3) + 1;
    v13 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), v12);
    v32 = v13;
    if (!v13)
    {
      v25 = -2147483638;
      goto LABEL_20;
    }
    ssft_loc_strncpy(a3, v13, v12);
  }
  v17 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(_QWORD *)(a1 + 472));
  if (v17 < 0)
  {
    v25 = v17;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18024, "%s%x", v18, v19, v20, v21, "lhError");
  }
  else
  {
    v37 = 0u;
    memset(v38, 0, 22);
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v22 = ssft_loc_ConvertToLanguageTLW(*(_QWORD *)(a1 + 456), &v32, &v31, v38);
    if ((v22 & 0x80000000) == 0)
    {
      __strcpy_chk();
      v23 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, __int128 *, char *))(*(_QWORD *)(a1 + 504) + 120))(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), "eng/vocalizerautomotive", &v34, v39);
      v24 = v23 & 0x1FFF;
      if (v23 < 0 || v24 == 20)
      {
        if (v24 == 20)
          v26 = -2147483628;
        else
          v26 = v23;
        v27 = ssft_loc_strncpy(&byte_1DEBD87CE, a4, 1);
        if (v27 >= 0)
          v25 = v26;
        else
          v25 = v27;
        goto LABEL_20;
      }
      v22 = ssft_loc_strncpy(v39, a4, 128);
    }
    v25 = v22;
  }
LABEL_20:
  if (v33)
    brk_ObjClose(v33);
  if (v32)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), (uint64_t)v32);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetNtsInfo : End", v14, v15, v16, v30);
  return ssft_MapTtsegErrToAPI(v25);
}

uint64_t ve_ttsGetClmInfo(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  char *v10;
  const char *v11;
  unsigned __int16 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _WORD v38[16];
  char v39[64];
  char v40[2048];
  char v41[2056];
  uint64_t v42;

  v1 = MEMORY[0x1E0C80A78](a1);
  v42 = *MEMORY[0x1E0C80C00];
  v7 = 2147483656;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (v8 != 1749240915)
    return v7;
  v9 = (uint64_t *)v1;
  memset(v40, 0, 448);
  memset(v39, 0, sizeof(v39));
  v37 = 0u;
  memset(v38, 0, 22);
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  if (*(_DWORD *)v1 != 1933790291)
    return v7;
  v10 = v3;
  v11 = v2;
  log_OutText(*(_QWORD *)(*(_QWORD *)(v1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetClmInfo: Begin", v4, v5, v6, v29);
  if (v11)
  {
    v12 = strlen(v11) + 1;
    v13 = (char *)heap_Alloc(*(_QWORD *)(v9[57] + 8), v12);
    v32 = v13;
    if (!v13)
    {
      v25 = -2147483638;
      goto LABEL_20;
    }
    ssft_loc_strncpy(v11, v13, v12);
  }
  v17 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", v9[59]);
  if (v17 < 0)
  {
    v25 = v17;
    log_OutPublic(*(_QWORD *)(v9[57] + 32), (uint64_t)"VEAPI", 18024, "%s%x", v18, v19, v20, v21, "lhError");
  }
  else
  {
    v37 = 0u;
    memset(v38, 0, 22);
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v22 = ssft_loc_ConvertToLanguageTLW(v9[57], &v32, &v31, (char *)v38);
    if ((v22 & 0x80000000) == 0)
    {
      __strcpy_chk();
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, __int128 *, char *))(v9[63] + 128))(v9[64], v9[65], "eng/vocalizerautomotive", &v34, v39);
      v24 = v23 & 0x1FFF;
      if (v23 < 0 || v24 == 20)
      {
        if (v24 == 20)
          v26 = -2147483628;
        else
          v26 = v23;
        ssft_loc_strncpy(&byte_1DEBD87CE, v10, 1);
        ssft_loc_strncpy(&byte_1DEBD87CE, v10 + 128, 1);
        v27 = ssft_loc_strncpy(&byte_1DEBD87CE, v10 + 1152, 1);
        if (v27 >= 0)
          v25 = v26;
        else
          v25 = v27;
        goto LABEL_20;
      }
      ssft_loc_strncpy(v39, v10, 128);
      ssft_loc_strncpy(v40, v10 + 128, 1024);
      v22 = ssft_loc_strncpy(v41, v10 + 1152, 1024);
    }
    v25 = v22;
  }
LABEL_20:
  if (v33)
    brk_ObjClose(v33);
  if (v32)
    heap_Free(*(_QWORD **)(v9[57] + 8), (uint64_t)v32);
  log_OutText(*(_QWORD *)(v9[57] + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetClmInfo : End", v14, v15, v16, v30);
  return ssft_MapTtsegErrToAPI(v25);
}

uint64_t ve_ttsGetVoiceList(uint64_t a1, int a2, const char *a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int16 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  char *v31;
  const char *v32;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _WORD v44[12];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = 2147483656;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v36 = 0;
  if (a2 != 1749240915)
    return v8;
  v43 = 0u;
  memset(v44, 0, 22);
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  if (*(_DWORD *)a1 != 1933790291)
    return v8;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetVoiceList : Begin", a6, a7, a8, v34);
  if (!a5)
    return 2147483654;
  if (a3)
  {
    v13 = strlen(a3) + 1;
    v14 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), v13);
    v38 = v14;
    if (!v14)
      goto LABEL_18;
    ssft_loc_strncpy(a3, v14, v13);
  }
  v18 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(_QWORD *)(a1 + 472));
  if (v18 < 0)
  {
    v28 = v18;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18024, "%s%x", v19, v20, v21, v22, "lhError");
    goto LABEL_37;
  }
  v43 = 0u;
  memset(v44, 0, 22);
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v23 = ssft_loc_ConvertToLanguageTLW(*(_QWORD *)(a1 + 456), &v38, &v36, (char *)v44);
  if (v23 < 0)
  {
LABEL_36:
    v28 = v23;
    goto LABEL_37;
  }
  __strcpy_chk();
  v24 = 0;
  v25 = (unsigned __int16)*a5;
  if (a4 && *a5)
  {
    v26 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), v25, 200);
    if (v26)
    {
      v24 = v26;
      LODWORD(v25) = (unsigned __int16)*a5;
      goto LABEL_13;
    }
LABEL_18:
    v28 = -2147483638;
    goto LABEL_37;
  }
LABEL_13:
  v37 = v25;
  v27 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, __int128 *, uint64_t, unsigned int *))(*(_QWORD *)(a1 + 504) + 72))(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), "eng/vocalizerautomotive", &v40, v24, &v37);
  v28 = v27;
  if ((v27 & 0x80000000) == 0)
  {
    v29 = v37;
    if (!v24)
    {
      *a5 = v37;
      goto LABEL_37;
    }
    if (!v37)
    {
      *a5 = 0;
LABEL_35:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), v24);
      goto LABEL_37;
    }
LABEL_23:
    if (*a5)
    {
      v30 = 0;
      v31 = (char *)(a4 + 640);
      v32 = (const char *)(v24 + 136);
      while (1)
      {
        v23 = ssft_loc_strncpy(v32 - 136, v31 - 384, 128);
        if (v23 < 0)
          goto LABEL_36;
        v23 = ssft_loc_strncpy(v32 - 104, v31 - 512, 128);
        if (v23 < 0)
          goto LABEL_36;
        v23 = ssft_loc_strncpy(v32 - 12, v31 - 640, 128);
        if (v23 < 0)
          goto LABEL_36;
        v23 = ssft_loc_strncpy(v32 - 40, v31 - 256, 128);
        if (v23 < 0)
          goto LABEL_36;
        v23 = ssft_loc_strncpy(v32 - 28, v31 - 128, 128);
        if (v23 < 0)
          goto LABEL_36;
        v23 = ssft_loc_strncpy(v32, v31, 128);
        if (v23 < 0)
          goto LABEL_36;
        ++v30;
        v29 = v37;
        if (v30 < v37)
        {
          v31 += 768;
          v32 += 200;
          if (v30 < (unsigned __int16)*a5)
            continue;
        }
        v28 = 0;
        goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
  v29 = v37;
  if (v24 && (v27 & 0x1FFF) == 9 && v37)
    goto LABEL_23;
LABEL_34:
  *a5 = v29;
  if (v24)
    goto LABEL_35;
LABEL_37:
  if (v39)
    brk_ObjClose(v39);
  if (v38)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), (uint64_t)v38);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetVoiceList : End", v15, v16, v17, v35);
  return ssft_MapTtsegErrToAPI(v28);
}

uint64_t ve_ttsGetSpeechDBList(uint64_t a1, int a2, const char *a3, const char *a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  unsigned __int16 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _WORD v46[12];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = -2147483638;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v38 = 0;
  result = 2147483656;
  if (a2 != 1749240915)
    return result;
  v45 = 0u;
  memset(v46, 0, 22);
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  if (*(_DWORD *)a1 != 1933790291)
    return result;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetSpeechDBList : Begin", (uint64_t)a6, a7, a8, v36);
  result = 2147483654;
  if (!a4 || !a6)
    return result;
  if (a3)
  {
    v15 = strlen(a3) + 1;
    v16 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), v15);
    v40 = v16;
    if (!v16)
    {
      v21 = 0;
      goto LABEL_36;
    }
    ssft_loc_strncpy(a3, v16, v15);
  }
  v20 = strlen(a4) + 1;
  v21 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), v20);
  if (v21)
  {
    ssft_loc_strncpy(a4, v21, v20);
    v22 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(_QWORD *)(a1 + 472));
    if (v22 < 0)
    {
      v32 = v22;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18024, "%s%x", v23, v24, v25, v26, "lhError");
      v9 = v32;
      goto LABEL_36;
    }
    v45 = 0u;
    memset(v46, 0, 22);
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    v27 = ssft_loc_ConvertToLanguageTLW(*(_QWORD *)(a1 + 456), &v40, &v38, (char *)v46);
    if (v27 < 0)
    {
LABEL_33:
      v9 = v27;
      goto LABEL_36;
    }
    __strcpy_chk();
    v28 = 0;
    v29 = (unsigned __int16)*a6;
    if (!a5 || !*a6)
    {
LABEL_15:
      v39 = v29;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, __int128 *, char *, uint64_t, unsigned int *))(*(_QWORD *)(a1 + 504) + 88))(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), "eng/vocalizerautomotive", &v42, v21, v28, &v39);
      v9 = v31;
      if (v31 < 0)
      {
        if (!v28 || (v31 & 0x1FFF) != 9)
        {
          *a6 = v39;
          if (!v28)
            goto LABEL_36;
          goto LABEL_35;
        }
      }
      else if (!v28)
      {
        *a6 = v39;
        goto LABEL_36;
      }
      v33 = v39;
      if (v39 && *a6)
      {
        v34 = 0;
        v35 = v28 + 96;
        while (1)
        {
          v27 = ssft_loc_strncpy((const char *)(v35 - 32), (char *)(a5 + 256), 128);
          if (v27 < 0)
            goto LABEL_33;
          v27 = ssft_loc_strncpy((const char *)(v35 - 96), (char *)(a5 + 128), 128);
          if (v27 < 0)
            goto LABEL_33;
          v27 = ssft_loc_strncpy((const char *)v35, (char *)a5, 128);
          if (v27 < 0)
            goto LABEL_33;
          v27 = ssft_loc_strncpy((const char *)(v35 + 44), (char *)(a5 + 384), 128);
          if (v27 < 0)
            goto LABEL_33;
          *(_WORD *)(a5 + 512) = *(_WORD *)(v35 + 76);
          ++v34;
          v33 = v39;
          if (v34 < v39)
          {
            a5 += 514;
            v35 += 174;
            if (v34 < (unsigned __int16)*a6)
              continue;
          }
          v9 = 0;
          break;
        }
      }
      *a6 = v33;
LABEL_35:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), v28);
      goto LABEL_36;
    }
    v30 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), v29, 174);
    if (v30)
    {
      v28 = v30;
      LODWORD(v29) = (unsigned __int16)*a6;
      goto LABEL_15;
    }
  }
LABEL_36:
  if (v41)
    brk_ObjClose(v41);
  if (v40)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), (uint64_t)v40);
  if (v21)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8), (uint64_t)v21);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetSpeechDBList : End", v17, v18, v19, v37);
  return ssft_MapTtsegErrToAPI(v9);
}

uint64_t ve_ttsGetLipSyncInfo(uint64_t a1, int a2, int a3, int8x8_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  int SyncInfo;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  char *__s1;
  uint64_t v35;
  char *v36;
  __int16 v37;
  __int16 v38;
  _BYTE v39[2];
  uint64_t v40;
  char v41[1024];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v8 = 2147483656;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  __s1 = 0;
  if (a2 != 1750024778 || !a1 || *(_DWORD *)a1 != 1934574154)
    return v8;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLipSyncInfo : Begin", a6, a7, a8, v32);
  if (!a4)
    return 2147483654;
  inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v40);
  if (inited < 0)
    return ssft_MapTtsegErrToAPI(inited);
  v13 = *(_QWORD *)(a1 + 584);
  if (!v13)
  {
    inited = objc_GetObject(*(_QWORD *)(v40 + 48), (uint64_t)"PHONMAP", &v35);
    if ((inited & 0x80000000) == 0)
    {
      v14 = v35;
      v13 = *(_QWORD *)(v35 + 8);
      *(_QWORD *)(a1 + 584) = v13;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(v14 + 16);
      goto LABEL_9;
    }
    return ssft_MapTtsegErrToAPI(inited);
  }
LABEL_9:
  v39[0] = a3;
  v39[1] = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *, char **, _QWORD))(v13 + 64))(*(_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 600), 0, v39, &v36, 0) & 0x80000000) == 0)
  {
    v37 = 1024;
    inited = (*(uint64_t (**)(_QWORD, _QWORD, __int16 *, __int16 *, _QWORD))(*(_QWORD *)(a1 + 584) + 144))(*(_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 600), &v38, &v37, 0);
    if ((inited & 0x80000000) == 0)
    {
      inited = (*(uint64_t (**)(_QWORD, _QWORD, __int16 *, __int16 *, char *))(*(_QWORD *)(a1 + 584) + 144))(*(_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 600), &v38, &v37, v41);
      if ((inited & 0x80000000) == 0)
      {
        if ((paramc_ParamGet(*(_QWORD *)(v40 + 40), (uint64_t)"voiceml", &__s1, 0) & 0x80000000) != 0)
        {
          v20 = v36;
        }
        else
        {
          v19 = strcmp(__s1, "yes");
          v20 = v36;
          if (a3 != 35 && !v19 && v38 == 1)
            v20 = ++v36;
        }
        SyncInfo = lipsync_GetSyncInfo(*(_WORD **)(a1 + 608), a3, v20, a4);
        if (SyncInfo < 0)
        {
          v30 = SyncInfo;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18031, "%s%x", v22, v23, v24, v25, "lhError");
          inited = v30;
        }
        else
        {
          v29 = ssft_loc_strncpy(v36, (char *)&a4[1], 8);
          if ((v29 & 0x80000000) == 0)
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLipSyncInfo : End", v26, v27, v28, v33);
          inited = v29;
        }
      }
    }
    return ssft_MapTtsegErrToAPI(inited);
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18030, "%s%x", v15, v16, v17, v18, "lhError");
  return 2147483919;
}

uint64_t ve_ttsGetProductVersion(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2147483654;
  result = 0;
  *(_WORD *)a1 = 791;
  *(_BYTE *)(a1 + 2) = 2;
  return result;
}

uint64_t ve_ttsGetAdditionalProductInfo(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2147483654;
  result = 0;
  *(_DWORD *)a1 = 117966824;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

uint64_t ve_ttsGetRsrc(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  BOOL v5;
  int inited;
  uint64_t v8;

  result = 2147483656;
  v8 = 0;
  v5 = a2 != 1750024778 || a1 == 0;
  if (!v5 && *(_DWORD *)a1 == 1934574154)
  {
    inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v8);
    if (inited < 0)
    {
      return ssft_MapTtsegErrToAPI(inited);
    }
    else
    {
      result = 0;
      *a3 = v8;
    }
  }
  return result;
}

const char *ve_ttsGetErrorString(int a1)
{
  uint64_t v2;
  const char *result;

  v2 = 0;
  result = "Unknown error code";
  while (errStringCodes[v2] != a1)
  {
    v2 += 4;
    if (v2 == 296)
      return result;
  }
  return *(const char **)&errStringCodes[v2 + 2];
}

uint64_t ssft_LogOutText(uint64_t a1, int a2, uint64_t a3, int a4, char *__format, va_list a6)
{
  char __str[2048];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 8))
  {
    if (vsnprintf(__str, 0x800uLL, __format, a6) >= 0x7FF)
      __str[2047] = 0;
    if ((int)a3 <= 1)
      (*(void (**)(_QWORD, uint64_t, char *))(a1 + 8))(*(_QWORD *)(a1 + 24), a3, __str);
  }
  return 0;
}

uint64_t ssft_LogOutPublic(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))a1)(*(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  return 0;
}

uint64_t ssft_LogOutEvent(uint64_t a1, unsigned int a2)
{
  void (*v2)(_QWORD);

  v2 = *(void (**)(_QWORD))(a1 + 16);
  if (v2 && (a2 > 0x1A || ((1 << a2) & 0x7E3FCE1) == 0))
    v2(*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t ssft_LogGetLogLevel()
{
  return 0;
}

uint64_t ssft_hlp_convertAndCopyInternalMrkRcrdsToApiMrk(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t inited;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v32;
  unsigned int v33;

  v33 = 0;
  v32 = 0;
  inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v32);
  if ((inited & 0x80000000) == 0)
  {
    if ((paramc_ParamGetUInt(*(_QWORD *)(v32 + 40), (uint64_t)"markermode", &v33) & 0x80000000) != 0)
      v33 = 0;
    v9 = 0;
    if (a4)
    {
      v10 = a4;
      v11 = *(_QWORD *)(a2 + 32);
      v12 = (_QWORD *)(a3 + 24);
      do
      {
        v13 = v11 + 56 * v9;
        *(_WORD *)(v13 + 40) = 0;
        v14 = v13 + 40;
        *(_DWORD *)(v14 + 4) = 0;
        v15 = (_DWORD *)(v14 + 4);
        *(_QWORD *)(v14 + 8) = 0;
        v16 = (_QWORD *)(v14 + 8);
        v17 = *((_DWORD *)v12 - 6);
        if (v17 <= 32)
        {
          if (v17 == 1)
          {
            v18 = 0;
            v19 = 2;
            goto LABEL_22;
          }
          if (v17 != 26)
          {
            if (v17 == 29)
            {
              v18 = 0;
              *v16 = *v12;
              v19 = 8;
              goto LABEL_22;
            }
            goto LABEL_35;
          }
        }
        else
        {
          if (v17 <= 39)
          {
            if (v17 == 33)
            {
              v18 = 0;
              *(_WORD *)v14 = *(_DWORD *)v12;
              v19 = 4;
              goto LABEL_22;
            }
            if (v17 == 38)
            {
LABEL_10:
              v18 = 0;
              *v16 = *v12;
              v19 = 0x10000;
LABEL_22:
              v20 = v11 + 56 * v9;
              *(_DWORD *)v20 = v19;
              v21 = *((unsigned int *)v12 - 5);
              v22 = *((unsigned int *)v12 - 4);
              *(_QWORD *)(v20 + 8) = v21;
              v23 = (_QWORD *)(v20 + 8);
              *(_QWORD *)(v20 + 16) = v22;
              v24 = (unint64_t *)(v20 + 16);
              if (*(_DWORD *)(a1 + 116) == 2)
              {
                v25 = *(unsigned int *)(a1 + 448);
                if (v21 >= v25)
                  v18 = 0;
                if (v18 == 1)
                {
                  v26 = v22 - (v25 - v21);
                  if (v22 < v25 - v21)
                    v26 = 0;
                  *v24 = v26;
                }
                v27 = v21 - v25;
                if (v21 <= v25)
                  v27 = 0;
                *v23 = v27;
              }
              v28 = *(_QWORD *)((char *)v12 - 12);
              *(_QWORD *)&v29 = v28;
              *((_QWORD *)&v29 + 1) = HIDWORD(v28);
              *(_OWORD *)(v11 + 56 * v9++ + 24) = v29;
              goto LABEL_33;
            }
            goto LABEL_35;
          }
          if (v17 != 0x4000)
          {
            if (v17 == 40)
            {
              v18 = 0;
              *v16 = *v12;
              v19 = 16;
              goto LABEL_22;
            }
LABEL_35:
            if (v33 == -1)
            {
              if (v17 <= 997)
              {
                v30 = v17 - 2;
                v18 = 0;
                v19 = 589824;
                switch(v30)
                {
                  case 0:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 0x40000;
                    goto LABEL_22;
                  case 1:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 327680;
                    goto LABEL_22;
                  case 2:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 393216;
                    goto LABEL_22;
                  case 3:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 196608;
                    goto LABEL_22;
                  case 4:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 458752;
                    goto LABEL_22;
                  case 5:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 0x80000;
                    goto LABEL_22;
                  case 6:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 1024;
                    goto LABEL_22;
                  case 7:
                    goto LABEL_22;
                  case 8:
                    v18 = 0;
                    v19 = 655360;
                    goto LABEL_22;
                  case 9:
                    v18 = 0;
                    v19 = 720896;
                    goto LABEL_22;
                  case 10:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 786432;
                    goto LABEL_22;
                  case 11:
                    v18 = 0;
                    v19 = 851968;
                    goto LABEL_22;
                  case 12:
                    v18 = 0;
                    v19 = 917504;
                    goto LABEL_22;
                  case 14:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 983040;
                    goto LABEL_22;
                  case 15:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 2555904;
                    goto LABEL_22;
                  case 16:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 0x100000;
                    goto LABEL_22;
                  case 17:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 1114112;
                    goto LABEL_22;
                  case 18:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 1179648;
                    goto LABEL_22;
                  case 19:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1310720;
                    goto LABEL_22;
                  case 20:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1376256;
                    goto LABEL_22;
                  case 22:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 1441792;
                    goto LABEL_22;
                  case 23:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 2048;
                    goto LABEL_22;
                  case 29:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 1245184;
                    goto LABEL_22;
                  case 30:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 0x20000;
                    goto LABEL_22;
                  case 32:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1507328;
                    goto LABEL_22;
                  case 34:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1572864;
                    goto LABEL_22;
                  case 35:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1638400;
                    goto LABEL_22;
                  case 36:
                    goto LABEL_10;
                  case 37:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1703936;
                    goto LABEL_22;
                  case 39:
                    v18 = 0;
                    v19 = 1769472;
                    goto LABEL_22;
                  case 48:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1835008;
                    goto LABEL_22;
                  case 49:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1900544;
                    goto LABEL_22;
                  case 50:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 1966080;
                    goto LABEL_22;
                  case 51:
                    v18 = 0;
                    *v15 = *(_DWORD *)v12;
                    v19 = 2031616;
                    goto LABEL_22;
                  case 52:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 0x200000;
                    goto LABEL_22;
                  case 53:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 2162688;
                    goto LABEL_22;
                  case 54:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 2228224;
                    goto LABEL_22;
                  case 55:
                    v18 = 0;
                    *v16 = *v12;
                    v19 = 2293760;
                    goto LABEL_22;
                  default:
                    goto LABEL_33;
                }
                goto LABEL_33;
              }
              if (v17 == 998)
              {
                v18 = 0;
                v19 = 2359296;
                goto LABEL_22;
              }
              if (v17 == 999)
              {
                v18 = 0;
                v19 = 2424832;
                goto LABEL_22;
              }
            }
            goto LABEL_33;
          }
          if (*((_DWORD *)v12 - 4))
          {
            v18 = 1;
            v19 = 1;
            goto LABEL_22;
          }
        }
LABEL_33:
        v12 += 4;
        --v10;
      }
      while (v10);
    }
    *(_QWORD *)(a2 + 24) = v9;
  }
  return inited;
}

uint64_t ssft_hlp_ReadStopFlag(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 80));
  if ((v4 & 0x80000000) != 0)
  {
    v10 = v4;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v5, v6, v7, v8, "lhError");
    return v10;
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 88) == 6;
    return critsec_Leave(*(_QWORD **)(a1 + 80));
  }
}

uint64_t bet7_parse_multicore_hdr(uint64_t a1)
{
  BOOL v2;
  char *v3;
  int v4;
  char *v5;
  BOOL v6;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  char *v14;
  char *__s1;
  uint64_t v16;

  __s1 = 0;
  v16 = 0;
  v14 = 0;
  if (brk_TagIteratorOpen(*(_QWORD *)(a1 + 24), "multicore", "PARAMETERS/*", 1, &v16))
    v2 = 1;
  else
    v2 = v16 == 0;
  if (!v2)
  {
    while ((brk_TagIteratorNext(v16, (uint64_t)&__s1, (uint64_t)&v14) & 0x80000000) == 0)
    {
      v3 = __s1;
      v4 = strcmp(__s1, "affinitylist");
      v5 = v14;
      if (v4)
        v6 = 1;
      else
        v6 = v14 == 0;
      if (!v6)
      {
        if ((paramc_ParamSetStr(*(_QWORD *)(a1 + 40), (uint64_t)v3, v14) & 0x1FFF) == 0xA)
          break;
        v5 = v14;
        v3 = __s1;
      }
      if (!strcmp(v3, "forceaffinity") && v5 != 0)
      {
        v8 = *v5 - 48;
        v9 = v8 > 0x3E;
        v10 = (1 << v8) & 0x4040000040400001;
        v11 = v9 || v10 == 0;
        v12 = v11;
        if ((paramc_ParamSetInt(*(_QWORD *)(a1 + 40), (uint64_t)"forceaffinity", v12) & 0x1FFF) == 0xA)
          break;
      }
    }
    brk_TagIteratorClose(v16);
  }
  return 0;
}

uint64_t vplatform_GetInterfaces(_QWORD *a1, _WORD *a2)
{
  uint64_t Interface;

  if (*a2 != 512)
    return 2147484416;
  Interface = vplatform_heap_GetInterface((uint64_t)a1);
  if ((_DWORD)Interface
    || (Interface = vplatform_critsec_GetInterface((uint64_t)a1), (_DWORD)Interface)
    || (Interface = vplatform_data_GetInterface(a1, (uint64_t)a2), (_DWORD)Interface)
    || (Interface = vplatform_log_GetInterface((uint64_t)a1), (_DWORD)Interface)
    || (Interface = vplatform_thread_GetInterface((uint64_t)a1), (_DWORD)Interface)
    || (Interface = vplatform_clock_GetInterface(a1), (_DWORD)Interface)
    || (Interface = vplatform_dynlib_GetInterface((uint64_t)a1), (_DWORD)Interface))
  {
    vplatform_ReleaseInterfaces((uint64_t)a1);
  }
  return Interface;
}

uint64_t vplatform_ReleaseInterfaces(uint64_t a1)
{
  void **v2;
  kaldi::nnet1::Component *v3;
  kaldi::nnet1::Component *v4;
  void *v5;
  kaldi::nnet1::Component *v6;
  kaldi::nnet1::Component *v7;

  v2 = *(void ***)(a1 + 104);
  if (v2)
  {
    vplatform_clock_ReleaseInterface(v2);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v3 = *(kaldi::nnet1::Component **)(a1 + 88);
  if (v3)
  {
    kaldi::nnet1::Component::IsUpdatable(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v4 = *(kaldi::nnet1::Component **)(a1 + 64);
  if (v4)
  {
    kaldi::nnet1::Component::IsUpdatable(v4);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    vplatform_data_ReleaseInterface(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v6 = *(kaldi::nnet1::Component **)(a1 + 40);
  if (v6)
  {
    kaldi::nnet1::Component::IsUpdatable(v6);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v7 = *(kaldi::nnet1::Component **)(a1 + 112);
  if (v7)
  {
    kaldi::nnet1::Component::IsUpdatable(v7);
    *(_QWORD *)(a1 + 112) = 0;
  }
  kaldi::nnet1::Component::IsUpdatable(*(kaldi::nnet1::Component **)(a1 + 24));
  return 0;
}

uint64_t vplatform_BuildBrokerIdFromFullPath(int a1, char *__s, void **a3, char **a4)
{
  char *v6;
  unsigned int v8;
  char *v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  unsigned __int8 *v15;
  int v16;

  v6 = __s;
  *a3 = 0;
  if (a4)
    *a4 = 0;
  v8 = 1;
  v9 = __s;
  while (1)
  {
    v10 = *v9;
    if (v10 != 47 && v10 != 92)
      break;
    __s = ++v9;
LABEL_9:
    ++v8;
  }
  if (*v9)
  {
    ++v9;
    goto LABEL_9;
  }
  v11 = 2147483658;
  v12 = vplatform_CopyToChar(a1, __s);
  *a3 = v12;
  if (v12)
  {
    vplatform_data_BuildBrokerIdFromFilename((uint64_t)v12, v12);
    if (!a4)
      return 0;
    v13 = (char *)vplatform_heap_Calloc(a1, v8, 1uLL);
    *a4 = v13;
    if (v13)
    {
      v14 = *v6;
      if (*v6)
      {
        v15 = (unsigned __int8 *)(v6 + 1);
        do
        {
          *v13++ = v14;
          v16 = *v15++;
          v14 = v16;
        }
        while (v16);
      }
      return 0;
    }
    else
    {
      vplatform_heap_Free(a1, *a3);
      *a3 = 0;
    }
  }
  return v11;
}

uint64_t vplatform_AddFileToFileList(uint64_t *a1, unsigned __int8 *a2, char *__s1, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;

  v4 = a4;
  v7 = *a1;
  v8 = *a4;
  if (*a4)
  {
    v9 = *((_DWORD *)a1 + 10);
    while (1)
    {
      v10 = v8;
      if (v9)
      {
        if (!strcmp(__s1, *(const char **)(v8 + 8)))
          break;
      }
      v8 = *(_QWORD *)(v10 + 32);
      if (!v8)
      {
        v4 = (_QWORD *)(v10 + 32);
        goto LABEL_7;
      }
    }
    result = 2147483672;
    v14 = *(_BYTE **)v10;
    v15 = *a2;
    if (*a2)
    {
      v16 = a2 + 1;
      while (1)
      {
        v17 = *v14;
        if (v15 != v17 && (v15 != 92 || v17 != 47) && (v15 != 47 || v17 != 92))
          break;
        ++v14;
        v18 = *v16++;
        v15 = v18;
        if (!v18)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      if (!*v14)
      {
        ++*(_DWORD *)(v10 + 24);
        return 2;
      }
    }
  }
  else
  {
LABEL_7:
    v11 = vplatform_heap_Calloc(v7, 1uLL, 0x28uLL);
    *v4 = v11;
    if (v11)
    {
      v12 = v11;
      result = 0;
      v12[4] = 0;
      *(_QWORD *)(*v4 + 8) = __s1;
      *(_QWORD *)*v4 = a2;
      *(_DWORD *)(*v4 + 24) = 1;
    }
    else
    {
      vplatform_heap_Free(v7, __s1);
      vplatform_heap_Free(v7, a2);
      return 2147483658;
    }
  }
  return result;
}

uint64_t vplatform_RemoveFileFromFileList(uint64_t *a1, const char *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t result;
  _QWORD *v12;

  v3 = *a3;
  if (*a3)
  {
    v6 = *a1;
    v7 = (void **)(v3 + 8);
    if (!strcmp(*(const char **)(v3 + 8), a2))
    {
      v8 = 0;
LABEL_7:
      v9 = *(_DWORD *)(v3 + 24);
      if (*(_QWORD *)(v3 + 16))
        v10 = v9 == 1;
      else
        v10 = 0;
      if (v10)
        return 2147483922;
      if (v9 >= 2)
      {
        result = 0;
        *(_DWORD *)(v3 + 24) = v9 - 1;
        return result;
      }
      v12 = (_QWORD *)(v8 + 32);
      if (!v8)
        v12 = a3;
      *v12 = *(_QWORD *)(v3 + 32);
      if (*(_QWORD *)v3)
        vplatform_heap_Free(v6, *(void **)v3);
      if (*v7)
        vplatform_heap_Free(v6, *v7);
      vplatform_heap_Free(v6, (void *)v3);
    }
    else
    {
      while (1)
      {
        v8 = v3;
        v3 = *(_QWORD *)(v3 + 32);
        if (!v3)
          break;
        if (!strcmp(*(const char **)(v3 + 8), a2))
        {
          v7 = (void **)(v3 + 8);
          goto LABEL_7;
        }
      }
    }
  }
  return 0;
}

uint64_t vplatform_FindFiles(uint64_t *a1, DIR *a2, unsigned int a3, uint64_t a4, const char **a5, _QWORD *a6, int a7)
{
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  void *v18;
  char *v19;
  int v20;

  result = 2147483655;
  if (a3 && a6)
  {
    if (a5)
      *a5 = 0;
    v14 = 0;
    v15 = a3;
    do
    {
      v20 = 1;
      result = vplatform_file_IsDirectory((int)a1, *(char **)(a4 + 8 * v14), &v20);
      if ((_DWORD)result == -2147483647)
      {
        v20 = 1;
      }
      else
      {
        if ((_DWORD)result)
          return result;
        if (v20 != 1)
        {
          v18 = 0;
          v19 = 0;
          result = vplatform_BuildBrokerIdFromFullPath((int)a2, *(char **)(a4 + 8 * v14), (void **)&v19, (char **)&v18);
          if (!(_DWORD)result)
          {
            v16 = v19;
            result = vplatform_AddFileToFileList(a1, (unsigned __int8 *)v18, v19, a6);
            if ((_DWORD)result == 2)
            {
              vplatform_heap_Free((int)a2, v16);
              vplatform_heap_Free((int)a2, v18);
              result = 0;
            }
          }
          goto LABEL_15;
        }
      }
      result = vplatform_WalkDir((uint64_t)a1, a2, *(char **)(a4 + 8 * v14), a5, a6, a7, 1);
LABEL_15:
      ++v14;
      if ((_DWORD)result)
        v17 = 1;
      else
        v17 = v14 >= v15;
    }
    while (!v17);
  }
  return result;
}

uint64_t vplatform_WalkDir(uint64_t a1, DIR *a2, char *a3, const char **a4, _QWORD *a5, int a6, uint64_t a7)
{
  uint64_t result;
  char *v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t Size;
  size_t v20;
  int v21;
  const char *v22;
  char *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  char *v27;
  uint64_t v28;
  size_t v29;
  int Next;
  int v31;
  BOOL v32;
  DIR **v34;
  char *__s;
  int v36;
  FILE *v37;

  v34 = 0;
  __s = 0;
  if (!a3)
    return 2147483655;
  v36 = 0;
  LODWORD(result) = vplatform_find_Open(a1, a2, a3, &__s, &v36, &v34);
  if ((_DWORD)result)
    goto LABEL_51;
  do
  {
    if (a6 == 1 && v36 == 1)
    {
      v14 = vplatform_CombinePath((int)a2, a3, __s);
      if (!v14)
        goto LABEL_45;
      v15 = v14;
      v16 = vplatform_WalkDir(a1, a2, v14, a4, a5, 1, a7);
      goto LABEL_7;
    }
    if ((_DWORD)a7 == 1 && a4 && v36 == 2)
    {
      v18 = vplatform_CombinePath((int)a2, a3, __s);
      if (!v18)
        goto LABEL_45;
      v15 = v18;
      v37 = 0;
      v17 = vplatform_file_Open(a1, (int)a2, v18, "rb", &v37);
      if (!v17)
      {
        Size = vplatform_file_GetSize(v37);
        v20 = Size;
        if (*a4)
        {
          v21 = strlen(*a4);
          v22 = (const char *)vplatform_heap_Realloc((int)a2, (void *)*a4, (v20 + v21 + 1));
        }
        else
        {
          v22 = (const char *)vplatform_heap_Calloc((int)a2, Size + 1, 1uLL);
        }
        v17 = -2147483638;
        if (v22)
        {
          *a4 = v22;
          v27 = (char *)&v22[strlen(v22)];
          v28 = vplatform_file_Read(v27, 1uLL, v20, v37);
          if (v20 == v28)
            v17 = 0;
          else
            v17 = -2147483644;
          if (v20 == v28)
            v29 = v20;
          else
            v29 = 0;
          v27[v29] = 0;
        }
        vplatform_file_Close(v37);
      }
      goto LABEL_36;
    }
    if (v36 != 3)
      goto LABEL_24;
    v23 = vplatform_CopyToChar((int)a2, __s);
    if (!v23)
      goto LABEL_45;
    v15 = v23;
    vplatform_data_BuildBrokerIdFromFilename((uint64_t)v23, v23);
    if ((_DWORD)a7 != 1)
    {
      v16 = vplatform_RemoveFileFromFileList((uint64_t *)a1, v15, a5);
LABEL_7:
      v17 = v16;
LABEL_36:
      vplatform_heap_Free((int)a2, v15);
      goto LABEL_37;
    }
    v24 = (unsigned __int8 *)vplatform_CombinePath((int)a2, a3, __s);
    if (!v24)
    {
      vplatform_heap_Free((int)a2, v15);
LABEL_45:
      vplatform_heap_Free((int)a2, __s);
      v31 = -2147483638;
      goto LABEL_46;
    }
    v25 = v24;
    v26 = vplatform_AddFileToFileList((uint64_t *)a1, v24, v15, a5);
    if (!v26)
      goto LABEL_22;
    v17 = v26;
    if (v26 == 2)
    {
      vplatform_heap_Free((int)a2, v15);
      vplatform_heap_Free((int)a2, v25);
LABEL_22:
      if (!*(_DWORD *)(a1 + 40))
        a5 = (_QWORD *)(*a5 + 32);
LABEL_24:
      vplatform_heap_Free((int)a2, __s);
      goto LABEL_38;
    }
LABEL_37:
    vplatform_heap_Free((int)a2, __s);
    if (v17)
      goto LABEL_40;
LABEL_38:
    Next = vplatform_find_Next((uint64_t)v34, &__s, &v36);
  }
  while (!Next);
  v17 = Next;
LABEL_40:
  if (v17 == -2147483628)
    v31 = 0;
  else
    v31 = v17;
LABEL_46:
  LODWORD(result) = vplatform_find_Close(v34);
  if ((_DWORD)result)
    v32 = v31 == 0;
  else
    v32 = 0;
  if (!v32)
    LODWORD(result) = v31;
LABEL_51:
  if ((_DWORD)result == -2147483628)
    return 0;
  else
    return result;
}

void vplatform_FreeFiles(int a1, void *a2, void **a3)
{
  void *v5;
  void **v6;

  if (a2)
    vplatform_heap_Free(a1, a2);
  if (a3)
  {
    do
    {
      if (*a3)
        vplatform_heap_Free(a1, *a3);
      v5 = a3[1];
      if (v5)
        vplatform_heap_Free(a1, v5);
      v6 = (void **)a3[4];
      vplatform_heap_Free(a1, a3);
      a3 = v6;
    }
    while (v6);
  }
}

uint64_t vplatform_list_CountEntries(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;

  v2 = a2 - 1;
  if (a2 == 1)
  {
    v5 = *a1 != 10;
    do
    {
LABEL_11:
      v6 = *a1++;
      if (v6 == 10)
        ++v5;
      --a2;
    }
    while (a2);
    return v5;
  }
  do
  {
    v3 = a1[v2];
    if (v3 != 32 && v3 != 9)
      break;
    --v2;
  }
  while (v2);
  v5 = a1[v2] != 10;
  if (a2)
    goto LABEL_11;
  return v5;
}

uint64_t vplatform_list_GetEntry(int a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t i;
  int v12;
  _BYTE *j;
  int v14;
  uint64_t k;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v6 = 0;
  v7 = 2147483652;
  v8 = *a2;
  while (1)
  {
    v9 = *(unsigned __int8 *)(v8 + v6);
    if (!*(_BYTE *)(v8 + v6))
      return v7;
    if (v9 == 9 || v9 == 32)
      break;
    ++v6;
  }
  v10 = vplatform_heap_Malloc(a1, (v6 + 1));
  *(_QWORD *)(a3 + 8) = v10;
  if (!v10)
    return 2147483658;
  for (i = 0; ; ++i)
  {
    v12 = *(unsigned __int8 *)(v8 + i);
    if (v12 == 9 || v12 == 32)
      break;
    *(_BYTE *)(*(_QWORD *)(a3 + 8) + i) = v12;
  }
  *(_BYTE *)(*(_QWORD *)(a3 + 8) + i) = 0;
  for (j = (_BYTE *)(v8 + i); ; ++j)
  {
    v14 = *j;
    if (v14 != 9 && v14 != 32)
      break;
  }
  if (!*j)
    goto LABEL_39;
  for (k = 0; v14 != 10 && v14 != 0; LOBYTE(v14) = j[++k])
    ;
  v17 = 0;
  do
  {
    v18 = v17;
    v19 = j[v17 - 1 + k];
    v20 = v19 > 0x20;
    v21 = (1 << v19) & 0x100002200;
    if (v20 || v21 == 0)
      break;
    v17 = v18 - 1;
  }
  while (&j[k - 1 + v18] > j);
  v23 = k + v18;
  v24 = &j[k + v18];
  if (v24 - 1 <= j)
  {
LABEL_39:
    vplatform_heap_Free(a1, *(void **)(a3 + 8));
    return v7;
  }
  v25 = vplatform_heap_Malloc(a1, (k + v18 + 1));
  *(_QWORD *)a3 = v25;
  if (!v25)
  {
    vplatform_heap_Free(a1, *(void **)(a3 + 8));
    return 2147483658;
  }
  v26 = 0;
  if (v23)
  {
    do
    {
      *(_BYTE *)(*(_QWORD *)a3 + v26) = j[v26];
      ++v26;
      --v23;
    }
    while (v23);
    v25 = *(_BYTE **)a3;
    v26 = v26;
    j = v24;
  }
  v25[v26] = 0;
  *(_QWORD *)(a3 + 16) = 0;
  while (1)
  {
    v27 = *j;
    v20 = v27 > 0x20;
    v28 = (1 << v27) & 0x100002600;
    if (v20 || v28 == 0)
      break;
    ++j;
  }
  v7 = 0;
  *a2 = (uint64_t)j;
  return v7;
}

uint64_t vplatform_ParseListFile(int a1, int a2, char *a3, _QWORD *a4)
{
  uint64_t v6;
  BOOL v7;
  uint64_t Size;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t Entry;
  unsigned __int8 *v17;
  FILE *v18;

  v18 = 0;
  v6 = vplatform_file_Open(a1, a2, a3, "rb", &v18);
  if ((_DWORD)v6)
    v7 = 1;
  else
    v7 = v18 == 0;
  if (!v7)
  {
    v6 = 2147483658;
    Size = vplatform_file_GetSize(v18);
    v9 = (unsigned __int8 *)vplatform_heap_Malloc(a2, Size + 1);
    if (v9)
    {
      v10 = v9;
      if (Size == vplatform_file_Read(v9, 1uLL, Size, v18))
      {
        v10[Size] = 0;
        v11 = vplatform_list_CountEntries(v10, Size);
        v12 = v11;
        v17 = v10;
        if (*v10 == 239 && v10[1] == 187 && v10[2] == 191)
          v17 = v10 + 3;
        if (v11)
        {
          v13 = 1;
          while (1)
          {
            v14 = vplatform_heap_Calloc(a2, 1uLL, 0x28uLL);
            *a4 = v14;
            if (!v14)
              break;
            Entry = vplatform_list_GetEntry(a2, (uint64_t *)&v17, (uint64_t)v14);
            v6 = Entry;
            if (v13 < v12)
            {
              a4 = (_QWORD *)(*a4 + 32);
              ++v13;
              if (!(_DWORD)Entry)
                continue;
            }
            goto LABEL_20;
          }
          v6 = 2147483658;
        }
        else
        {
          v6 = 0;
        }
      }
      else
      {
        v6 = 2147483652;
      }
LABEL_20:
      vplatform_heap_Free(a2, v10);
    }
    if (v18)
      vplatform_file_Close(v18);
  }
  return v6;
}

uint64_t vplatform_GetBinaryBrokerFile(int a1, int a2, char *a3, _QWORD *a4)
{
  uint64_t v6;
  BOOL v7;
  size_t Size;
  _BYTE *v9;
  _BYTE *v10;
  FILE *v12;

  v12 = 0;
  *a4 = 0;
  v6 = vplatform_file_Open(a1, a2, a3, "rb", &v12);
  if ((_DWORD)v6)
    v7 = 1;
  else
    v7 = v12 == 0;
  if (!v7)
  {
    v6 = 2147483652;
    Size = vplatform_file_GetSize(v12);
    v9 = vplatform_heap_Malloc(a2, Size + 1);
    if (v9)
    {
      v10 = v9;
      if (Size == vplatform_file_Read(v9, 1uLL, Size, v12))
      {
        v10[Size] = 0;
        *a4 = v10;
        vplatform_file_Close(v12);
        return 0;
      }
      vplatform_heap_Free(a2, v10);
    }
    else
    {
      v6 = 2147483658;
    }
    if (v12)
      vplatform_file_Close(v12);
  }
  return v6;
}

uint64_t vplatform_data_GetFullPathName(char *__s1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 2147483668;
  v4 = *(_QWORD *)(a3 + 24);
  *a2 = 0;
  if (v4)
  {
    while (strcmp(__s1, *(const char **)(v4 + 8)))
    {
      v4 = *(_QWORD *)(v4 + 32);
      if (!v4)
        return v3;
    }
    v3 = 0;
    *a2 = *(_QWORD *)v4;
  }
  return v3;
}

uint64_t vplatform_data_GetInterface(_QWORD *a1, uint64_t a2)
{
  DIR *v4;
  void *v5;
  _QWORD *v6;
  uint64_t Files;
  uint64_t BinaryBrokerFile;
  char *v9;
  char *v10;

  v4 = (DIR *)a1[3];
  a1[9] = 0;
  v5 = vplatform_heap_Calloc((int)v4, 1uLL, 0x30uLL);
  if (!v5)
    return 2147483658;
  v6 = v5;
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 4) = 0;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    *((_DWORD *)v5 + 10) = 1;
  if (*(_WORD *)(a2 + 2))
  {
    Files = vplatform_FindFiles((uint64_t *)v5, v4, *(unsigned __int16 *)(a2 + 2), *(_QWORD *)(a2 + 8), (const char **)v5 + 2, (_QWORD *)v5 + 3, 1);
    if (!(_DWORD)Files)
    {
      BinaryBrokerFile = vplatform_data_StoreDataFiles((const char *)v6[2], v6[3], (int)v6, (int)v4, *(char **)(a2 + 48), *(char **)(a2 + 56));
      goto LABEL_12;
    }
LABEL_13:
    vplatform_FreeFiles(*v6, (void *)v6[2], (void **)v6[3]);
    vplatform_heap_Free(*v6, v6);
    return Files;
  }
  v9 = *(char **)(a2 + 56);
  if (v9)
  {
    Files = vplatform_ParseListFile((int)v5, (int)v4, v9, (_QWORD *)v5 + 3);
    if ((_DWORD)Files)
      goto LABEL_13;
    v10 = *(char **)(a2 + 48);
    if (v10)
    {
      BinaryBrokerFile = vplatform_GetBinaryBrokerFile((int)v6, (int)v4, v10, v6 + 2);
LABEL_12:
      Files = BinaryBrokerFile;
      if ((_DWORD)BinaryBrokerFile)
        goto LABEL_13;
    }
  }
  if (!a1[1])
    a1[1] = v6[2];
  Files = 0;
  a1[6] = &IDataStream;
  a1[7] = 0;
  a1[9] = v6;
  return Files;
}

uint64_t vplatform_data_ReleaseInterface(void *a1)
{
  if (!a1)
    return 2147483654;
  vplatform_FreeFiles(*(_QWORD *)a1, *((void **)a1 + 2), *((void ***)a1 + 3));
  vplatform_heap_Free(*(_QWORD *)a1, a1);
  return 0;
}

uint64_t vplatform_data_StoreDataFiles(const char *a1, uint64_t a2, int a3, int a4, char *__filename, char *a6)
{
  uint64_t result;
  unsigned int v12;
  size_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  size_t v18;
  const char *v19;
  unsigned int v20;
  unsigned int v21;
  FILE *__stream;

  __stream = 0;
  if (!((unint64_t)__filename | (unint64_t)a6))
    return 0;
  result = 2147483655;
  if (__filename)
  {
    if (a6)
    {
      result = vplatform_file_Open(a3, a4, __filename, "wb", &__stream);
      if (!(_DWORD)result)
      {
        v12 = strlen(a1);
        v13 = vplatform_file_Write(a1, 1uLL, v12, __stream);
        v14 = vplatform_file_Close(__stream);
        result = 2147483653;
        if (v13 == v12)
        {
          result = v14;
          if (!(_DWORD)v14)
          {
            result = vplatform_file_Open(a3, a4, a6, "wb", &__stream);
            if (!(_DWORD)result)
            {
              if (a2)
              {
                while (1)
                {
                  v15 = strlen(*(const char **)(a2 + 8));
                  v16 = (char *)vplatform_heap_Malloc(a4, (v15 + 1));
                  if (!v16)
                    break;
                  v17 = v16;
                  v18 = 0;
                  v19 = *(const char **)(a2 + 8);
                  do
                  {
                    v17[v18] = v19[v18];
                    ++v18;
                    v19 = *(const char **)(a2 + 8);
                  }
                  while (v18 <= strlen(v19));
                  v20 = strlen(v17);
                  vplatform_file_Write(v17, v20, 1uLL, __stream);
                  vplatform_heap_Free(a4, v17);
                  vplatform_file_Write("\t", 1uLL, 1uLL, __stream);
                  v21 = strlen(*(const char **)a2);
                  vplatform_file_Write(*(const void **)a2, v21, 1uLL, __stream);
                  vplatform_file_Write("\r\n", 2uLL, 1uLL, __stream);
                  a2 = *(_QWORD *)(a2 + 32);
                  if (!a2)
                    return vplatform_file_Close(__stream);
                }
                vplatform_file_Close(__stream);
                return 2147483658;
              }
              else
              {
                return vplatform_file_Close(__stream);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t vplatform_data_BuildBrokerIdFromFilename(uint64_t a1, char *__s)
{
  size_t i;
  int v5;

  if (*__s)
  {
    for (i = 0; i < strlen(__s); ++i)
    {
      v5 = __s[i];
      if (v5 == 95)
      {
        LOBYTE(v5) = 47;
      }
      else if (v5 == 46)
      {
        *(_BYTE *)(a1 + i) = 0;
        return 0;
      }
      *(_BYTE *)(a1 + i) = v5;
    }
  }
  return 0;
}

uint64_t vplatform_critsec_ObjOpen(int a1, uint64_t a2, pthread_mutex_t **a3)
{
  pthread_mutex_t *v5;
  pthread_mutex_t *v6;
  uint64_t result;

  if (!a3)
    return 2147483655;
  *a3 = 0;
  v5 = (pthread_mutex_t *)vplatform_heap_Calloc(a2, 1uLL, 0x58uLL);
  if (!v5)
    return 2147483658;
  v6 = v5;
  *(_QWORD *)&v5[1].__opaque[8] = a2;
  pthread_mutex_init(v5, 0);
  result = 0;
  *(_DWORD *)v6[1].__opaque = 0;
  v6[1].__sig = 0;
  *a3 = v6;
  return result;
}

uint64_t vplatform_critsec_ObjClose(uint64_t a1)
{
  pthread_mutex_destroy((pthread_mutex_t *)a1);
  vplatform_heap_Free(*(_QWORD *)(a1 + 80), (void *)a1);
  return 0;
}

uint64_t vplatform_critsec_Enter(uint64_t a1)
{
  _opaque_pthread_t *v2;

  if (a1)
  {
    v2 = *(_opaque_pthread_t **)(a1 + 64);
    if (v2 != pthread_self())
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      *(_QWORD *)(a1 + 64) = pthread_self();
    }
    ++*(_DWORD *)(a1 + 72);
  }
  return 0;
}

uint64_t vplatform_critsec_Leave(uint64_t a1)
{
  _opaque_pthread_t *v2;
  int v4;
  int v5;

  if (a1)
  {
    v2 = *(_opaque_pthread_t **)(a1 + 64);
    if (v2 == pthread_self())
    {
      v4 = *(_DWORD *)(a1 + 72);
      if (v4)
      {
        v5 = v4 - 1;
        *(_DWORD *)(a1 + 72) = v5;
        if (!v5)
        {
          *(_QWORD *)(a1 + 64) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)a1);
        }
      }
    }
  }
  return 0;
}

uint64_t vplatform_critsec_GetInterface(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &ICritSec;
  *(_QWORD *)(a1 + 40) = 0;
  return 0;
}

uint64_t vplatform_log_GetInterface(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return 0;
}

BOOL IsAudioFile(char *a1)
{
  return strchr(a1, 46) && strchr(a1, 58) && strstr(a1, "audio/");
}

uint64_t vplatform_audiostream_Open(int a1, int a2, char *__s, FILE **a4)
{
  uint64_t v8;
  char *v9;
  size_t Size;
  void *v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  FILE *__stream;
  char __filename[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__filename = *(_OWORD *)".daf";
  v18 = unk_1DECED178;
  *a4 = 0;
  v19 = 0u;
  v20 = 0u;
  if (strcspn(__s, ":") > 0x1F)
    return 2147483655;
  __stream = 0;
  __strncpy_chk();
  v9 = strchr(__s, 58);
  v8 = vplatform_file_Open(a1, a2, v9 + 1, "rb", &__stream);
  if (!(_DWORD)v8)
  {
    Size = vplatform_file_GetSize(__stream);
    v11 = vplatform_heap_Calloc(a2, Size + 1, 1uLL);
    if (v11)
    {
      v12 = v11;
      v8 = 2147483652;
      if (vplatform_file_Read(v11, 1uLL, Size, __stream) == Size)
      {
        v8 = vplatform_file_Close(__stream);
        if (!(_DWORD)v8)
        {
          v8 = vplatform_file_Open(a1, a2, __filename, "wb", (FILE **)__stream);
          if (!(_DWORD)v8)
          {
            v13 = vplatform_file_Write(v12, 1uLL, Size, __stream);
            v14 = vplatform_file_Close(__stream);
            v8 = 2147483652;
            if (v13 == Size)
            {
              v8 = v14;
              if (!(_DWORD)v14)
              {
                v8 = vplatform_file_Open(a1, a2, __filename, "rb", &__stream);
                if (!(_DWORD)v8)
                  *a4 = __stream;
              }
            }
          }
        }
      }
      vplatform_heap_Free(a2, v12);
    }
    else
    {
      vplatform_file_Close(__stream);
      return 2147483658;
    }
  }
  return v8;
}

uint64_t vplatform_datastream_Open(uint64_t a1, FILE *a2, char *a3, char *a4, FILE ***a5)
{
  uint64_t v5;
  FILE **v11;
  FILE **v12;
  int v13;

  v5 = 2147483655;
  if (a1 && a3 && a4 && a5)
  {
    *a5 = 0;
    v11 = (FILE **)vplatform_heap_Malloc((int)a2, 0x18uLL);
    if (v11)
    {
      v12 = v11;
      *v11 = 0;
      *((_DWORD *)v11 + 2) = 0;
      v11[2] = a2;
      if (*a4 == 114 && IsAudioFile(a3))
      {
        v5 = vplatform_audiostream_Open(a1, (int)a2, a3, v12);
        v13 = 2;
      }
      else
      {
        v5 = vplatform_localstream_Open(a1, (int)a2, a3, a4, v12);
        v13 = 1;
      }
      *((_DWORD *)v12 + 2) = v13;
      if ((_DWORD)v5)
        vplatform_datastream_Close(v12);
      else
        *a5 = v12;
    }
    else
    {
      return 2147483658;
    }
  }
  return v5;
}

uint64_t vplatform_datastream_Close(_DWORD *a1)
{
  FILE *v2;

  if (a1)
  {
    if ((a1[2] - 1) <= 1)
    {
      v2 = *(FILE **)a1;
      if (*(_QWORD *)a1)
        vplatform_file_Close(v2);
    }
    vplatform_heap_Free(*((_QWORD *)a1 + 2), a1);
  }
  return 0;
}

uint64_t vplatform_datastream_Read(void *a1, size_t a2, size_t a3, uint64_t a4)
{
  if (a4 && (*(_DWORD *)(a4 + 8) - 1) <= 1)
    return vplatform_file_Read(a1, a2, a3, *(FILE **)a4);
  else
    return 0;
}

uint64_t vplatform_datastream_Seek(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  if (a1 && (*(_DWORD *)(a1 + 8) - 1) <= 1)
    return vplatform_file_Seek(*(FILE **)a1, a2, a3, a4);
  else
    return 2147483655;
}

uint64_t vplatform_datastream_GetSize(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 8) - 1) <= 1)
    return vplatform_file_GetSize(*(FILE **)a1);
  else
    return 0;
}

uint64_t vplatform_datastream_Error(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 8) - 1) <= 1)
    return vplatform_file_Error(*(FILE **)a1);
  else
    return 2147483655;
}

size_t vplatform_datastream_Write(void *__ptr, size_t a2, size_t a3, uint64_t a4)
{
  size_t result;

  result = 2147483649;
  if (!a4)
    return 2147483655;
  if (*(_DWORD *)(a4 + 8) == 1)
    return vplatform_file_Write(__ptr, a2, a3, *(FILE **)a4);
  return result;
}

uint64_t vplatform_localstream_Open(uint64_t a1, int a2, char *__filename, char *__mode, FILE **a5)
{
  uint64_t FullPathName;
  kaldi::nnet1::Component *v12;

  *a5 = 0;
  FullPathName = 2147483655;
  if (a1 && __filename && __mode)
  {
    if (*__mode != 114 || strchr(__filename, 46))
      return vplatform_file_Open(a1, a2, __filename, __mode, a5);
    v12 = 0;
    FullPathName = vplatform_data_GetFullPathName(__filename, &v12, a1);
    if (!(_DWORD)FullPathName)
      FullPathName = vplatform_file_Open(a1, a2, (char *)v12, "rb", a5);
    kaldi::nnet1::Component::IsUpdatable(v12);
  }
  return FullPathName;
}

uint64_t vplatform_find_Open(int a1, DIR *a2, char *a3, char **a4, int *a5, DIR ***a6)
{
  uint64_t Next;
  DIR *v12;
  DIR *v13;
  DIR **v14;
  DIR **v15;

  Next = 2147483917;
  if (a3 && a6 && *a3)
  {
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
    v12 = opendir(a3);
    if (v12)
    {
      v13 = v12;
      v14 = (DIR **)vplatform_heap_Malloc((int)a2, 0x18uLL);
      if (v14)
      {
        v15 = v14;
        v14[1] = (DIR *)a3;
        v14[2] = v13;
        *v14 = a2;
        Next = vplatform_find_Next((uint64_t)v14, a4, a5);
        if ((_DWORD)Next)
          vplatform_find_Close(v15);
        else
          *a6 = v15;
      }
      else
      {
        closedir(v13);
        return 2147483658;
      }
    }
    else
    {
      return 2147483668;
    }
  }
  return Next;
}

uint64_t vplatform_find_Next(uint64_t a1, char **a2, int *a3)
{
  uint64_t v3;
  dirent *v7;
  dirent *v8;
  const char *d_name;
  char *v11;
  char *v12;
  int v13;
  size_t v14;
  const char *v15;
  size_t v16;
  char *v17;
  stat v18;

  v3 = 2147483658;
  if (!a1)
    return 2147483917;
  *a2 = 0;
  *a3 = 0;
  v7 = readdir(*(DIR **)(a1 + 16));
  if (!v7)
    return 2147483668;
  v8 = v7;
  while (1)
  {
    d_name = v8->d_name;
    if (strcmp(v8->d_name, "."))
    {
      if (strcmp(v8->d_name, ".."))
        break;
    }
    v8 = readdir(*(DIR **)(a1 + 16));
    if (!v8)
      return 2147483668;
  }
  v11 = vplatform_CombinePath(*(_QWORD *)a1, *(char **)(a1 + 8), v8->d_name);
  if (v11)
  {
    v12 = v11;
    memset(&v18, 0, sizeof(v18));
    if (stat(v11, &v18) || (v18.st_mode & 0xF000) != 0x4000)
    {
      v14 = strlen(v8->d_name);
      if (v14 < 5)
        goto LABEL_20;
      v15 = (char *)&v8->d_reclen + v14 + 1;
      if (!strcasecmp(v15, ".hdr"))
      {
        v13 = 2;
      }
      else
      {
        if (strcasecmp(v15, ".dat"))
          goto LABEL_20;
        v13 = 3;
      }
    }
    else
    {
      v13 = 1;
    }
    *a3 = v13;
LABEL_20:
    vplatform_heap_Free(*(_QWORD *)a1, v12);
    v16 = strlen(d_name);
    v17 = (char *)vplatform_heap_Malloc(*(_QWORD *)a1, v16 + 1);
    *a2 = v17;
    if (v17)
    {
      strcpy(v17, d_name);
      return 0;
    }
  }
  return v3;
}

uint64_t vplatform_find_Close(DIR **a1)
{
  uint64_t v1;

  v1 = 2147483917;
  if (a1)
  {
    if (closedir(a1[2]))
    {
      return 2147483918;
    }
    else
    {
      vplatform_heap_Free((int)*a1, a1);
      return 0;
    }
  }
  return v1;
}

char *vplatform_CombinePath(int a1, char *__s, const char *a3)
{
  unsigned int v6;
  size_t v7;
  char *v8;
  char *v9;
  int v10;

  v6 = strlen(__s);
  v7 = strlen(a3);
  v8 = (char *)vplatform_heap_Malloc(a1, v7 + v6 + 2);
  v9 = v8;
  if (v8)
  {
    strcpy(v8, __s);
    v10 = v9[v6 - 1];
    if (v10 != 47 && v10 != 92)
      *(_WORD *)&v9[strlen(v9)] = 47;
    strcat(v9, a3);
  }
  return v9;
}

_BYTE *vplatform_CopyToChar(int a1, char *__s)
{
  size_t v4;
  _BYTE *v5;
  size_t v6;
  int v7;

  v4 = strlen(__s);
  v5 = vplatform_heap_Malloc(a1, v4 + 1);
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = __s[v6];
      if ((v7 - 65) < 0x1A)
        LOBYTE(v7) = v7 + 32;
      v5[v6++] = v7;
    }
    while (v6 <= strlen(__s));
  }
  return v5;
}

uint64_t vplatform_file_Open(int a1, int a2, char *__filename, char *__mode, FILE **a5)
{
  FILE *v6;

  v6 = fopen(__filename, __mode);
  *a5 = v6;
  if (v6)
    return 0;
  else
    return 2147483651;
}

uint64_t vplatform_file_Close(FILE *a1)
{
  if (fclose(a1))
    return 2147483907;
  else
    return 0;
}

uint64_t vplatform_file_Read(void *a1, size_t a2, size_t a3, FILE *a4)
{
  size_t v5;

  v5 = fread(a1, a2, a3, a4);
  if (!v5 && ferror(a4))
    return 0xFFFFFFFFLL;
  return v5;
}

uint64_t vplatform_file_Seek(FILE *a1, unint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;

  if (a3 > 2)
    return 2147483655;
  v4 = 2147483908;
  if (!(a2 >> 31))
  {
    if (fseek(a1, a4 * a2, a3))
      return 2147483908;
    else
      return 0;
  }
  return v4;
}

uint64_t vplatform_file_GetSize(FILE *a1)
{
  unsigned int v2;
  int v3;
  uint64_t result;
  unsigned int v5;

  v2 = MEMORY[0x1DF0ED644]();
  if ((v2 & 0x80000000) != 0)
    return 0;
  v3 = fseek(a1, 0, 2);
  result = 0;
  if (v3)
    return result;
  v5 = MEMORY[0x1DF0ED644](a1);
  if ((v5 & 0x80000000) != 0)
    return 0;
  if (fseek(a1, v2, 0))
    return 0;
  return v5;
}

uint64_t vplatform_file_Error(FILE *a1)
{
  if (ferror(a1))
    return 2147483652;
  else
    return 0;
}

uint64_t vplatform_file_IsDirectory(int a1, char *a2, _DWORD *a3)
{
  uint64_t result;
  stat v5;

  memset(&v5, 0, sizeof(v5));
  *a3 = 0;
  if (stat(a2, &v5))
    return 2147483918;
  result = 0;
  if ((v5.st_mode & 0xF000) == 0x4000)
    *a3 = 1;
  return result;
}

uint64_t vplatform_thread_ObjOpen(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v5 = 2147483912;
  v6 = vplatform_heap_Malloc(a2, 0x10uLL);
  *a3 = v6;
  if (!v6)
    return 2147483654;
  v7 = v6;
  *((_DWORD *)v6 + 2) = 135972;
  v8 = vplatform_heap_Malloc(a2, 0x10uLL);
  if (!v8)
  {
LABEL_7:
    vplatform_heap_Free(a2, a3);
    return v5;
  }
  v9 = v8;
  v10 = vplatform_heap_Malloc(a2, 8uLL);
  *v9 = v10;
  if (!v10)
  {
    vplatform_heap_Free(a2, v9);
    goto LABEL_7;
  }
  v5 = 0;
  v9[1] = a2;
  *v7 = v9;
  return v5;
}

uint64_t vplatform_thread_ObjClose(_DWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = 2147483654;
  if (a1)
  {
    if (a1[2] == 135972)
    {
      v3 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        vplatform_heap_Free(*(_QWORD *)(v3 + 8), *(void **)v3);
        vplatform_heap_Free(*(_QWORD *)(v3 + 8), a1);
        vplatform_heap_Free(*(_QWORD *)(v3 + 8), (void *)v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_thread_Start(uint64_t a1, void *(__cdecl *a2)(void *), void *a3, size_t a4)
{
  uint64_t result;
  pthread_t **v6;
  pthread_attr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135972)
    {
      v6 = *(pthread_t ***)a1;
      if (*(_QWORD *)a1)
      {
        memset(&v10, 0, sizeof(v10));
        pthread_attr_init(&v10);
        pthread_attr_setstacksize(&v10, a4);
        pthread_attr_setdetachstate(&v10, 1);
        if (pthread_create(*v6, &v10, a2, a3))
          return 2147483651;
        else
          return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_thread_Join(uint64_t a1, void **a2)
{
  uint64_t result;
  pthread_t **v4;
  void *v5;

  result = 2147483654;
  v5 = a2;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135972)
    {
      v4 = *(pthread_t ***)a1;
      if (v4)
      {
        if (a2)
          a2 = &v5;
        return (pthread_join(**v4, a2) != 0) << 31;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_thread_SleepMs(uint64_t a1, int a2)
{
  usleep(1000 * a2);
  return 0;
}

uint64_t vplatform_thread_GetCallingThreadId(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = 0;
    *a2 += pthread_self();
  }
  return 0;
}

uint64_t vplatform_Semaphore_ObjOpen(int a1, sem_t *a2, unsigned int a3, uint64_t a4, sem_t ****a5)
{
  uint64_t v8;
  sem_t ***v9;
  sem_t ***v10;
  sem_t **v11;
  sem_t **v12;
  sem_t *v13;

  v8 = 2147483912;
  v9 = (sem_t ***)vplatform_heap_Malloc((int)a2, 0x10uLL);
  *a5 = v9;
  if (!v9)
    return 2147483654;
  v10 = v9;
  *((_DWORD *)v9 + 2) = 135973;
  v11 = (sem_t **)vplatform_heap_Malloc((int)a2, 0x10uLL);
  if (!v11)
  {
LABEL_7:
    vplatform_heap_Free((int)a2, a5);
    return v8;
  }
  v12 = v11;
  v13 = (sem_t *)vplatform_heap_Malloc((int)a2, 4uLL);
  *v12 = v13;
  if (!v13)
  {
    vplatform_heap_Free((int)a2, v12);
    goto LABEL_7;
  }
  v12[1] = a2;
  sem_init(v13, 0, a3);
  v8 = 0;
  *v10 = v12;
  return v8;
}

uint64_t vplatform_Semaphore_ObjClose(_DWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = 2147483654;
  if (a1)
  {
    if (a1[2] == 135973)
    {
      v3 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        sem_destroy(*(sem_t **)v3);
        vplatform_heap_Free(*(_QWORD *)(v3 + 8), *(void **)v3);
        vplatform_heap_Free(*(_QWORD *)(v3 + 8), a1);
        vplatform_heap_Free(*(_QWORD *)(v3 + 8), (void *)v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_Semaphore_Acquire(uint64_t a1)
{
  uint64_t v1;

  v1 = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135973)
    {
      if (*(_QWORD *)a1)
      {
        if (sem_wait(**(sem_t ***)a1))
          return 2147483918;
        else
          return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return v1;
}

uint64_t vplatform_Semaphore_Release(uint64_t a1)
{
  uint64_t v1;

  v1 = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135973)
    {
      if (*(_QWORD *)a1)
      {
        if (sem_post(**(sem_t ***)a1))
          return 2147483918;
        else
          return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return v1;
}

uint64_t vplatform_thread_GetInterface(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &IVthreadInterface;
  *(_QWORD *)(a1 + 120) = &IVSemaphoreInterface;
  return 0;
}

uint64_t vplatform_dynlib_Open(int a1, uint64_t a2, const char *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v5 = 2147483654;
  if (a5)
  {
    *a5 = 0;
    v9 = vplatform_heap_Malloc(a2, 0x10uLL);
    if (v9)
    {
      v10 = v9;
      *v9 = a2;
      v11 = dlopen(a3, 130);
      v10[1] = v11;
      if (v11)
      {
        v5 = 0;
        *a5 = v10;
      }
      else
      {
        vplatform_heap_Free(a2, v10);
        return 2147483661;
      }
    }
    else
    {
      return 2147483658;
    }
  }
  return v5;
}

uint64_t vplatform_dynlib_Close(void **a1)
{
  uint64_t v2;

  if (!a1)
    return 2147483654;
  v2 = (dlclose(a1[1]) != 0) << 31;
  vplatform_heap_Free((int)*a1, a1);
  return v2;
}

uint64_t vplatform_dynlib_GetSymbol(uint64_t a1, const char *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v5;

  v3 = 2147483654;
  if (a3)
  {
    *a3 = 0;
    if (a1)
    {
      if (a2)
      {
        v5 = dlsym(*(void **)(a1 + 8), a2);
        *a3 = v5;
        if (v5)
          return 0;
        else
          return 2147483654;
      }
    }
  }
  return v3;
}

uint64_t vplatform_dynlib_Exists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  return 2147483649;
}

uint64_t vplatform_dynlib_GetInterface(uint64_t a1)
{
  *(_QWORD *)(a1 + 64) = &IDynLib;
  return 0;
}

uint64_t vplatform_clock_GetRelativeTime(uint64_t a1, _DWORD *a2)
{
  clock_t tms_utime;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  clock_t tms_stime;
  clock_t v10;
  BOOL v11;
  clock_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  clock_t v17;
  clock_t v18;
  unint64_t v19;
  unsigned __int128 v20;
  __int128 v21;
  tms v22;

  if (!a1)
    return 2147483654;
  v20 = 0u;
  v21 = 0u;
  memset(&v22, 0, sizeof(v22));
  gettimeofday((timeval *)&v20, 0);
  times(&v22);
  tms_utime = v22.tms_utime;
  v5 = *(_QWORD *)(a1 + 8);
  if ((uint64_t)v20 < *(_QWORD *)v5
    || ((v6 = *(_DWORD *)(v5 + 8), (_QWORD)v20 == *(_QWORD *)v5) ? (v7 = SDWORD2(v20) < v6) : (v7 = 0), v7))
  {
    v8 = 0;
  }
  else
  {
    v8 = (DWORD2(v20) - v6) / 1000 + 1000 * (v20 - *(_QWORD *)v5);
  }
  tms_stime = v22.tms_stime;
  *a2 = v8;
  v10 = *(_QWORD *)(v5 + 16);
  v11 = tms_utime >= v10;
  v12 = tms_utime - v10;
  if (v11)
  {
    v15 = 1000 * v12;
    v16 = sysconf(3);
    v5 = *(_QWORD *)(a1 + 8);
    v13 = v15 / v16;
  }
  else
  {
    LODWORD(v13) = 0;
  }
  a2[1] = v13;
  v17 = *(_QWORD *)(v5 + 24);
  v11 = tms_stime >= v17;
  v18 = tms_stime - v17;
  if (v11)
    v19 = 1000 * v18 / sysconf(3);
  else
    LODWORD(v19) = 0;
  result = 0;
  a2[2] = v19;
  return result;
}

uint64_t vplatform_clock_GetInterface(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  timeval *v6;
  timeval *v7;
  tms v9;

  v2 = 2147483658;
  v3 = a1[3];
  v4 = vplatform_heap_Calloc(v3, 1uLL, 0x10uLL);
  if (v4)
  {
    v5 = v4;
    v6 = (timeval *)vplatform_heap_Calloc(v3, 1uLL, 0x20uLL);
    v5[1] = v6;
    if (v6)
    {
      v7 = v6;
      memset(&v9, 0, sizeof(v9));
      gettimeofday(v6, 0);
      times(&v9);
      v2 = 0;
      v7[1] = *(timeval *)&v9.tms_utime;
      a1[12] = &IClock;
      *v5 = v3;
      a1[13] = v5;
    }
    else
    {
      vplatform_heap_Free(v3, v5);
    }
  }
  return v2;
}

uint64_t vplatform_clock_ReleaseInterface(void **a1)
{
  vplatform_heap_Free((int)*a1, a1[1]);
  vplatform_heap_Free((int)*a1, a1);
  return 0;
}

void *vplatform_heap_Malloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0xC26084B4uLL);
}

void *vplatform_heap_Calloc(int a1, size_t count, size_t size)
{
  return malloc_type_calloc(count, size, 0xB57657CEuLL);
}

void *vplatform_heap_Realloc(int a1, void *ptr, size_t size)
{
  return malloc_type_realloc(ptr, size, 0x401FF21CuLL);
}

void vplatform_heap_Free(int a1, void *a2)
{
  free(a2);
}

uint64_t vplatform_heap_GetInterface(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &IHeap;
  *(_QWORD *)(a1 + 24) = 0;
  return 0;
}

void boost::filesystem::path::~path(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *boost::filesystem::path::parent_path@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  const char *parent_path_size;

  v6 = (char *)this;
  if (*((char *)this + 23) < 0)
    v6 = *(char **)this;
  parent_path_size = boost::filesystem::path::find_parent_path_size(this, a2, a3, a4);
  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, v6, (char *)&parent_path_size[(_QWORD)v6], (unint64_t)parent_path_size);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void boost::filesystem::path::append_v3(std::string *this, std::string *a2)
{
  std::string::size_type v2;
  char v3;
  std::string::size_type size;
  std::string::size_type v5;
  const std::string::value_type *v8;
  const boost::filesystem::path *v9;
  const std::string::value_type *v10;
  std::string __p;

  v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v3 = v2;
  size = a2->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0)
    v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v5 = a2->__r_.__value_.__l.__size_;
  if (v5)
  {
    if (this == a2)
    {
      if ((char)v2 < 0)
        std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, size);
      else
        __p = *a2;
      boost::filesystem::path::append_v3((boost::filesystem::path *)a2, (const boost::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      if ((v2 & 0x80u) == 0)
        v9 = (const boost::filesystem::path *)a2;
      else
        v9 = (const boost::filesystem::path *)a2->__r_.__value_.__r.__words[0];
      if (*(_BYTE *)v9 != 47)
      {
        boost::filesystem::path::append_separator_if_needed(this);
        v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
        size = a2->__r_.__value_.__l.__size_;
        v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      if (v3 >= 0)
        v10 = (const std::string::value_type *)a2;
      else
        v10 = v8;
      if (v3 >= 0)
        size = v2;
      std::string::append(this, v10, size);
    }
  }
}

void sub_1DE8F0250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::size_type boost::filesystem::path::append_separator_if_needed(std::string *this)
{
  std::string::size_type size;
  char *v2;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return 0;
    v2 = (char *)this + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(this, 47);
      return size;
    }
    return 0;
  }
  size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v2 = (char *)(this->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }
  return size;
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1DE8F0424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *`anonymous namespace'::find_root_directory_start(_anonymous_namespace_ *this, const char *a2, _QWORD *a3, unint64_t *a4)
{
  const char *v5;
  char *v6;
  _BYTE *v8;
  const char *v9;

  *a3 = 0;
  if (a2 && *(_BYTE *)this == 47)
  {
    if ((unint64_t)a2 < 2 || *((_BYTE *)this + 1) != 47)
      return 0;
    v5 = a2 - 2;
    if (a2 != (const char *)2)
    {
      v6 = (char *)this + 2;
      if (*((_BYTE *)this + 2) == 47)
        return 0;
      v8 = memchr(v6, 47, (size_t)v5);
      v9 = (const char *)(v8 - v6);
      if (!v8)
        v9 = v5;
      a2 = v9 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

const char *boost::filesystem::path::find_parent_path_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  boost::filesystem::path *v4;
  const char *v5;
  const char *root_directory_start;
  int v7;
  const char *v8;
  boost::filesystem::path *v9;
  char *v10;
  const char *v11;
  const char *v12;
  int v13;
  unint64_t v14;
  boost::filesystem::path *v15;
  char *v16;
  const char *v17;
  unint64_t v19;

  v4 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    v5 = (const char *)*((_QWORD *)v4 + 1);
  }
  else
  {
    v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  v19 = 0;
  v7 = *((char *)v4 + 23);
  if ((unint64_t)v5 >= v19)
    v8 = (const char *)v19;
  else
    v8 = v5;
  if (v7 >= 0)
    v9 = v4;
  else
    v9 = *(boost::filesystem::path **)v4;
  v10 = (char *)v9 - 1;
  v11 = v5;
  while ((unint64_t)v11 > v19)
  {
    v12 = v11 - 1;
    v13 = (v11--)[(_QWORD)v10];
    if (v13 == 47)
    {
      v8 = v12 + 1;
      break;
    }
  }
  if ((unint64_t)v8 >= v19)
    v14 = v19;
  else
    v14 = (unint64_t)v8;
  if (v7 >= 0)
    v15 = v4;
  else
    v15 = *(boost::filesystem::path **)v4;
  v16 = (char *)v15 - 1;
  v17 = v8;
  while ((unint64_t)v17 > v19)
  {
    if (v17[(_QWORD)v16] != 47)
      return v17;
    if (root_directory_start == --v17)
    {
      if (v5 == v8)
        return root_directory_start;
      else
        return root_directory_start + 1;
    }
  }
  if (v5 == v8)
    return 0;
  else
    return (const char *)v14;
}

void `anonymous namespace'::path_locale_deleter::~path_locale_deleter(_anonymous_namespace_::path_locale_deleter *this)
{
  void *v1;

  {
    operator delete(v1);
  }
}

void SoundStormP2APromptInference::prepare_inputs(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t i;
  std::string *v9;
  std::string::value_type *v10;
  std::string::size_type size;
  int v12;
  std::string *v13;
  std::string::value_type *v14;
  std::string::size_type v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::string v32;
  __int128 v33;
  std::string v34;
  _DWORD v35[2];
  std::string v36;
  _DWORD v37[2];
  _QWORD v38[3];

  v3 = (std::__shared_weak_count *)a2[1];
  v38[0] = *a2;
  v38[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SoundStormP2ABaseInference::prepare_inputs((uint64_t)a1, (uint64_t)v38);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (a1[6])
  {
    for (i = 0; i < a1[6]; ++i)
    {
      std::to_string(&v36, i);
      v9 = std::string::insert(&v36, 0, "prompt_k_");
      v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
      size = v9->__r_.__value_.__l.__size_;
      v37[0] = v9->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
      v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      std::to_string(&v36, i);
      v13 = std::string::insert(&v36, 0, "prompt_v_");
      v14 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
      v15 = v13->__r_.__value_.__l.__size_;
      v35[0] = v13->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
      v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      v17 = a1[1];
      if (v12 < 0)
      {
        std::string::__init_copy_ctor_external(&v34, v10, size);
      }
      else
      {
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
        v34.__r_.__value_.__l.__size_ = size;
        LODWORD(v34.__r_.__value_.__r.__words[2]) = v37[0];
        *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v37 + 3);
        *((_BYTE *)&v34.__r_.__value_.__s + 23) = v12;
      }
      v18 = *(_OWORD *)(a1[11] + 16 * i);
      v33 = v18;
      if (*((_QWORD *)&v18 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      (*(void (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v17 + 8))(v17, &v34, &v33);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v24 = a1[1];
      if (v16 < 0)
      {
        std::string::__init_copy_ctor_external(&v32, v14, v15);
      }
      else
      {
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v32.__r_.__value_.__l.__size_ = v15;
        LODWORD(v32.__r_.__value_.__r.__words[2]) = v35[0];
        *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
        *((_BYTE *)&v32.__r_.__value_.__s + 23) = v16;
      }
      v25 = *(_OWORD *)(a1[14] + 16 * i);
      v31 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      (*(void (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v24 + 8))(v24, &v32, &v31);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((v16 & 0x80000000) == 0)
        {
LABEL_41:
          if (v12 < 0)
            goto LABEL_46;
          continue;
        }
      }
      else if ((v16 & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(v14);
      if (v12 < 0)
LABEL_46:
        operator delete(v10);
    }
  }
}

void sub_1DE8F0904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 104);
  _Unwind_Resume(a1);
}

void sub_1DE8F0990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    JUMPOUT(0x1DE8F0984);
  JUMPOUT(0x1DE8F0988);
}

uint64_t SoundStormP2APromptInference::clean(SoundStormP2APromptInference *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(uint64_t a1, const void **a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  unsigned int v8;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48) == 1
    && *(_QWORD *)(a1 + 56) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(_QWORD *)(a1 + 56), a2))
  {
    v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v4, a2);
    v8 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)&v8);
    return v8;
  }
  return a3;
}

_QWORD *std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  uint64_t **v4;
  nlohmann::detail::exception *exception;
  unint64_t v7;
  char *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  __int128 v12;
  std::string::size_type v13;

  if (*a1)
  {
    if (*a1 != 1)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v7 = *a1;
      if (v7 > 9)
        v8 = "number";
      else
        v8 = off_1EA94C758[v7];
      std::string::basic_string[abi:ne180100]<0>(&v11, v8);
      v9 = std::string::insert(&v11, 0, "cannot use operator[] with a string argument with ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v13 = v9->__r_.__value_.__r.__words[2];
      v12 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(305, (uint64_t)&v12, exception);
    }
    v4 = (uint64_t **)*((_QWORD *)a1 + 1);
  }
  else
  {
    *a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *((_QWORD *)a1 + 1) = v4;
  }
  *(_QWORD *)&v12 = a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)+ 7;
}

void sub_1DE8F0BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;
  unint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(&v12);
  std::istream::tellg();
  v6 = v11 >> 1;
  v12 = (void *)*MEMORY[0x1E0DE4F40];
  *(void **)((char *)&v12 + *((_QWORD *)v12 - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](&v14);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v15);
  v7 = operator new(8uLL);
  v12 = v7;
  *v7 = v6;
  v13 = v7 + 1;
  v14 = v7 + 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "fp16");
  v8 = operator new(0x80uLL);
  v8[2] = 0;
  *v8 = &unk_1EA935F10;
  v8[1] = 0;
  *a1 = InferenceEngine::DataTensor::DataTensor(v8 + 3, a2, __p, &v12, a3);
  a1[1] = v8;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_1DE8F0D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  std::__shared_weak_count *v30;
  void *v32;

  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v32);
  if (a14 < 0)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(a1);
}

uint64_t SoundStormInference::clean(SoundStormInference *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

void AnetecStreamingDecoderBaseInference::~AnetecStreamingDecoderBaseInference(void **this)
{
  *this = &off_1EA90A988;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA90A988;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void AnetecStreamingDecoderBaseInference::inference(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::chrono::steady_clock::time_point v15;
  NSObject *v16;
  std::chrono::steady_clock::time_point v17;
  std::chrono::steady_clock::time_point v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  std::__shared_weak_count *v43;
  uint8_t v44[4];
  double v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "Anetec streaming inference decoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Anetec streaming inference decoder begin.", v7);
  v8 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA90AFE8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_QWORD *)buf = v8 + 24;
  v43 = (std::__shared_weak_count *)v8;
  v9 = (std::__shared_weak_count *)a2[1];
  v40 = *a2;
  v41 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[13])(a1, &v40);
  v12 = v41;
  if (v41)
  {
    v13 = (unint64_t *)&v41->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD *))(*a1[37] + 48))(a1[37]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v44 = 134217984;
    v45 = (double)((v17.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_DEBUG, "Anetec streaming decoder inference time (per step): %.3f s", v44, 0xCu);
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(7, "Anetec streaming decoder inference time (per step): %.3f s", v19, (double)((v18.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0);
  v38 = *(_QWORD *)buf;
  v39 = v43;
  if (v43)
  {
    v20 = (unint64_t *)&v43->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[14])(a1, &v38);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD *))(*a1[37] + 56))(a1[37]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEBUG, "Anetec streaming inference decoder end.", v44, 2u);
  }
  Diagnostics::log(7, "Anetec streaming inference decoder end.", v26);
  v36 = *(_QWORD *)buf;
  v37 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *(_QWORD *)(a3 + 24);
  if (!v29)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 48))(v29, &v36);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1DE8F12B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a2)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 296) + 56))(*(_QWORD *)(v17 + 296));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1DE8F1324(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DE8F1330(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DE8F1338);
  __clang_call_terminate(a1);
}

void AnetecStreamingDecoderBaseInference::prepare_inputs(uint64_t a1, uint64_t **a2)
{
  void (***v4)(_QWORD, uint64_t *);
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void (***v11)(_QWORD, uint64_t *);
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void (***v18)(_QWORD, uint64_t *);
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void (***v25)(_QWORD, uint64_t *);
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void (***v32)(_QWORD, uint64_t *);
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void (***v39)(_QWORD, uint64_t *);
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void (***v46)(_QWORD, uint64_t *);
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void (***v53)(_QWORD, uint64_t *);
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void (***v60)(_QWORD, uint64_t *);
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void (***v67)(_QWORD, uint64_t *);
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void (***v74)(_QWORD, uint64_t *);
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;

  v4 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v5 = (std::__shared_weak_count *)(*a2)[1];
  v101 = **a2;
  v102 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (**v4)(v4, &v101);
  v8 = v102;
  if (v102)
  {
    v9 = (unint64_t *)&v102->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v12 = (std::__shared_weak_count *)(*a2)[3];
  v99 = (*a2)[2];
  v100 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  (**v11)(v11, &v99);
  v15 = v100;
  if (v100)
  {
    v16 = (unint64_t *)&v100->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v19 = (std::__shared_weak_count *)(*a2)[5];
  v97 = (*a2)[4];
  v98 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (**v18)(v18, &v97);
  v22 = v98;
  if (v98)
  {
    v23 = (unint64_t *)&v98->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v26 = (std::__shared_weak_count *)(*a2)[7];
  v95 = (*a2)[6];
  v96 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  (**v25)(v25, &v95);
  v29 = v96;
  if (v96)
  {
    v30 = (unint64_t *)&v96->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v33 = (std::__shared_weak_count *)(*a2)[9];
  v93 = (*a2)[8];
  v94 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  (**v32)(v32, &v93);
  v36 = v94;
  if (v94)
  {
    v37 = (unint64_t *)&v94->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v40 = (std::__shared_weak_count *)(*a2)[11];
  v91 = (*a2)[10];
  v92 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  (**v39)(v39, &v91);
  v43 = v92;
  if (v92)
  {
    v44 = (unint64_t *)&v92->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v47 = (std::__shared_weak_count *)(*a2)[13];
  v89 = (*a2)[12];
  v90 = v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  (**v46)(v46, &v89);
  v50 = v90;
  if (v90)
  {
    v51 = (unint64_t *)&v90->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v54 = (std::__shared_weak_count *)(*a2)[15];
  v87 = (*a2)[14];
  v88 = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  (**v53)(v53, &v87);
  v57 = v88;
  if (v88)
  {
    v58 = (unint64_t *)&v88->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v61 = (std::__shared_weak_count *)(*a2)[17];
  v85 = (*a2)[16];
  v86 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  (**v60)(v60, &v85);
  v64 = v86;
  if (v86)
  {
    v65 = (unint64_t *)&v86->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v68 = (std::__shared_weak_count *)(*a2)[19];
  v83 = (*a2)[18];
  v84 = v68;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  (**v67)(v67, &v83);
  v71 = v84;
  if (v84)
  {
    v72 = (unint64_t *)&v84->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v75 = (std::__shared_weak_count *)(*a2)[21];
  v81 = (*a2)[20];
  v82 = v75;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  (**v74)(v74, &v81);
  v78 = v82;
  if (v82)
  {
    v79 = (unint64_t *)&v82->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
}

void sub_1DE8F1848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AnetecStreamingDecoderBaseInference::get_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  __int128 v70;

  v4 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v68, "decoder_chunk_out");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 32))(&v70, v4, v68);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2, &v70);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v69 < 0)
    operator delete(v68[0]);
  v8 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v66, "obuf_0");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v8 + 32))(&v70, v8, v66);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 16, &v70);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  v12 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v64, "obuf_1_0");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v12 + 32))(&v70, v12, v64);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 32, &v70);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v65 < 0)
    operator delete(v64[0]);
  v16 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v62, "obuf_1");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v16 + 32))(&v70, v16, v62);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 48, &v70);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v63 < 0)
    operator delete(v62[0]);
  v20 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "obuf_2_0");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v20 + 32))(&v70, v20, __p);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 64, &v70);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v61 < 0)
    operator delete(__p[0]);
  v24 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v58, "obuf_2");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v24 + 32))(&v70, v24, v58);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 80, &v70);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v59 < 0)
    operator delete(v58[0]);
  v28 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v56, "obuf_3_0");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v28 + 32))(&v70, v28, v56);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 96, &v70);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v57 < 0)
    operator delete(v56[0]);
  v32 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v54, "obuf_3");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v32 + 32))(&v70, v32, v54);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 112, &v70);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v55 < 0)
    operator delete(v54[0]);
  v36 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v52, "obuf_4_0");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v36 + 32))(&v70, v36, v52);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 128, &v70);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v53 < 0)
    operator delete(v52[0]);
  v40 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v50, "obuf_4");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v40 + 32))(&v70, v40, v50);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 144, &v70);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v51 < 0)
    operator delete(v50[0]);
  v44 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v48, "obuf_5");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v44 + 32))(&v70, v44, v48);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*a2 + 160, &v70);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
}

void sub_1DE8F1EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBuf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AFE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBuf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AFE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AnetecStreamingDecoderBuf>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 184);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 168);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 152);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 104);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 88);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v2);
}

void PersistentModule::~PersistentModule(void **this)
{
  *this = &off_1EA91E968;
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  Module::~Module((Module *)this);
}

{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void Module::~Module(Module *this)
{
  *(_QWORD *)this = off_1EA922728;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 208));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100]((_QWORD *)this + 14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*((_QWORD **)this + 2));
}

uint64_t std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<char **>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<Observer>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<Observer>>>,0>(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void AnetecStreamingDecoderModule::~AnetecStreamingDecoderModule(AnetecStreamingDecoderModule *this)
{
  AnetecStreamingDecoderModule::~AnetecStreamingDecoderModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA90A840;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 392);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 48, *((unsigned __int8 *)this + 376));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

void AnetecStreamingDecoderModule::prepare(AnetecStreamingDecoderModule *this)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  uint64_t *v5;
  int v6;
  char *v7;
  unint64_t *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  char *v35;
  std::__shared_weak_count *v36;
  void *__p;
  std::__shared_weak_count *v38;
  char v39;
  __int128 v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;

  if (*((_BYTE *)this + 288))
    return;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  v4 = (char *)operator new(0x48uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA932CC0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_WORD *)v4 + 12) = 257;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 14) = 0;
  *(_QWORD *)&v40 = v4 + 24;
  *((_QWORD *)&v40 + 1) = v4;
  *((_QWORD *)v4 + 4) = 0;
  v5 = (uint64_t *)(v4 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_vqs");
  LODWORD(v35) = 8;
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 376, (const void **)&__p, (unsigned int *)&v35);
  LODWORD(v43) = 0;
  std::vector<float>::vector(buf, v6, &v43);
  std::vector<std::vector<float>>::resize(v5, 2uLL, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&v42 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v39 < 0)
    operator delete(__p);
  v7 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_1EA932E10;
  *(_OWORD *)(v7 + 24) = 0u;
  *((_QWORD *)v7 + 2) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *((_QWORD *)v7 + 21) = 0;
  __p = v7 + 24;
  v38 = (std::__shared_weak_count *)v7;
  v9 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_QWORD *)v9 = &off_1EA932198;
  *((_QWORD *)v9 + 3) = v9 + 32;
  v35 = v9 + 24;
  v36 = (std::__shared_weak_count *)v9;
  Agglomerate::set<std::shared_ptr<AcousticFeature>>((uint64_t)(v9 + 24), &v40);
  *(_QWORD *)buf = &v43;
  v11 = v10[5];
  if (v11)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&v42 = v7 + 24;
    *((_QWORD *)&v42 + 1) = v7;
    do
      v12 = __ldxr(v8);
    while (__stxr(v12 + 1, v8));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 8, &v42);
    *(_QWORD *)buf = &off_1EA923288;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v9 = (char *)v36;
    v33 = v35;
    v34 = v36;
    if (!v36)
      goto LABEL_28;
  }
  else
  {
    v16 = (_QWORD *)operator new();
    *v16 = &off_1EA923288;
    v16[1] = v7 + 24;
    v16[2] = v7;
    do
      v17 = __ldxr(v8);
    while (__stxr(v17 + 1, v8));
    v18 = v10[5];
    v10[5] = (uint64_t)v16;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v33 = v9 + 24;
    v34 = (std::__shared_weak_count *)v9;
  }
  v19 = (unint64_t *)(v9 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_28:
  (*(void (**)(AnetecStreamingDecoderModule *, char **))(*(_QWORD *)this + 80))(this, &v33);
  v21 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1DE8F270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void AnetecStreamingDecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  unint64_t i;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  float *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  NSObject *v125;
  std::chrono::steady_clock::time_point v126;
  std::chrono::steady_clock::time_point v127;
  const char *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::chrono::steady_clock::time_point v138;
  uint64_t *v139;
  void **v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  int v144;
  void *v145[3];
  void *v146[2];
  char v147;
  void *v148[3];
  void *v149[3];
  void *v150[3];
  void *v151[3];
  void *v152[3];
  void *v153[3];
  void *v154[3];
  void *__p;
  std::__shared_weak_count *v156;
  __int128 v157;
  void **p_buf;
  std::__shared_weak_count *v159;
  char v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void **v169;
  _QWORD v170[3];
  _QWORD *v171;
  __int128 buf;
  std::__shared_weak_count *v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v6 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v167 = v5;
  v168 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v165 = 0;
  v166 = 0;
  v164 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v164, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "Anetec streaming decoder module start.", (uint8_t *)&buf, 2u);
  }
  v139 = a2;
  Diagnostics::log(5, "Anetec streaming decoder module start.", v10);
  std::mutex::lock((std::mutex *)(a1 + 296));
  *(_BYTE *)(a1 + 288) = 1;
  v138.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v11 = v164;
  if (v165 - v164 != 24)
  {
    for (i = 0; 0xAAAAAAAAAAAAAAABLL * ((v165 - v164) >> 3) - 1 > i; ++i)
    {
      buf = 0uLL;
      v173 = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&buf, v11 + 24 * i, v11 + 24 * i + 48, 2uLL);
      std::string::basic_string[abi:ne180100]<0>(&p_buf, "code_chunk");
      InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&buf, &v157);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272), &v157);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
      if (*((_QWORD *)&v157 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v160 < 0)
        operator delete(p_buf);
      if (!(*(_DWORD *)(v167 + 32) | i))
      {
        v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "encoder_output_dim");
        LODWORD(__p) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v16, (int *)&__p);
        v17 = (int)__p;
        LODWORD(v153[0]) = 0;
        std::vector<float>::vector(&__p, 6uLL, v153);
        std::vector<std::vector<float>>::vector(&v157, v17, (uint64_t)&__p);
        std::vector<std::vector<std::vector<float>>>::vector(&p_buf, 1uLL, (uint64_t *)&v157);
        v154[0] = &v157;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v154);
        if (__p)
        {
          v156 = (std::__shared_weak_count *)__p;
          operator delete(__p);
        }
        v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v154[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v18, (int *)v154);
        v19 = SLODWORD(v154[0]);
        LODWORD(v152[0]) = 0;
        std::vector<float>::vector(v154, 1uLL, v152);
        std::vector<std::vector<float>>::vector(&__p, 16 * v19, (uint64_t)v154);
        std::vector<std::vector<std::vector<float>>>::vector(&v157, 1uLL, (uint64_t *)&__p);
        v153[0] = &__p;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v153);
        if (v154[0])
        {
          v154[1] = v154[0];
          operator delete(v154[0]);
        }
        v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v153[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v20, (int *)v153);
        v21 = SLODWORD(v153[0]);
        LODWORD(v151[0]) = 0;
        std::vector<float>::vector(v153, 0x36uLL, v151);
        std::vector<std::vector<float>>::vector(v154, 8 * v21, (uint64_t)v153);
        std::vector<std::vector<std::vector<float>>>::vector(&__p, 3uLL, (uint64_t *)v154);
        v152[0] = v154;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
        if (v153[0])
        {
          v153[1] = v153[0];
          operator delete(v153[0]);
        }
        v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v152[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v22, (int *)v152);
        v23 = SLODWORD(v152[0]);
        LODWORD(v150[0]) = 0;
        std::vector<float>::vector(v152, 0xAuLL, v150);
        std::vector<std::vector<float>>::vector(v153, 8 * v23, (uint64_t)v152);
        std::vector<std::vector<std::vector<float>>>::vector(v154, 1uLL, (uint64_t *)v153);
        v151[0] = v153;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v151);
        if (v152[0])
        {
          v152[1] = v152[0];
          operator delete(v152[0]);
        }
        v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v151[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v24, (int *)v151);
        v25 = SLODWORD(v151[0]);
        LODWORD(v149[0]) = 0;
        std::vector<float>::vector(v151, 0x36uLL, v149);
        std::vector<std::vector<float>>::vector(v152, 4 * v25, (uint64_t)v151);
        std::vector<std::vector<std::vector<float>>>::vector(v153, 3uLL, (uint64_t *)v152);
        v150[0] = v152;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
        if (v151[0])
        {
          v151[1] = v151[0];
          operator delete(v151[0]);
        }
        v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v150[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v26, (int *)v150);
        v27 = SLODWORD(v150[0]);
        LODWORD(v148[0]) = 0;
        std::vector<float>::vector(v150, 0x3CuLL, v148);
        std::vector<std::vector<float>>::vector(v151, 4 * v27, (uint64_t)v150);
        std::vector<std::vector<std::vector<float>>>::vector(v152, 1uLL, (uint64_t *)v151);
        v149[0] = v151;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v149);
        if (v150[0])
        {
          v150[1] = v150[0];
          operator delete(v150[0]);
        }
        v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v149[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v28, (int *)v149);
        v29 = SLODWORD(v149[0]);
        LODWORD(v146[0]) = 0;
        std::vector<float>::vector(v149, 0x36uLL, v146);
        std::vector<std::vector<float>>::vector(v150, 2 * v29, (uint64_t)v149);
        std::vector<std::vector<std::vector<float>>>::vector(v151, 3uLL, (uint64_t *)v150);
        v148[0] = v150;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v148);
        if (v149[0])
        {
          v149[1] = v149[0];
          operator delete(v149[0]);
        }
        v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v148[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v30, (int *)v148);
        v31 = SLODWORD(v148[0]);
        LODWORD(v145[0]) = 0;
        std::vector<float>::vector(v148, 0xF0uLL, v145);
        std::vector<std::vector<float>>::vector(v149, 2 * v31, (uint64_t)v148);
        std::vector<std::vector<std::vector<float>>>::vector(v150, 1uLL, (uint64_t *)v149);
        v146[0] = v149;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
        if (v148[0])
        {
          v148[1] = v148[0];
          operator delete(v148[0]);
        }
        v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v146[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v32, (int *)v146);
        v33 = SLODWORD(v146[0]);
        LODWORD(v169) = 0;
        std::vector<float>::vector(v146, 0x36uLL, &v169);
        std::vector<std::vector<float>>::vector(v148, v33, (uint64_t)v146);
        std::vector<std::vector<std::vector<float>>>::vector(v149, 3uLL, (uint64_t *)v148);
        v145[0] = v148;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v145);
        if (v146[0])
        {
          v146[1] = v146[0];
          operator delete(v146[0]);
        }
        v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v145[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v34, (int *)v145);
        v35 = SLODWORD(v145[0]);
        v144 = 0;
        std::vector<float>::vector(v145, 6uLL, &v144);
        std::vector<std::vector<float>>::vector(v146, v35, (uint64_t)v145);
        std::vector<std::vector<std::vector<float>>>::vector(v148, 1uLL, (uint64_t *)v146);
        v169 = v146;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v169);
        if (v145[0])
        {
          v145[1] = v145[0];
          operator delete(v145[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)&p_buf, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 16, (__int128 *)v145);
        v36 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v37 = (unint64_t *)((char *)v145[1] + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_1_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)&v157, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 32, (__int128 *)v145);
        v39 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v40 = (unint64_t *)((char *)v145[1] + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_1");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)&__p, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 48, (__int128 *)v145);
        v42 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v43 = (unint64_t *)((char *)v145[1] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_2_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v154, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 64, (__int128 *)v145);
        v45 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v46 = (unint64_t *)((char *)v145[1] + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_2");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v153, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 80, (__int128 *)v145);
        v48 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v49 = (unint64_t *)((char *)v145[1] + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_3_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v152, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 96, (__int128 *)v145);
        v51 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v52 = (unint64_t *)((char *)v145[1] + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_3");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v151, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 112, (__int128 *)v145);
        v54 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v55 = (unint64_t *)((char *)v145[1] + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_4_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v150, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 128, (__int128 *)v145);
        v57 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v58 = (unint64_t *)((char *)v145[1] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_4");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v149, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 144, (__int128 *)v145);
        v60 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v61 = (unint64_t *)((char *)v145[1] + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        std::string::basic_string[abi:ne180100]<0>(v146, "ibuf_5");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v148, v145);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*(_QWORD *)(a1 + 272) + 160, (__int128 *)v145);
        v63 = (std::__shared_weak_count *)v145[1];
        if (v145[1])
        {
          v64 = (unint64_t *)((char *)v145[1] + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (v147 < 0)
          operator delete(v146[0]);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(_QWORD *)(a1 + 272) + 48), 1);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(_QWORD *)(a1 + 272) + 80), 1);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(_QWORD *)(a1 + 272) + 112), 1);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(_QWORD *)(a1 + 272) + 144), 1);
        v146[0] = v148;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
        v148[0] = v149;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v148);
        v149[0] = v150;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v149);
        v150[0] = v151;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
        v151[0] = v152;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v151);
        v152[0] = v153;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
        v153[0] = v154;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v153);
        v154[0] = &__p;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v154);
        __p = &v157;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(_QWORD *)&v157 = &p_buf;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      }
      v66 = *(_QWORD *)(a1 + 360);
      v67 = *(std::__shared_weak_count **)(a1 + 280);
      v142 = *(_QWORD *)(a1 + 272);
      v143 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v170[0] = &off_1EA90AEE8;
      v170[1] = a1;
      v170[2] = &v161;
      v171 = v170;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v66 + 96))(v66, &v142, v170);
      v70 = v171;
      if (v171 == v170)
      {
        v70 = v170;
        v71 = 4;
      }
      else
      {
        if (!v171)
          goto LABEL_117;
        v71 = 5;
      }
      (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_117:
      v72 = v143;
      if (v143)
      {
        v73 = (unint64_t *)&v143->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      p_buf = (void **)&buf;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&p_buf);
      v11 = v164;
    }
  }
  v75 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v75 + 8) = 0u;
  *((_OWORD *)v75 + 2) = 0u;
  *(_QWORD *)v75 = &off_1EA932198;
  *((_QWORD *)v75 + 3) = v75 + 32;
  v76 = (uint64_t)(v75 + 24);
  p_buf = (void **)(v75 + 24);
  v159 = (std::__shared_weak_count *)v75;
  v77 = (char *)operator new(0x90uLL);
  v78 = v77;
  *((_QWORD *)v77 + 1) = 0;
  v79 = (unint64_t *)(v77 + 8);
  *((_QWORD *)v77 + 2) = 0;
  *(_QWORD *)v77 = &off_1EA933580;
  *(_OWORD *)(v77 + 24) = 0u;
  v80 = v77 + 24;
  *(_OWORD *)(v77 + 88) = 0u;
  *(_OWORD *)(v77 + 72) = 0u;
  *(_OWORD *)(v77 + 56) = 0u;
  *(_OWORD *)(v77 + 40) = 0u;
  *(_OWORD *)(v77 + 104) = 0u;
  *(_OWORD *)(v77 + 120) = 0u;
  *((_QWORD *)v77 + 16) = 0;
  *((_QWORD *)v77 + 17) = 0;
  *((_WORD *)v77 + 12) = 257;
  *((_QWORD *)v77 + 12) = 0;
  *((_OWORD *)v77 + 4) = 0u;
  *((_OWORD *)v77 + 5) = 0u;
  *((_OWORD *)v77 + 2) = 0u;
  *((_OWORD *)v77 + 3) = 0u;
  *((_QWORD *)v77 + 15) = 0;
  *((_WORD *)v77 + 68) = 0;
  *(_QWORD *)&v157 = v77 + 24;
  *((_QWORD *)&v157 + 1) = v77;
  v81 = v161;
  v82 = (uint64_t)v162;
  if (v161 != v162)
  {
    v83 = (float *)v161;
    do
    {
      *v83 = *v83 * 32767.0;
      ++v83;
    }
    while (v83 != (float *)v82);
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v77 + 80, v81, v82, (v82 - (uint64_t)v81) >> 2);
  *((_WORD *)v78 + 12) = *(_WORD *)(v167 + 36);
  *(_QWORD *)&buf = &__p;
  v85 = v84[5];
  if (v85)
  {
    *(_QWORD *)&buf = &off_1EA923328;
    *((_QWORD *)&buf + 1) = v80;
    v173 = (std::__shared_weak_count *)v78;
    do
      v86 = __ldxr(v79);
    while (__stxr(v86 + 1, v79));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v85 + 8, (__int128 *)((char *)&buf + 8));
    *(_QWORD *)&buf = &off_1EA923328;
    v87 = v173;
    rep = v138.__d_.__rep_;
    if (v173)
    {
      v89 = (unint64_t *)&v173->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
  }
  else
  {
    v91 = (_QWORD *)operator new();
    *v91 = &off_1EA923328;
    v91[1] = v80;
    v91[2] = v78;
    do
      v92 = __ldxr(v79);
    while (__stxr(v92 + 1, v79));
    v93 = v84[5];
    v84[5] = (uint64_t)v91;
    rep = v138.__d_.__rep_;
    if (v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  }
  v94 = *v139;
  v95 = *(_QWORD **)(*v139 + 8);
  {
    v97 = *(std::__shared_weak_count **)(*(_QWORD *)v96 + 16);
    *(_QWORD *)&buf = *(_QWORD *)(*(_QWORD *)v96 + 8);
    *((_QWORD *)&buf + 1) = v97;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>((uint64_t)p_buf, &buf);
    if (v97)
    {
      v100 = (unint64_t *)&v97->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v94 = *v139;
    v95 = *(_QWORD **)(*v139 + 8);
  }
  {
    v104 = *(void **)(*(_QWORD *)v102 + 8);
    v103 = *(std::__shared_weak_count **)(*(_QWORD *)v102 + 16);
    __p = v104;
    v156 = v103;
    if (v103)
    {
      v105 = (unint64_t *)&v103->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    *(_QWORD *)&buf = v154;
    v108 = v107[5];
    if (v108)
    {
      *(_QWORD *)&buf = &off_1EA923288;
      *((_QWORD *)&buf + 1) = v104;
      v173 = v103;
      if (v103)
      {
        v109 = (unint64_t *)&v103->__shared_owners_;
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v108 + 8, (__int128 *)((char *)&buf + 8));
      *(_QWORD *)&buf = &off_1EA923288;
      v111 = v173;
      if (v173)
      {
        v112 = (unint64_t *)&v173->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v103 = v156;
    }
    else
    {
      v114 = (_QWORD *)operator new();
      *v114 = &off_1EA923288;
      v114[1] = v104;
      v114[2] = v103;
      if (v103)
      {
        v115 = (unint64_t *)&v103->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      v117 = v107[5];
      v107[5] = (uint64_t)v114;
      if (v117)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
    }
    if (v103)
    {
      v118 = (unint64_t *)&v103->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
  }
  v140 = p_buf;
  v141 = v159;
  if (v159)
  {
    v120 = (unint64_t *)&v159->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)a1 + 72))(a1, &v140);
  v122 = v141;
  if (v141)
  {
    v123 = (unint64_t *)&v141->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v162 = v161;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v125 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v126.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (double)((v126.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v125, OS_LOG_TYPE_DEFAULT, "Anetec streaming decoder module inference time (per cache): %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v127.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Anetec streaming decoder module inference time (per cache): %.3f s", v128, (double)((v127.__d_.__rep_ - rep) / 1000000) / 1000.0);
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v159;
  if (v159)
  {
    v133 = (unint64_t *)&v159->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  std::mutex::unlock((std::mutex *)(a1 + 296));
  *(_QWORD *)&buf = &v164;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v135 = v168;
  if (v168)
  {
    v136 = (unint64_t *)&v168->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
}

void sub_1DE8F3AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  void *v53;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v51 - 256);
  v53 = *(void **)(v51 - 232);
  if (v53)
  {
    *(_QWORD *)(v51 - 224) = v53;
    operator delete(v53);
  }
  std::mutex::unlock(a12);
  *(_QWORD *)(v51 - 232) = v51 - 208;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 232));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v51 - 184);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__find_equal<std::type_index>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 40;
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE8F3FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void Agglomerate::set<std::shared_ptr<AudioSegmentation>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  __int128 v20;
  void *v21;

  v19 = &v21;
  v4 = v3[5];
  if (v4)
  {
    v6 = *a2;
    v5 = a2[1];
    v19 = (void **)&off_1EA923328;
    *(_QWORD *)&v20 = v6;
    *((_QWORD *)&v20 + 1) = v5;
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 8, &v20);
    v19 = (void **)&off_1EA923328;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *a2;
    v14 = a2[1];
    *v13 = &off_1EA923328;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

uint64_t std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__count_unique<std::type_index>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (a1)
  {
    v2 = a1;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = 1;
    do
    {
      v5 = *(_QWORD *)(v2[4] + 8);
      if (!std::type_info::before[abi:ne180100](v3, v5))
      {
        if (!std::type_info::before[abi:ne180100](v5, v3))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

void Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA923528;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void Agglomerate::set<std::shared_ptr<FrontendFeature>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  __int128 v20;
  void *v21;

  v19 = &v21;
  v4 = v3[5];
  if (v4)
  {
    v6 = *a2;
    v5 = a2[1];
    v19 = (void **)&off_1EA923288;
    *(_QWORD *)&v20 = v6;
    *((_QWORD *)&v20 + 1) = v5;
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 8, &v20);
    v19 = (void **)&off_1EA923288;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *a2;
    v14 = a2[1];
    *v13 = &off_1EA923288;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

uint64_t *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__find_equal<std::type_index>(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    v6[4] = **a3;
    v6[5] = 0;
    v8 = v12;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v7 = v6;
    v9 = **(_QWORD **)a1;
    v10 = v6;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<FrontendFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923288;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<FrontendFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923288;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__find_equal<std::type_index>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *(_QWORD *)(a3 + 8);
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = *(_QWORD *)(v4[4] + 8);
        if (!std::type_info::before[abi:ne180100](v6, v8))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (!std::type_info::before[abi:ne180100](v8, v6))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v7;
  return v5;
}

BOOL std::type_info::before[abi:ne180100](unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0 && (a2 & 0x8000000000000000) != 0)
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  else
    return a1 < a2;
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<std::vector<RateMarker>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923528;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<RateMarker>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923528;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<AudioSegmentation>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923328;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<AudioSegmentation>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923328;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<AudioSegmentation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioSegmentation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<AudioSegmentation>::__on_zero_shared(uint64_t a1)
{
  std::allocator<AudioSegmentation>::destroy[abi:ne180100](a1 + 24);
}

void std::allocator<AudioSegmentation>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a1 + 8);
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<Unit>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Unit>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a1 + 160);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
  }
}

void std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<MarkerRecord>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

void std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA90AEE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA90AEE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __n128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  __n128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __n128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  __n128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  __n128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  __n128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  _QWORD v113[3];
  uint8_t buf[8];
  char *v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "AnetecStreamingDecoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "AnetecStreamingDecoder inference cancelled.", v6);
    v7 = 1;
    if (!v2)
      return v7;
LABEL_91:
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v111 = __ldaxr(p_shared_owners);
    while (__stlxr(v111 - 1, p_shared_owners));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    return v7;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v4 + 272);
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(std::__shared_weak_count **)(v10 + 24);
  v135 = v12;
  v136 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v9, &v135);
  v16 = v136;
  if (v136)
  {
    v17 = (unint64_t *)&v136->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v15);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(_QWORD *)(v3 + 32);
  v20 = *(_QWORD *)(v4 + 272);
  v22 = *(_QWORD *)(v20 + 32);
  v21 = *(std::__shared_weak_count **)(v20 + 40);
  v133 = v22;
  v134 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v19, &v133);
  v26 = v134;
  if (v134)
  {
    v27 = (unint64_t *)&v134->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v25);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(_QWORD *)(v3 + 48);
  v30 = *(_QWORD *)(v4 + 272);
  v32 = *(_QWORD *)(v30 + 48);
  v31 = *(std::__shared_weak_count **)(v30 + 56);
  v131 = v32;
  v132 = v31;
  if (v31)
  {
    v33 = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v29, &v131);
  v36 = v132;
  if (v132)
  {
    v37 = (unint64_t *)&v132->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v35);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(_QWORD *)(v3 + 64);
  v40 = *(_QWORD *)(v4 + 272);
  v42 = *(_QWORD *)(v40 + 64);
  v41 = *(std::__shared_weak_count **)(v40 + 72);
  v129 = v42;
  v130 = v41;
  if (v41)
  {
    v43 = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v39, &v129);
  v46 = v130;
  if (v130)
  {
    v47 = (unint64_t *)&v130->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v46->__on_zero_shared)(v46, v45);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(_QWORD *)(v3 + 80);
  v50 = *(_QWORD *)(v4 + 272);
  v52 = *(_QWORD *)(v50 + 80);
  v51 = *(std::__shared_weak_count **)(v50 + 88);
  v127 = v52;
  v128 = v51;
  if (v51)
  {
    v53 = (unint64_t *)&v51->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v49, &v127);
  v56 = v128;
  if (v128)
  {
    v57 = (unint64_t *)&v128->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v56->__on_zero_shared)(v56, v55);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = *(_QWORD *)(v3 + 96);
  v60 = *(_QWORD *)(v4 + 272);
  v62 = *(_QWORD *)(v60 + 96);
  v61 = *(std::__shared_weak_count **)(v60 + 104);
  v125 = v62;
  v126 = v61;
  if (v61)
  {
    v63 = (unint64_t *)&v61->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v59, &v125);
  v66 = v126;
  if (v126)
  {
    v67 = (unint64_t *)&v126->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v65);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(_QWORD *)(v3 + 112);
  v70 = *(_QWORD *)(v4 + 272);
  v72 = *(_QWORD *)(v70 + 112);
  v71 = *(std::__shared_weak_count **)(v70 + 120);
  v123 = v72;
  v124 = v71;
  if (v71)
  {
    v73 = (unint64_t *)&v71->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v75.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v69, &v123);
  v76 = v124;
  if (v124)
  {
    v77 = (unint64_t *)&v124->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v75);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *(_QWORD *)(v3 + 128);
  v80 = *(_QWORD *)(v4 + 272);
  v82 = *(_QWORD *)(v80 + 128);
  v81 = *(std::__shared_weak_count **)(v80 + 136);
  v121 = v82;
  v122 = v81;
  if (v81)
  {
    v83 = (unint64_t *)&v81->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v79, &v121);
  v86 = v122;
  if (v122)
  {
    v87 = (unint64_t *)&v122->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v86->__on_zero_shared)(v86, v85);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = *(_QWORD *)(v3 + 144);
  v90 = *(_QWORD *)(v4 + 272);
  v92 = *(_QWORD *)(v90 + 144);
  v91 = *(std::__shared_weak_count **)(v90 + 152);
  v119 = v92;
  v120 = v91;
  if (v91)
  {
    v93 = (unint64_t *)&v91->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v95.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v89, &v119);
  v96 = v120;
  if (v120)
  {
    v97 = (unint64_t *)&v120->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v96->__on_zero_shared)(v96, v95);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = *(_QWORD *)(v3 + 160);
  v100 = *(_QWORD *)(v4 + 272);
  v102 = *(_QWORD *)(v100 + 160);
  v101 = *(std::__shared_weak_count **)(v100 + 168);
  v117 = v102;
  v118 = v101;
  if (v101)
  {
    v103 = (unint64_t *)&v101->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v99, &v117);
  v106 = v118;
  if (v118)
  {
    v107 = (unint64_t *)&v118->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, v105);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  InferenceEngine::DataTensor::get_3d_array<float>(*(InferenceEngine::DataTensor **)v3, v113);
  v109 = *(_QWORD *)v113[0];
  v115 = 0;
  v116 = 0;
  *(_QWORD *)buf = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)v109, *(_QWORD *)(v109 + 8), (uint64_t)(*(_QWORD *)(v109 + 8) - *(_QWORD *)v109) >> 2);
  v137 = (void **)v113;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v137);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(char **)buf, v115, (uint64_t)&v115[-*(_QWORD *)buf] >> 2);
  if (*(_QWORD *)buf)
  {
    v115 = *(char **)buf;
    operator delete(*(void **)buf);
  }
  v7 = 0;
  if (v2)
    goto LABEL_91;
  return v7;
}

void sub_1DE8F4FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
    operator delete(__p);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::target_type()
{
}

void std::__shared_ptr_emplace<Agglomerate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Agglomerate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Agglomerate>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t *v30;

  v5 = *a1;
  v6 = (_QWORD *)a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
  v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      v21 = (_QWORD *)(v5 + 24 * a2);
      if (v6 != v21)
      {
        v22 = (_QWORD *)a1[1];
        do
        {
          v24 = (void *)*(v22 - 3);
          v22 -= 3;
          v23 = v24;
          if (v24)
          {
            *(v6 - 2) = v23;
            operator delete(v23);
          }
          v6 = v22;
        }
        while (v22 != v21);
      }
      a1[1] = (uint64_t)v21;
    }
  }
  else
  {
    v10 = (uint64_t)(a1 + 2);
    v11 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v6) >> 3) >= v8)
    {
      v25 = &v6[3 * v8];
      v26 = 24 * a2 - 24 * v7;
      do
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v6 += 3;
        v26 -= 24;
      }
      while (v26);
      a1[1] = (uint64_t)v25;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v30 = a1 + 2;
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= a2)
        v13 = a2;
      if (v12 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v13;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v10, v14);
      v16 = &v15[24 * v7];
      v27[0] = v15;
      v27[1] = v16;
      v28 = v16;
      v29 = &v15[24 * v17];
      v18 = 3 * a2;
      v19 = &v15[24 * a2];
      v20 = 8 * v18 - 24 * v7;
      do
      {
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v16 += 24;
        v20 -= 24;
      }
      while (v20);
      v28 = v19;
      std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v27);
      std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v27);
    }
  }
}

void sub_1DE8F53F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<AcousticFeature>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA923268;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<AcousticFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923268;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<AcousticFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923268;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FrontendFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FrontendFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FrontendFeature>::__on_zero_shared(uint64_t a1)
{
  std::allocator<FrontendFeature>::destroy[abi:ne180100](a1 + 24);
}

void std::allocator<FrontendFeature>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = (void **)(a1 + 48);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 24);
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)a1;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<Prompt>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<WordFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::allocator<PhoneFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<PhoneFeature>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = (void **)(a1 + 72);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::allocator<WordFeature>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::allocator<Prompt>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::__shared_ptr_emplace<AcousticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AcousticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<AcousticFeature>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void Module::Module(Module *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 850045863;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)this = off_1EA922728;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_BYTE *)this + 160) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  MEMORY[0x1DF0ECD80]((char *)this + 208);
}

void sub_1DE8F5A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(char *)(v1 + 207) < 0)
    operator delete(*(void **)(v1 + 184));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v4);
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100]((_QWORD *)(v1 + 112));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3);
  std::mutex::~mutex(v2);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void SharedObjectPool::get<VoiceConfig>(_QWORD *a1, __int128 **a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  void (***v12)(VoiceConfigImpl *__hidden);
  void (**v13)(VoiceConfigImpl *__hidden);
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::string v29;
  std::string __p;

  v4 = (std::recursive_mutex *)(a2 + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 7));
  v5 = (uint64_t)(a2 + 4);
  {
    v10 = *a2;
    v11 = operator new(0x38uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1EA933238;
    v11[3] = &off_1EA91E548;
    v12 = (void (***)(VoiceConfigImpl *__hidden))(v11 + 3);
    v11[5] = 0;
    v11[6] = 0;
    v11[4] = 0;
    *(_QWORD *)&v28 = v11 + 3;
    *((_QWORD *)&v28 + 1) = v11;
    if (*((char *)v10 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)v10 + 3), *((_QWORD *)v10 + 4));
      v13 = *v12;
    }
    else
    {
      v29 = *(std::string *)((_BYTE *)v10 + 1);
      v13 = &off_1EA91E548;
    }
    __p = v29;
    memset(&v29, 0, sizeof(v29));
    ((void (*)(void (***)(VoiceConfigImpl *__hidden), std::string *))v13[10])(v12, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v14 = *v10;
      v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
    }
    __p = v29;
    memset(&v29, 0, sizeof(v29));
    ((void (*)(void (***)(VoiceConfigImpl *__hidden), std::string *))(*v12)[10])(v12, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    v16 = v15[5];
    if (v16)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231A8;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v28;
      if (*((_QWORD *)&v28 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v16 + 8, (__int128 *)&__p.__r_.__value_.__r.__words[1]);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231A8;
      v19 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v20 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
      v22 = operator new();
      *(_QWORD *)v22 = &off_1EA9231A8;
      *(_OWORD *)(v22 + 8) = v28;
      if (*((_QWORD *)&v28 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = v15[5];
      v15[5] = v22;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
    if (*((_QWORD *)&v28 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v28 + 1) + 16))(*((_QWORD *)&v28 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE8F5D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::recursive_mutex *v23;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::recursive_mutex::unlock(v23);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935FB8;
  result = InferenceEngine::MLInferenceModel::MLInferenceModel(v6 + 3, a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1DE8F5E38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::MLInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::MLInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::MLInferenceModel>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::MLInferenceModel::~MLInferenceModel((InferenceEngine::MLInferenceModel *)(a1 + 24));
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<VoiceConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9231A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<VoiceConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9231A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void SharedObjectPool::get<SynthesizerConfig>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  void **v29;
  __int128 v30;
  void *v31;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    goto LABEL_20;
  }
  v6 = (std::__shared_weak_count *)operator new(0x60uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933778;
  v6[1].__vftable = 0;
  *(std::__shared_count *)((char *)&v6[1].std::__shared_count + 4) = (std::__shared_count)xmmword_1DED16B40;
  __asm { FMOV            V0.2S, #1.0 }
  *(uint64_t *)((char *)&v6[1].__shared_weak_owners_ + 4) = _D0;
  *(std::__shared_count *)((char *)&v6[2].std::__shared_count + 4) = 0u;
  *(_OWORD *)((char *)&v6[2].__shared_weak_owners_ + 4) = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  v28 = v6;
  v29 = &v31;
  v14 = v13[5];
  if (!v14)
  {
    v19 = (_QWORD *)operator new();
    *v19 = &off_1EA9233A8;
    v19[1] = v6 + 1;
    v19[2] = v6;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = v13[5];
    v13[5] = (uint64_t)v19;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_16;
  }
  v29 = (void **)&off_1EA9233A8;
  *(_QWORD *)&v30 = v6 + 1;
  *((_QWORD *)&v30 + 1) = v6;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v14 + 8, &v30);
  v29 = (void **)&off_1EA9233A8;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v6 = v28;
  if (v28)
  {
LABEL_16:
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_20:
  v25 = *(_QWORD *)(*(_QWORD *)v24 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v24 + 8);
  a1[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE8F6128(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<SynthesizerConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9233A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<SynthesizerConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9233A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SynthesizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SynthesizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SynthesizerConfig>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x38uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  v43 = 0;
  *v17 = 0;
  v17[1] = v9;
  v18 = (std::string *)(v17 + 2);
  v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v17[4] = *((_QWORD *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  v17[5] = 0;
  v17[6] = 0;
  v43 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v16;
          if (*v16)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v16;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1DE8F6670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void AnetecDecoderBaseInference::~AnetecDecoderBaseInference(void **this)
{
  *this = &off_1EA90A780;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA90A780;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void AnetecDecoderBaseInference::inference(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::chrono::steady_clock::time_point v15;
  NSObject *v16;
  std::chrono::steady_clock::time_point v17;
  std::chrono::steady_clock::time_point v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  std::__shared_weak_count *v43;
  uint8_t v44[4];
  double v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "Anetec inference decoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Anetec inference decoder begin.", v7);
  v8 = (char *)operator new(0x90uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA933580;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *((_QWORD *)v8 + 16) = 0;
  *((_QWORD *)v8 + 17) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_WORD *)v8 + 12) = 257;
  *((_QWORD *)v8 + 12) = 0;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_QWORD *)v8 + 15) = 0;
  *((_WORD *)v8 + 68) = 0;
  *(_QWORD *)buf = v8 + 24;
  v43 = (std::__shared_weak_count *)v8;
  v9 = (std::__shared_weak_count *)a2[1];
  v40 = *a2;
  v41 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[13])(a1, &v40);
  v12 = v41;
  if (v41)
  {
    v13 = (unint64_t *)&v41->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD *))(*a1[37] + 48))(a1[37]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v44 = 134217984;
    v45 = (double)((v17.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_DEFAULT, "Anetec decoder inference time: %.3f s", v44, 0xCu);
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Anetec decoder inference time: %.3f s", v19, (double)((v18.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0);
  v38 = *(_QWORD *)buf;
  v39 = v43;
  if (v43)
  {
    v20 = (unint64_t *)&v43->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[14])(a1, &v38);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD *))(*a1[37] + 56))(a1[37]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEBUG, "Anetec inference decoder end.", v44, 2u);
  }
  Diagnostics::log(7, "Anetec inference decoder end.", v26);
  v36 = *(_QWORD *)buf;
  v37 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *(_QWORD *)(a3 + 24);
  if (!v29)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 48))(v29, &v36);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1DE8F6BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a2)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 296) + 56))(*(_QWORD *)(v17 + 296));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1DE8F6C1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DE8F6C28(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DE8F6C30);
  __clang_call_terminate(a1);
}

void AnetecDecoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  std::string::basic_string[abi:ne180100]<0>(&__p, "codes");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)(*(_QWORD *)a2 + 8), &v17);
  if (v16 < 0)
    operator delete(__p);
  v4 = *(void (****)(_QWORD, uint64_t *))(a1 + 296);
  v13 = v17;
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (**v4)(v4, &v13);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1DE8F6D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 - 32);
  _Unwind_Resume(a1);
}

void AnetecDecoderBaseInference::get_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  float *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[3];
  void *v12;
  void *v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  InferenceEngine::DataTensor *v17;
  std::__shared_weak_count *v18;
  void **v19;

  v3 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder_out");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 32))(&v17, v3, __p);
  if (v16 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v17, v11);
  v4 = *(_QWORD *)v11[0];
  v13 = 0;
  v14 = 0;
  v12 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
  v19 = (void **)v11;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v5 = (char *)v12;
  v6 = (uint64_t)v13;
  if (v12 != v13)
  {
    v7 = (float *)v12;
    do
    {
      *v7 = *v7 * 32767.0;
      ++v7;
    }
    while (v7 != (float *)v6);
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(*(_QWORD *)a2 + 56), v5, v6, (v6 - (uint64_t)v5) >> 2);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1DE8F6E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v13 - 40);
  _Unwind_Resume(a1);
}

void sub_1DE8F6EE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE8F6ED8);
}

void AnetecDecoderModule::~AnetecDecoderModule(AnetecDecoderModule *this)
{
  AnetecDecoderModule::~AnetecDecoderModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA90A600;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 376);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

void AnetecDecoderModule::prepare(AnetecDecoderModule *this)
{
  std::mutex *v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  uint64_t *v6;
  int v7;
  char *v8;
  unint64_t *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  char *v36;
  std::__shared_weak_count *v37;
  void *__p;
  std::__shared_weak_count *v39;
  char v40;
  __int128 v41;
  uint8_t buf[8];
  __int128 v43;
  void *v44;

  v2 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  if (*((_BYTE *)this + 272))
    goto LABEL_2;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v4);
  v5 = (char *)operator new(0x48uLL);
  *(_QWORD *)v5 = &off_1EA932CC0;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_WORD *)v5 + 12) = 257;
  *((_QWORD *)v5 + 4) = 0;
  v6 = (uint64_t *)(v5 + 32);
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_DWORD *)v5 + 14) = 0;
  *(_QWORD *)&v41 = v5 + 24;
  *((_QWORD *)&v41 + 1) = v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_vqs");
  LODWORD(v36) = 8;
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 360, (const void **)&__p, (unsigned int *)&v36);
  LODWORD(v44) = 0;
  std::vector<float>::vector(buf, v7, &v44);
  std::vector<std::vector<float>>::resize(v6, 0x64uLL, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&v43 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v40 < 0)
    operator delete(__p);
  v8 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v8 + 1) = 0;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)v8 = &off_1EA932E10;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 2) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *((_QWORD *)v8 + 21) = 0;
  __p = v8 + 24;
  v39 = (std::__shared_weak_count *)v8;
  v10 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_QWORD *)v10 = &off_1EA932198;
  *((_QWORD *)v10 + 3) = v10 + 32;
  v36 = v10 + 24;
  v37 = (std::__shared_weak_count *)v10;
  Agglomerate::set<std::shared_ptr<AcousticFeature>>((uint64_t)(v10 + 24), &v41);
  *(_QWORD *)buf = &v44;
  v12 = v11[5];
  if (v12)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&v43 = v8 + 24;
    *((_QWORD *)&v43 + 1) = v8;
    do
      v13 = __ldxr(v9);
    while (__stxr(v13 + 1, v9));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v12 + 8, &v43);
    *(_QWORD *)buf = &off_1EA923288;
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v10 = (char *)v37;
    v34 = v36;
    v35 = v37;
    if (!v37)
      goto LABEL_28;
  }
  else
  {
    v17 = (_QWORD *)operator new();
    *v17 = &off_1EA923288;
    v17[1] = v8 + 24;
    v17[2] = v8;
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    v19 = v11[5];
    v11[5] = (uint64_t)v17;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v34 = v10 + 24;
    v35 = (std::__shared_weak_count *)v10;
  }
  v20 = (unint64_t *)(v10 + 8);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_28:
  (*(void (**)(AnetecDecoderModule *, char **))(*(_QWORD *)this + 80))(this, &v34);
  v22 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_2:
  std::mutex::unlock(v2);
}

void sub_1DE8F7348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::mutex *v23;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void AnetecDecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[8];
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v25 = v6;
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "Anetec decoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "Anetec decoder module start.", v10);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(_BYTE *)(a1 + 272) = 1;
  v11 = *(_QWORD *)(a1 + 344);
  v22 = v6;
  v23 = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v27[0] = &off_1EA90AC80;
  v27[1] = a1;
  v27[2] = a2;
  v28 = v27;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v11 + 96))(v11, &v22, v27);
  v14 = v28;
  if (v28 == v27)
  {
    v15 = 4;
    v14 = v27;
    goto LABEL_15;
  }
  if (v28)
  {
    v15 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1DE8F75E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA90AC80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA90AC80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  _BYTE *v4;
  NSObject *v5;
  const char *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v58;
  std::__shared_weak_count *v59;
  void *v60;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  if (v4[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v58) = 0;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "AnetecDecoder inference cancelled.", (uint8_t *)&v58, 2u);
    }
    Diagnostics::log(5, "AnetecDecoder inference cancelled.", v6);
  }
  else
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    *(_OWORD *)&v8->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
    *(_OWORD *)&v8[1].__shared_owners_ = 0u;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1].__shared_owners_;
    v10 = (uint64_t)&v8[1];
    v11 = *(uint64_t **)(a1 + 16);
    v12 = *v11;
    v13 = *(_QWORD **)(*v11 + 8);
    {
      v15 = *(std::__shared_weak_count **)(*(_QWORD *)v14 + 16);
      *(_QWORD *)&v58 = *(_QWORD *)(*(_QWORD *)v14 + 8);
      *((_QWORD *)&v58 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v10, &v58);
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v20 = *(uint64_t **)(a1 + 16);
      v12 = *v20;
      v13 = *(_QWORD **)(*v20 + 8);
    }
    {
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 8);
      v22 = *(std::__shared_weak_count **)(*(_QWORD *)v21 + 16);
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *(_QWORD *)&v58 = &v60;
      v27 = v26[5];
      if (v27)
      {
        *(_QWORD *)&v58 = &off_1EA923288;
        *((_QWORD *)&v58 + 1) = v23;
        v59 = v22;
        if (v22)
        {
          v28 = (unint64_t *)&v22->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v27 + 8, (__int128 *)((char *)&v58 + 8));
        *(_QWORD *)&v58 = &off_1EA923288;
        v30 = v59;
        if (v59)
        {
          v31 = (unint64_t *)&v59->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      else
      {
        v33 = (_QWORD *)operator new();
        *v33 = &off_1EA923288;
        v33[1] = v23;
        v33[2] = v22;
        if (v22)
        {
          v34 = (unint64_t *)&v22->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = v26[5];
        v26[5] = (uint64_t)v33;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      if (v22)
      {
        v37 = (unint64_t *)&v22->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    *(_QWORD *)&v58 = &v60;
    v40 = v39[5];
    if (v40)
    {
      *(_QWORD *)&v58 = &off_1EA923328;
      *((_QWORD *)&v58 + 1) = v3;
      v59 = v2;
      if (v2)
      {
        v41 = (unint64_t *)&v2->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v40 + 8, (__int128 *)((char *)&v58 + 8));
      *(_QWORD *)&v58 = &off_1EA923328;
      v43 = v59;
      if (v59)
      {
        v44 = (unint64_t *)&v59->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    else
    {
      v46 = (_QWORD *)operator new();
      *v46 = &off_1EA923328;
      v46[1] = v3;
      v46[2] = v2;
      if (v2)
      {
        v47 = (unint64_t *)&v2->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = v39[5];
      v39[5] = (uint64_t)v46;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    }
    *(_QWORD *)&v58 = v8 + 1;
    *((_QWORD *)&v58 + 1) = v8;
    do
      v50 = __ldxr(p_shared_owners);
    while (__stxr(v50 + 1, p_shared_owners));
    (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v4 + 72))(v4, &v58);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v2)
  {
    v55 = (unint64_t *)&v2->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 1;
}

void sub_1DE8F7B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::target_type()
{
}

void EspressoParallelNeuralAMInference::inference(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  const std::string::value_type **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::chrono::steady_clock::time_point v41;
  int v42;
  NSObject *v43;
  std::chrono::steady_clock::time_point v44;
  std::chrono::steady_clock::time_point v45;
  const char *v46;
  int v47;
  int *v48;
  int *v49;
  _BYTE *v50;
  _BYTE *v51;
  _QWORD *v52;
  int v53;
  _QWORD *v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  int v71;
  int v72;
  NSObject *v73;
  const char *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *exception;
  int v91;
  void **v92;
  const char *status_string;
  void **v94;
  void *v95;
  int v96;
  void **v97;
  const char *v98;
  void **v99;
  void *v100;
  int v101;
  void **v102;
  const char *v103;
  void **v104;
  void *v105;
  int v106;
  void **v107;
  const char *v108;
  void **v109;
  void *v110;
  int v111;
  void **v112;
  const char *v113;
  void **v114;
  void *v115;
  int v116;
  void **v117;
  const char *v118;
  void **v119;
  void *v120;
  int v121;
  void **v122;
  const char *v123;
  void **v124;
  void *v125;
  int v126;
  void **v127;
  const char *v128;
  void **v129;
  std::vector<int>::pointer begin;
  const std::string::value_type **v131;
  uint64_t v132;
  uint64_t *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  uint8_t v139[16];
  uint64_t v140;
  void *v141[2];
  char v142;
  void *v143[21];
  void *v144[2];
  char v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  char v148[168];
  std::string v149;
  std::string v150;
  char v151[168];
  char v152[168];
  uint64_t v153;
  std::__shared_weak_count *v154;
  char v155[168];
  char v156[168];
  float v157[42];
  void *v158[2];
  char v159;
  void *v160[3];
  _OWORD v161[10];
  uint64_t v162;
  void *v163[2];
  char v164;
  void *v165;
  _BYTE *v166;
  uint64_t v167;
  void *v168[2];
  char v169;
  void *__p[2];
  char v171;
  _QWORD v172[2];
  _QWORD *v173;
  std::__shared_weak_count *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  void *v178[2];
  uint64_t v179[2];
  uint64_t v180;
  uint64_t v181;
  std::vector<int> v182;
  std::vector<int> v183;
  std::vector<int> v184;
  std::vector<int> v185;
  std::vector<int> v186;
  std::vector<int> v187;
  void *v188;
  void *v189;
  _QWORD *v190;
  uint64_t *v191;
  std::__shared_weak_count *v192;
  __int128 v193;
  uint64_t v194;
  void **v195;
  uint8_t buf[16];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v132 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEFAULT, "Parallel AM inference begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference begin.", v7);
  v8 = (char *)operator new(0x88uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA932C88;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_WORD *)v8 + 12) = 257;
  *(_QWORD *)(v8 + 126) = 0;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  v191 = (uint64_t *)(v8 + 24);
  v192 = (std::__shared_weak_count *)v8;
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v8[132] = FastSpeechUtils::has_whisper(v9[1], v9[2]);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v8[132] = FastSpeechUtils::has_whisper(v9[1], v9[2]);
  }
  v14 = a1 + 416;
  if (*(char *)(a1 + 439) < 0)
    v14 = *(_QWORD *)(a1 + 416);
  v15 = a1 + 440;
  if (*(char *)(a1 + 463) < 0)
    v15 = *(_QWORD *)(a1 + 440);
  v16 = operator new(0x10uLL);
  v190 = v16 + 2;
  *v16 = v14;
  v16[1] = v15;
  v188 = v16;
  v189 = v16 + 2;
  v17 = *a2;
  v19 = (*a2)[4];
  v18 = (*a2)[5];
  v20 = (int *)operator new(8uLL);
  v187.__begin_ = v20;
  *(_QWORD *)v20 = ((unint64_t)(v18 - v19) >> 2) | 0x100000000;
  v187.__end_cap_.__value_ = v20 + 2;
  v187.__end_ = v20 + 2;
  v21 = (int *)operator new(8uLL);
  v186.__begin_ = v21;
  *(_QWORD *)v21 = 0x100000001;
  v186.__end_cap_.__value_ = v21 + 2;
  v186.__end_ = v21 + 2;
  v22 = (int *)operator new(8uLL);
  v185.__begin_ = v22;
  *(_QWORD *)v22 = 0;
  v185.__end_cap_.__value_ = v22 + 2;
  v185.__end_ = v22 + 2;
  v23 = (int *)operator new(8uLL);
  v184.__begin_ = v23;
  *(_QWORD *)v23 = 0;
  v184.__end_cap_.__value_ = v23 + 2;
  v184.__end_ = v23 + 2;
  v24 = (int *)operator new(8uLL);
  v183.__begin_ = v24;
  *(_QWORD *)v24 = 0;
  v183.__end_cap_.__value_ = v24 + 2;
  v183.__end_ = v24 + 2;
  v25 = (int *)operator new(8uLL);
  v182.__begin_ = v25;
  *(_QWORD *)v25 = 0x100000002;
  v182.__end_cap_.__value_ = v25 + 2;
  v182.__end_ = v25 + 2;
  std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(&v180, v17 + 13, v17 + 22, v17 + 31, v17 + 16, v17 + 25, v17 + 34, v17 + 19, v17 + 28, v17 + 37);
  if (*(_BYTE *)(a1 + 224))
  {
    v26 = (std::__shared_weak_count *)v181;
    v179[0] = v180;
    v179[1] = v181;
    if (v181)
    {
      v27 = (unint64_t *)(v181 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(a1 + 224, v179, (uint64_t)&v188, &v187, &v186, &v185, &v184, &v183, &v182);
    if (v26)
    {
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  *(float *)buf = (float)*((int *)*a2 + 86);
  std::vector<float>::vector(v178, 1uLL, buf);
  v31 = (int *)(*a2)[40];
  v32 = (int *)(*a2)[41];
  v177 = 0;
  v175 = 0;
  v176 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v175, v31, v32, v32 - v31);
  if (*(char *)(a1 + 511) < 0)
    v33 = *(_QWORD *)(a1 + 496);
  else
    v33 = *(unsigned __int8 *)(a1 + 511);
  if (v33)
    EspressoParallelNeuralAMInferenceBase::add_language_id_inputs((uint64_t *)(a1 + 488), &v175, (uint64_t)&v188, &v187, &v186, &v185, &v184, &v183, &v182);
  if (*(char *)(a1 + 487) < 0)
    v34 = *(_QWORD *)(a1 + 472);
  else
    v34 = *(unsigned __int8 *)(a1 + 487);
  v35 = (const std::string::value_type **)(a1 + 464);
  if (v34)
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 464), v178, (uint64_t)&v188, &v187, &v186, &v185, &v184, &v183, &v182);
  std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>((uint64_t *)&v173, *a2 + 44);
  if (*(_BYTE *)(a1 + 352))
  {
    v36 = v174;
    v172[0] = v173;
    v172[1] = v174;
    if (v174)
    {
      v37 = (unint64_t *)&v174->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(a1 + 224, (uint64_t)v172, (uint64_t)&v188, &v187, &v186, &v185, &v184, &v183, &v182);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v131 = (const std::string::value_type **)(a1 + 488);
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  begin = v182.__begin_;
  v42 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape input");
  if (v42)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v91 = v171;
    v92 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v94 = __p;
    if (v91 < 0)
      v94 = v92;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v94, v42, status_string);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v171 < 0)
    operator delete(__p[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = (double)((v44.__d_.__rep_ - v41.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso reshaping time: %.3f s", v46, (double)((v45.__d_.__rep_ - v41.__d_.__rep_) / 1000000) / 1000.0, begin);
  v47 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v168, "Unable to build plan");
  if (v47)
  {
    v95 = __cxa_allocate_exception(0x10uLL);
    v96 = v169;
    v97 = (void **)v168[0];
    v98 = (const char *)espresso_get_status_string();
    v99 = v168;
    if (v96 < 0)
      v99 = v97;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v99, v47, v98);
    MEMORY[0x1DF0EC99C](v95, buf);
    __cxa_throw(v95, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v169 < 0)
    operator delete(v168[0]);
  v48 = (int *)(*a2)[4];
  v49 = (int *)(*a2)[5];
  v167 = 0;
  v165 = 0;
  v166 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v165, v48, v49, v49 - v48);
  v50 = v166;
  v51 = v165;
  v52 = operator new(0x10uLL);
  *v52 = 1;
  v52[1] = (v50 - v51) >> 2;
  *(_OWORD *)buf = 0u;
  v197 = 0u;
  v198 = 0u;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = 0u;
  v203 = 0u;
  v204 = 0u;
  v205 = 0u;
  v206 = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)buf = v165;
  LODWORD(v206) = 65568;
  operator delete(v52);
  v53 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v163, "Unable to bind input");
  if (v53)
  {
    v100 = __cxa_allocate_exception(0x10uLL);
    v101 = v164;
    v102 = (void **)v163[0];
    v103 = (const char *)espresso_get_status_string();
    v104 = v163;
    if (v101 < 0)
      v104 = v102;
    StringFormatter::StringFormatter((StringFormatter *)v161, "%s Error: %d, %s", (const char *)v104, v53, v103);
    MEMORY[0x1DF0EC99C](v100, v161);
    __cxa_throw(v100, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v164 < 0)
    operator delete(v163[0]);
  v157[0] = (float)(unint64_t)(((*a2)[5] - (*a2)[4]) >> 2);
  std::vector<float>::vector(v160, 1uLL, v157);
  v54 = operator new(8uLL);
  *v54 = 1;
  memset(v161, 0, sizeof(v161));
  v162 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void **)&v161[0] = v160[0];
  LODWORD(v162) = 65568;
  operator delete(v54);
  v55 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v158, "Unable to bind input_lengths");
  if (v55)
  {
    v105 = __cxa_allocate_exception(0x10uLL);
    v106 = v159;
    v107 = (void **)v158[0];
    v108 = (const char *)espresso_get_status_string();
    v109 = v158;
    if (v106 < 0)
      v109 = v107;
    StringFormatter::StringFormatter((StringFormatter *)v157, "%s Error: %d, %s", (const char *)v109, v55, v108);
    MEMORY[0x1DF0EC99C](v105, v157);
    __cxa_throw(v105, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v159 < 0)
    operator delete(v158[0]);
  if (*(_BYTE *)(a1 + 224))
  {
    v153 = v180;
    v154 = (std::__shared_weak_count *)v181;
    if (v181)
    {
      v56 = (unint64_t *)(v181 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer(a1 + 224, &v153, *(_QWORD *)(a1 + 560), (uint64_t)v157, (uint64_t)v156, (uint64_t)v155);
    v58 = v154;
    if (v154)
    {
      v59 = (unint64_t *)&v154->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  if (*(char *)(a1 + 511) < 0)
  {
    v61 = *(_QWORD *)(a1 + 496);
    if (!v61)
      goto LABEL_77;
    std::string::__init_copy_ctor_external(&v150, *v131, v61);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 511))
      goto LABEL_77;
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = *(_OWORD *)v131;
    v150.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 504);
  }
  EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer((uint64_t)&v150, &v175, *(_QWORD *)(a1 + 560), (uint64_t)v152);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
LABEL_77:
  if (*(char *)(a1 + 487) < 0)
  {
    v62 = *(_QWORD *)(a1 + 472);
    if (!v62)
      goto LABEL_84;
    std::string::__init_copy_ctor_external(&v149, *v35, v62);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 487))
      goto LABEL_84;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = *(_OWORD *)v35;
    v149.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 480);
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v149, v178, *(_QWORD *)(a1 + 560), (uint64_t)v151);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
LABEL_84:
  if (*(_BYTE *)(a1 + 352))
  {
    v63 = v173;
    v146 = (uint64_t)v173;
    v147 = v174;
    if (v174)
    {
      v64 = (unint64_t *)&v174->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer(a1 + 224, v63, *(_QWORD *)(a1 + 560), (uint64_t)v148);
    if (v147)
    {
      v66 = &v147->__shared_owners_;
      do
        v67 = __ldaxr((unint64_t *)v66);
      while (__stlxr(v67 - 1, (unint64_t *)v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
  }
  v68 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v144, &byte_1DEBD87CE);
  if (v68)
  {
    v110 = __cxa_allocate_exception(0x10uLL);
    v111 = v145;
    v112 = (void **)v144[0];
    v113 = (const char *)espresso_get_status_string();
    v114 = v144;
    if (v111 < 0)
      v114 = v112;
    StringFormatter::StringFormatter((StringFormatter *)v143, "%s Error: %d, %s", (const char *)v114, v68, v113);
    MEMORY[0x1DF0EC99C](v110, v143);
    __cxa_throw(v110, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v145 < 0)
    operator delete(v144[0]);
  v69 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v141, "Unable to bind output_mel");
  if (v69)
  {
    v115 = __cxa_allocate_exception(0x10uLL);
    v116 = v142;
    v117 = (void **)v141[0];
    v118 = (const char *)espresso_get_status_string();
    v119 = v141;
    if (v116 < 0)
      v119 = v117;
    StringFormatter::StringFormatter((StringFormatter *)v139, "%s Error: %d, %s", (const char *)v119, v69, v118);
    MEMORY[0x1DF0EC99C](v115, v139);
    __cxa_throw(v115, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v142 < 0)
    operator delete(v141[0]);
  EspressoUtils::convert_espbuffer_to_2d_vector(v139, (uint64_t)v143);
  v70 = v191;
  std::vector<std::vector<int>>::__vdeallocate(v191 + 1);
  *(_OWORD *)(v70 + 1) = *(_OWORD *)v139;
  v70[3] = v140;
  memset(v139, 0, sizeof(v139));
  v140 = 0;
  *(_QWORD *)&v193 = v139;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  free(v143[0]);
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v70 + 4), v70[1], v70[2], 0xAAAAAAAAAAAAAAABLL * ((v70[2] - v70[1]) >> 3));
  if (*(char *)(a1 + 559) < 0)
  {
    if (!*(_QWORD *)(a1 + 544))
      goto LABEL_107;
  }
  else if (!*(_BYTE *)(a1 + 559))
  {
    goto LABEL_107;
  }
  v71 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v137, "Unable to bind output_alignment");
  if (v71)
  {
    v125 = __cxa_allocate_exception(0x10uLL);
    v126 = v138;
    v127 = (void **)v137[0];
    v128 = (const char *)espresso_get_status_string();
    v129 = v137;
    if (v126 < 0)
      v129 = v127;
    StringFormatter::StringFormatter((StringFormatter *)&v193, "%s Error: %d, %s", (const char *)v129, v71, v128);
    MEMORY[0x1DF0EC99C](v125, &v193);
    __cxa_throw(v125, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v138 < 0)
    operator delete(v137[0]);
  EspressoUtils::convert_espbuffer_to_2d_vector(&v193, (uint64_t)v139);
  std::vector<std::vector<int>>::__vdeallocate(v70 + 7);
  *(_OWORD *)(v70 + 7) = v193;
  v70[9] = v194;
  v194 = 0;
  v193 = 0uLL;
  v195 = (void **)&v193;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v195);
  free(*(void **)v139);
LABEL_107:
  v72 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v135, &byte_1DEBD87CE);
  if (v72)
  {
    v120 = __cxa_allocate_exception(0x10uLL);
    v121 = v136;
    v122 = (void **)v135[0];
    v123 = (const char *)espresso_get_status_string();
    v124 = v135;
    if (v121 < 0)
      v124 = v122;
    StringFormatter::StringFormatter((StringFormatter *)v139, "%s Error: %d, %s", (const char *)v124, v72, v123);
    MEMORY[0x1DF0EC99C](v120, v139);
    __cxa_throw(v120, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v136 < 0)
    operator delete(v135[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v139 = 0;
    _os_log_impl(&dword_1DE3F6000, v73, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end.", v139, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference end.", v74);
  v133 = v70;
  v134 = v192;
  if (v192)
  {
    v75 = (unint64_t *)&v192->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = *(_QWORD *)(v132 + 24);
  if (!v77)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v77 + 48))(v77, &v133);
  v78 = v134;
  if (v134)
  {
    v79 = (unint64_t *)&v134->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  v81 = v174;
  if (v174)
  {
    v82 = (unint64_t *)&v174->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  v84 = (std::__shared_weak_count *)v181;
  if (v181)
  {
    v85 = (unint64_t *)(v181 + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v182.__begin_)
  {
    v182.__end_ = v182.__begin_;
    operator delete(v182.__begin_);
  }
  if (v183.__begin_)
  {
    v183.__end_ = v183.__begin_;
    operator delete(v183.__begin_);
  }
  if (v184.__begin_)
  {
    v184.__end_ = v184.__begin_;
    operator delete(v184.__begin_);
  }
  if (v185.__begin_)
  {
    v185.__end_ = v185.__begin_;
    operator delete(v185.__begin_);
  }
  if (v186.__begin_)
  {
    v186.__end_ = v186.__begin_;
    operator delete(v186.__begin_);
  }
  if (v187.__begin_)
  {
    v187.__end_ = v187.__begin_;
    operator delete(v187.__begin_);
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  v87 = v192;
  if (v192)
  {
    v88 = (unint64_t *)&v192->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_1DE8F8F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (SLOBYTE(STACK[0x8B7]) < 0)
  {
    operator delete((void *)STACK[0x8A0]);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a25 < 0)
        operator delete(a20);
      v28 = (void *)STACK[0x658];
      if (STACK[0x658])
      {
        STACK[0x660] = (unint64_t)v28;
        operator delete(v28);
      }
      v29 = (void *)STACK[0x730];
      if (STACK[0x730])
      {
        STACK[0x738] = (unint64_t)v29;
        operator delete(v29);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x788]);
      v30 = (void *)STACK[0x798];
      if (STACK[0x798])
      {
        STACK[0x7A0] = (unint64_t)v30;
        operator delete(v30);
      }
      v31 = (void *)STACK[0x7B0];
      if (STACK[0x7B0])
      {
        STACK[0x7B8] = (unint64_t)v31;
        operator delete(v31);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x7D8]);
      v32 = (void *)STACK[0x7E8];
      if (STACK[0x7E8])
      {
        STACK[0x7F0] = (unint64_t)v32;
        operator delete(v32);
      }
      v33 = (void *)STACK[0x800];
      if (STACK[0x800])
      {
        STACK[0x808] = (unint64_t)v33;
        operator delete(v33);
      }
      v34 = (void *)STACK[0x818];
      if (STACK[0x818])
      {
        STACK[0x820] = (unint64_t)v34;
        operator delete(v34);
      }
      v35 = (void *)STACK[0x830];
      if (STACK[0x830])
      {
        STACK[0x838] = (unint64_t)v35;
        operator delete(v35);
      }
      v36 = (void *)STACK[0x848];
      if (STACK[0x848])
      {
        STACK[0x850] = (unint64_t)v36;
        operator delete(v36);
      }
      v37 = (void *)STACK[0x860];
      if (STACK[0x860])
      {
        STACK[0x868] = (unint64_t)v37;
        operator delete(v37);
      }
      v38 = (void *)STACK[0x878];
      if (STACK[0x878])
      {
        STACK[0x880] = (unint64_t)v38;
        operator delete(v38);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x890]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10)
{
  char *v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  int v21;
  int v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  int v29;
  int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *__p;
  void *v48;
  char *v49;

  v17 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1EA9332A8;
  *(_OWORD *)(v17 + 24) = 0u;
  v46 = (uint64_t)(v17 + 24);
  *(_OWORD *)(v17 + 72) = 0u;
  v45 = (uint64_t *)(v17 + 96);
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *(_OWORD *)(v17 + 152) = 0u;
  v18 = *a2;
  if (a2[1] != *a2)
  {
    v19 = 0;
    do
    {
      v20 = *(float *)(v18 + 4 * v19);
      v21 = *(_DWORD *)(*a5 + 4 * v19);
      v22 = *(_DWORD *)(*a8 + 4 * v19);
      v23 = (char *)operator new(0xCuLL);
      v48 = v23 + 12;
      v49 = v23 + 12;
      *(float *)v23 = roundf(v20);
      *((_DWORD *)v23 + 1) = v21;
      *((_DWORD *)v23 + 2) = v22;
      __p = v23;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v46, *((_QWORD *)v17 + 4), v23, v23 + 12, 3);
      v24 = *((_QWORD *)v17 + 13);
      if (v24 >= *((_QWORD *)v17 + 14))
      {
        v25 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v45, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v45, (uint64_t)&__p);
        v25 = v24 + 24;
      }
      *((_QWORD *)v17 + 13) = v25;
      if (__p)
      {
        v48 = __p;
        operator delete(__p);
      }
      ++v19;
      v18 = *a2;
    }
    while (v19 < (a2[1] - *a2) >> 2);
  }
  v26 = *a3;
  v44 = (uint64_t *)(v17 + 120);
  if (a3[1] != *a3)
  {
    v27 = 0;
    do
    {
      v28 = *(float *)(v26 + 4 * v27);
      v29 = *(_DWORD *)(*a6 + 4 * v27);
      v30 = *(_DWORD *)(*a9 + 4 * v27);
      v31 = (char *)operator new(0xCuLL);
      v48 = v31 + 12;
      v49 = v31 + 12;
      *(float *)v31 = roundf(v28);
      *((_DWORD *)v31 + 1) = v29;
      *((_DWORD *)v31 + 2) = v30;
      __p = v31;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v17 + 48), *((_QWORD *)v17 + 7), v31, v31 + 12, 3);
      v32 = *((_QWORD *)v17 + 16);
      if (v32 >= *((_QWORD *)v17 + 17))
      {
        v33 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v44, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v44, (uint64_t)&__p);
        v33 = v32 + 24;
      }
      *((_QWORD *)v17 + 16) = v33;
      if (__p)
      {
        v48 = __p;
        operator delete(__p);
      }
      ++v27;
      v26 = *a3;
    }
    while (v27 < (a3[1] - *a3) >> 2);
  }
  v34 = *a4;
  v43 = (uint64_t *)(v17 + 144);
  if (a4[1] != *a4)
  {
    v35 = 0;
    do
    {
      v36 = *(_DWORD *)(v34 + 4 * v35);
      v37 = *(_DWORD *)(*a7 + 4 * v35);
      v38 = *(_DWORD *)(*a10 + 4 * v35);
      v39 = (char *)operator new(0xCuLL);
      v48 = v39 + 12;
      v49 = v39 + 12;
      *(_DWORD *)v39 = v36;
      *((_DWORD *)v39 + 1) = v37;
      *((_DWORD *)v39 + 2) = v38;
      __p = v39;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v17 + 72), *((_QWORD *)v17 + 10), v39, v39 + 12, 3);
      v40 = *((_QWORD *)v17 + 19);
      if (v40 >= *((_QWORD *)v17 + 20))
      {
        v41 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v43, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v43, (uint64_t)&__p);
        v41 = v40 + 24;
      }
      *((_QWORD *)v17 + 19) = v41;
      if (__p)
      {
        v48 = __p;
        operator delete(__p);
      }
      ++v35;
      v34 = *a4;
    }
    while (v35 < (a4[1] - *a4) >> 2);
  }
  *a1 = v46;
  a1[1] = (uint64_t)v17;
}

void sub_1DE8F9610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *a12, void **a13, void *a14, void **a15, void *__p, uint64_t a17)
{
  std::__shared_weak_count *v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *a11;
  if (*a11)
  {
    v17[3].__shared_owners_ = (uint64_t)v19;
    operator delete(v19);
  }
  v20 = *a13;
  if (*a13)
  {
    v17[2].__shared_owners_ = (uint64_t)v20;
    operator delete(v20);
  }
  v21 = *a15;
  if (*a15)
  {
    v17[1].__shared_owners_ = (uint64_t)v21;
    operator delete(v21);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(uint64_t a1, uint64_t *a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *end;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v15 = *(char **)(a3 + 8);
  v18 = *(_QWORD *)(a1 + 8);
  v16 = a1 + 8;
  v17 = v18;
  if (*(char *)(v16 + 23) >= 0)
    v17 = v16;
  if (*(char *)(v16 + 47) >= 0)
    v19 = v16 + 24;
  else
    v19 = *(_QWORD *)(v16 + 24);
  v20 = *(char *)(v16 + 71);
  v23 = *(_QWORD *)(v16 + 48);
  v21 = v16 + 48;
  v22 = v23;
  v33 = v17;
  v34[0] = v19;
  if (v20 >= 0)
    v24 = v21;
  else
    v24 = v22;
  v34[1] = v24;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&v33, (char *)&v35, 3);
  end = a4->__end_;
  v33 = 0x300000003;
  LODWORD(v34[0]) = 3;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&v33, (char *)v34 + 4, 3);
  v26 = a5->__end_;
  v27 = *a2;
  v28 = ((uint64_t)(*(_QWORD *)(*a2 + 32) - *(_QWORD *)(*a2 + 24)) >> 2) / 3uLL;
  LODWORD(v33) = ((uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2) / 3uLL;
  HIDWORD(v33) = v28;
  LODWORD(v34[0]) = ((uint64_t)(*(_QWORD *)(v27 + 56) - *(_QWORD *)(v27 + 48)) >> 2) / 3uLL;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v26, (char *)&v33, (char *)v34 + 4, 3);
  v29 = a6->__end_;
  v33 = 0x100000001;
  LODWORD(v34[0]) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v29, (char *)&v33, (char *)v34 + 4, 3);
  v30 = a7->__end_;
  v33 = 0;
  LODWORD(v34[0]) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v30, (char *)&v33, (char *)v34 + 4, 3);
  v31 = a8->__end_;
  v33 = 0;
  LODWORD(v34[0]) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v31, (char *)&v33, (char *)v34 + 4, 3);
  v32 = a9->__end_;
  v33 = 0x300000003;
  LODWORD(v34[0]) = 3;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v32, (char *)&v33, (char *)v34 + 4, 3);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DE8F9928(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EspressoParallelNeuralAMInferenceBase::add_language_id_inputs(uint64_t *a1, _QWORD *a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  char *v15;
  uint64_t *v16;
  int *end;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = *(char **)(a3 + 8);
  if (*((char *)a1 + 23) >= 0)
    v16 = a1;
  else
    v16 = (uint64_t *)*a1;
  v23 = v16;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&v23, (char *)&v24, 1);
  end = a4->__end_;
  LODWORD(v23) = (a2[1] - *a2) >> 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&v23, (char *)&v23 + 4, 1);
  v18 = a5->__end_;
  LODWORD(v23) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v18, (char *)&v23, (char *)&v23 + 4, 1);
  v19 = a6->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v19, (char *)&v23, (char *)&v23 + 4, 1);
  v20 = a7->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v20, (char *)&v23, (char *)&v23 + 4, 1);
  v21 = a8->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v21, (char *)&v23, (char *)&v23 + 4, 1);
  v22 = a9->__end_;
  LODWORD(v23) = 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v22, (char *)&v23, (char *)&v23 + 4, 1);
}

void EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs(uint64_t *a1, _QWORD *a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  char *v15;
  uint64_t *v16;
  int *end;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = *(char **)(a3 + 8);
  if (*((char *)a1 + 23) >= 0)
    v16 = a1;
  else
    v16 = (uint64_t *)*a1;
  v23 = v16;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&v23, (char *)&v24, 1);
  end = a4->__end_;
  LODWORD(v23) = (a2[1] - *a2) >> 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&v23, (char *)&v23 + 4, 1);
  v18 = a5->__end_;
  LODWORD(v23) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v18, (char *)&v23, (char *)&v23 + 4, 1);
  v19 = a6->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v19, (char *)&v23, (char *)&v23 + 4, 1);
  v20 = a7->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v20, (char *)&v23, (char *)&v23 + 4, 1);
  v21 = a8->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v21, (char *)&v23, (char *)&v23 + 4, 1);
  v22 = a9->__end_;
  LODWORD(v23) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v22, (char *)&v23, (char *)&v23 + 4, 1);
}

char *std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>(uint64_t *a1, uint64_t *a2)
{
  char *result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (char *)operator new(0x30uLL);
  v5 = result;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)result = &off_1EA9330B0;
  *((_QWORD *)result + 3) = 0;
  v6 = (uint64_t)(result + 24);
  *((_OWORD *)result + 2) = 0u;
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v6, *((_QWORD *)v5 + 4), *(char **)(v7 + v8), *(char **)(v7 + v8 + 8), (uint64_t)(*(_QWORD *)(v7 + v8 + 8) - *(_QWORD *)(v7 + v8)) >> 2);
      ++v9;
      v7 = *a2;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v9);
  }
  *a1 = v6;
  a1[1] = (uint64_t)v5;
  return result;
}

void sub_1DE8F9CF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *end;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  uint64_t __src;
  int v26;
  char v27[4];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v15 = *(char **)(a3 + 8);
  v18 = *(_QWORD *)(a1 + 136);
  v16 = a1 + 136;
  v17 = v18;
  if (*(char *)(v16 + 23) >= 0)
    v17 = v16;
  __src = v17;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&__src, (char *)&v26, 1);
  end = a4->__end_;
  LODWORD(__src) = 5;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&__src, (char *)&__src + 4, 1);
  v20 = a5->__end_;
  LODWORD(__src) = ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2) / 5uLL;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v20, (char *)&__src, (char *)&__src + 4, 1);
  v21 = a6->__end_;
  __src = 0x100000001;
  v26 = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v21, (char *)&__src, v27, 3);
  v22 = a7->__end_;
  __src = 0;
  v26 = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v22, (char *)&__src, v27, 3);
  v23 = a8->__end_;
  __src = 0;
  v26 = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v23, (char *)&__src, v27, 3);
  v24 = a9->__end_;
  __src = 0x300000003;
  v26 = 3;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v24, (char *)&__src, v27, 3);
}

void EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  void *exception;
  int v23;
  void **v24;
  const char *status_string;
  void **v26;
  void *v27;
  int v28;
  void **v29;
  const char *v30;
  void **v31;
  void *v32;
  int v33;
  void **v34;
  const char *v35;
  void **v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  _BYTE v43[24];

  v10 = (_QWORD *)*a2;
  v11 = ((uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2) / 3uLL;
  v12 = operator new(0x18uLL);
  *v12 = 1;
  v12[1] = v11;
  v12[2] = 3;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a4 = *v10;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v12);
  v13 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind encoder input_feature_scale");
  if (v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = v42;
    v24 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v26 = __p;
    if (v23 < 0)
      v26 = v24;
    StringFormatter::StringFormatter((StringFormatter *)v43, "%s Error: %d, %s", (const char *)v26, v13, status_string);
    MEMORY[0x1DF0EC99C](exception, v43);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v42 < 0)
    operator delete(__p[0]);
  v14 = *a2;
  v15 = ((uint64_t)(*(_QWORD *)(*a2 + 32) - *(_QWORD *)(*a2 + 24)) >> 2) / 3uLL;
  v16 = operator new(0x18uLL);
  *v16 = 1;
  v16[1] = v15;
  v16[2] = 3;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_QWORD *)(a5 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a5 = *(_QWORD *)(v14 + 24);
  *(_DWORD *)(a5 + 160) = 65568;
  operator delete(v16);
  v17 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v39, "Unable to bind encoder input_feature_bias");
  if (v17)
  {
    v27 = __cxa_allocate_exception(0x10uLL);
    v28 = v40;
    v29 = (void **)v39[0];
    v30 = (const char *)espresso_get_status_string();
    v31 = v39;
    if (v28 < 0)
      v31 = v29;
    StringFormatter::StringFormatter((StringFormatter *)v43, "%s Error: %d, %s", (const char *)v31, v17, v30);
    MEMORY[0x1DF0EC99C](v27, v43);
    __cxa_throw(v27, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v40 < 0)
    operator delete(v39[0]);
  v18 = *a2;
  v19 = ((uint64_t)(*(_QWORD *)(*a2 + 56) - *(_QWORD *)(*a2 + 48)) >> 2) / 3uLL;
  v20 = operator new(0x18uLL);
  *v20 = 1;
  v20[1] = v19;
  v20[2] = 3;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_QWORD *)(a6 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a6 = *(_QWORD *)(v18 + 48);
  *(_DWORD *)(a6 + 160) = 65568;
  operator delete(v20);
  v21 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v37, "Unable to bind encoder input_feature_variance_scale_switch");
  if (v21)
  {
    v32 = __cxa_allocate_exception(0x10uLL);
    v33 = v38;
    v34 = (void **)v37[0];
    v35 = (const char *)espresso_get_status_string();
    v36 = v37;
    if (v33 < 0)
      v36 = v34;
    StringFormatter::StringFormatter((StringFormatter *)v43, "%s Error: %d, %s", (const char *)v36, v21, v35);
    MEMORY[0x1DF0EC99C](v32, v43);
    __cxa_throw(v32, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v38 < 0)
    operator delete(v37[0]);
}

void sub_1DE8FA2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  void *exception;
  int v10;
  void **v11;
  const char *status_string;
  void **v13;
  void *__p[2];
  char v15;
  _BYTE v16[24];

  v6 = (uint64_t)(a2[1] - *a2) >> 2;
  v7 = operator new(0x10uLL);
  *v7 = 1;
  v7[1] = v6;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a4 = *a2;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v7);
  v8 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind language embedding");
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v10 = v15;
    v11 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v13 = __p;
    if (v10 < 0)
      v13 = v11;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v13, v8, status_string);
    MEMORY[0x1DF0EC99C](exception, v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_1DE8FA548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  void *exception;
  int v10;
  void **v11;
  const char *status_string;
  void **v13;
  void *__p[2];
  char v15;
  _BYTE v16[24];

  v6 = (uint64_t)(a2[1] - *a2) >> 2;
  v7 = operator new(8uLL);
  *v7 = v6;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a4 = *a2;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v7);
  v8 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind speaker id");
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v10 = v15;
    v11 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v13 = __p;
    if (v10 < 0)
      v13 = v11;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v13, v8, status_string);
    MEMORY[0x1DF0EC99C](exception, v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_1DE8FA700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD *v7;
  int v8;
  void *exception;
  int v10;
  void **v11;
  const char *status_string;
  void **v13;
  void *__p[2];
  char v15;
  _BYTE v16[24];

  v6 = ((uint64_t)(a2[1] - *a2) >> 2) / 5uLL;
  v7 = operator new(0x18uLL);
  *v7 = 1;
  v7[1] = v6;
  v7[2] = 5;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a4 = *a2;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v7);
  v8 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind encoder input_sentence_prosody");
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v10 = v15;
    v11 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v13 = __p;
    if (v10 < 0)
      v13 = v11;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v13, v8, status_string);
    MEMORY[0x1DF0EC99C](exception, v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_1DE8FA8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void EspressoUtils::convert_espbuffer_to_2d_vector(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  void *__p[3];

  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  v10 = 0;
  std::vector<float>::vector(__p, v4, &v10);
  std::vector<std::vector<float>>::vector(a1, v5, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5)
  {
    v6 = 0;
    v7 = *(char **)a2;
    v8 = 4 * v4;
    do
    {
      v9 = &v7[v8];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*a1 + v6), v7, (uint64_t)&v7[v8], v4);
      v6 += 24;
      v7 = v9;
      --v5;
    }
    while (v5);
  }
}

void sub_1DE8FA9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;

  v6 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(a1 + 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(char **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    v29 = &v28[8 * a5];
    v30 = 8 * a5;
    v31 = v28;
    do
    {
      v32 = *(_QWORD *)v6;
      v6 += 8;
      *(_QWORD *)v31 = v32;
      v31 += 8;
      v30 -= 8;
    }
    while (v30);
    v33 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      v34 = __dst;
      do
      {
        v35 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *((_QWORD *)v28 - 1) = v35;
        v28 -= 8;
      }
      while (v34 != v33);
    }
    v36 = &v18[8 * v17];
    v37 = *(_BYTE **)(a1 + 8);
    v38 = v37 - __dst;
    if (v37 != __dst)
      memmove(v29, __dst, v37 - __dst);
    v39 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v29[v38];
    *(_QWORD *)(a1 + 16) = v36;
    if (v39)
      operator delete(v39);
    return;
  }
  v19 = v12 - (_QWORD)__dst;
  v20 = (uint64_t)(v12 - (_QWORD)__dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(a1 + 8);
LABEL_16:
    v24 = &__dst[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], __dst, v23 - v24);
    if (v21 != v6)
      memmove(__dst, v6, v21 - v6);
    return;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(a1 + 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_16;
}

void std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(std::vector<int> *a1, int *__dst, char *__src, char *a4, uint64_t a5)
{
  int *v6;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  std::vector<int>::pointer v23;
  char *v24;
  std::vector<int>::pointer v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v6 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  end = a1->__end_;
  if (a5 > value - end)
  {
    begin = a1->__begin_;
    v14 = a5 + end - a1->__begin_;
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = __dst - begin;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v6++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    std::vector<int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return;
  }
  v19 = (char *)end - (char *)__dst;
  v20 = end - __dst;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = a1->__end_;
LABEL_16:
    v24 = (char *)&__dst[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if (v25 < end)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while (v25 < end);
    }
    a1->__end_ = v26;
    if (v23 != (std::vector<int>::pointer)v24)
      memmove(&v23[-(((char *)v23 - v24) >> 2)], __dst, (char *)v23 - v24);
    if (v21 != (char *)v6)
      memmove(__dst, v6, v21 - (char *)v6);
    return;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(a1->__end_, &__src[4 * v20], a4 - v21);
  v23 = (std::vector<int>::pointer)((char *)end + v22);
  a1->__end_ = (std::vector<int>::pointer)((char *)end + v22);
  if (v19 >= 1)
    goto LABEL_16;
}

void sub_1DE8FADC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SentFeatureData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9330B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SentFeatureData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9330B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SentFeatureData>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<FeatureScaleData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9332A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureScaleData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9332A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FeatureScaleData>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a1 + 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 96);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<WaveNetFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveNetFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<WaveNetFeature>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void EspressoParallelNeuralAMDecoupledInference::inference(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::chrono::steady_clock::time_point v42;
  int v43;
  _BYTE *v44;
  NSObject *v45;
  std::chrono::steady_clock::time_point v46;
  std::chrono::steady_clock::time_point v47;
  const char *v48;
  int v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  int *v53;
  int *v54;
  _BYTE *v55;
  _BYTE *v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type v66;
  std::string::size_type v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  std::chrono::steady_clock::time_point v73;
  int v74;
  NSObject *v75;
  std::chrono::steady_clock::time_point v76;
  std::chrono::steady_clock::time_point v77;
  const char *v78;
  int v79;
  int v80;
  uint64_t *v81;
  int v82;
  int v83;
  NSObject *v84;
  const char *v85;
  NSObject *v86;
  const char *v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  int *v91;
  int v92;
  int *v93;
  int *v94;
  int *v95;
  int *v96;
  int *v97;
  uint64_t v98;
  const std::string::value_type **v99;
  std::chrono::steady_clock::time_point v100;
  int v101;
  NSObject *v102;
  std::chrono::steady_clock::time_point v103;
  std::chrono::steady_clock::time_point v104;
  const char *v105;
  int v106;
  int v107;
  int v108;
  std::string::size_type v109;
  std::chrono::steady_clock::time_point v110;
  int v111;
  NSObject *v112;
  std::chrono::steady_clock::time_point v113;
  std::chrono::steady_clock::time_point v114;
  const char *v115;
  uint64_t *v116;
  int v117;
  NSObject *v118;
  const char *v119;
  NSObject *v120;
  const char *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *exception;
  int v138;
  void **v139;
  const char *status_string;
  void **v141;
  void *v142;
  int v143;
  void **v144;
  const char *v145;
  void **v146;
  void *v147;
  int v148;
  void **v149;
  const char *v150;
  void **v151;
  void *v152;
  int v153;
  void **v154;
  const char *v155;
  void **v156;
  void *v157;
  int v158;
  void **v159;
  const char *v160;
  void **v161;
  void *v162;
  int v163;
  void **v164;
  const char *v165;
  void **v166;
  void *v167;
  int v168;
  void **v169;
  const char *v170;
  void **v171;
  void *v172;
  int v173;
  void **v174;
  const char *v175;
  void **v176;
  void *v177;
  int v178;
  void **v179;
  const char *v180;
  void **v181;
  void *v182;
  int v183;
  void **v184;
  const char *v185;
  void **v186;
  void *v187;
  int v188;
  void **v189;
  const char *v190;
  void **v191;
  void *v192;
  int v193;
  void **v194;
  const char *v195;
  void **v196;
  void *v197;
  int v198;
  void **v199;
  const char *v200;
  void **v201;
  void *v202;
  int v203;
  void **v204;
  const char *v205;
  void **v206;
  void *v207;
  int v208;
  void **v209;
  const char *v210;
  void **v211;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v213;
  const std::string::value_type **v214;
  const std::string::value_type **v215;
  uint64_t v216;
  uint64_t *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221[2];
  char v222;
  std::string v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  std::vector<int> v232;
  std::vector<int> v233;
  std::vector<int> v234;
  std::vector<int> v235;
  std::vector<int> v236;
  std::vector<int> v237;
  void *v238;
  void *v239;
  _QWORD *v240;
  void *v241[2];
  char v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  void *v247[21];
  void *v248[2];
  char v249;
  void *v250[2];
  char v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  char v254[168];
  std::string v255;
  std::string v256;
  _BYTE v257[168];
  char v258[168];
  uint64_t v259;
  std::__shared_weak_count *v260;
  char v261[168];
  char v262[168];
  float v263[42];
  void *v264[2];
  char v265;
  void *v266[3];
  _OWORD v267[10];
  uint64_t v268;
  void *v269[2];
  char v270;
  void *v271;
  _BYTE *v272;
  uint64_t v273;
  void *v274[2];
  char v275;
  void *__p[2];
  char v277;
  _QWORD v278[2];
  _QWORD *v279;
  std::__shared_weak_count *v280;
  void *v281[3];
  void *v282;
  void *v283;
  uint64_t v284;
  uint64_t v285[2];
  uint64_t v286;
  uint64_t v287;
  std::vector<int> v288;
  std::vector<int> v289;
  std::vector<int> v290;
  std::vector<int> v291;
  std::vector<int> v292;
  std::vector<int> v293;
  void *v294;
  void *v295;
  _QWORD *v296;
  uint64_t *v297;
  std::__shared_weak_count *v298;
  uint8_t *v299;
  uint8_t v300[16];
  uint64_t v301;
  uint8_t v302[16];
  uint64_t v303;
  _BYTE v304[72];
  uint64_t v305;
  uint64_t v306;
  uint8_t buf[16];
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;

  v318 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v216 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEFAULT, "Parallel AM inference begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference begin.", v7);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder begin.", v9);
  v10 = (char *)operator new(0x88uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA932C88;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *((_WORD *)v10 + 12) = 257;
  *(_QWORD *)(v10 + 126) = 0;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  v297 = (uint64_t *)(v10 + 24);
  v298 = (std::__shared_weak_count *)v10;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v10[132] = FastSpeechUtils::has_whisper(v11[1], v11[2]);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v10[132] = FastSpeechUtils::has_whisper(v11[1], v11[2]);
  }
  v16 = a1 + 416;
  if (*(char *)(a1 + 439) < 0)
    v16 = *(_QWORD *)(a1 + 416);
  v17 = a1 + 440;
  if (*(char *)(a1 + 463) < 0)
    v17 = *(_QWORD *)(a1 + 440);
  v18 = operator new(0x10uLL);
  v296 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v294 = v18;
  v295 = v18 + 2;
  v19 = *a2;
  v21 = (*a2)[4];
  v20 = (*a2)[5];
  v22 = (int *)operator new(8uLL);
  v293.__begin_ = v22;
  *(_QWORD *)v22 = ((unint64_t)(v20 - v21) >> 2) | 0x100000000;
  v293.__end_cap_.__value_ = v22 + 2;
  v293.__end_ = v22 + 2;
  v23 = (int *)operator new(8uLL);
  v292.__begin_ = v23;
  *(_QWORD *)v23 = 0x100000001;
  v292.__end_cap_.__value_ = v23 + 2;
  v292.__end_ = v23 + 2;
  v24 = (int *)operator new(8uLL);
  v291.__begin_ = v24;
  *(_QWORD *)v24 = 0;
  v291.__end_cap_.__value_ = v24 + 2;
  v291.__end_ = v24 + 2;
  v25 = (int *)operator new(8uLL);
  v290.__begin_ = v25;
  *(_QWORD *)v25 = 0;
  v290.__end_cap_.__value_ = v25 + 2;
  v290.__end_ = v25 + 2;
  v26 = (int *)operator new(8uLL);
  v289.__begin_ = v26;
  *(_QWORD *)v26 = 0;
  v289.__end_cap_.__value_ = v26 + 2;
  v289.__end_ = v26 + 2;
  v27 = (int *)operator new(8uLL);
  v288.__begin_ = v27;
  *(_QWORD *)v27 = 0x100000002;
  v288.__end_cap_.__value_ = v27 + 2;
  v288.__end_ = v27 + 2;
  std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(&v286, v19 + 13, v19 + 22, v19 + 31, v19 + 16, v19 + 25, v19 + 34, v19 + 19, v19 + 28, v19 + 37);
  if (*(_BYTE *)(a1 + 224))
  {
    v28 = (std::__shared_weak_count *)v287;
    v285[0] = v286;
    v285[1] = v287;
    if (v287)
    {
      v29 = (unint64_t *)(v287 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(a1 + 224, v285, (uint64_t)&v294, &v293, &v292, &v291, &v290, &v289, &v288);
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v33 = (int *)(*a2)[40];
  v34 = (int *)(*a2)[41];
  v284 = 0;
  v282 = 0;
  v283 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v282, v33, v34, v34 - v33);
  *(float *)buf = (float)*((int *)*a2 + 86);
  std::vector<float>::vector(v281, 1uLL, buf);
  if (*(char *)(a1 + 487) < 0)
    v35 = *(_QWORD *)(a1 + 472);
  else
    v35 = *(unsigned __int8 *)(a1 + 487);
  if (v35)
    EspressoParallelNeuralAMInferenceBase::add_language_id_inputs((uint64_t *)(a1 + 464), &v282, (uint64_t)&v294, &v293, &v292, &v291, &v290, &v289, &v288);
  if (*(char *)(a1 + 511) < 0)
    v36 = *(_QWORD *)(a1 + 496);
  else
    v36 = *(unsigned __int8 *)(a1 + 511);
  if (v36)
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 488), v281, (uint64_t)&v294, &v293, &v292, &v291, &v290, &v289, &v288);
  std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>((uint64_t *)&v279, *a2 + 44);
  if (*(_BYTE *)(a1 + 352))
  {
    v37 = v280;
    v278[0] = v279;
    v278[1] = v280;
    if (v280)
    {
      v38 = (unint64_t *)&v280->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(a1 + 224, (uint64_t)v278, (uint64_t)&v294, &v293, &v292, &v291, &v290, &v289, &v288);
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v214 = (const std::string::value_type **)(a1 + 488);
  v215 = (const std::string::value_type **)(a1 + 464);
  v42.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  begin = v288.__begin_;
  v43 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape encoder input");
  if (v43)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v138 = v277;
    v139 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v141 = __p;
    if (v138 < 0)
      v141 = v139;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v141, v43, status_string);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v277 < 0)
    operator delete(__p[0]);
  v44 = (_BYTE *)(a1 + 224);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = (double)((v46.__d_.__rep_ - v42.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v45, OS_LOG_TYPE_DEFAULT, "Parallel AM Encoder Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Encoder Espresso reshaping time: %.3f s", v48, (double)((v47.__d_.__rep_ - v42.__d_.__rep_) / 1000000) / 1000.0, begin);
  v49 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v274, "Unable to build encoder plan");
  if (v49)
  {
    v142 = __cxa_allocate_exception(0x10uLL);
    v143 = v275;
    v144 = (void **)v274[0];
    v145 = (const char *)espresso_get_status_string();
    v146 = v274;
    if (v143 < 0)
      v146 = v144;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v146, v49, v145);
    MEMORY[0x1DF0EC99C](v142, buf);
    __cxa_throw(v142, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v275 < 0)
    operator delete(v274[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v52 = ((*a2)[5] - (*a2)[4]) >> 2;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v52;
    _os_log_impl(&dword_1DE3F6000, v50, OS_LOG_TYPE_DEFAULT, "Parallel AM input length: %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM input length: %ld", v51, ((*a2)[5] - (*a2)[4]) >> 2);
  v53 = (int *)(*a2)[4];
  v54 = (int *)(*a2)[5];
  v273 = 0;
  v271 = 0;
  v272 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v271, v53, v54, v54 - v53);
  v55 = v272;
  v56 = v271;
  v57 = operator new(0x10uLL);
  *v57 = 1;
  v57[1] = (v55 - v56) >> 2;
  *(_OWORD *)buf = 0u;
  v308 = 0u;
  v309 = 0u;
  v310 = 0u;
  v311 = 0u;
  v312 = 0u;
  v313 = 0u;
  v314 = 0u;
  v315 = 0u;
  v316 = 0u;
  v317 = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)buf = v271;
  LODWORD(v317) = 65568;
  operator delete(v57);
  v58 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v269, "Unable to bind encoder input");
  if (v58)
  {
    v147 = __cxa_allocate_exception(0x10uLL);
    v148 = v270;
    v149 = (void **)v269[0];
    v150 = (const char *)espresso_get_status_string();
    v151 = v269;
    if (v148 < 0)
      v151 = v149;
    StringFormatter::StringFormatter((StringFormatter *)v267, "%s Error: %d, %s", (const char *)v151, v58, v150);
    MEMORY[0x1DF0EC99C](v147, v267);
    __cxa_throw(v147, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v270 < 0)
    operator delete(v269[0]);
  v263[0] = (float)(unint64_t)(((*a2)[5] - (*a2)[4]) >> 2);
  std::vector<float>::vector(v266, 1uLL, v263);
  v59 = operator new(8uLL);
  *v59 = 1;
  memset(v267, 0, sizeof(v267));
  v268 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void **)&v267[0] = v266[0];
  LODWORD(v268) = 65568;
  operator delete(v59);
  v60 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v264, "Unable to bind encoder input_lengths");
  if (v60)
  {
    v152 = __cxa_allocate_exception(0x10uLL);
    v153 = v265;
    v154 = (void **)v264[0];
    v155 = (const char *)espresso_get_status_string();
    v156 = v264;
    if (v153 < 0)
      v156 = v154;
    StringFormatter::StringFormatter((StringFormatter *)v263, "%s Error: %d, %s", (const char *)v156, v60, v155);
    MEMORY[0x1DF0EC99C](v152, v263);
    __cxa_throw(v152, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v265 < 0)
    operator delete(v264[0]);
  if (*v44)
  {
    v259 = v286;
    v260 = (std::__shared_weak_count *)v287;
    if (v287)
    {
      v61 = (unint64_t *)(v287 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer((uint64_t)v44, &v259, *(_QWORD *)(a1 + 704), (uint64_t)v263, (uint64_t)v262, (uint64_t)v261);
    v63 = v260;
    if (v260)
    {
      v64 = (unint64_t *)&v260->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  if (*(char *)(a1 + 487) < 0)
  {
    v66 = *(_QWORD *)(a1 + 472);
    if (!v66)
      goto LABEL_85;
    std::string::__init_copy_ctor_external(&v256, *v215, v66);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 487))
      goto LABEL_85;
    *(_OWORD *)&v256.__r_.__value_.__l.__data_ = *(_OWORD *)v215;
    v256.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 480);
  }
  EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer((uint64_t)&v256, &v282, *(_QWORD *)(a1 + 704), (uint64_t)v258);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
LABEL_85:
  if (*(char *)(a1 + 511) < 0)
  {
    v67 = *(_QWORD *)(a1 + 496);
    if (!v67)
      goto LABEL_92;
    std::string::__init_copy_ctor_external(&v255, *v214, v67);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 511))
      goto LABEL_92;
    *(_OWORD *)&v255.__r_.__value_.__l.__data_ = *(_OWORD *)v214;
    v255.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 504);
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v255, v281, *(_QWORD *)(a1 + 704), (uint64_t)v257);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
LABEL_92:
  if (*(_BYTE *)(a1 + 352))
  {
    v68 = v279;
    v252 = (uint64_t)v279;
    v253 = v280;
    if (v280)
    {
      v69 = (unint64_t *)&v280->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer((uint64_t)v44, v68, *(_QWORD *)(a1 + 704), (uint64_t)v254);
    if (v253)
    {
      v71 = &v253->__shared_owners_;
      do
        v72 = __ldaxr((unint64_t *)v71);
      while (__stlxr(v72 - 1, (unint64_t *)v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
  }
  v73.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v74 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v250, &byte_1DEBD87CE);
  if (v74)
  {
    v157 = __cxa_allocate_exception(0x10uLL);
    v158 = v251;
    v159 = (void **)v250[0];
    v160 = (const char *)espresso_get_status_string();
    v161 = v250;
    if (v158 < 0)
      v161 = v159;
    StringFormatter::StringFormatter((StringFormatter *)v304, "%s Error: %d, %s", (const char *)v161, v74, v160);
    MEMORY[0x1DF0EC99C](v157, v304);
    __cxa_throw(v157, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v251 < 0)
    operator delete(v250[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v76.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v304 = 134217984;
    *(double *)&v304[4] = (double)((v76.__d_.__rep_ - v73.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v75, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso encoder inference time: %.3f s", v304, 0xCu);
  }
  v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso encoder inference time: %.3f s", v78, (double)((v77.__d_.__rep_ - v73.__d_.__rep_) / 1000000) / 1000.0);
  v79 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v248, "Unable to bind encoder output_encoder_output");
  if (v79)
  {
    v162 = __cxa_allocate_exception(0x10uLL);
    v163 = v249;
    v164 = (void **)v248[0];
    v165 = (const char *)espresso_get_status_string();
    v166 = v248;
    if (v163 < 0)
      v166 = v164;
    StringFormatter::StringFormatter((StringFormatter *)v247, "%s Error: %d, %s", (const char *)v166, v79, v165);
    MEMORY[0x1DF0EC99C](v162, v247);
    __cxa_throw(v162, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v249 < 0)
    operator delete(v248[0]);
  if (*(char *)(a1 + 583) < 0)
  {
    if (!*(_QWORD *)(a1 + 568))
      goto LABEL_119;
  }
  else if (!*(_BYTE *)(a1 + 583))
  {
    goto LABEL_119;
  }
  v80 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v245, "Unable to bind encoder output_alignment");
  if (v80)
  {
    v207 = __cxa_allocate_exception(0x10uLL);
    v208 = v246;
    v209 = (void **)v245[0];
    v210 = (const char *)espresso_get_status_string();
    v211 = v245;
    if (v208 < 0)
      v211 = v209;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v211, v80, v210);
    MEMORY[0x1DF0EC99C](v207, v302);
    __cxa_throw(v207, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v246 < 0)
    operator delete(v245[0]);
  EspressoUtils::convert_espbuffer_to_2d_vector(v302, (uint64_t)v247);
  v81 = v297;
  std::vector<std::vector<int>>::__vdeallocate(v297 + 7);
  *(_OWORD *)(v81 + 7) = *(_OWORD *)v302;
  v81[9] = v303;
  v303 = 0;
  memset(v302, 0, sizeof(v302));
  *(_QWORD *)v300 = v302;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v300);
  free(v247[0]);
LABEL_119:
  v82 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v243, "Unable to bind encoder output_decoder_length_");
  if (v82)
  {
    v167 = __cxa_allocate_exception(0x10uLL);
    v168 = v244;
    v169 = (void **)v243[0];
    v170 = (const char *)espresso_get_status_string();
    v171 = v243;
    if (v168 < 0)
      v171 = v169;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v171, v82, v170);
    MEMORY[0x1DF0EC99C](v167, v302);
    __cxa_throw(v167, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v244 < 0)
    operator delete(v243[0]);
  v83 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v241, &byte_1DEBD87CE);
  if (v83)
  {
    v172 = __cxa_allocate_exception(0x10uLL);
    v173 = v242;
    v174 = (void **)v241[0];
    v175 = (const char *)espresso_get_status_string();
    v176 = v241;
    if (v173 < 0)
      v176 = v174;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v176, v83, v175);
    MEMORY[0x1DF0EC99C](v172, v302);
    __cxa_throw(v172, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v242 < 0)
    operator delete(v241[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v84 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v302 = 0;
    _os_log_impl(&dword_1DE3F6000, v84, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder end.", v302, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder end.", v85);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v86 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v302 = 0;
    _os_log_impl(&dword_1DE3F6000, v86, OS_LOG_TYPE_DEBUG, "Parallel AM inference decoder begin.", v302, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference decoder begin.", v87);
  v88 = a1 + 608;
  if (*(char *)(a1 + 631) < 0)
    v88 = *(_QWORD *)(a1 + 608);
  v89 = operator new(8uLL);
  v238 = v89;
  *v89 = v88;
  v239 = v89 + 1;
  v240 = v89 + 1;
  v90 = v305;
  v91 = (int *)operator new(4uLL);
  v237.__begin_ = v91;
  *v91 = v90;
  v237.__end_ = v91 + 1;
  v237.__end_cap_.__value_ = v91 + 1;
  v92 = v306;
  v93 = (int *)operator new(4uLL);
  v236.__begin_ = v93;
  *v93 = v92;
  v236.__end_ = v93 + 1;
  v236.__end_cap_.__value_ = v93 + 1;
  v94 = (int *)operator new(4uLL);
  v235.__begin_ = v94;
  *v94 = 1;
  v235.__end_ = v94 + 1;
  v235.__end_cap_.__value_ = v94 + 1;
  v95 = (int *)operator new(4uLL);
  v234.__begin_ = v95;
  *v95 = 1;
  v234.__end_ = v95 + 1;
  v234.__end_cap_.__value_ = v95 + 1;
  v96 = (int *)operator new(4uLL);
  v233.__begin_ = v96;
  *v96 = 0;
  v233.__end_ = v96 + 1;
  v233.__end_cap_.__value_ = v96 + 1;
  v97 = (int *)operator new(4uLL);
  v232.__begin_ = v97;
  *v97 = 3;
  v232.__end_ = v97 + 1;
  v232.__end_cap_.__value_ = v97 + 1;
  if (*(char *)(a1 + 679) < 0)
    v98 = *(_QWORD *)(a1 + 664);
  else
    v98 = *(unsigned __int8 *)(a1 + 679);
  v99 = (const std::string::value_type **)(a1 + 656);
  if (v98)
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 656), v281, (uint64_t)&v238, &v237, &v236, &v235, &v234, &v233, &v232);
  v100.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v213 = v232.__begin_;
  v101 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(v230, "Unable to reshape decoder input");
  if (v101)
  {
    v177 = __cxa_allocate_exception(0x10uLL);
    v178 = v231;
    v179 = (void **)v230[0];
    v180 = (const char *)espresso_get_status_string();
    v181 = v230;
    if (v178 < 0)
      v181 = v179;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v181, v101, v180);
    MEMORY[0x1DF0EC99C](v177, v302);
    __cxa_throw(v177, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v231 < 0)
    operator delete(v230[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v102 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v103.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v302 = 134217984;
    *(double *)&v302[4] = (double)((v103.__d_.__rep_ - v100.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v102, OS_LOG_TYPE_DEFAULT, "Parallel AM Decoder Espresso reshaping time: %.3f s", v302, 0xCu);
  }
  v104.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Decoder Espresso reshaping time: %.3f s", v105, (double)((v104.__d_.__rep_ - v100.__d_.__rep_) / 1000000) / 1000.0, v213);
  v106 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v228, "Unable to build decoder plan");
  if (v106)
  {
    v182 = __cxa_allocate_exception(0x10uLL);
    v183 = v229;
    v184 = (void **)v228[0];
    v185 = (const char *)espresso_get_status_string();
    v186 = v228;
    if (v183 < 0)
      v186 = v184;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v186, v106, v185);
    MEMORY[0x1DF0EC99C](v182, v302);
    __cxa_throw(v182, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v229 < 0)
    operator delete(v228[0]);
  v107 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v226, "Unable to bind decoder decoder_input");
  if (v107)
  {
    v187 = __cxa_allocate_exception(0x10uLL);
    v188 = v227;
    v189 = (void **)v226[0];
    v190 = (const char *)espresso_get_status_string();
    v191 = v226;
    if (v188 < 0)
      v191 = v189;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v191, v107, v190);
    MEMORY[0x1DF0EC99C](v187, v302);
    __cxa_throw(v187, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v227 < 0)
    operator delete(v226[0]);
  v108 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v224, "Unable to build decoder decoder_length");
  if (v108)
  {
    v192 = __cxa_allocate_exception(0x10uLL);
    v193 = v225;
    v194 = (void **)v224[0];
    v195 = (const char *)espresso_get_status_string();
    v196 = v224;
    if (v193 < 0)
      v196 = v194;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v196, v108, v195);
    MEMORY[0x1DF0EC99C](v192, v302);
    __cxa_throw(v192, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v225 < 0)
    operator delete(v224[0]);
  if (*(char *)(a1 + 679) < 0)
  {
    v109 = *(_QWORD *)(a1 + 664);
    if (!v109)
      goto LABEL_163;
    std::string::__init_copy_ctor_external(&v223, *v99, v109);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 679))
      goto LABEL_163;
    *(_OWORD *)&v223.__r_.__value_.__l.__data_ = *(_OWORD *)v99;
    v223.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 672);
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v223, v281, *(_QWORD *)(a1 + 712), (uint64_t)v257);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
LABEL_163:
  v110.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v111 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v221, &byte_1DEBD87CE);
  if (v111)
  {
    v197 = __cxa_allocate_exception(0x10uLL);
    v198 = v222;
    v199 = (void **)v221[0];
    v200 = (const char *)espresso_get_status_string();
    v201 = v221;
    if (v198 < 0)
      v201 = v199;
    StringFormatter::StringFormatter((StringFormatter *)v302, "%s Error: %d, %s", (const char *)v201, v111, v200);
    MEMORY[0x1DF0EC99C](v197, v302);
    __cxa_throw(v197, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v222 < 0)
    operator delete(v221[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v112 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v113.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v302 = 134217984;
    *(double *)&v302[4] = (double)((v113.__d_.__rep_ - v110.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v112, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso decoder inference time: %.3f s", v302, 0xCu);
  }
  v114.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso decoder inference time: %.3f s", v115, (double)((v114.__d_.__rep_ - v110.__d_.__rep_) / 1000000) / 1000.0);
  espresso_network_bind_buffer();
  EspressoUtils::convert_espbuffer_to_2d_vector(v300, (uint64_t)v302);
  v116 = v297;
  std::vector<std::vector<int>>::__vdeallocate(v297 + 1);
  *(_OWORD *)(v116 + 1) = *(_OWORD *)v300;
  v116[3] = v301;
  memset(v300, 0, sizeof(v300));
  v301 = 0;
  v299 = v300;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v299);
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v116 + 4), v116[1], v116[2], 0xAAAAAAAAAAAAAAABLL * ((v116[2] - v116[1]) >> 3));
  free(*(void **)v302);
  free(*(void **)v304);
  free(v247[0]);
  v117 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v219, &byte_1DEBD87CE);
  if (v117)
  {
    v202 = __cxa_allocate_exception(0x10uLL);
    v203 = v220;
    v204 = (void **)v219[0];
    v205 = (const char *)espresso_get_status_string();
    v206 = v219;
    if (v203 < 0)
      v206 = v204;
    StringFormatter::StringFormatter((StringFormatter *)v300, "%s Error: %d, %s", (const char *)v206, v117, v205);
    MEMORY[0x1DF0EC99C](v202, v300);
    __cxa_throw(v202, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v220 < 0)
    operator delete(v219[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v118 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v300 = 0;
    _os_log_impl(&dword_1DE3F6000, v118, OS_LOG_TYPE_DEBUG, "Parallel AM inference decoder end.", v300, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference decoder end.", v119);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v120 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v300 = 0;
    _os_log_impl(&dword_1DE3F6000, v120, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end.", v300, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference end.", v121);
  v217 = v116;
  v218 = v298;
  if (v298)
  {
    v122 = (unint64_t *)&v298->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = *(_QWORD *)(v216 + 24);
  if (!v124)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v124 + 48))(v124, &v217);
  v125 = v218;
  if (v218)
  {
    v126 = (unint64_t *)&v218->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v232.__begin_)
  {
    v232.__end_ = v232.__begin_;
    operator delete(v232.__begin_);
  }
  if (v233.__begin_)
  {
    v233.__end_ = v233.__begin_;
    operator delete(v233.__begin_);
  }
  if (v234.__begin_)
  {
    v234.__end_ = v234.__begin_;
    operator delete(v234.__begin_);
  }
  if (v235.__begin_)
  {
    v235.__end_ = v235.__begin_;
    operator delete(v235.__begin_);
  }
  if (v236.__begin_)
  {
    v236.__end_ = v236.__begin_;
    operator delete(v236.__begin_);
  }
  if (v237.__begin_)
  {
    v237.__end_ = v237.__begin_;
    operator delete(v237.__begin_);
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v266[0])
  {
    v266[1] = v266[0];
    operator delete(v266[0]);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  v128 = v280;
  if (v280)
  {
    v129 = (unint64_t *)&v280->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v281[0])
  {
    v281[1] = v281[0];
    operator delete(v281[0]);
  }
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  v131 = (std::__shared_weak_count *)v287;
  if (v287)
  {
    v132 = (unint64_t *)(v287 + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v288.__begin_)
  {
    v288.__end_ = v288.__begin_;
    operator delete(v288.__begin_);
  }
  if (v289.__begin_)
  {
    v289.__end_ = v289.__begin_;
    operator delete(v289.__begin_);
  }
  if (v290.__begin_)
  {
    v290.__end_ = v290.__begin_;
    operator delete(v290.__begin_);
  }
  if (v291.__begin_)
  {
    v291.__end_ = v291.__begin_;
    operator delete(v291.__begin_);
  }
  if (v292.__begin_)
  {
    v292.__end_ = v292.__begin_;
    operator delete(v292.__begin_);
  }
  if (v293.__begin_)
  {
    v293.__end_ = v293.__begin_;
    operator delete(v293.__begin_);
  }
  if (v294)
  {
    v295 = v294;
    operator delete(v294);
  }
  v134 = v298;
  if (v298)
  {
    v135 = (unint64_t *)&v298->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_1DE8FCD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  char a72;
  void *v72;
  int v73;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;

  if (SLOBYTE(STACK[0x9B7]) < 0)
  {
    operator delete((void *)STACK[0x9A0]);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      if (a72 < 0)
        operator delete(a68);
      v75 = (void *)STACK[0x728];
      if (STACK[0x728])
      {
        STACK[0x730] = (unint64_t)v75;
        operator delete(v75);
      }
      v76 = (void *)STACK[0x808];
      if (STACK[0x808])
      {
        STACK[0x810] = (unint64_t)v76;
        operator delete(v76);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x860]);
      v77 = (void *)STACK[0x870];
      if (STACK[0x870])
      {
        STACK[0x878] = (unint64_t)v77;
        operator delete(v77);
      }
      v78 = (void *)STACK[0x888];
      if (STACK[0x888])
      {
        STACK[0x890] = (unint64_t)v78;
        operator delete(v78);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x8B0]);
      v79 = (void *)STACK[0x8C0];
      if (STACK[0x8C0])
      {
        STACK[0x8C8] = (unint64_t)v79;
        operator delete(v79);
      }
      v80 = (void *)STACK[0x8D8];
      if (STACK[0x8D8])
      {
        STACK[0x8E0] = (unint64_t)v80;
        operator delete(v80);
      }
      v81 = (void *)STACK[0x8F0];
      if (STACK[0x8F0])
      {
        STACK[0x8F8] = (unint64_t)v81;
        operator delete(v81);
      }
      v82 = (void *)STACK[0x908];
      if (STACK[0x908])
      {
        STACK[0x910] = (unint64_t)v82;
        operator delete(v82);
      }
      v83 = (void *)STACK[0x920];
      if (STACK[0x920])
      {
        STACK[0x928] = (unint64_t)v83;
        operator delete(v83);
      }
      v84 = (void *)STACK[0x938];
      if (STACK[0x938])
      {
        STACK[0x940] = (unint64_t)v84;
        operator delete(v84);
      }
      v85 = (void *)STACK[0x950];
      if (STACK[0x950])
      {
        STACK[0x958] = (unint64_t)v85;
        operator delete(v85);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x968]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void EspressoParallelNeuralAMDecoupledStreamingInference::inference(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int *v26;
  int *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const std::string::value_type **v31;
  uint64_t v32;
  const std::string::value_type **v33;
  const std::string::value_type **v34;
  const std::string::value_type *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::chrono::steady_clock::time_point v41;
  int v42;
  NSObject *v43;
  std::chrono::steady_clock::time_point v44;
  std::chrono::steady_clock::time_point v45;
  const char *v46;
  int v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  int *v51;
  int *v52;
  _BYTE *v53;
  _BYTE *v54;
  _QWORD *v55;
  uint64_t **v56;
  int v57;
  _QWORD *v58;
  int v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  _BYTE *v68;
  _BYTE *v69;
  _QWORD *v70;
  int v71;
  _QWORD *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  std::chrono::steady_clock::time_point v77;
  int v78;
  NSObject *v79;
  std::chrono::steady_clock::time_point v80;
  std::chrono::steady_clock::time_point v81;
  const char *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  NSObject *v87;
  const char *v88;
  int v89;
  NSObject *v90;
  const char *v91;
  char *v92;
  uint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  int *v105;
  int *v106;
  uint64_t v107;
  int v108;
  int *v109;
  int *v110;
  int *v111;
  int *v112;
  std::chrono::steady_clock::time_point v113;
  int v114;
  NSObject *v115;
  std::chrono::steady_clock::time_point v116;
  std::chrono::steady_clock::time_point v117;
  const char *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  _QWORD *v125;
  int v126;
  std::string::size_type v127;
  std::chrono::steady_clock::time_point v128;
  _BOOL4 v129;
  dispatch_block_t v130;
  int v131;
  NSObject *v132;
  std::chrono::steady_clock::time_point v133;
  std::chrono::steady_clock::time_point v134;
  const char *v135;
  int v136;
  signed int v137;
  BOOL *v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  int v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  const void *v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  BOOL *v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  BOOL *v169;
  NSObject *v170;
  const char *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  NSObject *v182;
  const char *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  int v191;
  void **v192;
  const char *v193;
  void **v194;
  void *v195;
  int v196;
  void **v197;
  const char *v198;
  void **v199;
  void *v200;
  int v201;
  void **v202;
  const char *v203;
  void **v204;
  void *v205;
  int v206;
  void **v207;
  const char *v208;
  void **v209;
  void *v210;
  int v211;
  void **v212;
  const char *v213;
  void **v214;
  void *v215;
  int v216;
  void **v217;
  const char *v218;
  void **v219;
  void *exception;
  int v221;
  void **v222;
  const char *status_string;
  void **v224;
  void *v225;
  int v226;
  void **v227;
  const char *v228;
  void **v229;
  void *v230;
  int v231;
  void **v232;
  const char *v233;
  void **v234;
  void *v235;
  int v236;
  void **v237;
  const char *v238;
  void **v239;
  void *v240;
  int v241;
  void **v242;
  const char *v243;
  void **v244;
  void *v245;
  int v246;
  void **v247;
  const char *v248;
  void **v249;
  void *v250;
  int v251;
  void **v252;
  const char *v253;
  void **v254;
  void *v255;
  int v256;
  void **v257;
  const char *v258;
  void **v259;
  void *v260;
  int v261;
  const char *v262;
  const char *v263;
  const char *v264;
  void *v265;
  int v266;
  void **v267;
  const char *v268;
  void **v269;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v271;
  int v273;
  uint64_t *v274;
  uint64_t **v275;
  int v276;
  BOOL *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  uint64_t v281;
  uint64_t v282;
  void *v283[2];
  char v284;
  _QWORD block[5];
  std::string v286;
  void *v287[2];
  char v288;
  void *v289[3];
  _OWORD v290[10];
  uint64_t v291;
  void *v292[2];
  char v293;
  void *v294[2];
  char v295;
  void *v296[2];
  char v297;
  std::vector<int> v298;
  std::vector<int> v299;
  std::vector<int> v300;
  std::vector<int> v301;
  std::vector<int> v302;
  std::vector<int> v303;
  void *v304;
  void *v305;
  _QWORD *v306;
  BOOL *v307;
  std::__shared_weak_count *v308;
  void *v309[2];
  char v310;
  void *v311[2];
  char v312;
  void *v313[2];
  char v314;
  void *v315[21];
  void *v316[2];
  char v317;
  void *v318[2];
  char v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  _BYTE v322[168];
  std::string v323;
  std::string v324;
  std::string v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  _BYTE v337[168];
  char v338[168];
  uint64_t v339;
  std::__shared_weak_count *v340;
  char v341[168];
  char v342[168];
  float v343[42];
  void *v344[2];
  char v345;
  void *v346[3];
  _OWORD v347[10];
  uint64_t v348;
  void *v349[2];
  char v350;
  void *v351;
  _BYTE *v352;
  uint64_t v353;
  void *v354[2];
  char v355;
  void *__p[2];
  char v357;
  _QWORD v358[2];
  _QWORD *v359;
  std::__shared_weak_count *v360;
  void *v361;
  _BYTE *v362;
  uint64_t v363;
  void *v364[3];
  void *v365;
  void *v366;
  uint64_t v367;
  uint64_t v368[2];
  uint64_t v369;
  uint64_t v370;
  std::vector<int> v371;
  std::vector<int> v372;
  std::vector<int> v373;
  std::vector<int> v374;
  std::vector<int> v375;
  std::vector<int> v376;
  void *v377;
  void *v378;
  _QWORD *v379;
  int v380[4];
  uint64_t v381;
  uint8_t v382[8];
  void *__dst;
  uint64_t v384;
  _BYTE v385[168];
  uint8_t v386[16];
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  uint64_t v396;
  _BYTE v397[12];
  char v398;
  uint64_t v399;
  int v400;
  uint8_t buf[16];
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;

  v412 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "Parallel AM inference begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference begin.", v6);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_DEFAULT, "Parallel AM inference encoder begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference encoder begin.", v8);
  memset(v380, 0, sizeof(v380));
  v381 = 0;
  v9 = a1 + 936;
  if (*(char *)(a1 + 959) < 0)
    v9 = *(_QWORD *)(a1 + 936);
  v10 = a1 + 960;
  if (*(char *)(a1 + 983) < 0)
    v10 = *(_QWORD *)(a1 + 960);
  v11 = operator new(0x10uLL);
  v379 = v11 + 2;
  *v11 = v9;
  v11[1] = v10;
  v377 = v11;
  v378 = v11 + 2;
  v12 = *a2;
  v14 = (*a2)[4];
  v13 = (*a2)[5];
  v15 = (int *)operator new(8uLL);
  v376.__begin_ = v15;
  *(_QWORD *)v15 = ((unint64_t)(v13 - v14) >> 2) | 0x100000000;
  v376.__end_cap_.__value_ = v15 + 2;
  v376.__end_ = v15 + 2;
  v16 = (int *)operator new(8uLL);
  v375.__begin_ = v16;
  *(_QWORD *)v16 = 0x100000001;
  v375.__end_cap_.__value_ = v16 + 2;
  v375.__end_ = v16 + 2;
  v17 = (int *)operator new(8uLL);
  v374.__begin_ = v17;
  *(_QWORD *)v17 = 0;
  v374.__end_cap_.__value_ = v17 + 2;
  v374.__end_ = v17 + 2;
  v18 = (int *)operator new(8uLL);
  v373.__begin_ = v18;
  *(_QWORD *)v18 = 0;
  v373.__end_cap_.__value_ = v18 + 2;
  v373.__end_ = v18 + 2;
  v19 = (int *)operator new(8uLL);
  v372.__begin_ = v19;
  *(_QWORD *)v19 = 0;
  v372.__end_cap_.__value_ = v19 + 2;
  v372.__end_ = v19 + 2;
  v20 = (int *)operator new(8uLL);
  v371.__begin_ = v20;
  *(_QWORD *)v20 = 0x100000002;
  v371.__end_cap_.__value_ = v20 + 2;
  v371.__end_ = v20 + 2;
  std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(&v369, v12 + 13, v12 + 22, v12 + 31, v12 + 16, v12 + 25, v12 + 34, v12 + 19, v12 + 28, v12 + 37);
  if (*(_BYTE *)(a1 + 744))
  {
    v21 = (std::__shared_weak_count *)v370;
    v368[0] = v369;
    v368[1] = v370;
    if (v370)
    {
      v22 = (unint64_t *)(v370 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(a1 + 744, v368, (uint64_t)&v377, &v376, &v375, &v374, &v373, &v372, &v371);
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v26 = (int *)(*a2)[40];
  v27 = (int *)(*a2)[41];
  v367 = 0;
  v365 = 0;
  v366 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v365, v26, v27, v27 - v26);
  *(float *)buf = (float)*((int *)*a2 + 86);
  std::vector<float>::vector(v364, 1uLL, buf);
  v28 = (const void *)(*a2)[50];
  v29 = (*a2)[51];
  v363 = 0;
  v361 = 0;
  v362 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v361, v28, v29, (v29 - (uint64_t)v28) >> 2);
  if (*(char *)(a1 + 1007) < 0)
    v30 = *(_QWORD *)(a1 + 992);
  else
    v30 = *(unsigned __int8 *)(a1 + 1007);
  v31 = (const std::string::value_type **)(a1 + 984);
  if (v30)
    EspressoParallelNeuralAMInferenceBase::add_language_id_inputs((uint64_t *)(a1 + 984), &v365, (uint64_t)&v377, &v376, &v375, &v374, &v373, &v372, &v371);
  if (*(char *)(a1 + 1031) < 0)
    v32 = *(_QWORD *)(a1 + 1016);
  else
    v32 = *(unsigned __int8 *)(a1 + 1031);
  v33 = (const std::string::value_type **)(a1 + 1008);
  if (v32)
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 1008), v364, (uint64_t)&v377, &v376, &v375, &v374, &v373, &v372, &v371);
  v34 = (const std::string::value_type **)(a1 + 1032);
  if (*(char *)(a1 + 1055) < 0)
  {
    if (!*(_QWORD *)(a1 + 1040))
      goto LABEL_40;
  }
  else if (!*(_BYTE *)(a1 + 1055))
  {
    goto LABEL_40;
  }
  if (*(char *)(a1 + 1055) >= 0)
    v35 = (const std::string::value_type *)(a1 + 1032);
  else
    v35 = *v34;
  *(_QWORD *)buf = v35;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>((uint64_t)&v377, (char *)v378, (char *)buf, (char *)&buf[8], 1);
  *(_DWORD *)buf = (unint64_t)(v362 - (_BYTE *)v361) >> 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v376, v376.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v375, v375.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v374, v374.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v373, v373.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v372, v372.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v371, v371.__end_, (char *)buf, (char *)&buf[4], 1);
LABEL_40:
  std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>((uint64_t *)&v359, *a2 + 44);
  if (*(_BYTE *)(a1 + 872))
  {
    v36 = v360;
    v358[0] = v359;
    v358[1] = v360;
    if (v360)
    {
      v37 = (unint64_t *)&v360->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(a1 + 744, (uint64_t)v358, (uint64_t)&v377, &v376, &v375, &v374, &v373, &v372, &v371);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v275 = a2;
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  begin = v371.__begin_;
  v42 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape encoder input");
  if (v42)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v221 = v357;
    v222 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v224 = __p;
    if (v221 < 0)
      v224 = v222;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v224, v42, status_string);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v357 < 0)
    operator delete(__p[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = (double)((v44.__d_.__rep_ - v41.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_DEFAULT, "Parallel AM Encoder Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Encoder Espresso reshaping time: %.3f s", v46, (double)((v45.__d_.__rep_ - v41.__d_.__rep_) / 1000000) / 1000.0, begin);
  v47 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v354, "Unable to build encoder plan");
  if (v47)
  {
    v225 = __cxa_allocate_exception(0x10uLL);
    v226 = v355;
    v227 = (void **)v354[0];
    v228 = (const char *)espresso_get_status_string();
    v229 = v354;
    if (v226 < 0)
      v229 = v227;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v229, v47, v228);
    MEMORY[0x1DF0EC99C](v225, buf);
    __cxa_throw(v225, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v355 < 0)
    operator delete(v354[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v48 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v50 = ((*v275)[5] - (*v275)[4]) >> 2;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v50;
    _os_log_impl(&dword_1DE3F6000, v48, OS_LOG_TYPE_DEFAULT, "Parallel AM input length: %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM input length: %ld", v49, ((*v275)[5] - (*v275)[4]) >> 2);
  v51 = (int *)(*v275)[4];
  v52 = (int *)(*v275)[5];
  v353 = 0;
  v351 = 0;
  v352 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v351, v51, v52, v52 - v51);
  v53 = v352;
  v54 = v351;
  v55 = operator new(0x10uLL);
  *v55 = 1;
  v55[1] = (v53 - v54) >> 2;
  *(_OWORD *)buf = 0u;
  v402 = 0u;
  v403 = 0u;
  v404 = 0u;
  v405 = 0u;
  v406 = 0u;
  v407 = 0u;
  v408 = 0u;
  v409 = 0u;
  v410 = 0u;
  v411 = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)buf = v351;
  LODWORD(v411) = 65568;
  operator delete(v55);
  v56 = v275;
  v57 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v349, "Unable to bind encoder input");
  if (v57)
  {
    v230 = __cxa_allocate_exception(0x10uLL);
    v231 = v350;
    v232 = (void **)v349[0];
    v233 = (const char *)espresso_get_status_string();
    v234 = v349;
    if (v231 < 0)
      v234 = v232;
    StringFormatter::StringFormatter((StringFormatter *)v347, "%s Error: %d, %s", (const char *)v234, v57, v233);
    MEMORY[0x1DF0EC99C](v230, v347);
    __cxa_throw(v230, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v350 < 0)
    operator delete(v349[0]);
  v343[0] = (float)(unint64_t)(((*v275)[5] - (*v275)[4]) >> 2);
  std::vector<float>::vector(v346, 1uLL, v343);
  v58 = operator new(8uLL);
  *v58 = 1;
  memset(v347, 0, sizeof(v347));
  v348 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void **)&v347[0] = v346[0];
  LODWORD(v348) = 65568;
  operator delete(v58);
  v59 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v344, "Unable to bind encoder input_lengths");
  if (v59)
  {
    v235 = __cxa_allocate_exception(0x10uLL);
    v236 = v345;
    v237 = (void **)v344[0];
    v238 = (const char *)espresso_get_status_string();
    v239 = v344;
    if (v236 < 0)
      v239 = v237;
    StringFormatter::StringFormatter((StringFormatter *)v343, "%s Error: %d, %s", (const char *)v239, v59, v238);
    MEMORY[0x1DF0EC99C](v235, v343);
    __cxa_throw(v235, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v345 < 0)
    operator delete(v344[0]);
  if (*(_BYTE *)(a1 + 744))
  {
    v339 = v369;
    v340 = (std::__shared_weak_count *)v370;
    if (v370)
    {
      v60 = (unint64_t *)(v370 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer(a1 + 744, &v339, *(_QWORD *)(a1 + 704), (uint64_t)v343, (uint64_t)v342, (uint64_t)v341);
    v62 = v340;
    if (v340)
    {
      v63 = (unint64_t *)&v340->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  if (*(char *)(a1 + 1007) < 0)
  {
    v65 = *(_QWORD *)(a1 + 992);
    if (!v65)
      goto LABEL_85;
    std::string::__init_copy_ctor_external(&v325, *v31, v65);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1007))
      goto LABEL_85;
    *(_OWORD *)&v325.__r_.__value_.__l.__data_ = *(_OWORD *)v31;
    v325.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1000);
  }
  EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer((uint64_t)&v325, &v365, *(_QWORD *)(a1 + 704), (uint64_t)v338);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
LABEL_85:
  if (*(char *)(a1 + 1031) < 0)
  {
    v66 = *(_QWORD *)(a1 + 1016);
    if (!v66)
      goto LABEL_92;
    std::string::__init_copy_ctor_external(&v324, *v33, v66);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1031))
      goto LABEL_92;
    *(_OWORD *)&v324.__r_.__value_.__l.__data_ = *(_OWORD *)v33;
    v324.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1024);
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v324, v364, *(_QWORD *)(a1 + 704), (uint64_t)v337);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
LABEL_92:
  if (*(char *)(a1 + 1055) < 0)
  {
    v67 = *(_QWORD *)(a1 + 1040);
    if (!v67)
      goto LABEL_102;
    std::string::__init_copy_ctor_external(&v323, *v34, v67);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1055))
      goto LABEL_102;
    *(_OWORD *)&v323.__r_.__value_.__l.__data_ = *(_OWORD *)v34;
    v323.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1048);
  }
  v68 = v362;
  v69 = v361;
  v70 = operator new(0x10uLL);
  *v70 = 1;
  v70[1] = (v68 - v69) >> 2;
  v326 = 0u;
  v327 = 0u;
  v328 = 0u;
  v329 = 0u;
  v330 = 0u;
  v331 = 0u;
  v332 = 0u;
  v333 = 0u;
  v334 = 0u;
  v335 = 0u;
  v336 = 0;
  espresso_buffer_pack_tensor_shape();
  *(_QWORD *)&v326 = v361;
  LODWORD(v336) = 65568;
  operator delete(v70);
  v71 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v397, "Unable to bind input style");
  if (v71)
  {
    v260 = __cxa_allocate_exception(0x10uLL);
    v261 = v398;
    v262 = *(const char **)v397;
    v263 = (const char *)espresso_get_status_string();
    v264 = v397;
    if (v261 < 0)
      v264 = v262;
    StringFormatter::StringFormatter((StringFormatter *)v322, "%s Error: %d, %s", v264, v71, v263);
    MEMORY[0x1DF0EC99C](v260, v322);
    __cxa_throw(v260, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v398 < 0)
    operator delete(*(void **)v397);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
LABEL_102:
  if (*(_BYTE *)(a1 + 872))
  {
    v72 = v359;
    v320 = (uint64_t)v359;
    v321 = v360;
    if (v360)
    {
      v73 = (unint64_t *)&v360->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer(a1 + 744, v72, *(_QWORD *)(a1 + 704), (uint64_t)v322);
    if (v321)
    {
      v75 = &v321->__shared_owners_;
      do
        v76 = __ldaxr((unint64_t *)v75);
      while (__stlxr(v76 - 1, (unint64_t *)v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
        std::__shared_weak_count::__release_weak(v321);
      }
    }
  }
  v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v78 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v318, &byte_1DEBD87CE);
  if (v78)
  {
    v240 = __cxa_allocate_exception(0x10uLL);
    v241 = v319;
    v242 = (void **)v318[0];
    v243 = (const char *)espresso_get_status_string();
    v244 = v318;
    if (v241 < 0)
      v244 = v242;
    StringFormatter::StringFormatter((StringFormatter *)v397, "%s Error: %d, %s", (const char *)v244, v78, v243);
    MEMORY[0x1DF0EC99C](v240, v397);
    __cxa_throw(v240, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v319 < 0)
    operator delete(v318[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v80.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v397 = 134217984;
    *(double *)&v397[4] = (double)((v80.__d_.__rep_ - v77.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v79, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso encoder inference time: %.3f s", v397, 0xCu);
  }
  v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso encoder inference time: %.3f s", v82, (double)((v81.__d_.__rep_ - v77.__d_.__rep_) / 1000000) / 1000.0);
  v83 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v316, "Unable to bind encoder output_encoder_output");
  if (v83)
  {
    v245 = __cxa_allocate_exception(0x10uLL);
    v246 = v317;
    v247 = (void **)v316[0];
    v248 = (const char *)espresso_get_status_string();
    v249 = v316;
    if (v246 < 0)
      v249 = v247;
    StringFormatter::StringFormatter((StringFormatter *)v315, "%s Error: %d, %s", (const char *)v249, v83, v248);
    MEMORY[0x1DF0EC99C](v245, v315);
    __cxa_throw(v245, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v317 < 0)
    operator delete(v316[0]);
  if ((*(char *)(a1 + 1103) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 1103))
      goto LABEL_129;
LABEL_125:
    v84 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v313, "Unable to bind encoder output_alignment");
    if (v84)
    {
      v265 = __cxa_allocate_exception(0x10uLL);
      v266 = v314;
      v267 = (void **)v313[0];
      v268 = (const char *)espresso_get_status_string();
      v269 = v313;
      if (v266 < 0)
        v269 = v267;
      StringFormatter::StringFormatter((StringFormatter *)v386, "%s Error: %d, %s", (const char *)v269, v84, v268);
      MEMORY[0x1DF0EC99C](v265, v386);
      __cxa_throw(v265, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v314 < 0)
      operator delete(v313[0]);
    EspressoUtils::convert_espbuffer_to_2d_vector(v386, (uint64_t)v315);
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v380);
    *(_OWORD *)v380 = *(_OWORD *)v386;
    v381 = v387;
    *(_QWORD *)&v387 = 0;
    memset(v386, 0, sizeof(v386));
    *(_QWORD *)&v290[0] = v386;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v290);
    free(v315[0]);
    goto LABEL_129;
  }
  if (*(_QWORD *)(a1 + 1088))
    goto LABEL_125;
LABEL_129:
  v85 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v311, "Unable to bind encoder output_decoder_length_");
  if (v85)
  {
    v250 = __cxa_allocate_exception(0x10uLL);
    v251 = v312;
    v252 = (void **)v311[0];
    v253 = (const char *)espresso_get_status_string();
    v254 = v311;
    if (v251 < 0)
      v254 = v252;
    StringFormatter::StringFormatter((StringFormatter *)v386, "%s Error: %d, %s", (const char *)v254, v85, v253);
    MEMORY[0x1DF0EC99C](v250, v386);
    __cxa_throw(v250, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v312 < 0)
    operator delete(v311[0]);
  v86 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v309, &byte_1DEBD87CE);
  if (v86)
  {
    v255 = __cxa_allocate_exception(0x10uLL);
    v256 = v310;
    v257 = (void **)v309[0];
    v258 = (const char *)espresso_get_status_string();
    v259 = v309;
    if (v256 < 0)
      v259 = v257;
    StringFormatter::StringFormatter((StringFormatter *)v386, "%s Error: %d, %s", (const char *)v259, v86, v258);
    MEMORY[0x1DF0EC99C](v255, v386);
    __cxa_throw(v255, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v310 < 0)
    operator delete(v309[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v87 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v386 = 0;
    _os_log_impl(&dword_1DE3F6000, v87, OS_LOG_TYPE_DEFAULT, "Parallel AM inference encoder end.", v386, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference encoder end.", v88);
  v89 = 0;
  v276 = (int)*(float *)v315[0];
  v273 = v400 - 1;
  v274 = (uint64_t *)(a1 + 1176);
  while (v89 < v276)
  {
    kdebug_trace();
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v386 = 0;
      _os_log_impl(&dword_1DE3F6000, v90, OS_LOG_TYPE_DEFAULT, "Parallel AM inference decoder begin.", v386, 2u);
    }
    Diagnostics::log(5, "Parallel AM inference decoder begin.", v91);
    v92 = (char *)operator new(0x88uLL);
    *((_QWORD *)v92 + 1) = 0;
    *((_QWORD *)v92 + 2) = 0;
    *(_QWORD *)v92 = &off_1EA932C88;
    *(_OWORD *)(v92 + 120) = 0u;
    *(_OWORD *)(v92 + 40) = 0u;
    *(_OWORD *)(v92 + 56) = 0u;
    *(_OWORD *)(v92 + 72) = 0u;
    *(_OWORD *)(v92 + 88) = 0u;
    *(_OWORD *)(v92 + 104) = 0u;
    *(_OWORD *)(v92 + 24) = 0u;
    *((_WORD *)v92 + 12) = 257;
    *(_QWORD *)(v92 + 126) = 0;
    *((_OWORD *)v92 + 2) = 0u;
    *((_OWORD *)v92 + 3) = 0u;
    *((_OWORD *)v92 + 4) = 0u;
    *((_OWORD *)v92 + 5) = 0u;
    *((_OWORD *)v92 + 6) = 0u;
    *((_OWORD *)v92 + 7) = 0u;
    v307 = (BOOL *)(v92 + 24);
    v308 = (std::__shared_weak_count *)v92;
    v93 = *v56;
    v94 = (std::__shared_weak_count *)v56[1];
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
      v92[132] = FastSpeechUtils::has_whisper(v93[1], v93[2]);
      do
        v97 = __ldaxr(v95);
      while (__stlxr(v97 - 1, v95));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    else
    {
      v92[132] = FastSpeechUtils::has_whisper(v93[1], v93[2]);
    }
    v98 = *(_DWORD *)(a1 + 1228);
    v99 = *(_DWORD *)(a1 + 1224) + v89 + *(_DWORD *)(a1 + 1232);
    if (v99 >= v273)
      v100 = v273;
    else
      v100 = *(_DWORD *)(a1 + 1224) + v89 + *(_DWORD *)(a1 + 1232);
    if (v99 >= v276 - 1)
      v101 = v276 - 1;
    else
      v101 = *(_DWORD *)(a1 + 1224) + v89 + *(_DWORD *)(a1 + 1232);
    v102 = a1 + 1128;
    if (*(char *)(a1 + 1151) < 0)
      v102 = *(_QWORD *)(a1 + 1128);
    v103 = operator new(8uLL);
    v304 = v103;
    *v103 = v102;
    v306 = v103 + 1;
    v305 = v103 + 1;
    v104 = v399;
    v105 = (int *)operator new(4uLL);
    v303.__begin_ = v105;
    *v105 = v104;
    v303.__end_cap_.__value_ = v105 + 1;
    v303.__end_ = v105 + 1;
    v106 = (int *)operator new(4uLL);
    v107 = (v89 - v98) & ~((v89 - v98) >> 31);
    v108 = v100 - v107 + 1;
    v302.__begin_ = v106;
    *v106 = v108;
    v302.__end_cap_.__value_ = v106 + 1;
    v302.__end_ = v106 + 1;
    v109 = (int *)operator new(4uLL);
    v301.__begin_ = v109;
    *v109 = 1;
    v301.__end_cap_.__value_ = v109 + 1;
    v301.__end_ = v109 + 1;
    v110 = (int *)operator new(4uLL);
    v300.__begin_ = v110;
    *v110 = 1;
    v300.__end_cap_.__value_ = v110 + 1;
    v300.__end_ = v110 + 1;
    v111 = (int *)operator new(4uLL);
    v299.__begin_ = v111;
    *v111 = 0;
    v299.__end_cap_.__value_ = v111 + 1;
    v299.__end_ = v111 + 1;
    v112 = (int *)operator new(4uLL);
    v298.__begin_ = v112;
    *v112 = 3;
    v298.__end_cap_.__value_ = v112 + 1;
    v298.__end_ = v112 + 1;
    if (*(char *)(a1 + 1199) < 0)
    {
      if (!*(_QWORD *)(a1 + 1184))
        goto LABEL_166;
LABEL_165:
      EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs(v274, v364, (uint64_t)&v304, &v303, &v302, &v301, &v300, &v299, &v298);
      goto LABEL_166;
    }
    if (*(_BYTE *)(a1 + 1199))
      goto LABEL_165;
LABEL_166:
    v113.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v271 = v298.__begin_;
    v114 = espresso_network_change_input_blob_shapes_seq_rank();
    std::string::basic_string[abi:ne180100]<0>(v296, "Unable to reshape decoder input");
    if (v114)
    {
      v195 = __cxa_allocate_exception(0x10uLL);
      v196 = v297;
      v197 = (void **)v296[0];
      v198 = (const char *)espresso_get_status_string();
      v199 = v296;
      if (v196 < 0)
        v199 = v197;
      StringFormatter::StringFormatter((StringFormatter *)v386, "%s Error: %d, %s", (const char *)v199, v114, v198);
      MEMORY[0x1DF0EC99C](v195, v386);
      __cxa_throw(v195, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v297 < 0)
      operator delete(v296[0]);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v115 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v116.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)v386 = 134217984;
      *(double *)&v386[4] = (double)((v116.__d_.__rep_ - v113.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_1DE3F6000, v115, OS_LOG_TYPE_DEFAULT, "Parallel AM Decoder Espresso reshaping time: %.3f s", v386, 0xCu);
    }
    v117.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(5, "Parallel AM Decoder Espresso reshaping time: %.3f s", v118, (double)((v117.__d_.__rep_ - v113.__d_.__rep_) / 1000000) / 1000.0, v271);
    v119 = espresso_plan_build();
    std::string::basic_string[abi:ne180100]<0>(v294, "Unable to build decoder plan");
    if (v119)
    {
      v190 = __cxa_allocate_exception(0x10uLL);
      v191 = v295;
      v192 = (void **)v294[0];
      v193 = (const char *)espresso_get_status_string();
      v194 = v294;
      if (v191 < 0)
        v194 = v192;
      StringFormatter::StringFormatter((StringFormatter *)v386, "%s Error: %d, %s", (const char *)v194, v119, v193);
      MEMORY[0x1DF0EC99C](v190, v386);
      __cxa_throw(v190, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v120 = v101;
    if (v295 < 0)
      operator delete(v294[0]);
    v121 = *(_QWORD *)v397;
    v122 = v399;
    v123 = operator new(0x18uLL);
    *v123 = 1;
    v123[1] = v108;
    v123[2] = v122;
    *(_OWORD *)v386 = 0u;
    v387 = 0u;
    v388 = 0u;
    v389 = 0u;
    v390 = 0u;
    v391 = 0u;
    v392 = 0u;
    v393 = 0u;
    v394 = 0u;
    v395 = 0u;
    v396 = 0;
    espresso_buffer_pack_tensor_shape();
    *(_QWORD *)v386 = v121 + 4 * v122 * v107;
    LODWORD(v396) = 65568;
    operator delete(v123);
    v124 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v292, "Unable to bind decoder decoder_input");
    if (v124)
    {
      v205 = __cxa_allocate_exception(0x10uLL);
      v206 = v293;
      v207 = (void **)v292[0];
      v208 = (const char *)espresso_get_status_string();
      v209 = v292;
      if (v206 < 0)
        v209 = v207;
      StringFormatter::StringFormatter((StringFormatter *)v290, "%s Error: %d, %s", (const char *)v209, v124, v208);
      MEMORY[0x1DF0EC99C](v205, v290);
      __cxa_throw(v205, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v293 < 0)
      operator delete(v292[0]);
    *(float *)v385 = (float)(v120 - v107 + 1);
    std::vector<float>::vector(v289, 1uLL, v385);
    v125 = operator new(8uLL);
    *v125 = 1;
    memset(v290, 0, sizeof(v290));
    v291 = 0;
    espresso_buffer_pack_tensor_shape();
    *(void **)&v290[0] = v289[0];
    LODWORD(v291) = 65568;
    operator delete(v125);
    v126 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v287, "Unable to build decoder decoder_length");
    if (v126)
    {
      v200 = __cxa_allocate_exception(0x10uLL);
      v201 = v288;
      v202 = (void **)v287[0];
      v203 = (const char *)espresso_get_status_string();
      v204 = v287;
      if (v201 < 0)
        v204 = v202;
      StringFormatter::StringFormatter((StringFormatter *)v385, "%s Error: %d, %s", (const char *)v204, v126, v203);
      MEMORY[0x1DF0EC99C](v200, v385);
      __cxa_throw(v200, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v288 < 0)
      operator delete(v287[0]);
    if (*(char *)(a1 + 1199) < 0)
    {
      v127 = *(_QWORD *)(a1 + 1184);
      if (!v127)
        goto LABEL_189;
      std::string::__init_copy_ctor_external(&v286, (const std::string::value_type *)*v274, v127);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 1199))
        goto LABEL_189;
      *(_OWORD *)&v286.__r_.__value_.__l.__data_ = *(_OWORD *)v274;
      v286.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1192);
    }
    EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v286, v364, *(_QWORD *)(a1 + 712), (uint64_t)v337);
    if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v286.__r_.__value_.__l.__data_);
LABEL_189:
    v128.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v129 = !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)v128.__d_.__rep_);
    if (v89 < 1)
      LOBYTE(v129) = 1;
    if (v129)
    {
      v131 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(v283, &byte_1DEBD87CE);
      if (v131)
      {
        v215 = __cxa_allocate_exception(0x10uLL);
        v216 = v284;
        v217 = (void **)v283[0];
        v218 = (const char *)espresso_get_status_string();
        v219 = v283;
        if (v216 < 0)
          v219 = v217;
        StringFormatter::StringFormatter((StringFormatter *)v385, "%s Error: %d, %s", (const char *)v219, v131, v218);
        MEMORY[0x1DF0EC99C](v215, v385);
        __cxa_throw(v215, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (v284 < 0)
        operator delete(v283[0]);
    }
    else
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN51EspressoParallelNeuralAMDecoupledStreamingInference9inferenceENSt3__110shared_ptrI15TacotronFeatureEENS0_8functionIFiNS1_I14WaveNetFeatureEEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_105;
      block[4] = a1;
      v130 = dispatch_block_create((dispatch_block_flags_t)0, block);
      dispatch_async(*(dispatch_queue_t *)(a1 + 1240), v130);
      dispatch_block_wait(v130, 0xFFFFFFFFFFFFFFFFLL);
      _Block_release(v130);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v132 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v133.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)v385 = 134217984;
      *(double *)&v385[4] = (double)((v133.__d_.__rep_ - v128.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_1DE3F6000, v132, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso decoder inference time: %.3f s", v385, 0xCu);
    }
    v134.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(5, "Parallel AM Espresso decoder inference time: %.3f s", v135, (double)((v134.__d_.__rep_ - v128.__d_.__rep_) / 1000000) / 1000.0);
    espresso_network_bind_buffer();
    EspressoUtils::convert_espbuffer_to_2d_vector(&v281, (uint64_t)v385);
    free(*(void **)v385);
    if (v89 >= v98)
      v136 = v98;
    else
      v136 = v89;
    v137 = *(_DWORD *)(a1 + 1224) + v136;
    v138 = v307;
    v140 = v307 + 8;
    v139 = (char *)*((_QWORD *)v307 + 1);
    if (v137 >= (int)(-1431655765 * ((unint64_t)(v282 - v281) >> 3)))
      v137 = -1431655765 * ((unint64_t)(v282 - v281) >> 3);
    v141 = v281 + 24 * v136;
    v142 = v281 + 24 * v137;
    v143 = v137 - (uint64_t)v136;
    v144 = v307 + 24;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v307 + 3) - (_QWORD)v139) >> 3) >= v143)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v307 + 2) - (_QWORD)v139) >> 3) >= v143)
      {
        v149 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(v141, v142, v139);
        v150 = (char *)*((_QWORD *)v138 + 2);
        if (v150 != v149)
        {
          v151 = (char *)*((_QWORD *)v138 + 2);
          do
          {
            v153 = (void *)*((_QWORD *)v151 - 3);
            v151 -= 24;
            v152 = v153;
            if (v153)
            {
              *((_QWORD *)v150 - 2) = v152;
              operator delete(v152);
            }
            v150 = v151;
          }
          while (v151 != v149);
        }
        *((_QWORD *)v138 + 2) = v149;
        goto LABEL_222;
      }
      v148 = v141 + 8 * ((uint64_t)(*((_QWORD *)v307 + 2) - (_QWORD)v139) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(v141, v148, v139);
      v147 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)(v138 + 24), v148, v142, *((_QWORD **)v138 + 2));
    }
    else
    {
      std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v307 + 1);
      if (v143 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v145 = 0x5555555555555556 * ((uint64_t)(*v144 - *v140) >> 3);
      if (v145 <= v143)
        v145 = v143;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v144 - *v140) >> 3) >= 0x555555555555555)
        v146 = 0xAAAAAAAAAAAAAAALL;
      else
        v146 = v145;
      std::vector<std::vector<float>>::__vallocate[abi:ne180100](v140, v146);
      v147 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)(v138 + 24), v141, v142, *((_QWORD **)v138 + 2));
    }
    *((_QWORD *)v138 + 2) = v147;
LABEL_222:
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v307 + 32), *((_QWORD *)v307 + 1), *((_QWORD *)v307 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v307 + 2) - *((_QWORD *)v307 + 1)) >> 3));
    v154 = espresso_plan_build_clean();
    std::string::basic_string[abi:ne180100]<0>(v279, &byte_1DEBD87CE);
    if (v154)
    {
      v210 = __cxa_allocate_exception(0x10uLL);
      v211 = v280;
      v212 = (void **)v279[0];
      v213 = (const char *)espresso_get_status_string();
      v214 = v279;
      if (v211 < 0)
        v214 = v212;
      StringFormatter::StringFormatter((StringFormatter *)v382, "%s Error: %d, %s", (const char *)v214, v154, v213);
      MEMORY[0x1DF0EC99C](v210, v382);
      __cxa_throw(v210, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v280 < 0)
      operator delete(v279[0]);
    v155 = *(uint64_t **)v380;
    v156 = *(uint64_t **)&v380[2];
    if (*(_QWORD *)v380 != *(_QWORD *)&v380[2])
    {
      if (*(_QWORD *)&v380[2] - *(_QWORD *)v380 == 24
        && (0xAAAAAAAAAAAAAAABLL * ((v282 - v281) >> 3) > 1
         || (*v275)[5] - (*v275)[4] == *(_QWORD *)(*(_QWORD *)v380 + 8) - **(_QWORD **)v380))
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v307 + 56), *(uint64_t *)v380, *(uint64_t *)&v380[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v380[2] - *(_QWORD *)v380) >> 3));
      }
      else
      {
        do
        {
          __dst = 0;
          *(_QWORD *)v382 = 0;
          v384 = 0;
          v157 = *v155;
          v158 = (v155[1] - *v155) >> 2;
          if (v158 >= v89)
            v159 = v89;
          else
            v159 = (v155[1] - *v155) >> 2;
          if (v158 >= v159 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)v307 + 2) - *((_QWORD *)v307 + 1)) >> 3))
            v158 = v159 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)v307 + 2) - *((_QWORD *)v307 + 1)) >> 3);
          v160 = (const void *)(v157 + 4 * v159);
          v161 = v157 + 4 * v158;
          v162 = v158 - v159;
          if (v158 == v159)
          {
            v163 = 0;
            v164 = v161 - (_QWORD)v160;
          }
          else
          {
            if (v162 >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            std::vector<int>::__vallocate[abi:ne180100](v382, v162);
            v163 = (char *)__dst;
            v164 = v161 - (_QWORD)v160;
            memmove(__dst, v160, v161 - (_QWORD)v160);
          }
          __dst = &v163[v164];
          v165 = v307;
          v166 = (uint64_t *)(v307 + 56);
          v167 = *((_QWORD *)v307 + 8);
          if (v167 >= *((_QWORD *)v307 + 9))
          {
            v168 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v166, (uint64_t)v382);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v166, (uint64_t)v382);
            v168 = v167 + 24;
          }
          *((_QWORD *)v165 + 8) = v168;
          if (*(_QWORD *)v382)
          {
            __dst = *(void **)v382;
            operator delete(*(void **)v382);
          }
          v155 += 3;
        }
        while (v155 != v156);
      }
    }
    v169 = v307;
    *v307 = v89 == 0;
    v89 += *(_DWORD *)(a1 + 1224);
    v169[1] = v89 >= v276;
    kdebug_trace();
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v56 = v275;
    v170 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v382 = 0;
      _os_log_impl(&dword_1DE3F6000, v170, OS_LOG_TYPE_DEFAULT, "Parallel AM inference decoder end.", v382, 2u);
    }
    Diagnostics::log(5, "Parallel AM inference decoder end.", v171);
    v277 = v307;
    v278 = v308;
    if (v308)
    {
      v172 = (unint64_t *)&v308->__shared_owners_;
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
    v174 = *(_QWORD *)(a3 + 24);
    if (!v174)
      std::__throw_bad_function_call[abi:ne180100]();
    v175 = (*(uint64_t (**)(uint64_t, BOOL **))(*(_QWORD *)v174 + 48))(v174, &v277);
    v176 = v278;
    if (v278)
    {
      v177 = (unint64_t *)&v278->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    *(_QWORD *)v382 = &v281;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
    if (v289[0])
    {
      v289[1] = v289[0];
      operator delete(v289[0]);
    }
    if (v298.__begin_)
    {
      v298.__end_ = v298.__begin_;
      operator delete(v298.__begin_);
    }
    if (v299.__begin_)
    {
      v299.__end_ = v299.__begin_;
      operator delete(v299.__begin_);
    }
    if (v300.__begin_)
    {
      v300.__end_ = v300.__begin_;
      operator delete(v300.__begin_);
    }
    if (v301.__begin_)
    {
      v301.__end_ = v301.__begin_;
      operator delete(v301.__begin_);
    }
    if (v302.__begin_)
    {
      v302.__end_ = v302.__begin_;
      operator delete(v302.__begin_);
    }
    if (v303.__begin_)
    {
      v303.__end_ = v303.__begin_;
      operator delete(v303.__begin_);
    }
    if (v304)
    {
      v305 = v304;
      operator delete(v304);
    }
    v179 = v308;
    if (!v308)
      goto LABEL_278;
    v180 = (unint64_t *)&v308->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
      if (v175)
        break;
    }
    else
    {
LABEL_278:
      if (v175)
        break;
    }
  }
  free(*(void **)v397);
  free(v315[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v182 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v386 = 0;
    _os_log_impl(&dword_1DE3F6000, v182, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end.", v386, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference end.", v183);
  if (v346[0])
  {
    v346[1] = v346[0];
    operator delete(v346[0]);
  }
  if (v351)
  {
    v352 = v351;
    operator delete(v351);
  }
  v184 = v360;
  if (v360)
  {
    v185 = (unint64_t *)&v360->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  if (v361)
  {
    v362 = v361;
    operator delete(v361);
  }
  if (v364[0])
  {
    v364[1] = v364[0];
    operator delete(v364[0]);
  }
  if (v365)
  {
    v366 = v365;
    operator delete(v365);
  }
  v187 = (std::__shared_weak_count *)v370;
  if (v370)
  {
    v188 = (unint64_t *)(v370 + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  if (v371.__begin_)
  {
    v371.__end_ = v371.__begin_;
    operator delete(v371.__begin_);
  }
  if (v372.__begin_)
  {
    v372.__end_ = v372.__begin_;
    operator delete(v372.__begin_);
  }
  if (v373.__begin_)
  {
    v373.__end_ = v373.__begin_;
    operator delete(v373.__begin_);
  }
  if (v374.__begin_)
  {
    v374.__end_ = v374.__begin_;
    operator delete(v374.__begin_);
  }
  if (v375.__begin_)
  {
    v375.__end_ = v375.__begin_;
    operator delete(v375.__begin_);
  }
  if (v376.__begin_)
  {
    v376.__end_ = v376.__begin_;
    operator delete(v376.__begin_);
  }
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  *(_QWORD *)buf = v380;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1DE8FFA90(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (SLOBYTE(STACK[0xC97]) < 0)
  {
    operator delete((void *)STACK[0xC80]);
    if ((v2 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x32F]) < 0)
        operator delete((void *)STACK[0x318]);
      v4 = (void *)STACK[0x938];
      if (STACK[0x938])
      {
        STACK[0x940] = (unint64_t)v4;
        operator delete(v4);
      }
      v5 = (void *)STACK[0xA18];
      if (STACK[0xA18])
      {
        STACK[0xA20] = (unint64_t)v5;
        operator delete(v5);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xA70]);
      v6 = (void *)STACK[0xA80];
      if (STACK[0xA80])
      {
        STACK[0xA88] = (unint64_t)v6;
        operator delete(v6);
      }
      v7 = (void *)STACK[0xA98];
      if (STACK[0xA98])
      {
        STACK[0xAA0] = (unint64_t)v7;
        operator delete(v7);
      }
      v8 = (void *)STACK[0xAB0];
      if (STACK[0xAB0])
      {
        STACK[0xAB8] = (unint64_t)v8;
        operator delete(v8);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xAD8]);
      v9 = (void *)STACK[0xAE8];
      if (STACK[0xAE8])
      {
        STACK[0xAF0] = (unint64_t)v9;
        operator delete(v9);
      }
      v10 = (void *)STACK[0xB00];
      if (STACK[0xB00])
      {
        STACK[0xB08] = (unint64_t)v10;
        operator delete(v10);
      }
      v11 = (void *)STACK[0xB18];
      if (STACK[0xB18])
      {
        STACK[0xB20] = (unint64_t)v11;
        operator delete(v11);
      }
      v12 = (void *)STACK[0xB30];
      if (STACK[0xB30])
      {
        STACK[0xB38] = (unint64_t)v12;
        operator delete(v12);
      }
      v13 = (void *)STACK[0xB48];
      if (STACK[0xB48])
      {
        STACK[0xB50] = (unint64_t)v13;
        operator delete(v13);
      }
      v14 = (void *)STACK[0xB60];
      if (STACK[0xB60])
      {
        STACK[0xB68] = (unint64_t)v14;
        operator delete(v14);
      }
      v15 = (void *)STACK[0xB78];
      if (STACK[0xB78])
      {
        STACK[0xB80] = (unint64_t)v15;
        operator delete(v15);
      }
      STACK[0x950] = (unint64_t)&STACK[0xB90];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x950]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE9002C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN51EspressoParallelNeuralAMDecoupledStreamingInference9inferenceENSt3__110shared_ptrI15TacotronFeatureEENS0_8functionIFiNS1_I14WaveNetFeatureEEEEE_block_invoke()
{
  int v0;
  void *exception;
  int v2;
  void **v3;
  const char *status_string;
  void **v5;
  void *__p[2];
  char v7;
  _BYTE v8[24];

  v0 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v2 = v7;
    v3 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v5 = __p;
    if (v2 < 0)
      v5 = v3;
    StringFormatter::StringFormatter((StringFormatter *)v8, "%s Error: %d, %s", (const char *)v5, v0, status_string);
    MEMORY[0x1DF0EC99C](exception, v8);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1DE9003AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1DE90056C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE900574(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void ParallelNeuralAcousticModule::~ParallelNeuralAcousticModule(ParallelNeuralAcousticModule *this)
{
  ParallelNeuralAcousticModule::~ParallelNeuralAcousticModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA9217E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 488);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::mutex::~mutex((std::mutex *)this + 6);
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

void ParallelNeuralAcousticModule::prepare(ParallelNeuralAcousticModule *this)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _OWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  char *v33;
  std::__shared_weak_count *v34;
  int v35;
  void *__p;
  std::__shared_weak_count *v37;
  __int128 v38;
  uint8_t buf[16];
  std::__shared_weak_count *v40;
  uint8_t *v41;

  if (*((_BYTE *)this + 288))
    return;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  v4 = (char *)operator new(0x208uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA9330E8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_WORD *)v4 + 12) = 257;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_OWORD *)v4 + 17) = 0u;
  *((_OWORD *)v4 + 18) = 0u;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_QWORD *)&v38 = v4 + 24;
  *((_QWORD *)&v38 + 1) = v4;
  std::vector<int>::resize((std::vector<int> *)(v4 + 56), 0xC8uLL);
  v35 = 0;
  std::vector<float>::vector(&__p, 5uLL, &v35);
  std::vector<std::vector<float>>::vector(buf, 0xC8uLL, (uint64_t)&__p);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v4 + 47);
  *(_OWORD *)(v4 + 376) = *(_OWORD *)buf;
  *((_QWORD *)v4 + 49) = v40;
  v40 = 0;
  memset(buf, 0, sizeof(buf));
  v41 = buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  if (__p)
  {
    v37 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  v4[26] = 1;
  v5 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E10;
  v5[1].std::__shared_count = 0u;
  v5->__shared_weak_owners_ = 0;
  *(_OWORD *)&v5[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[2].__shared_owners_ = 0u;
  v5[3].std::__shared_count = 0u;
  *(_OWORD *)&v5[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[4].__shared_owners_ = 0u;
  v5[5].std::__shared_count = 0u;
  *(_OWORD *)&v5[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[6].__shared_owners_ = 0u;
  v5[7].__vftable = 0;
  __p = &v5[1];
  v37 = v5;
  v7 = operator new(0x30uLL);
  *(_OWORD *)((char *)v7 + 8) = 0u;
  v7[2] = 0u;
  *(_QWORD *)v7 = &off_1EA932198;
  *((_QWORD *)v7 + 3) = v7 + 2;
  v8 = (uint64_t)v7 + 24;
  v33 = (char *)v7 + 24;
  v34 = (std::__shared_weak_count *)v7;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)v7 + 24, &v38);
  *(_QWORD *)buf = &v41;
  v10 = v9[5];
  if (v10)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&buf[8] = v5 + 1;
    v40 = v5;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v10 + 8, (__int128 *)&buf[8]);
    *(_QWORD *)buf = &off_1EA923288;
    v12 = v40;
    if (v40)
    {
      v13 = (unint64_t *)&v40->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 = v37;
    if (!v37)
      goto LABEL_27;
  }
  else
  {
    v15 = (_QWORD *)operator new();
    *v15 = &off_1EA923288;
    v15[1] = v5 + 1;
    v15[2] = v5;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v9[5];
    v9[5] = (uint64_t)v15;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = (unint64_t *)&v5->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_27:
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v31 = v33;
  v32 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(ParallelNeuralAcousticModule *, char **))(*(_QWORD *)this + 80))(this, &v31);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1DE900A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ParallelNeuralAcousticModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::chrono::steady_clock::time_point v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  float *v30;
  float *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  void *v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  NSObject *v47;
  const char *v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void (***v114)(_QWORD, uint64_t *, _BYTE *);
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  NSObject *v126;
  const char *v127;
  double v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  float v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  float v151;
  uint64_t v152;
  float v153;
  int v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  float v158;
  NSObject *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  int v170;
  void *exception;
  std::mutex *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  void *v176;
  TrackSubstitutions *v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  void *v182;
  std::string v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v190;
  std::__shared_weak_count *v191;
  __int128 v192;
  void *__p;
  _BYTE *v194;
  uint64_t v195;
  void *v196;
  _BYTE *v197;
  uint64_t v198;
  void *v199;
  float *v200;
  uint64_t v201;
  void *v202;
  _BYTE *v203;
  void *v204;
  _BYTE *v205;
  uint64_t v206;
  Observable *v207;
  Observable *v208;
  uint64_t v209;
  void *__dst;
  _BYTE *v211;
  uint64_t v212;
  uint8_t *v213;
  _BYTE v214[24];
  _BYTE *v215;
  uint8_t buf[16];
  uint64_t v217;
  _BYTE v218[32];
  void *v219[2];
  char v220;
  void *v221;
  char v222;
  void *v223;
  char v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  uint64_t *v229;
  _QWORD *v230[2];
  int v231;
  unsigned int v232;
  uint64_t v233;

  v233 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v172 = (std::mutex *)(a1 + 384);
  std::mutex::lock((std::mutex *)(a1 + 384));
  *(_BYTE *)(a1 + 288) = 1;
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  *(_QWORD *)&v192 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  *((_QWORD *)&v192 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)v8 + 16);
  v190 = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v191 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = v192;
  v13 = *(_QWORD *)(v192 + 8);
  if (v13 != *(_QWORD *)(v192 + 16) && *(_BYTE *)(v13 + 60))
    *(_QWORD *)(a1 + 480) = 0;
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v188 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = *(_QWORD *)(a1 + 464);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  v185 = v12;
  v186 = *((_QWORD *)&v192 + 1);
  v187 = 0;
  if (*((_QWORD *)&v192 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_DWORD *)(a1 + 344);
  ParallelNeuralAMInference::Config::Config((ParallelNeuralAMInference::Config *)v218, (const ParallelNeuralAMInference::Config *)(v15 + 8));
  v20 = (uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 2;
  LODWORD(__dst) = 1065353216;
  std::vector<float>::vector(&v182, v20, &__dst);
  __dst = 0;
  v211 = 0;
  v212 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__dst, v182, (uint64_t)v183.__r_.__value_.__l.__data_, (uint64_t)(v183.__r_.__value_.__r.__words[0] - (_QWORD)v182) >> 2);
  v207 = 0;
  v208 = 0;
  v209 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v207, v182, (uint64_t)v183.__r_.__value_.__l.__data_, (uint64_t)(v183.__r_.__value_.__r.__words[0] - (_QWORD)v182) >> 2);
  v204 = 0;
  v205 = 0;
  v206 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v204, v182, (uint64_t)v183.__r_.__value_.__l.__data_, (uint64_t)(v183.__r_.__value_.__r.__words[0] - (_QWORD)v182) >> 2);
  v21 = *(_BYTE **)(v12 + 104);
  v22 = *(_BYTE **)(v12 + 112);
  if (v21 != v22)
    memmove(__dst, v21, v22 - v21);
  v23 = *(_BYTE **)(v12 + 128);
  v24 = *(_BYTE **)(v12 + 136);
  if (v23 != v24)
    memmove(v207, v23, v24 - v23);
  v25 = *(_BYTE **)(v12 + 152);
  v26 = *(_BYTE **)(v12 + 160);
  if (v25 != v26)
    memmove(v204, v25, v26 - v25);
  if ((void **)(v12 + 104) != &__dst)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 + 104), (char *)__dst, (uint64_t)v211, (v211 - (_BYTE *)__dst) >> 2);
  if ((Observable **)(v12 + 128) != &v207)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 + 128), (char *)v207, (uint64_t)v208, (v208 - v207) >> 2);
  if ((void **)(v12 + 152) != &v204)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 + 152), (char *)v204, (uint64_t)v205, (v205 - (_BYTE *)v204) >> 2);
  v27 = (uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 2;
  LODWORD(v199) = 0;
  std::vector<float>::vector(&v202, v27, &v199);
  v199 = 0;
  v200 = 0;
  v201 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v199, v202, (uint64_t)v203, (v203 - (_BYTE *)v202) >> 2);
  v196 = 0;
  v197 = 0;
  v198 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v196, v202, (uint64_t)v203, (v203 - (_BYTE *)v202) >> 2);
  __p = 0;
  v194 = 0;
  v195 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v202, (uint64_t)v203, (v203 - (_BYTE *)v202) >> 2);
  v28 = *(_BYTE **)(v12 + 176);
  v29 = *(_BYTE **)(v12 + 184);
  if (v28 != v29)
  {
    memmove(v199, v28, v29 - v28);
    v30 = (float *)v199;
    v31 = v200;
    if (v199 != v200)
    {
      do
      {
        *v30 = *v30 / (float)v19;
        ++v30;
      }
      while (v30 != v31);
    }
  }
  v32 = *(_BYTE **)(v12 + 200);
  v33 = *(_BYTE **)(v12 + 208);
  if (v32 != v33)
    memmove(v196, v32, v33 - v32);
  v34 = *(_BYTE **)(v12 + 224);
  v35 = *(_BYTE **)(v12 + 232);
  if (v34 != v35)
    memmove(__p, v34, v35 - v34);
  if ((void **)(v12 + 176) != &v199)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 + 176), (char *)v199, (uint64_t)v200, ((char *)v200 - (_BYTE *)v199) >> 2);
  if ((void **)(v12 + 200) != &v196)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 + 200), (char *)v196, (uint64_t)v197, (v197 - (_BYTE *)v196) >> 2);
  if ((void **)(v12 + 224) != &__p)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 + 224), (char *)__p, (uint64_t)v194, (v194 - (_BYTE *)__p) >> 2);
  v36 = (uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 2;
  if (v218[1])
    LODWORD(v213) = 1065353216;
  else
    LODWORD(v213) = 0;
  std::vector<float>::vector(buf, v36, &v213);
  v37 = *(void **)(v12 + 248);
  if (v37)
  {
    *(_QWORD *)(v12 + 256) = v37;
    operator delete(v37);
    *(_QWORD *)(v12 + 248) = 0;
    *(_QWORD *)(v12 + 256) = 0;
    *(_QWORD *)(v12 + 264) = 0;
  }
  *(_OWORD *)(v12 + 248) = *(_OWORD *)buf;
  *(_QWORD *)(v12 + 264) = v217;
  v38 = (uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 2;
  if (v218[2])
    LODWORD(v213) = 1065353216;
  else
    LODWORD(v213) = 0;
  std::vector<float>::vector(buf, v38, &v213);
  v39 = *(void **)(v12 + 272);
  if (v39)
  {
    *(_QWORD *)(v12 + 280) = v39;
    operator delete(v39);
    *(_QWORD *)(v12 + 272) = 0;
    *(_QWORD *)(v12 + 280) = 0;
    *(_QWORD *)(v12 + 288) = 0;
  }
  *(_OWORD *)(v12 + 272) = *(_OWORD *)buf;
  *(_QWORD *)(v12 + 288) = v217;
  v40 = (uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 2;
  if (v218[3])
    LODWORD(v213) = 1065353216;
  else
    LODWORD(v213) = 0;
  std::vector<float>::vector(buf, v40, &v213);
  v41 = (_QWORD *)(v12 + 296);
  v42 = *(void **)(v12 + 296);
  if (v42)
  {
    *(_QWORD *)(v12 + 304) = v42;
    operator delete(v42);
    *v41 = 0;
    *(_QWORD *)(v12 + 304) = 0;
    *(_QWORD *)(v12 + 312) = 0;
  }
  *(_OWORD *)v41 = *(_OWORD *)buf;
  *(_QWORD *)(v12 + 312) = v217;
  v173 = a1;
  if (v230[1])
  {
    if (*(char *)(v12 + 399) < 0)
    {
      if (!*(_QWORD *)(v12 + 384))
        goto LABEL_69;
    }
    else if (!*(_BYTE *)(v12 + 399))
    {
      goto LABEL_69;
    }
    v43 = (_QWORD *)(v12 + 376);
    if (v230 == (_QWORD **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v229, (const void **)(v12 + 376)))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        v49 = (_QWORD *)(v12 + 376);
        if (*(char *)(v12 + 399) < 0)
          v49 = (_QWORD *)*v43;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v49;
        _os_log_impl(&dword_1DE3F6000, v47, OS_LOG_TYPE_ERROR, "Unable to find sentence style %s in sentence_prosody_bias", buf, 0xCu);
      }
      if (*(char *)(v12 + 399) < 0)
        v43 = (_QWORD *)*v43;
      Diagnostics::log(3, "Unable to find sentence style %s in sentence_prosody_bias", v48, v43);
    }
    else
    {
      v45 = *(_QWORD *)(v12 + 32);
      v44 = *(_QWORD *)(v12 + 40);
      v213 = (uint8_t *)(v12 + 376);
      v46 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v229, (const void **)(v12 + 376), (__int128 **)&v213);
      std::vector<std::vector<float>>::vector(buf, (v44 - v45) >> 2, (uint64_t)(v46 + 7));
      std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(v12 + 352));
      *(_OWORD *)(v12 + 352) = *(_OWORD *)buf;
      *(_QWORD *)(v12 + 368) = v217;
      v217 = 0;
      memset(buf, 0, sizeof(buf));
      v213 = buf;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
      a1 = v173;
    }
  }
LABEL_69:
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = (float *)v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (__dst)
  {
    v211 = __dst;
    operator delete(__dst);
  }
  if (v182)
  {
    v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
    operator delete(v182);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v230[0]);
  if (v228 < 0)
    operator delete(v227);
  if (v226 < 0)
    operator delete(v225);
  if (v224 < 0)
    operator delete(v223);
  if (v222 < 0)
    operator delete(v221);
  if (v220 < 0)
    operator delete(v219[0]);
  if ((v218[31] & 0x80000000) != 0)
    operator delete(*(void **)&v218[8]);
  if (v16)
  {
    v50 = (unint64_t *)&v16->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v52 = *(_QWORD *)(a1 + 464);
  v53 = v192;
  v184 = v192;
  if (*((_QWORD *)&v192 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  ParallelNeuralAMInference::Config::Config((ParallelNeuralAMInference::Config *)v218, (const ParallelNeuralAMInference::Config *)(v52 + 8));
  __dst = 0;
  v211 = 0;
  v212 = 0;
  v56 = v231;
  if (v231 < 1
    || (v58 = *(_QWORD *)(v53 + 32),
        v57 = *(_QWORD *)(v53 + 40),
        v231 >= (unint64_t)((v57 - v58) >> 2)))
  {
    std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((char **)&__dst, &v184);
  }
  else if (v57 != v58)
  {
    v59 = 0;
    v60 = 0;
    do
    {
      v61 = (char *)operator new(0x208uLL);
      *((_QWORD *)v61 + 1) = 0;
      *((_QWORD *)v61 + 2) = 0;
      *(_QWORD *)v61 = &off_1EA9330E8;
      *(_OWORD *)(v61 + 40) = 0u;
      *(_OWORD *)(v61 + 56) = 0u;
      *(_OWORD *)(v61 + 72) = 0u;
      *(_OWORD *)(v61 + 88) = 0u;
      *(_OWORD *)(v61 + 104) = 0u;
      *(_OWORD *)(v61 + 120) = 0u;
      *(_OWORD *)(v61 + 136) = 0u;
      *(_OWORD *)(v61 + 152) = 0u;
      *(_OWORD *)(v61 + 168) = 0u;
      *(_OWORD *)(v61 + 184) = 0u;
      *(_OWORD *)(v61 + 200) = 0u;
      *(_OWORD *)(v61 + 216) = 0u;
      *(_OWORD *)(v61 + 232) = 0u;
      *(_OWORD *)(v61 + 248) = 0u;
      *(_OWORD *)(v61 + 24) = 0u;
      *(_OWORD *)(v61 + 264) = 0u;
      *(_OWORD *)(v61 + 280) = 0u;
      *(_OWORD *)(v61 + 296) = 0u;
      *(_OWORD *)(v61 + 312) = 0u;
      *(_OWORD *)(v61 + 328) = 0u;
      *(_OWORD *)(v61 + 344) = 0u;
      *(_OWORD *)(v61 + 360) = 0u;
      *((_WORD *)v61 + 12) = 257;
      *((_OWORD *)v61 + 3) = 0u;
      *((_OWORD *)v61 + 4) = 0u;
      *((_OWORD *)v61 + 5) = 0u;
      *((_OWORD *)v61 + 6) = 0u;
      *((_OWORD *)v61 + 7) = 0u;
      *((_OWORD *)v61 + 8) = 0u;
      *((_OWORD *)v61 + 9) = 0u;
      *((_OWORD *)v61 + 10) = 0u;
      *((_OWORD *)v61 + 11) = 0u;
      *((_OWORD *)v61 + 12) = 0u;
      *((_OWORD *)v61 + 13) = 0u;
      *((_OWORD *)v61 + 14) = 0u;
      *((_OWORD *)v61 + 15) = 0u;
      *((_OWORD *)v61 + 16) = 0u;
      *((_OWORD *)v61 + 17) = 0u;
      *((_OWORD *)v61 + 18) = 0u;
      *((_OWORD *)v61 + 19) = 0u;
      *((_OWORD *)v61 + 20) = 0u;
      *((_OWORD *)v61 + 2) = 0u;
      *((_OWORD *)v61 + 21) = 0u;
      *((_OWORD *)v61 + 22) = 0u;
      *(_OWORD *)(v61 + 488) = 0u;
      *(_OWORD *)(v61 + 504) = 0u;
      *(_OWORD *)(v61 + 456) = 0u;
      *(_OWORD *)(v61 + 472) = 0u;
      *(_OWORD *)(v61 + 424) = 0u;
      *(_OWORD *)(v61 + 440) = 0u;
      *(_OWORD *)(v61 + 392) = 0u;
      *(_OWORD *)(v61 + 408) = 0u;
      *(_OWORD *)(v61 + 376) = 0u;
      v182 = v61 + 24;
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
      v62 = *(_QWORD *)(v53 + 8);
      v63 = -991146299 * ((unint64_t)(*(_QWORD *)(v53 + 16) - v62) >> 3);
      if (v56 + v60 < v63)
        v63 = v56 + v60;
      std::vector<TacotronPhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TacotronPhoneFeature*>,std::__wrap_iter<TacotronPhoneFeature*>>((uint64_t)(v61 + 32), (std::string *)(v62 + 104 * v59), (std::string *)(v62 + 104 * v63), v63 - v59);
      v64 = *(_QWORD *)(v53 + 32);
      v65 = (unint64_t)(*(_QWORD *)(v53 + 40) - v64) >> 2;
      if (v231 + v60 < (int)v65)
        LODWORD(v65) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 56, (char *)(v64 + 4 * v59), v64 + 4 * (int)v65, (int)v65 - v59);
      v66 = *(_QWORD *)(v53 + 56);
      v67 = *(_QWORD *)(v53 + 64);
      if (v66 != v67)
      {
        v68 = -1431655765 * ((unint64_t)(v67 - v66) >> 3);
        if (v231 + v60 < v68)
          v68 = v231 + v60;
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v61 + 80), v66 + 24 * v59, v66 + 24 * v68, v68 - v59);
      }
      v69 = *(_QWORD *)(v53 + 80);
      v70 = *(_QWORD *)(v53 + 88);
      if (v69 != v70)
      {
        v71 = -1431655765 * ((unint64_t)(v70 - v69) >> 3);
        if (v231 + v60 < v71)
          v71 = v231 + v60;
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v61 + 104), v69 + 24 * v59, v69 + 24 * v71, v71 - v59);
      }
      v72 = *(_QWORD *)(v53 + 104);
      v73 = (unint64_t)(*(_QWORD *)(v53 + 112) - v72) >> 2;
      if (v231 + v60 < (int)v73)
        LODWORD(v73) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 128, (char *)(v72 + 4 * v59), v72 + 4 * (int)v73, (int)v73 - v59);
      v74 = *(_QWORD *)(v53 + 128);
      v75 = (unint64_t)(*(_QWORD *)(v53 + 136) - v74) >> 2;
      if (v231 + v60 < (int)v75)
        LODWORD(v75) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 152, (char *)(v74 + 4 * v59), v74 + 4 * (int)v75, (int)v75 - v59);
      v76 = *(_QWORD *)(v53 + 152);
      v77 = (unint64_t)(*(_QWORD *)(v53 + 160) - v76) >> 2;
      if (v231 + v60 < (int)v77)
        LODWORD(v77) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 176, (char *)(v76 + 4 * v59), v76 + 4 * (int)v77, (int)v77 - v59);
      v78 = *(_QWORD *)(v53 + 176);
      v79 = (unint64_t)(*(_QWORD *)(v53 + 184) - v78) >> 2;
      if (v231 + v60 < (int)v79)
        LODWORD(v79) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 200, (char *)(v78 + 4 * v59), v78 + 4 * (int)v79, (int)v79 - v59);
      v80 = *(_QWORD *)(v53 + 200);
      v81 = (unint64_t)(*(_QWORD *)(v53 + 208) - v80) >> 2;
      if (v231 + v60 < (int)v81)
        LODWORD(v81) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 224, (char *)(v80 + 4 * v59), v80 + 4 * (int)v81, (int)v81 - v59);
      v82 = *(_QWORD *)(v53 + 224);
      v83 = (unint64_t)(*(_QWORD *)(v53 + 232) - v82) >> 2;
      if (v231 + v60 < (int)v83)
        LODWORD(v83) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 248, (char *)(v82 + 4 * v59), v82 + 4 * (int)v83, (int)v83 - v59);
      v84 = *(_QWORD *)(v53 + 248);
      v85 = (unint64_t)(*(_QWORD *)(v53 + 256) - v84) >> 2;
      if (v231 + v60 < (int)v85)
        LODWORD(v85) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 272, (char *)(v84 + 4 * v59), v84 + 4 * (int)v85, (int)v85 - v59);
      v86 = *(_QWORD *)(v53 + 272);
      v87 = (unint64_t)(*(_QWORD *)(v53 + 280) - v86) >> 2;
      if (v231 + v60 < (int)v87)
        LODWORD(v87) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 296, (char *)(v86 + 4 * v59), v86 + 4 * (int)v87, (int)v87 - v59);
      v88 = *(_QWORD *)(v53 + 296);
      v89 = (unint64_t)(*(_QWORD *)(v53 + 304) - v88) >> 2;
      if (v231 + v60 < (int)v89)
        LODWORD(v89) = v231 + v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 320, (char *)(v88 + 4 * v59), v88 + 4 * (int)v89, (int)v89 - v59);
      v90 = *(_QWORD *)(v53 + 320);
      v91 = *(_QWORD *)(v53 + 328);
      if (v90 != v91)
      {
        v92 = (unint64_t)(v91 - v90) >> 2;
        if (v231 + v60 < (int)v92)
          LODWORD(v92) = v231 + v60;
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v61 + 344, (char *)(v90 + 4 * v59), v90 + 4 * (int)v92, (int)v92 - v59);
      }
      *((_DWORD *)v61 + 92) = *(_DWORD *)(v53 + 344);
      v93 = *(_QWORD *)(v53 + 352);
      v94 = *(_QWORD *)(v53 + 360);
      if (v93 != v94)
      {
        v95 = -1431655765 * ((unint64_t)(v94 - v93) >> 3);
        if (v231 + v60 < v95)
          v95 = v231 + v60;
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v61 + 376), v93 + 24 * v59, v93 + 24 * v95, v95 - v59);
      }
      std::string::operator=((std::string *)(v61 + 400), (const std::string *)(v53 + 376));
      v96 = (_QWORD *)v184;
      v97 = *(_QWORD *)(v184 + 424);
      v98 = *(_QWORD *)(v184 + 432);
      if (v97 != v98)
      {
        v99 = (unint64_t)(v98 - v97) >> 2;
        if (v231 + v60 < (int)v99)
          LODWORD(v99) = v231 + v60;
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)v182 + 424, (char *)(v97 + 4 * v59), v97 + 4 * (int)v99, (int)v99 - v59);
      }
      v100 = v96[56];
      v101 = v96[57];
      if (v100 != v101)
      {
        v102 = -1431655765 * ((unint64_t)(v101 - v100) >> 3);
        if (v231 + v60 < v102)
          v102 = v231 + v60;
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)v182 + 448, v100 + 24 * v59, v100 + 24 * v102, v102 - v59);
      }
      v103 = v96[59];
      v104 = v96[60];
      if (v103 != v104)
      {
        v105 = -1431655765 * ((unint64_t)(v104 - v103) >> 3);
        if (v231 + v60 < v105)
          v105 = v231 + v60;
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)v182 + 472, v103 + 24 * v59, v103 + 24 * v105, v105 - v59);
      }
      std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((char **)&__dst, (__int128 *)&v182);
      v106 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[0];
      if (v183.__r_.__value_.__r.__words[0])
      {
        v107 = (unint64_t *)(v183.__r_.__value_.__r.__words[0] + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v56 = v231;
      v60 += v231;
      v59 = v60;
      v53 = v184;
    }
    while (v60 < (unint64_t)((uint64_t)(*(_QWORD *)(v184 + 40) - *(_QWORD *)(v184 + 32)) >> 2));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v230[0]);
  if (v228 < 0)
    operator delete(v227);
  if (v226 < 0)
    operator delete(v225);
  if (v224 < 0)
    operator delete(v223);
  if (v222 < 0)
    operator delete(v221);
  if (v220 < 0)
    operator delete(v219[0]);
  if ((v218[31] & 0x80000000) != 0)
    operator delete(*(void **)&v218[8]);
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  LODWORD(v202) = 0;
  if (v211 != __dst)
  {
    do
    {
      v112 = *(_QWORD *)(v173 + 448);
      std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(v112 + 64));
      std::vector<TTSSynthesizer::Marker>::__clear[abi:ne180100]((uint64_t *)(v112 + 40));
      *(_DWORD *)(v112 + 112) = 0;
      *(_DWORD *)(v112 + 120) = 0;
      *(_DWORD *)(v112 + 132) = 0;
      *(_DWORD *)(v112 + 136) = 0;
      *(_DWORD *)(v112 + 128) = 1065353216;
      *(_WORD *)(v112 + 124) = 0;
      *(_QWORD *)(v112 + 156) = 0;
      *(_QWORD *)(v112 + 148) = 0;
      *(_DWORD *)(v112 + 164) = 0;
      ParallelNeuralAMInference::Config::Config((ParallelNeuralAMInference::Config *)v218, (const ParallelNeuralAMInference::Config *)(*(_QWORD *)(v173 + 464) + 8));
      v113 = v232;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v230[0]);
      if (v228 < 0)
        operator delete(v227);
      if (v226 < 0)
        operator delete(v225);
      if (v224 < 0)
        operator delete(v223);
      if (v222 < 0)
        operator delete(v221);
      if (v220 < 0)
        operator delete(v219[0]);
      if ((v218[31] & 0x80000000) != 0)
        operator delete(*(void **)&v218[8]);
      if ((int)v113 >= 1
        && v113 < (uint64_t)(*(_QWORD *)(*((_QWORD *)__dst + 2 * (int)v202) + 40)
                          - *(_QWORD *)(*((_QWORD *)__dst + 2 * (int)v202) + 32)) >> 2)
      {
        SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v207, *(_QWORD *)(v173 + 168));
        StringFormatter::StringFormatter((StringFormatter *)v218, "Input exceeds maximum input phone length %d", v113);
        LODWORD(v204) = *(_DWORD *)&v218[16];
        *(_DWORD *)((char *)&v204 + 3) = *(_DWORD *)&v218[19];
        LODWORD(v182) = 201;
        if ((v218[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)v218, *(std::string::size_type *)&v218[8]);
          v170 = (int)v182;
        }
        else
        {
          *(_OWORD *)&v183.__r_.__value_.__l.__data_ = *(_OWORD *)v218;
          LODWORD(v183.__r_.__value_.__r.__words[2]) = (_DWORD)v204;
          *(_DWORD *)((char *)&v183.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v204 + 3);
          *((_BYTE *)&v183.__r_.__value_.__s + 23) = v218[23];
          v170 = 201;
        }
        *(_DWORD *)v218 = v170;
        *(std::string *)&v218[8] = v183;
        if (v207)
          Observable::emit((uint64_t **)v207, "tts.errors", v218);
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&v182, "Inputs too long! Exceeds maximum input phone length %d", v113);
        MEMORY[0x1DF0EC99C](exception, &v182);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v114 = *(void (****)(_QWORD, uint64_t *, _BYTE *))(v173 + 464);
      v180 = *((_QWORD *)__dst + 2 * (int)v202);
      v115 = (std::__shared_weak_count *)*((_QWORD *)__dst + 2 * (int)v202 + 1);
      v181 = v115;
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      v215 = 0;
      v118 = operator new(0x48uLL);
      *v118 = &off_1EA931B38;
      v118[1] = v173;
      v118[2] = &v192;
      v118[3] = &rep;
      v118[4] = &v187;
      v118[5] = &v188;
      v118[6] = &v202;
      v118[7] = &__dst;
      v118[8] = &v190;
      v215 = v118;
      (**v114)(v114, &v180, v214);
      v119 = v215;
      if (v215 == v214)
      {
        v119 = v214;
        v120 = 4;
      }
      else
      {
        if (!v215)
          goto LABEL_207;
        v120 = 5;
      }
      (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_207:
      v121 = v181;
      if (v181)
      {
        v122 = (unint64_t *)&v181->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = (int)v202 + 1;
      LODWORD(v202) = (_DWORD)v202 + 1;
    }
    while (v124 < (v211 - (_BYTE *)__dst) >> 4);
  }
  v125 = (unsigned __int128)((std::chrono::steady_clock::now().__d_.__rep_ - v14.__d_.__rep_)
                           * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v126 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v128 = (double)(uint64_t)((v125 >> 18) + ((unint64_t)v125 >> 63)) / 1000.0;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v218 = 134218496;
    *(_QWORD *)&v218[4] = v187 + v188;
    *(_WORD *)&v218[12] = 2048;
    *(double *)&v218[14] = (double)(uint64_t)((v125 >> 18) + ((unint64_t)v125 >> 63)) / 1000.0;
    *(_WORD *)&v218[22] = 2048;
    *(double *)&v218[24] = (double)(unint64_t)(v187 + v188) / v128;
    _os_log_impl(&dword_1DE3F6000, v126, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end, total frames = %lu, Run Time : %.3f s, %.3f frames/s", v218, 0x20u);
  }
  Diagnostics::log(5, "Parallel AM inference end, total frames = %lu, Run Time : %.3f s, %.3f frames/s", v127, v187 + v188, *(_QWORD *)&v128, (double)(unint64_t)(v187 + v188) / v128);
  kdebug_trace();
  if (!*(_BYTE *)(v173 + 160))
  {
    v135 = *(_DWORD *)(v173 + 348);
    v136 = *(_DWORD *)(v173 + 344);
    v137 = *(_QWORD *)(v173 + 480);
    v138 = v192;
    v179 = v192;
    if (*((_QWORD *)&v192 + 1))
    {
      v139 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
    }
    SharedObjectPool::get_if<TrackSubstitutions>(&v177, *(_QWORD *)(v173 + 168));
    v141 = (float)v135 / (float)v136;
    TacotronAlignment::accumulate_word_markers((uint64_t **)&v182, v138, v137, &v177, v141);
    v142 = v178;
    if (v178)
    {
      v143 = (unint64_t *)&v178->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
    if (*((_QWORD *)&v179 + 1))
    {
      v146 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v148 = *(_QWORD *)(v192 + 8);
    v149 = *(_QWORD *)(v192 + 16);
    if (v148 == v149)
    {
      v150 = 0;
      v151 = 0.0;
    }
    else
    {
      v150 = 0;
      v151 = 0.0;
      v152 = *(_QWORD *)(v192 + 8);
      do
      {
        v150 += *(_DWORD *)(v152 + 56);
        v151 = v151 + *(float *)(v152 + 64);
        v152 += 104;
      }
      while (v152 != v149);
    }
    v153 = v151 / (float)(unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v149 - v148) >> 3));
    v154 = v188;
    *(_QWORD *)(v173 + 480) = (unint64_t)(float)((float)((float)(unint64_t)(v188 * *(int *)(v173 + 348))
                                                              / v153)
                                                      + (float)*(unint64_t *)(v173 + 480));
    v155 = *(_QWORD **)v182;
    v156 = (_QWORD *)*((_QWORD *)v182 + 1);
    if (*(_QWORD **)v182 != v156)
    {
      v157 = v155[3];
      v158 = (float)(*(_DWORD *)(v173 + 344) * v154) / (float)v150;
      do
      {
        v155[3] = (unint64_t)(float)((float)(unint64_t)v137
                                          + (float)((float)(unint64_t)(v155[3] - v157) * v158));
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v159 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          v161 = v155[1];
          v162 = v155[2] + v161;
          v163 = (void *)v155[3];
          *(_DWORD *)v218 = 134218752;
          *(_QWORD *)&v218[4] = v161;
          *(_WORD *)&v218[12] = 2048;
          *(_QWORD *)&v218[14] = v162;
          *(_WORD *)&v218[22] = 2048;
          *(double *)&v218[24] = (float)((float)(unint64_t)v163 / v141);
          LOWORD(v219[0]) = 2048;
          *(void **)((char *)v219 + 2) = v163;
          _os_log_impl(&dword_1DE3F6000, v159, OS_LOG_TYPE_INFO, "Parallel Neural Acoustic Module word marker [%zu, %zu], time: %.0f, sample_idx: %ld", v218, 0x2Au);
        }
        Diagnostics::log(6, "Parallel Neural Acoustic Module word marker [%zu, %zu], time: %.0f, sample_idx: %ld", v160, v155[1], v155[2] + v155[1], (float)((float)(unint64_t)v155[3] / v141), v155[3]);
        v155 += 7;
      }
      while (v155 != v156);
      if (*(_QWORD *)v182 != *((_QWORD *)v182 + 1))
      {
        v174 = 5;
        v175 = 0;
        v176 = v182;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v173 + 88))(v173, &v174);
        SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(v218, *(_QWORD *)(v173 + 168));
        if (*(_QWORD *)v218)
          Observable::emit(*(uint64_t ***)v218, (char *)TTSSynthesizerEvent::MarkersGenerated, v182);
        v164 = *(std::__shared_weak_count **)&v218[8];
        if (*(_QWORD *)&v218[8])
        {
          v165 = (unint64_t *)(*(_QWORD *)&v218[8] + 8);
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
      }
    }
    v167 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[0];
    if (v183.__r_.__value_.__r.__words[0])
    {
      v168 = (unint64_t *)(v183.__r_.__value_.__r.__words[0] + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
  }
  *(_QWORD *)v218 = &__dst;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v218);
  v129 = v191;
  if (v191)
  {
    v130 = (unint64_t *)&v191->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  std::mutex::unlock(v172);
}

void sub_1DE90216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  STACK[0x200] = (unint64_t)&a61;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

ParallelNeuralAMInference::Config *ParallelNeuralAMInference::Config::Config(ParallelNeuralAMInference::Config *this, const ParallelNeuralAMInference::Config *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)this + 5) = v7;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v8;
  }
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v9;
  }
  std::map<std::string,std::vector<float>>::map[abi:ne180100]((_QWORD *)this + 20, (const void ***)a2 + 20);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  return this;
}

void sub_1DE9025B8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (v1[127] < 0)
    operator delete(*v6);
  if (v1[103] < 0)
    operator delete(*v5);
  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ParallelNeuralAMInference::Config::~Config(ParallelNeuralAMInference::Config *this)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 21));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE90275C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get_if<TrackSubstitutions>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9027F8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1EA931B38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1EA931B38;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::chrono::steady_clock::time_point v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  double v26;
  double v27;
  float v28;
  NSObject *v29;
  const char *v30;
  _BOOL4 v31;
  unint64_t v32;
  int v33;
  double v34;
  NSObject *v35;
  const char *v36;
  unint64_t v37;
  int v38;
  NeuralThermalFallbackConnection *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  uint64_t v76[3];
  _QWORD v77[2];
  _QWORD *v78;
  std::__shared_weak_count *v79;
  _BYTE buf[18];
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "Parallel AM inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "Parallel AM inference cancelled.", v6);
LABEL_8:
    v8 = 1;
    if (!v3)
      return v8;
    goto LABEL_9;
  }
  if (*(_BYTE *)(**(_QWORD **)(a1 + 16) + 2))
    goto LABEL_8;
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = **(_QWORD **)(a1 + 24);
  if (*(_BYTE *)(v4 + 289))
  {
    v14 = *(_QWORD *)(v4 + 448);
    v78 = v2;
    v79 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *(_QWORD **)(a1 + 16);
    v18 = (std::__shared_weak_count *)v17[1];
    v77[0] = *v17;
    v77[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    **(_QWORD **)(a1 + 32) = TacotronAlignment::trim_silences(v14, (uint64_t *)&v78, (uint64_t)v77, *(_QWORD *)(v4 + 480));
    if (v18)
    {
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v23 = v79;
    if (v79)
    {
      v24 = (unint64_t *)&v79->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = (double)((v12.__d_.__rep_ - v13) / 1000000) / 1000.0;
  v27 = (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[2] - v2[1]) >> 3)) / v26 / (1000.0 / (double)*(int *)(v4 + 344));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v28 = v27;
  v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v31 = **(_QWORD **)(a1 + 40) == 0;
    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[2] - v2[1]) >> 3);
    v33 = **(_DWORD **)(a1 + 48);
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v31;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v32;
    v81 = 2048;
    v82 = (double)((v12.__d_.__rep_ - v13) / 1000000) / 1000.0;
    v83 = 2048;
    v84 = (double)v32 / v26;
    v34 = v28;
    v85 = 2048;
    v86 = v28;
    v87 = 1024;
    v88 = v33;
    _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_DEFAULT, "Parallel AM inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f, inference_idx = %d", buf, 0x36u);
  }
  else
  {
    v34 = v28;
  }
  Diagnostics::log(5, "Parallel AM inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f, inference_idx = %d", v30, **(_QWORD **)(a1 + 40) == 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[2] - v2[1]) >> 3), *(_QWORD *)&v26, (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[2] - v2[1]) >> 3)) / v26, *(_QWORD *)&v34, **(unsigned int **)(a1 + 48));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[5] - v2[4]) >> 3);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v37;
    _os_log_impl(&dword_1DE3F6000, v35, OS_LOG_TYPE_DEFAULT, "Parallel AM inference generates %lu number of mel", buf, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM inference generates %lu number of mel", v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[5] - v2[4]) >> 3));
  v38 = *(_DWORD *)(v4 + 364);
  v39 = *(NeuralThermalFallbackConnection **)(v4 + 272);
  if (v39)
  {
    if ((NeuralThermalFallbackConnection::should_fallback(v39) & 1) == 0)
      goto LABEL_47;
  }
  else if (!NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2))
  {
    goto LABEL_47;
  }
  if (*(float *)(v4 + 372) >= v28)
    v38 = -1431655765 * ((v2[2] - v2[1]) >> 3);
  else
    v38 = *(_DWORD *)(v4 + 368);
LABEL_47:
  if (MGGetSInt32Answer() == 6 && *(_BYTE *)(v4 + 376))
    v38 = -1431655765 * ((v2[2] - v2[1]) >> 3);
  if (v2[7] != v2[8])
  {
    TacotronAlignment::append_alignments(*(_QWORD *)(v4 + 448), v2 + 7);
    v40 = *(_QWORD *)(v4 + 448);
    v41 = *(_QWORD *)(**(_QWORD **)(a1 + 56) + 16 * **(int **)(a1 + 48));
    memset(v76, 0, sizeof(v76));
    std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(v76, *(_QWORD *)(v41 + 8), *(_QWORD *)(v41 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 3));
    TacotronAlignment::generate_speech_rate(buf, v40, v76, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[2] - v2[1]) >> 3), -1431655765 * ((uint64_t)(v2[2] - v2[1]) >> 3), (uint64_t)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 56) + 16 * **(int **)(a1 + 48)) + 40)- *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 56) + 16 * **(int **)(a1 + 48)) + 32)) >> 2);
    *(_QWORD *)&v75 = v76;
    std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v2 + 10), v2[11], *(char **)buf, *(char **)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(v4 + 168));
  v42 = *(uint64_t ***)buf;
  if (*(_QWORD *)buf)
  {
    Observable::emit(*(uint64_t ***)buf, "tts.feature.neural.mel", v2 + 1);
    Observable::emit(v42, "tts.feature.neural.alignment", v2 + 7);
  }
  v43 = v2[1];
  v44 = v2[2];
  if (v44 == v43)
  {
    v69 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
  }
  else
  {
    v45 = 0;
    v46 = v38;
    do
    {
      v47 = (char *)operator new(0x88uLL);
      *((_QWORD *)v47 + 1) = 0;
      *((_QWORD *)v47 + 2) = 0;
      *(_QWORD *)v47 = &off_1EA932C88;
      *(_OWORD *)(v47 + 40) = 0u;
      *(_OWORD *)(v47 + 56) = 0u;
      *(_OWORD *)(v47 + 72) = 0u;
      *(_OWORD *)(v47 + 88) = 0u;
      *(_OWORD *)(v47 + 104) = 0u;
      *(_OWORD *)(v47 + 120) = 0u;
      *(_OWORD *)(v47 + 24) = 0u;
      *((_WORD *)v47 + 12) = 257;
      *((_OWORD *)v47 + 2) = 0u;
      v48 = (uint64_t)(v47 + 32);
      *((_OWORD *)v47 + 3) = 0u;
      *((_OWORD *)v47 + 4) = 0u;
      *((_OWORD *)v47 + 5) = 0u;
      *((_OWORD *)v47 + 6) = 0u;
      *((_OWORD *)v47 + 7) = 0u;
      v49 = v45 + v46;
      *(_QWORD *)(v47 + 126) = 0;
      v47[132] = *((_BYTE *)v2 + 108);
      v50 = v43 + 24 * v45;
      *(_QWORD *)&v75 = v47 + 24;
      *((_QWORD *)&v75 + 1) = v47;
      if (0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3) <= v45 + v46)
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v48, v50, v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - v50) >> 3));
        v55 = v2[10];
        v54 = v2[11];
        if (v55 != v54)
          std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v47 + 104, (char *)(v55 + 4 * v45), v54, (v54 - (v55 + 4 * v45)) >> 2);
        v57 = v2[4];
        v56 = v2[5];
        if (v57 != v56)
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v47 + 56), v57 + 24 * v45, v56, 0xAAAAAAAAAAAAAAABLL * ((v56 - (v57 + 24 * v45)) >> 3));
        v53 = *((_BYTE *)v2 + 1);
      }
      else
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v48, v50, v50 + 24 * (int)v46, v46);
        v51 = v2[10];
        if (v51 != v2[11])
          std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v47 + 104, (char *)(v51 + 4 * v45), v51 + 4 * v45 + 4 * v46, v46);
        v52 = v2[4];
        if (v52 != v2[5])
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v47 + 56), v52 + 24 * v45, v52 + 24 * v45 + 24 * (int)v46, v46);
        v53 = 0;
      }
      v47[25] = v53;
      *((_DWORD *)v47 + 32) = **(_DWORD **)(a1 + 40) + v45;
      if (v45)
        v58 = 0;
      else
        v58 = *(_BYTE *)v2 != 0;
      v47[24] = v58;
      v47[133] = *(_BYTE *)(v4 + 289);
      v59 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v59->__shared_owners_ = 0u;
      v60 = (unint64_t *)&v59->__shared_owners_;
      v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
      *(_OWORD *)&v59[1].__shared_owners_ = 0u;
      v59[1].__vftable = (std::__shared_weak_count_vtbl *)&v59[1].__shared_owners_;
      Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)&v59[1], &v75);
      Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)&v59[1], *(uint64_t **)(a1 + 64));
      v45 += v46;
      v73 = v59 + 1;
      v74 = v59;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      (*(void (**)(uint64_t, std::__shared_weak_count **))(*(_QWORD *)v4 + 72))(v4, &v73);
      v62 = v74;
      if (v74)
      {
        v63 = (unint64_t *)&v74->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      do
        v65 = __ldaxr(v60);
      while (__stlxr(v65 - 1, v60));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v43 = v2[1];
      v44 = v2[2];
      v69 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
    }
    while (v69 > v49);
  }
  **(_QWORD **)(a1 + 40) += v69;
  (*(std::chrono::steady_clock::time_point **)(a1 + 24))->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v70 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v71 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v8 = 0;
  if (v3)
  {
LABEL_9:
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v8;
}

void sub_1DE903214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
    operator delete(__p);
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target_type()
{
}

_QWORD *std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE9034A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Agglomerate::set<std::shared_ptr<WaveNetFeature>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA923248;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<WaveNetFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923248;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<WaveNetFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923248;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 80);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  const std::string::value_type **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 24), *v11, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)(a4 + v7 + 24) = v12;
      }
      v13 = *(_OWORD *)(a2 + v7 + 48);
      v14 = *(_OWORD *)(a2 + v7 + 64);
      *(_QWORD *)(a4 + v7 + 80) = 0;
      v15 = (_QWORD *)(a4 + v7 + 80);
      *((_OWORD *)v15 - 2) = v13;
      *((_OWORD *)v15 - 1) = v14;
      v15[1] = 0;
      v15[2] = 0;
      std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v15, *(_QWORD *)(a2 + v7 + 80), *(_QWORD *)(a2 + v7 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + v7 + 88) - *(_QWORD *)(a2 + v7 + 80)) >> 3));
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DE903864(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  while (v2 != v1)
  {
    v2 -= 104;
    std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<MarkerRecord>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE90391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<MarkerRecord>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v15 = a4;
  v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_QWORD *)v4 = *((_QWORD *)v6 - 1);
      v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v10 = v16;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        v10 = v4;
      }
      v11 = *(__int128 *)((char *)v6 + 24);
      *(_WORD *)(v4 + 48) = *((_WORD *)v6 + 20);
      *(_OWORD *)(v4 + 32) = v11;
      v4 = v10 + 56;
      v16 = v10 + 56;
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while (v7 + 56 != a3);
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v4;
}

void sub_1DE903A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 25) < 0)
        operator delete(*(void **)(v3 - 48));
      v3 -= 56;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::map<std::string,std::vector<float>>::map[abi:ne180100](_QWORD *a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  uint64_t **v7;
  char *v8;
  uint64_t *v9;
  __int128 v10;
  const void **v11;
  const void ***v12;
  BOOL v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  const void **v18;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, v3, &v18, &v17, v5 + 4);
      if (!*v6)
      {
        v7 = (uint64_t **)v6;
        v8 = (char *)operator new(0x50uLL);
        v9 = (uint64_t *)v8;
        v15[0] = v8;
        v15[1] = v3;
        v16 = 0;
        if (*((char *)v5 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v8 + 32), (const std::string::value_type *)v5[4], (std::string::size_type)v5[5]);
        }
        else
        {
          v10 = *((_OWORD *)v5 + 2);
          *((_QWORD *)v8 + 6) = v5[6];
          *((_OWORD *)v8 + 2) = v10;
        }
        v9[7] = 0;
        v9[8] = 0;
        v9[9] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9 + 7, v5[7], (uint64_t)v5[8], ((_BYTE *)v5[8] - (_BYTE *)v5[7]) >> 2);
        v16 = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v18, v7, v9);
        v15[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
      }
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v13 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v13);
      }
      v5 = (const void **)v12;
    }
    while (v12 != v4);
  }
  return a1;
}

void sub_1DE903D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::vector<TacotronPhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TacotronPhoneFeature*>,std::__wrap_iter<TacotronPhoneFeature*>>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<TacotronPhoneFeature>::__vdeallocate((void **)a1);
    if (a4 > 0x276276276276276)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(__str, a3, v9);
  for (i = *(_QWORD *)(a1 + 8); (std::string *)i != v14; std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](i))
    i -= 104;
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1DE903F20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE903F28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  __int128 v6;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      v6 = *(_OWORD *)&v5[2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[2].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v6;
      if (this != v5)
        std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)&this[3].__r_.__value_.__l.__size_, v5[3].__r_.__value_.__l.__size_, v5[3].__r_.__value_.__r.__words[2], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[3].__r_.__value_.__r.__words[2] - v5[3].__r_.__value_.__l.__size_) >> 3));
      this = (std::string *)((char *)this + 104);
      v5 = (std::string *)((char *)v5 + 104);
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<TacotronPhoneFeature>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 104;
        std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<MarkerRecord>::__vdeallocate(a1);
    if (a4 > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    std::vector<MarkerRecord>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(v8, v6, a3, a1[1]);
LABEL_14:
    a1[1] = v12;
    return;
  }
  v13 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v13 - v9) >> 3) < a4)
  {
    v14 = a2 + 8 * ((v13 - v9) >> 3);
    if (v13 != v9)
    {
      do
      {
        *(_QWORD *)v9 = *(_QWORD *)v6;
        std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
        v15 = *(_WORD *)(v6 + 48);
        *(_OWORD *)(v9 + 32) = *(_OWORD *)(v6 + 32);
        *(_WORD *)(v9 + 48) = v15;
        v6 += 56;
        v9 += 56;
      }
      while (v6 != v14);
      v9 = a1[1];
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(v8, v14, a3, v9);
    goto LABEL_14;
  }
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)v9 = *(_QWORD *)v6;
      std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
      v16 = *(_WORD *)(v6 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v6 + 32);
      *(_WORD *)(v9 + 48) = v16;
      v9 += 56;
      v6 += 56;
    }
    while (v6 != a3);
    v13 = a1[1];
  }
  while (v13 != v9)
  {
    if (*(char *)(v13 - 25) < 0)
      operator delete(*(void **)(v13 - 48));
    v13 -= 56;
  }
  a1[1] = v9;
}

void sub_1DE904358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<MarkerRecord>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<MarkerRecord>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__shared_ptr_emplace<TacotronFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9330E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TacotronFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9330E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TacotronFeature>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;

  v15 = (void **)(a1 + 496);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)(a1 + 472);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 424);
  if (v3)
  {
    *(_QWORD *)(a1 + 432) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  v15 = (void **)(a1 + 376);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(_QWORD *)(a1 + 352) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 320);
  if (v5)
  {
    *(_QWORD *)(a1 + 328) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 296);
  if (v6)
  {
    *(_QWORD *)(a1 + 304) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(_QWORD *)(a1 + 280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(_QWORD *)(a1 + 256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(_QWORD *)(a1 + 232) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 200);
  if (v10)
  {
    *(_QWORD *)(a1 + 208) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 176);
  if (v11)
  {
    *(_QWORD *)(a1 + 184) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 152);
  if (v12)
  {
    *(_QWORD *)(a1 + 160) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 128);
  if (v13)
  {
    *(_QWORD *)(a1 + 136) = v13;
    operator delete(v13);
  }
  v15 = (void **)(a1 + 104);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v14 = *(void **)(a1 + 56);
  if (v14)
  {
    *(_QWORD *)(a1 + 64) = v14;
    operator delete(v14);
  }
  v15 = (void **)(a1 + 32);
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v15);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1DE90460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<TacotronFeature>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA9232C8;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<TacotronFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9232C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<TacotronFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9232C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *PersistentModule::PersistentModule(_QWORD *a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11[2];

  v11[0] = a3;
  v11[1] = (uint64_t)a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Module::Module((uint64_t)a1, a2, v11);
  if (a4)
  {
    v8 = (unint64_t *)&a4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *a1 = &off_1EA91E968;
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = 0;
  MEMORY[0x1DF0ECA80](a1 + 34, &byte_1DEBD87CE);
  return a1;
}

void sub_1DE9048C4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[295] < 0)
    operator delete(*v2);
  Module::~Module((Module *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInferenceModel>::__on_zero_shared()
{
  int v0;
  int v1;
  int v2;
  void *exception;
  int v4;
  void *v5;
  int v6;
  void **v7;
  int v8;
  const char *status_string;
  void **v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  void **v15;
  int v16;
  const char *v17;
  void **v18;
  void *v19;
  int v20;
  void **v21;
  const char *v22;
  void **v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *__p[2];
  char v29;
  _BYTE v30[24];

  v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy encoder plan");
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v4 = v0;
    v5 = exception;
    v6 = v29;
    v7 = (void **)__p[0];
    v8 = v4;
    status_string = (const char *)espresso_get_status_string();
    v10 = __p;
    if (v6 < 0)
      v10 = v7;
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v10, v8, status_string);
    MEMORY[0x1DF0EC99C](v5, v30);
    __cxa_throw(v5, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v29 < 0)
    operator delete(__p[0]);
  v1 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(v26, "Unable to destroy decoder plan");
  if (v1)
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    v12 = v1;
    v13 = v11;
    v14 = v27;
    v15 = (void **)v26[0];
    v16 = v12;
    v17 = (const char *)espresso_get_status_string();
    v18 = v26;
    if (v14 < 0)
      v18 = v15;
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v18, v16, v17);
    MEMORY[0x1DF0EC99C](v13, v30);
    __cxa_throw(v13, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v27 < 0)
    operator delete(v26[0]);
  v2 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v24, "Unable to destroy context");
  if (v2)
  {
    v19 = __cxa_allocate_exception(0x10uLL);
    v20 = v25;
    v21 = (void **)v24[0];
    v22 = (const char *)espresso_get_status_string();
    v23 = v24;
    if (v20 < 0)
      v23 = v21;
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v23, v2, v22);
    MEMORY[0x1DF0EC99C](v19, v30);
    __cxa_throw(v19, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_1DE904B54(void *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0)
LABEL_6:
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInferenceModel>::__on_zero_shared()
{
  int v0;
  int v1;
  void *exception;
  int v3;
  void **v4;
  const char *status_string;
  void **v6;
  void *v7;
  int v8;
  void **v9;
  const char *v10;
  void **v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  _BYTE v16[24];

  v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy plan");
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = v15;
    v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v6 = __p;
    if (v3 < 0)
      v6 = v4;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v6, v0, status_string);
    MEMORY[0x1DF0EC99C](exception, v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v15 < 0)
    operator delete(__p[0]);
  v1 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v12, "Unable to destroy context");
  if (v1)
  {
    v7 = __cxa_allocate_exception(0x10uLL);
    v8 = v13;
    v9 = (void **)v12[0];
    v10 = (const char *)espresso_get_status_string();
    v11 = v12;
    if (v8 < 0)
      v11 = v9;
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v11, v1, v10);
    MEMORY[0x1DF0EC99C](v7, v16);
    __cxa_throw(v7, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1DE904D54(void *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0)
LABEL_6:
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void ParallelNeuralAMPersistentModule::~ParallelNeuralAMPersistentModule(void **this)
{
  *this = &off_1EA922000;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA922000;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t ParallelNeuralAMInference::Config::Config(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  _QWORD *size;
  std::string::size_type v22;
  void *v24[2];
  char v25;
  std::string __p;

  v4 = (void **)(a1 + 8);
  *(_DWORD *)a1 = 0;
  v5 = (void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "input_feature_scale");
  std::string::basic_string[abi:ne180100]<0>(v5, "input_feature_bias");
  v6 = (void **)(a1 + 56);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "input_feature_variance_scale_switch");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 104), &byte_1DEBD87CE);
  *(_BYTE *)(a1 + 128) = 0;
  v7 = (void **)(a1 + 136);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "input_sentence_prosody");
  *(_QWORD *)(a1 + 184) = -4294967056;
  *(_QWORD *)(a1 + 168) = 0;
  v8 = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_inference_feature_scale");
  *(_BYTE *)a1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "use_input_duration_variance_scale");
  *(_BYTE *)(a1 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)(a1 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "use_input_pitch_variance_scale");
  *(_BYTE *)(a1 + 2) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)(a1 + 2));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "use_input_energy_variance_scale");
  *(_BYTE *)(a1 + 3) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)(a1 + 3));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_BYTE *)a1)
  {
    v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_encoder_input_feature_scale_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &__p);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v4);
    *(std::string *)v4 = __p;
    v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_encoder_input_feature_bias_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v10, &__p);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v5);
    *(std::string *)v5 = __p;
    v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_encoder_input_feature_variance_scale_switch_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, &__p);
    if (*(char *)(a1 + 79) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "graph_encoder_input_sentence_prosody_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)v24, &__p);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 152) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  if (*(char *)(a1 + 159) < 0)
    v12 = *(_QWORD *)(a1 + 144);
  else
    v12 = *(unsigned __int8 *)(a1 + 159);
  *(_BYTE *)(a1 + 128) = v12 != 0;
  if (v12 && *(_BYTE *)a2 == 1)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(v13 + 8);
    v14 = v13 + 8;
    v15 = v16;
    if (!v16)
      goto LABEL_33;
    v17 = v14;
    do
    {
      v18 = std::string::compare((const std::string *)(v15 + 32), "sentence_prosody_bias");
      v19 = (uint64_t *)(v15 + 8);
      if (v18 >= 0)
      {
        v19 = (uint64_t *)v15;
        v17 = v15;
      }
      v15 = *v19;
    }
    while (*v19);
    if (v17 == v14 || std::string::compare((const std::string *)(v17 + 32), "sentence_prosody_bias") >= 1)
LABEL_33:
      v17 = v14;
    if (*(_QWORD *)(a2 + 8) + 8 != v17)
    {
      v20 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "sentence_prosody_bias");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::vector<float>>,std::map<std::string,std::vector<float>>,0>(&__p, v20);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 168));
      size = (_QWORD *)__p.__r_.__value_.__l.__size_;
      *(_QWORD *)(a1 + 160) = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 168) = size;
      v22 = __p.__r_.__value_.__r.__words[2];
      *(_QWORD *)(a1 + 176) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      if (v22)
      {
        size[2] = v8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        size = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 160) = v8;
      }
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(size);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_input_length");
  *(_DWORD *)(a1 + 184) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)(a1 + 184));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_maximum_position_encoding");
  *(_DWORD *)(a1 + 188) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)(a1 + 188));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1DE905268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void **v25;
  void **v26;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v24 + 168));
  if (*(char *)(v24 + 159) < 0)
    operator delete(*v26);
  if (*(char *)(v24 + 127) < 0)
    operator delete(*a9);
  if (*(char *)(v24 + 103) < 0)
    operator delete(*a10);
  if (*(char *)(v24 + 79) < 0)
    operator delete(*a11);
  if (*(char *)(v24 + 55) < 0)
    operator delete(*v25);
  if (*(char *)(v24 + 31) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::vector<float>>,std::map<std::string,std::vector<float>>,0>(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD **v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  const void **v10;
  char *v11;
  uint64_t **v12;
  std::string *v13;
  uint64_t *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  nlohmann::detail::exception *exception;
  unint64_t v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  std::string v29;
  std::string __p;
  std::string v31;
  uint64_t v32;
  const void **v33;

  a1[1] = 0;
  v3 = (_QWORD **)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v22 = *a2;
    if (v22 > 9)
      v23 = "number";
    else
      v23 = off_1EA94C758[v22];
    std::string::basic_string[abi:ne180100]<0>(&v31, v23);
    v24 = std::string::insert(&v31, 0, "type must be object, but is ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v29, exception);
  }
  v27 = 0;
  v28 = 0;
  v26 = (uint64_t *)&v27;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v8 = (_QWORD *)*v5;
  v6 = v5 + 1;
  v7 = v8;
  if (v8 == v6)
  {
    v18 = 0;
  }
  else
  {
    v9 = (uint64_t *)&v27;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v31, (unsigned __int8 *)v7 + 56);
      if (*((char *)v7 + 55) < 0)
        std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v7[4], v7[5]);
      else
        v29 = *(std::string *)(v7 + 4);
      __p = v31;
      v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v26, v9, &v33, &v32, (const void **)&v29.__r_.__value_.__l.__data_);
      v11 = (char *)*v10;
      if (!*v10)
      {
        v12 = (uint64_t **)v10;
        v11 = (char *)operator new(0x50uLL);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
        v31.__r_.__value_.__s.__data_[16] = 0;
        v13 = (std::string *)(v11 + 32);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          *((_QWORD *)v11 + 6) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
        }
        *(std::string *)(v11 + 56) = __p;
        memset(&__p, 0, sizeof(__p));
        v31.__r_.__value_.__s.__data_[16] = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v26, (uint64_t)v33, v12, (uint64_t *)v11);
        v31.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v31);
      }
      v14 = (uint64_t *)*((_QWORD *)v11 + 1);
      if (v14)
      {
        do
        {
          v9 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)*((_QWORD *)v11 + 2);
          v15 = *v9 == (_QWORD)v11;
          v11 = (char *)v9;
        }
        while (!v15);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v16 = (_QWORD *)v7[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v7[2];
          v15 = *v17 == (_QWORD)v7;
          v7 = v17;
        }
        while (!v15);
      }
      v7 = v17;
    }
    while (v17 != v6);
    v18 = *v3;
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v18);
  v19 = v27;
  *a1 = v26;
  a1[1] = v19;
  v20 = v28;
  a1[2] = v28;
  if (v20)
  {
    v19[2] = v3;
    v26 = (uint64_t *)&v27;
    v27 = 0;
    v28 = 0;
    v19 = 0;
  }
  else
  {
    *a1 = v3;
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v19);
}

void sub_1DE905670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD **v27;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::pair<std::string const,std::vector<float>>::~pair((uint64_t)&a13);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a11);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v27);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(_QWORD *a1, unsigned __int8 *a2)
{
  int v4;
  _QWORD *v5;
  std::string::size_type *v6;
  char *v7;
  uint64_t *v8;
  double result;
  uint64_t v10;
  nlohmann::detail::exception *exception;
  unint64_t v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*a2 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v12 = *a2;
    if (v12 > 9)
      v13 = "number";
    else
      v13 = off_1EA94C758[v12];
    std::string::basic_string[abi:ne180100]<0>(&v16, v13);
    v14 = std::string::insert(&v16, 0, "type must be array, but is ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20 = v14->__r_.__value_.__r.__words[2];
    v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v19, exception);
  }
  v24 = 0;
  v23 = 0uLL;
  std::vector<float>::reserve((void **)&v23, (uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 4);
  v19 = (unint64_t)a2;
  v20 = 0;
  v21 = 0;
  v22 = 0x8000000000000000;
  v4 = *a2;
  if (!*a2)
  {
    v22 = 1;
LABEL_9:
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = (unint64_t)a2;
    v16.__r_.__value_.__r.__words[2] = 0;
    v17 = 0;
    v18 = 1;
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    v6 = (std::string::size_type *)*((_QWORD *)a2 + 1);
    v20 = *v6;
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = (unint64_t)a2;
    v16.__r_.__value_.__r.__words[2] = 0;
    v17 = 0;
    v18 = 0x8000000000000000;
    v16.__r_.__value_.__r.__words[2] = v6[1];
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    v22 = 0;
    goto LABEL_9;
  }
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  *((_QWORD *)&v19 + 1) = *v5;
  v17 = 0;
  v18 = 0x8000000000000000;
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = (unint64_t)(v5 + 1);
LABEL_10:
  v7 = (char *)*((_QWORD *)&v23 + 1);
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v19, (unsigned __int8 **)&v16))
  {
    v8 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v19);
    v25 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v8, (float *)&v25);
    v7 = std::vector<float>::insert((uint64_t)&v23, v7, &v25) + 4;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v19);
  }
  result = *(double *)&v23;
  v10 = v24;
  *(_OWORD *)a1 = v23;
  a1[2] = v10;
  return result;
}

void sub_1DE905908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 64);
  if (v25)
  {
    *(_QWORD *)(v23 - 56) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::vector<float>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(uint64_t *result, float *a2)
{
  uint64_t *v2;
  float v3;
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  v2 = result;
  switch(*(_BYTE *)result)
  {
    case 4:
      v3 = 0.0;
      if (*((_BYTE *)result + 8))
        v3 = 1.0;
      break;
    case 5:
      v3 = (float)result[1];
      break;
    case 6:
      v3 = (float)(unint64_t)result[1];
      break;
    case 7:
      v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = *(unsigned __int8 *)v2;
      if (v5 > 9)
        v6 = "number";
      else
        v6 = off_1EA94C758[v5];
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v10, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1DE905AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

char *std::vector<float>::insert(uint64_t a1, char *__src, _DWORD *a3)
{
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 2;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[4 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v22);
        v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        __p = v23;
        v27 = v20;
        v29 = &v23[4 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 4 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_DWORD *)v20 = *a3;
    v28 = v20 + 4;
    v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v9 = __src + 4;
    v10 = v6 - 4;
    v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    *(_DWORD *)v4 = *a3;
  }
  return v4;
}

void sub_1DE905D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoParallelNeuralAMInferenceBase::EspressoParallelNeuralAMInferenceBase(uint64_t a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v14;
  std::string v15;

  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *(_QWORD *)a1 = &unk_1EA920F18;
  ParallelNeuralAMInference::Config::Config(a1 + 8, (uint64_t)a2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v9 = (void **)(a1 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v15);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
  v15.__r_.__value_.__s.__data_[0] = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (a4)
  {
    v10 = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *(_QWORD *)a1 = &unk_1EA922358;
  return a1;
}

void sub_1DE905E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  ParallelNeuralAMInference::Config *v17;
  void **v18;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 223) < 0)
    operator delete(*v18);
  ParallelNeuralAMInference::Config::~Config(v17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::get_persistent_module_from_pool<ParallelNeuralAMPersistentModule>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 *v17;

  v4 = *(std::__shared_weak_count **)(a3 + 24);
  if (v4 && (v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v8 = v7;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9
      && (v10 = v9 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v9 + 8), (unsigned __int8 *)a2)))
    {
      v17 = a2;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a2, &v17);
      v12 = *((_QWORD *)v11 + 6);
      *a1 = *((_QWORD *)v11 + 5);
      a1[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1DE905FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMInference::Config::~Config(void **this)
{
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)this);
}

void EspressoParallelNeuralAMInferenceBase::~EspressoParallelNeuralAMInferenceBase(void **this)
{
  *this = &unk_1EA920F18;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(this + 1));
}

uint64_t EspressoParallelNeuralAMDecoupledInference::Config::Config(uint64_t a1, char *a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *__p[2];
  char v25;
  std::string v26;

  v23 = (void **)(ParallelNeuralAMInference::Config::Config(a1, (uint64_t)a2) + 192);
  std::string::basic_string[abi:ne180100]<0>(v23, "input");
  v22 = (void **)(a1 + 216);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 216), "input_length");
  v20 = (void **)(a1 + 240);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 240), &byte_1DEBD87CE);
  v21 = (void **)(a1 + 264);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 264), &byte_1DEBD87CE);
  v4 = (void **)(a1 + 288);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 288), &byte_1DEBD87CE);
  v5 = (void **)(a1 + 312);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 312), "Identity_1");
  v6 = (void **)(a1 + 336);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 336), "Identity_2");
  v7 = (void **)(a1 + 360);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 360), "Identity");
  v8 = (void **)(a1 + 384);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 384), "input_decoder_input");
  v9 = (void **)(a1 + 408);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 408), "input_decoder_length");
  v10 = (void **)(a1 + 432);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 432), &byte_1DEBD87CE);
  v11 = (void **)(a1 + 456);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 456), "Identity_3");
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_input_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &v26);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v23);
  *(std::string *)v23 = v26;
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_input_length_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &v26);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_input_speaker_id_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 280) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_input_language_embedding_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 263) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 256) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_input_style_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 311) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 304) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_output_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &v26);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 328) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_output_alignment_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 359) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 352) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_output_decoder_length_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &v26);
  if (*(char *)(a1 + 383) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 376) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_decoder_input_decoder_input_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &v26);
  if (*(char *)(a1 + 407) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 400) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_decoder_input_decoder_length_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v17, &v26);
  if (*(char *)(a1 + 431) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 424) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_decoder_input_speaker_id_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 455) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 448) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_decoder_output_mel_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &v26);
  if (*(char *)(a1 + 479) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 472) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  return a1;
}

void sub_1DE906574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;

  if (a18 < 0)
    operator delete(__p);
  if (v18[479] < 0)
    operator delete(*v21);
  if (v18[455] < 0)
    operator delete(*v20);
  if (v18[431] < 0)
    operator delete(*v19);
  if (v18[407] < 0)
    operator delete(*v26);
  if (v18[383] < 0)
    operator delete(*v25);
  if (v18[359] < 0)
    operator delete(*v24);
  if (v18[335] < 0)
    operator delete(*v23);
  if (v18[311] < 0)
    operator delete(*v22);
  if (v18[287] < 0)
    operator delete(*a10);
  if (v18[263] < 0)
    operator delete(*a9);
  if (v18[239] < 0)
    operator delete(*a11);
  if (v18[215] < 0)
    operator delete(*a12);
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)v18);
  _Unwind_Resume(a1);
}

uint64_t EspressoParallelNeuralAMDecoupledInference::EspressoParallelNeuralAMDecoupledInference(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  v29 = v6;
  v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  EspressoParallelNeuralAMInferenceBase::EspressoParallelNeuralAMInferenceBase(a1, a2, v6, v7);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1EA9224C0;
  EspressoParallelNeuralAMDecoupledInference::Config::Config(a1 + 224, a2);
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  PersistentModuleFactory::get_persistent_module_from_pool<ParallelNeuralAMPersistentModule>(&v27, (__int128 *)(a1 + 200), v12);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *(_QWORD *)(v27 + 296);
  v19 = *(std::__shared_weak_count **)(v27 + 304);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)(a1 + 736) = v18 + 48;
    *(_QWORD *)(a1 + 720) = v18 + 32;
    *(_QWORD *)(a1 + 728) = v18 + 40;
    *(_QWORD *)(a1 + 704) = v18;
    *(_QWORD *)(a1 + 712) = v18 + 16;
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 736) = v18 + 48;
    *(_QWORD *)(a1 + 720) = v18 + 32;
    *(_QWORD *)(a1 + 728) = v18 + 40;
    *(_QWORD *)(a1 + 704) = v18;
    *(_QWORD *)(a1 + 712) = v18 + 16;
  }
  v23 = v28;
  if (v28)
  {
    v24 = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return a1;
}

void sub_1DE9068F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  void **v10;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  EspressoParallelNeuralAMDecoupledInference::Config::~Config(v10);
  EspressoParallelNeuralAMInferenceBase::~EspressoParallelNeuralAMInferenceBase(v9);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMDecoupledInference::Config::~Config(void **this)
{
  if (*((char *)this + 479) < 0)
    operator delete(this[57]);
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)this);
}

void EspressoParallelNeuralAMDecoupledInference::~EspressoParallelNeuralAMDecoupledInference(void **this)
{
  *this = &off_1EA9224C0;
  EspressoParallelNeuralAMDecoupledInference::Config::~Config(this + 28);
  *this = &unk_1EA920F18;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(this + 1));
}

uint64_t ___ZN51EspressoParallelNeuralAMDecoupledStreamingInferenceC2ERKN8nlohmann10basic_jsonINSt3__13mapENS2_6vectorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbxydS8_NS0_14adl_serializerENS4_IhNS8_IhEEEEEENS2_10shared_ptrI16SharedObjectPoolEE_block_invoke()
{
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0);
  return pthread_prefer_alternate_cluster_self();
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  int v5;
  unsigned __int8 *v7;
  nlohmann::detail::exception *exception;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  uint64_t v18;
  unint64_t v19;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = *a1;
    if (v9 > 9)
      v10 = "number";
    else
      v10 = off_1EA94C758[v9];
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17 = v11->__r_.__value_.__r.__words[2];
    v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v16, exception);
  }
  *(_QWORD *)&v16 = a1;
  v17 = 0;
  v18 = 0;
  v19 = 0x8000000000000000;
  *((_QWORD *)&v16 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a1 + 1), a2);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v13.__r_.__value_.__r.__words[2] = 0;
  v14 = 0;
  v15 = 0x8000000000000000;
  v5 = *a1;
  if (v5 == 2)
  {
    v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  }
  else if (v5 == 1)
  {
    v13.__r_.__value_.__l.__size_ = *((_QWORD *)a1 + 1) + 8;
  }
  else
  {
    v15 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v16, (unsigned __int8 **)&v13))
  {
    return *(double *)a3;
  }
  v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v16);
  v13.__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v7, (double *)&v13);
  return *(double *)&v13.__r_.__value_.__l.__data_;
}

void sub_1DE906BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::string::compare((const std::string *)(v3 + 32), __s);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), __s) >= 1)
    return v2;
  return v5;
}

uint64_t std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>(uint64_t *a1, char *a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0xC0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1EA9337B0;
  result = TacotronAlignment::TacotronAlignment((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1DE906D18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledStreamingInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledStreamingInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledStreamingInference>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 24) = &off_1EA922588;
  v2 = (void **)(a1 + 24);
  if (NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)a1))
    dispatch_release(*(dispatch_object_t *)(a1 + 1264));
  EspressoParallelNeuralAMDecoupledInference::Config::~Config((void **)(a1 + 768));
  EspressoParallelNeuralAMDecoupledInference::~EspressoParallelNeuralAMDecoupledInference(v2);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInference>::__on_zero_shared(uint64_t a1)
{
  EspressoParallelNeuralAMDecoupledInference::~EspressoParallelNeuralAMDecoupledInference((void **)(a1 + 24));
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1EA9220E0;
  EspressoParallelNeuralAMInference::Config::~Config((void **)(a1 + 248));
  *(_QWORD *)(a1 + 24) = &unk_1EA920F18;
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(a1 + 32));
}

void std::__shared_ptr_emplace<TacotronAlignment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9337B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TacotronAlignment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9337B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TacotronAlignment>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 88);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 64);
  std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100](&v3);
}

unsigned __int8 *nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(unsigned __int8 *result, double *a2)
{
  unsigned __int8 *v2;
  int v3;
  double v4;
  nlohmann::detail::exception *exception;
  unint64_t v6;
  char *v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  __int128 v11;
  std::string::size_type v12;

  v2 = result;
  v3 = *result;
  switch(v3)
  {
    case 5:
      v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      v4 = *((double *)result + 1);
      break;
    case 6:
      v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v6 = *v2;
      if (v6 > 9)
        v7 = "number";
      else
        v7 = off_1EA94C758[v6];
      std::string::basic_string[abi:ne180100]<0>(&v10, v7);
      v8 = std::string::insert(&v10, 0, "type must be number, but is ");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v12 = v8->__r_.__value_.__r.__words[2];
      v11 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v11, exception);
  }
  *a2 = v4;
  return result;
}

void sub_1DE907038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void PersistentModuleFactory::add(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _BYTE buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v12 = (uint64_t)(a1 + 1);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1 + 1, a2);
  if ((a5 & 1) != 0)
  {
    if (v13)
    {
      *(_QWORD *)buf = a2;
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a2, (__int128 **)buf);
      v15 = v14;
      v17 = (char *)a1[12];
      v16 = a1[13];
      if ((unint64_t)v17 >= v16)
      {
        v62 = a3;
        v26 = (char *)a1[11];
        v27 = (v17 - v26) >> 4;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = v16 - (_QWORD)v26;
        if (v29 >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v31 = (char *)operator new(16 * v30);
        v32 = &v31[16 * v27];
        v33 = *(_OWORD *)(v15 + 40);
        *(_OWORD *)v32 = v33;
        if (*((_QWORD *)&v33 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          a3 = v62;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          v26 = (char *)a1[11];
          v17 = (char *)a1[12];
        }
        else
        {
          a3 = v62;
        }
        if (v17 == v26)
        {
          v38 = vdupq_n_s64((unint64_t)v17);
          v36 = v32;
        }
        else
        {
          v36 = v32;
          do
          {
            v37 = *((_OWORD *)v17 - 1);
            v17 -= 16;
            *((_OWORD *)v36 - 1) = v37;
            v36 -= 16;
            *(_QWORD *)v17 = 0;
            *((_QWORD *)v17 + 1) = 0;
          }
          while (v17 != v26);
          v38 = *(int64x2_t *)(a1 + 11);
        }
        v21 = v32 + 16;
        a1[11] = v36;
        a1[12] = v32 + 16;
        a1[13] = &v31[16 * v30];
        v39 = v38.i64[1];
        v40 = (void *)v38.i64[0];
        while ((void *)v39 != v40)
          v39 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 16);
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v17 = *((_QWORD *)v14 + 5);
        v18 = *((_QWORD *)v14 + 6);
        *((_QWORD *)v17 + 1) = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = v17 + 16;
      }
      a1[12] = v21;
    }
    goto LABEL_36;
  }
  if (!v13)
  {
LABEL_36:
    v41 = a1 + 6;
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v41, a2))
    {
      *(_QWORD *)buf = a2;
      v42 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v41, a2, (__int128 **)buf);
      v43 = (std::__shared_weak_count *)a4[1];
      v63 = *a4;
      v64 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
      }
      v46 = *((_QWORD *)v42 + 8);
      if (!v46)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v46 + 48))(v46, a3, &v63);
      v47 = v64;
      if (v64)
      {
        v48 = (unint64_t *)&v64->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      *(_QWORD *)buf = a2;
      v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a2, (__int128 **)buf);
      v52 = *a6;
      v51 = a6[1];
      if (v51)
      {
        v53 = (unint64_t *)(v51 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (std::__shared_weak_count *)*((_QWORD *)v50 + 6);
      *((_QWORD *)v50 + 5) = v52;
      *((_QWORD *)v50 + 6) = v51;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        if ((a2[23] & 0x80u) == 0)
          v60 = (uint64_t *)a2;
        else
          v60 = *(uint64_t **)a2;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v60;
        _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_DEBUG, "WARN: Unknown persistent module '%s', skip.", buf, 0xCu);
      }
      if ((a2[23] & 0x80u) == 0)
        v61 = (uint64_t *)a2;
      else
        v61 = *(uint64_t **)a2;
      Diagnostics::log(7, "WARN: Unknown persistent module '%s', skip.", v59, v61);
      *a6 = 0;
      a6[1] = 0;
    }
    return;
  }
  *(_QWORD *)buf = a2;
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a2, (__int128 **)buf);
  *a6 = *((_QWORD *)v22 + 5);
  v23 = *((_QWORD *)v22 + 6);
  a6[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
}

void sub_1DE907484(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x48uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  v43 = 0;
  *v17 = 0;
  v17[1] = v9;
  v18 = (std::string *)(v17 + 2);
  v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v17[4] = *((_QWORD *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  v17[8] = 0;
  v43 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v16;
          if (*v16)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v16;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1DE907904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void PersistentModuleFactory::create(PersistentModuleFactory *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x88uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1EA934508;
  PersistentModuleFactory::PersistentModuleFactory((PersistentModuleFactory *)(v2 + 3));
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v2;
}

void sub_1DE907A04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::PersistentModuleFactory(PersistentModuleFactory *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  std::string *v5;
  __int128 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  std::string *v15;
  __int128 **v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  std::string *v20;
  __int128 **v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  std::string *v25;
  __int128 **v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  std::string *v30;
  __int128 **v31;
  uint64_t v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  std::string *v35;
  __int128 **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  std::string *v40;
  __int128 **v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  std::string *v45;
  __int128 **v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  std::string *v50;
  __int128 **v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _QWORD *v54;
  std::string *v55;
  __int128 **v56;
  uint64_t v57;
  unsigned __int8 *v58;
  _QWORD *v59;
  std::string *v60;
  __int128 **v61;
  uint64_t v62;
  unsigned __int8 *v63;
  _QWORD *v64;
  std::string *v65;
  __int128 **v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _QWORD *v69;
  std::string *v70;
  __int128 **v71;
  uint64_t v72;
  unsigned __int8 *v73;
  _QWORD *v74;
  std::string *v75;
  __int128 **v76;
  uint64_t v77;
  unsigned __int8 *v78;
  _QWORD *v79;
  std::string *v80;
  __int128 **v81;
  uint64_t v82;
  unsigned __int8 *v83;
  _QWORD *v84;
  std::string *v85;
  __int128 **v86;
  uint64_t v87;
  unsigned __int8 *v88;
  _QWORD *v89;
  std::string *v90;
  __int128 **v91;
  uint64_t v92;
  unsigned __int8 *v93;
  _QWORD *v94;
  std::string *v95;
  __int128 **v96;
  uint64_t v97;
  unsigned __int8 *v98;
  _QWORD *v99;
  std::string *v100;
  __int128 **v101;
  uint64_t v102;
  unsigned __int8 *v103;
  _QWORD *v104;
  std::string *v105;
  __int128 **v106;
  uint64_t v107;
  unsigned __int8 *v108;
  _QWORD *v109;
  std::string *v110;
  __int128 **v111;
  uint64_t v112;
  unsigned __int8 *v113;
  _QWORD *v114;
  std::string *v115;
  __int128 **v116;
  uint64_t v117;
  unsigned __int8 *v118;
  _QWORD *v119;
  std::string *v120;
  __int128 **v121;
  uint64_t v122;
  unsigned __int8 *v123;
  _QWORD *v124;
  std::string *v125;
  __int128 **v126;
  uint64_t v127;
  unsigned __int8 *v128;
  _QWORD *v129;
  std::string *v130;
  __int128 **v131;
  uint64_t v132;
  unsigned __int8 *v133;
  _QWORD *v134;
  std::string *v135;
  __int128 **v136;
  uint64_t v137;
  unsigned __int8 *v138;
  _QWORD *v139;
  std::string *v140;
  __int128 **v141;
  uint64_t v142;
  unsigned __int8 *v143;
  _QWORD *v144;
  std::string *v145;
  __int128 **v146;
  uint64_t v147;
  unsigned __int8 *v148;
  _QWORD *v149;
  std::string *v150;
  __int128 **v151;
  uint64_t v152;
  unsigned __int8 *v153;
  _QWORD *v154;
  std::string *v155;
  __int128 **v156;
  uint64_t v157;
  unsigned __int8 *v158;
  _QWORD *v159;
  std::string *v160;
  __int128 **v161;
  uint64_t v162;
  unsigned __int8 *v163;
  _QWORD *v164;
  std::string *v165;
  __int128 **v166;
  uint64_t v167;
  unsigned __int8 *v168;
  _QWORD *v169;
  std::string *v170;
  __int128 **v171;
  uint64_t v172;
  unsigned __int8 *v173;
  _QWORD *v174;
  std::string *v175;
  __int128 **v176;
  uint64_t v177;
  unsigned __int8 *v178;
  _QWORD *v179;
  std::string *v180;
  __int128 **v181;
  uint64_t v182;
  unsigned __int8 *v183;
  _QWORD *v184;
  std::string *v185;
  __int128 **v186;
  uint64_t v187;
  unsigned __int8 *v188;
  _QWORD *v189;
  std::string *v190;
  __int128 **v191;
  uint64_t v192;
  unsigned __int8 *v193;
  _QWORD *v194;
  std::string *v195;
  __int128 **v196;
  uint64_t v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  std::string *v200;
  __int128 **v201;
  uint64_t v202;
  unsigned __int8 *v203;
  _QWORD *v204;
  std::string *v205;
  __int128 **v206;
  uint64_t v207;
  unsigned __int8 *v208;
  _QWORD *v209;
  std::string *v210;
  __int128 **v211;
  uint64_t v212;
  unsigned __int8 *v213;
  _QWORD *v214;
  std::string *v215;
  __int128 **v216;
  uint64_t v217;
  void *exception;
  std::string *v219;
  void *v220;
  std::string *v221;
  void *v222;
  std::string *v223;
  void *v224;
  std::string *v225;
  void *v226;
  std::string *v227;
  void *v228;
  std::string *v229;
  void *v230;
  std::string *v231;
  void *v232;
  std::string *v233;
  void *v234;
  std::string *v235;
  void *v236;
  std::string *v237;
  void *v238;
  std::string *v239;
  void *v240;
  std::string *v241;
  void *v242;
  std::string *v243;
  void *v244;
  std::string *v245;
  void *v246;
  std::string *v247;
  void *v248;
  std::string *v249;
  void *v250;
  std::string *v251;
  void *v252;
  std::string *v253;
  void *v254;
  std::string *v255;
  void *v256;
  std::string *v257;
  void *v258;
  std::string *v259;
  void *v260;
  std::string *v261;
  void *v262;
  std::string *v263;
  void *v264;
  std::string *v265;
  void *v266;
  std::string *v267;
  void *v268;
  std::string *v269;
  void *v270;
  std::string *v271;
  void *v272;
  std::string *v273;
  void *v274;
  std::string *v275;
  void *v276;
  std::string *v277;
  void *v278;
  std::string *v279;
  void *v280;
  std::string *v281;
  void *v282;
  std::string *v283;
  void *v284;
  std::string *v285;
  void *v286;
  std::string *v287;
  void *v288;
  std::string *v289;
  void *v290;
  std::string *v291;
  void *v292;
  std::string *v293;
  void *v294;
  std::string *v295;
  void *v296;
  std::string *v297;
  void *v298;
  std::string *v299;
  void *v300;
  std::string *v301;
  void *v302;
  std::string *v303;
  void *__p[2];
  char v305;
  std::string v306;
  std::string v307;
  std::string v308;
  __int128 *v309[2];
  char v310;
  __int128 **v311;
  uint64_t v312;

  v312 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1EA920838;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  v2 = (_QWORD *)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v306, "parallel_neural_acoustic");
  std::string::basic_string[abi:ne180100]<0>(__p, "parallel neural acoustic persistent module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v219 = &v306;
    else
      v219 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v219);
    MEMORY[0x1DF0EC99C](exception, v309);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v4 = operator new(0x20uLL);
  *v4 = off_1EA9317C8;
  v5 = (std::string *)(v4 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v4[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v4;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v3 + 5);
  v6 = v311;
  if (v311 == v309)
  {
    v7 = 4;
    v6 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_16;
    v7 = 5;
  }
  (*((void (**)(void))*v6 + v7))();
LABEL_16:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v309, "nashville_fe");
  std::string::basic_string[abi:ne180100]<0>(&v308, "nashville fe persistent module");
  PersistentModuleFactory::register_module<NashvilleFEPersistentModule>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "nashville_adapter");
  std::string::basic_string[abi:ne180100]<0>(&v308, "nashville fe persistent module");
  PersistentModuleFactory::register_module<NashvilleFEPersistentModule>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(&v306, "prompt_be");
  std::string::basic_string[abi:ne180100]<0>(__p, "Process prompt information");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v220 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v221 = &v306;
    else
      v221 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v221);
    MEMORY[0x1DF0EC99C](v220, v309);
    __cxa_throw(v220, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v9 = operator new(0x20uLL);
  *v9 = off_1EA9312F8;
  v10 = (std::string *)(v9 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v9[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v9;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v8 + 5);
  v11 = v311;
  if (v311 == v309)
  {
    v12 = 4;
    v11 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_47;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_47:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "unit_feature_predict");
  std::string::basic_string[abi:ne180100]<0>(__p, "Predict unit features");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v222 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v223 = &v306;
    else
      v223 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v223);
    MEMORY[0x1DF0EC99C](v222, v309);
    __cxa_throw(v222, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v14 = operator new(0x20uLL);
  *v14 = off_1EA9319D8;
  v15 = (std::string *)(v14 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v14[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v14;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v13 + 5);
  v16 = v311;
  if (v311 == v309)
  {
    v17 = 4;
    v16 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_70;
    v17 = 5;
  }
  (*((void (**)(void))*v16 + v17))();
LABEL_70:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "unit_preselect");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unit selection preselection");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v224 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v225 = &v306;
    else
      v225 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v225);
    MEMORY[0x1DF0EC99C](v224, v309);
    __cxa_throw(v224, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v19 = operator new(0x20uLL);
  *v19 = off_1EA9316C0;
  v20 = (std::string *)(v19 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v19[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v19;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v18 + 5);
  v21 = v311;
  if (v311 == v309)
  {
    v22 = 4;
    v21 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_93;
    v22 = 5;
  }
  (*((void (**)(void))*v21 + v22))();
LABEL_93:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "word_embedding");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word embedding persistent module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v226 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v227 = &v306;
    else
      v227 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v227);
    MEMORY[0x1DF0EC99C](v226, v309);
    __cxa_throw(v226, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v24 = operator new(0x20uLL);
  *v24 = off_1EA931560;
  v25 = (std::string *)(v24 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v24[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v24;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v23 + 5);
  v26 = v311;
  if (v311 == v309)
  {
    v27 = 4;
    v26 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_116;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_116:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "espresso_tacotron");
  std::string::basic_string[abi:ne180100]<0>(__p, "Espresso tacotron module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v228 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v229 = &v306;
    else
      v229 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v229);
    MEMORY[0x1DF0EC99C](v228, v309);
    __cxa_throw(v228, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v29 = operator new(0x20uLL);
  *v29 = off_1EA931770;
  v30 = (std::string *)(v29 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v29[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v29;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v28 + 5);
  v31 = v311;
  if (v311 == v309)
  {
    v32 = 4;
    v31 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_139;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_139:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v309, "espresso_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&v308, "Espresso wavernn module");
  PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "espresso_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&v308, "Espresso wavernn module for fallback");
  PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "mil_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&v308, "MIL wavernn module");
  PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "mil_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&v308, "MIL wavernn module for fallback");
  PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(&v306, "fastspeech2_encoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FastSpeech2 encoder module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v230 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v231 = &v306;
    else
      v231 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v231);
    MEMORY[0x1DF0EC99C](v230, v309);
    __cxa_throw(v230, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v34 = operator new(0x20uLL);
  *v34 = off_1EA931928;
  v35 = (std::string *)(v34 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v35, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v34[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v34;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v33 + 5);
  v36 = v311;
  if (v311 == v309)
  {
    v37 = 4;
    v36 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_178;
    v37 = 5;
  }
  (*((void (**)(void))*v36 + v37))();
LABEL_178:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "fastspeech2_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FastSpeech2 decoder module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v232 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = &v306;
    else
      v233 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v233);
    MEMORY[0x1DF0EC99C](v232, v309);
    __cxa_throw(v232, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v39 = operator new(0x20uLL);
  *v39 = off_1EA9318D0;
  v40 = (std::string *)(v39 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v40, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v39[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v39;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v38 + 5);
  v41 = v311;
  if (v311 == v309)
  {
    v42 = 4;
    v41 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_201;
    v42 = 5;
  }
  (*((void (**)(void))*v41 + v42))();
LABEL_201:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v309, "soundstream_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v308, "ANETEC decoder inference");
  PersistentModuleFactory::register_module<AnetecDecoderBaseInference>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "anetec_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v308, "ANETEC decoder module");
  PersistentModuleFactory::register_module<AnetecDecoderBaseInference>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "soundstream_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v308, "ANETEC streaming decoder inference");
  PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(v309, "anetec_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v308, "ANETEC streaming decoder inference");
  PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>((uint64_t)this, (uint64_t)v309);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (v310 < 0)
    operator delete(v309[0]);
  std::string::basic_string[abi:ne180100]<0>(&v306, "soundstorm");
  std::string::basic_string[abi:ne180100]<0>(__p, "SoundStorm inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v234 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v235 = &v306;
    else
      v235 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v235);
    MEMORY[0x1DF0EC99C](v234, v309);
    __cxa_throw(v234, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v44 = operator new(0x20uLL);
  *v44 = off_1EA930ED8;
  v45 = (std::string *)(v44 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v45, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v44[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v44;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v43 + 5);
  v46 = v311;
  if (v311 == v309)
  {
    v47 = 4;
    v46 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_240;
    v47 = 5;
  }
  (*((void (**)(void))*v46 + v47))();
LABEL_240:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "soundstorm_streaming");
  std::string::basic_string[abi:ne180100]<0>(__p, "SoundStorm streaming inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v236 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v237 = &v306;
    else
      v237 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v237);
    MEMORY[0x1DF0EC99C](v236, v309);
    __cxa_throw(v236, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v49 = operator new(0x20uLL);
  *v49 = off_1EA90AE38;
  v50 = (std::string *)(v49 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v50, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v49[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v49;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v48 + 5);
  v51 = v311;
  if (v311 == v309)
  {
    v52 = 4;
    v51 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_263;
    v52 = 5;
  }
  (*((void (**)(void))*v51 + v52))();
LABEL_263:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "fastspeech2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FastSpeech2 decoder module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v238 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v239 = &v306;
    else
      v239 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v239);
    MEMORY[0x1DF0EC99C](v238, v309);
    __cxa_throw(v238, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v54 = operator new(0x20uLL);
  *v54 = off_1EA9313A8;
  v55 = (std::string *)(v54 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v55, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v54[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v54;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v53 + 5);
  v56 = v311;
  if (v311 == v309)
  {
    v57 = 4;
    v56 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_286;
    v57 = 5;
  }
  (*((void (**)(void))*v56 + v57))();
LABEL_286:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "s1nar_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "S1NAR decoder inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v240 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v241 = &v306;
    else
      v241 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v241);
    MEMORY[0x1DF0EC99C](v240, v309);
    __cxa_throw(v240, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v59 = operator new(0x20uLL);
  *v59 = off_1EA930E28;
  v60 = (std::string *)(v59 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v60, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v59[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v59;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v58 + 5);
  v61 = v311;
  if (v311 == v309)
  {
    v62 = 4;
    v61 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_309;
    v62 = 5;
  }
  (*((void (**)(void))*v61 + v62))();
LABEL_309:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "fs2s1_encoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FS2S1 encoder inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v242 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v243 = &v306;
    else
      v243 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v243);
    MEMORY[0x1DF0EC99C](v242, v309);
    __cxa_throw(v242, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v64 = operator new(0x20uLL);
  *v64 = off_1EA931198;
  v65 = (std::string *)(v64 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v65, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v64[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v64;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v63 + 5);
  v66 = v311;
  if (v311 == v309)
  {
    v67 = 4;
    v66 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_332;
    v67 = 5;
  }
  (*((void (**)(void))*v66 + v67))();
LABEL_332:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "fs2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FS2S1 decoder inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v244 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v245 = &v306;
    else
      v245 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v245);
    MEMORY[0x1DF0EC99C](v244, v309);
    __cxa_throw(v244, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v69 = operator new(0x20uLL);
  *v69 = off_1EA931140;
  v70 = (std::string *)(v69 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v70, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v69[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v69;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v68 + 5);
  v71 = v311;
  if (v311 == v309)
  {
    v72 = 4;
    v71 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_355;
    v72 = 5;
  }
  (*((void (**)(void))*v71 + v72))();
LABEL_355:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "roberta_word_embedding");
  std::string::basic_string[abi:ne180100]<0>(__p, "Roberta word embedding inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v246 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v247 = &v306;
    else
      v247 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v247);
    MEMORY[0x1DF0EC99C](v246, v309);
    __cxa_throw(v246, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v74 = operator new(0x20uLL);
  *v74 = off_1EA90AD88;
  v75 = (std::string *)(v74 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v75, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v74[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v74;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v73 + 5);
  v76 = v311;
  if (v311 == v309)
  {
    v77 = 4;
    v76 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_378;
    v77 = 5;
  }
  (*((void (**)(void))*v76 + v77))();
LABEL_378:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "count");
  std::string::basic_string[abi:ne180100]<0>(__p, "Count phonemes, syllables, words, and phrases");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v248 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v249 = &v306;
    else
      v249 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v249);
    MEMORY[0x1DF0EC99C](v248, v309);
    __cxa_throw(v248, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v79 = operator new(0x20uLL);
  *v79 = off_1EA931820;
  v80 = (std::string *)(v79 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v80, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v80->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v79[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v79;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v78 + 5);
  v81 = v311;
  if (v311 == v309)
  {
    v82 = 4;
    v81 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_401;
    v82 = 5;
  }
  (*((void (**)(void))*v81 + v82))();
LABEL_401:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "extract");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract features");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v250 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v251 = &v306;
    else
      v251 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v251);
    MEMORY[0x1DF0EC99C](v250, v309);
    __cxa_throw(v250, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v83 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v84 = operator new(0x20uLL);
  *v84 = off_1EA931668;
  v85 = (std::string *)(v84 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v85, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v84[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v84;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v83 + 5);
  v86 = v311;
  if (v311 == v309)
  {
    v87 = 4;
    v86 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_424;
    v87 = 5;
  }
  (*((void (**)(void))*v86 + v87))();
LABEL_424:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "source");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text source module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v252 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v253 = &v306;
    else
      v253 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v253);
    MEMORY[0x1DF0EC99C](v252, v309);
    __cxa_throw(v252, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v89 = operator new(0x20uLL);
  *v89 = off_1EA930F30;
  v90 = (std::string *)(v89 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v90, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v90->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v89[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v89;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v88 + 5);
  v91 = v311;
  if (v311 == v309)
  {
    v92 = 4;
    v91 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_447;
    v92 = 5;
  }
  (*((void (**)(void))*v91 + v92))();
LABEL_447:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "audio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decide between audio and alternative context");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v254 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v255 = &v306;
    else
      v255 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v255);
    MEMORY[0x1DF0EC99C](v254, v309);
    __cxa_throw(v254, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v94 = operator new(0x20uLL);
  *v94 = off_1EA930F88;
  v95 = (std::string *)(v94 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v95, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v95->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v94[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v94;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v93 + 5);
  v96 = v311;
  if (v311 == v309)
  {
    v97 = 4;
    v96 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_470;
    v97 = 5;
  }
  (*((void (**)(void))*v96 + v97))();
LABEL_470:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "match_prompt");
  std::string::basic_string[abi:ne180100]<0>(__p, "Match text for prompts and provide units");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v256 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v257 = &v306;
    else
      v257 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v257);
    MEMORY[0x1DF0EC99C](v256, v309);
    __cxa_throw(v256, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v98 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v99 = operator new(0x20uLL);
  *v99 = off_1EA930FE0;
  v100 = (std::string *)(v99 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v100, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v100->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v99[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v99;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v98 + 5);
  v101 = v311;
  if (v311 == v309)
  {
    v102 = 4;
    v101 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_493;
    v102 = 5;
  }
  (*((void (**)(void))*v101 + v102))();
LABEL_493:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "transliterate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transliterate text, like full/half-width conversion");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v258 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v259 = &v306;
    else
      v259 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v259);
    MEMORY[0x1DF0EC99C](v258, v309);
    __cxa_throw(v258, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v103 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v104 = operator new(0x20uLL);
  *v104 = off_1EA9314B0;
  v105 = (std::string *)(v104 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v105, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v105->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v104[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v104;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v103 + 5);
  v106 = v311;
  if (v311 == v309)
  {
    v107 = 4;
    v106 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_516;
    v107 = 5;
  }
  (*((void (**)(void))*v106 + v107))();
LABEL_516:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "breaks_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break sentence");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v260 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v261 = &v306;
    else
      v261 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v261);
    MEMORY[0x1DF0EC99C](v260, v309);
    __cxa_throw(v260, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v108 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v109 = operator new(0x20uLL);
  *v109 = off_1EA930C18;
  v110 = (std::string *)(v109 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v110, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v110->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v109[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v109;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v108 + 5);
  v111 = v311;
  if (v311 == v309)
  {
    v112 = 4;
    v111 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_539;
    v112 = 5;
  }
  (*((void (**)(void))*v111 + v112))();
LABEL_539:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "rewrite");
  std::string::basic_string[abi:ne180100]<0>(__p, "rewrite input using fast rewriter");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v262 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v263 = &v306;
    else
      v263 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v263);
    MEMORY[0x1DF0EC99C](v262, v309);
    __cxa_throw(v262, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v113 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v114 = operator new(0x20uLL);
  *v114 = off_1EA930BC0;
  v115 = (std::string *)(v114 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v115, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v115->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v114[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v114;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v113 + 5);
  v116 = v311;
  if (v311 == v309)
  {
    v117 = 4;
    v116 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_562;
    v117 = 5;
  }
  (*((void (**)(void))*v116 + v117))();
LABEL_562:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "markup");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle markup");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v264 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v265 = &v306;
    else
      v265 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v265);
    MEMORY[0x1DF0EC99C](v264, v309);
    __cxa_throw(v264, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v118 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v119 = operator new(0x20uLL);
  *v119 = off_1EA930B68;
  v120 = (std::string *)(v119 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v120, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v120->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v119[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v119;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v118 + 5);
  v121 = v311;
  if (v311 == v309)
  {
    v122 = 4;
    v121 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_585;
    v122 = 5;
  }
  (*((void (**)(void))*v121 + v122))();
LABEL_585:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "hydra_udct");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle hydra user dictionary lookup");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v266 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v267 = &v306;
    else
      v267 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v267);
    MEMORY[0x1DF0EC99C](v266, v309);
    __cxa_throw(v266, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v123 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v124 = operator new(0x20uLL);
  *v124 = off_1EA931248;
  v125 = (std::string *)(v124 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v125, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v125->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v124[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v124;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v123 + 5);
  v126 = v311;
  if (v311 == v309)
  {
    v127 = 4;
    v126 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_608;
    v127 = 5;
  }
  (*((void (**)(void))*v126 + v127))();
LABEL_608:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "normalize_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based text normalization");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v268 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v269 = &v306;
    else
      v269 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v269);
    MEMORY[0x1DF0EC99C](v268, v309);
    __cxa_throw(v268, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v128 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v129 = operator new(0x20uLL);
  *v129 = off_1EA931090;
  v130 = (std::string *)(v129 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v130, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v130->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v129[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v129;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v128 + 5);
  v131 = v311;
  if (v311 == v309)
  {
    v132 = 4;
    v131 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_631;
    v132 = 5;
  }
  (*((void (**)(void))*v131 + v132))();
LABEL_631:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "pronounce_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based pronunciation");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v270 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v271 = &v306;
    else
      v271 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v271);
    MEMORY[0x1DF0EC99C](v270, v309);
    __cxa_throw(v270, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v133 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v134 = operator new(0x20uLL);
  *v134 = off_1EA9310E8;
  v135 = (std::string *)(v134 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v135, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v135->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v134[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v134;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v133 + 5);
  v136 = v311;
  if (v311 == v309)
  {
    v137 = 4;
    v136 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_654;
    v137 = 5;
  }
  (*((void (**)(void))*v136 + v137))();
LABEL_654:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "hydra_adapter");
  std::string::basic_string[abi:ne180100]<0>(__p, "Hydra adapter for BE pipeline");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v272 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v273 = &v306;
    else
      v273 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v273);
    MEMORY[0x1DF0EC99C](v272, v309);
    __cxa_throw(v272, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v138 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v139 = operator new(0x20uLL);
  *v139 = off_1EA9311F0;
  v140 = (std::string *)(v139 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v140, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v140->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v139[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v139;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v138 + 5);
  v141 = v311;
  if (v311 == v309)
  {
    v142 = 4;
    v141 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_677;
    v142 = 5;
  }
  (*((void (**)(void))*v141 + v142))();
LABEL_677:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "parse");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse legacy or SSML text");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v274 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v275 = &v306;
    else
      v275 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v275);
    MEMORY[0x1DF0EC99C](v274, v309);
    __cxa_throw(v274, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v143 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v144 = operator new(0x20uLL);
  *v144 = off_1EA930B10;
  v145 = (std::string *)(v144 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v145, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v145->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v144[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v144;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v143 + 5);
  v146 = v311;
  if (v311 == v309)
  {
    v147 = 4;
    v146 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_700;
    v147 = 5;
  }
  (*((void (**)(void))*v146 + v147))();
LABEL_700:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "switch_language");
  std::string::basic_string[abi:ne180100]<0>(__p, "Handle material in secondary languages");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v276 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v277 = &v306;
    else
      v277 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v277);
    MEMORY[0x1DF0EC99C](v276, v309);
    __cxa_throw(v276, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v148 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v149 = operator new(0x20uLL);
  *v149 = off_1EA9315B8;
  v150 = (std::string *)(v149 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v150, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v150->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v149[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v149;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v148 + 5);
  v151 = v311;
  if (v311 == v309)
  {
    v152 = 4;
    v151 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_723;
    v152 = 5;
  }
  (*((void (**)(void))*v151 + v152))();
LABEL_723:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "tokenize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up text into tokens");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v278 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v279 = &v306;
    else
      v279 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v279);
    MEMORY[0x1DF0EC99C](v278, v309);
    __cxa_throw(v278, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v153 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v154 = operator new(0x20uLL);
  *v154 = off_1EA930CC8;
  v155 = (std::string *)(v154 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v155, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v155->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v154[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v154;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v153 + 5);
  v156 = v311;
  if (v311 == v309)
  {
    v157 = 4;
    v156 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_746;
    v157 = 5;
  }
  (*((void (**)(void))*v156 + v157))();
LABEL_746:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "override");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v280 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v281 = &v306;
    else
      v281 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v281);
    MEMORY[0x1DF0EC99C](v280, v309);
    __cxa_throw(v280, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v158 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v159 = operator new(0x20uLL);
  *v159 = off_1EA931400;
  v160 = (std::string *)(v159 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v160, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v160->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v159[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v159;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v158 + 5);
  v161 = v311;
  if (v311 == v309)
  {
    v162 = 4;
    v161 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_769;
    v162 = 5;
  }
  (*((void (**)(void))*v161 + v162))();
LABEL_769:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "normalize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Translate text into a sequence of regular words");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v282 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v283 = &v306;
    else
      v283 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v283);
    MEMORY[0x1DF0EC99C](v282, v309);
    __cxa_throw(v282, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v163 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v164 = operator new(0x20uLL);
  *v164 = off_1EA930D20;
  v165 = (std::string *)(v164 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v165, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v165->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v164[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v164;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v163 + 5);
  v166 = v311;
  if (v311 == v309)
  {
    v167 = 4;
    v166 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_792;
    v167 = 5;
  }
  (*((void (**)(void))*v166 + v167))();
LABEL_792:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "punctuate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine whether punctuation is phrase ending or not");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v284 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v285 = &v306;
    else
      v285 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v285);
    MEMORY[0x1DF0EC99C](v284, v309);
    __cxa_throw(v284, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v168 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v169 = operator new(0x20uLL);
  *v169 = off_1EA930DD0;
  v170 = (std::string *)(v169 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v170, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v170->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v169[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v169;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v168 + 5);
  v171 = v311;
  if (v311 == v309)
  {
    v172 = 4;
    v171 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_815;
    v172 = 5;
  }
  (*((void (**)(void))*v171 + v172))();
LABEL_815:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "part_of_speech");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine part of speech");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v286 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v287 = &v306;
    else
      v287 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v287);
    MEMORY[0x1DF0EC99C](v286, v309);
    __cxa_throw(v286, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v173 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v174 = operator new(0x20uLL);
  *v174 = off_1EA9312A0;
  v175 = (std::string *)(v174 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v175, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v175->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v174[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v174;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v173 + 5);
  v176 = v311;
  if (v311 == v309)
  {
    v177 = 4;
    v176 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_838;
    v177 = 5;
  }
  (*((void (**)(void))*v176 + v177))();
LABEL_838:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "phrasing");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v288 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v289 = &v306;
    else
      v289 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v289);
    MEMORY[0x1DF0EC99C](v288, v309);
    __cxa_throw(v288, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v178 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v179 = operator new(0x20uLL);
  *v179 = off_1EA930C70;
  v180 = (std::string *)(v179 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v180, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v180->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v179[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v179;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v178 + 5);
  v181 = v311;
  if (v311 == v309)
  {
    v182 = 4;
    v181 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_861;
    v182 = 5;
  }
  (*((void (**)(void))*v181 + v182))();
LABEL_861:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "sentence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine sentence type");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v290 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v291 = &v306;
    else
      v291 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v291);
    MEMORY[0x1DF0EC99C](v290, v309);
    __cxa_throw(v290, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v183 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v184 = operator new(0x20uLL);
  *v184 = off_1EA931718;
  v185 = (std::string *)(v184 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v185, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v185->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v184[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v184;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v183 + 5);
  v186 = v311;
  if (v311 == v309)
  {
    v187 = 4;
    v186 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_884;
    v187 = 5;
  }
  (*((void (**)(void))*v186 + v187))();
LABEL_884:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "pronounce");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate language-appropriate phonemes");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v292 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v293 = &v306;
    else
      v293 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v293);
    MEMORY[0x1DF0EC99C](v292, v309);
    __cxa_throw(v292, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v188 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v189 = operator new(0x20uLL);
  *v189 = off_1EA930D78;
  v190 = (std::string *)(v189 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v190, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v190->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v189[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v189;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v188 + 5);
  v191 = v311;
  if (v311 == v309)
  {
    v192 = 4;
    v191 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_907;
    v192 = 5;
  }
  (*((void (**)(void))*v191 + v192))();
LABEL_907:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "trim_utterance");
  std::string::basic_string[abi:ne180100]<0>(__p, "Implement trimming attributes");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v294 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v295 = &v306;
    else
      v295 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v295);
    MEMORY[0x1DF0EC99C](v294, v309);
    __cxa_throw(v294, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v193 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v194 = operator new(0x20uLL);
  *v194 = off_1EA931508;
  v195 = (std::string *)(v194 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v195, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v195->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v194[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v194;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v193 + 5);
  v196 = v311;
  if (v311 == v309)
  {
    v197 = 4;
    v196 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_930;
    v197 = 5;
  }
  (*((void (**)(void))*v196 + v197))();
LABEL_930:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "amend_phonemes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply rule-based fix-ups to pronunciations, using multiple-word context");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v296 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v297 = &v306;
    else
      v297 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v297);
    MEMORY[0x1DF0EC99C](v296, v309);
    __cxa_throw(v296, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v198 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v199 = operator new(0x20uLL);
  *v199 = off_1EA931350;
  v200 = (std::string *)(v199 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v200, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v200->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v199[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v199;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v198 + 5);
  v201 = v311;
  if (v311 == v309)
  {
    v202 = 4;
    v201 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_953;
    v202 = 5;
  }
  (*((void (**)(void))*v201 + v202))();
LABEL_953:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "map_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map pronunciations between languages");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v298 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v299 = &v306;
    else
      v299 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v299);
    MEMORY[0x1DF0EC99C](v298, v309);
    __cxa_throw(v298, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v203 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v204 = operator new(0x20uLL);
  *v204 = off_1EA931878;
  v205 = (std::string *)(v204 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v205, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v205->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v204[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v204;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v203 + 5);
  v206 = v311;
  if (v311 == v309)
  {
    v207 = 4;
    v206 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_976;
    v207 = 5;
  }
  (*((void (**)(void))*v206 + v207))();
LABEL_976:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "join_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Join pronunciations of connected words");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v300 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v301 = &v306;
    else
      v301 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v301);
    MEMORY[0x1DF0EC99C](v300, v309);
    __cxa_throw(v300, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v208 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v311 = 0;
  v209 = operator new(0x20uLL);
  *v209 = off_1EA931980;
  v210 = (std::string *)(v209 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v210, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v210->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v209[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v209;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v208 + 5);
  v211 = v311;
  if (v311 == v309)
  {
    v212 = 4;
    v211 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_999;
    v212 = 5;
  }
  (*((void (**)(void))*v211 + v212))();
LABEL_999:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "phrasing_token");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries based on token");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v306))
  {
    v302 = __cxa_allocate_exception(0x10uLL);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v303 = &v306;
    else
      v303 = (std::string *)v306.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v309, "Persistent Module name '%s' is registered already.", (const char *)v303);
    MEMORY[0x1DF0EC99C](v302, v309);
    __cxa_throw(v302, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v307 = v306;
  v309[0] = (__int128 *)&v306;
  v213 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v306, v309);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v308 = v307;
  v214 = operator new(0x20uLL);
  *v214 = off_1EA931458;
  v215 = (std::string *)(v214 + 1);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v215, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v215->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    v214[3] = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  v311 = (__int128 **)v214;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v309, (_QWORD *)v213 + 5);
  v216 = v311;
  if (v311 == v309)
  {
    v217 = 4;
    v216 = v309;
  }
  else
  {
    if (!v311)
      goto LABEL_1022;
    v217 = 5;
  }
  (*((void (**)(void))*v216 + v217))();
LABEL_1022:
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (v305 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
}

void sub_1DE90C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  void *v37;

  operator delete(v37);
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
    operator delete(a17);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::~__hash_table(v36);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(v35);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  std::string *v6;
  __int128 **v7;
  uint64_t v8;
  void *exception;
  const char *v10;
  std::string v11;
  std::string v12;
  __int128 *v13[3];
  __int128 **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v13, "Persistent Module name '%s' is registered already.", v10);
    MEMORY[0x1DF0EC99C](exception, v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v13[0] = (__int128 *)a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  v5 = operator new(0x20uLL);
  *v5 = off_1EA931038;
  v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v5[3] = *((_QWORD *)&v12.__r_.__value_.__l + 2);
  }
  v14 = (__int128 **)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v13, (_QWORD *)v4 + 5);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_16:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE90D8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  std::string *v6;
  __int128 **v7;
  uint64_t v8;
  void *exception;
  const char *v10;
  std::string v11;
  std::string v12;
  __int128 *v13[3];
  __int128 **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v13, "Persistent Module name '%s' is registered already.", v10);
    MEMORY[0x1DF0EC99C](exception, v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v13[0] = (__int128 *)a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  v5 = operator new(0x20uLL);
  *v5 = off_1EA931610;
  v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v5[3] = *((_QWORD *)&v12.__r_.__value_.__l + 2);
  }
  v14 = (__int128 **)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v13, (_QWORD *)v4 + 5);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_16:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE90DB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  std::string *v6;
  __int128 **v7;
  uint64_t v8;
  void *exception;
  const char *v10;
  std::string v11;
  std::string v12;
  __int128 *v13[3];
  __int128 **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v13, "Persistent Module name '%s' is registered already.", v10);
    MEMORY[0x1DF0EC99C](exception, v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v13[0] = (__int128 *)a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  v5 = operator new(0x20uLL);
  *v5 = off_1EA930E80;
  v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v5[3] = *((_QWORD *)&v12.__r_.__value_.__l + 2);
  }
  v14 = (__int128 **)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v13, (_QWORD *)v4 + 5);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_16:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE90DD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  std::string *v6;
  __int128 **v7;
  uint64_t v8;
  void *exception;
  const char *v10;
  std::string v11;
  std::string v12;
  __int128 *v13[3];
  __int128 **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v13, "Persistent Module name '%s' is registered already.", v10);
    MEMORY[0x1DF0EC99C](exception, v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v13[0] = (__int128 *)a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  v5 = operator new(0x20uLL);
  *v5 = off_1EA90AD30;
  v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v5[3] = *((_QWORD *)&v12.__r_.__value_.__l + 2);
  }
  v14 = (__int128 **)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v13, (_QWORD *)v4 + 5);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_16:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE90DFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  std::string *v6;
  __int128 **v7;
  uint64_t v8;
  void *exception;
  const char *v10;
  std::string v11;
  std::string v12;
  __int128 *v13[3];
  __int128 **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v13, "Persistent Module name '%s' is registered already.", v10);
    MEMORY[0x1DF0EC99C](exception, v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v13[0] = (__int128 *)a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  v5 = operator new(0x20uLL);
  *v5 = off_1EA90ADE0;
  v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v5[3] = *((_QWORD *)&v12.__r_.__value_.__l + 2);
  }
  v14 = (__int128 **)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v13, (_QWORD *)v4 + 5);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_16:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE90E218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DE90E4B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931458;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931458;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931458;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE90E5AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931458;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD *v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  _BYTE buf[22];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x160uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9350A0;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v35 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 24) = &off_1EA921AA0;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init PhrasingTokenPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PhrasingTokenPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v35);
  if (*(_QWORD *)buf)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)buf + 96) + 72))(&v37, *(_QWORD *)(*(_QWORD *)buf + 96), 1885893234, 0);
    v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v37, "sentence_breaks");
    std::allocate_shared[abi:ne180100]<std::vector<std::string>,std::allocator<std::vector<std::string>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>(&v36, (unsigned __int8 *)v13);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v7 + 320, &v36);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v37, "phrase_breaks");
    std::allocate_shared[abi:ne180100]<std::vector<std::string>,std::allocator<std::vector<std::string>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>(&v36, (unsigned __int8 *)v17);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v7 + 336, &v36);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v38, v37);
  }
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (*((_QWORD *)&v35 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v26 = (_QWORD *)(a1 + 8);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v28 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v28 = (_QWORD *)*v26;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v29.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v26 = (_QWORD *)*v26;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v31, v26, (double)((v30.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v35 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_1DE90EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;

  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  PersistentModule::~PersistentModule(v22);
  if (v20)
  {
    v28 = (unint64_t *)&v20->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v30);
  if (v20)
  {
    v31 = (unint64_t *)&v20->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PhrasingTokenPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9350A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PhrasingTokenPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9350A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PhrasingTokenPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931980;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931980;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931980;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE90ECE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931980;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  unint64_t v20;
  __n128 *v21;
  _QWORD *v22;
  std::chrono::steady_clock::time_point v23;
  std::chrono::steady_clock::time_point v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 result;
  __int128 v29;
  _BYTE buf[22];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v29 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x148uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935618;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v29 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA922278;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init JoinPronunciationsPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init JoinPronunciationsPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v29);
  if (*(_QWORD *)buf)
    v7[40] = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(*(uint64_t *)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*((_QWORD *)&v29 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v29 + 1) + 16))(*((_QWORD *)&v29 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v29 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v18 = (_QWORD *)(a1 + 8);
  v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v20 = v8;
    v21 = a3;
    v22 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v22 = (_QWORD *)*v18;
    v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v23.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v21;
    v8 = v20;
  }
  if (*(char *)(a1 + 31) < 0)
    v18 = (_QWORD *)*v18;
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v25, v18, (double)((v24.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v29 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v29 + 1) + 16))(*((_QWORD *)&v29 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v29 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE90F0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void **v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  PersistentModule::~PersistentModule(v15);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v21);
  if (v13)
  {
    v22 = (unint64_t *)&v13->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<JoinPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<JoinPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<JoinPronunciationsPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931878;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931878;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931878;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE90F318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931878;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  unint64_t v21;
  __n128 *v22;
  _QWORD *v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::steady_clock::time_point v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 result;
  __int128 v30;
  _BYTE buf[22];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x158uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935570;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v30 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA922128;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init MapPronunciationsPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init MapPronunciationsPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v30);
  v13 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v7[41] = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(*(uint64_t *)buf);
    v7[40] = FrontendEnvironment::get_shared_component_instance<TranslatePhonemes>(v13);
    v7[42] = FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v13);
  }
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*((_QWORD *)&v30 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v19 = (_QWORD *)(a1 + 8);
  v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v21 = v8;
    v22 = a3;
    v23 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v23 = (_QWORD *)*v19;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v24.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v22;
    v8 = v21;
  }
  if (*(char *)(a1 + 31) < 0)
    v19 = (_QWORD *)*v19;
  v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v26, v19, (double)((v25.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v30 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE90F704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void **v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;

  PersistentModule::~PersistentModule(v15);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v19);
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<MapPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MapPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MapPronunciationsPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931350;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931350;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931350;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE90F964(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931350;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  MemoryMap *v19;
  unsigned int v20;
  NSObject *v21;
  const char *v22;
  int v23;
  size_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  std::vector<std::string>::pointer end;
  __int128 v29;
  int *v30;
  std::vector<std::string>::pointer begin;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  int v35;
  UTFRegex *v36;
  UTFRegex *v37;
  std::string *v38;
  const char *v39;
  unint64_t v40;
  int *v41;
  std::vector<std::string>::pointer v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  UTFRegex **v46;
  int v47;
  UTFRegex *v48;
  UTFRegex *v49;
  std::string *v50;
  const char *v51;
  int v52;
  std::vector<std::string>::pointer v53;
  UTFRegex *v54;
  UTFRegex *v55;
  std::string *v56;
  const char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::string *v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::string **v74;
  NSObject *v75;
  std::string *v76;
  std::chrono::steady_clock::time_point v77;
  std::chrono::steady_clock::time_point v78;
  const char *v79;
  unint64_t *v80;
  unint64_t v81;
  __n128 result;
  std::__shared_weak_count *v83;
  __n128 *v84;
  unint64_t v85;
  uint64_t v86;
  std::chrono::steady_clock::time_point v87;
  __int128 v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void *__p[2];
  std::string::size_type v92;
  std::vector<std::string> v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  MemoryMap *v96;
  size_t v97;
  std::__split_buffer<std::string> buf;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v88 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v87.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5 = (char *)operator new(0x160uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1EA934FF8;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Module::Module((Module *)(v5 + 24));
  *((_QWORD *)v5 + 37) = 0;
  *((_QWORD *)v5 + 38) = 0;
  *((_QWORD *)v5 + 39) = 0;
  *((_QWORD *)v5 + 3) = &off_1EA921938;
  *((_QWORD *)v5 + 41) = 0;
  *((_QWORD *)v5 + 42) = 0;
  v85 = v9;
  v86 = a1;
  v84 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__first_) = 0;
    _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_INFO, "FE Init AmendPhonemesPersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "FE Init AmendPhonemesPersistentModule", v11);
  SharedObjectPool::get_if<FrontendEnvironment>(&v89, v88);
  v12 = v89;
  v13 = a1;
  if (v89)
  {
    *((_QWORD *)v5 + 40) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v89);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 96) + 16))(&v94, *(_QWORD *)(v12 + 96), 1885893228, 1);
    v14 = operator new(0x30uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1EA936760;
    v14[3] = 0;
    v14[4] = 0;
    v14[5] = 0;
    *(_QWORD *)&v15 = v14 + 3;
    *((_QWORD *)&v15 + 1) = v14;
    v16 = (std::__shared_weak_count *)*((_QWORD *)v5 + 42);
    *(_OWORD *)(v5 + 328) = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v94)
    {
      *(_QWORD *)&v88 = v5 + 328;
      MemoryMap::madvise(v96, v97, 1);
      v19 = v96;
      v20 = *((_DWORD *)v96 + 1);
      if (v20 >= 4)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          v23 = *((_DWORD *)v19 + 1);
          LODWORD(buf.__first_) = 67109376;
          HIDWORD(buf.__first_) = v23;
          LOWORD(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 2) = 3;
          _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Amend Phonemes may not be compatible with file version %d, expected %d", (uint8_t *)&buf, 0xEu);
        }
        Diagnostics::log(6, "Amend Phonemes may not be compatible with file version %d, expected %d", v22, *((unsigned int *)v19 + 1), 3);
        v20 = *((_DWORD *)v19 + 1);
      }
      *((_DWORD *)v5 + 86) = v20;
      memset(&v93, 0, sizeof(v93));
      v24 = v97;
      if (v97 >= 9)
      {
        v25 = 8;
        while (1)
        {
          v26 = (int *)((char *)v96 + v25);
          v25 += 8;
          v27 = *v26;
          if (*v26 <= 1937011315)
            break;
          if (v27 != 1937011316)
          {
            if (v27 == 1937072737)
            {
              v30 = (int *)((char *)v96 + v25);
              begin = v93.__begin_;
              v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_ - (char *)v93.__begin_) >> 3);
              if (v32 > *(unsigned int *)((char *)v96 + v25) && v32 > v30[1])
              {
                v33 = (char *)operator new(0x40uLL);
                *((_QWORD *)v33 + 1) = 0;
                v34 = (unint64_t *)(v33 + 8);
                *((_QWORD *)v33 + 2) = 0;
                *(_QWORD *)v33 = &off_1EA933510;
                *(_OWORD *)(v33 + 40) = 0u;
                *((_QWORD *)v33 + 7) = 0;
                *(_OWORD *)(v33 + 24) = 0u;
                buf.__first_ = (std::__split_buffer<std::string>::pointer)(v33 + 24);
                buf.__begin_ = (std::__split_buffer<std::string>::pointer)v33;
                v35 = *v30;
                v36 = (UTFRegex *)operator new();
                v37 = v36;
                v38 = &begin[v35];
                v39 = (v38->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? (const char *)&begin[v35]
                    : (const char *)v38->__r_.__value_.__r.__words[0];
                UTFRegex::UTFRegex(v36, v39);
                std::unique_ptr<UTFRegex>::reset[abi:ne180100]((UTFRegex **)v33 + 4, v37);
                std::string::operator=((std::string *)(v33 + 40), &v93.__begin_[v30[1]]);
                std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](*(char ***)v88, (__int128 *)&buf);
                v6 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
                do
                  v40 = __ldaxr(v34);
                while (__stlxr(v40 - 1, v34));
                if (!v40)
                {
                  (*(void (**)(char *))(*(_QWORD *)v33 + 16))(v33);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v33);
                }
              }
            }
            goto LABEL_64;
          }
LABEL_65:
          if (v25 >= v24)
            goto LABEL_66;
        }
        if (v27 == 1668511074)
        {
          v41 = (int *)((char *)v96 + v25);
          v42 = v93.__begin_;
          v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_ - (char *)v93.__begin_) >> 3);
          if (v43 > *(unsigned int *)((char *)v96 + v25) && v43 > v41[1] && v43 > v41[2])
          {
            v44 = (char *)operator new(0x40uLL);
            *((_QWORD *)v44 + 1) = 0;
            v45 = (unint64_t *)(v44 + 8);
            *((_QWORD *)v44 + 2) = 0;
            *(_OWORD *)(v44 + 24) = 0u;
            v46 = (UTFRegex **)(v44 + 24);
            *(_QWORD *)v44 = &off_1EA933510;
            *(_OWORD *)(v44 + 40) = 0u;
            *((_QWORD *)v44 + 7) = 0;
            buf.__first_ = (std::__split_buffer<std::string>::pointer)(v44 + 24);
            buf.__begin_ = (std::__split_buffer<std::string>::pointer)v44;
            v83 = (std::__shared_weak_count *)v44;
            v47 = *v41;
            v48 = (UTFRegex *)operator new();
            v49 = v48;
            v50 = &v42[v47];
            v51 = (v50->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? (const char *)&v42[v47]
                : (const char *)v50->__r_.__value_.__r.__words[0];
            UTFRegex::UTFRegex(v48, v51);
            std::unique_ptr<UTFRegex>::reset[abi:ne180100](v46, v49);
            v52 = v41[1];
            v53 = v93.__begin_;
            v54 = (UTFRegex *)operator new();
            v55 = v54;
            v56 = &v53[v52];
            v57 = (v56->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? (const char *)&v53[v52]
                : (const char *)v56->__r_.__value_.__r.__words[0];
            UTFRegex::UTFRegex(v54, v57);
            std::unique_ptr<UTFRegex>::reset[abi:ne180100]((UTFRegex **)&v83[1].__shared_owners_, v55);
            v6 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
            std::string::operator=((std::string *)&v83[1].__shared_weak_owners_, &v93.__begin_[v41[2]]);
            std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](*(char ***)v88, (__int128 *)&buf);
            do
              v58 = __ldaxr(v45);
            while (__stlxr(v58 - 1, v45));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
        }
        else if (v27 == 1937011256)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)v96 + v25);
          end = v93.__end_;
          if (v93.__end_ >= v93.__end_cap_.__value_)
          {
            v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_ - (char *)v93.__begin_) >> 3);
            v60 = v59 + 1;
            if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v93.__end_cap_.__value_ - (char *)v93.__begin_) >> 3) > v60)
              v60 = 0x5555555555555556 * (((char *)v93.__end_cap_.__value_ - (char *)v93.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_cap_.__value_ - (char *)v93.__begin_) >> 3) >= 0x555555555555555)
              v61 = 0xAAAAAAAAAAAAAAALL;
            else
              v61 = v60;
            buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v93.__end_cap_;
            if (v61)
              v62 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v93.__end_cap_, v61);
            else
              v62 = 0;
            v63 = v62 + v59;
            buf.__first_ = v62;
            buf.__begin_ = v63;
            buf.__end_cap_.__value_ = &v62[v61];
            v64 = *(_OWORD *)__p;
            v63->__r_.__value_.__r.__words[2] = v92;
            *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
            __p[1] = 0;
            v92 = 0;
            __p[0] = 0;
            buf.__end_ = v63 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v93, &buf);
            v65 = v93.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&buf);
            v93.__end_ = v65;
            if (SHIBYTE(v92) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v29 = *(_OWORD *)__p;
            v93.__end_->__r_.__value_.__r.__words[2] = v92;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v29;
            v93.__end_ = end + 1;
          }
        }
LABEL_64:
        v25 += v26[1];
        v24 = v97;
        goto LABEL_65;
      }
LABEL_66:
      buf.__first_ = (std::__split_buffer<std::string>::pointer)&v93;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      v13 = v86;
    }
    v66 = v95;
    if (v95)
    {
      v67 = (unint64_t *)&v95->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  v69 = v90;
  if (v90)
  {
    v70 = (unint64_t *)&v90->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v6)
  {
    v72 = (unint64_t *)&v6->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v74 = (std::string **)(v13 + 8);
  v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v76 = (std::string *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0)
      v76 = *v74;
    v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__first_) = 136315394;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v76;
    WORD2(buf.__begin_) = 2048;
    *(double *)((char *)&buf.__begin_ + 6) = (double)((v77.__d_.__rep_ - v87.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v75, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(v13 + 31) < 0)
    v74 = (std::string **)*v74;
  v78.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v79, v74, (double)((v78.__d_.__rep_ - v87.__d_.__rep_) / 1000000) / 1000.0);
  if (v6)
  {
    v80 = (unint64_t *)&v6->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result.n128_u64[0] = v85;
  result.n128_u64[1] = (unint64_t)v5;
  *v84 = result;
  return result;
}

void sub_1DE910328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,std::__shared_weak_count *a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;

  MEMORY[0x1DF0ED014](v33, 0x1020C40BCB15178);
  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v37 = a32;
  if (a32)
  {
    p_shared_owners = (unint64_t *)&a32->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (a21)
  {
    v40 = (unint64_t *)&a21->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a19);
  PersistentModule::~PersistentModule(a16);
  if (a13)
  {
    v42 = (unint64_t *)&a13->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v44);
  if (a13)
  {
    v45 = (unint64_t *)&a13->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AmendPhonemesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AmendPhonemesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AmendPhonemesPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931508;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931508;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931508;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE910710(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931508;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  __n128 *v15;
  _QWORD *v16;
  std::chrono::steady_clock::time_point v17;
  const char *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 result;
  __int128 v22;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x140uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935110;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA921B80;
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = (_QWORD *)(a1 + 8);
  v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v15 = a3;
    v16 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v13;
    *(_DWORD *)buf = 136315394;
    v24 = v16;
    v25 = 2048;
    v26 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v15;
  }
  if (*(char *)(a1 + 31) < 0)
    v13 = (_QWORD *)*v13;
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v18, v13, (double)((v17.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v22 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE910A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<TrimUtterancePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TrimUtterancePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TrimUtterancePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930D78;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930D78;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930D78;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE910C18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930D78;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  __int128 v42;
  int64x2_t v43;
  uint64_t v44;
  _QWORD *shared_component;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  __int128 v97;
  int64x2_t v98;
  uint64_t v99;
  std::__shared_weak_count *size;
  unint64_t *v101;
  unint64_t v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  __n128 v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  __n128 *v110;
  __n128 *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  __n128 *v119;
  _QWORD *v120;
  _QWORD *v121;
  char *v122;
  __int128 v123;
  int64x2_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  char *v153;
  _QWORD *v154;
  _QWORD *v155;
  char *v156;
  __int128 v157;
  int64x2_t v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  void **v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  size_t v166;
  _BYTE *v167;
  const void *v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  __int128 v180;
  char *v181;
  _QWORD *v182;
  _QWORD *v183;
  char *v184;
  __int128 v185;
  int64x2_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *p_shared_weak_owners;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  _QWORD *v204;
  unint64_t *v205;
  unint64_t v206;
  __int128 v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  __int128 v230;
  unint64_t *v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  char *v235;
  __int128 v236;
  int64x2_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  __int128 v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  _OWORD *v245;
  _OWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  _QWORD *v255;
  _QWORD *v256;
  char *v257;
  __int128 v258;
  int64x2_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  __int128 v287;
  char *v288;
  _QWORD *v289;
  _QWORD *v290;
  char *v291;
  __int128 v292;
  int64x2_t v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  _QWORD *v300;
  NSObject *v301;
  _QWORD *v302;
  std::chrono::steady_clock::time_point v303;
  std::chrono::steady_clock::time_point v304;
  const char *v305;
  unint64_t *v306;
  unint64_t v307;
  __n128 result;
  __n128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  __int128 *v314;
  unint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  __n128 *v318;
  std::chrono::steady_clock::time_point v319;
  __int128 v320;
  uint64_t v321;
  __int128 v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count *v324;
  std::string __p;
  void *v326;
  uint64_t v327;
  unsigned __int8 v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  _BYTE buf[24];
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;

  v334 = *MEMORY[0x1E0C80C00];
  v320 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v319.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5 = operator new(0x1A8uLL);
  v6 = (unint64_t)v5;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1EA9349D8;
  v7 = (unint64_t)(v5 + 3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
  if (*((_QWORD *)&v320 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v5 + 3));
  *(_QWORD *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 304) = 0;
  *(_QWORD *)(v6 + 312) = 0;
  *(_QWORD *)(v6 + 24) = &off_1EA920F30;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  v318 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = v320;
  v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_INFO, "FE Init PronouncePersistentModule", buf, 2u);
  }
  v14 = (uint64_t *)(v6 + 320);
  v321 = v6 + 352;
  v316 = (_QWORD *)(v6 + 368);
  v317 = v6 + 400;
  Diagnostics::log(6, "FE Init PronouncePersistentModule", v13);
  SharedObjectPool::get_if<FrontendEnvironment>(&v329, v11);
  if (v329)
  {
    v314 = (__int128 *)(v6 + 320);
    v315 = v7;
    *(_QWORD *)(v6 + 416) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v329);
    v15 = operator new(0x38uLL);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = &off_1EA932B38;
    v15[5] = 0;
    v15[6] = 0;
    v15[4] = 0;
    v15[3] = &off_1EA91DAB0;
    *(_QWORD *)buf = v15 + 3;
    *(_QWORD *)&buf[8] = v15;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v321, (__int128 *)buf);
    v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = operator new(0x38uLL);
    v19[1] = 0;
    v19[2] = 0;
    *v19 = &off_1EA932B38;
    v19[5] = 0;
    v19[6] = 0;
    v19[4] = 0;
    v19[3] = &off_1EA91DAB0;
    *(_QWORD *)buf = v19 + 3;
    *(_QWORD *)&buf[8] = v19;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v6 + 336, (__int128 *)buf);
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(_QWORD **)v321;
    v24 = *(_OWORD *)(v6 + 336);
    v25 = *(_QWORD *)(v6 + 344);
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v23[3];
    v29 = (_QWORD *)v23[2];
    if ((unint64_t)v29 >= v28)
    {
      v311 = v24;
      v31 = v23[1];
      v32 = ((uint64_t)v29 - v31) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v34 = v28 - v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      v333 = (uint64_t)(v23 + 3);
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v35);
      v38 = &v36[16 * v32];
      *(_OWORD *)v38 = v311;
      v40 = (_QWORD *)v23[1];
      v39 = (_QWORD *)v23[2];
      if (v39 == v40)
      {
        v43 = vdupq_n_s64((unint64_t)v39);
        v41 = &v36[16 * v32];
      }
      else
      {
        v41 = &v36[16 * v32];
        do
        {
          v42 = *((_OWORD *)v39 - 1);
          v39 -= 2;
          *((_OWORD *)v41 - 1) = v42;
          v41 -= 16;
          *v39 = 0;
          v39[1] = 0;
        }
        while (v39 != v40);
        v43 = *(int64x2_t *)(v23 + 1);
      }
      v30 = v38 + 16;
      v23[1] = v41;
      v23[2] = v38 + 16;
      *(int64x2_t *)&buf[8] = v43;
      v44 = v23[3];
      v23[3] = &v36[16 * v37];
      v332 = v44;
      *(_QWORD *)buf = v43.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v29 = v24;
      v29[1] = v25;
      v30 = v29 + 2;
    }
    v23[2] = v30;
    shared_component = (_QWORD *)FrontendEnvironment::get_shared_component_instance<PronunciationDictionary>(v329);
    v46 = shared_component[1];
    *(_QWORD *)buf = *shared_component;
    *(_QWORD *)&buf[8] = v46;
    if (v46)
    {
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v6 + 320, (__int128 *)buf);
    v49 = *v14;
    v50 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_43;
    v51 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      if (!v49)
        goto LABEL_67;
    }
    else
    {
LABEL_43:
      if (!v49)
        goto LABEL_67;
    }
    v53 = *(_QWORD **)v321;
    v54 = *(_QWORD **)(*(_QWORD *)v321 + 16);
    v55 = *(_QWORD *)(*(_QWORD *)v321 + 24);
    if ((unint64_t)v54 >= v55)
    {
      v60 = v53[1];
      v61 = ((uint64_t)v54 - v60) >> 4;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v63 = v55 - v60;
      if (v63 >> 3 > v62)
        v62 = v63 >> 3;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
        v64 = 0xFFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      v333 = *(_QWORD *)v321 + 24;
      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v64);
      v67 = &v65[16 * v61];
      v68 = *(_OWORD *)v14;
      *(_OWORD *)v67 = *(_OWORD *)v14;
      if (*((_QWORD *)&v68 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v72 = (_QWORD *)v53[1];
      v71 = (_QWORD *)v53[2];
      if (v71 == v72)
      {
        v75 = vdupq_n_s64((unint64_t)v71);
        v73 = &v65[16 * v61];
      }
      else
      {
        v73 = &v65[16 * v61];
        do
        {
          v74 = *((_OWORD *)v71 - 1);
          v71 -= 2;
          *((_OWORD *)v73 - 1) = v74;
          v73 -= 16;
          *v71 = 0;
          v71[1] = 0;
        }
        while (v71 != v72);
        v75 = *(int64x2_t *)(v53 + 1);
      }
      v59 = v67 + 16;
      v53[1] = v73;
      v53[2] = v67 + 16;
      *(int64x2_t *)&buf[8] = v75;
      v76 = v53[3];
      v53[3] = &v65[16 * v66];
      v332 = v76;
      *(_QWORD *)buf = v75.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v54 = *(_QWORD *)(v6 + 320);
      v56 = *(_QWORD *)(v6 + 328);
      v54[1] = v56;
      if (v56)
      {
        v57 = (unint64_t *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = v54 + 2;
    }
    v53[2] = v59;
LABEL_67:
    v77 = v329;
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v329 + 96) + 32))(&v326, *(_QWORD *)(v329 + 96), 1634100856, 1);
    v78 = v328;
    if ((v328 & 0x80u) != 0)
      v78 = v327;
    if (v78)
    {
      std::allocate_shared[abi:ne180100]<PronounceAffix,std::allocator<PronounceAffix>,std::string &,std::shared_ptr<PronSourceList> &,void>(&__p, (uint64_t)&v326, *(_QWORD *)(v6 + 352), *(std::__shared_weak_count **)(v6 + 360));
      v79 = *(_QWORD **)v321;
      v80 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v81 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v83 = v79[3];
      v84 = (_OWORD *)v79[2];
      if ((unint64_t)v84 >= v83)
      {
        v312 = v80;
        v86 = v79[1];
        v87 = ((uint64_t)v84 - v86) >> 4;
        if ((unint64_t)(v87 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v88 = v83 - v86;
        v89 = v88 >> 3;
        if (v88 >> 3 <= (unint64_t)(v87 + 1))
          v89 = v87 + 1;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
          v90 = 0xFFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        v333 = (uint64_t)(v79 + 3);
        v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v90);
        v93 = &v91[16 * v87];
        *(_OWORD *)v93 = v312;
        v95 = (_QWORD *)v79[1];
        v94 = (_QWORD *)v79[2];
        if (v94 == v95)
        {
          v98 = vdupq_n_s64((unint64_t)v94);
          v96 = &v91[16 * v87];
        }
        else
        {
          v96 = &v91[16 * v87];
          do
          {
            v97 = *((_OWORD *)v94 - 1);
            v94 -= 2;
            *((_OWORD *)v96 - 1) = v97;
            v96 -= 16;
            *v94 = 0;
            v94[1] = 0;
          }
          while (v94 != v95);
          v98 = *(int64x2_t *)(v79 + 1);
        }
        v85 = v93 + 16;
        v79[1] = v96;
        v79[2] = v93 + 16;
        *(int64x2_t *)&buf[8] = v98;
        v99 = v79[3];
        v79[3] = &v91[16 * v92];
        v332 = v99;
        *(_QWORD *)buf = v98.i64[0];
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v84 = v80;
        v85 = v84 + 1;
      }
      v79[2] = v85;
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v101 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v77 = v329;
    }
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v77 + 96) + 32))(&__p, *(_QWORD *)(v77 + 96), 1886547821, 1);
    v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v103 = __p.__r_.__value_.__l.__size_;
    v313 = a1;
    if (v103)
    {
      v104 = (std::__shared_weak_count *)operator new(0x3280uLL);
      v104->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v104->__shared_owners_;
      v104->__shared_weak_owners_ = 0;
      v104->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9327B8;
      v104[1].__vftable = (std::__shared_weak_count_vtbl *)off_1EA91C4F0;
      EncoderDecoder::EncoderDecoder((uint64_t)&v104[1].__shared_owners_, &__p, 100, 0, 0, 0, 0.1);
      v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91D4F8;
      v106.n128_u64[0] = (unint64_t)&v104[1];
      v106.n128_u64[1] = (unint64_t)v104;
      v107 = *(_QWORD **)v321;
      do
        v108 = __ldxr(p_shared_owners);
      while (__stxr(v108 + 1, p_shared_owners));
      v109 = v107[3];
      v110 = (__n128 *)v107[2];
      if ((unint64_t)v110 >= v109)
      {
        v309 = v106;
        v112 = v107[1];
        v113 = ((uint64_t)v110 - v112) >> 4;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v115 = v109 - v112;
        if (v115 >> 3 > v114)
          v114 = v115 >> 3;
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0)
          v116 = 0xFFFFFFFFFFFFFFFLL;
        else
          v116 = v114;
        v333 = (uint64_t)(v107 + 3);
        v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v116);
        v119 = (__n128 *)&v117[16 * v113];
        *v119 = v309;
        v121 = (_QWORD *)v107[1];
        v120 = (_QWORD *)v107[2];
        if (v120 == v121)
        {
          v124 = vdupq_n_s64((unint64_t)v120);
          v122 = &v117[16 * v113];
        }
        else
        {
          v122 = &v117[16 * v113];
          do
          {
            v123 = *((_OWORD *)v120 - 1);
            v120 -= 2;
            *((_OWORD *)v122 - 1) = v123;
            v122 -= 16;
            *v120 = 0;
            v120[1] = 0;
          }
          while (v120 != v121);
          v124 = *(int64x2_t *)(v107 + 1);
        }
        v111 = v119 + 1;
        v107[1] = v122;
        v107[2] = v119 + 1;
        *(int64x2_t *)&buf[8] = v124;
        v125 = v107[3];
        v107[3] = &v117[16 * v118];
        v332 = v125;
        *(_QWORD *)buf = v124.i64[0];
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        v110->n128_u64[0] = (unint64_t)&v104[1];
        v110->n128_u64[1] = (unint64_t)v104;
        v111 = v110 + 1;
      }
      v107[2] = v111;
      v126 = *v14;
      if (*v14)
      {
        v323 = v104 + 1;
        v324 = v104;
        do
          v127 = __ldxr(p_shared_owners);
        while (__stxr(v127 + 1, p_shared_owners));
        (*(void (**)(uint64_t, std::__shared_weak_count **, __n128))(*(_QWORD *)v126 + 48))(v126, &v323, v106);
        v128 = v324;
        if (v324)
        {
          v129 = (unint64_t *)&v324->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
      }
      do
        v131 = __ldaxr(p_shared_owners);
      while (__stlxr(v131 - 1, p_shared_owners));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v104->__on_zero_shared)(v104, v106);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v132 = operator new(0x38uLL);
    v132[1] = 0;
    v132[2] = 0;
    *v132 = &off_1EA932B38;
    v132[5] = 0;
    v132[6] = 0;
    v132[4] = 0;
    v132[3] = &off_1EA91DAB0;
    *(_QWORD *)buf = v132 + 3;
    *(_QWORD *)&buf[8] = v132;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v316, (__int128 *)buf);
    v133 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v134 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = v329;
    v137 = FrontendEnvironment::get_shared_component_instance<TranslatePhonemes>(v329);
    v138 = (_QWORD *)*v316;
    v139 = operator new(0x28uLL);
    v140 = v139;
    v139[1] = 0;
    v139[2] = 0;
    *v139 = &off_1EA932FD0;
    v139[3] = &off_1EA91E1B0;
    v141 = v139 + 3;
    v139[4] = v137;
    v142 = v138[3];
    v143 = (_QWORD *)v138[2];
    if ((unint64_t)v143 >= v142)
    {
      v145 = v138[1];
      v146 = ((uint64_t)v143 - v145) >> 4;
      v147 = v146 + 1;
      if ((unint64_t)(v146 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v148 = v142 - v145;
      if (v148 >> 3 > v147)
        v147 = v148 >> 3;
      if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
        v149 = 0xFFFFFFFFFFFFFFFLL;
      else
        v149 = v147;
      v333 = (uint64_t)(v138 + 3);
      v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v149);
      *(_QWORD *)&v152 = v141;
      *((_QWORD *)&v152 + 1) = v140;
      v153 = &v150[16 * v146];
      *(_OWORD *)v153 = v152;
      v155 = (_QWORD *)v138[1];
      v154 = (_QWORD *)v138[2];
      if (v154 == v155)
      {
        v158 = vdupq_n_s64((unint64_t)v154);
        v156 = &v150[16 * v146];
      }
      else
      {
        v156 = &v150[16 * v146];
        do
        {
          v157 = *((_OWORD *)v154 - 1);
          v154 -= 2;
          *((_OWORD *)v156 - 1) = v157;
          v156 -= 16;
          *v154 = 0;
          v154[1] = 0;
        }
        while (v154 != v155);
        v158 = *(int64x2_t *)(v138 + 1);
      }
      v144 = v153 + 16;
      v138[1] = v156;
      v138[2] = v153 + 16;
      *(int64x2_t *)&buf[8] = v158;
      v159 = v138[3];
      v138[3] = &v150[16 * v151];
      v332 = v159;
      *(_QWORD *)buf = v158.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v143 = v141;
      v143[1] = v139;
      v144 = v143 + 2;
    }
    v138[2] = v144;
    v160 = (_QWORD *)*v316;
    v161 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v161 + 8) = 0u;
    *(_QWORD *)v161 = &off_1EA934770;
    *((_QWORD *)v161 + 3) = off_1EA920B50;
    *((_QWORD *)v161 + 4) = 0;
    v162 = (void **)(v161 + 32);
    *(_OWORD *)(v161 + 40) = 0u;
    v163 = *(unsigned __int8 *)(v136 + 47);
    if (*(char *)(v136 + 47) < 0)
    {
      v165 = *(_QWORD *)(v136 + 32);
      if (!v165)
        goto LABEL_163;
      if (v165 != 8)
      {
LABEL_150:
        if ((v163 & 0x80u) == 0)
          v166 = *(unsigned __int8 *)(v136 + 47);
        else
          v166 = *(_QWORD *)(v136 + 32);
        v167 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v166 + 9);
        if (buf[23] < 0)
          v167 = *(_BYTE **)buf;
        if (v166)
        {
          if (*(char *)(v136 + 47) >= 0)
            v168 = (const void *)(v136 + 24);
          else
            v168 = *(const void **)(v136 + 24);
          memmove(v167, v168, v166);
        }
        strcpy(&v167[v166], "-internal");
        if (v161[55] < 0)
          operator delete(*v162);
        *(_OWORD *)v162 = *(_OWORD *)buf;
        *((_QWORD *)v161 + 6) = *(_QWORD *)&buf[16];
        v169 = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v136);
        goto LABEL_164;
      }
      v164 = *(_QWORD **)(v136 + 24);
    }
    else
    {
      if (!*(_BYTE *)(v136 + 47))
        goto LABEL_163;
      v164 = (_QWORD *)(v136 + 24);
      if (v163 != 8)
        goto LABEL_150;
    }
    if (*v164 != 0x6C616E7265746E69)
      goto LABEL_150;
LABEL_163:
    v169 = 0;
LABEL_164:
    *((_QWORD *)v161 + 7) = v169;
    v170 = v160[3];
    v171 = (_QWORD *)v160[2];
    if ((unint64_t)v171 >= v170)
    {
      v173 = v160[1];
      v174 = ((uint64_t)v171 - v173) >> 4;
      v175 = v174 + 1;
      if ((unint64_t)(v174 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v176 = v170 - v173;
      if (v176 >> 3 > v175)
        v175 = v176 >> 3;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF0)
        v177 = 0xFFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      v333 = (uint64_t)(v160 + 3);
      v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v177);
      *(_QWORD *)&v180 = v161 + 24;
      *((_QWORD *)&v180 + 1) = v161;
      v181 = &v178[16 * v174];
      *(_OWORD *)v181 = v180;
      v183 = (_QWORD *)v160[1];
      v182 = (_QWORD *)v160[2];
      if (v182 == v183)
      {
        v186 = vdupq_n_s64((unint64_t)v182);
        v184 = &v178[16 * v174];
      }
      else
      {
        v184 = &v178[16 * v174];
        do
        {
          v185 = *((_OWORD *)v182 - 1);
          v182 -= 2;
          *((_OWORD *)v184 - 1) = v185;
          v184 -= 16;
          *v182 = 0;
          v182[1] = 0;
        }
        while (v182 != v183);
        v186 = *(int64x2_t *)(v160 + 1);
      }
      v172 = v181 + 16;
      v160[1] = v184;
      v160[2] = v181 + 16;
      *(int64x2_t *)&buf[8] = v186;
      v187 = v160[3];
      v160[3] = &v178[16 * v179];
      v332 = v187;
      *(_QWORD *)buf = v186.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v171 = v161 + 24;
      v171[1] = v161;
      v172 = v171 + 2;
    }
    v160[2] = v172;
    v188 = operator new(0x40uLL);
    v189 = v188;
    v188[1] = 0;
    v188[2] = 0;
    *v188 = &off_1EA933008;
    v190 = *(_QWORD *)(v6 + 320);
    v191 = *(std::__shared_weak_count **)(v6 + 328);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
    if (v191)
    {
      v192 = (unint64_t *)&v191->__shared_owners_;
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    v194 = *(_QWORD *)(v6 + 352);
    v195 = *(std::__shared_weak_count **)(v6 + 360);
    if (v195)
    {
      v196 = (unint64_t *)&v195->__shared_owners_;
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 1, v196));
    }
    v188[3] = &off_1EA91E1F8;
    v188[4] = v190;
    v188[5] = v191;
    if (v191)
    {
      p_shared_weak_owners = (unint64_t *)&v191->__shared_weak_owners_;
      do
        v199 = __ldxr(p_shared_weak_owners);
      while (__stxr(v199 + 1, p_shared_weak_owners));
    }
    v188[6] = v194;
    v188[7] = v195;
    if (v195)
    {
      v200 = (unint64_t *)&v195->__shared_weak_owners_;
      do
        v201 = __ldxr(v200);
      while (__stxr(v201 + 1, v200));
      v202 = (unint64_t *)&v195->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    v7 = v315;
    v204 = (_QWORD *)(v6 + 400);
    if (v191)
    {
      v205 = (unint64_t *)&v191->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    *(_QWORD *)&v207 = v189 + 3;
    *((_QWORD *)&v207 + 1) = v189;
    v208 = *(std::__shared_weak_count **)(v6 + 392);
    *(_OWORD *)(v6 + 384) = v207;
    if (v208)
    {
      v209 = (unint64_t *)&v208->__shared_owners_;
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
    v211 = operator new(0x38uLL);
    v211[1] = 0;
    v211[2] = 0;
    *v211 = &off_1EA932B38;
    v211[5] = 0;
    v211[6] = 0;
    v211[4] = 0;
    v211[3] = &off_1EA91DAB0;
    *(_QWORD *)buf = v211 + 3;
    *(_QWORD *)&buf[8] = v211;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v317, (__int128 *)buf);
    v212 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v213 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    if (*(_QWORD *)v314)
    {
      v215 = *(_QWORD **)v317;
      v216 = *(_QWORD **)(*(_QWORD *)v317 + 16);
      v217 = *(_QWORD *)(*(_QWORD *)v317 + 24);
      if ((unint64_t)v216 >= v217)
      {
        v222 = v215[1];
        v223 = ((uint64_t)v216 - v222) >> 4;
        v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v225 = v217 - v222;
        if (v225 >> 3 > v224)
          v224 = v225 >> 3;
        if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0)
          v226 = 0xFFFFFFFFFFFFFFFLL;
        else
          v226 = v224;
        v333 = *(_QWORD *)v317 + 24;
        v227 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v226);
        v229 = &v227[16 * v223];
        v230 = *v314;
        *(_OWORD *)v229 = *v314;
        if (*((_QWORD *)&v230 + 1))
        {
          v231 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v232 = __ldxr(v231);
          while (__stxr(v232 + 1, v231));
        }
        v234 = (_QWORD *)v215[1];
        v233 = (_QWORD *)v215[2];
        v7 = v315;
        if (v233 == v234)
        {
          v237 = vdupq_n_s64((unint64_t)v233);
          v235 = &v227[16 * v223];
          v204 = (_QWORD *)(v6 + 400);
        }
        else
        {
          v235 = &v227[16 * v223];
          v204 = (_QWORD *)(v6 + 400);
          do
          {
            v236 = *((_OWORD *)v233 - 1);
            v233 -= 2;
            *((_OWORD *)v235 - 1) = v236;
            v235 -= 16;
            *v233 = 0;
            v233[1] = 0;
          }
          while (v233 != v234);
          v237 = *(int64x2_t *)(v215 + 1);
        }
        v221 = v229 + 16;
        v215[1] = v235;
        v215[2] = v229 + 16;
        *(int64x2_t *)&buf[8] = v237;
        v238 = v215[3];
        v215[3] = &v227[16 * v228];
        v332 = v238;
        *(_QWORD *)buf = v237.i64[0];
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v216 = *(_QWORD *)v314;
        v218 = *(_QWORD *)(v6 + 328);
        v216[1] = v218;
        if (v218)
        {
          v219 = (unint64_t *)(v218 + 8);
          do
            v220 = __ldxr(v219);
          while (__stxr(v220 + 1, v219));
        }
        v221 = v216 + 2;
      }
      v215[2] = v221;
    }
    v239 = v328;
    if ((v328 & 0x80u) != 0)
      v239 = v327;
    if (v239)
    {
      std::allocate_shared[abi:ne180100]<PronounceAffix,std::allocator<PronounceAffix>,std::string &,std::shared_ptr<PronSourceList> &,void>(&v322, (uint64_t)&v326, *(_QWORD *)(v6 + 400), *(std::__shared_weak_count **)(v6 + 408));
      v240 = (_QWORD *)*v204;
      v241 = v322;
      if (*((_QWORD *)&v322 + 1))
      {
        v242 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
        do
          v243 = __ldxr(v242);
        while (__stxr(v243 + 1, v242));
      }
      v244 = v240[3];
      v245 = (_OWORD *)v240[2];
      if ((unint64_t)v245 >= v244)
      {
        v310 = v241;
        v247 = v240[1];
        v248 = ((uint64_t)v245 - v247) >> 4;
        if ((unint64_t)(v248 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v249 = v244 - v247;
        v250 = v249 >> 3;
        if (v249 >> 3 <= (unint64_t)(v248 + 1))
          v250 = v248 + 1;
        if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF0)
          v251 = 0xFFFFFFFFFFFFFFFLL;
        else
          v251 = v250;
        v333 = (uint64_t)(v240 + 3);
        v252 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v251);
        v254 = &v252[16 * v248];
        *(_OWORD *)v254 = v310;
        v256 = (_QWORD *)v240[1];
        v255 = (_QWORD *)v240[2];
        if (v255 == v256)
        {
          v259 = vdupq_n_s64((unint64_t)v255);
          v257 = &v252[16 * v248];
        }
        else
        {
          v257 = &v252[16 * v248];
          do
          {
            v258 = *((_OWORD *)v255 - 1);
            v255 -= 2;
            *((_OWORD *)v257 - 1) = v258;
            v257 -= 16;
            *v255 = 0;
            v255[1] = 0;
          }
          while (v255 != v256);
          v259 = *(int64x2_t *)(v240 + 1);
        }
        v246 = v254 + 16;
        v240[1] = v257;
        v240[2] = v254 + 16;
        *(int64x2_t *)&buf[8] = v259;
        v260 = v240[3];
        v240[3] = &v252[16 * v253];
        v332 = v260;
        *(_QWORD *)buf = v259.i64[0];
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v245 = v241;
        v246 = v245 + 1;
      }
      v240[2] = v246;
      v261 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
      if (*((_QWORD *)&v322 + 1))
      {
        v262 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
        do
          v263 = __ldaxr(v262);
        while (__stlxr(v263 - 1, v262));
        if (!v263)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
    }
    v264 = (_QWORD *)*v204;
    v265 = operator new(0x38uLL);
    v266 = v265;
    v265[1] = 0;
    v265[2] = 0;
    *v265 = &off_1EA932BA8;
    v267 = *(_QWORD *)(v6 + 384);
    v268 = *(std::__shared_weak_count **)(v6 + 392);
    if (v268)
    {
      v269 = (unint64_t *)&v268->__shared_owners_;
      do
        v270 = __ldxr(v269);
      while (__stxr(v270 + 1, v269));
      v271 = *(_QWORD *)(v6 + 416);
      v265[3] = &off_1EA91DB40;
      v265[4] = v267;
      v272 = (unint64_t *)&v268->__shared_weak_owners_;
      v265[5] = v268;
      do
        v273 = __ldxr(v272);
      while (__stxr(v273 + 1, v272));
      v265[6] = v271;
      v274 = (unint64_t *)&v268->__shared_owners_;
      do
        v275 = __ldaxr(v274);
      while (__stlxr(v275 - 1, v274));
      if (!v275)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    else
    {
      v276 = *(_QWORD *)(v6 + 416);
      v265[3] = &off_1EA91DB40;
      v265[4] = v267;
      v265[5] = 0;
      v265[6] = v276;
    }
    v277 = v264[3];
    v278 = (_QWORD *)v264[2];
    if ((unint64_t)v278 >= v277)
    {
      v280 = v264[1];
      v281 = ((uint64_t)v278 - v280) >> 4;
      v282 = v281 + 1;
      if ((unint64_t)(v281 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v283 = v277 - v280;
      if (v283 >> 3 > v282)
        v282 = v283 >> 3;
      if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF0)
        v284 = 0xFFFFFFFFFFFFFFFLL;
      else
        v284 = v282;
      v333 = (uint64_t)(v264 + 3);
      v285 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v284);
      *(_QWORD *)&v287 = v266 + 3;
      *((_QWORD *)&v287 + 1) = v266;
      v288 = &v285[16 * v281];
      *(_OWORD *)v288 = v287;
      v290 = (_QWORD *)v264[1];
      v289 = (_QWORD *)v264[2];
      if (v289 == v290)
      {
        v293 = vdupq_n_s64((unint64_t)v289);
        v291 = &v285[16 * v281];
      }
      else
      {
        v291 = &v285[16 * v281];
        do
        {
          v292 = *((_OWORD *)v289 - 1);
          v289 -= 2;
          *((_OWORD *)v291 - 1) = v292;
          v291 -= 16;
          *v289 = 0;
          v289[1] = 0;
        }
        while (v289 != v290);
        v293 = *(int64x2_t *)(v264 + 1);
      }
      v279 = v288 + 16;
      v264[1] = v291;
      v264[2] = v288 + 16;
      *(int64x2_t *)&buf[8] = v293;
      v294 = v264[3];
      v264[3] = &v285[16 * v286];
      v332 = v294;
      *(_QWORD *)buf = v293.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v278 = v266 + 3;
      v278[1] = v266;
      v279 = v278 + 2;
    }
    v264[2] = v279;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    a1 = v313;
    if ((char)v328 < 0)
      operator delete(v326);
  }
  v295 = v330;
  if (v330)
  {
    v296 = (unint64_t *)&v330->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  if (v8)
  {
    v298 = (unint64_t *)&v8->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v300 = (_QWORD *)(a1 + 8);
  v301 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v302 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v302 = (_QWORD *)*v300;
    v303.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v302;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v303.__d_.__rep_ - v319.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v301, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v300 = (_QWORD *)*v300;
  v304.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v305, v300, (double)((v304.__d_.__rep_ - v319.__d_.__rep_) / 1000000) / 1000.0);
  if (v8)
  {
    v306 = (unint64_t *)&v8->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result.n128_u64[0] = v7;
  result.n128_u64[1] = v6;
  *v318 = result;
  return result;
}

void sub_1DE9120FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  do
    v42 = __ldaxr(v37);
  while (__stlxr(v42 - 1, v37));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 161) < 0)
    operator delete(*(void **)(v38 - 184));
  v43 = *(std::__shared_weak_count **)(v38 - 152);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v35[16]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a19);
  PersistentModule::~PersistentModule(a20);
  if (a18)
  {
    v46 = (unint64_t *)&a18->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v48);
  if (a18)
  {
    v49 = (unint64_t *)&a18->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PronouncePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9349D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronouncePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9349D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronouncePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931718;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931718;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931718;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE912648(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931718;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  __n128 *v15;
  _QWORD *v16;
  std::chrono::steady_clock::time_point v17;
  const char *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 result;
  __int128 v22;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x140uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9353B0;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA921EE0;
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = (_QWORD *)(a1 + 8);
  v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v15 = a3;
    v16 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v13;
    *(_DWORD *)buf = 136315394;
    v24 = v16;
    v25 = 2048;
    v26 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v15;
  }
  if (*(char *)(a1 + 31) < 0)
    v13 = (_QWORD *)*v13;
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v18, v13, (double)((v17.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v22 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE912940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ClassifySentencePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9353B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ClassifySentencePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9353B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ClassifySentencePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930C70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930C70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930C70;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE912B50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930C70;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type *v23;
  NSObject *v24;
  unint64_t v25;
  __n128 *v26;
  std::string::size_type v27;
  std::chrono::steady_clock::time_point v28;
  std::chrono::steady_clock::time_point v29;
  const char *v30;
  unint64_t *v31;
  unint64_t v32;
  __n128 result;
  __int128 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string buf;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v34 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x150uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9347E0;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v34 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = &off_1EA920BB0;
  v7[41] = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init PhrasingPersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "FE Init PhrasingPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(&v35, v34);
  if (v35)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v35 + 96) + 32))(&buf, *(_QWORD *)(v35 + 96), 1885893235, 0);
    v13 = operator new(0x3278uLL);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = &off_1EA932AC8;
    *(_QWORD *)&v14 = EncoderDecoder::EncoderDecoder((uint64_t)(v13 + 3), &buf, 100, 0, 0, 0, 0.1);
    *((_QWORD *)&v14 + 1) = v13;
    v15 = (std::__shared_weak_count *)v7[41];
    *((_OWORD *)v7 + 20) = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v18 = v36;
  if (v36)
  {
    v19 = (unint64_t *)&v36->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*((_QWORD *)&v34 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v23 = (std::string::size_type *)(a1 + 8);
  v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v25 = v8;
    v26 = a3;
    v27 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v27 = *v23;
    v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v28.__d_.__rep_ - v5.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v24, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a3 = v26;
    v8 = v25;
  }
  if (*(char *)(a1 + 31) < 0)
    v23 = (std::string::size_type *)*v23;
  v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v30, v23, (double)((v29.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v34 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE912FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  void **v21;
  std::__shared_weak_count *v22;
  void *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;

  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  if (a19 < 0)
    operator delete(__p);
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v20[13].__shared_owners_);
  PersistentModule::~PersistentModule(v21);
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v29);
  if (v19)
  {
    v30 = (unint64_t *)&v19->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PhrasingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9347E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PhrasingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9347E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PhrasingPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9312A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9312A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9312A0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE913260(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9312A0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  _QWORD *v34;
  std::chrono::steady_clock::time_point v35;
  std::chrono::steady_clock::time_point v36;
  const char *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 result;
  __n128 *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _BYTE buf[32];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v43 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934F88;
  if (*((_QWORD *)&v43 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Module::Module((Module *)(v6 + 3));
  v41 = a3;
  v42 = v9;
  v6[37] = 0;
  v6[38] = 0;
  v6[39] = 0;
  v6[40] = 0;
  v6[3] = &off_1EA921858;
  v6[41] = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_INFO, "FE Init PartOfSpeechPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PartOfSpeechPersistentModule", v11);
  SharedObjectPool::get_if<FrontendEnvironment>(&v44, v43);
  if (v44)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v44 + 96) + 16))(buf, *(_QWORD *)(v44 + 96), 1886352237, 0);
    v12 = (char *)operator new(0xE0uLL);
    v13 = v12;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &off_1EA935D50;
    *(_OWORD *)(v12 + 24) = 0u;
    v14 = v12 + 24;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    v15 = *(_QWORD *)&buf[8];
    *((_QWORD *)v12 + 9) = *(_QWORD *)buf;
    *((_QWORD *)v12 + 10) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(_OWORD *)&buf[16];
    *(_OWORD *)(v12 + 200) = 0uLL;
    *(_OWORD *)(v12 + 88) = v18;
    *(_OWORD *)(v12 + 152) = 0uLL;
    *(_OWORD *)(v12 + 168) = 0uLL;
    *(_OWORD *)(v12 + 184) = 0uLL;
    *((_QWORD *)v12 + 27) = 0;
    v19 = *((_QWORD *)v12 + 11);
    *((_QWORD *)v12 + 13) = v19;
    *((_QWORD *)v12 + 14) = v19 + *(unsigned int *)(v19 + 16);
    *((_QWORD *)v12 + 15) = v19 + *(unsigned int *)(v19 + 20);
    *((_QWORD *)v12 + 16) = v19 + *(unsigned int *)(v19 + 24);
    *((_QWORD *)v12 + 17) = v19 + *(unsigned int *)(v19 + 28);
    *((_QWORD *)v12 + 18) = v19 + *(unsigned int *)(v19 + 32);
    std::vector<int>::resize((std::vector<int> *)(v12 + 200), *(unsigned __int8 *)(v19 + 4));
    *(_QWORD *)&v20 = v14;
    *((_QWORD *)&v20 + 1) = v13;
    v21 = (std::__shared_weak_count *)v6[41];
    *((_OWORD *)v6 + 20) = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(std::__shared_weak_count **)&buf[8];
    v6[42] = 3;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v27 = v45;
  if (v45)
  {
    v28 = (unint64_t *)&v45->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (*((_QWORD *)&v43 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v43 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v32 = (_QWORD *)(a1 + 8);
  v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v34 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v34 = (_QWORD *)*v32;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v34;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v35.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v32 = (_QWORD *)*v32;
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v37, v32, (double)((v36.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v43 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v43 + 1));
    }
  }
  result.n128_u64[0] = v42;
  result.n128_u64[1] = (unint64_t)v6;
  *v41 = result;
  return result;
}

void sub_1DE913780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, __int128 a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void *v25;
  void *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;

  v25 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v20 + 208) = v25;
    operator delete(v25);
  }
  if (*(char *)(v20 + 199) < 0)
    operator delete(*(void **)(v20 + 176));
  if (*(char *)(v20 + 175) < 0)
    operator delete(*v19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22);
  std::deque<std::string>::~deque[abi:ne180100](v21);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v20);
  operator delete(v26);
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a15)
  {
    v29 = (unint64_t *)&a15->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v18[13].__shared_owners_);
  PersistentModule::~PersistentModule(a12);
  if (v17)
  {
    v31 = (unint64_t *)&v17->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v33);
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PartOfSpeechPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PartOfSpeechPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PartOfSpeechPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930DD0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930DD0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930DD0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE913A7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930DD0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  unint64_t v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  uint8_t buf[4];
  _QWORD *v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x140uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934A10;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA920FA0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init PunctuatePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PunctuatePersistentModule", v12);
  if (*((_QWORD *)&v26 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = (_QWORD *)(a1 + 8);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v17 = v8;
    v18 = a3;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v15;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    v28 = v19;
    v29 = 2048;
    v30 = (double)((v20.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v18;
    v8 = v17;
  }
  if (*(char *)(a1 + 31) < 0)
    v15 = (_QWORD *)*v15;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v15, (double)((v21.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE913DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PunctuatePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PunctuatePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PunctuatePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930D20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930D20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930D20;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE913FFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930D20;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  const FrontendEnvironment *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  unint64_t v27;
  __n128 *v28;
  _QWORD *v29;
  std::chrono::steady_clock::time_point v30;
  std::chrono::steady_clock::time_point v31;
  const char *v32;
  unint64_t *v33;
  unint64_t v34;
  __n128 result;
  __int128 v36;
  _BYTE buf[22];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x150uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9349A0;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v36 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = &off_1EA920EA8;
  v7[41] = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init NormalizePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init NormalizePersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v36);
  v13 = *(const FrontendEnvironment **)buf;
  if (*(_QWORD *)buf)
  {
    v14 = operator new(0x98uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1EA933388;
    NormalizerEngine::NormalizerEngine((NormalizerEngine *)(v14 + 3), v13);
    *(_QWORD *)&v16 = v15;
    *((_QWORD *)&v16 + 1) = v14;
    v17 = (std::__shared_weak_count *)v7[41];
    *((_OWORD *)v7 + 20) = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*((_QWORD *)&v36 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = (_QWORD *)(a1 + 8);
  v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v27 = v8;
    v28 = a3;
    v29 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v29 = (_QWORD *)*v25;
    v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v29;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v30.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v26, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v28;
    v8 = v27;
  }
  if (*(char *)(a1 + 31) < 0)
    v25 = (_QWORD *)*v25;
  v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v32, v25, (double)((v31.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v36 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE914430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void **v15;
  std::__shared_weak_count *v16;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v14[13].__shared_owners_);
  PersistentModule::~PersistentModule(v15);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v23);
  if (v13)
  {
    v24 = (unint64_t *)&v13->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NormalizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9349A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NormalizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9349A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NormalizePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931400;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931400;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931400;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9146AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931400;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  unint64_t v34;
  __n128 *v35;
  _QWORD *v36;
  std::chrono::steady_clock::time_point v37;
  std::chrono::steady_clock::time_point v38;
  const char *v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 result;
  void *exception;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *v47;
  _BYTE buf[32];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v44 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x198uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935068;
  v8 = (unint64_t)(v6 + 3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Module::Module((Module *)(v6 + 3));
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 24) = &off_1EA921A30;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_QWORD *)(v7 + 352) = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v12 = &unk_1F044B000;
  v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_INFO, "FE Init OverrideRulesPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init OverrideRulesPersistentModule", v14);
  SharedObjectPool::get_if<FrontendEnvironment>(&v45, v44);
  if (v45)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 96) + 16))(buf, *(_QWORD *)(v45 + 96), 1870033522, 1);
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v7 + 320), *(uint64_t *)buf, *(uint64_t *)&buf[8]);
    *(_OWORD *)(v7 + 336) = *(_OWORD *)&buf[16];
    v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (*(_QWORD *)(v7 + 320))
    {
      MemoryMap::madvise(*(MemoryMap **)(v7 + 336), *(_QWORD *)(v7 + 344), 1);
      v18 = *(unsigned int **)(v7 + 336);
      *(_QWORD *)(v7 + 352) = v18;
      if (*(unsigned __int16 *)v18 >= 3u)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)buf, "Override rules version %d.%d is incompatible with code version %d.%d", **(unsigned __int16 **)(v7 + 352), *(unsigned __int16 *)(*(_QWORD *)(v7 + 352) + 2), 2, 0);
        MEMORY[0x1DF0EC99C](exception, buf);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      *(_QWORD *)(v7 + 360) = (char *)v18 + v18[2];
      *(_QWORD *)(v7 + 368) = (char *)v18 + v18[3];
      *(_QWORD *)(v7 + 376) = (char *)v18 + v18[4];
      *(_QWORD *)(v7 + 384) = (char *)v18 + v18[5];
      v19 = *(_QWORD *)(v45 + 184);
      *(_QWORD *)(v7 + 392) = FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v19);
      v21 = *(_QWORD **)(v19 + 168);
      v20 = (_QWORD *)(v19 + 168);
      {
        if (v20 == v22)
          v23 = 0;
        else
          v23 = v22[5] + 8;
        v12 = &unk_1F044B000;
      }
      else
      {
        *(_QWORD *)buf = &v47;
        v25 = (_QWORD *)operator new();
        v25[3] = 0;
        v25[2] = 0;
        *v25 = &off_1EA922E68;
        v25[1] = v25 + 2;
        v26 = v24[5];
        v24[5] = (uint64_t)v25;
        v12 = &unk_1F044B000;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v25 = (_QWORD *)v24[5];
        }
        v23 = (uint64_t)(v25 + 1);
      }
      *(_QWORD *)(v7 + 400) = v23;
    }
  }
  v27 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (*((_QWORD *)&v44 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v32 = (_QWORD *)(a1 + 8);
  v33 = *((_QWORD *)v12 + 442);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    v34 = v8;
    v35 = a3;
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v32;
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v36;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v37.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v35;
    v8 = v34;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v32 = (_QWORD *)*v32;
  v38.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v39, v32, (double)((v38.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (v9)
  {
    v40 = (unint64_t *)&v9->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_1DE914CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  void **v24;
  void *v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v26)
  {
LABEL_6:
    if (a16)
    {
      p_shared_owners = (unint64_t *)&a16->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
        std::__shared_weak_count::__release_weak(a16);
      }
    }
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27);
    PersistentModule::~PersistentModule(v24);
    if (v28)
    {
      v32 = (unint64_t *)&v28->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    std::__shared_weak_count::~__shared_weak_count(v23);
    operator delete(v34);
    if (v28)
    {
      v35 = (unint64_t *)&v28->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<OverrideRulesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OverrideRulesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<OverrideRulesPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930CC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930CC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930CC8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE914F5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930CC8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  _DWORD *v20;
  int v25;
  int v26;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  _QWORD *v39;
  std::chrono::steady_clock::time_point v40;
  std::chrono::steady_clock::time_point v41;
  const char *v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 result;
  void *exception;
  const char *v47;
  __n128 *v48;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint8_t buf[4];
  _QWORD *v54;
  __int16 v55;
  double v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v50 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x150uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934850;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v50 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  rep = v5.__d_.__rep_;
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = &off_1EA920C68;
  v7[41] = 0;
  v48 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init TokenizePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init TokenizePersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(&v51, v50);
  v13 = v51;
  if (v51)
  {
    v14 = (char *)operator new(0x88uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_1EA933190;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v14 + 3, &byte_1DEBD87CE);
    *((_QWORD *)v14 + 12) = 0;
    *((_QWORD *)v14 + 10) = 0;
    *((_OWORD *)v14 + 3) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    v14[88] = 1;
    *((_QWORD *)v14 + 13) = 0;
    *((_QWORD *)v14 + 14) = 0;
    *(_DWORD *)(v14 + 89) = 0;
    UTFTransliterator::UTFTransliterator((uint64_t *)v14 + 15, "A", ":");
    UTFTransliterator::UTFTransliterator((uint64_t *)v14 + 16, (char *)L"NonAlphaNorm", ":");
    v15 = *(char *)(v13 + 23);
    if (v15 < 0)
    {
      if (*(_QWORD *)(v13 + 8) != 5)
        goto LABEL_80;
      v20 = *(_DWORD **)v13;
      if (**(_DWORD **)v13 == 1429040741 && *(_BYTE *)(*(_QWORD *)v13 + 4) == 83)
        goto LABEL_51;
      if (*v20 == 1177383526 && *((_BYTE *)v20 + 4) == 82)
        goto LABEL_51;
      if (*v20 == 1160606565 && *((_BYTE *)v20 + 4) == 83)
        goto LABEL_51;
      if (*v20 == 1395488371 && *((_BYTE *)v20 + 4) == 69)
        goto LABEL_51;
    }
    else
    {
      if (v15 != 5)
        goto LABEL_80;
      v16 = *(_DWORD *)v13 == 1429040741 && *(_BYTE *)(v13 + 4) == 83;
      if (v16
        || (*(_DWORD *)v13 == 1177383526 ? (v17 = *(_BYTE *)(v13 + 4) == 82) : (v17 = 0),
            v17
         || (*(_DWORD *)v13 == 1160606565 ? (v18 = *(_BYTE *)(v13 + 4) == 83) : (v18 = 0),
             v18
          || (*(_DWORD *)v13 == 1395488371 ? (v19 = *(_BYTE *)(v13 + 4) == 69) : (v19 = 0), v20 = (_DWORD *)v13, v19))))
      {
LABEL_51:
        *(_QWORD *)&v28 = v14 + 24;
        *((_QWORD *)&v28 + 1) = v14;
        v29 = (std::__shared_weak_count *)v7[41];
        *((_OWORD *)v7 + 20) = v28;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        goto LABEL_56;
      }
    }
    v25 = *v20;
    v26 = *((unsigned __int8 *)v20 + 4);
    if (v25 != 1227714149 || v26 != 78)
    {
LABEL_80:
      exception = __cxa_allocate_exception(0x10uLL);
      if (*(char *)(v13 + 23) >= 0)
        v47 = (const char *)v13;
      else
        v47 = *(const char **)v13;
      MEMORY[0x1DF0EC99C](exception, buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    goto LABEL_51;
  }
LABEL_56:
  v32 = v52;
  if (v52)
  {
    v33 = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (*((_QWORD *)&v50 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v37 = (_QWORD *)(a1 + 8);
  v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v39 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v39 = (_QWORD *)*v37;
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    v54 = v39;
    v55 = 2048;
    v56 = (double)((v40.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v37 = (_QWORD *)*v37;
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v42, v37, (double)((v41.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v50 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *v48 = result;
  return result;
}

void sub_1DE915598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  void *v26;
  int v27;
  void **v28;
  void **v29;
  UTFTransliterator *v30;
  UTFTransliterator *v31;
  void *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      UTFTransliterator::~UTFTransliterator(v31);
      UTFTransliterator::~UTFTransliterator(v30);
      if (*(char *)(v25 + 119) < 0)
        operator delete(*v28);
      if (*(char *)(v25 + 47) < 0)
        operator delete(*v29);
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v25);
      operator delete(v33);
      if (a17)
      {
        p_shared_owners = (unint64_t *)&a17->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
          std::__shared_weak_count::__release_weak(a17);
        }
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v24[13].__shared_owners_);
      PersistentModule::~PersistentModule(a12);
      if (v23)
      {
        v36 = (unint64_t *)&v23->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      std::__shared_weak_count::~__shared_weak_count(v24);
      operator delete(v38);
      if (v23)
      {
        v39 = (unint64_t *)&v23->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<TokenizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TokenizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TokenizePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9315B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9315B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9315B8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE915894(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9315B8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD *v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  __n128 *v35;
  __int128 v36;
  void *v37;
  void **v38;
  _BYTE buf[22];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v36 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x150uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9351F0;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v36 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA921CA8;
  v35 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init SwitchLanguagePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init SwitchLanguagePersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v36);
  if (*(_QWORD *)buf)
  {
    v13 = *(_QWORD *)(*(_QWORD *)buf + 184);
    v7[40] = FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v13);
    v15 = *(_QWORD **)(v13 + 168);
    v14 = (_QWORD *)(v13 + 168);
    {
      if (v14 == v16)
        v17 = 0;
      else
        v17 = v16[5] + 8;
    }
    else
    {
      v38 = &v37;
      v19 = (_QWORD *)operator new();
      v19[3] = 0;
      v19[2] = 0;
      *v19 = &off_1EA922E68;
      v19[1] = v19 + 2;
      v20 = v18[5];
      v18[5] = (uint64_t)v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v19 = (_QWORD *)v18[5];
      }
      v17 = (uint64_t)(v19 + 1);
    }
    v7[41] = v17;
  }
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (*((_QWORD *)&v36 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v26 = (_QWORD *)(a1 + 8);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v28 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v28 = (_QWORD *)*v26;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v29.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v26 = (_QWORD *)*v26;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v31, v26, (double)((v30.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v36 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *v35 = result;
  return result;
}

void sub_1DE915D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void **v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;

  PersistentModule::~PersistentModule(v19);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v23);
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<SwitchLanguagePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9351F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SwitchLanguagePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9351F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SwitchLanguagePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930B10;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930B10;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930B10;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE915F6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930B10;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  unint64_t v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  uint8_t buf[4];
  _QWORD *v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x150uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9340A8;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA91FF00;
  DetectSSML::instance((DetectSSML *)(v7 + 40));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init ParsePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init ParsePersistentModule", v12);
  if (*((_QWORD *)&v26 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = (_QWORD *)(a1 + 8);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v17 = v8;
    v18 = a3;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v15;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    v28 = v19;
    v29 = 2048;
    v30 = (double)((v20.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v18;
    v8 = v17;
  }
  if (*(char *)(a1 + 31) < 0)
    v15 = (_QWORD *)*v15;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v15, (double)((v21.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE9162E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void **v13;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;

  PersistentModule::~PersistentModule(v13);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v17);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ParsePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9340A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ParsePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9340A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ParsePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9311F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9311F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9311F0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE916504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9311F0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  UTFRegex *v18;
  int v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type *v35;
  NSObject *v36;
  std::string::size_type v37;
  std::chrono::steady_clock::time_point v38;
  std::chrono::steady_clock::time_point v39;
  const char *v40;
  unint64_t *v41;
  unint64_t v42;
  __n128 result;
  nlohmann::detail::exception *exception;
  unint64_t v45;
  char *v46;
  std::string *v47;
  __int128 v48;
  __int128 v49;
  __int128 **p_buf;
  _QWORD *v51[2];
  void *__p[2];
  char v53;
  __int128 *v54;
  _QWORD *v55;
  uint64_t v56;
  std::string v57;
  uint64_t v58;
  unint64_t v59;
  std::string buf;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v49 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x178uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934EA8;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v49 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v8 + 3, (char *)a2, v49, *((std::__shared_weak_count **)&v49 + 1));
  if (*((_QWORD *)&v49 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA9216F0;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 352) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "Hydra Init HydraAdapterPersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "Hydra Init HydraAdapterPersistentModule", v17);
  v18 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v18, "\\s*([:punct:]+)\\s*$");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>(v9 + 320, (uint64_t)v18);
  std::string::basic_string[abi:ne180100]<0>(__p, "punctuation_map");
  v51[0] = 0;
  v51[1] = 0;
  p_buf = (__int128 **)v51;
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v45 = *a2;
    if (v45 > 9)
      v46 = "number";
    else
      v46 = off_1EA94C758[v45];
    std::string::basic_string[abi:ne180100]<0>(&v57, v46);
    v47 = std::string::insert(&v57, 0, "cannot use value() with ");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&buf, exception);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  buf.__r_.__value_.__r.__words[2] = 0;
  v61 = 0;
  v62 = 0x8000000000000000;
  buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a2 + 1), (const void **)__p);
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v57.__r_.__value_.__r.__words[2] = 0;
  v58 = 0;
  v59 = 0x8000000000000000;
  v19 = *a2;
  if (v19 == 2)
  {
    v57.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v19 == 1)
  {
    v57.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v59 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v57))
  {
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v54, (const void ***)&p_buf);
  }
  else
  {
    v20 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(&v54, v20);
  }
  v21 = operator new(0x30uLL);
  v21[1] = 0;
  v21[2] = 0;
  v22 = v55;
  v21[3] = v54;
  *v21 = &off_1EA936450;
  v21[4] = v22;
  v23 = v21 + 4;
  v24 = v56;
  v21[5] = v56;
  if (v24)
  {
    v22[2] = v23;
    v54 = (__int128 *)&v55;
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v21[3] = v23;
  }
  *(_QWORD *)&v25 = v21 + 3;
  *((_QWORD *)&v25 + 1) = v21;
  v26 = *(std::__shared_weak_count **)(v9 + 344);
  *(_OWORD *)(v9 + 336) = v25;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, v55);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&p_buf, v51[0]);
  if (v53 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v57, "phoneme_punctuation");
  v54 = 0;
  v55 = 0;
  v56 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&buf, a2, (const void **)&v57.__r_.__value_.__l.__data_, &v54);
  v29 = (std::string *)operator new(0x30uLL);
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA936808;
  v29[1] = buf;
  memset(&buf, 0, sizeof(buf));
  __p[0] = &v29[1];
  __p[1] = v29;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 352, (__int128 *)__p);
  v30 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v31 = (unint64_t *)((char *)__p[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  p_buf = (__int128 **)&buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
  p_buf = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "always_add_ascii_punc");
  v57.__r_.__value_.__s.__data_[0] = 0;
  *(_BYTE *)(v9 + 368) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v57);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "using_regex_for_punc_in_phoneme");
  v57.__r_.__value_.__s.__data_[0] = 1;
  *(_BYTE *)(v9 + 369) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v57);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v49 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v35 = (std::string::size_type *)(a1 + 8);
  v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v37 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v37 = *v35;
    v38.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v37;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v38.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v36, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v35 = (std::string::size_type *)*v35;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v40, v35, (double)((v39.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v49 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DE916C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;

  if (*(char *)(v33 - 121) < 0)
    operator delete(*(void **)(v33 - 144));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v32[14]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  PersistentModule::~PersistentModule(a11);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v37);
  if (v31)
  {
    v38 = (unint64_t *)&v31->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<HydraAdapterPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HydraAdapterPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<HydraAdapterPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9310E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9310E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9310E8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE916FEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9310E8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  __n128 *v16;
  _QWORD *v17;
  std::chrono::steady_clock::time_point v18;
  std::chrono::steady_clock::time_point v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 result;
  __int128 v24;
  _BYTE buf[22];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x208uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934DC8;
  v8 = (unint64_t)(v6 + 3);
  *(_OWORD *)buf = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  PronounceNNPersistentModule::PronounceNNPersistentModule((Module *)(v6 + 3), (uint64_t *)buf);
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v14 = (_QWORD *)(a1 + 8);
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v16 = a3;
    v17 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v17 = (_QWORD *)*v14;
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v17;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v18.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v16;
  }
  if (*(char *)(a1 + 31) < 0)
    v14 = (_QWORD *)*v14;
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v20, v14, (double)((v19.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v24 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_1DE9172DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PronounceNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931090;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931090;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931090;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9174F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931090;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t ***v13;
  _QWORD *v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 **v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  char v32;
  uint64_t **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  std::string::size_type v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  const char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type *v66;
  NSObject *v67;
  std::string::size_type v68;
  std::chrono::steady_clock::time_point v69;
  std::chrono::steady_clock::time_point v70;
  const char *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  _OWORD *v75;
  uint64_t v76;
  __int128 v77;
  void **v78;
  __int128 __p;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  std::string::size_type v83;
  std::__shared_weak_count *v84;
  void *v85[2];
  unsigned __int8 v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string buf;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v77 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1EA934D90;
  if (*((_QWORD *)&v77 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Module::Module((Module *)(v6 + 24));
  *((_QWORD *)v6 + 37) = 0;
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 3) = off_1EA921518;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_QWORD *)v6 + 46) = 0;
  v75 = a3;
  v76 = v9;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = v77;
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init NormalizeNNPersistentModule", (uint8_t *)&buf, 2u);
  }
  v13 = (uint64_t ***)(v6 + 320);
  v78 = (void **)(v6 + 352);
  Diagnostics::log(6, "FE Init NormalizeNNPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(&v87, v10);
  if (v87)
  {
    v14 = operator new(0x30uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1EA936418;
    v14[4] = 0;
    v14[5] = 0;
    v14[3] = v14 + 4;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v14 + 3);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v6 + 320), (__int128 *)&buf);
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v18 = v87;
    v19 = *(_QWORD *)(v87 + 96);
    std::string::basic_string[abi:ne180100]<0>(&buf, &byte_1DEBD87CE);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)v19 + 48))(v85, v19, 1852731506, &buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v20 = v86;
    if ((v86 & 0x80u) != 0)
      v20 = (unint64_t)v85[1];
    if (v20)
    {
      FastRewriter::create(&__p, (std::string::value_type *)v85);
      (*(void (**)(_QWORD))(*(_QWORD *)__p + 24))(__p);
      v21 = *v13;
      std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&buf, (__int128 *)v18, (std::string::size_type *)&__p);
      std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v21, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
      v22 = (std::__shared_weak_count *)v91;
      if (v91)
      {
        v23 = (unint64_t *)(v91 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v18 = v87;
    }
    v28 = *(__int128 ***)(v18 + 72);
    if (v28)
    {
      v29 = *v28;
      v30 = v28[1];
      while (v29 != v30)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, __int128 *, uint64_t))(**(_QWORD **)(v87 + 96)
                                                                                             + 48))(&__p, *(_QWORD *)(v87 + 96), 1852731506, v29, 1);
        v31 = HIBYTE(v80);
        v32 = HIBYTE(v80);
        if (v80 < 0)
          v31 = *((_QWORD *)&__p + 1);
        if (v31)
        {
          FastRewriter::create(&v83, (std::string::value_type *)&__p);
          (*(void (**)(std::string::size_type))(*(_QWORD *)v83 + 24))(v83);
          v33 = *v13;
          std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&buf, v29, &v83);
          std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v33, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
          v34 = (std::__shared_weak_count *)v91;
          if (v91)
          {
            v35 = (unint64_t *)(v91 + 8);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v37 = v84;
          if (v84)
          {
            p_shared_owners = (unint64_t *)&v84->__shared_owners_;
            do
              v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v32 = HIBYTE(v80);
        }
        if (v32 < 0)
          operator delete((void *)__p);
        v29 = (__int128 *)((char *)v29 + 24);
      }
    }
    MEMORY[0x1DF0ECA80](v78, "breeze");
    v40 = v87;
    v42 = (unsigned __int8 *)(v87 + 144);
    v41 = *(unsigned __int8 *)(v87 + 144);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v87 + 144);
    buf.__r_.__value_.__r.__words[2] = 0;
    v90 = 0;
    v91 = 0x8000000000000000;
    if (v41 == 1)
    {
      v44 = *(_QWORD *)(v87 + 152);
      buf.__r_.__value_.__l.__size_ = v44 + 8;
      buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v44, "normalize_nn");
      v41 = *(unsigned __int8 *)(v40 + 144);
    }
    else
    {
      if (v41 == 2)
      {
        v43 = *(_QWORD *)(v87 + 152);
        buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 8);
        __p = (unint64_t)(v87 + 144);
        v80 = 0;
        v81 = 0;
        v82 = 0x8000000000000000;
        goto LABEL_62;
      }
      v91 = 1;
    }
    __p = (unint64_t)v42;
    v80 = 0;
    v81 = 0;
    v82 = 0x8000000000000000;
    if (v41 == 1)
    {
      *((_QWORD *)&__p + 1) = *(_QWORD *)(v40 + 152) + 8;
      goto LABEL_65;
    }
    if (v41 != 2)
    {
      v82 = 1;
      goto LABEL_65;
    }
    v43 = *(_QWORD *)(v40 + 152);
LABEL_62:
    v80 = *(_QWORD *)(v43 + 8);
LABEL_65:
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__p))
    {
      v45 = 0;
      v46 = 100;
      v47 = 50;
      v48 = 0.5;
    }
    else
    {
      v49 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "max_seq_len");
      v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v49, (const void **)&buf.__r_.__value_.__l.__data_, &NormalizeNNPersistentModule::MAX_SEQ_LEN);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "chunk_size");
      v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v50, (const void **)&buf.__r_.__value_.__l.__data_, &NormalizeNNPersistentModule::CHUNK_SIZE);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "veto");
      v48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)v51, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&NormalizeNNPersistentModule::VETO_FACTOR);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "beam");
      v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v52, (const void **)&buf.__r_.__value_.__l.__data_, &NormalizeNNPersistentModule::BEAM);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&__p, "model_framework");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("breeze", (char *)v53, (const void **)&__p, &buf);
      if (v6[375] < 0)
        operator delete(*v78);
      *(_OWORD *)v78 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *((_QWORD *)v6 + 46) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
      buf.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v80) < 0)
        operator delete((void *)__p);
    }
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v40 + 96) + 32))(&buf, *(_QWORD *)(v40 + 96), 1953395557, 2);
    v54 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = buf.__r_.__value_.__l.__size_;
    if (v54)
    {
      v55 = operator new(0x3278uLL);
      v55[1] = 0;
      v55[2] = 0;
      *v55 = &off_1EA932978;
      *(_QWORD *)&__p = EncoderDecoder::EncoderDecoder((uint64_t)(v55 + 3), &buf, v46, v45, v47, 0, v48);
      *((_QWORD *)&__p + 1) = v55;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v6 + 336), &__p);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v59 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1DE3F6000, v59, OS_LOG_TYPE_DEBUG, "No TN model loaded, assume it's in single model mode", (uint8_t *)&__p, 2u);
      }
      Diagnostics::log(7, "No TN model loaded, assume it's in single model mode", v60);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if ((char)v86 < 0)
      operator delete(v85[0]);
  }
  v61 = v88;
  if (v88)
  {
    v62 = (unint64_t *)&v88->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (*((_QWORD *)&v77 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v66 = (std::string::size_type *)(a1 + 8);
  v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v68 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v68 = *v66;
    v69.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v68;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v69.__d_.__rep_ - v5.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v66 = (std::string::size_type *)*v66;
  v70.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v71, v66, (double)((v70.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v77 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
    }
  }
  *(_QWORD *)&v74 = v76;
  *((_QWORD *)&v74 + 1) = v6;
  *v75 = v74;
}

void sub_1DE917F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, __int128 a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;

  if (a21 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))a33->__on_zero_shared)(a33);
      std::__shared_weak_count::__release_weak(a33);
    }
  }
  if (*(char *)(v42 + 375) < 0)
    operator delete(*(void **)a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v43);
  PersistentModule::~PersistentModule(a14);
  if (v41)
  {
    v47 = (unint64_t *)&v41->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v42);
  operator delete(v49);
  if (v41)
  {
    v50 = (unint64_t *)&v41->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NormalizeNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NormalizeNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NormalizeNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931248;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931248;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931248;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9183EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931248;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  size_t v33;
  std::string *v34;
  void **v35;
  std::string *p_p;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  NSObject *v40;
  const char *v41;
  std::string *v42;
  std::string *v43;
  std::__shared_weak_count *v44;
  HydraUserDctFileImpl *v45;
  uint64_t *p_shared_weak_owners;
  uint64_t **v47;
  std::string::size_type v48;
  char v49;
  void *v51;
  BOOL v52;
  _DWORD *v53;
  int shared_owners;
  int v55;
  uint64_t *v56;
  NSObject *v57;
  _BOOL4 v58;
  const char *v59;
  char *v60;
  std::string *p_str;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  NSObject *v65;
  const char *v66;
  std::string *v67;
  sqlite3 **v68;
  std::string *v69;
  uint64_t v70;
  uint64_t v71;
  sqlite3 *v72;
  uint64_t v73;
  _BOOL4 v74;
  NSObject *v75;
  _BOOL4 v76;
  std::string *v77;
  std::string *v78;
  NSObject *v79;
  const char *v80;
  std::string *v81;
  __int128 *v82;
  std::string *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const void **v92;
  int v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t **v101;
  size_t v102;
  void **v103;
  const void *v104;
  void *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  int v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  uint64_t *v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  NSObject *v131;
  _QWORD *v132;
  std::chrono::steady_clock::time_point v133;
  std::chrono::steady_clock::time_point v134;
  const char *v135;
  unint64_t *v136;
  unint64_t v137;
  __n128 result;
  __n128 *v139;
  unint64_t v140;
  uint64_t ***v141;
  std::chrono::steady_clock::time_point v143;
  unint64_t v144;
  __int128 v145;
  void *v146;
  __int128 v147;
  uint64_t v148;
  void **v149;
  void *v150;
  char v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::string v154;
  std::string __str;
  __int128 v156;
  std::string __p;
  void *v158[2];
  void *v159;
  uint64_t v160;
  unint64_t v161;
  void *v162[2];
  unsigned __int8 v163;
  char v164;
  uint64_t *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[49];
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  _BYTE buf[32];
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v145 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v143.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934EE0;
  v144 = (unint64_t)v6;
  v7 = v6 + 3;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldxr(v9);
    while (__stxr(v11 + 1, v9));
  }
  v140 = (unint64_t)v7;
  PersistentModule::PersistentModule(v7, a2, v145, *((std::__shared_weak_count **)&v145 + 1));
  if (*((_QWORD *)&v145 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v145 + 1) + 16))(*((_QWORD *)&v145 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v145 + 1));
    }
  }
  *(_QWORD *)(v144 + 24) = &off_1EA921760;
  *(_OWORD *)(v144 + 320) = 0u;
  *(_OWORD *)(v144 + 336) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v139 = a4;
  v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "FE Init HydraUserDctPersistentModule", buf, 2u);
  }
  v16 = v144 + 320;
  v141 = (uint64_t ***)(v144 + 336);
  Diagnostics::log(6, "FE Init HydraUserDctPersistentModule", v15);
  SharedObjectPool::get_if<FrontendEnvironment>(&v152, v145);
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v144 + 320, (__int128 *)buf);
  v17 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_BYTE *)(v144 + 352) = 0;
  *(_QWORD *)(v144 + 360) = 1;
  v20 = operator new(0x30uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_1EA936418;
  v20[4] = 0;
  v20[5] = 0;
  v20[3] = v20 + 4;
  *(_QWORD *)buf = v20 + 3;
  *(_QWORD *)&buf[8] = v20;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v141, (__int128 *)buf);
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v152;
  if (!v152)
    goto LABEL_251;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v152 + 96) + 32))(&v150, *(_QWORD *)(v152 + 96), 1752523875, 2);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 96) + 72))(&v148, *(_QWORD *)(v24 + 96), 1752523875, 2);
  v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_1EA936728;
  v25[4] = 0;
  v25[5] = 0;
  v25[3] = 0;
  *(_QWORD *)&v147 = v25 + 3;
  *((_QWORD *)&v147 + 1) = v25;
  if (!(_BYTE)v148)
    goto LABEL_172;
  v26 = (char *)operator new[]();
  v27 = v26;
  if (v151 >= 0)
    v28 = (const char *)&v150;
  else
    v28 = (const char *)v150;
  v29 = strcpy(v26, v28);
  v30 = dirname(v29);
  std::string::basic_string[abi:ne180100]<0>(v162, v30);
  MEMORY[0x1DF0ECFFC](v27, 0x1000C8077774924);
  v158[0] = &v148;
  v158[1] = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0x8000000000000000;
  if ((_BYTE)v148)
  {
    if (v148 == 2)
    {
      v159 = *v149;
    }
    else if (v148 == 1)
    {
      v158[1] = *v149;
    }
    else
    {
      v161 = 0;
    }
  }
  else
  {
    v161 = 1;
  }
  v31 = (_QWORD *)*MEMORY[0x1E0DE4F40];
  v146 = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  while (1)
  {
    memset(&buf[8], 0, 24);
    *(_QWORD *)buf = &v148;
    v175 = 0x8000000000000000;
    if (v148 == 2)
    {
      *(_QWORD *)&buf[16] = v149[1];
    }
    else if (v148 == 1)
    {
      *(_QWORD *)&buf[8] = v149 + 1;
    }
    else
    {
      v175 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)v158, (unsigned __int8 **)buf))
    {
      break;
    }
    v32 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)v158);
    std::string::basic_string[abi:ne180100]<0>(buf, "file");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v32, (const void **)buf, &__p);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    UTFString::lstrip(&__p);
    UTFString::rstrip(&__p);
    if ((v163 & 0x80u) == 0)
      v33 = v163;
    else
      v33 = (size_t)v162[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v154, v33 + 1);
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v154;
    else
      v34 = (std::string *)v154.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if ((v163 & 0x80u) == 0)
        v35 = v162;
      else
        v35 = (void **)v162[0];
      memmove(v34, v35, v33);
    }
    *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 47;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v154, (const std::string::value_type *)p_p, size);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::ifstream::basic_ifstream(&v166);
    if (!*(_DWORD *)((char *)v170 + *((_QWORD *)v166 - 3)))
    {
      v44 = (std::__shared_weak_count *)operator new(0x80uLL);
      v44->__shared_owners_ = 0;
      v44->__shared_weak_owners_ = 0;
      v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933D98;
      v44[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91F9F0;
      v45 = (HydraUserDctFileImpl *)&v44[1];
      LOBYTE(v44[1].__shared_weak_owners_) = 0;
      p_shared_weak_owners = &v44[1].__shared_weak_owners_;
      v44[2].std::__shared_count = 0u;
      v47 = (uint64_t **)&v44[2];
      *(_OWORD *)&v44[4].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v44[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v44[3].__shared_owners_ = 0u;
      v44[4].std::__shared_count = 0u;
      v48 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
      if (v48 == -1)
      {
        LODWORD(v44[1].__shared_owners_) = 2;
        goto LABEL_154;
      }
      std::string::basic_string((std::string *)buf, &__str, v48, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v172);
      v49 = buf[23];
      if ((buf[23] & 0x80) != 0)
      {
        if (*(_QWORD *)&buf[8] == 4)
        {
          v53 = *(_DWORD **)buf;
          goto LABEL_93;
        }
        if (*(_QWORD *)&buf[8] != 5
          || ((v51 = *(void **)buf, **(_DWORD **)buf == 1869834798)
            ? (v52 = *(_BYTE *)(*(_QWORD *)buf + 4) == 110)
            : (v52 = 0),
              !v52))
        {
LABEL_94:
          shared_owners = 2;
          goto LABEL_95;
        }
        LODWORD(v44[1].__shared_owners_) = 1;
      }
      else
      {
        if (buf[23] != 4)
        {
          if (buf[23] != 5)
            goto LABEL_94;
          if (*(_DWORD *)buf != 1869834798 || buf[4] != 110)
            goto LABEL_94;
          LODWORD(v44[1].__shared_owners_) = 1;
LABEL_98:
          v55 = *(unsigned __int8 *)p_shared_weak_owners;
          *(_BYTE *)p_shared_weak_owners = 0;
          v164 = v55;
          v56 = *v47;
          *v47 = 0;
          v165 = v56;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v165, v55);
          std::ifstream::basic_ifstream(buf);
          if (v176)
          {
            nlohmann::operator>>(buf, (uint64_t)p_shared_weak_owners);
            if (!*(_BYTE *)p_shared_weak_owners)
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
              v58 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR);
              v60 = "%s was open, but we cannot read anything from it!";
              if (v58)
              {
                p_str = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                LODWORD(v172) = 136315138;
                *(_QWORD *)((char *)&v172 + 4) = p_str;
                _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_ERROR, "%s was open, but we cannot read anything from it!", (uint8_t *)&v172, 0xCu);
                v60 = "%s was open, but we cannot read anything from it!";
              }
              goto LABEL_132;
            }
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
            v76 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR);
            v60 = "Unable to open user dictionary json file: %s";
            if (v76)
            {
              v77 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
              LODWORD(v172) = 136315138;
              *(_QWORD *)((char *)&v172 + 4) = v77;
              _os_log_impl(&dword_1DE3F6000, v75, OS_LOG_TYPE_ERROR, "Unable to open user dictionary json file: %s", (uint8_t *)&v172, 0xCu);
              v60 = "Unable to open user dictionary json file: %s";
            }
LABEL_132:
            v78 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v78 = (std::string *)__str.__r_.__value_.__r.__words[0];
            Diagnostics::log(3, v60, v59, v78);
          }
          *(_QWORD *)buf = v31;
          *(_QWORD *)&buf[*(v31 - 3)] = v146;
          MEMORY[0x1DF0ECB94](&buf[16]);
          std::istream::~istream();
          MEMORY[0x1DF0ECF6C](&v177);
LABEL_154:
          *(_QWORD *)&v86 = v44 + 1;
          *((_QWORD *)&v86 + 1) = v44;
          v156 = v86;
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
          goto LABEL_155;
        }
        v53 = buf;
LABEL_93:
        if (*v53 != 1952539694)
          goto LABEL_94;
        shared_owners = 0;
LABEL_95:
        LODWORD(v44[1].__shared_owners_) = shared_owners;
        if ((v49 & 0x80) == 0)
        {
          if (shared_owners)
            goto LABEL_97;
          goto LABEL_108;
        }
        v51 = *(void **)buf;
      }
      operator delete(v51);
      shared_owners = v44[1].__shared_owners_;
      if (shared_owners)
      {
LABEL_97:
        if (shared_owners == 1)
          goto LABEL_98;
        goto LABEL_154;
      }
LABEL_108:
      v172 = 0uLL;
      v173 = 0;
      MemoryMap::MemoryMap(buf, (uint64_t)&__str);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v44[2].__shared_owners_, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      v44[3].std::__shared_count = *(std::__shared_count *)&buf[16];
      v62 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v63 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (!v44[2].__shared_owners_)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v81 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v81 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v82 = &v172;
          if (v173 < 0)
            v82 = (__int128 *)v172;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v81;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v82;
          _os_log_impl(&dword_1DE3F6000, v79, OS_LOG_TYPE_ERROR, "User dictionary(%s) memory mapping failed: %s", buf, 0x16u);
        }
        v83 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v83 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v84 = &v172;
        if (v173 < 0)
          v84 = (__int128 *)v172;
        Diagnostics::log(3, "User dictionary(%s) memory mapping failed: %s", v80, v83, v84);
        goto LABEL_152;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v67 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v67 = (std::string *)__str.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v67;
        _os_log_impl(&dword_1DE3F6000, v65, OS_LOG_TYPE_DEFAULT, "Load User Dictionary: %s", buf, 0xCu);
      }
      v68 = (sqlite3 **)&v44[3].__shared_weak_owners_;
      v69 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v69 = (std::string *)__str.__r_.__value_.__r.__words[0];
      Diagnostics::log(5, "Load User Dictionary: %s", v66, v69);
      v70 = sqlite3_open_MemoryMap((const void **)&v44[2].__shared_owners_, (sqlite3 **)&v44[3].__shared_weak_owners_);
      HydraUserDctFileImpl::report_error(v45, v70, "Open memory mapped user dictionary");
      v71 = sqlite3_prepare_v2(*v68, "SELECT pronunciation, phoneset FROM Dictionary WHERE lexicon=? and locale=? and domain=?;",
              -1,
              (sqlite3_stmt **)&v44[4].__shared_weak_owners_,
              0);
      HydraUserDctFileImpl::report_error(v45, v71, "compile lookup query");
      v72 = *v68;
      if (*v68)
      {
        memset(buf, 0, 24);
        v73 = sqlite3_exec(v72, "SELECT COUNT(*) FROM CaseDictionary;",
                (int (__cdecl *)(void *, int, char **, char **))get_first_result,
                buf,
                0);
        HydraUserDctFileImpl::report_error(v45, v73, "count case entries");
        v74 = std::stoi((const std::string *)buf, 0, 10) > 0;
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (!v74)
            goto LABEL_152;
        }
        else if (!v74)
        {
          goto LABEL_152;
        }
        v85 = sqlite3_prepare_v2(*v68, "SELECT pronunciation, phoneset FROM CaseDictionary WHERE lexicon=? and locale=? and domain=?;",
                -1,
                (sqlite3_stmt **)&v44[5],
                0);
        HydraUserDctFileImpl::report_error(v45, v85, "compile lookup case query");
      }
LABEL_152:
      if (SHIBYTE(v173) < 0)
        operator delete((void *)v172);
      goto LABEL_154;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v42 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v42 = (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v42;
      _os_log_impl(&dword_1DE3F6000, v40, OS_LOG_TYPE_ERROR, "Invalid UserDctFile: %s", buf, 0xCu);
    }
    v43 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
    Diagnostics::log(3, "Invalid UserDctFile: %s", v41, v43);
    v44 = 0;
    v45 = 0;
    v156 = 0uLL;
LABEL_155:
    v166 = v31;
    *(void **)((char *)&v166 + *(v31 - 3)) = v146;
    MEMORY[0x1DF0ECB94](&v168);
    std::istream::~istream();
    MEMORY[0x1DF0ECF6C](&v171);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v45)
        goto LABEL_162;
LABEL_161:
      std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((char **)v147, &v156);
      goto LABEL_162;
    }
    operator delete(v154.__r_.__value_.__l.__data_);
    if (v45)
      goto LABEL_161;
LABEL_162:
    v16 = v144 + 320;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v88 = __ldaxr(p_shared_owners);
      while (__stlxr(v88 - 1, p_shared_owners));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)v158);
  }
  if ((char)v163 < 0)
    operator delete(v162[0]);
LABEL_172:
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v16, &v147);
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (const void **)v152;
  v94 = (void *)(v152 + 144);
  v93 = *(unsigned __int8 *)(v152 + 144);
  *(_QWORD *)buf = v152 + 144;
  memset(&buf[8], 0, 24);
  v175 = 0x8000000000000000;
  if (v93 == 1)
  {
    v96 = *(_QWORD *)(v152 + 152);
    *(_QWORD *)&buf[8] = v96 + 8;
    *(_QWORD *)&buf[8] = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v96, "pronounce_nn");
    v93 = *((unsigned __int8 *)v92 + 144);
  }
  else
  {
    if (v93 == 2)
    {
      v95 = *(_QWORD **)(v152 + 152);
      *(_QWORD *)&buf[16] = v95[1];
      v166 = (void *)(v152 + 144);
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170[0] = 0x8000000000000000;
      goto LABEL_185;
    }
    v175 = 1;
  }
  v166 = v94;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170[0] = 0x8000000000000000;
  if (v93 == 1)
  {
    v167 = (uint64_t)v92[19] + 8;
  }
  else if (v93 == 2)
  {
    v95 = v92[19];
LABEL_185:
    v168 = v95[1];
  }
  else
  {
    v170[0] = 1;
  }
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v166))
  {
    v97 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v94, "pronounce_nn");
    std::string::basic_string[abi:ne180100]<0>(buf, "embedded_lang");
    LOBYTE(v166) = 0;
    *(_BYTE *)(v144 + 352) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)v97, (const void **)buf, (unsigned __int8 *)&v166);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (**(_QWORD **)v16 != *(_QWORD *)(*(_QWORD *)v16 + 8))
  {
    (*(void (**)(void **__return_ptr, const void *, uint64_t, uint64_t))(*(_QWORD *)v92[12] + 32))(&v166, v92[12], 1752523890, 2);
    v98 = HIBYTE(v168);
    v99 = HIBYTE(v168);
    if (v168 < 0)
      v98 = v167;
    if (v98)
    {
      FastRewriter::create(&v172, (std::string::value_type *)&v166);
      v100 = v172;
      if ((_QWORD)v172)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v172 + 24))(v172);
        v101 = *v141;
        if (*((char *)v92 + 23) >= 0)
          v102 = *((unsigned __int8 *)v92 + 23);
        else
          v102 = (size_t)v92[1];
        v103 = v158;
        std::string::basic_string[abi:ne180100]((uint64_t)v158, v102 + 5);
        if (SHIBYTE(v159) < 0)
          v103 = (void **)v158[0];
        if (v102)
        {
          if (*((char *)v92 + 23) >= 0)
            v104 = v92;
          else
            v104 = *v92;
          memmove(v103, v104, v102);
        }
        strcpy((char *)v103 + v102, "_udct");
        *(_OWORD *)buf = *(_OWORD *)v158;
        v105 = v159;
        v158[1] = 0;
        v159 = 0;
        v158[0] = 0;
        *(_QWORD *)&buf[16] = v105;
        *(_QWORD *)&buf[24] = v100;
        v175 = *((_QWORD *)&v172 + 1);
        if (*((_QWORD *)&v172 + 1))
        {
          v106 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v101, (const void **)buf, (uint64_t)buf);
        v108 = (std::__shared_weak_count *)v175;
        if (v175)
        {
          v109 = (unint64_t *)(v175 + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v159) < 0)
          operator delete(v158[0]);
      }
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
      if (*((_QWORD *)&v172 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v99 = HIBYTE(v168);
    }
    if (v99 < 0)
      operator delete(v166);
    v92 = (const void **)v152;
  }
  v114 = *((unsigned __int8 *)v92 + 144);
  *(_QWORD *)buf = v92 + 18;
  memset(&buf[8], 0, 24);
  v175 = 0x8000000000000000;
  if (v114 == 1)
  {
    v116 = v92[19];
    v119 = (_QWORD *)v116[1];
    v117 = v116 + 1;
    v118 = v119;
    if (!v119)
      goto LABEL_237;
    v120 = v117;
    do
    {
      v121 = std::string::compare((const std::string *)(v118 + 4), "hydra_udct");
      v122 = v118 + 1;
      if (v121 >= 0)
      {
        v122 = v118;
        v120 = v118;
      }
      v118 = (_QWORD *)*v122;
    }
    while (*v122);
    if (v120 == v117 || std::string::compare((const std::string *)(v120 + 4), "hydra_udct") >= 1)
LABEL_237:
      v120 = v117;
    *(_QWORD *)&buf[8] = v120;
    v92 = (const void **)v152;
    v114 = *(unsigned __int8 *)(v152 + 144);
  }
  else
  {
    if (v114 == 2)
    {
      v115 = v92[19];
      *(_QWORD *)&buf[16] = v115[1];
      v166 = v92 + 18;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170[0] = 0x8000000000000000;
      goto LABEL_243;
    }
    v175 = 1;
  }
  v166 = v92 + 18;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170[0] = 0x8000000000000000;
  if (v114 == 1)
  {
    v167 = (uint64_t)v92[19] + 8;
  }
  else if (v114 == 2)
  {
    v115 = v92[19];
LABEL_243:
    v168 = v115[1];
  }
  else
  {
    v170[0] = 1;
  }
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v166))
  {
    v123 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v92 + 144, "hydra_udct");
    std::string::basic_string[abi:ne180100]<0>(buf, "multiple_token_matching_window");
    LODWORD(v166) = 1;
    *(_QWORD *)(v144 + 360) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v123, (const void **)buf, (unsigned int *)&v166);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v149, v148);
  if (v151 < 0)
    operator delete(v150);
LABEL_251:
  v124 = v153;
  if (v153)
  {
    v125 = (unint64_t *)&v153->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  if (v8)
  {
    v127 = (unint64_t *)&v8->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v129 = (_QWORD *)(a1 + 8);
  v130 = a1;
  v131 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v132 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v132 = (_QWORD *)*v129;
    v133.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v132;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v133.__d_.__rep_ - v143.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v131, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    v130 = a1;
  }
  if (*(char *)(v130 + 31) < 0)
    v129 = (_QWORD *)*v129;
  v134.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v135, v129, (double)((v134.__d_.__rep_ - v143.__d_.__rep_) / 1000000) / 1000.0);
  if (v8)
  {
    v136 = (unint64_t *)&v8->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result.n128_u64[0] = v140;
  result.n128_u64[1] = v144;
  *v139 = result;
  return result;
}

void sub_1DE9199D4()
{
  __cxa_end_catch();
  JUMPOUT(0x1DE919BCCLL);
}

void sub_1DE9199E0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DE9199E4);
  __clang_call_terminate(a1);
}

void sub_1DE9199F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;

  v71 = (std::__shared_weak_count *)STACK[0x430];
  if (STACK[0x430])
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (a58 < 0)
    operator delete(a53);
  v74 = (std::__shared_weak_count *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (a71 < 0)
    operator delete(a66);
  JUMPOUT(0x1DE919D3CLL);
}

void sub_1DE919AD0()
{
  JUMPOUT(0x1DE919D0CLL);
}

void sub_1DE919AE4()
{
  JUMPOUT(0x1DE919D3CLL);
}

void sub_1DE919AEC()
{
  JUMPOUT(0x1DE919D4CLL);
}

void sub_1DE919AF4()
{
  JUMPOUT(0x1DE919D5CLL);
}

void sub_1DE919B60()
{
  JUMPOUT(0x1DE919D9CLL);
}

void sub_1DE919B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (v24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
    JUMPOUT(0x1DE919DB8);
  }
  JUMPOUT(0x1DE919DF0);
}

void sub_1DE919BB4()
{
  JUMPOUT(0x1DE919E00);
}

void sub_1DE919BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,unsigned __int8 a33,uint64_t *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a70;
  char a72;
  uint64_t a73;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  void *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;

  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v73);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v76, *(unsigned __int8 *)(v75 + 40));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v75);
  operator delete(v78);
  *(uint64_t *)((char *)&a73 + *(_QWORD *)(v74 - 24)) = a29;
  MEMORY[0x1DF0ECB94](a26);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](a27);
  if (a54 < 0)
    operator delete(a49);
  if (a48 < 0)
    operator delete(a43);
  if (a64 < 0)
    operator delete(a59);
  if (a72 < 0)
    operator delete(a70);
  if (a32)
  {
    p_shared_owners = (unint64_t *)&a32->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
      std::__shared_weak_count::__release_weak(a32);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a34, a33);
  if (a40 < 0)
    operator delete(a35);
  v81 = (std::__shared_weak_count *)a42;
  if (a42)
  {
    v82 = (unint64_t *)(a42 + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = a24;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a28);
  PersistentModule::~PersistentModule(a16);
  if (a24)
  {
    v85 = (unint64_t *)&a24->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    v84 = a24;
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(a25);
  operator delete(v87);
  if (v84)
  {
    v88 = (unint64_t *)&v84->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<HydraUserDctPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HydraUserDctPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<HydraUserDctPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930B68;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930B68;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930B68;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE919FBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930B68;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  std::chrono::steady_clock::time_point v23;
  std::chrono::steady_clock::time_point v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 result;
  unint64_t v29;
  __int128 v30;
  __n128 v31;
  _BYTE buf[22];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934268;
  if (*((_QWORD *)&v30 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Module::Module((Module *)(v6 + 3));
  v6[37] = 0;
  v6[38] = 0;
  v6[39] = 0;
  v6[40] = 0;
  v6[3] = &off_1EA920350;
  v6[41] = 0;
  v29 = v9;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_INFO, "FE Init MarkupPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init MarkupPersistentModule", v11);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v30);
  ParseLegacy::create(&v31, 0, 0, *(uint64_t *)buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v6 + 40), (__int128 *)&v31);
  v12 = (std::__shared_weak_count *)v31.n128_u64[1];
  if (v31.n128_u64[1])
  {
    v13 = (unint64_t *)(v31.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*((_QWORD *)&v30 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = (_QWORD *)(a1 + 8);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v22 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v22 = (_QWORD *)*v20;
    v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v23.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v20 = (_QWORD *)*v20;
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v25, v20, (double)((v24.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v30 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  result.n128_u64[0] = v29;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1DE91A3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19);
  PersistentModule::~PersistentModule(a12);
  if (v17)
  {
    v23 = (unint64_t *)&v17->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v25);
  if (v17)
  {
    v26 = (unint64_t *)&v17->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<MarkupPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MarkupPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MarkupPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930BC0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930BC0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930BC0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91A620(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930BC0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t ***v19;
  _QWORD *v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 **v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t **v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  UTFRegex *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::string::size_type *v55;
  NSObject *v56;
  std::string::size_type v57;
  std::chrono::steady_clock::time_point v58;
  std::chrono::steady_clock::time_point v59;
  const char *v60;
  unint64_t *v61;
  unint64_t v62;
  __n128 result;
  __n128 *v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *__p[2];
  unsigned __int8 v69;
  std::string v70;
  void *v71[2];
  unsigned __int8 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::string buf;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v65 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934540;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v65 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v65, *((std::__shared_weak_count **)&v65 + 1));
  if (*((_QWORD *)&v65 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
    }
  }
  v64 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA920850;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = v9 + 336;
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "FE Init RewritePersistentModule", (uint8_t *)&buf, 2u);
  }
  v19 = (uint64_t ***)(v9 + 320);
  Diagnostics::log(6, "FE Init RewritePersistentModule", v18);
  SharedObjectPool::get_if<FrontendEnvironment>(&v73, v65);
  if (v73)
  {
    v20 = operator new(0x30uLL);
    v20[1] = 0;
    v20[2] = 0;
    *v20 = &off_1EA936418;
    v20[4] = 0;
    v20[5] = 0;
    v20[3] = v20 + 4;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 3);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)&buf);
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v24 = v73;
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v73 + 96) + 32))(v71, *(_QWORD *)(v73 + 96), 1919252338, 1);
    v25 = v72;
    if ((v72 & 0x80u) != 0)
      v25 = (unint64_t)v71[1];
    if (v25)
    {
      FastRewriter::create(&v70, (std::string::value_type *)v71);
      (*(void (**)(std::string::size_type))(*(_QWORD *)v70.__r_.__value_.__l.__data_ + 24))(v70.__r_.__value_.__r.__words[0]);
      v26 = *v19;
      std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&buf, (__int128 *)v24, (std::string::size_type *)&v70);
      std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v26, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
      v27 = v77;
      if (v77)
      {
        p_shared_owners = (unint64_t *)&v77->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v30 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
      if (v70.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v70.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v24 = v73;
    }
    v33 = *(__int128 ***)(v24 + 72);
    if (v33)
    {
      v34 = *v33;
      v35 = v33[1];
      while (v34 != v35)
      {
        if (*((char *)v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v34, *((_QWORD *)v34 + 1));
        }
        else
        {
          v36 = *v34;
          v70.__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 2);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v36;
        }
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t, std::string *, uint64_t))(**(_QWORD **)(v73 + 96)
                                                                                             + 48))(__p, *(_QWORD *)(v73 + 96), 1919252338, &v70, 1);
        v37 = v69;
        v38 = v69;
        if ((v69 & 0x80u) != 0)
          v37 = (unint64_t)__p[1];
        if (v37)
        {
          FastRewriter::create(&v66, (std::string::value_type *)__p);
          v39 = v66;
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
          v40 = *v19;
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&buf, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
          else
            buf = v70;
          v76 = v39;
          v77 = v67;
          if (v67)
          {
            v41 = (unint64_t *)&v67->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v40, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
          v43 = v77;
          if (v77)
          {
            v44 = (unint64_t *)&v77->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v46 = v67;
          if (v67)
          {
            v47 = (unint64_t *)&v67->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v38 = v69;
        }
        if ((v38 & 0x80) != 0)
          operator delete(__p[0]);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        v34 = (__int128 *)((char *)v34 + 24);
      }
    }
    if ((char)v72 < 0)
      operator delete(v71[0]);
    v16 = v9 + 336;
  }
  v49 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v49, "\\e\\\\(.*?)(?:=(.*?))?(?:\\\\|\\z)|(\\e\\/\\+)|\\[\\[(.*?)\\]\\]");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>(v16, (uint64_t)v49);
  v50 = v74;
  if (v74)
  {
    v51 = (unint64_t *)&v74->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (*((_QWORD *)&v65 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v55 = (std::string::size_type *)(a1 + 8);
  v56 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v57 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v57 = *v55;
    v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v57;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v58.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v56, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v55 = (std::string::size_type *)*v55;
  v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v60, v55, (double)((v59.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v65 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *v64 = result;
  return result;
}

void sub_1DE91AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,std::__shared_weak_count *a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;

  v42 = *(std::__shared_weak_count **)(v40 - 112);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (*(char *)(v40 - 121) < 0)
    operator delete(*(void **)(v40 - 144));
  if (a25)
  {
    v45 = (unint64_t *)&a25->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  if (a35 < 0)
    operator delete(__p);
  if (a37)
  {
    v47 = (unint64_t *)&a37->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a37->__on_zero_shared)(a37);
      std::__shared_weak_count::__release_weak(a37);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39);
  PersistentModule::~PersistentModule(a13);
  if (v37)
  {
    v49 = (unint64_t *)&v37->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v38);
  operator delete(v51);
  if (v37)
  {
    v52 = (unint64_t *)&v37->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<RewritePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RewritePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<RewritePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930C18;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930C18;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930C18;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91B1D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930C18;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  size_t v26;
  std::string *p_p;
  std::string::size_type size;
  UText *v29;
  UText *v30;
  std::basic_string<char16_t>::size_type v31;
  std::basic_string<char16_t>::size_type v32;
  int v33;
  void *v34;
  std::basic_string<char16_t> *p_status;
  std::basic_string<char16_t>::size_type v36;
  void *v37;
  std::basic_string<char16_t>::size_type v38;
  std::basic_string<char16_t>::size_type v39;
  char v40;
  std::basic_string<char16_t> *p_buf;
  int32_t v42;
  NSObject *v43;
  const char *v44;
  std::string *v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  std::basic_string<char16_t> *v49;
  unint64_t *v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  UTFRegex *v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::basic_string<char16_t>::size_type *v66;
  uint64_t v67;
  NSObject *v68;
  std::basic_string<char16_t>::size_type v69;
  std::chrono::steady_clock::time_point v70;
  std::chrono::steady_clock::time_point v71;
  const char *v72;
  unint64_t *v73;
  unint64_t v74;
  __n128 result;
  void *exception;
  const char *v77;
  uint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  __n128 *v81;
  __int128 v82;
  uint64_t v83;
  std::chrono::steady_clock::time_point v85;
  URegularExpression *regexp;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  char *v93;
  uint64_t v94;
  const char *v95;
  std::__shared_weak_count *v96;
  std::string __p;
  std::basic_string<char16_t> buf;
  uint64_t v99;
  unint64_t v100;
  std::basic_string<char16_t> v101;
  std::basic_string<char16_t> status;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v82 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v85.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x170uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9345E8;
  v8 = (unint64_t)(v6 + 3);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  v9 = v82;
  if (*((_QWORD *)&v82 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v6 + 3, a2, v82, *((std::__shared_weak_count **)&v82 + 1));
  if (*((_QWORD *)&v82 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v82 + 1) + 16))(*((_QWORD *)&v82 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
    }
  }
  *(_QWORD *)(v7 + 24) = &off_1EA920930;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  v81 = a4;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v83 = v7 + 336;
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    buf.__r_.__value_.__s.__data_[0] = 0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "FE Init BreaksNNPersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "FE Init BreaksNNPersistentModule", v17);
  SharedObjectPool::get_if<FrontendEnvironment>(&v95, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v95 + 12) + 16))(&v91, *((_QWORD *)v95 + 12), 1935831659, 1);
  if (v91)
  {
    v18 = v92;
    if (v92)
    {
      p_shared_owners = (unint64_t *)&v92->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v79 = v7;
    v80 = v18;
    v78 = v7 + 320;
    v22 = v93;
    v21 = v94;
    memset(&buf, 0, sizeof(buf));
    UTFRegex::UTFRegex((uint64_t)&regexp, word_1DED1F11E);
    if (v22)
    {
      v23 = &v22[v21];
      do
      {
        v24 = memchr(v22, 10, v23 - v22);
        v25 = v24;
        if (v24)
          v26 = v24 - v22;
        else
          v26 = v23 - v22;
        std::string::basic_string[abi:ne180100](&__p, v22, v26);
        LODWORD(status.__r_.__value_.__l.__data_) = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v29 = utext_openUTF8(0, (const char *)p_p, size, (UErrorCode *)&status);
        if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0)
          v30 = v29;
        else
          v30 = 0;
        UTFRegex::set_text((UTFRegex *)&regexp, v30, 1);
        LODWORD(status.__r_.__value_.__l.__data_) = 0;
        if (!uregex_matches(regexp, -1, (UErrorCode *)&status))
          goto LABEL_50;
        v31 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v31 = buf.__r_.__value_.__l.__size_;
        if (v31)
        {
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v101, &regexp, 1);
          std::basic_string<char16_t>::insert(&v101, (std::basic_string<char16_t>::size_type)L"|", (const std::basic_string<char16_t>::value_type *)1, v32);
          status = v101;
          memset(&v101, 0, sizeof(v101));
          v33 = SHIBYTE(status.__r_.__value_.__r.__words[2]);
          v34 = (void *)status.__r_.__value_.__r.__words[0];
          if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_status = &status;
          else
            p_status = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
          if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36 = HIBYTE(status.__r_.__value_.__r.__words[2]);
          else
            v36 = status.__r_.__value_.__l.__size_;
          std::basic_string<char16_t>::append(&buf, (const std::basic_string<char16_t>::value_type *)p_status, v36);
          if (v33 < 0)
            operator delete(v34);
          if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_50;
          v37 = (void *)v101.__r_.__value_.__r.__words[0];
        }
        else
        {
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&status, &regexp, 1);
          std::basic_string<char16_t>::insert(&status, (std::basic_string<char16_t>::size_type)L"(?:", (const std::basic_string<char16_t>::value_type *)3, v38);
          v101.__r_.__value_.__r.__words[0] = status.__r_.__value_.__l.__size_;
          v39 = status.__r_.__value_.__r.__words[0];
          *(std::basic_string<char16_t>::size_type *)((char *)v101.__r_.__value_.__r.__words + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&status.__r_.__value_.__r.__words[1] + 7);
          v40 = HIBYTE(status.__r_.__value_.__r.__words[2]);
          memset(&status, 0, sizeof(status));
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            buf.__r_.__value_.__r.__words[0] = v39;
            buf.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
            *(std::basic_string<char16_t>::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v101.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v40;
            goto LABEL_50;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          buf.__r_.__value_.__r.__words[0] = v39;
          buf.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
          *(std::basic_string<char16_t>::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v101.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&buf.__r_.__value_.__s + 23) = v40;
          if ((SHIBYTE(status.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_50;
          v37 = (void *)status.__r_.__value_.__r.__words[0];
        }
        operator delete(v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v22 = v25 + 1;
      }
      while (v25);
    }
    std::basic_string<char16_t>::append(&buf, L")", 1uLL);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::basic_string<char16_t> *)buf.__r_.__value_.__r.__words[0];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    else
      v42 = buf.__r_.__value_.__r.__words[1];
    UTFString::to_utf8(&__p, (const UChar *)p_buf, v42);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
    v7 = v79;
    v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      v45 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(status.__r_.__value_.__l.__data_) = 136315138;
      *(std::basic_string<char16_t>::size_type *)((char *)status.__r_.__value_.__r.__words + 4) = (std::basic_string<char16_t>::size_type)v45;
      _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_DEBUG, "Sentence break exceptions: %s", (uint8_t *)&status, 0xCu);
    }
    v46 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
    Diagnostics::log(7, "Sentence break exceptions: %s", v44, v46);
    v47 = operator new();
    v48 = v47;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &buf;
    else
      v49 = (std::basic_string<char16_t> *)buf.__r_.__value_.__r.__words[0];
    UTFRegex::UTFRegex(v47, (UChar *)v49);
    std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>(v78, v48);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    UTFRegex::~UTFRegex((UTFRegex *)&regexp);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v80)
    {
      v50 = (unint64_t *)&v80->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  v52 = v95;
  v53 = ubrk_open();
  *(_QWORD *)(v7 + 352) = v53;
  if (!v53)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (v52[23] < 0)
      v52 = *(const char **)v52;
    v77 = u_errorName((UErrorCode)__p.__r_.__value_.__l.__data_);
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to open sentence break iterator of %s: %s", v52, v77);
    MEMORY[0x1DF0EC99C](exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v54 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v54, "\\e\\\\(.*?)(?:=(.*?))?(?:\\\\|\\z)|(\\e\\/\\+)|\\[\\[(.*?)\\]\\]");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>(v83, (uint64_t)v54);
  *(_BYTE *)(v7 + 360) = 0;
  if (v52)
  {
    v55 = *((unsigned __int8 *)v52 + 144);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v52 + 144);
    buf.__r_.__value_.__r.__words[2] = 0;
    v99 = 0;
    v100 = 0x8000000000000000;
    if (v55 == 1)
    {
      buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*((_QWORD *)v52 + 19), "breaks_nn");
      v55 = *((unsigned __int8 *)v52 + 144);
    }
    else
    {
      if (v55 == 2)
      {
        v56 = *((_QWORD *)v52 + 19);
        buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 + 8);
        regexp = (URegularExpression *)(v52 + 144);
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0x8000000000000000;
        goto LABEL_91;
      }
      v100 = 1;
    }
    regexp = (URegularExpression *)(v52 + 144);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0x8000000000000000;
    if (v55 == 1)
    {
      v87 = *((_QWORD *)v52 + 19) + 8;
      goto LABEL_94;
    }
    if (v55 != 2)
    {
      v90 = 1;
      goto LABEL_94;
    }
    v56 = *((_QWORD *)v52 + 19);
LABEL_91:
    v88 = *(_QWORD *)(v56 + 8);
LABEL_94:
    if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&regexp))
    {
      v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v52 + 144, "breaks_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "disable_icu");
      LOBYTE(regexp) = 0;
      *(_BYTE *)(v7 + 360) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)v57, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&regexp);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  v58 = v92;
  if (v92)
  {
    v59 = (unint64_t *)&v92->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v96;
  if (v96)
  {
    v62 = (unint64_t *)&v96->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v10)
  {
    v64 = (unint64_t *)&v10->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v66 = (std::basic_string<char16_t>::size_type *)(a1 + 8);
  v67 = a1;
  v68 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v69 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v69 = *v66;
    v70.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::basic_string<char16_t>::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v69;
    buf.__r_.__value_.__s.__data_[6] = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v70.__d_.__rep_ - v85.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v68, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    v67 = a1;
  }
  if (*(char *)(v67 + 31) < 0)
    v66 = (std::basic_string<char16_t>::size_type *)*v66;
  v71.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v72, v66, (double)((v71.__d_.__rep_ - v85.__d_.__rep_) / 1000000) / 1000.0);
  if (v10)
  {
    v73 = (unint64_t *)&v10->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *v81 = result;
  return result;
}

void sub_1DE91BC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  void *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;

  if (*(char *)(v38 - 169) < 0)
  {
    operator delete(*(void **)(v38 - 192));
    if ((v36 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v36)
  {
LABEL_6:
    if (a26)
    {
      p_shared_owners = (unint64_t *)&a26->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
        std::__shared_weak_count::__release_weak(a26);
      }
    }
    if (a30)
    {
      v42 = (unint64_t *)&a30->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
        std::__shared_weak_count::__release_weak(a30);
      }
    }
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
    PersistentModule::~PersistentModule(a11);
    if (a12)
    {
      v44 = (unint64_t *)&a12->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
        std::__shared_weak_count::__release_weak(a12);
      }
    }
    std::__shared_weak_count::~__shared_weak_count(a14);
    operator delete(v46);
    if (a12)
    {
      v47 = (unint64_t *)&a12->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
        std::__shared_weak_count::__release_weak(a12);
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<BreaksNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9345E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BreaksNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9345E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<BreaksNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9314B0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9314B0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9314B0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91C1A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9314B0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t *v11;
  _QWORD *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  std::string *v24;
  std::string::size_type size;
  std::basic_string<char16_t> *p_p;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  std::string *v30;
  char *v31;
  std::string *v32;
  char *v33;
  uint64_t *v36;
  uint64_t *v37;
  void **v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  _QWORD *v57;
  std::chrono::steady_clock::time_point v58;
  std::chrono::steady_clock::time_point v59;
  const char *v60;
  unint64_t *v61;
  unint64_t v62;
  __n128 result;
  void *exception;
  const char *v65;
  std::string *v66;
  __n128 *v67;
  unint64_t v68;
  unint64_t v69;
  std::chrono::steady_clock::time_point v70;
  char *v72;
  __int128 v73;
  uint64_t **v74;
  __int128 v75;
  UErrorCode code;
  std::basic_string<char16_t> __p;
  std::string v78;
  uint64_t v79;
  unint64_t v80;
  char v81[8];
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  _BYTE buf[24];
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v73 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v70.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v4 = (char *)operator new(0x160uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA9350D8;
  if (*((_QWORD *)&v73 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  Module::Module((Module *)(v4 + 24));
  *((_QWORD *)v4 + 37) = 0;
  *((_QWORD *)v4 + 38) = 0;
  *((_QWORD *)v4 + 39) = 0;
  *((_QWORD *)v4 + 3) = &off_1EA921B10;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  v69 = v7;
  v67 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = v73;
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_INFO, "FE Init TransliteratePersistentModule", buf, 2u);
  }
  v72 = v4 + 320;
  v74 = (uint64_t **)(v4 + 336);
  Diagnostics::log(6, "FE Init TransliteratePersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(&v85, v8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v85 + 96) + 72))(&v83, *(_QWORD *)(v85 + 96), 1953657708, 0);
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v83, "transliterators_id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v81, (uint64_t)v11);
  v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1EA9369C8;
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0;
  *(_QWORD *)&v13 = v12 + 3;
  *((_QWORD *)&v13 + 1) = v12;
  v14 = (std::__shared_weak_count *)*((_QWORD *)v4 + 41);
  *((_OWORD *)v4 + 20) = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1EA936488;
  v17[4] = 0;
  v17[3] = v17 + 4;
  v17[5] = 0;
  *(_QWORD *)&v18 = v17 + 3;
  *((_QWORD *)&v18 + 1) = v17;
  v19 = (std::__shared_weak_count *)*((_QWORD *)v4 + 43);
  *((_OWORD *)v4 + 21) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)buf = v81;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v88 = 0;
  v89 = 0x8000000000000000;
  v68 = (unint64_t)v4;
  if (v81[0])
  {
    if (v81[0] == 2)
    {
      *(_QWORD *)&buf[16] = *v82;
    }
    else if (v81[0] == 1)
    {
      *(_QWORD *)&buf[8] = *v82;
    }
    else
    {
      v89 = 0;
    }
  }
  else
  {
    v89 = 1;
  }
  v22 = (_QWORD *)(a1 + 8);
  while (1)
  {
    v79 = 0;
    *(_OWORD *)&v78.__r_.__value_.__r.__words[1] = 0uLL;
    v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    v80 = 0x8000000000000000;
    if (v81[0] == 2)
    {
      v78.__r_.__value_.__r.__words[2] = v82[1];
    }
    else if (v81[0] == 1)
    {
      v78.__r_.__value_.__l.__size_ = (std::string::size_type)(v82 + 1);
    }
    else
    {
      v80 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v78))
    {
      break;
    }
    v23 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v23, &v78);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v78;
    else
      v24 = (std::string *)v78.__r_.__value_.__r.__words[0];
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    else
      size = v78.__r_.__value_.__l.__size_;
    UTFString::to_utf16(&__p, (const char *)v24, size);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::basic_string<char16_t> *)__p.__r_.__value_.__r.__words[0];
    code = U_ZERO_ERROR;
    u_strlen((const UChar *)p_p);
    v27 = utrans_openU();
    if (code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v65 = u_errorName(code);
      v66 = &v78;
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v66 = (std::string *)v78.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)&v75, "Error utrans_openU: %s, '%s', %s", v65, (const char *)v66, "TransliteratePersistentModule::TransliteratePersistentModule(const nlohmann::json &, std::shared_ptr<SharedObjectPool>)");
      MEMORY[0x1DF0EC99C](exception, &v75);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v28 = v27;
    v29 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v30 = &v78;
    }
    else
    {
      v29 = v78.__r_.__value_.__l.__size_;
      v30 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if (v29 >= 19)
    {
      v31 = (char *)v30 + v29;
      v32 = v30;
      do
      {
        v33 = (char *)memchr(v32, 70, v29 - 18);
        if (!v33)
          break;
        if (*(_QWORD *)v33 == 0x746469776C6C7546
          && *((_QWORD *)v33 + 1) == 0x6977666C61482D68
          && *(_QWORD *)(v33 + 11) == 0x6874646977666C61)
        {
          if (v33 != v31 && v33 - (char *)v30 != -1)
          {
            v36 = *v74;
            *(_QWORD *)&v75 = v28;
            *((_QWORD *)&v75 + 1) = align_full_2_half;
            std::__tree<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::__map_value_compare<void **,std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::less<void **>,true>,std::allocator<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>::__emplace_unique_key_args<void **,std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>(v36, v28, &v75);
            goto LABEL_61;
          }
          break;
        }
        v32 = (std::string *)(v33 + 1);
        v29 = v31 - (char *)v32;
      }
      while (v31 - (char *)v32 >= 19);
    }
    v37 = *v74;
    *(_QWORD *)&v75 = v28;
    *((_QWORD *)&v75 + 1) = align_default;
    std::__tree<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::__map_value_compare<void **,std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::less<void **>,true>,std::allocator<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>::__emplace_unique_key_args<void **,std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>(v37, v28, &v75);
LABEL_61:
    v38 = *(void ***)v72;
    v40 = *(unint64_t **)(*(_QWORD *)v72 + 8);
    v39 = *(_QWORD *)(*(_QWORD *)v72 + 16);
    if ((unint64_t)v40 >= v39)
    {
      v42 = ((char *)v40 - (_BYTE *)*v38) >> 3;
      if ((unint64_t)(v42 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v43 = v39 - (_QWORD)*v38;
      v44 = v43 >> 2;
      if (v43 >> 2 <= (unint64_t)(v42 + 1))
        v44 = v42 + 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        if (v45 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v46 = (char *)operator new(8 * v45);
      }
      else
      {
        v46 = 0;
      }
      v47 = (unint64_t *)&v46[8 * v42];
      *v47 = v28;
      v41 = v47 + 1;
      v49 = (char *)*v38;
      v48 = (char *)v38[1];
      if (v48 != *v38)
      {
        do
        {
          v50 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *--v47 = v50;
        }
        while (v48 != v49);
        v48 = (char *)*v38;
      }
      *v38 = v47;
      v38[1] = v41;
      v38[2] = &v46[8 * v45];
      if (v48)
        operator delete(v48);
    }
    else
    {
      *v40 = v28;
      v41 = v40 + 1;
    }
    v38[1] = v41;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v82, v81[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v84, v83);
  v51 = v86;
  if (v86)
  {
    v52 = (unint64_t *)&v86->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (*((_QWORD *)&v73 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 16))(*((_QWORD *)&v73 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v73 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v56 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v57 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v57 = (_QWORD *)*v22;
    v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v57;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v58.__d_.__rep_ - v70.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v56, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v22 = (_QWORD *)*v22;
  v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v60, v22, (double)((v59.__d_.__rep_ - v70.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v73 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 16))(*((_QWORD *)&v73 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v73 + 1));
    }
  }
  result.n128_u64[0] = v69;
  result.n128_u64[1] = v68;
  *v67 = result;
  return result;
}

void sub_1DE91CA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,__int128 a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v41 - 184), *(unsigned __int8 *)(v41 - 192));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v41 - 168), *(unsigned __int8 *)(v41 - 176));
  v43 = *(std::__shared_weak_count **)(v41 - 152);
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a20);
  PersistentModule::~PersistentModule(a16);
  if (a18)
  {
    v46 = (unint64_t *)&a18->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v40);
  operator delete(v48);
  if (a18)
  {
    v49 = (unint64_t *)&a18->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<TransliteratePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9350D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TransliteratePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9350D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TransliteratePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930FE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930FE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930FE0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91CDE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930FE0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  _QWORD *v37;
  std::chrono::steady_clock::time_point v38;
  std::chrono::steady_clock::time_point v39;
  const char *v40;
  unint64_t *v41;
  unint64_t v42;
  __n128 result;
  __n128 *v44;
  __int128 v45;
  void *v46;
  void **v47;
  _BYTE buf[22];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v45 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x170uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA934CE8;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v45 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 24) = &off_1EA921438;
  *(_QWORD *)(v7 + 352) = 0;
  *(_QWORD *)(v7 + 360) = 0;
  v44 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init MatchPromptPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init MatchPromptPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v45);
  v13 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)(v7 + 320) = FrontendEnvironment::get_shared_component_instance<PromptDatabase>(*(_QWORD *)(*(_QWORD *)buf + 184));
    *(_QWORD *)(v7 + 328) = FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>(*(_QWORD *)(v13 + 184));
    {
      if ((_QWORD *)(v13 + 168) == v14)
        v15 = 0;
      else
        v15 = v14[5] + 8;
    }
    else
    {
      v47 = &v46;
      v17 = operator new();
      *(_QWORD *)v17 = &off_1EA922CE8;
      *(_BYTE *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 12) = -1;
      v18 = v16[5];
      v16[5] = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v17 = v16[5];
      }
      v15 = v17 + 8;
    }
    *(_QWORD *)(v7 + 336) = v15;
    v19 = *(_QWORD *)(v13 + 96);
    v20 = *(std::__shared_weak_count **)(v13 + 104);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    *(_BYTE *)(v7 + 344) = Frontend::check_hydra_fe(v19);
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v25 = operator new(0x20uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_1EA933890;
  *(_QWORD *)&v26 = UTFTransliterator::UTFTransliterator(v25 + 3, (char *)L"PROMPT_NORM", (char *)aLowerNfc);
  *((_QWORD *)&v26 + 1) = v25;
  v27 = *(std::__shared_weak_count **)(v7 + 360);
  *(_OWORD *)(v7 + 352) = v26;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (*((_QWORD *)&v45 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v35 = (_QWORD *)(a1 + 8);
  v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v37 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v37 = (_QWORD *)*v35;
    v38.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v37;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v38.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v36, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v35 = (_QWORD *)*v35;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v40, v35, (double)((v39.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v45 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *v44 = result;
  return result;
}

void sub_1DE91D33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;

  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a18)
  {
    v25 = (unint64_t *)&a18->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v19[14].__shared_weak_owners_);
  PersistentModule::~PersistentModule(v20);
  if (v18)
  {
    v27 = (unint64_t *)&v18->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v29);
  if (v18)
  {
    v30 = (unint64_t *)&v18->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<MatchPromptPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MatchPromptPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MatchPromptPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930F88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930F88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930F88;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91D5F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930F88;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  _QWORD *v25;
  std::chrono::steady_clock::time_point v26;
  std::chrono::steady_clock::time_point v27;
  const char *v28;
  unint64_t *v29;
  unint64_t v30;
  __n128 result;
  __int128 v32;
  std::chrono::steady_clock::time_point v33;
  _BYTE buf[22];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v32 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x150uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA934CB0;
  v9 = v7 + 3;
  if (*((_QWORD *)&v32 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  PersistentModule::PersistentModule(v7 + 3, a2, v32, *((std::__shared_weak_count **)&v32 + 1));
  if (*((_QWORD *)&v32 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  *v9 = &off_1EA9213C8;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_INFO, "FE Init FilterAudioPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init FilterAudioPersistentModule", v16);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v32);
  v17 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)(v8 + 320) = FrontendEnvironment::get_shared_component_instance<PromptDatabase>(*(_QWORD *)(*(_QWORD *)buf + 184));
    *(_QWORD *)(v8 + 328) = FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>(*(_QWORD *)(v17 + 184));
  }
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v23 = (_QWORD *)(a1 + 8);
  v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v25 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v25 = (_QWORD *)*v23;
    v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v26.__d_.__rep_ - v33.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v24, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v23 = (_QWORD *)*v23;
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v28, v23, (double)((v27.__d_.__rep_ - v33.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v32 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DE91DA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  void **v17;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;

  PersistentModule::~PersistentModule(v17);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v21);
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FilterAudioPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FilterAudioPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FilterAudioPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930F30;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930F30;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930F30;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91DC98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930F30;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  BOOL v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  _QWORD *v54;
  std::chrono::steady_clock::time_point v55;
  std::chrono::steady_clock::time_point v56;
  const char *v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 result;
  __n128 *v61;
  __int128 v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _BYTE buf[24];
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v62 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934BD0;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v62 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v62, *((std::__shared_weak_count **)&v62 + 1));
  if (*((_QWORD *)&v62 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA921290;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  v61 = a4;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "Init TextSourcePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "Init TextSourcePersistentModule", v17);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)buf);
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v9 + 336;
  v22 = *(std::__shared_weak_count **)(v9 + 344);
  *(_QWORD *)(v9 + 336) = 0;
  *(_QWORD *)(v9 + 344) = 0;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  SharedObjectPool::get_if<FrontendEnvironment>(&v68, v62);
  v25 = v68;
  if (!v68)
    goto LABEL_71;
  v27 = (unsigned __int8 *)(v68 + 144);
  v26 = *(unsigned __int8 *)(v68 + 144);
  *(_QWORD *)buf = v68 + 144;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v71 = 0;
  v72 = 0x8000000000000000;
  if (v26 == 1)
  {
    v29 = *(_QWORD *)(v68 + 152);
    *(_QWORD *)&buf[8] = v29 + 8;
    *(_QWORD *)&buf[8] = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v29, "pronounce_nn");
    v26 = *(unsigned __int8 *)(v25 + 144);
  }
  else
  {
    if (v26 == 2)
    {
      v28 = *(_QWORD *)(v68 + 152);
      *(_QWORD *)&buf[16] = *(_QWORD *)(v28 + 8);
      v63 = (unsigned __int8 *)(v68 + 144);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0x8000000000000000;
LABEL_33:
      v65 = *(_QWORD *)(v28 + 8);
      goto LABEL_36;
    }
    v72 = 1;
  }
  v63 = (unsigned __int8 *)(v25 + 144);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0x8000000000000000;
  if (v26 == 1)
  {
    v64 = *(_QWORD *)(v25 + 152) + 8;
  }
  else
  {
    if (v26 == 2)
    {
      v28 = *(_QWORD *)(v25 + 152);
      goto LABEL_33;
    }
    v67 = 1;
  }
LABEL_36:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, &v63))
  {
    goto LABEL_71;
  }
  *(_QWORD *)buf = v25 + 144;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v71 = 0;
  v72 = 0x8000000000000000;
  v30 = *v27;
  if (v30 == 1)
  {
    v32 = *(_QWORD *)(v25 + 152);
    v33 = v32 + 8;
    *(_QWORD *)&buf[8] = v32 + 8;
    v34 = *(_QWORD *)(v32 + 8);
    if (!v34)
      goto LABEL_47;
    v35 = v32 + 8;
    do
    {
      v36 = std::string::compare((const std::string *)(v34 + 32), "source");
      v37 = (uint64_t *)(v34 + 8);
      if (v36 >= 0)
      {
        v37 = (uint64_t *)v34;
        v35 = v34;
      }
      v34 = *v37;
    }
    while (*v37);
    if (v35 == v33 || std::string::compare((const std::string *)(v35 + 32), "source") >= 1)
LABEL_47:
      v35 = v33;
    *(_QWORD *)&buf[8] = v35;
    v25 = v68;
    v30 = *(unsigned __int8 *)(v68 + 144);
    v21 = v9 + 336;
  }
  else
  {
    if (v30 == 2)
    {
      v31 = *(_QWORD *)(v25 + 152);
      *(_QWORD *)&buf[16] = *(_QWORD *)(v31 + 8);
      v63 = (unsigned __int8 *)(v25 + 144);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0x8000000000000000;
      goto LABEL_53;
    }
    v72 = 1;
  }
  v63 = (unsigned __int8 *)(v25 + 144);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0x8000000000000000;
  if (v30 == 1)
  {
    v64 = *(_QWORD *)(v25 + 152) + 8;
    goto LABEL_56;
  }
  if (v30 != 2)
  {
    v67 = 1;
    goto LABEL_56;
  }
  v31 = *(_QWORD *)(v25 + 152);
LABEL_53:
  v65 = *(_QWORD *)(v31 + 8);
LABEL_56:
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, &v63))
  {
    v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v25 + 144), "source");
    std::string::basic_string[abi:ne180100]<0>(buf, "hydra_parse_ssml");
    LOBYTE(v63) = 1;
    v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)v38, (const void **)buf, (unsigned __int8 *)&v63);
    v40 = v39;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v40)
        goto LABEL_71;
    }
    else if (!v39)
    {
      goto LABEL_71;
    }
  }
  DetectSSML::instance((DetectSSML *)buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)buf);
  v41 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v42 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  ParseSSML::create((__n128 *)buf, 0, 0, v68);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v21, (__int128 *)buf);
  v44 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v45 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_71:
  v47 = v69;
  if (v69)
  {
    v48 = (unint64_t *)&v69->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (*((_QWORD *)&v62 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v52 = (_QWORD *)(a1 + 8);
  v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v54 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v54 = (_QWORD *)*v52;
    v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v54;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v55.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v53, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v52 = (_QWORD *)*v52;
  v56.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v57, v52, (double)((v56.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v62 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *v61 = result;
  return result;
}

void sub_1DE91E41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  v32 = v30;
  if (a27 < 0)
    operator delete(__p);
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v32);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v31);
  PersistentModule::~PersistentModule(v29);
  if (v27)
  {
    v36 = (unint64_t *)&v27->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v38);
  if (v27)
  {
    v39 = (unint64_t *)&v27->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<TextSourcePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TextSourcePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TextSourcePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931668;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931668;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931668;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91E6FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931668;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  __n128 *v15;
  _QWORD *v16;
  std::chrono::steady_clock::time_point v17;
  const char *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 result;
  __int128 v22;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x140uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935298;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA921D88;
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = (_QWORD *)(a1 + 8);
  v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v15 = a3;
    v16 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v13;
    *(_DWORD *)buf = 136315394;
    v24 = v16;
    v25 = 2048;
    v26 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v15;
  }
  if (*(char *)(a1 + 31) < 0)
    v13 = (_QWORD *)*v13;
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v18, v13, (double)((v17.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v22 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE91E9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ExtractFeaturesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ExtractFeaturesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931820;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931820;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931820;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91EC04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931820;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  unint64_t v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  uint8_t buf[4];
  _QWORD *v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x140uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9354C8;
  v8 = (unint64_t)(v6 + 3);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA922070;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "FE Init CountConstituentsPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init CountConstituentsPersistentModule", v12);
  if (*((_QWORD *)&v26 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = (_QWORD *)(a1 + 8);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v17 = v8;
    v18 = a3;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v15;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    v28 = v19;
    v29 = 2048;
    v30 = (double)((v20.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v18;
    v8 = v17;
  }
  if (*(char *)(a1 + 31) < 0)
    v15 = (_QWORD *)*v15;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v15, (double)((v21.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_1DE91EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<CountConstituentsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9354C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CountConstituentsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9354C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<CountConstituentsPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AD88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AD88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90AD88;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91F184(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90AD88;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::string::size_type *v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;
  std::string::size_type v37;
  std::chrono::steady_clock::time_point v38;
  std::chrono::steady_clock::time_point v39;
  const char *v40;
  unint64_t *v41;
  unint64_t v42;
  __n128 result;
  uint64_t v44;
  __n128 *v45;
  std::mutex *v46;
  uint64_t v47;
  std::chrono::steady_clock::time_point v48;
  uint64_t *v49;
  __int128 v50;
  std::string v51;
  std::string __p;
  void *v53[2];
  char v54;
  std::string buf;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v50 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v48.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x170uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA90B100;
  if (*((_QWORD *)&v50 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v47 = a1;
  v45 = a4;
  Module::Module((Module *)(v7 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = &off_1EA90A8E8;
  v10 = v7 + 40;
  v11 = (uint64_t)(v7 + 42);
  v49 = v7 + 44;
  *((_OWORD *)v7 + 20) = 0u;
  *((_OWORD *)v7 + 21) = 0u;
  *((_OWORD *)v7 + 22) = 0u;
  if ((v12 & 1) == 0
  {
    v44 = operator new();
    *(_QWORD *)v44 = 850045863;
    *(_OWORD *)(v44 + 8) = 0u;
    *(_OWORD *)(v44 + 24) = 0u;
    *(_OWORD *)(v44 + 40) = 0u;
    *(_QWORD *)(v44 + 56) = 0;
    RobertaWordEmbPersistentModule::thread_mutex(void)::mutex = v44;
    v11 = (uint64_t)(v7 + 42);
  }
  v46 = (std::mutex *)RobertaWordEmbPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)RobertaWordEmbPersistentModule::thread_mutex(void)::mutex);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  SharedObjectPool::get<VoiceConfig>(v53, (__int128 **)v50);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v7 + 40), (__int128 *)v53);
  v14 = (std::__shared_weak_count *)v53[1];
  if (v53[1])
  {
    v15 = (unint64_t *)((char *)v53[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *v10;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(v53, v17, 1920427373, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v53, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v22 = (char *)operator new(0x100uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_1EA935A78;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *((_DWORD *)v22 + 14) = 1065353216;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 5) = 0u;
  *((_OWORD *)v22 + 6) = 0u;
  *((_QWORD *)v22 + 16) = 5000;
  *((_OWORD *)v22 + 7) = 0u;
  std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::unordered_map((uint64_t)(v22 + 136), v23, v24);
  *((_QWORD *)v22 + 23) = v22 + 184;
  *((_QWORD *)v22 + 24) = v22 + 184;
  *((_QWORD *)v22 + 25) = 0;
  v22[208] = 1;
  *((_DWORD *)v22 + 53) = 2139095039;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v22 + 27, "0.1");
  *((_QWORD *)v22 + 30) = 0;
  *((_QWORD *)v22 + 31) = "'s|'t|'re|'ve|'m|'ll|'d| ?[\\w\\-\\:\\^]+| ?\\d+| ?[^\\s\\w\\d]+|\\s+(?!\\S)|\\s+";
  BBPE::init_codes((BBPE *)(v22 + 24));
  BBPE::setup_pre_tokenization_regex((BBPE *)(v22 + 24));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 24);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v49, (__int128 *)&__p);
  v25 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *v49;
  v29 = *v10;
  v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "tokenizer_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v30, &v51);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v29 + 40))(&__p, v29, 1920431214, &v51, 0);
  BBPE::load_data(v28, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::mutex::unlock(v46);
  if (*((_QWORD *)&v50 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v33 = (std::string::size_type *)(v47 + 8);
  v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v35 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO);
  v36 = v47;
  if (v35)
  {
    v37 = v47 + 8;
    if (*(char *)(v47 + 31) < 0)
      v37 = *v33;
    v38.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v37;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v38.__d_.__rep_ - v48.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v34, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    v36 = v47;
  }
  if (*(char *)(v36 + 31) < 0)
    v33 = (std::string::size_type *)*v33;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v40, v33, (double)((v39.__d_.__rep_ - v48.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v50 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)(v7 + 3);
  result.n128_u64[1] = (unint64_t)v7;
  *v45 = result;
  return result;
}

void sub_1DE91F7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v40);
  PersistentModule::~PersistentModule(a15);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v39);
  operator delete(v44);
  if (v38)
  {
    v45 = (unint64_t *)&v38->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<RobertaWordEmbPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RobertaWordEmbPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<RobertaWordEmbPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931140;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931140;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931140;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE91FAE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931140;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13;
  std::mutex *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type *v26;
  NSObject *v27;
  std::string::size_type v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  uint64_t v35;
  __n128 *v36;
  __int128 v37;
  std::string __p;
  void *v39[2];
  char v40;
  std::string buf;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v37 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934E00;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v37 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Module::Module((Module *)(v8 + 3));
  v36 = a4;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 24) = &off_1EA9215F8;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  if ((v13 & 1) == 0
  {
    v35 = operator new();
    *(_QWORD *)v35 = 850045863;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_QWORD *)(v35 + 56) = 0;
    FS2S1DecoderPersistentModule::thread_mutex(void)::mutex = v35;
  }
  v14 = (std::mutex *)FS2S1DecoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FS2S1DecoderPersistentModule::thread_mutex(void)::mutex);
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &buf);
  SharedObjectPool::get<VoiceConfig>(v39, (__int128 **)v37);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)v39);
  v16 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v17 = (unint64_t *)((char *)v39[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(_QWORD *)(v9 + 320);
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v19 + 40))(v39, v19, 1717662579, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v39, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 336, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::mutex::unlock(v14);
  if (*((_QWORD *)&v37 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v26 = (std::string::size_type *)(a1 + 8);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v28 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v28 = *v26;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v26 = (std::string::size_type *)*v26;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v31, v26, (double)((v30.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v37 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *v36 = result;
  return result;
}

void sub_1DE91FF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  PersistentModule::~PersistentModule(v33);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v39);
  if (v31)
  {
    v40 = (unint64_t *)&v31->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FS2S1DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1DecoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931198;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931198;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931198;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE920230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931198;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13;
  std::mutex *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type *v26;
  NSObject *v27;
  std::string::size_type v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  uint64_t v35;
  __n128 *v36;
  __int128 v37;
  std::string __p;
  void *v39[2];
  char v40;
  std::string buf;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v37 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934E38;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v37 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Module::Module((Module *)(v8 + 3));
  v36 = a4;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 24) = &off_1EA921668;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  if ((v13 & 1) == 0
  {
    v35 = operator new();
    *(_QWORD *)v35 = 850045863;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_QWORD *)(v35 + 56) = 0;
    FS2S1EncoderPersistentModule::thread_mutex(void)::mutex = v35;
  }
  v14 = (std::mutex *)FS2S1EncoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FS2S1EncoderPersistentModule::thread_mutex(void)::mutex);
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &buf);
  SharedObjectPool::get<VoiceConfig>(v39, (__int128 **)v37);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)v39);
  v16 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v17 = (unint64_t *)((char *)v39[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(_QWORD *)(v9 + 320);
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v19 + 40))(v39, v19, 1717662579, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v39, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 336, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::mutex::unlock(v14);
  if (*((_QWORD *)&v37 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v26 = (std::string::size_type *)(a1 + 8);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v28 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v28 = *v26;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v26 = (std::string::size_type *)*v26;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v31, v26, (double)((v30.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v37 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *v36 = result;
  return result;
}

void sub_1DE9206E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  PersistentModule::~PersistentModule(v33);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v39);
  if (v31)
  {
    v40 = (unint64_t *)&v31->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FS2S1EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930E28;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930E28;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930E28;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE92097C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930E28;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  InferenceEngine::MilInferenceModel ***v10;
  unsigned __int8 v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::string::size_type *v21;
  InferenceEngine::MilInferenceModel **v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  std::string::size_type v34;
  std::chrono::steady_clock::time_point v35;
  std::chrono::steady_clock::time_point v36;
  const char *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 result;
  uint64_t v41;
  __int128 v42;
  __n128 *v43;
  unsigned __int8 v45[8];
  uint64_t *v46;
  std::string __p;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::string buf;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v42 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x150uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA934A48;
  if (*((_QWORD *)&v42 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Module::Module((Module *)(v7 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = &off_1EA921010;
  v10 = (InferenceEngine::MilInferenceModel ***)(v7 + 40);
  v7[41] = 0;
  {
    v41 = operator new();
    *(_QWORD *)v41 = 850045863;
    *(_OWORD *)(v41 + 8) = 0u;
    *(_OWORD *)(v41 + 24) = 0u;
    *(_OWORD *)(v41 + 40) = 0u;
    *(_QWORD *)(v41 + 56) = 0;
    S1NARDecoderBaseInference::thread_mutex(void)::mutex = v41;
  }
  v12 = (std::mutex *)S1NARDecoderBaseInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)S1NARDecoderBaseInference::thread_mutex(void)::mutex);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  SharedObjectPool::get<VoiceConfig>(&v50, (__int128 **)v42);
  v14 = v50;
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v14 + 40))(v48, v14, 1936613746, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::BaseInferenceController,std::allocator<InferenceEngine::BaseInferenceController>,std::string &,std::string &,void>(&__p, (char *)v48, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v7 + 40), (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  InferenceEngine::MLInferenceModel::get_model_parameters(*v10, (uint64_t)v45);
  v19 = (std::__shared_weak_count *)operator new(0x40uLL);
  v43 = a4;
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936060;
  __p.__r_.__value_.__s.__data_[0] = v45[0];
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
  v45[0] = 0;
  v46 = 0;
  InferenceEngine::S1NARDecoderIOProcessor::S1NARDecoderIOProcessor(&v19[1], &__p);
  v21 = (std::string::size_type *)(a1 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
  v22 = *v10;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19[1];
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  (*((void (**)(InferenceEngine::MilInferenceModel **, std::string *))*v22 + 5))(v22, &__p);
  v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v49 < 0)
    operator delete(v48[0]);
  v28 = v51;
  if (v51)
  {
    v29 = (unint64_t *)&v51->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::mutex::unlock(v12);
  if (*((_QWORD *)&v42 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v42 + 1) + 16))(*((_QWORD *)&v42 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v34 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v34 = *v21;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v35.__d_.__rep_ - v6.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v21 = (std::string::size_type *)*v21;
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v37, v21, (double)((v36.__d_.__rep_ - v6.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v42 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v42 + 1) + 16))(*((_QWORD *)&v42 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)(v7 + 3);
  result.n128_u64[1] = (unint64_t)v7;
  *v43 = result;
  return result;
}

void sub_1DE920F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, void **a12, __int128 a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  PersistentModule::~PersistentModule(a12);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v37);
  if (v31)
  {
    v38 = (unint64_t *)&v31->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<S1NARDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<S1NARDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<S1NARDecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9313A8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9313A8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9313A8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9212A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9313A8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type *v27;
  NSObject *v28;
  unint64_t v29;
  __n128 *v30;
  std::string::size_type v31;
  std::chrono::steady_clock::time_point v32;
  std::chrono::steady_clock::time_point v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 result;
  uint64_t v38;
  __int128 v39;
  std::string __p;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string buf;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA935030;
  v10 = (unint64_t)(v8 + 3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = &off_1EA9219A8;
  v9[41] = 0;
  kdebug_trace();
  if ((v14 & 1) == 0
  {
    v38 = operator new();
    *(_QWORD *)v38 = 850045863;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_OWORD *)(v38 + 40) = 0u;
    *(_QWORD *)(v38 + 56) = 0;
    FastSpeech2S1DecoderInference::thread_mutex(void)::mutex = v38;
  }
  v15 = (std::mutex *)FastSpeech2S1DecoderInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FastSpeech2S1DecoderInference::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v43, (__int128 **)v39);
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &buf);
  v17 = v43;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(v41, v17, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v41, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v9 + 40), (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  kdebug_trace();
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::unlock(v15);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = (std::string::size_type *)(a1 + 8);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v29 = v10;
    v30 = a4;
    v31 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v31 = *v27;
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v30;
    v10 = v29;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v27 = (std::string::size_type *)*v27;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v34, v27, (double)((v33.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v35 = (unint64_t *)&v11->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE9217A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  void **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  PersistentModule::~PersistentModule(v32);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v38);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2S1DecoderInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AE38;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AE38;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90AE38;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE921AA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90AE38;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  __n128 *v20;
  _QWORD *v21;
  std::chrono::steady_clock::time_point v22;
  std::chrono::steady_clock::time_point v23;
  const char *v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 result;
  __int128 v28;
  _BYTE buf[22];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA90B1A8;
  v10 = v8 + 3;
  if (*((_QWORD *)&v28 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)buf = v28;
    v13 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)buf = (unint64_t)v28;
  }
  SoundStormPersistentModule::SoundStormPersistentModule((Module *)(v8 + 3), a2, (__int128 ***)buf);
  if (*((_QWORD *)&v28 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v28 + 1) + 16))(*((_QWORD *)&v28 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
    }
    *v10 = &off_1EA90AA10;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v28 + 1) + 16))(*((_QWORD *)&v28 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
    }
  }
  else
  {
    *v10 = &off_1EA90AA10;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v18 = (_QWORD *)(a1 + 8);
  v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v20 = a4;
    v21 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v21 = (_QWORD *)*v18;
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v20;
  }
  if (*(char *)(a1 + 31) < 0)
    v18 = (_QWORD *)*v18;
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v18, (double)((v23.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v28 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v28 + 1) + 16))(*((_QWORD *)&v28 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DE921DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v20);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<SoundStormStreamingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormStreamingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormStreamingPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930ED8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930ED8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930ED8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE922044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930ED8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934B98;
  v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)buf = v26;
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  SoundStormPersistentModule::SoundStormPersistentModule((Module *)(v8 + 3), a2, (__int128 ***)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = (_QWORD *)(a1 + 8);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = a4;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v16;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0)
    v16 = (_QWORD *)*v16;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DE92233C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<SoundStormPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90ADE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90ADE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90ADE0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE922550(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90ADE0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type *v27;
  NSObject *v28;
  unint64_t v29;
  __n128 *v30;
  std::string::size_type v31;
  std::chrono::steady_clock::time_point v32;
  std::chrono::steady_clock::time_point v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 result;
  uint64_t v38;
  __int128 v39;
  std::string __p;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string buf;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA90B170;
  v10 = (unint64_t)(v8 + 3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = &off_1EA90A988;
  v9[41] = 0;
  if ((v14 & 1) == 0
  {
    v38 = operator new();
    *(_QWORD *)v38 = 850045863;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_OWORD *)(v38 + 40) = 0u;
    *(_QWORD *)(v38 + 56) = 0;
    AnetecStreamingDecoderBaseInference::thread_mutex(void)::mutex = v38;
  }
  v15 = (std::mutex *)AnetecStreamingDecoderBaseInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)AnetecStreamingDecoderBaseInference::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v43, (__int128 **)v39);
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &buf);
  v17 = v43;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(v41, v17, 1634628452, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v41, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v9 + 40), (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::unlock(v15);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = (std::string::size_type *)(a1 + 8);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v29 = v10;
    v30 = a4;
    v31 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v31 = *v27;
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v30;
    v10 = v29;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v27 = (std::string::size_type *)*v27;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v34, v27, (double)((v33.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v35 = (unint64_t *)&v11->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE922A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  void **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  PersistentModule::~PersistentModule(v32);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v38);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AnetecStreamingDecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AD30;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AD30;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90AD30;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE922D0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90AD30;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type *v27;
  NSObject *v28;
  unint64_t v29;
  __n128 *v30;
  std::string::size_type v31;
  std::chrono::steady_clock::time_point v32;
  std::chrono::steady_clock::time_point v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 result;
  uint64_t v38;
  __int128 v39;
  std::string __p;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string buf;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA90B058;
  v10 = (unint64_t)(v8 + 3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = &off_1EA90A780;
  v9[41] = 0;
  {
    v38 = operator new();
    *(_QWORD *)v38 = 850045863;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_OWORD *)(v38 + 40) = 0u;
    *(_QWORD *)(v38 + 56) = 0;
    AnetecDecoderBaseInference::thread_mutex(void)::mutex = v38;
  }
  v15 = (std::mutex *)AnetecDecoderBaseInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)AnetecDecoderBaseInference::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v43, (__int128 **)v39);
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &buf);
  v17 = v43;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(v41, v17, 1634624611, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v41, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v9 + 40), (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::unlock(v15);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = (std::string::size_type *)(a1 + 8);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v29 = v10;
    v30 = a4;
    v31 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v31 = *v27;
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v30;
    v10 = v29;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v27 = (std::string::size_type *)*v27;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v34, v27, (double)((v33.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v35 = (unint64_t *)&v11->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE9231D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  void **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  PersistentModule::~PersistentModule(v32);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v38);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AnetecDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnetecDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AnetecDecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9318D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9318D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9318D0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9234C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9318D0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type *v27;
  NSObject *v28;
  unint64_t v29;
  __n128 *v30;
  std::string::size_type v31;
  std::chrono::steady_clock::time_point v32;
  std::chrono::steady_clock::time_point v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 result;
  uint64_t v38;
  __int128 v39;
  std::string __p;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string buf;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9355A8;
  v10 = (unint64_t)(v8 + 3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = &off_1EA922198;
  v9[41] = 0;
  kdebug_trace();
  if ((v14 & 1) == 0
  {
    v38 = operator new();
    *(_QWORD *)v38 = 850045863;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_OWORD *)(v38 + 40) = 0u;
    *(_QWORD *)(v38 + 56) = 0;
    FastSpeech2DecoderPersistentModule::thread_mutex(void)::mutex = v38;
  }
  v15 = (std::mutex *)FastSpeech2DecoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FastSpeech2DecoderPersistentModule::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v43, (__int128 **)v39);
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &buf);
  v17 = v43;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(v41, v17, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v41, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v9 + 40), (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  kdebug_trace();
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::unlock(v15);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = (std::string::size_type *)(a1 + 8);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v29 = v10;
    v30 = a4;
    v31 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v31 = *v27;
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v30;
    v10 = v29;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v27 = (std::string::size_type *)*v27;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v34, v27, (double)((v33.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v35 = (unint64_t *)&v11->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE9239C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  void **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  PersistentModule::~PersistentModule(v32);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v38);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FastSpeech2DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9355A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9355A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2DecoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931928;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931928;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931928;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE923CC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931928;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type *v27;
  NSObject *v28;
  unint64_t v29;
  __n128 *v30;
  std::string::size_type v31;
  std::chrono::steady_clock::time_point v32;
  std::chrono::steady_clock::time_point v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 result;
  uint64_t v38;
  __int128 v39;
  std::string __p;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string buf;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9355E0;
  v10 = (unint64_t)(v8 + 3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = &off_1EA922208;
  v9[41] = 0;
  kdebug_trace();
  if ((v14 & 1) == 0
  {
    v38 = operator new();
    *(_QWORD *)v38 = 850045863;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_OWORD *)(v38 + 40) = 0u;
    *(_QWORD *)(v38 + 56) = 0;
    FastSpeech2EncoderPersistentModule::thread_mutex(void)::mutex = v38;
  }
  v15 = (std::mutex *)FastSpeech2EncoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FastSpeech2EncoderPersistentModule::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v43, (__int128 **)v39);
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &buf);
  v17 = v43;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(v41, v17, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v41, (uint64_t)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v9 + 40), (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  kdebug_trace();
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::unlock(v15);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = (std::string::size_type *)(a1 + 8);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v29 = v10;
    v30 = a4;
    v31 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v31 = *v27;
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v30;
    v10 = v29;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v27 = (std::string::size_type *)*v27;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v34, v27, (double)((v33.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v35 = (unint64_t *)&v11->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE9241C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  void **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  PersistentModule::~PersistentModule(v32);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v38);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FastSpeech2EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9355E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9355E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2EncoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930E80;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA930E80;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA930E80;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9244C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA930E80;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v25;
  const char *v26;
  std::string *v27;
  void *exception;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  int v46;
  int v47;
  std::__shared_weak_count *size;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  const char *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  BOOL v58;
  char *v59;
  char *v60;
  _OWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  const char *v68;
  std::string *p_buf;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  unint64_t *v85;
  std::string *v86;
  char *v87;
  char *v88;
  _OWORD *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  const char *v96;
  std::string *v97;
  std::string *v98;
  std::string *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::string::size_type *v117;
  NSObject *v118;
  std::string::size_type v119;
  std::chrono::steady_clock::time_point v120;
  std::chrono::steady_clock::time_point v121;
  const char *v122;
  unint64_t *v123;
  unint64_t v124;
  __n128 result;
  uint64_t v126;
  void *v127;
  std::string *v128;
  void *v129;
  std::string *v130;
  void *v131;
  int v132;
  std::string::size_type v133;
  const char *status_string;
  std::string *p_p;
  void *v136;
  int v137;
  std::string::size_type v138;
  const char *v139;
  std::string *v140;
  uint64_t v141;
  uint64_t v142;
  std::mutex *v143;
  __int128 v144;
  unint64_t v145;
  std::string v146;
  std::string v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  std::string v153;
  std::string __p;
  std::string v155;
  std::string v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  __int128 **v159;
  std::string v160;
  std::string buf;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v144 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x168uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934B60;
  v10 = v8 + 3;
  v11 = v144;
  if (*((_QWORD *)&v144 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v144, *((std::__shared_weak_count **)&v144 + 1));
  if (*((_QWORD *)&v144 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v144 + 1) + 16))(*((_QWORD *)&v144 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v144 + 1));
    }
  }
  v145 = (unint64_t)v10;
  *(_QWORD *)(v9 + 24) = off_1EA9211B0;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_QWORD *)(v9 + 352) = 0;
  {
    v126 = operator new();
    *(_QWORD *)v126 = 850045863;
    *(_OWORD *)(v126 + 8) = 0u;
    *(_OWORD *)(v126 + 24) = 0u;
    *(_OWORD *)(v126 + 40) = 0u;
    *(_QWORD *)(v126 + 56) = 0;
    MilWaveRNNPersistentModule::thread_mutex(void)::mutex = v126;
  }
  v18 = MilWaveRNNPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)MilWaveRNNPersistentModule::thread_mutex(void)::mutex);
  v143 = (std::mutex *)v18;
  kdebug_trace();
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v19, &v147);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&buf.__r_.__value_.__l.__data_, &v146);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&v147.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(v147.__r_.__value_.__r.__words[2]) != 3)
    {
      if (HIBYTE(v147.__r_.__value_.__r.__words[2]) != 8)
        goto LABEL_49;
      v20 = &v147;
      goto LABEL_20;
    }
    if (LOWORD(v147.__r_.__value_.__l.__data_) != 26989 || v147.__r_.__value_.__s.__data_[2] != 108)
    {
LABEL_49:
      exception = __cxa_allocate_exception(0x10uLL);
      v30 = &v147;
      if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = (std::string *)v147.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Framework type not supported. %s", (const char *)v30);
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
LABEL_38:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEFAULT, "Using MIL inference.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using MIL inference.", v26);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v146.__r_.__value_.__l.__size_ != 14)
        goto LABEL_257;
      v27 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) != 14)
        goto LABEL_257;
      v27 = &v146;
    }
    v31 = v27->__r_.__value_.__r.__words[0];
    v32 = *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 6);
    if (v31 == 0x75735F6465737566 && v32 == 0x656C616373627573)
    {
      v34 = operator new(0x50uLL);
      v34[1] = 0;
      v34[2] = 0;
      *v34 = &off_1EA9357D8;
      if (*((_QWORD *)&v11 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      SharedObjectPool::get<VoiceConfig>(&v153, (__int128 **)v11);
      v37 = v153.__r_.__value_.__r.__words[0];
      v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "linear_model_path");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v38, &buf);
      (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, std::string *, _QWORD))(*(_QWORD *)v37 + 40))(&v156, v37, 2003988078, &buf, 0);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "gru_model_path");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v39, &buf);
      (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, std::string *, _QWORD))(*(_QWORD *)v37 + 40))(&v155, v37, 2003988078, &buf, 0);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v42 = &v156;
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v42 = (std::string *)v156.__r_.__value_.__r.__words[0];
        v43 = &v155;
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::string *)v155.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v43;
        _os_log_impl(&dword_1DE3F6000, v40, OS_LOG_TYPE_DEFAULT, "Create MIL WaveRNN model. linear_model_path = %s, gru_model_path = %s", (uint8_t *)&buf, 0x16u);
      }
      v44 = &v156;
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v44 = (std::string *)v156.__r_.__value_.__r.__words[0];
      v45 = &v155;
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = (std::string *)v155.__r_.__value_.__r.__words[0];
      Diagnostics::log(5, "Create MIL WaveRNN model. linear_model_path = %s, gru_model_path = %s", v41, v44, v45);
      v34[9] = espresso_create_context();
      v34[7] = espresso_create_plan();
      v34[8] = espresso_create_plan();
      v46 = espresso_plan_add_network();
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to load network.");
      if (v46)
      {
        v131 = __cxa_allocate_exception(0x10uLL);
        v132 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v133 = __p.__r_.__value_.__r.__words[0];
        status_string = (const char *)espresso_get_status_string();
        p_p = &__p;
        if (v132 < 0)
          p_p = (std::string *)v133;
        StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)p_p, v46, status_string);
        MEMORY[0x1DF0EC99C](v131, &buf);
        __cxa_throw(v131, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v47 = espresso_plan_add_network();
      std::string::basic_string[abi:ne180100]<0>(&v160, "Unable to load network.");
      if (v47)
      {
        v136 = __cxa_allocate_exception(0x10uLL);
        v137 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
        v138 = v160.__r_.__value_.__r.__words[0];
        v139 = (const char *)espresso_get_status_string();
        v140 = &v160;
        if (v137 < 0)
          v140 = (std::string *)v138;
        StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v140, v47, v139);
        MEMORY[0x1DF0EC99C](v136, &buf);
        __cxa_throw(v136, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
      if (v153.__r_.__value_.__l.__size_)
      {
        v49 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (*((_QWORD *)&v11 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
        }
      }
      *(_QWORD *)&v53 = v34 + 3;
      *((_QWORD *)&v53 + 1) = v34;
      v54 = *(std::__shared_weak_count **)(v9 + 328);
      *(_OWORD *)(v9 + 320) = v53;
      v55 = "37MilWaveRNNFusedSubscaleInferenceModel";
      if (!v54)
        goto LABEL_231;
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      goto LABEL_229;
    }
LABEL_257:
    v127 = __cxa_allocate_exception(0x10uLL);
    v128 = &v146;
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v128 = (std::string *)v146.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Model type not supported. %s", (const char *)v128);
    MEMORY[0x1DF0EC99C](v127, &buf);
    __cxa_throw(v127, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v147.__r_.__value_.__l.__size_ == 3)
  {
    if (*(_WORD *)v147.__r_.__value_.__l.__data_ != 26989 || *(_BYTE *)(v147.__r_.__value_.__r.__words[0] + 2) != 108)
      goto LABEL_49;
    goto LABEL_38;
  }
  if (v147.__r_.__value_.__l.__size_ != 8)
    goto LABEL_49;
  v20 = (std::string *)v147.__r_.__value_.__r.__words[0];
LABEL_20:
  if (v20->__r_.__value_.__r.__words[0] != 0x736E6E62326C696DLL)
    goto LABEL_49;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_DEFAULT, "Using MIL2BNNS inference.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Using MIL2BNNS inference.", v22);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v146.__r_.__value_.__l.__size_ != 8)
    {
      if (v146.__r_.__value_.__l.__size_ != 14
        || (*(_QWORD *)v146.__r_.__value_.__l.__data_ == 0x75735F6465737566
          ? (v58 = *(_QWORD *)(v146.__r_.__value_.__r.__words[0] + 6) == 0x656C616373627573)
          : (v58 = 0),
            !v58))
      {
LABEL_260:
        v129 = __cxa_allocate_exception(0x10uLL);
        v130 = &v146;
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v130 = (std::string *)v146.__r_.__value_.__r.__words[0];
        StringFormatter::StringFormatter((StringFormatter *)&buf, "Model type not supported. %s", (const char *)v130);
        MEMORY[0x1DF0EC99C](v129, &buf);
        __cxa_throw(v129, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
LABEL_109:
      v59 = (char *)operator new(0x38uLL);
      v60 = v59;
      *((_QWORD *)v59 + 1) = 0;
      *((_QWORD *)v59 + 2) = 0;
      *(_QWORD *)v59 = &off_1EA9359D0;
      v61 = v59 + 24;
      if (*((_QWORD *)&v11 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v141 = (uint64_t)(v59 + 40);
      *v61 = 0u;
      *(_OWORD *)(v59 + 40) = 0u;
      SharedObjectPool::get<VoiceConfig>(&v157, (__int128 **)v11);
      v64 = v157;
      v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "linear_model_path");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v65, &v156);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v64 + 40))(&buf, v64, 2003988078, &v156, 0);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      v66 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "gru_model_path");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v66, &v155);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v64 + 40))(&v156, v64, 2003988078, &v155, 0);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear_model_compute_precision");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&__p.__r_.__value_.__l.__data_, &v155);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v160, "gru_model_compute_precision");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v160.__r_.__value_.__l.__data_, &__p);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        p_buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v70 = &v156;
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v70 = (std::string *)v156.__r_.__value_.__r.__words[0];
        LODWORD(v160.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v160.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        WORD2(v160.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v160.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v70;
        _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_DEFAULT, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", (uint8_t *)&v160, 0x16u);
      }
      v71 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v71 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v72 = &v156;
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v72 = (std::string *)v156.__r_.__value_.__r.__words[0];
      Diagnostics::log(5, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", v68, v71, v72);
      std::string::basic_string[abi:ne180100]<0>(&v153, "linear_model_io_names");
      v151 = 0uLL;
      v152 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v160, (unsigned __int8 *)a2, (const void **)&v153.__r_.__value_.__l.__data_, (__int128 **)&v151);
      v148 = &v151;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)&v153, (uint64_t)&buf, (unsigned __int8 **)&v160, (uint64_t *)&v155, 1);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v61, (__int128 *)&v153);
      v73 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
      if (v153.__r_.__value_.__l.__size_)
      {
        v74 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v151, "gru_model_io_names");
      v148 = 0;
      v149 = 0;
      v150 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v153, (unsigned __int8 *)a2, (const void **)&v151, &v148);
      v159 = &v148;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
      if (SHIBYTE(v152) < 0)
        operator delete((void *)v151);
      std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)&v151, (uint64_t)&v156, (unsigned __int8 **)&v153, (uint64_t *)&__p, 1);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v141, &v151);
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
      if (*((_QWORD *)&v151 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      *(_QWORD *)&v151 = &v153;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v79 = v158;
      if (v158)
      {
        v80 = (unint64_t *)&v158->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (*((_QWORD *)&v11 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
        }
      }
      *(_QWORD *)&v84 = v61;
      *((_QWORD *)&v84 + 1) = v60;
      v54 = *(std::__shared_weak_count **)(v9 + 328);
      *(_OWORD *)(v9 + 320) = v84;
      v55 = "42Mil2BnnsWaveRNNFusedSubscaleInferenceModel";
      if (v54)
      {
        v85 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldaxr(v85);
        while (__stlxr(v57 - 1, v85));
        goto LABEL_229;
      }
LABEL_231:
      v114 = (unint64_t)(v55 + 0x8000000000000000) & 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_232;
    }
    v86 = (std::string *)v146.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v146.__r_.__value_.__r.__words[2]) != 8)
    {
      if (HIBYTE(v146.__r_.__value_.__r.__words[2]) != 14)
        goto LABEL_260;
      if (v146.__r_.__value_.__r.__words[0] != 0x75735F6465737566
        || *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 6) != 0x656C616373627573)
      {
        goto LABEL_260;
      }
      goto LABEL_109;
    }
    v86 = &v146;
  }
  if (v86->__r_.__value_.__r.__words[0] != 0x656C616373627573)
    goto LABEL_260;
  v87 = (char *)operator new(0x38uLL);
  v88 = v87;
  *((_QWORD *)v87 + 1) = 0;
  *((_QWORD *)v87 + 2) = 0;
  *(_QWORD *)v87 = &off_1EA9357A0;
  v89 = v87 + 24;
  if (*((_QWORD *)&v11 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v142 = (uint64_t)(v87 + 40);
  *v89 = 0u;
  *(_OWORD *)(v87 + 40) = 0u;
  SharedObjectPool::get<VoiceConfig>(&v157, (__int128 **)v11);
  v92 = v157;
  v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "linear_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v93, &v156);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v92 + 40))(&buf, v92, 2003988078, &v156, 0);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "gru_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v94, &v155);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v92 + 40))(&v156, v92, 2003988078, &v155, 0);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "linear_model_compute_precision");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&__p.__r_.__value_.__l.__data_, &v155);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v160, "gru_model_compute_precision");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v160.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v95 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v97 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v97 = (std::string *)buf.__r_.__value_.__r.__words[0];
    v98 = &v156;
    if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v98 = (std::string *)v156.__r_.__value_.__r.__words[0];
    LODWORD(v160.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v160.__r_.__value_.__r.__words + 4) = (std::string::size_type)v97;
    WORD2(v160.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v160.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v98;
    _os_log_impl(&dword_1DE3F6000, v95, OS_LOG_TYPE_DEFAULT, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", (uint8_t *)&v160, 0x16u);
  }
  v99 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v99 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v100 = &v156;
  if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v100 = (std::string *)v156.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", v96, v99, v100);
  std::string::basic_string[abi:ne180100]<0>(&v153, "linear_model_io_names");
  v151 = 0uLL;
  v152 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v160, (unsigned __int8 *)a2, (const void **)&v153.__r_.__value_.__l.__data_, (__int128 **)&v151);
  v148 = &v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)&v153, (uint64_t)&buf, (unsigned __int8 **)&v160, (uint64_t *)&v155, 1);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v89, (__int128 *)&v153);
  v101 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
  if (v153.__r_.__value_.__l.__size_)
  {
    v102 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v151, "gru_model_io_names");
  v148 = 0;
  v149 = 0;
  v150 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v153, (unsigned __int8 *)a2, (const void **)&v151, &v148);
  v159 = &v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  if (SHIBYTE(v152) < 0)
    operator delete((void *)v151);
  std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)&v151, (uint64_t)&v156, (unsigned __int8 **)&v153, (uint64_t *)&__p, 1);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v142, &v151);
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  *(_QWORD *)&v151 = &v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v107 = v158;
  if (v158)
  {
    v108 = (unint64_t *)&v158->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (*((_QWORD *)&v11 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  *(_QWORD *)&v112 = v89;
  *((_QWORD *)&v112 + 1) = v88;
  v54 = *(std::__shared_weak_count **)(v9 + 328);
  *(_OWORD *)(v9 + 320) = v112;
  v55 = "37Mil2BnnsWaveRNNSubscaleInferenceModel";
  if (!v54)
    goto LABEL_231;
  v113 = (unint64_t *)&v54->__shared_owners_;
  do
    v57 = __ldaxr(v113);
  while (__stlxr(v57 - 1, v113));
LABEL_229:
  v114 = (unint64_t)(v55 + 0x8000000000000000) & 0x7FFFFFFFFFFFFFFFLL;
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
LABEL_232:
  MEMORY[0x1DF0ECA80](v9 + 336, v114);
  kdebug_trace();
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  std::mutex::unlock(v143);
  if (*((_QWORD *)&v11 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v117 = (std::string::size_type *)(a1 + 8);
  v118 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v119 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v119 = *v117;
    v120.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v119;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v120.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v118, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v117 = (std::string::size_type *)*v117;
  v121.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v122, v117, (double)((v121.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v11 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  result.n128_u64[0] = v145;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DE925A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, std::mutex *a16, void **a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *p_shared_owners;
  unint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;

  if (*(char *)(v59 + 359) < 0)
    operator delete(*a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v59 + 320);
  PersistentModule::~PersistentModule(a17);
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v59);
  operator delete(v63);
  if (v58)
  {
    v64 = (unint64_t *)&v58->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<MilWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MilWaveRNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931610;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931610;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931610;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE926280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931610;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  unsigned __int8 v16;
  _BOOL8 is_amx_available;
  size_t v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  void *v22;
  void *v23;
  size_t v24;
  std::string *p_buf;
  const void *v26;
  std::string::size_type size;
  std::string::size_type v28;
  int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  int is_ane_model_compiled;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  NSObject *v47;
  const char *v48;
  std::string *v49;
  std::string *v50;
  char v51;
  std::string::size_type v52;
  NSObject *v53;
  const char *v54;
  std::string::size_type v55;
  std::string *v56;
  int64_t v57;
  std::string *p_p;
  char *v59;
  std::string *v60;
  char *v61;
  std::string *v63;
  std::string *v64;
  void *v65;
  int v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  void *v70;
  _QWORD *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  NSObject *v74;
  const char *v75;
  std::string::size_type v76;
  std::string *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::string::size_type *v83;
  NSObject *v84;
  uint64_t v85;
  int v86;
  std::string::size_type v87;
  std::chrono::steady_clock::time_point v88;
  std::chrono::steady_clock::time_point v89;
  const char *v90;
  unint64_t *v91;
  unint64_t v92;
  __n128 result;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  NSObject *v105;
  const char *v106;
  std::string *v107;
  std::string *v108;
  int64_t v109;
  std::string *v110;
  char *v111;
  std::string *v112;
  char *v113;
  NSObject *v115;
  const char *v116;
  std::string *v117;
  std::string *v118;
  NSObject *v119;
  const char *v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  NSObject *v128;
  const char *v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  void *exception;
  int v138;
  std::string::size_type v139;
  const char *status_string;
  std::string *v141;
  uint64_t v142;
  uint64_t v143;
  std::string *v144;
  std::chrono::steady_clock::time_point v145;
  std::mutex *v146;
  unint64_t v147;
  __int128 **v148;
  __int128 v149;
  char v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  std::string v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  size_t v158;
  unsigned __int8 v159;
  std::string __p;
  std::string buf;
  uint64_t v162;
  unint64_t v163;
  __int128 v164;
  char v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v149 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v145.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x168uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA935260;
  v9 = v7 + 3;
  if (*((_QWORD *)&v149 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  v148 = (__int128 **)v149;
  PersistentModule::PersistentModule(v7 + 3, (char *)a2, v149, *((std::__shared_weak_count **)&v149 + 1));
  if (*((_QWORD *)&v149 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    }
  }
  v147 = (unint64_t)v9;
  *(_QWORD *)(v8 + 24) = off_1EA921D18;
  v15 = (std::string *)(v8 + 336);
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_QWORD *)(v8 + 352) = 0;
  if ((v16 & 1) == 0
  {
    v136 = operator new();
    *(_QWORD *)v136 = 850045863;
    *(_OWORD *)(v136 + 8) = 0u;
    *(_OWORD *)(v136 + 24) = 0u;
    *(_OWORD *)(v136 + 40) = 0u;
    *(_QWORD *)(v136 + 56) = 0;
    EspressoWaveRNNPersistentModule::thread_mutex(void)::mutex = v136;
    v15 = (std::string *)(v8 + 336);
  }
  v146 = (std::mutex *)EspressoWaveRNNPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)EspressoWaveRNNPersistentModule::thread_mutex(void)::mutex);
  kdebug_trace();
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&buf, "neuralModelType");
  InternalSettings::get_string_for_key(&v157, (uint64_t *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v18 = v159;
  if ((v159 & 0x80u) != 0)
    v18 = v158;
  v19 = &unk_1F044B000;
  if (v18)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v22 = &v157;
      if ((v159 & 0x80u) != 0)
        v22 = v157;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_INFO, "Internal setting enforced wavernn to be '%s'", (uint8_t *)&buf, 0xCu);
    }
    v23 = &v157;
    if ((v159 & 0x80u) != 0)
      v23 = v157;
    Diagnostics::log(6, "Internal setting enforced wavernn to be '%s'", v21, v23);
    if ((v159 & 0x80u) == 0)
      v24 = v159;
    else
      v24 = v158;
    p_buf = &buf;
    std::string::basic_string[abi:ne180100]((uint64_t)&buf, v24 + 11);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (v24)
    {
      if ((v159 & 0x80u) == 0)
        v26 = &v157;
      else
        v26 = v157;
      memmove(p_buf, v26, v24);
    }
    strcpy((char *)p_buf + v24, "_model_path");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, &v154);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v154;
    size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v154.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_39;
    if ((char)v159 < 0)
    {
      if (v158 == 3)
      {
        v31 = (unsigned __int16 *)v157;
LABEL_53:
        v32 = *v31;
        v33 = *((unsigned __int8 *)v31 + 2);
        if (v32 == 28257 && v33 == 101)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v154.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1DE3F6000, v35, OS_LOG_TYPE_INFO, "ane_model_path is not found. Fallback to preinstalled_model_path", (uint8_t *)&v154, 2u);
          }
          Diagnostics::log(6, "ane_model_path is not found. Fallback to preinstalled_model_path", v36);
          std::string::basic_string[abi:ne180100]<0>(&v164, "preinstalled_model_path");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v164, &v154);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v154;
          *((_BYTE *)&v154.__r_.__value_.__s + 23) = 0;
          v154.__r_.__value_.__s.__data_[0] = 0;
          if (v165 < 0)
            operator delete((void *)v164);
        }
      }
    }
    else if (v159 == 3)
    {
      v31 = (unsigned __int16 *)&v157;
      goto LABEL_53;
    }
LABEL_39:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = __p.__r_.__value_.__l.__size_;
  if (!v28)
  {
    is_amx_available = NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_amx_available);
    if (is_amx_available)
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a2;
      buf.__r_.__value_.__r.__words[2] = 0;
      v162 = 0;
      v163 = 0x8000000000000000;
      v29 = *a2;
      if (v29 == 1)
      {
        v37 = *((_QWORD *)a2 + 1);
        buf.__r_.__value_.__l.__size_ = v37 + 8;
        buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v37, "amx_model_path");
        v29 = *a2;
      }
      else
      {
        if (v29 == 2)
        {
          v30 = *((_QWORD *)a2 + 1);
          buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 8);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = (unint64_t)a2;
          v154.__r_.__value_.__r.__words[2] = 0;
          v155 = 0;
          v156 = 0x8000000000000000;
LABEL_71:
          v154.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 8);
          goto LABEL_74;
        }
        v163 = 1;
      }
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = (unint64_t)a2;
      v154.__r_.__value_.__r.__words[2] = 0;
      v155 = 0;
      v156 = 0x8000000000000000;
      if (v29 == 1)
      {
        v154.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
      }
      else
      {
        if (v29 == 2)
        {
          v30 = *((_QWORD *)a2 + 1);
          goto LABEL_71;
        }
        v156 = 1;
      }
LABEL_74:
      is_amx_available = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v154);
      if (!is_amx_available)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_DEFAULT, "Prefer AMX model since AMX is available.", (uint8_t *)&buf, 2u);
        }
        Diagnostics::log(5, "Prefer AMX model since AMX is available.", v39);
        std::string::basic_string[abi:ne180100]<0>(&v154, "amx_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, &buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = buf;
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
        buf.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
      }
    }
  }
  v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = __p.__r_.__value_.__l.__size_;
  if (v40 || !NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)is_amx_available))
  {
    v51 = 0;
    v150 = 0;
    goto LABEL_109;
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "ane_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, &buf);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v164, "preinstalled_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v164, &v154);
  if (v165 < 0)
    operator delete((void *)v164);
  v153 = v149;
  if (*((_QWORD *)&v149 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  is_ane_model_compiled = EspressoWaveRNNModule::is_ane_model_compiled((uint64_t *)a2, (__int128 ***)&v153);
  v44 = is_ane_model_compiled;
  if (*((_QWORD *)&v149 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
      if (v44)
        goto LABEL_99;
LABEL_208:
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v154.__r_.__value_.__l.__size_)
          goto LABEL_210;
      }
      else if (*((_BYTE *)&v154.__r_.__value_.__s + 23))
      {
LABEL_210:
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v105 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v107 = &v154;
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v107 = (std::string *)v154.__r_.__value_.__r.__words[0];
          LODWORD(v164) = 136315138;
          *(_QWORD *)((char *)&v164 + 4) = v107;
          _os_log_impl(&dword_1DE3F6000, v105, OS_LOG_TYPE_DEFAULT, "OTA ANE model is not compiled. Fallback to preinstalled model. model_path=%s", (uint8_t *)&v164, 0xCu);
        }
        v108 = &v154;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v108 = (std::string *)v154.__r_.__value_.__r.__words[0];
        Diagnostics::log(5, "OTA ANE model is not compiled. Fallback to preinstalled model. model_path=%s", v106, v108);
        std::string::operator=(&__p, &v154);
        v150 = 0;
        v51 = 1;
        goto LABEL_242;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v115 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v117 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v117 = (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v164) = 136315138;
        *(_QWORD *)((char *)&v164 + 4) = v117;
        _os_log_impl(&dword_1DE3F6000, v115, OS_LOG_TYPE_DEFAULT, "Ignore uncompiled OTA ane model. Fallback will always be used until it's compiled. model_path=%s", (uint8_t *)&v164, 0xCu);
      }
      v118 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v118 = (std::string *)buf.__r_.__value_.__r.__words[0];
      Diagnostics::log(5, "Ignore uncompiled OTA ane model. Fallback will always be used until it's compiled. model_path=%s", v116, v118);
      std::string::operator=(&__p, &buf);
      v51 = 0;
      v150 = 1;
      goto LABEL_242;
    }
  }
  if (!is_ane_model_compiled)
    goto LABEL_208;
LABEL_99:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v49 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v164) = 136315138;
    *(_QWORD *)((char *)&v164 + 4) = v49;
    _os_log_impl(&dword_1DE3F6000, v47, OS_LOG_TYPE_DEFAULT, "Use compiled OTA ane model. model_path=%s", (uint8_t *)&v164, 0xCu);
  }
  v50 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = (std::string *)buf.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Use compiled OTA ane model. model_path=%s", v48, v50);
  std::string::operator=(&__p, &buf);
  v51 = 0;
  v150 = 0;
LABEL_242:
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_109:
  v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = __p.__r_.__value_.__l.__size_;
  if (!v52)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v53, OS_LOG_TYPE_DEFAULT, "Cannot find preferable model. Fallback to AMX model.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Cannot find preferable model. Fallback to AMX model.", v54);
    std::string::basic_string[abi:ne180100]<0>(&v154, "amx_model_path");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, &buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = buf;
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
  }
  SharedObjectPool::get<VoiceConfig>(&v164, v148);
  LOBYTE(v55) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_141;
    v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
LABEL_130:
      v57 = v55;
      p_p = &__p;
      goto LABEL_132;
    }
    v56 = &__p;
  }
  if (v56->__r_.__value_.__s.__data_[0] != 47)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, std::string *, _QWORD))(*(_QWORD *)v164 + 40))(&buf, v164, 2003988078, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = buf;
    v55 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  if ((v55 & 0x80) == 0)
    goto LABEL_130;
  v57 = __p.__r_.__value_.__l.__size_;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_132:
  if (v57 < 6)
    goto LABEL_141;
  v143 = a1;
  v144 = v15;
  v59 = (char *)p_p + v57;
  v60 = p_p;
  while (1)
  {
    v61 = (char *)memchr(v60, 117, v57 - 5);
    if (!v61)
    {
LABEL_140:
      v15 = v144;
      v19 = &unk_1F044B000;
      goto LABEL_141;
    }
    if (*(_DWORD *)v61 == 1869770357 && *((_WORD *)v61 + 2) == 27756)
      break;
    v60 = (std::string *)(v61 + 1);
    v57 = v59 - (char *)v60;
    if (v59 - (char *)v60 < 6)
      goto LABEL_140;
  }
  v19 = &unk_1F044B000;
  if (v61 == v59)
  {
    v15 = v144;
LABEL_141:
    v63 = (std::string *)operator new(0x48uLL);
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA934498;
    v63[1].__r_.__value_.__r.__words[0] = 0;
    v64 = v63 + 2;
    if ((v55 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v64, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v64->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v63[2].__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    }
    v65 = v19;
    v63[1].__r_.__value_.__r.__words[0] = espresso_create_context();
    espresso_create_plan();
    v66 = espresso_plan_add_network();
    std::string::basic_string[abi:ne180100]<0>(&v154, "Unable to load CPU network.");
    if (v66)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v138 = SHIBYTE(v154.__r_.__value_.__r.__words[2]);
      v139 = v154.__r_.__value_.__r.__words[0];
      status_string = (const char *)espresso_get_status_string();
      v141 = &v154;
      if (v138 < 0)
        v141 = (std::string *)v139;
      StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v141, v66, status_string);
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    *(_QWORD *)&v67 = v63 + 1;
    *((_QWORD *)&v67 + 1) = v63;
    v68 = *(std::__shared_weak_count **)(v8 + 328);
    *(_OWORD *)(v8 + 320) = v67;
    rep = v145.__d_.__rep_;
    v70 = v65;
    v71 = &unk_1F044B000;
    if (v68)
    {
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
        goto LABEL_151;
    }
    goto LABEL_152;
  }
  v15 = v144;
  if (v61 - (char *)p_p == -1)
    goto LABEL_141;
  v68 = (std::__shared_weak_count *)operator new(0x20uLL);
  v68->__shared_owners_ = 0;
  v94 = (unint64_t *)&v68->__shared_owners_;
  v68->__shared_weak_owners_ = 0;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934620;
  LOBYTE(v68[1].__vftable) = v51;
  v142 = (uint64_t)&v68[1];
  *(_QWORD *)&v151 = v68 + 1;
  *((_QWORD *)&v151 + 1) = v68;
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
  SharedObjectPool::inject<EspressoWaveRNNANEStatus>(&v152, (uint64_t)v148, &v151);
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if ((v150 & 1) != 0)
  {
    v102 = *(std::__shared_weak_count **)(v8 + 328);
    *(_QWORD *)(v8 + 320) = 0;
    *(_QWORD *)(v8 + 328) = 0;
    v70 = &unk_1F044B000;
    if (!v102)
      goto LABEL_282;
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    goto LABEL_280;
  }
  v109 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v110 = &__p;
  }
  else
  {
    v109 = __p.__r_.__value_.__l.__size_;
    v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v109 >= 5)
  {
    v111 = (char *)v110 + v109;
    v112 = v110;
    do
    {
      v113 = (char *)memchr(v112, 102, v109 - 4);
      if (!v113)
        break;
      if (*(_DWORD *)v113 == 1702065510 && v113[4] == 100)
      {
        if (v113 == v111 || v113 - (char *)v110 == -1)
          break;
        std::string::basic_string[abi:ne180100]<0>(&v154, "gumbel_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("load_random_cpu.espresso.net", (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, &buf);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        v15 = v144;
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, std::string *, _QWORD))(*(_QWORD *)v164
                                                                                                  + 40))(&v154, v164, 2003988078, &buf, 0);
        a1 = v143;
        v70 = &unk_1F044B000;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        buf = v154;
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v119 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v154.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v119, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", (uint8_t *)&v154, 2u);
        }
        Diagnostics::log(6, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", v120);
        std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEModel,std::allocator<EspressoWaveRNNFusedSubscalingANEModel>,std::string &,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&v154, (uint64_t)&__p, (uint64_t)&buf, v142, v68);
        v121 = *(_OWORD *)&v154.__r_.__value_.__l.__data_;
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = 0uLL;
        v122 = *(std::__shared_weak_count **)(v8 + 328);
        *(_OWORD *)(v8 + 320) = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
        if (v154.__r_.__value_.__l.__size_)
        {
          v126 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        goto LABEL_282;
      }
      v112 = (std::string *)(v113 + 1);
      v109 = v111 - (char *)v112;
    }
    while (v111 - (char *)v112 >= 5);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v70 = &unk_1F044B000;
  v128 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v128, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE wavernn model", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "EspressoWaveRNNModule init with ANE wavernn model", v129);
  v15 = v144;
  std::allocate_shared[abi:ne180100]<EspressoWaveRNNANEModel,std::allocator<EspressoWaveRNNANEModel>,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&buf, (uint64_t)&__p, v142, v68);
  a1 = v143;
  v130 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  v131 = *(std::__shared_weak_count **)(v8 + 328);
  *(_OWORD *)(v8 + 320) = v130;
  if (v131)
  {
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v102 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v134 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v104 = __ldaxr(v134);
    while (__stlxr(v104 - 1, v134));
LABEL_280:
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
    goto LABEL_282;
  }
  do
LABEL_282:
    v135 = __ldaxr(v94);
  while (__stlxr(v135 - 1, v94));
  rep = v145.__d_.__rep_;
  v71 = (_QWORD *)&unk_1F044B000;
  if (!v135)
  {
LABEL_151:
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_152:
  std::string::operator=(v15, &__p);
  if (v71[443] != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v74 = *((_QWORD *)v70 + 442);
  if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
  {
    v76 = (std::string::size_type)v15;
    if (*(char *)(v8 + 359) < 0)
      v76 = v15->__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v76;
    _os_log_impl(&dword_1DE3F6000, v74, OS_LOG_TYPE_INFO, "Successfully initialized WaveRNN persistent module from: %s", (uint8_t *)&buf, 0xCu);
  }
  v77 = v15;
  if (*(char *)(v8 + 359) < 0)
    v77 = (std::string *)v15->__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Successfully initialized WaveRNN persistent module from: %s", v75, v77);
  kdebug_trace();
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if ((char)v159 < 0)
    operator delete(v157);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(v146);
  if (*((_QWORD *)&v149 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    }
  }
  if (v71[443] != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v83 = (std::string::size_type *)(a1 + 8);
  v84 = *((_QWORD *)v70 + 442);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
  {
    v85 = a1;
    v86 = *(char *)(a1 + 31);
    v87 = a1 + 8;
    if (v86 < 0)
      v87 = *v83;
    v88.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v88.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v84, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a1 = v85;
  }
  if (*(char *)(a1 + 31) < 0)
    v83 = (std::string::size_type *)*v83;
  v89.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v90, v83, (double)((v89.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v149 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    }
  }
  result.n128_u64[0] = v147;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DE9277A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, std::mutex *a16, void **a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;

  if (*(char *)(v46 + 359) < 0)
    operator delete(*a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v46 + 320);
  PersistentModule::~PersistentModule(a17);
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v46);
  operator delete(v50);
  if (v45)
  {
    v51 = (unint64_t *)&v45->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<EspressoWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931770;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931770;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931770;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE927CE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931770;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void **v17;
  unsigned __int8 v18;
  std::mutex *v19;
  NeuralTTSUtils *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  _BYTE *v24;
  NSObject *v25;
  const char *v26;
  void *v27;
  void *v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::string::size_type *v36;
  NSObject *v37;
  std::string::size_type v38;
  std::chrono::steady_clock::time_point v39;
  std::chrono::steady_clock::time_point v40;
  const char *v41;
  unint64_t *v42;
  unint64_t v43;
  __n128 result;
  uint64_t v45;
  void *exception;
  int v47;
  void **v48;
  const char *status_string;
  void **v50;
  void *v51;
  int v52;
  void **v53;
  const char *v54;
  void **v55;
  __n128 *v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *v61[2];
  char v62;
  void *__p[2];
  char v64;
  std::string buf;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v57 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x170uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9353E8;
  v10 = v8 + 3;
  v11 = v57;
  if (*((_QWORD *)&v57 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v57, *((std::__shared_weak_count **)&v57 + 1));
  if (*((_QWORD *)&v57 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  v56 = a4;
  v58 = (unint64_t)v10;
  *(_QWORD *)(v9 + 24) = &off_1EA921F50;
  v17 = (void **)(v9 + 344);
  *(_QWORD *)(v9 + 352) = 0;
  *(_QWORD *)(v9 + 360) = 0;
  *(_QWORD *)(v9 + 344) = 0;
  if ((v18 & 1) == 0
  {
    v45 = operator new();
    *(_QWORD *)v45 = 850045863;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + 24) = 0u;
    *(_OWORD *)(v45 + 40) = 0u;
    *(_QWORD *)(v45 + 56) = 0;
    EspressoTacotronPersistentModule::thread_mutex(void)::mutex = v45;
  }
  v19 = (std::mutex *)EspressoTacotronPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)EspressoTacotronPersistentModule::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v59, (__int128 **)v11);
  v20 = (NeuralTTSUtils *)kdebug_trace();
  if (NeuralTTSUtils::is_amx_available(v20))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "AMX is available, use fp16 model.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(6, "AMX is available, use fp16 model.", v22);
    std::string::basic_string[abi:ne180100]<0>(__p, "fp16_model_path");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &buf);
    if (*(char *)(v9 + 367) < 0)
      operator delete(*v17);
    *(_OWORD *)v17 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v64 < 0)
      operator delete(__p[0]);
  }
  v23 = *(unsigned __int8 *)(v9 + 367);
  if (*(char *)(v9 + 367) < 0)
  {
    if (*(_QWORD *)(v9 + 352))
    {
LABEL_22:
      if ((v23 & 0x80) == 0)
        goto LABEL_23;
      goto LABEL_31;
    }
  }
  else if (*(_BYTE *)(v9 + 367))
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)__p, &buf);
  if (*(char *)(v9 + 367) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v64 < 0)
    operator delete(__p[0]);
  v23 = *(unsigned __int8 *)(v9 + 367);
  if ((v23 & 0x80) == 0)
  {
LABEL_23:
    v24 = (_BYTE *)(v9 + 344);
    if (!v23)
      goto LABEL_37;
    goto LABEL_33;
  }
LABEL_31:
  if (!*(_QWORD *)(v9 + 352))
    goto LABEL_37;
  v24 = *v17;
LABEL_33:
  if (*v24 != 47)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v59 + 40))(&buf, v59, 1952539503, v9 + 344, 0);
    if (*(char *)(v9 + 367) < 0)
      operator delete(*v17);
    *(_OWORD *)v17 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  }
LABEL_37:
  *(_QWORD *)(v9 + 320) = espresso_create_context();
  *(_QWORD *)(v9 + 328) = 0;
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v27 = (void *)(v9 + 344);
    if (*(char *)(v9 + 367) < 0)
      v27 = *v17;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_INFO, "Load tacotron model: %s", (uint8_t *)&buf, 0xCu);
  }
  v28 = (void *)(v9 + 344);
  if (*(char *)(v9 + 367) < 0)
    v28 = *v17;
  Diagnostics::log(6, "Load tacotron model: %s", v26, v28);
  espresso_create_plan();
  v29 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to load network.");
  if (v29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v47 = v64;
    v48 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v50 = __p;
    if (v47 < 0)
      v50 = v48;
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v50, v29, status_string);
    MEMORY[0x1DF0EC99C](exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v64 < 0)
    operator delete(__p[0]);
  v30 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v61, "Unable to build plan.");
  if (v30)
  {
    v51 = __cxa_allocate_exception(0x10uLL);
    v52 = v62;
    v53 = (void **)v61[0];
    v54 = (const char *)espresso_get_status_string();
    v55 = v61;
    if (v52 < 0)
      v55 = v53;
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v55, v30, v54);
    MEMORY[0x1DF0EC99C](v51, &buf);
    __cxa_throw(v51, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v62 < 0)
    operator delete(v61[0]);
  kdebug_trace();
  kdebug_trace();
  v31 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::mutex::unlock(v19);
  if (*((_QWORD *)&v11 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v36 = (std::string::size_type *)(a1 + 8);
  v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v38 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v38 = *v36;
    v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v39.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v37, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v36 = (std::string::size_type *)*v36;
  v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v41, v36, (double)((v40.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v11 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  result.n128_u64[0] = v58;
  result.n128_u64[1] = v9;
  *v56 = result;
  return result;
}

void sub_1DE928540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__shared_weak_count *v34;
  uint64_t v35;
  void **v36;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;

  if (*(char *)(v35 + 367) < 0)
    operator delete(*v36);
  PersistentModule::~PersistentModule(a13);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v35);
  operator delete(v40);
  if (v34)
  {
    v41 = (unint64_t *)&v34->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<EspressoTacotronPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9353E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoTacotronPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9353E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoTacotronPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931560;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931560;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931560;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE9288B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931560;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, unint64_t a4@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void **v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int data;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  unsigned __int8 **v31;
  unsigned __int8 *i;
  unint64_t v33;
  char *v34;
  std::string *v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::string *v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  const char *v53;
  void **v54;
  void **v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::string::size_type *v71;
  NSObject *v72;
  std::string::size_type v73;
  std::chrono::steady_clock::time_point v74;
  std::chrono::steady_clock::time_point v75;
  const char *v76;
  unint64_t *v77;
  unint64_t v78;
  __n128 result;
  nlohmann::detail::exception *exception;
  char *v81;
  std::string *v82;
  __int128 v83;
  BOOL v84;
  void *v85;
  int v86;
  std::string::size_type v87;
  const char *status_string;
  std::string *v89;
  NSObject *v91;
  const char *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __n128 *v97;
  unint64_t v98;
  _OWORD *v99;
  unint64_t v100;
  __int128 v102;
  void *v103[2];
  __int128 v104;
  int v105;
  char v106[8];
  uint64_t *v107;
  void *v108[2];
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::string v112;
  int v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  _BYTE v117[24];
  _BYTE *v118;
  std::string __p[17];
  uint64_t v120;
  uint8_t buf[16];
  __int128 v122;
  float v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v102 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x178uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA935148;
  v9 = v7 + 3;
  if (*((_QWORD *)&v102 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  PersistentModule::PersistentModule(v7 + 3, a2, v102, *((std::__shared_weak_count **)&v102 + 1));
  if (*((_QWORD *)&v102 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  v8[3] = &off_1EA921BF0;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_DWORD *)v8 + 88) = 1065353216;
  v8[45] = 0;
  v8[46] = 0;
  SharedObjectPool::get<VoiceConfig>(&v110, (__int128 **)v102);
  v15 = v110;
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "vocab_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, __p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v15 + 40))(v108, v15, 1853318509, __p, 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v19 = v108;
    if (v109 < 0)
      v19 = (void **)v108[0];
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_DEFAULT, "Reading vocab file from: %s", (uint8_t *)__p, 0xCu);
  }
  v20 = v108;
  if (v109 < 0)
    v20 = (void **)v108[0];
  Diagnostics::log(5, "Reading vocab file from: %s", v18, v20);
  std::ifstream::basic_ifstream(__p);
  v118 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v117, 1, (uint64_t)v106);
  v21 = v118;
  if (v118 == v117)
  {
    v22 = 4;
    v21 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_25;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
  *(_OWORD *)v103 = 0u;
  v104 = 0u;
  v105 = 1065353216;
  if (v106[0] != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    if (v106[0] > 9uLL)
      v81 = "number";
    else
      v81 = off_1EA94C758[v106[0]];
    std::string::basic_string[abi:ne180100]<0>(&v112, v81);
    v82 = std::string::insert(&v112, 0, "type must be object, but is ");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    *(_QWORD *)&v122 = *((_QWORD *)&v82->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)buf, exception);
  }
  v95 = a1;
  rep = v6.__d_.__rep_;
  v97 = (__n128 *)a4;
  v98 = (unint64_t)v9;
  v100 = (unint64_t)v8;
  v99 = v8 + 45;
  *(_OWORD *)buf = 0uLL;
  v122 = 0uLL;
  v123 = 1.0;
  v23 = v107 + 1;
  v24 = (uint64_t *)*v107;
  if ((uint64_t *)*v107 != v107 + 1)
  {
    do
    {
      LODWORD(v114.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>((_BYTE *)v24 + 56, (int *)&v114);
      data = (int)v114.__r_.__value_.__l.__data_;
      if (*((char *)v24 + 55) < 0)
        std::string::__init_copy_ctor_external(&v112, (const std::string::value_type *)v24[4], v24[5]);
      else
        v112 = *(std::string *)(v24 + 4);
      v113 = data;
      v26 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v122 + 8, (uint64_t)&v112);
      v27 = v26;
      v28 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
        v29.i16[0] = vaddlv_u8(v29);
        v30 = v29.u32[0];
        if (v29.u32[0] > 1uLL)
        {
          a4 = v26;
          if (v26 >= *(_QWORD *)&buf[8])
            a4 = v26 % *(_QWORD *)&buf[8];
        }
        else
        {
          a4 = (*(_QWORD *)&buf[8] - 1) & v26;
        }
        v31 = *(unsigned __int8 ***)(*(_QWORD *)buf + 8 * a4);
        if (v31)
        {
          for (i = *v31; i; i = *(unsigned __int8 **)i)
          {
            v33 = *((_QWORD *)i + 1);
            if (v33 == v27)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v123, i + 16, (unsigned __int8 *)&v112) & 1) != 0)goto LABEL_70;
            }
            else
            {
              if (v30 > 1)
              {
                if (v33 >= v28)
                  v33 %= v28;
              }
              else
              {
                v33 &= v28 - 1;
              }
              if (v33 != a4)
                break;
            }
          }
        }
      }
      v34 = (char *)operator new(0x30uLL);
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v114.__r_.__value_.__l.__size_ = (std::string::size_type)&v122;
      v114.__r_.__value_.__s.__data_[16] = 0;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = v27;
      v35 = (std::string *)(v34 + 16);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v35, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
        *((_QWORD *)v34 + 4) = *((_QWORD *)&v112.__r_.__value_.__l + 2);
      }
      *((_DWORD *)v34 + 10) = v113;
      v114.__r_.__value_.__s.__data_[16] = 1;
      v36 = (float)(unint64_t)(*((_QWORD *)&v122 + 1) + 1);
      if (!v28 || (float)(v123 * (float)v28) < v36)
      {
        v37 = (v28 & (v28 - 1)) != 0;
        if (v28 < 3)
          v37 = 1;
        v38 = v37 | (2 * v28);
        v39 = vcvtps_u32_f32(v36 / v123);
        if (v38 <= v39)
          v40 = v39;
        else
          v40 = v38;
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>((uint64_t)buf, v40);
        v28 = *(_QWORD *)&buf[8];
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v27 >= *(_QWORD *)&buf[8])
            a4 = v27 % *(_QWORD *)&buf[8];
          else
            a4 = v27;
        }
        else
        {
          a4 = (*(_QWORD *)&buf[8] - 1) & v27;
        }
      }
      v41 = *(_QWORD **)(*(_QWORD *)buf + 8 * a4);
      if (v41)
      {
        *(_QWORD *)v114.__r_.__value_.__l.__data_ = *v41;
        *v41 = v114.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_QWORD *)v114.__r_.__value_.__l.__data_ = v122;
        *(_QWORD *)&v122 = v114.__r_.__value_.__r.__words[0];
        *(_QWORD *)(*(_QWORD *)buf + 8 * a4) = &v122;
        if (*(_QWORD *)v114.__r_.__value_.__l.__data_)
        {
          v42 = *(_QWORD *)(*(_QWORD *)v114.__r_.__value_.__l.__data_ + 8);
          if ((v28 & (v28 - 1)) != 0)
          {
            if (v42 >= v28)
              v42 %= v28;
          }
          else
          {
            v42 &= v28 - 1;
          }
          *(_QWORD *)(*(_QWORD *)buf + 8 * v42) = v114.__r_.__value_.__r.__words[0];
        }
      }
      ++*((_QWORD *)&v122 + 1);
LABEL_70:
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      v43 = (uint64_t *)v24[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t *)v24[2];
          v84 = *v44 == (_QWORD)v24;
          v24 = v44;
        }
        while (!v84);
      }
      v24 = v44;
    }
    while (v44 != v23);
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__move_assign((uint64_t)v103, (uint64_t *)buf);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)buf);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__move_assign((uint64_t)(v8 + 40), (uint64_t *)v103);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)v103);
  v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v45, &v114);
  if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v114.__r_.__value_.__r.__words[2]) == 8)
    {
      v46 = &v114;
      goto LABEL_83;
    }
    if (HIBYTE(v114.__r_.__value_.__r.__words[2]) != 10
      || (v114.__r_.__value_.__r.__words[0] == 0x6C66726F736E6574
        ? (v84 = LOWORD(v114.__r_.__value_.__r.__words[1]) == 30575)
        : (v84 = 0),
          !v84))
    {
LABEL_169:
      v94 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)buf, "Only Tensorflow and Espresso framework are supported.");
      MEMORY[0x1DF0EC99C](v94, buf);
      __cxa_throw(v94, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
LABEL_164:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v91 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v91, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", buf, 2u);
    }
    Diagnostics::log(5, "Using Tensorflow inference.", v92);
    v93 = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)buf, "Tensorflow is not enabled.");
    MEMORY[0x1DF0EC99C](v93, buf);
    __cxa_throw(v93, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v114.__r_.__value_.__l.__size_ != 8)
  {
    if (v114.__r_.__value_.__l.__size_ != 10)
      goto LABEL_169;
    if (*(_QWORD *)v114.__r_.__value_.__l.__data_ != 0x6C66726F736E6574
      || *(_WORD *)(v114.__r_.__value_.__r.__words[0] + 8) != 30575)
    {
      goto LABEL_169;
    }
    goto LABEL_164;
  }
  v46 = (std::string *)v114.__r_.__value_.__r.__words[0];
LABEL_83:
  if (v46->__r_.__value_.__r.__words[0] != 0x6F73736572707365)
    goto LABEL_169;
  v47 = operator new(0x38uLL);
  v47[1] = 0;
  v47[2] = 0;
  *v47 = &off_1EA934AB8;
  if (*((_QWORD *)&v102 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  SharedObjectPool::get<VoiceConfig>(&v115, (__int128 **)v102);
  v50 = v115;
  v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v51, (std::string *)buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v50 + 40))(v103, v50, 1853318509, buf, 0);
  if (SBYTE7(v122) < 0)
    operator delete(*(void **)buf);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v54 = v103;
    if (SBYTE7(v104) < 0)
      v54 = (void **)v103[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v54;
    _os_log_impl(&dword_1DE3F6000, v52, OS_LOG_TYPE_DEFAULT, "Create Espresso WordEmbedding model. model_path = %s", buf, 0xCu);
  }
  v55 = v103;
  if (SBYTE7(v104) < 0)
    v55 = (void **)v103[0];
  Diagnostics::log(5, "Create Espresso WordEmbedding model. model_path = %s", v53, v55);
  v47[6] = espresso_create_context();
  v47[5] = espresso_create_plan();
  v56 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(&v112, "Unable to load network.");
  if (v56)
  {
    v85 = __cxa_allocate_exception(0x10uLL);
    v86 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
    v87 = v112.__r_.__value_.__r.__words[0];
    status_string = (const char *)espresso_get_status_string();
    v89 = &v112;
    if (v86 < 0)
      v89 = (std::string *)v87;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v89, v56, status_string);
    MEMORY[0x1DF0EC99C](v85, buf);
    __cxa_throw(v85, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SBYTE7(v104) < 0)
    operator delete(v103[0]);
  v57 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (*((_QWORD *)&v102 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  *(_QWORD *)&v62 = v47 + 3;
  *((_QWORD *)&v62 + 1) = v47;
  v63 = *(std::__shared_weak_count **)(v100 + 368);
  *v99 = v62;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v107, v106[0]);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                 + 24);
  MEMORY[0x1DF0ECB94](&__p[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&v120);
  if (v109 < 0)
    operator delete(v108[0]);
  v66 = v111;
  if (v111)
  {
    v67 = (unint64_t *)&v111->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (*((_QWORD *)&v102 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v71 = (std::string::size_type *)(v95 + 8);
  v72 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v73 = v95 + 8;
    if (*(char *)(v95 + 31) < 0)
      v73 = *v71;
    v74.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v73;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = (double)((v74.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v72, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)__p, 0x16u);
  }
  if (*(char *)(v95 + 31) < 0)
    v71 = (std::string::size_type *)*v71;
  v75.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v76, v71, (double)((v75.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v102 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  result.n128_u64[0] = v98;
  result.n128_u64[1] = v100;
  *v97 = result;
  return result;
}

void sub_1DE9296A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int v65;
  void *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;

  if (*(char *)(v68 - 121) < 0)
  {
    operator delete(*(void **)(v68 - 144));
    if ((v65 & 1) == 0)
    {
LABEL_6:
      if (a48 < 0)
        operator delete(__p);
      if (a30 < 0)
        operator delete(a25);
      v70 = (std::__shared_weak_count *)a58;
      if (a58)
      {
        v71 = (unint64_t *)(a58 + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (a20)
      {
        p_shared_owners = (unint64_t *)&a20->__shared_owners_;
        do
          v74 = __ldaxr(p_shared_owners);
        while (__stlxr(v74 - 1, p_shared_owners));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
          std::__shared_weak_count::__release_weak(a20);
        }
      }
      std::__shared_weak_count::~__shared_weak_count(v67);
      operator delete(v75);
      if (a56 < 0)
        operator delete(a51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a34, a33);
      a63 = *MEMORY[0x1E0DE4F40];
      *(uint64_t *)((char *)&a63 + *(_QWORD *)(a63 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1DF0ECB94](&a65);
      std::istream::~istream();
      MEMORY[0x1DF0ECF6C](&STACK[0x2F8]);
      if (a40 < 0)
        operator delete(a35);
      v76 = (std::__shared_weak_count *)a42;
      if (a42)
      {
        v77 = (unint64_t *)(a42 + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a19);
      PersistentModule::~PersistentModule(a16);
      if (a20)
      {
        v79 = (unint64_t *)&a20->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
          std::__shared_weak_count::__release_weak(a20);
        }
      }
      std::__shared_weak_count::~__shared_weak_count(a18);
      operator delete(v81);
      if (a20)
      {
        v82 = (unint64_t *)&a20->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
          std::__shared_weak_count::__release_weak(a20);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v65)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<WordEmbeddingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WordEmbeddingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WordEmbeddingPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9316C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9316C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9316C0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE929C44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9316C0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  unint64_t v26;
  __n128 *v27;
  _QWORD *v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  __int128 v35;
  _BYTE buf[22];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x158uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA935378;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v35 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v35, *((std::__shared_weak_count **)&v35 + 1));
  if (*((_QWORD *)&v35 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA921E70;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 328) = 0;
  *(_DWORD *)(v9 + 336) = 0;
  SharedObjectPool::get<Database>(buf, v35);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)buf);
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  SharedObjectPool::get<FeatureBook>(buf, v35);
  v19 = *(std::__shared_weak_count **)&buf[8];
  *(_DWORD *)(v9 + 336) = *(_DWORD *)(*(_QWORD *)buf + 48);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (*((_QWORD *)&v35 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v24 = (_QWORD *)(a1 + 8);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v26 = v10;
    v27 = a4;
    v28 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v28 = (_QWORD *)*v24;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v27;
    v10 = v26;
  }
  if (*(char *)(a1 + 31) < 0)
    v24 = (_QWORD *)*v24;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v31, v24, (double)((v30.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v35 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DE92A040(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v4);
  PersistentModule::~PersistentModule(v3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v8);
  if (v1)
  {
    v9 = (unint64_t *)&v1->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PreselectStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PreselectStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PreselectStreamPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9319D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9319D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9319D8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE92A2A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9319D8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_count *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  std::__shared_count v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::string::size_type *v97;
  NSObject *v98;
  std::string::size_type v99;
  std::chrono::steady_clock::time_point v100;
  std::chrono::steady_clock::time_point v101;
  const char *v102;
  unint64_t *v103;
  unint64_t v104;
  __n128 result;
  std::__shared_count *v106;
  std::__shared_weak_count *v107;
  std::string::size_type v108;
  std::__shared_count v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __n128 *v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  void *v131;
  std::string buf;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v129 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x1A8uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA935A08;
  v10 = v8 + 3;
  if (*((_QWORD *)&v129 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v129, *((std::__shared_weak_count **)&v129 + 1));
  if (*((_QWORD *)&v129 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  rep = v7.__d_.__rep_;
  v127 = a4;
  v128 = (unint64_t)v10;
  *(_QWORD *)(v9 + 24) = off_1EA922518;
  v16 = v9 + 352;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  v17 = (void **)(v9 + 400);
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(_QWORD *)(v9 + 416) = 0;
  std::recursive_mutex::lock((std::recursive_mutex *)(v129 + 56));
  v18 = v129 + 32;
  {
    SharedObjectPool::get<FeatureBook>(&buf, v129);
    v19 = (char *)operator new(0x40uLL);
    v20 = (std::__shared_weak_count *)v19;
    *((_QWORD *)v19 + 1) = 0;
    v21 = (unint64_t *)(v19 + 8);
    *((_QWORD *)v19 + 2) = 0;
    *(_QWORD *)v19 = &off_1EA932A58;
    v22 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      *(_OWORD *)(v19 + 24) = v22;
      do
        v25 = __ldxr(v23);
      while (__stxr(v25 + 1, v23));
      *((_QWORD *)v19 + 5) = 0;
      *((_QWORD *)v19 + 6) = 0;
      *((_QWORD *)v19 + 7) = 0;
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    else
    {
      *((_QWORD *)v19 + 3) = buf.__r_.__value_.__r.__words[0];
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
    }
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v28 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    v31 = v30[5];
    if (v31)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923228;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v20[1];
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v20;
      do
        v32 = __ldxr(v21);
      while (__stxr(v32 + 1, v21));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v31 + 8, (__int128 *)&buf.__r_.__value_.__r.__words[1]);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923228;
      v33 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      if (buf.__r_.__value_.__r.__words[2])
      {
        v34 = (unint64_t *)(buf.__r_.__value_.__r.__words[2] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    else
    {
      v36 = (_QWORD *)operator new();
      *v36 = &off_1EA923228;
      v36[1] = v20 + 1;
      v36[2] = v20;
      do
        v37 = __ldxr(v21);
      while (__stxr(v37 + 1, v21));
      v38 = v30[5];
      v30[5] = (uint64_t)v36;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    do
      v39 = __ldaxr(v21);
    while (__stlxr(v39 - 1, v21));
    v17 = (void **)(v9 + 400);
    v16 = v9 + 352;
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v41 = *(_QWORD *)(*(_QWORD *)v40 + 16);
  *(_QWORD *)&v130 = *(_QWORD *)(*(_QWORD *)v40 + 8);
  *((_QWORD *)&v130 + 1) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v129 + 56));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v16, &v130);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  SharedObjectPool::get<VoiceConfig>(&v130, (__int128 **)v129);
  VoiceConfig::get_param<std::string>(&buf, v130, 1818324583, 0);
  if (*(char *)(v9 + 423) < 0)
    operator delete(*v17);
  *(std::string *)v17 = buf;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  SharedObjectPool::get<MDN>(&buf, v129);
  v50 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  v51 = *(std::__shared_weak_count **)(v9 + 328);
  *(_OWORD *)(v9 + 320) = v50;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v55 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  SharedObjectPool::get<RNN>(&buf, v129);
  v57 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  v58 = *(std::__shared_weak_count **)(v9 + 344);
  *(_OWORD *)(v9 + 336) = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v62 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(v129 + 56));
  {
    SharedObjectPool::get<MDN>(&buf, v129);
    v64 = *(std::__shared_count **)(buf.__r_.__value_.__r.__words[0] + 264);
    v65 = (std::__shared_weak_count *)operator new(0x38uLL);
    v65->__shared_owners_ = 0;
    v66 = (unint64_t *)&v65->__shared_owners_;
    v65->__shared_weak_owners_ = 0;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933318;
    v67 = *v64;
    *(std::__shared_count *)((char *)v65 + 40) = v64[1];
    v65[1].std::__shared_count = v67;
    v68 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v69 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    v72 = v71[5];
    if (v72)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9232E8;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v65[1];
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v65;
      do
        v73 = __ldxr(v66);
      while (__stxr(v73 + 1, v66));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v72 + 8, (__int128 *)&buf.__r_.__value_.__r.__words[1]);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9232E8;
      v74 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      if (buf.__r_.__value_.__r.__words[2])
      {
        v75 = (unint64_t *)(buf.__r_.__value_.__r.__words[2] + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
    else
    {
      v77 = (_QWORD *)operator new();
      *v77 = &off_1EA9232E8;
      v77[1] = v65 + 1;
      v77[2] = v65;
      do
        v78 = __ldxr(v66);
      while (__stxr(v78 + 1, v66));
      v79 = v71[5];
      v71[5] = (uint64_t)v77;
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
    do
      v80 = __ldaxr(v66);
    while (__stlxr(v80 - 1, v66));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v82 = *(_QWORD *)(*(_QWORD *)v81 + 16);
  *(_QWORD *)&v130 = *(_QWORD *)(*(_QWORD *)v81 + 8);
  *((_QWORD *)&v130 + 1) = v82;
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v129 + 56));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 368, &v130);
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(v129 + 56));
  {
    SharedObjectPool::get<RNN>(&buf, v129);
    if (buf.__r_.__value_.__r.__words[0])
    {
      v106 = *(std::__shared_count **)(buf.__r_.__value_.__r.__words[0] + 264);
      v107 = (std::__shared_weak_count *)operator new(0x38uLL);
      v107->__shared_owners_ = 0;
      v107->__shared_weak_owners_ = 0;
      v107->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933430;
      v108 = (std::string::size_type)&v107[1];
      v109 = *v106;
      *(std::__shared_count *)((char *)v107 + 40) = v106[1];
      v107[1].std::__shared_count = v109;
    }
    else
    {
      v107 = 0;
      v108 = 0;
    }
    v110 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    v114 = v113[5];
    if (v114)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923308;
      buf.__r_.__value_.__l.__size_ = v108;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v107;
      if (v107)
      {
        v115 = (unint64_t *)&v107->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v114 + 8, (__int128 *)&buf.__r_.__value_.__r.__words[1]);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923308;
      v117 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      if (buf.__r_.__value_.__r.__words[2])
      {
        v118 = (unint64_t *)(buf.__r_.__value_.__r.__words[2] + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
    }
    else
    {
      v120 = (_QWORD *)operator new();
      *v120 = &off_1EA923308;
      v120[1] = v108;
      v120[2] = v107;
      if (v107)
      {
        v121 = (unint64_t *)&v107->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = v113[5];
      v113[5] = (uint64_t)v120;
      if (v123)
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
    }
    if (v107)
    {
      v124 = (unint64_t *)&v107->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  v89 = *(_QWORD *)(*(_QWORD *)v88 + 16);
  *(_QWORD *)&v130 = *(_QWORD *)(*(_QWORD *)v88 + 8);
  *((_QWORD *)&v130 + 1) = v89;
  if (v89)
  {
    v90 = (unint64_t *)(v89 + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v129 + 56));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 384, &v130);
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (*((_QWORD *)&v129 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v97 = (std::string::size_type *)(a1 + 8);
  v98 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v99 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v99 = *v97;
    v100.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v99;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v100.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v98, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v97 = (std::string::size_type *)*v97;
  v101.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v102, v97, (double)((v101.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v129 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  result.n128_u64[0] = v128;
  result.n128_u64[1] = v9;
  *v127 = result;
  return result;
}

void sub_1DE92AED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::recursive_mutex *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  std::recursive_mutex::unlock(v26);
  if (*(char *)(v25 + 423) < 0)
    operator delete(*a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 + 336);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 + 320);
  PersistentModule::~PersistentModule(a16);
  if (v24)
  {
    v30 = (unint64_t *)&v24->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v25);
  operator delete(v32);
  if (v24)
  {
    v33 = (unint64_t *)&v24->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DE92B138()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  if (v0)
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
    JUMPOUT(0x1DE92B0C0);
  }
  JUMPOUT(0x1DE92B0F0);
}

void sub_1DE92B174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18)
    JUMPOUT(0x1DE92B130);
  JUMPOUT(0x1DE92B100);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<UnitSelectionFeatureStreamPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9312F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9312F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9312F8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE92B308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9312F8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  unint64_t v36;
  __n128 *v37;
  _QWORD *v38;
  std::chrono::steady_clock::time_point v39;
  std::chrono::steady_clock::time_point v40;
  const char *v41;
  unint64_t *v42;
  unint64_t v43;
  __n128 result;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint8_t buf[4];
  _BYTE v51[18];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v45 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x160uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934FC0;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v45 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v45, *((std::__shared_weak_count **)&v45 + 1));
  if (*((_QWORD *)&v45 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  v9[3] = &off_1EA9218C8;
  v9[40] = 0;
  v9[41] = 0;
  SharedObjectPool::get<GeneratedPromptDB>(v9 + 42, v45);
  SharedObjectPool::get<VoiceConfig>(&v48, (__int128 **)v45);
  SharedObjectPool::get<FeatureBook>(&v46, v45);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(buf, v48, 1952543344, 1);
  v16 = *(_DWORD *)(v46 + 48);
  v17 = operator new(0x268uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1EA932470;
  TAPExtractor::TAPExtractor((TAPExtractor *)(v17 + 3), (const MemoryMap *)buf, v16);
  *(_QWORD *)&v19 = v18;
  *((_QWORD *)&v19 + 1) = v17;
  v20 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = v19;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)&v51[4];
  if (*(_QWORD *)&v51[4])
  {
    v24 = (unint64_t *)(*(_QWORD *)&v51[4] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v47;
  if (v47)
  {
    v27 = (unint64_t *)&v47->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (*((_QWORD *)&v45 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v34 = (_QWORD *)(a1 + 8);
  v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v36 = v10;
    v37 = a4;
    v38 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v38 = (_QWORD *)*v34;
    v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v51 = v38;
    *(_WORD *)&v51[8] = 2048;
    *(double *)&v51[10] = (double)((v39.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v35, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v37;
    v10 = v36;
  }
  if (*(char *)(a1 + 31) < 0)
    v34 = (_QWORD *)*v34;
  v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v41, v34, (double)((v40.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v45 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE92B7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void **v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a13)
  {
    v26 = (unint64_t *)&a13->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a15)
  {
    v28 = (unint64_t *)&a15->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v18[13].__shared_owners_);
  PersistentModule::~PersistentModule(v19);
  if (v17)
  {
    v30 = (unint64_t *)&v17->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v32);
  if (v17)
  {
    v33 = (unint64_t *)&v17->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PromptStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PromptStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PromptStreamPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931038;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA931038;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA931038;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE92BB0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA931038;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  UTFRegex *v13;
  UTFRegex *v14;
  UTFRegex *v15;
  UTFRegex *v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  std::string *v24;
  int data;
  int v26;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  void **v42;
  void **v43;
  void **v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  char *v48;
  void (***v49)(std::__fs::filesystem::path *__return_ptr, _QWORD, std::string *, std::string *, std::__fs::filesystem::path *, _QWORD);
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _BOOL4 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  std::string::size_type v76;
  std::string::size_type v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  float v95;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  size_t v117;
  std::__fs::filesystem::path *v118;
  std::string *v119;
  size_t v120;
  std::__fs::filesystem::path *v121;
  std::string *p_str;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::string::size_type *v130;
  NSObject *v131;
  std::string::size_type v132;
  std::chrono::steady_clock::time_point v133;
  std::chrono::steady_clock::time_point v134;
  const char *v135;
  unint64_t *v136;
  unint64_t v137;
  __n128 result;
  std::__shared_weak_count *size;
  unint64_t *v140;
  unint64_t v141;
  void *exception;
  _QWORD **v143;
  uint64_t v144;
  uint64_t v145;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __n128 *v147;
  __int128 v149;
  int64x2_t *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  std::__fs::filesystem::path v153;
  std::__fs::filesystem::path v154;
  std::__fs::filesystem::path v155;
  std::__fs::filesystem::path v156;
  std::__fs::filesystem::path v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  std::__fs::filesystem::path v162;
  std::__fs::filesystem::path v163;
  std::__fs::filesystem::path __p;
  char v165;
  std::string *v166;
  std::string v167;
  char v168;
  uint64_t *v169;
  char v170;
  uint64_t *v171;
  char v172[8];
  uint64_t *v173;
  std::string pn;
  _QWORD v175[2];
  std::string __str;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v149 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1EA934D58;
  v150 = (int64x2_t *)(v7 + 24);
  if (*((_QWORD *)&v149 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
  }
  PersistentModule::PersistentModule(v150, a2, v149, *((std::__shared_weak_count **)&v149 + 1));
  if (*((_QWORD *)&v149 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    }
  }
  v145 = a1;
  rep = v6.__d_.__rep_;
  v147 = a4;
  *((_QWORD *)v7 + 3) = &off_1EA9214A8;
  *((_OWORD *)v7 + 20) = 0u;
  v144 = (uint64_t)(v7 + 336);
  *((_OWORD *)v7 + 21) = 0u;
  *((_OWORD *)v7 + 22) = 0u;
  *((_OWORD *)v7 + 23) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_OWORD *)(v7 + 424) = 0u;
  *(_OWORD *)(v7 + 440) = 0u;
  *((_QWORD *)v7 + 57) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "split_spell");
  pn.__r_.__value_.__s.__data_[0] = 1;
  v7[384] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&__str.__r_.__value_.__l.__data_, (unsigned __int8 *)&pn);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v13, "\\e\\\\(.*?)(?:=(.*?))?(?:\\\\|\\z)|(\\e\\/\\+)|\\[\\[(.*?)\\]\\]");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>((uint64_t)(v7 + 368), (uint64_t)v13);
  v14 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v14, "[:punct:]+");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>((uint64_t)(v7 + 392), (uint64_t)v14);
  v15 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v15, "\\e\\\\tn=spell\\\\");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>((uint64_t)(v7 + 408), (uint64_t)v15);
  v16 = (UTFRegex *)operator new();
  UTFRegex::UTFRegex(v16, "^\\s*[,]");
  std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>((uint64_t)(v7 + 424), (uint64_t)v16);
  if ((_QWORD)v149)
  {
    v172[0] = 0;
    v173 = 0;
    v170 = 3;
    v171 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("nashville");
    v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v172, "target_input_format");
    v18 = *(unsigned __int8 *)v17;
    *(_BYTE *)v17 = 3;
    v170 = v18;
    v19 = (uint64_t *)v17[1];
    v17[1] = (uint64_t)v171;
    v171 = v19;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v171, v18);
    v168 = 3;
    v20 = (uint64_t *)operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v20, "lhp");
    v169 = v20;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v172, "target_phone_set");
    v22 = *(unsigned __int8 *)v21;
    *(_BYTE *)v21 = 3;
    v168 = v22;
    v23 = (uint64_t *)v21[1];
    v21[1] = (uint64_t)v169;
    v169 = v23;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v169, v22);
    std::string::basic_string[abi:ne180100]<0>(&__str, "language");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("xx-XX", a2, (const void **)&__str.__r_.__value_.__l.__data_, &v167);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v167.__r_.__value_.__l.__size_ != 5)
        goto LABEL_24;
      v24 = (std::string *)v167.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_24;
      v24 = &v167;
    }
    data = (int)v24->__r_.__value_.__l.__data_;
    v26 = v24->__r_.__value_.__s.__data_[4];
    if (data == 1479374968 && v26 == 88)
    {
      SharedObjectPool::get<VoiceConfig>(&__p, (__int128 **)v149);
      VoiceConfig::get_param<std::string>(&pn, (uint64_t)__p.__pn_.__r_.__value_.__l.__data_, 1818324583, 0);
      std::string::basic_string(&__str, &pn, 0, 5uLL, (std::allocator<char> *)&v163);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      v167 = __str;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_;
      if (__p.__pn_.__r_.__value_.__l.__size_)
      {
        v140 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
LABEL_24:
    v166 = 0;
    v165 = 3;
    v166 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v167);
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v172, "language");
    v29 = *(unsigned __int8 *)v28;
    *(_BYTE *)v28 = v165;
    v165 = v29;
    v30 = (uint64_t *)v28[1];
    v28[1] = (uint64_t)v166;
    v166 = (std::string *)v30;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v166, v29);
    v31 = operator new(0x170uLL);
    v32 = v31;
    v31[1] = 0;
    v31[2] = 0;
    *v31 = &off_1EA934380;
    v33 = v31 + 3;
    if (*((_QWORD *)&v149 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v149;
      v36 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    else
    {
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = (unint64_t)v149;
    }
    v143 = (_QWORD **)(v7 + 320);
    Module::Module((uint64_t)(v31 + 3), v172, (uint64_t *)&__p);
    v38 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_;
    if (__p.__pn_.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v33;
    v32[3] = off_1EA9205D8;
    *(_OWORD *)(v32 + 37) = 0u;
    *(_OWORD *)(v32 + 39) = 0u;
    v42 = (void **)(v32 + 37);
    v43 = (void **)(v32 + 40);
    v44 = (void **)(v32 + 43);
    *(_OWORD *)(v32 + 41) = 0u;
    *(_OWORD *)(v32 + 43) = 0u;
    v32[45] = 0;
    std::string::basic_string[abi:ne180100]<0>(&pn, "language");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v172, (const void **)&pn.__r_.__value_.__l.__data_, &__str);
    if (*((char *)v32 + 319) < 0)
      operator delete(*v42);
    *(_OWORD *)v42 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v32[39] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&pn, "target_phone_set");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v172, (const void **)&pn.__r_.__value_.__l.__data_, &__str);
    if (*((char *)v32 + 343) < 0)
      operator delete(*v43);
    *(_OWORD *)v43 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v32[42] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&pn, "target_input_format");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("ssml", v172, (const void **)&pn.__r_.__value_.__l.__data_, &__str);
    if (*((char *)v32 + 367) < 0)
      operator delete(*v44);
    *(_OWORD *)v44 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v32[45] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    v45 = *(std::__shared_weak_count **)(v149 + 24);
    if (v45)
    {
      v46 = std::__shared_weak_count::lock(v45);
      if (v46)
      {
        v47 = v46;
        v48 = v7;
        v49 = *(void (****)(std::__fs::filesystem::path *__return_ptr, _QWORD, std::string *, std::string *, std::__fs::filesystem::path *, _QWORD))(v149 + 16);
        if (v49)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "parse");
          pn.__r_.__value_.__s.__data_[0] = 0;
          pn.__r_.__value_.__l.__size_ = 0;
          *(_OWORD *)&v162.__pn_.__r_.__value_.__l.__data_ = v149;
          if (*((_QWORD *)&v149 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          (**v49)(&v163, v49, &__str, &pn, &v162, 0);
          v52 = (std::__shared_weak_count *)v163.__pn_.__r_.__value_.__l.__size_;
          if (v163.__pn_.__r_.__value_.__l.__size_)
          {
            v53 = (unint64_t *)(v163.__pn_.__r_.__value_.__l.__size_ + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v55 = (std::__shared_weak_count *)v162.__pn_.__r_.__value_.__l.__size_;
          if (v162.__pn_.__r_.__value_.__l.__size_)
          {
            v56 = (unint64_t *)(v162.__pn_.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&pn.__r_.__value_.__l.__size_, pn.__r_.__value_.__s.__data_[0]);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        v7 = v48;
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    if (*((_QWORD *)&v149 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
      }
    }
    *(_QWORD *)&v62 = v41;
    *((_QWORD *)&v62 + 1) = v32;
    v63 = (std::__shared_weak_count *)*((_QWORD *)v7 + 45);
    *((_OWORD *)v7 + 22) = v62;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    std::recursive_mutex::lock((std::recursive_mutex *)(v149 + 56));
    {
      v67 = *(_QWORD *)(*(_QWORD *)v66 + 8);
      v68 = *(std::__shared_weak_count **)(*(_QWORD *)v66 + 16);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)(v149 + 56));
      v71 = v67 == 0;
      if (v67)
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v144, (__int128 *)&__str);
        v72 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_)
        {
LABEL_143:
          v103 = operator new(0x150uLL);
          v104 = v103;
          v103[1] = 0;
          v103[2] = 0;
          *v103 = &off_1EA932278;
          v105 = v103 + 3;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v149;
          if (*((_QWORD *)&v149 + 1))
          {
            v106 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
          }
          NashvilleFE::NashvilleFE(v103 + 3, (__int128 ***)&__str);
          if (*((_QWORD *)&v149 + 1))
          {
            v108 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
            }
          }
          *(_QWORD *)&v110 = v105;
          *((_QWORD *)&v110 + 1) = v104;
          v111 = (std::__shared_weak_count *)*((_QWORD *)v7 + 41);
          *((_OWORD *)v7 + 20) = v110;
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          if (v71 && **v143)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            StringFormatter::StringFormatter((StringFormatter *)&__str, "Unable to init LegacyFE");
            MEMORY[0x1DF0EC99C](exception, &__str);
            __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          v114 = 0;
          v115 = 0;
          v175[0] = "acronym";
          v175[1] = "initialism";
          do
          {
            v116 = v114;
            std::string::basic_string[abi:ne180100]<0>(&__str, (char *)v175[v115]);
            SiriTTS::package_path((SiriTTS *)&v158);
            v160 = v158;
            v161 = v159;
            v159 = 0;
            v158 = 0uLL;
            memset(&v157, 0, sizeof(v157));
            std::string::append[abi:ne180100]<char const*,0>(&v157.__pn_, "InterpretAs", "");
            std::__fs::filesystem::operator/[abi:ne180100](&v157, (uint64_t)&v160, &v162);
            if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v117 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
            else
              v117 = v167.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v155, v117 + 10);
            if ((v155.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v118 = &v155;
            else
              v118 = (std::__fs::filesystem::path *)v155.__pn_.__r_.__value_.__r.__words[0];
            if (v117)
            {
              if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v119 = &v167;
              else
                v119 = (std::string *)v167.__r_.__value_.__r.__words[0];
              memmove(v118, v119, v117);
            }
            strcpy((char *)v118 + v117, "_nashville");
            v156 = v155;
            memset(&v155, 0, sizeof(v155));
            std::__fs::filesystem::operator/[abi:ne180100](&v156, (uint64_t)&v162, &v163);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v120 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v120 = __str.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v153, v120 + 4);
            if ((v153.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v121 = &v153;
            else
              v121 = (std::__fs::filesystem::path *)v153.__pn_.__r_.__value_.__r.__words[0];
            if (v120)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              else
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              memmove(v121, p_str, v120);
            }
            strcpy((char *)v121 + v120, ".txt");
            v154 = v153;
            memset(&v153, 0, sizeof(v153));
            std::__fs::filesystem::operator/[abi:ne180100](&v154, (uint64_t)&v163, &__p);
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            }
            else
            {
              pn = __p.__pn_;
            }
            if (SHIBYTE(v154.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v154.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v153.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v163.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v156.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v156.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v155.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v155.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v162.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v157.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v157.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v161) < 0)
              operator delete((void *)v160);
            if (SHIBYTE(v159) < 0)
              operator delete((void *)v158);
            std::string::basic_string[abi:ne180100]<0>(&__p, "application/x-vocalizer-rettt+text");
            NashvilleFEPersistentModule::load_voice_resource(&v151, v150, (uint64_t)&pn, (uint64_t)&__p);
            v123 = v152;
            if (v152)
            {
              v124 = (unint64_t *)&v152->__shared_owners_;
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
              operator delete(pn.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v114 = 1;
            v115 = 1;
          }
          while ((v116 & 1) == 0);
          if (v68)
          {
            v126 = (unint64_t *)&v68->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v167.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v173, v172[0]);
          goto LABEL_223;
        }
        v73 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
LABEL_141:
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        goto LABEL_143;
      }
    }
    else
    {
      std::recursive_mutex::unlock((std::recursive_mutex *)(v149 + 56));
      v68 = 0;
      v71 = 1;
    }
    v75 = operator new(0x1D0uLL);
    v76 = (std::string::size_type)v75;
    v75[1] = 0;
    v75[2] = 0;
    *v75 = &off_1EA9342A0;
    v77 = (std::string::size_type)(v75 + 3);
    if (*((_QWORD *)&v149 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v149;
      v80 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    else
    {
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = (unint64_t)v149;
    }
    Module::Module((uint64_t)(v75 + 3), a2, (uint64_t *)&pn);
    v82 = (std::__shared_weak_count *)pn.__r_.__value_.__l.__size_;
    if (pn.__r_.__value_.__l.__size_)
    {
      v83 = (unint64_t *)(pn.__r_.__value_.__l.__size_ + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    *(_QWORD *)(v76 + 24) = off_1EA9203C0;
    *(_QWORD *)(v76 + 296) = v76 + 304;
    *(_QWORD *)(v76 + 304) = 0;
    *(_QWORD *)(v76 + 328) = 0;
    *(_QWORD *)(v76 + 336) = 0;
    *(_QWORD *)(v76 + 312) = 0;
    *(_QWORD *)(v76 + 320) = v76 + 328;
    *(_QWORD *)(v76 + 344) = v76 + 352;
    *(_QWORD *)(v76 + 352) = 0;
    *(_QWORD *)(v76 + 376) = 0;
    *(_QWORD *)(v76 + 384) = 0;
    *(_QWORD *)(v76 + 360) = 0;
    *(_QWORD *)(v76 + 368) = v76 + 376;
    *(_QWORD *)(v76 + 400) = 0;
    *(_QWORD *)(v76 + 408) = 0;
    *(_QWORD *)(v76 + 392) = v76 + 400;
    *(_QWORD *)(v76 + 448) = 0;
    *(_OWORD *)(v76 + 416) = 0u;
    *(_OWORD *)(v76 + 432) = 0u;
    *(_DWORD *)(v76 + 456) = 1065353216;
    *(_BYTE *)(v76 + 460) = 1;
    SharedObjectPool::get<VoiceConfig>(&__p, (__int128 **)v149);
    v85 = __p.__pn_.__r_.__value_.__r.__words[0];
    VoiceConfig::get_param<std::string>(&__str, (uint64_t)__p.__pn_.__r_.__value_.__l.__data_, 1818324583, 0);
    std::string::operator=((std::string *)(v76 + 416), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    VoiceConfig::get_param<std::set<std::string>>(&__str, v85, 1987538035, 0);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v76 + 296), __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
    VoiceConfig::get_param<std::set<std::string>>(&__str, v85, 1684629094, 2);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v76 + 320), __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
    VoiceConfig::get_param<std::set<std::string>>(&__str, v85, 1937011315, 2);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v76 + 344), __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
    VoiceConfig::get_param<std::set<std::string>>(&__str, v85, 1684368485, 2);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v76 + 368), __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
    VoiceConfig::get_param<std::set<std::string>>(&__str, v85, 1702389364, 2);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v76 + 392), __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
    SharedObjectPool::get<FeatureBook>(&v163, v149);
    v86 = *(_OWORD *)&v163.__pn_.__r_.__value_.__l.__data_;
    if (v163.__pn_.__r_.__value_.__l.__size_)
    {
      v87 = (unint64_t *)(v163.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v89 = *(std::__shared_weak_count **)(v76 + 448);
    *(_OWORD *)(v76 + 440) = v86;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = (std::__shared_weak_count *)v163.__pn_.__r_.__value_.__l.__size_;
    if (v163.__pn_.__r_.__value_.__l.__size_)
    {
      v93 = (unint64_t *)(v163.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    VoiceConfig::get_param<std::string>(&__str, (uint64_t)__p.__pn_.__r_.__value_.__l.__data_, 1936288870, 2);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_)
      {
LABEL_127:
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_128;
      }
    }
    else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
LABEL_128:
      v97 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_;
      if (__p.__pn_.__r_.__value_.__l.__size_)
      {
        v98 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      if (*((_QWORD *)&v149 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
        }
      }
      v162.__pn_.__r_.__value_.__r.__words[0] = v77;
      v162.__pn_.__r_.__value_.__l.__size_ = v76;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v144, (__int128 *)&v162);
      v72 = (std::__shared_weak_count *)v162.__pn_.__r_.__value_.__l.__size_;
      if (!v162.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_143;
      v102 = (unint64_t *)(v162.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v74 = __ldaxr(v102);
      while (__stlxr(v74 - 1, v102));
      goto LABEL_141;
    }
    v95 = std::stof(&__str, 0);
    if (v95 < 0.1 || v95 > 10.0)
      v95 = 1.0;
    *(float *)(v76 + 456) = v95;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_128;
    goto LABEL_127;
  }
LABEL_223:
  if (*((_QWORD *)&v149 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v130 = (std::string::size_type *)(v145 + 8);
  v131 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v132 = v145 + 8;
    if (*(char *)(v145 + 31) < 0)
      v132 = *v130;
    v133.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v132;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (double)((v133.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v131, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&__str, 0x16u);
  }
  if (*(char *)(v145 + 31) < 0)
    v130 = (std::string::size_type *)*v130;
  v134.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v135, v130, (double)((v134.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v149 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)v150;
  result.n128_u64[1] = (unint64_t)v7;
  *v147 = result;
  return result;
}

void sub_1DE92CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__shared_weak_count *a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;

  if (*(char *)(v77 - 153) < 0)
    operator delete(*(void **)(v77 - 176));
  if (a70)
  {
    p_shared_owners = (unint64_t *)&a70->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))a70->__on_zero_shared)(a70);
      std::__shared_weak_count::__release_weak(a70);
    }
  }
  if (*(char *)(v77 - 233) < 0)
    operator delete(*(void **)(v77 - 256));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a27, *(unsigned __int8 *)(v77 - 200));
  *(_QWORD *)(v77 - 256) = v73 + 416;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v77 - 256));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a32);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v74);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v72);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v71);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a28);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v70);
  PersistentModule::~PersistentModule(a37);
  if (v76)
  {
    v81 = (unint64_t *)&v76->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v75);
  operator delete(v83);
  if (v76)
  {
    v84 = (unint64_t *)&v76->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NashvilleFEPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleFEPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NashvilleFEPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9317C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA9317C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA9317C8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DE92D8D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA9317C8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  __int128 **v12;
  unint64_t *opaque;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v23;
  const char *v24;
  void *exception;
  std::string *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type *v29;
  NSObject *v30;
  _QWORD *v31;
  __n128 *v32;
  unint64_t v33;
  std::string::size_type v34;
  std::chrono::steady_clock::time_point v35;
  std::chrono::steady_clock::time_point v36;
  const char *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 result;
  NSObject *v41;
  const char *v42;
  std::string *p_p;
  std::string::size_type v44;
  std::string::size_type size;
  uint64_t v46;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  void **v60;
  void **v61;
  void **v62;
  void **v63;
  int v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  void **v83;
  void **v84;
  int v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  unint64_t *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  int v96;
  void **v97;
  const char *status_string;
  void **v99;
  void *v100;
  int v101;
  void **v102;
  const char *v103;
  void **v104;
  void *v105;
  int v106;
  void **v107;
  const char *v108;
  void **v109;
  std::mutex *v110[2];
  std::string __p;
  std::string v112;
  void *v113[2];
  char v114;
  void *v115;
  std::__shared_weak_count *v116;
  char v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::string buf;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v110 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA935490;
  v10 = (unint64_t)(v8 + 3);
  v11 = (std::__shared_weak_count *)v110[1];
  v12 = (__int128 **)v110[0];
  if (v110[1])
  {
    opaque = (unint64_t *)v110[1]->__m_.__opaque;
    do
      v14 = __ldxr(opaque);
    while (__stxr(v14 + 1, opaque));
    do
      v15 = __ldxr(opaque);
    while (__stxr(v15 + 1, opaque));
  }
  PersistentModule::PersistentModule(v8 + 3, a2, (uint64_t)v110[0], (std::__shared_weak_count *)v110[1]);
  if (v110[1])
  {
    v16 = (unint64_t *)v110[1]->__m_.__opaque;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(std::mutex *))(v110[1]->__m_.__sig + 16))(v110[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v110[1]);
    }
  }
  v9[3] = &off_1EA922000;
  v9[40] = 0;
  v9[41] = 0;
  kdebug_trace();
  if ((v18 & 1) == 0
  {
    v93 = operator new();
    *(_QWORD *)v93 = 850045863;
    *(_OWORD *)(v93 + 8) = 0u;
    *(_OWORD *)(v93 + 24) = 0u;
    *(_OWORD *)(v93 + 40) = 0u;
    *(_QWORD *)(v93 + 56) = 0;
    ParallelNeuralAMPersistentModule::thread_mutex(void)::mutex = v93;
  }
  v19 = ParallelNeuralAMPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)ParallelNeuralAMPersistentModule::thread_mutex(void)::mutex);
  v110[0] = (std::mutex *)v19;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &v112);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&buf.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&v112.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v112.__r_.__value_.__l.__size_ != 8)
    {
      if (v112.__r_.__value_.__l.__size_ == 10
        && *(_QWORD *)v112.__r_.__value_.__l.__data_ == 0x6C66726F736E6574
        && *(_WORD *)(v112.__r_.__value_.__r.__words[0] + 8) == 30575)
      {
        goto LABEL_29;
      }
      goto LABEL_37;
    }
    v26 = (std::string *)v112.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v112.__r_.__value_.__r.__words[2]) != 8)
    {
      if (HIBYTE(v112.__r_.__value_.__r.__words[2]) != 10)
        goto LABEL_37;
      if (v112.__r_.__value_.__r.__words[0] != 0x6C66726F736E6574
        || LOWORD(v112.__r_.__value_.__r.__words[1]) != 30575)
      {
        goto LABEL_37;
      }
LABEL_29:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Tensorflow inference.", v24);
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Tensorflow is not enabled.");
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v26 = &v112;
  }
  if (v26->__r_.__value_.__r.__words[0] != 0x6F73736572707365)
    goto LABEL_37;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v41, OS_LOG_TYPE_DEFAULT, "Using Espresso inference.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Using Espresso inference.", v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 7)
    {
      if (__p.__r_.__value_.__l.__size_ != 9)
      {
        if (__p.__r_.__value_.__l.__size_ != 19)
          goto LABEL_179;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_73:
        v44 = p_p->__r_.__value_.__r.__words[0];
        size = p_p->__r_.__value_.__l.__size_;
        v46 = *(std::string::size_type *)((char *)&p_p->__r_.__value_.__r.__words[1] + 3);
        if (v44 != 0x656C70756F636564 || size != 0x6D61657274735F64 || v46 != 0x676E696D61657274)
          goto LABEL_179;
LABEL_96:
        v52 = operator new(0x50uLL);
        v52[1] = 0;
        v52[2] = 0;
        *v52 = &off_1EA935A40;
        if (v110[1])
        {
          v53 = (unint64_t *)v110[1]->__m_.__opaque;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        SharedObjectPool::get<VoiceConfig>(&v122, v12);
        v55 = v122;
        v56 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename_encoder");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v56, &buf);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v55 + 40))(v120, v55, 1885430125, &buf, 0);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename_decoder");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v57, &buf);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v55 + 40))(v118, v55, 1885430125, &buf, 0);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v60 = v120;
          if (v121 < 0)
            v60 = (void **)v120[0];
          v61 = v118;
          if (v119 < 0)
            v61 = (void **)v118[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v61;
          _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_DEFAULT, "Create Espresso Parallel AM decoupled model. model_encoder_path = %s, model_decoder_path = %s", (uint8_t *)&buf, 0x16u);
        }
        v62 = v120;
        if (v121 < 0)
          v62 = (void **)v120[0];
        v63 = v118;
        if (v119 < 0)
          v63 = (void **)v118[0];
        Diagnostics::log(5, "Create Espresso Parallel AM decoupled model. model_encoder_path = %s, model_decoder_path = %s", v59, v62, v63);
        v52[9] = espresso_create_context();
        v52[7] = espresso_create_plan();
        v52[8] = espresso_create_plan();
        v64 = espresso_plan_add_network();
        std::string::basic_string[abi:ne180100]<0>(&v115, "Unable to load encoder network.");
        if (v64)
        {
          v95 = __cxa_allocate_exception(0x10uLL);
          v96 = v117;
          v97 = (void **)v115;
          status_string = (const char *)espresso_get_status_string();
          v99 = &v115;
          if (v96 < 0)
            v99 = v97;
          StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v99, v64, status_string);
          MEMORY[0x1DF0EC99C](v95, &buf);
          __cxa_throw(v95, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v117 < 0)
          operator delete(v115);
        v65 = espresso_plan_add_network();
        std::string::basic_string[abi:ne180100]<0>(v113, "Unable to load decoder network.");
        if (v65)
        {
          v100 = __cxa_allocate_exception(0x10uLL);
          v101 = v114;
          v102 = (void **)v113[0];
          v103 = (const char *)espresso_get_status_string();
          v104 = v113;
          if (v101 < 0)
            v104 = v102;
          StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v104, v65, v103);
          MEMORY[0x1DF0EC99C](v100, &buf);
          __cxa_throw(v100, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v114 < 0)
          operator delete(v113[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        v66 = v123;
        if (v123)
        {
          p_shared_owners = (unint64_t *)&v123->__shared_owners_;
          do
            v68 = __ldaxr(p_shared_owners);
          while (__stlxr(v68 - 1, p_shared_owners));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        if (v110[1])
        {
          v69 = (unint64_t *)v110[1]->__m_.__opaque;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            (*(void (**)(std::mutex *))(v110[1]->__m_.__sig + 16))(v110[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v110[1]);
          }
        }
        *(_QWORD *)&v71 = v52 + 3;
        *((_QWORD *)&v71 + 1) = v52;
        v72 = (std::__shared_weak_count *)v9[41];
        *((_OWORD *)v9 + 20) = v71;
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          goto LABEL_175;
        }
        goto LABEL_37;
      }
      if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x656C70756F636564
        && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 8) == 100)
      {
        goto LABEL_96;
      }
LABEL_179:
      v94 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to load espresso libarary.");
      MEMORY[0x1DF0EC99C](v94, &buf);
      __cxa_throw(v94, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1634100580
      || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) != 1953264993)
    {
      goto LABEL_179;
    }
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 9)
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 19)
          goto LABEL_179;
        p_p = &__p;
        goto LABEL_73;
      }
      if (__p.__r_.__value_.__r.__words[0] == 0x656C70756F636564 && __p.__r_.__value_.__s.__data_[8] == 100)
        goto LABEL_96;
      goto LABEL_179;
    }
    if (LODWORD(__p.__r_.__value_.__l.__data_) != 1634100580
      || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1953264993)
    {
      goto LABEL_179;
    }
  }
  v76 = operator new(0x38uLL);
  v76[1] = 0;
  v76[2] = 0;
  *v76 = &off_1EA935810;
  if (v110[1])
  {
    v77 = (unint64_t *)v110[1]->__m_.__opaque;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  SharedObjectPool::get<VoiceConfig>(&v115, v12);
  v79 = v115;
  v80 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v80, &buf);
  (*(void (**)(void **__return_ptr, void *, uint64_t, std::string *, _QWORD))(*(_QWORD *)v79 + 40))(v120, v79, 1885430125, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v81 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v83 = v120;
    if (v121 < 0)
      v83 = (void **)v120[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v83;
    _os_log_impl(&dword_1DE3F6000, v81, OS_LOG_TYPE_DEFAULT, "Create Espresso Parallel AM model. model_path = %s", (uint8_t *)&buf, 0xCu);
  }
  v84 = v120;
  if (v121 < 0)
    v84 = (void **)v120[0];
  Diagnostics::log(5, "Create Espresso Parallel AM model. model_path = %s", v82, v84);
  v76[6] = espresso_create_context();
  v76[5] = espresso_create_plan();
  v85 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(v118, "Unable to load network.");
  if (v85)
  {
    v105 = __cxa_allocate_exception(0x10uLL);
    v106 = v119;
    v107 = (void **)v118[0];
    v108 = (const char *)espresso_get_status_string();
    v109 = v118;
    if (v106 < 0)
      v109 = v107;
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v109, v85, v108);
    MEMORY[0x1DF0EC99C](v105, &buf);
    __cxa_throw(v105, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v119 < 0)
    operator delete(v118[0]);
  if (v121 < 0)
    operator delete(v120[0]);
  v86 = v116;
  if (v116)
  {
    v87 = (unint64_t *)&v116->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v110[1])
  {
    v89 = (unint64_t *)v110[1]->__m_.__opaque;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      (*(void (**)(std::mutex *))(v110[1]->__m_.__sig + 16))(v110[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v110[1]);
    }
  }
  *(_QWORD *)&v91 = v76 + 3;
  *((_QWORD *)&v91 + 1) = v76;
  v72 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = v91;
  if (v72)
  {
    v92 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v92);
    while (__stlxr(v74 - 1, v92));
LABEL_175:
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
LABEL_37:
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  std::mutex::unlock(v110[0]);
  if (v110[1])
  {
    v27 = (unint64_t *)v110[1]->__m_.__opaque;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(std::mutex *))(v110[1]->__m_.__sig + 16))(v110[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v110[1]);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = (std::string::size_type *)(a1 + 8);
  v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v31 = v9;
    v32 = a4;
    v33 = v10;
    v34 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v34 = *v29;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v35.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v30, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    v10 = v33;
    a4 = v32;
    v9 = v31;
    v11 = (std::__shared_weak_count *)v110[1];
  }
  if (*(char *)(a1 + 31) < 0)
    v29 = (std::string::size_type *)*v29;
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v37, v29, (double)((v36.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v38 = (unint64_t *)&v11->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_1DE92E814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, __int128 a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__shared_weak_count *v49;
  void **v50;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v49[13].__shared_owners_);
  PersistentModule::~PersistentModule(v50);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v49);
  operator delete(v54);
  if (a12)
  {
    v55 = (unint64_t *)&a12->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ParallelNeuralAMPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ParallelNeuralAMPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ParallelNeuralAMPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PersistentModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PersistentModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PersistentModuleFactory>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 24) = &off_1EA920838;
  v3 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::~__hash_table(a1 + 72);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(a1 + 32);
}

void PersistentModuleFactory::load_from_config(void (***a1)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD), uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  const char *v21;
  std::string *v22;
  std::string *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  std::__shared_weak_count *v37;
  char v38;
  std::string *v39;
  void *v40;
  std::__shared_weak_count *v41;
  char v42;
  unsigned __int8 v43[8];
  uint64_t *v44;
  std::string v45;
  uint64_t v46;
  unint64_t v47;
  void *__p;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count_vtbl *v50;
  uint64_t v51;
  unint64_t v52;
  char v53[8];
  std::__shared_weak_count_vtbl **v54;
  uint8_t buf[4];
  _QWORD v56[3];

  *(_QWORD *)((char *)&v56[1] + 4) = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2 == 1
    && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*(_QWORD *)(a2 + 8), "pipeline"))
  {
    v34 = a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pipeline");
    v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at((unsigned __int8 *)a2, (const void **)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v53, v6);
    if (SHIBYTE(v50) < 0)
      operator delete(__p);
    __p = v53;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0x8000000000000000;
    if (v53[0])
    {
      if (v53[0] == 2)
      {
        v50 = *v54;
      }
      else if (v53[0] == 1)
      {
        v49 = *v54;
      }
      else
      {
        v52 = 0;
      }
    }
    else
    {
      v52 = 1;
    }
    while (1)
    {
      v46 = 0;
      *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = 0uLL;
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
      v47 = 0x8000000000000000;
      if (v53[0] == 2)
      {
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)v54[1];
      }
      else if (v53[0] == 1)
      {
        v45.__r_.__value_.__l.__size_ = (std::string::size_type)(v54 + 1);
      }
      else
      {
        v47 = 1;
      }
      if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v45))
      {
        break;
      }
      v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v9, "id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v10, &v45);
      std::string::basic_string[abi:ne180100]<0>(&v40, "params");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, 0, 0, 0, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((char *)v9, (const void **)&v40, buf, (uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)v56 + 4), buf[0]);
      if (v42 < 0)
        operator delete(v40);
      v39 = 0;
      v38 = 3;
      v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v45);
      v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "id");
      v12 = *(unsigned __int8 *)v11;
      *(_BYTE *)v11 = v38;
      v38 = v12;
      v13 = (uint64_t *)v11[1];
      v11[1] = (uint64_t)v39;
      v39 = (std::string *)v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v39, v12);
      v14 = (std::__shared_weak_count *)a3[1];
      v36 = *a3;
      v37 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      (**a1)(&v40, a1, &v45, v43, &v36, 0);
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (!v40)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v22 = &v45;
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v56[0] = v22;
          _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_DEBUG, "WARN: Persistent Module name '%s' can't be initialized. Skip.", buf, 0xCu);
        }
        v23 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v23 = (std::string *)v45.__r_.__value_.__r.__words[0];
        Diagnostics::log(7, "WARN: Persistent Module name '%s' can't be initialized. Skip.", v21, v23);
      }
      v24 = v41;
      if (v41)
      {
        v25 = (unint64_t *)&v41->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
    }
    if (*(_BYTE *)v34 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [11]>(*(_QWORD *)(v34 + 8)))
    {
      v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v34, "connection");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v40, v27);
      __p = &v40;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0x8000000000000000;
      if ((_BYTE)v40)
      {
        if (v40 == 2)
        {
          v50 = v41->__vftable;
        }
        else if (v40 == 1)
        {
          v49 = v41->__vftable;
        }
        else
        {
          v52 = 0;
        }
LABEL_59:
        while (1)
        {
          v46 = 0;
          *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = 0uLL;
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
          v47 = 0x8000000000000000;
          if (v40 == 2)
          {
            v45.__r_.__value_.__r.__words[2] = v41->__shared_owners_;
          }
          else if (v40 == 1)
          {
            v45.__r_.__value_.__l.__size_ = (std::string::size_type)&v41->__shared_owners_;
          }
          else
          {
            v47 = 1;
          }
          if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v45))
          {
            break;
          }
          v28 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
          v29 = (std::__shared_weak_count *)a3[1];
          v35[0] = *a3;
          v35[1] = v29;
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          PersistentModuleFactory::load_from_config(a1, v28, v35);
          if (v29)
          {
            v32 = (unint64_t *)&v29->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v41, v40);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v54, v53[0]);
        return;
      }
    }
    else
    {
      LOBYTE(v40) = 0;
      v41 = 0;
      __p = &v40;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0x8000000000000000;
    }
    v52 = 1;
    goto LABEL_59;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_DEFAULT, "No shared module found in config, skip.", (uint8_t *)&__p, 2u);
  }
  Diagnostics::log(5, "No shared module found in config, skip.", v8);
}

void sub_1DE92F3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, *(unsigned __int8 *)(v42 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(uint64_t a1, std::string::value_type *__s)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return 0;
  while (std::string::compare((const std::string *)(v3 + 4), __s) > 0)
  {
    v2 = v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0;
  }
  if (std::string::compare((const std::string *)(v3 + 4), __s) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = *v3;
  v7 = v3;
  if (*v3)
  {
    v7 = v3;
    do
    {
      v8 = std::string::compare((const std::string *)(v6 + 32), __s);
      v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        v9 = (uint64_t *)v6;
        v7 = (_QWORD *)v6;
      }
      v6 = *v9;
    }
    while (*v9);
  }
  v10 = v3[1];
  if (v10)
  {
    do
    {
      v11 = std::string::compare((const std::string *)(v10 + 32), __s);
      v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        v12 = (uint64_t *)v10;
        v2 = (_QWORD *)v10;
      }
      v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2)
    return 0;
  result = 0;
  do
  {
    v13 = (_QWORD *)v7[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v7[2];
        v15 = *v14 == (_QWORD)v7;
        v7 = v14;
      }
      while (!v15);
    }
    ++result;
    v7 = v14;
  }
  while (v14 != v2);
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(unsigned __int8 *a1, const void **a2)
{
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = *a1;
    if (v5 > 9)
      v6 = "number";
    else
      v6 = off_1EA94C758[v5];
    std::string::basic_string[abi:ne180100]<0>(&v9, v6);
    v7 = std::string::insert(&v9, 0, "cannot use at() with ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(304, (uint64_t)&v10, exception);
  }
  return std::map<std::string,std::string>::at(*((_QWORD *)a1 + 1), a2);
}

void sub_1DE92F6AC(uint64_t a1, std::string *a2, __int128 a3)
{
  __break(1u);
}

void sub_1DE92F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1DE92F7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [11]>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 0;
  while (std::string::compare((const std::string *)(v2 + 4), "connection") > 0)
  {
    v1 = v2;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (std::string::compare((const std::string *)(v2 + 4), "connection") < 0)
  {
    ++v2;
    goto LABEL_6;
  }
  v4 = *v2;
  v5 = v2;
  if (*v2)
  {
    v5 = v2;
    do
    {
      v6 = std::string::compare((const std::string *)(v4 + 32), "connection");
      v7 = (uint64_t *)(v4 + 8);
      if (v6 >= 0)
      {
        v7 = (uint64_t *)v4;
        v5 = (_QWORD *)v4;
      }
      v4 = *v7;
    }
    while (*v7);
  }
  v8 = v2[1];
  if (v8)
  {
    do
    {
      v9 = std::string::compare((const std::string *)(v8 + 32), "connection");
      v10 = (uint64_t *)(v8 + 8);
      if (v9 > 0)
      {
        v10 = (uint64_t *)v8;
        v1 = (_QWORD *)v8;
      }
      v8 = *v10;
    }
    while (*v10);
  }
  if (v5 == v1)
    return 0;
  result = 0;
  do
  {
    v11 = (_QWORD *)v5[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v5[2];
        v13 = *v12 == (_QWORD)v5;
        v5 = v12;
      }
      while (!v13);
    }
    ++result;
    v5 = v12;
  }
  while (v12 != v1);
  return result;
}

_BYTE *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*(uint64_t a1)
{
  _BYTE *result;
  int v3;
  nlohmann::detail::exception *v4;
  nlohmann::detail::exception *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v6, exception);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v6, v4);
  }
  return result;
}

void sub_1DE92FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  const void **v18;
  uint64_t **v19;
  _QWORD *v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  nlohmann::detail::exception *exception;
  _QWORD *v32;
  uint64_t *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v8 = a2 + 16;
    v9 = 32 * a3;
    while (**(_BYTE **)v8 == 2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      v10 = *(_BYTE **)v11;
      if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 != 32 || *v10 != 3)
        break;
      v8 += 32;
      v9 -= 32;
      if (!v9)
        goto LABEL_7;
    }
    v12 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_16:
      if (a5 == 2)
        v22 = 0;
      else
        v22 = v12;
      if (a5 != 1)
        LOBYTE(v12) = 1;
      if ((v12 & 1) == 0)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v32, "cannot create object from initializer list");
        nlohmann::detail::type_error::create(301, (uint64_t)&v32, exception);
      }
      if (!v22)
        goto LABEL_23;
LABEL_9:
      *(_BYTE *)a1 = 1;
      v13 = operator new(0x18uLL);
      v13[2] = 0;
      v13[1] = 0;
      *v13 = v13 + 1;
      *(_QWORD *)(a1 + 8) = v13;
      if (a3)
      {
        v14 = (char *)(a2 + 24);
        v15 = 32 * a3;
        do
        {
          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v32, *((_QWORD *)v14 - 1), *v14);
          v16 = *(uint64_t ***)(a1 + 8);
          v17 = *v33[0];
          v18 = *(const void ***)(*v33[0] + 8);
          v19 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v16, &v37, v18);
          if (!*v19)
          {
            v20 = operator new(0x48uLL);
            v21 = *(_OWORD *)v18;
            v20[6] = v18[2];
            *((_OWORD *)v20 + 2) = v21;
            v18[1] = 0;
            v18[2] = 0;
            *v18 = 0;
            *((_BYTE *)v20 + 56) = *(_BYTE *)(v17 + 16);
            v20[8] = *(_QWORD *)(v17 + 24);
            *(_BYTE *)(v17 + 16) = 0;
            *(_QWORD *)(v17 + 24) = 0;
            std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v16, v37, v19, v20);
          }
          v14 += 32;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v33, v32);
          v15 -= 32;
        }
        while (v15);
      }
      return a1;
    }
  }
  else
  {
LABEL_7:
    v12 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_16;
  }
  if (v12)
    goto LABEL_9;
LABEL_23:
  v23 = a2 + 32 * a3;
  *(_BYTE *)a1 = 2;
  v24 = operator new(0x18uLL);
  v25 = v24;
  v24[1] = 0;
  v24[2] = 0;
  *v24 = 0;
  if (a2 != v23)
  {
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](v24, (32 * a3) >> 5);
    v26 = v25[1];
    v35 = v26;
    v36 = v26;
    v32 = v25 + 2;
    v33[0] = &v35;
    v33[1] = &v36;
    v34 = 0;
    if (a3)
    {
      v27 = (char *)(a2 + 24);
      v28 = 32 * a3;
      v29 = v26;
      do
      {
        nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v37, *((_QWORD *)v27 - 1), *v27);
        v27 += 32;
        *(_BYTE *)v29 = v37;
        *(_QWORD *)(v29 + 8) = v38;
        LOBYTE(v37) = 0;
        v38 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v38, 0);
        v29 = v36 + 16;
        v36 += 16;
        v28 -= 32;
      }
      while (v28);
    }
    else
    {
      v29 = v26;
    }
    v34 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v32);
    v25[1] = v29;
  }
  *(_QWORD *)(a1 + 8) = v25;
  return a1;
}

void sub_1DE92FD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a1, a2);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

void PersistentModuleFactory::switch_module_mode_from_config(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  _BYTE *v11;
  uint64_t *v12;
  size_t v13;
  void *p_p;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  const void *v20;
  int v21;
  const void **v22;
  unsigned __int8 *v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  std::string *v36;
  std::string *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t **v48;
  _QWORD v49[2];
  uint64_t v50;
  std::__shared_weak_count *v51;
  char v52;
  std::string *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string *v56;
  uint64_t *v57;
  void *__p;
  uint64_t *v59;
  char v60;
  std::string v61;
  uint64_t v62;
  unint64_t v63;
  uint8_t buf[8];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69[8];
  uint64_t *v70;
  uint8_t v71[4];
  std::string *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2 != 1
    || !std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*(_QWORD *)(a2 + 8), "pipeline"))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "No shared module found in config, skip.", buf, 2u);
    }
    Diagnostics::log(5, "No shared module found in config, skip.", v10);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at((unsigned __int8 *)a2, (const void **)buf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, v8);
  if (SHIBYTE(v66) < 0)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = v69;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0x8000000000000000;
  if (v69[0])
  {
    if (v69[0] == 2)
    {
      v66 = *v70;
    }
    else if (v69[0] == 1)
    {
      v65 = *v70;
    }
    else
    {
      v68 = 0;
    }
  }
  else
  {
    v68 = 1;
  }
  v48 = &v70;
  while (1)
  {
    v62 = 0;
    *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = 0uLL;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
    v63 = 0x8000000000000000;
    if (v69[0] == 2)
    {
      v61.__r_.__value_.__r.__words[2] = v70[1];
    }
    else if (v69[0] == 1)
    {
      v61.__r_.__value_.__l.__size_ = (std::string::size_type)(v70 + 1);
    }
    else
    {
      v63 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      break;
    }
    v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v11, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v12, &v61);
    if (*((char *)a4 + 23) >= 0)
      v13 = *((unsigned __int8 *)a4 + 23);
    else
      v13 = (size_t)a4[1];
    if (v13)
    {
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + 7);
      if (v60 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (*((char *)a4 + 23) >= 0)
        v15 = a4;
      else
        v15 = *a4;
      memmove(p_p, v15, v13);
      strcpy((char *)p_p + v13, "_params");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "params");
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)&v61)&& *v11 == 1&& *((_QWORD *)v11 + 1) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)v11 + 1), (const void **)&__p))
    {
      v56 = &v61;
      v16 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)&v61, (__int128 **)&v56)+ 5);
      v17 = *(unsigned __int8 *)(v16 + 295);
      v18 = *(_QWORD *)(v16 + 280);
      if ((v17 & 0x80u) == 0)
        v19 = (const void *)*(unsigned __int8 *)(v16 + 295);
      else
        v19 = *(const void **)(v16 + 280);
      v20 = (const void *)*((unsigned __int8 *)a4 + 23);
      v21 = (char)v20;
      if ((char)v20 < 0)
        v20 = a4[1];
      if (v19 == v20)
      {
        v22 = (const void **)(v16 + 272);
        if (v21 >= 0)
          v23 = (unsigned __int8 *)a4;
        else
          v23 = (unsigned __int8 *)*a4;
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp(*v22, v23, v18))
            goto LABEL_78;
        }
        else
        {
          if (!(_DWORD)v17)
            goto LABEL_78;
          while (*(unsigned __int8 *)v22 == *v23)
          {
            v22 = (const void **)((char *)v22 + 1);
            ++v23;
            if (!--v17)
              goto LABEL_78;
          }
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v54, 0, 0, 0, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v11, (const void **)&__p, (unsigned __int8 *)&v54, (uint64_t)&v56);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55, v54);
      v53 = 0;
      v52 = 3;
      v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v61);
      v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v56, "id");
      v25 = *(unsigned __int8 *)v24;
      *(_BYTE *)v24 = v52;
      v52 = v25;
      v26 = (uint64_t *)v24[1];
      v24[1] = (uint64_t)v53;
      v53 = (std::string *)v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v53, v25);
      v27 = (std::__shared_weak_count *)a3[1];
      v50 = *a3;
      v51 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      (**(void (***)(uint64_t *__return_ptr, uint64_t, std::string *, std::string **, uint64_t *, uint64_t))a1)(&v54, a1, &v61, &v56, &v50, 1);
      v30 = v51;
      if (v51)
      {
        v31 = (unint64_t *)&v51->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v54;
      if (!v54)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v36 = &v61;
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v36 = (std::string *)v61.__r_.__value_.__r.__words[0];
          *(_DWORD *)v71 = 136315138;
          v72 = v36;
          _os_log_impl(&dword_1DE3F6000, v34, OS_LOG_TYPE_DEBUG, "WARN: Persistent Module name '%s' can't be initialized. Skip.", v71, 0xCu);
        }
        v37 = &v61;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
        Diagnostics::log(7, "WARN: Persistent Module name '%s' can't be initialized. Skip.", v35, v37, v48);
        v33 = v54;
      }
      std::string::operator=((std::string *)(v33 + 272), (const std::string *)a4);
      v38 = v55;
      if (v55)
      {
        v39 = (unint64_t *)&v55->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v57, v56);
    }
LABEL_78:
    if (v60 < 0)
      operator delete(__p);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  if (*(_BYTE *)a2 == 1
    && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [11]>(*(_QWORD *)(a2 + 8)))
  {
    v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "connection");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, v41);
    *(_QWORD *)buf = &__p;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0x8000000000000000;
    if ((_BYTE)__p)
    {
      if (__p == 2)
      {
        v66 = *v59;
      }
      else if (__p == 1)
      {
        v65 = *v59;
      }
      else
      {
        v68 = 0;
      }
      goto LABEL_91;
    }
  }
  else
  {
    LOBYTE(__p) = 0;
    v59 = 0;
    *(_QWORD *)buf = &__p;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0x8000000000000000;
  }
  v68 = 1;
LABEL_91:
  while (1)
  {
    v62 = 0;
    *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = 0uLL;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v63 = 0x8000000000000000;
    if (__p == 2)
    {
      v61.__r_.__value_.__r.__words[2] = v59[1];
    }
    else if (__p == 1)
    {
      v61.__r_.__value_.__l.__size_ = (std::string::size_type)(v59 + 1);
    }
    else
    {
      v63 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      break;
    }
    v42 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    v43 = (std::__shared_weak_count *)a3[1];
    v49[0] = *a3;
    v49[1] = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    PersistentModuleFactory::switch_module_mode_from_config(a1, v42, v49, a4);
    if (v43)
    {
      v46 = (unint64_t *)&v43->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, __p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v48, v69[0]);
}

void sub_1DE9305A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a10, *(unsigned __int8 *)(v38 - 128));
  _Unwind_Resume(a1);
}

void SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE930728(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AudioConnection::should_consume_data(uint64_t a1, uint64_t a2)
{
}

uint64_t _SiriTTSVocalizerCriticalSectionImplOpen(void *a1, void *a2, pthread_mutex_t **a3)
{
  pthread_mutex_t *v4;
  uint64_t result;
  pthread_mutexattr_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 2147483655;
  pthread_mutexattr_init(&v6);
  pthread_mutexattr_settype(&v6, 2);
  v4 = (pthread_mutex_t *)operator new();
  *(_OWORD *)&v4->__sig = 0u;
  *(_OWORD *)&v4->__opaque[8] = 0u;
  *(_OWORD *)&v4->__opaque[24] = 0u;
  *(_OWORD *)&v4->__opaque[40] = 0u;
  if (pthread_mutex_init(v4, &v6))
  {
    free(v4);
    return 2147483918;
  }
  else
  {
    pthread_mutexattr_destroy(&v6);
    result = 0;
    *a3 = v4;
  }
  return result;
}

uint64_t _SiriTTSVocalizerCriticalSectionImplClose(pthread_mutex_t *a1)
{
  if (a1)
  {
    pthread_mutex_destroy(a1);
    MEMORY[0x1DF0ED014](a1, 0x1000C40FA0F61DDLL);
  }
  return 0;
}

uint64_t _SiriTTSVocalizerCriticalSectionImplEnter(pthread_mutex_t *a1)
{
  if (a1 && pthread_mutex_lock(a1))
    return 2147483918;
  else
    return 0;
}

uint64_t _SiriTTSVocalizerCriticalSectionImplLeave(pthread_mutex_t *a1)
{
  if (a1 && pthread_mutex_unlock(a1))
    return 2147483918;
  else
    return 0;
}

void LPCFilterModule::~LPCFilterModule(LPCFilterModule *this)
{
  *(_QWORD *)this = &off_1EA91DED0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA91DED0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void LPCFilterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const float *v35;
  float *v36;
  int v37;
  unint64_t v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  float v43;
  unint64_t v44;
  float v45;
  float *v46;
  uint64_t v47;
  float v48;
  float v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  int *v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  float *v60;
  float *v61;
  float *v62;
  unint64_t v63;
  uint64_t v64;
  float *v65;
  float *v66;
  float *v67;
  float *v68;
  uint64_t v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  void *v77;
  char *v78;
  char *v79;
  int v80;
  BOOL v81;
  _DWORD *v82;
  unint64_t v84;
  int v85;
  void *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  float v102;
  float v103;
  float v104;
  unint64_t v105;
  __int128 v106;
  float v107;
  float *v108;
  float v109;
  float v110;
  float *v111;
  float *v112;
  uint64_t v113;
  unint64_t v114;
  float *v115;
  float v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int *v121;
  int v122;
  float *v123;
  float *i;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void *__dst[2];
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void *__p;
  _BYTE *v148;
  uint64_t v149;
  void *v150;
  _BYTE *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  float *__A;
  float *v156;
  void *v157;
  _BYTE *v158;
  void *v159[3];
  void *v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  float __C;
  _BYTE v165[24];
  char *v166;
  char *v167;
  uint64_t v168;

  v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v145 = v6;
  v146 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (*(_BYTE *)v6)
  {
    v9 = *(_QWORD *)(a1 + 272);
    v10 = *(_QWORD *)(v9 + 112);
    v9 += 112;
    *(_QWORD *)(v9 - 16) = *(_QWORD *)(v9 - 24);
    *(_QWORD *)(v9 + 8) = v10;
    v11 = *(int *)(v9 - 48) - (uint64_t)*(int *)(v9 - 40);
    LODWORD(v166) = 0;
    std::vector<float>::resize(v9, v11, &v166);
  }
  v136 = a2;
  v137 = a1;
  v12 = *(int **)(a1 + 272);
  std::vector<float>::vector(&v162, v12[16]);
  v13 = *v12 + 1;
  LODWORD(v166) = 0;
  std::vector<float>::vector(&v160, v13, &v166);
  v14 = *v12 + 1;
  LODWORD(v166) = 0;
  std::vector<float>::vector(v159, v14, &v166);
  __dst[1] = 0;
  v144 = 0;
  __dst[0] = 0;
  v15 = *(_QWORD *)(v6 + 56);
  if (*((_BYTE *)v12 + 60))
  {
    v16 = *(float **)(v6 + 64);
    if ((float *)v15 != v16)
    {
      v17 = *(float **)(v6 + 56);
      do
      {
        *v17 = *v17 / 32767.0;
        ++v17;
      }
      while (v17 != v16);
    }
  }
  v18 = (uint64_t)(v12 + 22);
  v135 = v6 + 56;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v6 + 56, v15, *((char **)v12 + 11), *((char **)v12 + 12), (uint64_t)(*((_QWORD *)v12 + 12) - *((_QWORD *)v12 + 11)) >> 2);
  v19 = *((_QWORD *)v12 + 11);
  *((_QWORD *)v12 + 12) = v19;
  v20 = v12[16];
  v22 = *(_QWORD *)(v6 + 56);
  v21 = *(char **)(v6 + 64);
  if (v20 <= (uint64_t)&v21[-v22] >> 2)
  {
    v24 = 0;
    v138 = v6;
    do
    {
      if ((_DWORD)v20)
      {
        memmove((void *)v162, (const void *)(v22 + 4 * v24), 4 * (int)v20);
        v25 = v12[16];
        v26 = (float *)v162;
        if ((int)v25 >= 1)
        {
          v27 = 0;
          v28 = *((_QWORD *)v12 + 17);
          v29 = 4 * v25;
          do
          {
            v26[v27 / 4] = *(float *)(v28 + v27) * v26[v27 / 4];
            v27 += 4;
          }
          while (v29 != v27);
        }
      }
      else
      {
        v26 = (float *)v162;
      }
      v30 = 0.0;
      while (v26 != *((float **)&v162 + 1))
      {
        v31 = *v26++;
        v30 = v31 * v31 + v30;
      }
      v32 = *v12 + 1;
      LODWORD(v166) = 0;
      std::vector<float>::vector(v165, v32, &v166);
      v33 = *v12 + ((uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2) + 1;
      LODWORD(v157) = 0;
      std::vector<float>::vector(&v166, v33, &v157);
      v34 = v162;
      if (*((_QWORD *)&v162 + 1) == (_QWORD)v162)
      {
        v35 = (const float *)v162;
      }
      else
      {
        memmove(v166, (const void *)v162, *((_QWORD *)&v162 + 1) - v162);
        v34 = *((_QWORD *)&v162 + 1);
        v35 = (const float *)v162;
      }
      vDSP_conv((const float *)v166, 1, v35, 1, *(float **)v165, 1, (uint64_t)(*(_QWORD *)&v165[8] - *(_QWORD *)v165) >> 2, (v34 - (uint64_t)v35) >> 2);
      if (v166)
      {
        v167 = v166;
        operator delete(v166);
      }
      v36 = *(float **)v165;
      if (**(float **)v165 == 0.0)
      {
        LODWORD(v166) = 0;
        std::vector<float>::vector(v165, (uint64_t)(*(_QWORD *)&v165[8] - *(_QWORD *)v165) >> 2, &v166);
        **(_DWORD **)v165 = 1065353216;
      }
      else
      {
        v37 = *v12;
        v38 = *v12 + 1;
        std::vector<float>::vector(v165, v38);
        std::vector<float>::vector(&v166, v38);
        v39 = *(_DWORD **)v165;
        **(_DWORD **)v165 = 1065353216;
        v40 = v166;
        *(_DWORD *)v166 = 1065353216;
        v41 = (char *)v159[0];
        *(_DWORD *)v159[0] = 0;
        if (v37 >= 1)
        {
          v42 = 0;
          v43 = *v36;
          v44 = 1;
          do
          {
            if (v44 < 2)
            {
              v53 = v36[v44] / v43;
              v50 = (float *)&v41[4 * v44];
              *v50 = v53;
              *(float *)&v39[v44] = v53;
            }
            else
            {
              v45 = 0.0;
              v46 = (float *)(v40 + 4);
              v47 = v42;
              do
              {
                v48 = *v46++;
                v45 = v45 + (float)(v48 * *(float *)((char *)v36 + v47));
                v47 -= 4;
              }
              while (v47);
              v49 = (float)(v36[v44] - v45) / v43;
              v50 = (float *)&v41[4 * v44];
              *v50 = v49;
              *(float *)&v39[v44] = v49;
              v51 = 1;
              v52 = v42;
              do
              {
                *(float *)&v39[v51] = *(float *)&v40[v51 * 4] - (float)(*v50 * *(float *)&v40[v52]);
                ++v51;
                v52 -= 4;
              }
              while (v52);
            }
            v54 = 1.0 - (float)(*v50 * *v50);
            v55 = v39;
            v56 = v40;
            v57 = v38;
            do
            {
              v58 = *v55++;
              *(_DWORD *)v56 = v58;
              v56 += 4;
              --v57;
            }
            while (v57);
            v43 = v43 * v54;
            ++v44;
            v42 += 4;
          }
          while (v44 != v38);
          v59 = v38 - 1;
          v60 = (float *)(v39 + 1);
          do
          {
            *v60 = -*v60;
            ++v60;
            --v59;
          }
          while (v59);
        }
        *v39 = 1065353216;
        v167 = v40;
        operator delete(v40);
      }
      if (v160)
      {
        *(_QWORD *)&v161 = v160;
        operator delete(v160);
      }
      v61 = *(float **)v165;
      v160 = *(void **)v165;
      v161 = *(_OWORD *)&v165[8];
      v62 = *(float **)&v165[8];
      while (v61 != v62)
      {
        if (fabsf(*v61) == INFINITY)
          *v61 = 0.0;
        ++v61;
      }
      v63 = *v12 + 1;
      LODWORD(v166) = 0;
      std::vector<float>::vector(&v157, v63, &v166);
      LODWORD(v166) = 0;
      std::vector<float>::vector(&__A, ((uint64_t)(v161 - (_QWORD)v160) >> 2) + 2, &v166);
      v64 = *v12;
      if ((v64 & 0x80000000) == 0)
      {
        v65 = (float *)v160;
        v66 = (float *)*((_QWORD *)v12 + 4);
        v67 = (float *)v157;
        v68 = (float *)*((_QWORD *)v12 + 1);
        v69 = v64 + 1;
        v70 = __A + 1;
        do
        {
          v71 = *v66++;
          *v67++ = *v65 * v71;
          v72 = *v65++;
          v73 = v72;
          v74 = *v68++;
          *v70++ = v73 * v74;
          --v69;
        }
        while (v69);
      }
      v75 = *((float *)v12 + 14);
      v76 = *((float *)v159[0] + 1);
      v77 = operator new(8uLL);
      *(_DWORD *)v77 = 1065353216;
      *((float *)v77 + 1) = -(float)(v75 * v76);
      *(_DWORD *)v165 = 0;
      std::vector<float>::vector(&v166, v156 - __A - 1, v165);
      vDSP_conv(__A, 1, (const float *)v77 + 1, -1, (float *)v166, 1, (v167 - v166) >> 2, 2uLL);
      v151 = 0;
      v152 = 0;
      v150 = 0;
      v140 = v166;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, v166, (uint64_t)v167, (v167 - v166) >> 2);
      __p = 0;
      v148 = 0;
      v149 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v157, (uint64_t)v158, (v158 - (_BYTE *)v157) >> 2);
      v166 = 0;
      v167 = 0;
      v168 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v166, __p, (uint64_t)v148, (v148 - (_BYTE *)__p) >> 2);
      memset(v165, 0, sizeof(v165));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v165, v150, (uint64_t)v151, (v151 - (_BYTE *)v150) >> 2);
      if (v166 != v167)
      {
        v78 = v167 - 4;
        if (v167 - 4 > v166)
        {
          v79 = v166 + 4;
          do
          {
            v80 = *((_DWORD *)v79 - 1);
            *((_DWORD *)v79 - 1) = *(_DWORD *)v78;
            *(_DWORD *)v78 = v80;
            v78 -= 4;
            v81 = v79 >= v78;
            v79 += 4;
          }
          while (!v81);
        }
      }
      v139 = v24;
      v82 = (_DWORD *)(*(_QWORD *)&v165[8] - 4);
      if (*(_QWORD *)v165 != *(_QWORD *)&v165[8] && (unint64_t)v82 > *(_QWORD *)v165)
      {
        v84 = *(_QWORD *)v165 + 4;
        do
        {
          v85 = *(_DWORD *)(v84 - 4);
          *(_DWORD *)(v84 - 4) = *v82;
          *v82-- = v85;
          v81 = v84 >= (unint64_t)v82;
          v84 += 4;
        }
        while (!v81);
      }
      v86 = v77;
      v88 = __p;
      v87 = v148;
      v90 = v150;
      v89 = v151;
      __C = 0.0;
      std::vector<float>::vector(&v153, (uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2, &__C);
      __C = 0.0;
      v91 = v162;
      if (*((_QWORD *)&v162 + 1) != (_QWORD)v162)
      {
        v92 = 0;
        v93 = (v87 - v88) >> 2;
        v94 = (v89 - v90) >> 2;
        v95 = 1;
        v96 = 4;
        do
        {
          v97 = v92 + 1;
          if (v93 >= v95)
            v98 = v95;
          else
            v98 = v93;
          if (v94 >= v95)
            v99 = v95;
          else
            v99 = v94;
          v100 = v96 - 4 * v99;
          if (v94 >= v97)
            v101 = v92 + 1;
          else
            v101 = v94;
          v102 = *(float *)(*(_QWORD *)&v165[8] - 4);
          v103 = *(float *)(v91 + 4 * v92);
          vDSP_dotpr((const float *)(v91 + v100), 1, (const float *)(*(_QWORD *)v165 + 4 * (v94 - v101)), 1, &__C, v101 - 1);
          v104 = __C;
          if (v93 >= v97)
            v105 = v92 + 1;
          else
            v105 = v93;
          vDSP_dotpr((const float *)(v153 + v96 - 4 * v98), 1, (const float *)&v166[4 * (v93 - v105)], 1, &__C, v105 - 1);
          *(float *)(v153 + 4 * v92) = (float)((float)((float)(v102 * v103) + v104) - __C) / *((float *)v167 - 1);
          v91 = v162;
          v96 += 4;
          ++v95;
          ++v92;
        }
        while (v97 < (uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2);
      }
      if (*(_QWORD *)v165)
      {
        *(_QWORD *)&v165[8] = *(_QWORD *)v165;
        operator delete(*(void **)v165);
      }
      v18 = (uint64_t)(v12 + 22);
      v6 = v138;
      if (v166)
      {
        v167 = v166;
        operator delete(v166);
      }
      if ((_QWORD)v162)
      {
        *((_QWORD *)&v162 + 1) = v162;
        operator delete((void *)v162);
      }
      v162 = v153;
      v163 = v154;
      v154 = 0;
      v153 = 0uLL;
      if (__p)
      {
        v148 = __p;
        operator delete(__p);
      }
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      v106 = v162;
      if ((_QWORD)v162 != *((_QWORD *)&v162 + 1))
      {
        v107 = 0.0;
        v108 = (float *)v162;
        do
        {
          v109 = *v108++;
          v107 = v107 + (float)(v109 * v109);
        }
        while (v108 != *((float **)&v162 + 1));
        v110 = sqrtf(v30 / v107);
        v111 = (float *)v162;
        do
        {
          *v111 = v110 * *v111;
          ++v111;
        }
        while (v111 != *((float **)&v106 + 1));
      }
      v112 = (float *)*((_QWORD *)v12 + 14);
      v113 = *((_QWORD *)v12 + 15) - (_QWORD)v112;
      if (v113)
      {
        v114 = v113 >> 2;
        if (v114 <= 1)
          v114 = 1;
        v115 = (float *)v106;
        do
        {
          v116 = *v112++;
          *v115 = v116 + *v115;
          ++v115;
          --v114;
        }
        while (v114);
      }
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)__dst, (uint64_t)__dst[1], (char *)v106, (char *)(v106 + 4 * v12[18]), v12[18]);
      v117 = (_DWORD *)*((_QWORD *)v12 + 14);
      v118 = v12[18];
      v119 = *((_QWORD *)v12 + 15) - (_QWORD)v117;
      if (v119)
      {
        v120 = v119 >> 2;
        if (v120 <= 1)
          v120 = 1;
        v121 = (int *)(v162 + 4 * v118);
        do
        {
          v122 = *v121++;
          *v117++ = v122;
          --v120;
        }
        while (v120);
      }
      operator delete(v86);
      if (v140)
        operator delete(v140);
      if (__A)
      {
        v156 = __A;
        operator delete(__A);
      }
      if (v157)
      {
        v158 = v157;
        operator delete(v157);
      }
      v24 = v118 + v139;
      operator delete(v36);
      LODWORD(v20) = v12[16];
      v22 = *(_QWORD *)(v138 + 56);
      v21 = *(char **)(v138 + 64);
    }
    while ((int)v20 + (int)v118 + v139 <= (unint64_t)((uint64_t)&v21[-v22] >> 2));
    v19 = *((_QWORD *)v12 + 11);
    v23 = v24;
  }
  else
  {
    v23 = 0;
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v18, v19, (char *)(v22 + 4 * v23), v21, (uint64_t)&v21[-v22 + -4 * v23] >> 2);
  if (*((_BYTE *)v12 + 60))
  {
    v123 = (float *)__dst[0];
    for (i = (float *)__dst[1]; v123 != i; ++v123)
      *v123 = *v123 * 32767.0;
  }
  if (v159[0])
  {
    v159[1] = v159[0];
    operator delete(v159[0]);
  }
  if (v160)
  {
    *(_QWORD *)&v161 = v160;
    operator delete(v160);
  }
  if ((_QWORD)v162)
  {
    *((_QWORD *)&v162 + 1) = v162;
    operator delete((void *)v162);
  }
  v125 = *(void **)v135;
  if (*(_QWORD *)v135)
  {
    *(_QWORD *)(v6 + 64) = v125;
    operator delete(v125);
    *(_QWORD *)v135 = 0;
    *(_QWORD *)(v135 + 8) = 0;
    *(_QWORD *)(v135 + 16) = 0;
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)__dst;
  *(_QWORD *)(v6 + 72) = v144;
  v126 = (std::__shared_weak_count *)v136[1];
  v141 = *v136;
  v142 = v126;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 72))(v137, &v141);
  v129 = v142;
  if (v142)
  {
    v130 = (unint64_t *)&v142->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v146;
  if (v146)
  {
    v133 = (unint64_t *)&v146->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
}

void sub_1DE9313A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

float nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  int v5;
  uint64_t *v7;
  nlohmann::detail::exception *exception;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  uint64_t v18;
  unint64_t v19;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = *a1;
    if (v9 > 9)
      v10 = "number";
    else
      v10 = off_1EA94C758[v9];
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17 = v11->__r_.__value_.__r.__words[2];
    v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v16, exception);
  }
  *(_QWORD *)&v16 = a1;
  v17 = 0;
  v18 = 0;
  v19 = 0x8000000000000000;
  *((_QWORD *)&v16 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a1 + 1), a2);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v13.__r_.__value_.__r.__words[2] = 0;
  v14 = 0;
  v15 = 0x8000000000000000;
  v5 = *a1;
  if (v5 == 2)
  {
    v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  }
  else if (v5 == 1)
  {
    v13.__r_.__value_.__l.__size_ = *((_QWORD *)a1 + 1) + 8;
  }
  else
  {
    v15 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v16, (unsigned __int8 **)&v13))
  {
    return *(float *)a3;
  }
  v7 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v16);
  LODWORD(v13.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v7, (float *)&v13);
  return *(float *)&v13.__r_.__value_.__l.__data_;
}

void sub_1DE9316DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<LPCFilter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LPCFilter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<LPCFilter>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
}

_QWORD *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1EA931B90;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1EA931B90;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1EA931B90;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1DE9318FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA931B90;
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, *a2);
}

uint64_t std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::target_type()
{
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 - 272));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  std::__tree<std::string>::destroy((uint64_t)this + 248, *((char **)this + 32));
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v5 = (void **)this;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v4 - 240));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::TranslationUtil::PathElement::~PathElement(kaldi::quasar::TranslationUtil::PathElement *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 12) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v8 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void NeuralFEStream::~NeuralFEStream(NeuralFEStream *this)
{
  NeuralFEStream::~NeuralFEStream(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91D988;
  std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100]((uint64_t *)this + 49, 0);
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 35));
  Module::~Module(this);
}

void NeuralFEStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  std::string *v9;
  const char *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__split_buffer<std::string>::pointer end_high;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  BOOL v19;
  std::__split_buffer<std::string>::pointer begin;
  unint64_t v21;
  uint64_t v22;
  std::__split_buffer<std::string>::pointer v23;
  int v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::string::size_type value_high;
  std::__split_buffer<std::string>::pointer v28;
  NSObject *v29;
  const char *v30;
  std::string *v31;
  std::string *v32;
  NSObject *v33;
  const char *v34;
  std::string::size_type v35;
  std::__split_buffer<std::string>::pointer p_buf;
  uint64_t v37;
  std::__split_buffer<std::string>::pointer first;
  std::vector<std::string>::pointer end;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  std::__split_buffer<std::string>::pointer v46;
  __int128 v47;
  uint64_t *v48;
  std::string::size_type v49;
  std::vector<std::string>::pointer v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  std::string *v54;
  int v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  NSObject *v67;
  std::__split_buffer<std::string> *v68;
  const char *v69;
  std::__split_buffer<std::string>::pointer v70;
  char *v71;
  std::vector<std::string>::pointer v72;
  std::vector<std::string>::pointer v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t *v76;
  std::__split_buffer<std::string>::pointer v77;
  std::string *v78;
  NSObject *v79;
  const char *v80;
  std::vector<std::string>::pointer v81;
  std::vector<std::string>::pointer v82;
  std::__split_buffer<std::string>::pointer v83;
  int64_t v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  std::string *v89;
  int v90;
  uint64_t *v91;
  uint64_t *v92;
  std::__split_buffer<std::string>::pointer v93;
  std::string *v94;
  std::__split_buffer<std::string>::pointer v95;
  int64_t v96;
  unint64_t v97;
  int64_t v98;
  unint64_t v99;
  char *v100;
  std::string *v101;
  std::string *v102;
  int v103;
  uint64_t v104;
  void *v105;
  _QWORD *v106;
  _QWORD *v107;
  std::string *v108;
  std::string *v109;
  _QWORD *v110;
  unint64_t v111;
  std::string *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  std::string *v116;
  std::string *v117;
  uint64_t i;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  NSObject *v122;
  std::string *p_s;
  const char *v124;
  std::string *v125;
  char *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *size;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  std::__shared_weak_count *v144;
  void *v145;
  char v146;
  char v147;
  __int128 v148;
  __int16 v149;
  uint64_t *v150;
  __int128 v151;
  std::string::size_type v152;
  std::string __p[3];
  void *v154;
  char v155;
  uint64_t v156;
  std::string v157;
  std::string v158;
  std::string *v159;
  std::string *v160;
  unint64_t v161;
  std::vector<std::string> v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::vector<std::string> v165;
  std::string v166;
  std::string::size_type v167;
  uint8_t v168[4];
  std::string *v169;
  std::__split_buffer<std::string> buf;
  void *v171;
  char v172;
  uint64_t v173;
  std::string __s;
  uint64_t v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  v4 = *(std::__shared_weak_count **)(*(_QWORD *)v3 + 16);
  v163 = v5;
  v164 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  memset(&v162, 0, sizeof(v162));
  v159 = 0;
  v160 = 0;
  v161 = 0;
  if (*(char *)(v5 + 119) < 0)
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(v5 + 96), *(_QWORD *)(v5 + 104));
  else
    v158 = *(std::string *)(v5 + 96);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(__p, v5 + 96);
    v9 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__first_) = 136315138;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v9;
    _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_INFO, "Original Text: %s ", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(__p, v5 + 96);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = __p;
  else
    v11 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Original Text: %s ", v10, v11);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1 + 392);
  memset(__p, 0, 24);
  EncoderDecoder::decode(v12, v5 + 96, (uint64_t)__p);
  memset(&buf, 0, 24);
  v13 = *(_QWORD *)__p[0].__r_.__value_.__l.__data_;
  v14 = *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 8);
  while (v13 != v14)
  {
    end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(buf.__end_);
    if (SHIBYTE(buf.__end_) < 0)
      end_high = buf.__begin_;
    if (end_high)
      std::string::push_back((std::string *)&buf, 32);
    v16 = *(char *)(v13 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v13;
    else
      v17 = *(const std::string::value_type **)v13;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v13 + 23);
    else
      v18 = *(_QWORD *)(v13 + 8);
    std::string::append((std::string *)&buf, v17, v18);
    v13 += 240;
  }
  v142 = a1;
  std::string::basic_string[abi:ne180100]<0>(&v157, "#");
  memset(&v166, 0, sizeof(v166));
  v19 = SHIBYTE(buf.__end_) < 0;
  begin = (std::__split_buffer<std::string>::pointer)HIBYTE(buf.__end_);
  if (SHIBYTE(buf.__end_) < 0)
    begin = buf.__begin_;
  if (begin)
  {
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = v19 ? buf.__first_ : (std::__split_buffer<std::string>::pointer)&buf;
      v24 = v23->__r_.__value_.__s.__data_[v21];
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v24;
      if (v24 <= 44)
        break;
      if (v24 == 45)
        goto LABEL_47;
      v25 = 1;
      if (v24 != 60)
      {
        if (v24 != 62)
        {
LABEL_49:
          std::string::append(&v166, (const std::string::value_type *)&__s, 1uLL);
LABEL_50:
          if ((v22 & 1) != 0)
          {
            v25 = 1;
LABEL_61:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            goto LABEL_63;
          }
        }
        std::operator+<char>();
        if (SHIBYTE(v165.__end_cap_.__value_) >= 0)
          v26 = (const std::string::value_type *)&v165;
        else
          v26 = (const std::string::value_type *)v165.__begin_;
        if (SHIBYTE(v165.__end_cap_.__value_) >= 0)
          value_high = HIBYTE(v165.__end_cap_.__value_);
        else
          value_high = (std::string::size_type)v165.__end_;
        std::string::append(&v157, v26, value_high);
        if (SHIBYTE(v165.__end_cap_.__value_) < 0)
          operator delete(v165.__begin_);
        MEMORY[0x1DF0ECA80](&v166, &byte_1DEBD87CE);
        v25 = 0;
        goto LABEL_61;
      }
LABEL_63:
      ++v21;
      v19 = SHIBYTE(buf.__end_) < 0;
      v28 = (std::__split_buffer<std::string>::pointer)HIBYTE(buf.__end_);
      if (SHIBYTE(buf.__end_) < 0)
        v28 = buf.__begin_;
      v22 = v25;
      if ((unint64_t)v28 <= v21)
        goto LABEL_66;
    }
    if (v24 == 32)
    {
      std::string::append(&v166, "#");
      goto LABEL_50;
    }
    if (v24 != 39)
      goto LABEL_49;
LABEL_47:
    v25 = v22;
    goto LABEL_63;
  }
LABEL_66:
  std::string::append(&v157, " #");
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v31 = &v157;
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v157.__r_.__value_.__r.__words[0];
    LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_INFO, "Phone sequence \"%s\" ", (uint8_t *)&__s, 0xCu);
  }
  v32 = &v157;
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = (std::string *)v157.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Phone sequence \"%s\" ", v30, v32);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(v5 + 119) >= 0)
      v35 = v5 + 96;
    else
      v35 = *(_QWORD *)(v5 + 96);
    p_buf = (std::__split_buffer<std::string>::pointer)&buf;
    if (SHIBYTE(buf.__end_) < 0)
      p_buf = buf.__first_;
    LODWORD(__s.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v35;
    WORD2(__s.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
    _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_INFO, "Pronunciation \"%s\" -> \"%s\" [G2P / NNMT]", (uint8_t *)&__s, 0x16u);
  }
  if (*(char *)(v5 + 119) >= 0)
    v37 = v5 + 96;
  else
    v37 = *(_QWORD *)(v5 + 96);
  first = (std::__split_buffer<std::string>::pointer)&buf;
  if (SHIBYTE(buf.__end_) < 0)
    first = buf.__first_;
  Diagnostics::log(6, "Pronunciation \"%s\" -> \"%s\" [G2P / NNMT]", v34, v37, first);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__end_) < 0)
    operator delete(buf.__first_);
  buf.__first_ = __p;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::istringstream::basic_istringstream[abi:ne180100](__p, &v157, 8);
  std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](&v150, (uint64_t *)__p);
  memset(&v165, 0, sizeof(v165));
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
  if (SHIBYTE(v152) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v166.__r_.__value_.__r.__words[1], (const std::string::value_type *)v151, *((std::string::size_type *)&v151 + 1));
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__r.__words[1] = v151;
    v167 = v152;
  }
  memset(&__s, 0, sizeof(__s));
  v175 = 0;
  v145 = &v165;
  v146 = 0;
  if (v166.__r_.__value_.__r.__words[0])
  {
    do
    {
      end = v165.__end_;
      if (v165.__end_ >= v165.__end_cap_.__value_)
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v165.__end_ - (char *)v165.__begin_) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v165.__end_cap_.__value_ - (char *)v165.__begin_) >> 3) > v42)
          v42 = 0x5555555555555556 * (((char *)v165.__end_cap_.__value_ - (char *)v165.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v165.__end_cap_.__value_ - (char *)v165.__begin_) >> 3) >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        else
          v43 = v42;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v165.__end_cap_;
        if (v43)
          v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v165.__end_cap_, v43);
        else
          v44 = 0;
        v46 = v44 + v41;
        buf.__first_ = v44;
        buf.__begin_ = v46;
        buf.__end_ = v46;
        buf.__end_cap_.__value_ = &v44[v43];
        if (SHIBYTE(v167) < 0)
        {
          std::string::__init_copy_ctor_external(v46, (const std::string::value_type *)v166.__r_.__value_.__l.__size_, v166.__r_.__value_.__r.__words[2]);
          v46 = buf.__end_;
        }
        else
        {
          v47 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
          v46->__r_.__value_.__r.__words[2] = v167;
          *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
        }
        buf.__end_ = v46 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v165, &buf);
        v45 = v165.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&buf);
      }
      else
      {
        if (SHIBYTE(v167) < 0)
        {
          std::string::__init_copy_ctor_external(v165.__end_, (const std::string::value_type *)v166.__r_.__value_.__l.__size_, v166.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v40 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
          v165.__end_->__r_.__value_.__r.__words[2] = v167;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v40;
        }
        v45 = end + 1;
      }
      v165.__end_ = v45;
      v48 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v166.__r_.__value_.__l.__data_, (uint64_t)&v166.__r_.__value_.__l.__size_);
      if ((*((_BYTE *)v48 + *(_QWORD *)(*v48 - 24) + 32) & 5) != 0)
      {
        v49 = 0;
        v166.__r_.__value_.__r.__words[0] = 0;
      }
      else
      {
        v49 = v166.__r_.__value_.__r.__words[0];
      }
    }
    while (v49 != __s.__r_.__value_.__r.__words[0]);
    if (SHIBYTE(v175) < 0)
      operator delete((void *)__s.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v167) < 0)
    operator delete((void *)v166.__r_.__value_.__l.__size_);
  if (SHIBYTE(v152) < 0)
    operator delete((void *)v151);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v162, v165.__begin_, (__int128 *)v165.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v165.__end_ - (char *)v165.__begin_) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v166, "word");
  v50 = v162.__begin_;
  if (v162.__end_ != v162.__begin_)
  {
    v51 = 0;
    v52 = 0;
    v53 = v142 + 320;
    while (!v52)
    {
      LODWORD(__s.__r_.__value_.__l.__data_) = 0;
      LODWORD(v145) = 0;
      LODWORD(v148) = 1065353216;
      v168[0] = 0;
      v149 = 1;
      v56 = v160;
      if ((unint64_t)v160 >= v161)
      {
        v61 = 0x4EC4EC4EC4EC4EC5 * (((char *)v160 - (char *)v159) >> 3);
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) > 0x276276276276276)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v161 - (_QWORD)v159) >> 3) > v62)
          v62 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v161 - (_QWORD)v159) >> 3);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v161 - (_QWORD)v159) >> 3)) >= 0x13B13B13B13B13BLL)
          v63 = 0x276276276276276;
        else
          v63 = v62;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v161;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v63);
        else
          v64 = 0;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v63;
        buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v63 + 104 * v61);
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = (std::string *)(v63 + 104 * v64);
        std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,std::string &,std::string &,int,int,float,BOOL,BOOL,BOOL>(buf.__begin_, v53, (uint64_t)&v166, (int *)&__s, (int *)&v145, (float *)&v148, (std::string::value_type *)v168, (std::string::value_type *)&v149 + 1, (std::string::value_type *)&v149);
        goto LABEL_169;
      }
      std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,std::string &,std::string &,int,int,float,BOOL,BOOL,BOOL>(v160, v53, (uint64_t)&v166, (int *)&__s, (int *)&v145, (float *)&v148, (std::string::value_type *)v168, (std::string::value_type *)&v149 + 1, (std::string::value_type *)&v149);
LABEL_139:
      v57 = (std::string *)((char *)v56 + 104);
LABEL_170:
      v160 = v57;
      ++v52;
      v50 = v162.__begin_;
      ++v51;
      if (v52 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v162.__end_ - (char *)v162.__begin_) >> 3))
        goto LABEL_171;
    }
    v54 = &v50[v51];
    v55 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
    if (v55 < 0)
    {
      if (v54->__r_.__value_.__l.__size_ != 1)
        goto LABEL_137;
      v54 = (std::string *)v54->__r_.__value_.__r.__words[0];
    }
    else if (v55 != 1)
    {
      goto LABEL_137;
    }
    if (v54->__r_.__value_.__s.__data_[0] == 35)
    {
      LODWORD(__s.__r_.__value_.__l.__data_) = 0;
      LODWORD(v145) = 0;
      LODWORD(v148) = 1065353216;
      v168[0] = 1;
      v149 = 0;
      v56 = v160;
      if ((unint64_t)v160 >= v161)
      {
        v58 = 0x4EC4EC4EC4EC4EC5 * (((char *)v160 - (char *)v159) >> 3);
        v66 = v58 + 1;
        if ((unint64_t)(v58 + 1) > 0x276276276276276)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v161 - (_QWORD)v159) >> 3) > v66)
          v66 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v161 - (_QWORD)v159) >> 3);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v161 - (_QWORD)v159) >> 3)) >= 0x13B13B13B13B13BLL)
          v60 = 0x276276276276276;
        else
          v60 = v66;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v161;
        if (v60)
LABEL_164:
          v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v60);
        else
          v65 = 0;
LABEL_168:
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v60;
        buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v60 + 104 * v58);
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = (std::string *)(v60 + 104 * v65);
        std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,char const(&)[2],std::string &,int,int,float,BOOL,BOOL,BOOL>(buf.__begin_, (uint64_t)&v166, (int *)&__s, (int *)&v145, (float *)&v148, (std::string::value_type *)v168, (std::string::value_type *)&v149 + 1, (std::string::value_type *)&v149);
LABEL_169:
        buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 104);
        std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer((uint64_t *)&v159, &buf);
        v57 = v160;
        std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
        goto LABEL_170;
      }
      goto LABEL_138;
    }
LABEL_137:
    LODWORD(__s.__r_.__value_.__l.__data_) = 0;
    LODWORD(v145) = 0;
    LODWORD(v148) = 1065353216;
    v168[0] = 0;
    v149 = 0;
    v56 = v160;
    if ((unint64_t)v160 >= v161)
    {
      v58 = 0x4EC4EC4EC4EC4EC5 * (((char *)v160 - (char *)v159) >> 3);
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) > 0x276276276276276)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x9D89D89D89D89D8ALL * ((uint64_t)(v161 - (_QWORD)v159) >> 3) > v59)
        v59 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v161 - (_QWORD)v159) >> 3);
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v161 - (_QWORD)v159) >> 3)) >= 0x13B13B13B13B13BLL)
        v60 = 0x276276276276276;
      else
        v60 = v59;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v161;
      if (v60)
        goto LABEL_164;
      v65 = 0;
      goto LABEL_168;
    }
LABEL_138:
    std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,char const(&)[2],std::string &,int,int,float,BOOL,BOOL,BOOL>(v160, (uint64_t)&v166, (int *)&__s, (int *)&v145, (float *)&v148, (std::string::value_type *)v168, (std::string::value_type *)&v149 + 1, (std::string::value_type *)&v149);
    goto LABEL_139;
  }
LABEL_171:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext((std::string *)&buf, (uint64_t)&v157);
    v68 = SHIBYTE(buf.__end_) >= 0 ? &buf : (std::__split_buffer<std::string> *)buf.__first_;
    LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
    _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_INFO, "Neural Phonemes: %s ", (uint8_t *)&__s, 0xCu);
    if (SHIBYTE(buf.__end_) < 0)
      operator delete(buf.__first_);
  }
  Censor::global_plaintext((std::string *)&buf, (uint64_t)&v157);
  if (SHIBYTE(buf.__end_) >= 0)
    v70 = (std::__split_buffer<std::string>::pointer)&buf;
  else
    v70 = buf.__first_;
  Diagnostics::log(6, "Neural Phonemes: %s ", v69, v70);
  if (SHIBYTE(buf.__end_) < 0)
    operator delete(buf.__first_);
  v71 = (char *)operator new(0x208uLL);
  *((_QWORD *)v71 + 1) = 0;
  *((_QWORD *)v71 + 2) = 0;
  *(_QWORD *)v71 = &off_1EA9330E8;
  *(_OWORD *)(v71 + 40) = 0u;
  *(_OWORD *)(v71 + 56) = 0u;
  *(_OWORD *)(v71 + 72) = 0u;
  *(_OWORD *)(v71 + 88) = 0u;
  *(_OWORD *)(v71 + 104) = 0u;
  *(_OWORD *)(v71 + 120) = 0u;
  *(_OWORD *)(v71 + 136) = 0u;
  *(_OWORD *)(v71 + 152) = 0u;
  *(_OWORD *)(v71 + 168) = 0u;
  *(_OWORD *)(v71 + 184) = 0u;
  *(_OWORD *)(v71 + 200) = 0u;
  *(_OWORD *)(v71 + 216) = 0u;
  *(_OWORD *)(v71 + 232) = 0u;
  *(_OWORD *)(v71 + 24) = 0u;
  *(_OWORD *)(v71 + 248) = 0u;
  *(_OWORD *)(v71 + 264) = 0u;
  *(_OWORD *)(v71 + 280) = 0u;
  *(_OWORD *)(v71 + 296) = 0u;
  *(_OWORD *)(v71 + 312) = 0u;
  *(_OWORD *)(v71 + 328) = 0u;
  *(_OWORD *)(v71 + 344) = 0u;
  *(_OWORD *)(v71 + 360) = 0u;
  *((_WORD *)v71 + 12) = 257;
  *((_OWORD *)v71 + 2) = 0u;
  *((_OWORD *)v71 + 3) = 0u;
  *((_OWORD *)v71 + 4) = 0u;
  *((_OWORD *)v71 + 5) = 0u;
  *((_OWORD *)v71 + 6) = 0u;
  *((_OWORD *)v71 + 7) = 0u;
  *((_OWORD *)v71 + 8) = 0u;
  *((_OWORD *)v71 + 9) = 0u;
  *((_OWORD *)v71 + 10) = 0u;
  *((_OWORD *)v71 + 11) = 0u;
  *((_OWORD *)v71 + 12) = 0u;
  *((_OWORD *)v71 + 13) = 0u;
  *((_OWORD *)v71 + 14) = 0u;
  *((_OWORD *)v71 + 15) = 0u;
  *((_OWORD *)v71 + 16) = 0u;
  *((_OWORD *)v71 + 17) = 0u;
  *((_OWORD *)v71 + 18) = 0u;
  *((_OWORD *)v71 + 19) = 0u;
  *((_OWORD *)v71 + 20) = 0u;
  *((_OWORD *)v71 + 21) = 0u;
  *((_OWORD *)v71 + 22) = 0u;
  *(_OWORD *)(v71 + 488) = 0u;
  *(_OWORD *)(v71 + 504) = 0u;
  *(_OWORD *)(v71 + 456) = 0u;
  *(_OWORD *)(v71 + 472) = 0u;
  *(_OWORD *)(v71 + 424) = 0u;
  *(_OWORD *)(v71 + 440) = 0u;
  *(_OWORD *)(v71 + 392) = 0u;
  *(_OWORD *)(v71 + 408) = 0u;
  *(_OWORD *)(v71 + 376) = 0u;
  *(_QWORD *)&v148 = v71 + 24;
  *((_QWORD *)&v148 + 1) = v71;
  memset(&buf, 0, 24);
  v73 = v162.__begin_;
  v72 = v162.__end_;
  if (v162.__begin_ != v162.__end_)
  {
    v74 = (uint64_t **)(v142 + 272);
    do
    {
      if (v142 + 280 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v74, (const void **)&v73->__r_.__value_.__l.__data_))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v81 = v73;
          if (SHIBYTE(v73->__r_.__value_.__r.__words[2]) < 0)
            v81 = (std::vector<std::string>::pointer)v73->__r_.__value_.__r.__words[0];
          LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v81;
          _os_log_impl(&dword_1DE3F6000, v79, OS_LOG_TYPE_ERROR, "Unfound phone mapping for '%s' ", (uint8_t *)&__s, 0xCu);
        }
        v82 = v73;
        if (SHIBYTE(v73->__r_.__value_.__r.__words[2]) < 0)
          v82 = (std::vector<std::string>::pointer)v73->__r_.__value_.__r.__words[0];
        Diagnostics::log(3, "Unfound phone mapping for '%s' ", v80, v82);
      }
      else
      {
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        v75 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v74, (const void **)&v73->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
        v76 = v75;
        v77 = buf.__begin_;
        if (buf.__begin_ >= buf.__end_)
        {
          v83 = buf.__first_;
          v84 = ((char *)buf.__begin_ - (char *)buf.__first_) >> 2;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v86 = (char *)buf.__end_ - (char *)buf.__first_;
          if (((char *)buf.__end_ - (char *)buf.__first_) >> 1 > v85)
            v85 = v86 >> 1;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
            v87 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          if (v87)
          {
            v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&buf.__end_, v87);
            v77 = buf.__begin_;
            v83 = buf.__first_;
          }
          else
          {
            v88 = 0;
          }
          v89 = (std::string *)&v88[4 * v84];
          LODWORD(v89->__r_.__value_.__l.__data_) = *((_DWORD *)v76 + 14);
          v78 = (std::string *)((char *)v89->__r_.__value_.__r.__words + 4);
          while (v77 != v83)
          {
            v90 = HIDWORD(v77[-1].__r_.__value_.__r.__words[2]);
            v77 = (std::__split_buffer<std::string>::pointer)((char *)v77 - 4);
            HIDWORD(v89[-1].__r_.__value_.__r.__words[2]) = v90;
            v89 = (std::string *)((char *)v89 - 4);
          }
          buf.__first_ = v89;
          buf.__begin_ = v78;
          buf.__end_ = (std::__split_buffer<std::string>::pointer)&v88[4 * v87];
          if (v83)
            operator delete(v83);
        }
        else
        {
          LODWORD(buf.__begin_->__r_.__value_.__l.__data_) = *((_DWORD *)v75 + 14);
          v78 = (std::string *)((char *)v77->__r_.__value_.__r.__words + 4);
        }
        buf.__begin_ = v78;
      }
      ++v73;
    }
    while (v73 != v72);
  }
  __s.__r_.__value_.__r.__words[0] = v142 + 296;
  v91 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v142 + 272), (const void **)(v142 + 296), (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
  v92 = v91;
  v93 = buf.__begin_;
  if (buf.__begin_ >= buf.__end_)
  {
    v95 = buf.__first_;
    v96 = ((char *)buf.__begin_ - (char *)buf.__first_) >> 2;
    v97 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v98 = (char *)buf.__end_ - (char *)buf.__first_;
    if (((char *)buf.__end_ - (char *)buf.__first_) >> 1 > v97)
      v97 = v98 >> 1;
    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
      v99 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v99 = v97;
    if (v99)
    {
      v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&buf.__end_, v99);
      v93 = buf.__begin_;
      v95 = buf.__first_;
    }
    else
    {
      v100 = 0;
    }
    v101 = (std::string *)&v100[4 * v96];
    v102 = (std::string *)&v100[4 * v99];
    LODWORD(v101->__r_.__value_.__l.__data_) = *((_DWORD *)v92 + 14);
    v94 = (std::string *)((char *)v101->__r_.__value_.__r.__words + 4);
    while (v93 != v95)
    {
      v103 = HIDWORD(v93[-1].__r_.__value_.__r.__words[2]);
      v93 = (std::__split_buffer<std::string>::pointer)((char *)v93 - 4);
      HIDWORD(v101[-1].__r_.__value_.__r.__words[2]) = v103;
      v101 = (std::string *)((char *)v101 - 4);
    }
    buf.__first_ = v101;
    buf.__begin_ = v94;
    buf.__end_ = v102;
    if (v95)
      operator delete(v95);
  }
  else
  {
    LODWORD(buf.__begin_->__r_.__value_.__l.__data_) = *((_DWORD *)v91 + 14);
    v94 = (std::string *)((char *)v93->__r_.__value_.__r.__words + 4);
  }
  buf.__begin_ = v94;
  v104 = v148;
  v106 = (_QWORD *)(v148 + 32);
  v105 = *(void **)(v148 + 32);
  if (v105)
  {
    *(_QWORD *)(v148 + 40) = v105;
    operator delete(v105);
    *v106 = 0;
    v106[1] = 0;
    v106[2] = 0;
  }
  *(_OWORD *)(v104 + 32) = *(_OWORD *)&buf.__first_;
  *(_QWORD *)(v104 + 48) = buf.__end_;
  v107 = (_QWORD *)(v104 + 8);
  if ((std::string **)(v104 + 8) != &v159)
  {
    v109 = v159;
    v108 = v160;
    v110 = (_QWORD *)(v104 + 24);
    v111 = 0x4EC4EC4EC4EC4EC5 * (((char *)v160 - (char *)v159) >> 3);
    v112 = *(std::string **)(v104 + 8);
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v104 + 24) - (_QWORD)v112) >> 3) < v111)
    {
      std::vector<TacotronPhoneFeature>::__vdeallocate((void **)(v104 + 8));
      if (v111 > 0x276276276276276)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v113 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*v110 - *v107) >> 3);
      if (v113 <= v111)
        v113 = v111;
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v110 - *v107) >> 3)) >= 0x13B13B13B13B13BLL)
        v114 = 0x276276276276276;
      else
        v114 = v113;
      std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100]((_QWORD *)(v104 + 8), v114);
      v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v104 + 24, (uint64_t)v109, (uint64_t)v108, *(_QWORD *)(v104 + 16));
      goto LABEL_243;
    }
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v104 + 16) - (_QWORD)v112) >> 3) < v111)
    {
      v116 = (std::string *)((char *)v159 + 8 * ((uint64_t)(*(_QWORD *)(v104 + 16) - (_QWORD)v112) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(v159, v116, v112);
      v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v104 + 24, (uint64_t)v116, (uint64_t)v108, *(_QWORD *)(v104 + 16));
LABEL_243:
      *(_QWORD *)(v104 + 16) = v115;
      goto LABEL_248;
    }
    v117 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(v159, v160, v112);
    for (i = *(_QWORD *)(v104 + 16);
          (std::string *)i != v117;
          std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](i))
    {
      i -= 104;
    }
    *(_QWORD *)(v104 + 16) = v117;
  }
LABEL_248:
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
  v119 = v148;
  if (*(_QWORD *)(v148 + 40) != *(_QWORD *)(v148 + 32))
  {
    v120 = 0;
    do
    {
      v121 = (_QWORD *)std::ostream::operator<<();
      __s.__r_.__value_.__s.__data_[0] = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)&__s, 1);
      ++v120;
    }
    while (v120 < (uint64_t)(*(_QWORD *)(v119 + 40) - *(_QWORD *)(v119 + 32)) >> 2);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v122 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str();
    Censor::global_plaintext(&__s, (uint64_t)&v145);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    *(_DWORD *)v168 = 136315138;
    v169 = p_s;
    _os_log_impl(&dword_1DE3F6000, v122, OS_LOG_TYPE_INFO, "Neural phone embeddings: %s ", v168, 0xCu);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v147 < 0)
      operator delete(v145);
  }
  std::stringbuf::str();
  Censor::global_plaintext(&__s, (uint64_t)&v145);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v125 = &__s;
  else
    v125 = (std::string *)__s.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Neural phone embeddings: %s ", v124, v125);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v147 < 0)
    operator delete(v145);
  v126 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v126 + 8) = 0u;
  v127 = (unint64_t *)(v126 + 8);
  *((_OWORD *)v126 + 2) = 0u;
  *(_QWORD *)v126 = &off_1EA932198;
  *((_QWORD *)v126 + 3) = v126 + 32;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)(v126 + 24);
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v126 + 24), &v148);
  v143 = v126 + 24;
  v144 = (std::__shared_weak_count *)v126;
  do
    v128 = __ldxr(v127);
  while (__stxr(v128 + 1, v127));
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v142 + 72))(v142, &v143);
  v129 = v144;
  if (v144)
  {
    v130 = (unint64_t *)&v144->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  size = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
  if (__s.__r_.__value_.__l.__size_)
  {
    v133 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  buf.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x1E0DE4F60];
  *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + buf.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x1E0DE4F60] + 24);
  v135 = MEMORY[0x1E0DE4FB8];
  buf.__begin_ = (std::__split_buffer<std::string>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
  if (v172 < 0)
    operator delete(v171);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&v173);
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v165;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F58];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58]
                                                                                                 + 24);
  __p[0].__r_.__value_.__r.__words[2] = v135 + 16;
  if (v155 < 0)
    operator delete(v154);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&v156);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v139 = v164;
  if (v164)
  {
    v140 = (unint64_t *)&v164->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
}

void sub_1DE933248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  char a73;
  char a74;
  uint64_t v74;
  uint64_t v75;

  *(_QWORD *)(v75 + 16) = v74;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  STACK[0x230] = (unint64_t)&STACK[0x218];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  std::istringstream::~istringstream((uint64_t)&a28);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(a68);
  a28 = (void **)&a73;
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a28);
  a28 = (void **)&a74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a28);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t **std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v3 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)(a1 + 1));
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    *a1 = 0;
  return a1;
}

void sub_1DE933544(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,std::string &,std::string &,int,int,float,BOOL,BOOL,BOOL>(std::string *this, uint64_t a2, uint64_t a3, int *a4, int *a5, float *a6, std::string::value_type *a7, std::string::value_type *a8, std::string::value_type *a9)
{
  std::string __p;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  TacotronPhoneFeature::TacotronPhoneFeature(this, (__int128 *)&v17, (__int128 *)&__p, *a4, *a5, *a7, *a8, *a9, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1DE933654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,char const(&)[2],std::string &,int,int,float,BOOL,BOOL,BOOL>(std::string *a1, uint64_t a2, int *a3, int *a4, float *a5, std::string::value_type *a6, std::string::value_type *a7, std::string::value_type *a8)
{
  std::string __p;
  void *v17[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(v17, "A");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  TacotronPhoneFeature::TacotronPhoneFeature(a1, (__int128 *)v17, (__int128 *)&__p, *a3, *a4, *a6, *a7, *a8, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17[0]);
}

