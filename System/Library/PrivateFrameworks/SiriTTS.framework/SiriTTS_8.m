uint64_t msp_prepare_voice_specific_msp_luavm(uint64_t a1)
{
  uint64_t voice_specific_broker_string;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _OWORD v10[16];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  *(_QWORD *)(a1 + 176) = "runVoiceMsp";
  *(_QWORD *)(a1 + 184) = "getSupportedStylesVoiceMsp";
  voice_specific_broker_string = loc_generate_voice_specific_broker_string((uint64_t *)a1, (char *)v10, 1);
  if ((voice_specific_broker_string & 0x80000000) != 0)
    return voice_specific_broker_string;
  v3 = (_QWORD *)(a1 + 160);
  v7 = loc_prepare_luavm(a1, (uint64_t *)(a1 + 160), (char *)v10);
  if ((v7 & 0x80000000) == 0)
  {
    if (*v3)
    {
      v8 = "Voice-specific MSP data available in the package";
      goto LABEL_5;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"No voice-specific MSP data available in the package", v4, v5, v6, *(uint64_t *)&v10[0]);
    voice_specific_broker_string = loc_generate_voice_specific_broker_string((uint64_t *)a1, (char *)v10, 0);
    if ((voice_specific_broker_string & 0x80000000) == 0)
    {
      v7 = loc_prepare_luavm(a1, (uint64_t *)(a1 + 160), (char *)v10);
      if ((v7 & 0x80000000) != 0)
        return v7;
      if (!*v3)
      {
        v8 = "No voice-specific MSP data available in the stage";
        goto LABEL_6;
      }
      v8 = "Voice-specific MSP data available in the stage";
LABEL_5:
      *(_DWORD *)(a1 + 192) = 1;
LABEL_6:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)v8, v4, v5, v6, *(uint64_t *)&v10[0]);
      return v7;
    }
    return voice_specific_broker_string;
  }
  return v7;
}

uint64_t loc_generate_voice_specific_broker_string(uint64_t *a1, char *a2, int a3)
{
  uint64_t Str;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;
  char *__s;
  _OWORD v16[16];
  _OWORD v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  __s = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  Str = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  v7 = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"voice", &v14);
  if ((v7 & 0x80000000) == 0)
  {
    __strncat_chk();
    __strncat_chk();
    strlen(__s);
    __strncat_chk();
    __strncat_chk();
    v8 = v17[0];
    if (LOBYTE(v17[0]))
    {
      v9 = (unsigned __int8 *)v17 + 1;
      do
      {
        *(v9 - 1) = __tolower(v8);
        v10 = *v9++;
        v8 = v10;
      }
      while (v10);
    }
    if (a3 == 1)
    {
      v11 = *a1;
      v12 = (const char *)v16;
      v7 = brokeraux_ComposeBrokerString(v11, (const char *)v17, 0, 0, 0, 0, 0, (char *)v16, 0x100uLL);
      if ((v7 & 0x80000000) != 0)
        return v7;
    }
    else
    {
      v12 = (const char *)v17;
    }
    strcpy(a2, v12);
  }
  return v7;
}

uint64_t loc_lua_log_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"FE_MSP", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t loc_delete_style_markers(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    v6 = 0;
  }
  else
  {
    do
    {
      v5 = LDO_RemoveLabel(*(_QWORD *)(a1 + 120), *v4);
      v6 = LH_ERROR_to_VERROR(v5);
      if ((v6 & 0x80000000) != 0)
        break;
      ++v4;
    }
    while ((unint64_t)v4 < *(_QWORD *)(a2 + 16));
    v4 = *(uint64_t **)(a2 + 8);
  }
  *(_DWORD *)a2 = 0;
  if (v4)
  {
    OOCAllocator_Free(a1 + 80, (uint64_t)v4);
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = 0;
  return v6;
}

uint64_t loc_is_style_supported_by_lua(uint64_t a1, uint64_t a2, char *a3, _DWORD *a4)
{
  int BoolAttribute;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  if (!*(_QWORD *)a2)
    return 0;
  BoolAttribute = LDOObject_GetBoolAttribute(*(uint64_t **)(a2 + 8), a3, (_DWORD *)&v14 + 1, &v14);
  v10 = LH_ERROR_to_VERROR(BoolAttribute);
  if ((v10 & 0x80000000) != 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Error getting LDOObject BOOLean attribute", v7, v8, v9, v13);
  }
  else if (HIDWORD(v14) == 1 && (_DWORD)v14 == 1)
  {
    *a4 = 1;
  }
  return v10;
}

uint64_t loc_find_style_suitable_for_given_node(size_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t *v12;
  unsigned int AbsoluteFrom;
  int StringAttribute;
  uint64_t v17;

  v17 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  v3 = (_DWORD *)(a3 + 8);
  if (!a1)
    return 0;
  v7 = LDOTreeNode_ComputeAbsoluteFrom(a1, (_DWORD *)&v17 + 1);
  v8 = LH_ERROR_to_VERROR(v7);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v9 = LDOTreeNode_ComputeAbsoluteTo(a1, &v17);
  v10 = LH_ERROR_to_VERROR(v9);
  if ((v10 & 0x80000000) == 0)
  {
    for (i = *(uint64_t **)(a2 + 8); (unint64_t)i < *(_QWORD *)(a2 + 16); ++i)
    {
      v12 = (uint64_t *)*i;
      AbsoluteFrom = LDOLabel_GetAbsoluteFrom(*i);
      LDOLabel_GetAbsoluteFrom((uint64_t)v12);
      if (HIDWORD(v17) == AbsoluteFrom)
      {
        *(_DWORD *)(a3 + 12) = 1;
      }
      else if (!*(_DWORD *)(a3 + 12) && (AbsoluteFrom < HIDWORD(v17) || AbsoluteFrom > v17))
      {
        continue;
      }
      StringAttribute = LDOObject_GetStringAttribute(v12, "STRARGS", v3, (uint64_t *)a3);
      v10 = LH_ERROR_to_VERROR(StringAttribute);
      if ((v10 & 0x80000000) != 0 || *v3)
        return v10;
    }
  }
  return v10;
}

uint64_t loc_set_nlu_attribute(uint64_t a1, const char *a2, uint64_t *a3, int a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int StringAttribute;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  const char *v21;
  uint64_t v22;

  result = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if (a2)
  {
    if (a3)
    {
      v9 = PNEW_LDOString_Con(a1 + 80, a1 + 80, &v22);
      result = LH_ERROR_to_VERROR(v9);
      if ((result & 0x80000000) == 0)
      {
        v10 = LHString_Append(v22, STYLE_KEYS[a4]);
        result = LH_ERROR_to_VERROR(v10);
        if ((result & 0x80000000) == 0)
        {
          v11 = LHString_Append(v22, a2);
          result = LH_ERROR_to_VERROR(v11);
          if ((result & 0x80000000) == 0)
          {
            v12 = LHString_Append(v22, ";");
            result = LH_ERROR_to_VERROR(v12);
            if ((result & 0x80000000) == 0)
            {
              StringAttribute = LDOObject_GetStringAttribute(a3, "NLU", &v20, (uint64_t *)&v21);
              result = LH_ERROR_to_VERROR(StringAttribute);
              if ((result & 0x80000000) == 0)
              {
                if (!v20
                  || (v14 = LHString_Append(v22, v21), result = LH_ERROR_to_VERROR(v14), (result & 0x80000000) == 0))
                {
                  v15 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v22);
                  v16 = LDOObject_SetStringAttribute((uint64_t)a3, "NLU", v15);
                  result = LH_ERROR_to_VERROR(v16);
                }
              }
            }
          }
        }
      }
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = a1 + 80;
    do
    {
      v19 = OOC_PlacementDeleteObject(v18, v17);
      result = LH_ERROR_to_VERROR(v19);
      if ((result & 0x80000000) == 0)
        break;
      v17 = v22;
    }
    while (v22);
  }
  return result;
}

uint64_t tbmeg_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2686459905;
  result = 0;
  *a2 = &ITbmeg;
  return result;
}

uint64_t tbmeg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Object;
  unsigned __int16 v15;
  int UInt;
  __int16 v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v5 = 2686459911;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    if ((InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
    {
      v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 136);
      if (v10)
      {
        v11 = v10;
        *v10 = a3;
        v10[1] = a4;
        v10[4] = safeh_GetNullHandle();
        v11[5] = v12;
        v11[15] = safeh_GetNullHandle();
        v11[16] = v13;
        Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v20);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v11[6] = *(_QWORD *)(v20 + 8);
        Object = nuance_pcre_ObjOpen(a3, a4, (uint64_t)(v11 + 15));
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v15 = (int)paramc_ParamGetUInt(*(_QWORD *)(v21 + 40), (uint64_t)"ppmaxpcreframeblocks", &v19) < 0 ? 30 : v19;
        UInt = paramc_ParamGetUInt(*(_QWORD *)(v21 + 40), (uint64_t)"ppnumframesinblock", &v19);
        v17 = v19;
        if (UInt < 0)
          v17 = 50;
        Object = nuance_pcre_Init((_QWORD *)v11[15], v11[16], v15, v17);
        if ((Object & 0x80000000) != 0)
        {
LABEL_13:
          v5 = Object;
          tbmeg_pObjClose((uint64_t)v11);
        }
        else
        {
          v5 = 0;
          *a5 = (uint64_t)v11;
          *((_DWORD *)a5 + 2) = 1029;
        }
      }
      else
      {
        return 2686459914;
      }
    }
  }
  return v5;
}

uint64_t tbmeg_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 1029, 136);
  if ((result & 0x80000000) == 0)
  {
    tbmeg_ProcessEnd(a1, a2);
    return tbmeg_pObjClose((uint64_t)a1);
  }
  return result;
}

uint64_t tbmeg_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1029, 136);
  if ((result & 0x80000000) == 0)
    *a3 = tbmeg_ResourceTypes_SZ_TBMEG_CONTENT_TYPES;
  return result;
}

uint64_t tbmeg_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, const char *a5, int a6, uint64_t a7)
{
  uint64_t v7;
  const char *v10;
  const char *v11;
  uint64_t v15;
  uint64_t inited;
  uint64_t BinaryDataBroker;
  uint64_t NullHandle;
  _OWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t TextData;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  int __n[3];

  *(_QWORD *)&__n[1] = a5;
  __n[0] = a6;
  v7 = 2686459911;
  v32 = 0;
  v33 = 0;
  if (a3 && a7)
  {
    v10 = a5;
    v11 = a4;
    if (a4)
    {
      if (!a5 && a6)
        return v7;
    }
    else if (!a5 || !a6)
    {
      return v7;
    }
    v15 = safeh_HandleCheck((uint64_t)a1, a2, 1029, 136);
    if ((v15 & 0x80000000) != 0)
      return v15;
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    inited = InitRsrcFunction((_WORD *)*a1, a1[1], &v33);
    if ((inited & 0x80000000) == 0)
    {
      BinaryDataBroker = inited;
      NullHandle = safeh_GetNullHandle();
      v19 = a1 + 4;
      if (!safeh_HandlesEqual(a1[4], a1[5], NullHandle, v20))
      {
        log_OutPublic(v33[4], (uint64_t)&modInfoTbm, 67001, 0, v21, v22, v23, v24, v32);
        return 2686459928;
      }
      if (!v11 || v10)
      {
        if (v10 && a6)
          goto LABEL_26;
      }
      else if (strstr(a3, "application/x-vocalizer-pt+bin") && strstr(a3, ";loader=broker"))
      {
        BinaryDataBroker = pts_ReadBinaryDataBroker((_WORD *)*a1, a1[1], v11, a1 + 4);
        if ((BinaryDataBroker & 0x80000000) == 0)
        {
          *(_OWORD *)a7 = *v19;
          goto LABEL_33;
        }
        goto LABEL_37;
      }
      v25 = brk_DataOpenEx(v33[3], (uint64_t)v11, 0, (uint64_t)&v32);
      if ((v25 & 0x80000000) != 0)
      {
        BinaryDataBroker = v25;
        goto LABEL_37;
      }
      BinaryDataBroker = brk_DataMapEx(v33[3], v32, 0, (uint64_t)__n, (uint64_t)&__n[1]);
      if ((BinaryDataBroker & 0x80000000) != 0)
      {
LABEL_37:
        v30 = v32;
        if (*(_QWORD *)&__n[1])
        {
          brk_DataUnmap(v33[3], v32, *(uint64_t *)&__n[1]);
          v30 = v32;
        }
        if (v30)
          brk_DataClose(v33[3], v30);
        if ((BinaryDataBroker & 0x80000000) != 0)
          tbmeg_ResourceUnload((uint64_t)a1, a2, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
        return BinaryDataBroker;
      }
      v26 = (_WORD *)heap_Alloc(v33[1], __n[0]);
      a1[2] = (uint64_t)v26;
      if (!v26)
        return 2686459914;
      memcpy(v26, *(const void **)&__n[1], __n[0]);
      v10 = (const char *)a1[2];
      *(_QWORD *)&__n[1] = v10;
LABEL_26:
      if (strstr(a3, "application/x-vocalizer-pt+text"))
      {
        TextData = pts_ReadTextData((_WORD *)*a1, a1[1], v10, __n[0], a1 + 4, 0, 0);
      }
      else
      {
        if (!strstr(a3, "application/x-vocalizer-pt+bin"))
          goto LABEL_32;
        TextData = pts_ReadBinaryDataBuffer((_WORD *)*a1, a1[1], (uint64_t)v10, __n[0], a1 + 4);
      }
      BinaryDataBroker = TextData;
      if ((TextData & 0x80000000) != 0)
        goto LABEL_37;
LABEL_32:
      *(_OWORD *)a7 = *v19;
      if (!v11)
      {
LABEL_34:
        v11 = "in-memory PTS";
LABEL_35:
        v28 = strlen(v11);
        v29 = (char *)heap_Alloc(v33[1], (v28 + 1));
        a1[3] = (uint64_t)v29;
        if (v29)
        {
          strcpy(v29, v11);
          logLoadTemplateSet((uint64_t)v33);
          goto LABEL_37;
        }
        return 2686459914;
      }
LABEL_33:
      if (*v11)
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  return v7;
}

uint64_t tbmeg_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NullHandle;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = 0;
  v6 = pts_HandleCheck(a3, a4);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v6 = safeh_HandleCheck(a1, a2, 1029, 136);
  if ((v6 & 0x80000000) != 0)
    return v6;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v21);
  if ((inited & 0x80000000) != 0)
    return 2686459911;
  v8 = inited;
  v9 = v21;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v21 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(v9 + 32), 701, (uint64_t)"%s%s %s%s", v10, v11, v12, v13, v14, "BEG");
  NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), NullHandle, v16))
  {
    pts_Free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    *(_QWORD *)(a1 + 32) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 40) = v17;
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (v18)
  {
    heap_Free(*(_QWORD **)(v21 + 8), v18);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    heap_Free(*(_QWORD **)(v21 + 8), v19);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v8;
}

uint64_t tbmeg_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v8 = 2686459911;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1029, 136) & 0x80000000) != 0)
    return 2686459912;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v16) & 0x80000000) == 0)
  {
    a1[7] = a3;
    a1[8] = a4;
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual((uint64_t)a1[4], (int)a1[5], NullHandle, v10))
    {
      v12 = 0;
      do
      {
        v13 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, _QWORD, _QWORD, _WORD **))a1[6] + 8))(a3, a4, 514, tbmeg_ProcessStart_szInput[v12], 0, 0, a1 + 13);
        if ((v13 & 0x80000000) == 0)
          break;
      }
      while (v12++ != 6);
      if (v13 < 0)
        a1[13] = 0;
      v15 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, _QWORD, _WORD **))a1[6] + 8))(a3, a4, 514, "text/plain;charset=utf-8",
              0,
              0,
              a1 + 9);
      if ((v15 & 0x80000000) != 0)
      {
        v8 = v15;
      }
      else
      {
        v8 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, uint64_t, _WORD **))a1[6] + 8))(a3, a4, 514, "text/plain;charset=utf-8",
               0,
               1,
               a1 + 11);
        if ((v8 & 0x80000000) == 0)
          return v8;
      }
      tbmeg_ProcessEnd(a1, a2);
      return v8;
    }
    return 0;
  }
  return v8;
}

uint64_t tbmeg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  uint64_t NullHandle;
  int v29;
  char *v30;
  char *v31;
  size_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  size_t __n;
  void *__dst;
  char *__s;
  char *__s1;
  uint64_t v42;

  v42 = 0;
  __s = 0;
  __s1 = 0;
  __n = 0;
  __dst = 0;
  v7 = safeh_HandleCheck(a1, a2, 1029, 136);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2686459911;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v42) & 0x80000000) == 0)
  {
    if (!*(_QWORD *)(a1 + 72) || !*(_QWORD *)(a1 + 88))
    {
      v8 = 0;
LABEL_20:
      v9 = 1;
LABEL_21:
      *a5 = v9;
      return v8;
    }
    *a5 = 0;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t *))(*(_QWORD *)(a1 + 48) + 144))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (char *)&__n + 4, &__n);
    if ((v7 & 0x80000000) == 0)
    {
      v9 = __n;
      if (!(_DWORD)__n)
      {
        v8 = 0;
        goto LABEL_21;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 48) + 88))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), &__s1, (char *)&__n + 4);
      if ((v7 & 0x80000000) == 0)
      {
        v10 = v42;
        v11 = __s1;
        v12 = HIDWORD(__n);
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v42 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v10 + 32), 702, (uint64_t)"%s%s", v13, v14, v15, v16, v17, "BEG");
          log_OutTraceTuningDataBinary(*(_QWORD *)(v10 + 32), 703, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)v11,
            v12);
        }
        v18 = HIDWORD(__n);
        if (HIDWORD(__n) >= 3 && !strncmp(__s1, "﻿", 3uLL))
        {
          v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 3);
          if ((v19 & 0x80000000) != 0)
          {
            v35 = v19;
            v26 = 0;
            goto LABEL_38;
          }
          v18 = HIDWORD(__n) - 3;
          HIDWORD(__n) -= 3;
          __s1 += 3;
        }
        v25 = (char *)heap_Alloc(*(_QWORD *)(v42 + 8), (v18 + 1));
        if (!v25)
          return 2686459914;
        v26 = v25;
        memcpy(v25, __s1, HIDWORD(__n));
        v26[HIDWORD(__n)] = 0;
        v27 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIDWORD(__n));
        if ((v27 & 0x80000000) != 0)
          goto LABEL_37;
        __s1 = 0;
        NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), NullHandle, v29))
        {
          v30 = 0;
          __s = v26;
          v31 = v26;
        }
        else
        {
          pts_Apply(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128), v26, (uint64_t *)&__s);
          v31 = __s;
          v30 = v26;
          if (!__s)
            goto LABEL_31;
        }
        v33 = strlen(v31);
        if ((_DWORD)v33)
        {
          v34 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(*(_QWORD *)(a1 + 48) + 112))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &__dst, v33);
          if ((v34 & 0x80000000) == 0)
          {
            if (__s)
              memcpy(__dst, __s, v33);
            logProcessOutput(v42, (uint64_t)__dst, v33);
            v26 = v30;
            goto LABEL_36;
          }
          v35 = v34;
          v26 = v30;
LABEL_38:
          log_OutTraceTuningData(*(uint64_t ***)(v42 + 32), 4, (uint64_t)"%s%s %s%u", v20, v21, v22, v23, v24, "END");
          if (v26)
            heap_Free(*(_QWORD **)(v42 + 8), (uint64_t)v26);
          if (__s)
            heap_Free(*(_QWORD **)(v42 + 8), (uint64_t)__s);
          v36 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 72))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
          if (v36 >= 0)
            v8 = v35;
          else
            v8 = v36;
          *(_QWORD *)(a1 + 88) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 96) = v37;
          goto LABEL_20;
        }
        v26 = v30;
LABEL_31:
        v27 = (*(uint64_t (**)(_QWORD, _QWORD, void **, uint64_t))(*(_QWORD *)(a1 + 48) + 112))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &__dst, 1);
        if ((v27 & 0x80000000) != 0)
        {
LABEL_37:
          v35 = v27;
          goto LABEL_38;
        }
        *(_BYTE *)__dst = 0;
        v33 = 1;
LABEL_36:
        v27 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 48) + 120))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v33);
        goto LABEL_37;
      }
    }
    return v7;
  }
  return v8;
}

uint64_t tbmeg_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 1029, 136);
  if ((v3 & 0x80000000) == 0)
  {
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[13], a1[14], NullHandle, v5))
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 72))(a1[13], a1[14]);
      if (v6 >= 0)
        v3 = v3;
      else
        v3 = v6;
    }
    a1[13] = safeh_GetNullHandle();
    a1[14] = v7;
    v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[9], a1[10], v8, v9))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 72))(a1[9], a1[10]);
      if (v10 >= 0)
        v3 = v3;
      else
        v3 = v10;
    }
    a1[9] = safeh_GetNullHandle();
    a1[10] = v11;
    v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[11], a1[12], v12, v13))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 72))(a1[11], a1[12]);
      if (v14 >= 0)
        v3 = v3;
      else
        v3 = v14;
    }
    a1[11] = safeh_GetNullHandle();
    a1[12] = v15;
  }
  return v3;
}

uint64_t tbmeg_pObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = 2686459911;
  v10 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      heap_Free(*(_QWORD **)(v10 + 8), v3);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (*(_QWORD *)(a1 + 48))
      objc_ReleaseObject(*(_QWORD *)(v10 + 48), (uint64_t)"SYNTHSTREAM");
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), NullHandle, v5))
    {
      pts_Free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = safeh_GetNullHandle();
      *(_QWORD *)(a1 + 40) = v6;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      heap_Free(*(_QWORD **)(v10 + 8), v7);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = nuance_pcre_DeInit(*(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128));
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = nuance_pcre_ObjClose(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      heap_Free(*(_QWORD **)(v10 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t logLoadTemplateSet(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
    return log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 700, (uint64_t)"%s%s %s%s %s%s", v3, v4, v5, v6, v7, "BEG");
  return result;
}

uint64_t logProcessOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    log_OutTraceTuningDataBinary(*(_QWORD *)(a1 + 32), 704, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
      a2,
      a3);
    return log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 702, (uint64_t)"%s%s", v7, v8, v9, v10, v11, "END");
  }
  return result;
}

uint64_t pts_strclone(uint64_t a1, char **a2, char *__s)
{
  uint64_t v3;
  size_t v7;
  char *v8;

  v3 = 2686459911;
  if (a2)
  {
    v7 = strlen(__s);
    v8 = (char *)heap_Alloc(a1, v7 + 1);
    *a2 = v8;
    if (v8)
    {
      strcpy(v8, __s);
      return 0;
    }
    else
    {
      return 2686459914;
    }
  }
  return v3;
}

uint64_t numberOfOccurrences(char *a1, char *__s)
{
  size_t v4;
  char *v5;
  uint64_t v6;

  if (!__s)
    return 0;
  v4 = strlen(__s);
  v5 = strstr(a1, __s);
  if (!v5)
    return 0;
  v6 = 0;
  do
  {
    ++v6;
    v5 = strstr(&v5[v4], __s);
  }
  while (v5);
  return v6;
}

uint64_t fillInSlots(uint64_t a1, char *a2, char *a3, unint64_t a4, int a5, char *a6, unint64_t a7, const char **a8)
{
  uint64_t appended;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  _BYTE *v21;
  int64_t v22;
  _QWORD **v23;
  int v24;
  int v25;
  unint64_t v26;
  _BYTE *v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  _QWORD **v37;
  _QWORD **v38;
  char *v39;
  unint64_t v40;
  uint64_t TnSequence;
  size_t v42;
  char *v43;
  const char *v44;
  const char **v45;
  const char *v46;
  unint64_t v48;
  _QWORD *v49;
  _BOOL4 v50;
  BOOL v51;
  uint64_t v52;
  const char **v54;
  _QWORD **v55;
  _QWORD **v56;
  _QWORD **v57;
  _QWORD **v58;

  v55 = 0;
  v56 = 0;
  if (a7)
    *(_QWORD *)a7 = 0;
  if (a6)
    *a6 = 0;
  appended = ssftstring_ObjOpen(*(_QWORD **)(a1 + 8), &v56);
  if ((appended & 0x80000000) != 0)
  {
LABEL_77:
    v16 = appended;
    goto LABEL_90;
  }
  v16 = ssftstring_ObjOpen(*(_QWORD **)(a1 + 8), &v55);
  if ((v16 & 0x80000000) != 0)
    goto LABEL_90;
  v52 = a1;
  v49 = (_QWORD *)a7;
  v17 = strchr(a2, 36);
  if (!v17)
  {
    v19 = 0;
    if (a6)
      goto LABEL_74;
    goto LABEL_75;
  }
  v18 = v17;
  v48 = a4;
  v19 = 0;
  if ((unint64_t)a6 | a7)
    v20 = 1;
  else
    v20 = a8 == 0;
  v50 = ((unint64_t)a6 | a7) != 0;
  v51 = v20;
  v54 = a8;
  do
  {
    v21 = v18 + 1;
    if (!v18[1])
    {
      if (a8)
        *a8 = "use '$$' for literal dollar";
      goto LABEL_89;
    }
    v22 = v18 - a2;
    if (a6)
    {
      memcpy(&a6[v19], a2, v18 - a2);
      a6[v19 + v22] = 0;
      v19 += v22;
      if (*v21 == 36)
      {
        *(_WORD *)&a6[strlen(a6)] = 36;
LABEL_17:
        ++v19;
        a2 = v18 + 2;
        goto LABEL_72;
      }
    }
    else
    {
      v19 += v22;
      if (v18[1] == 36)
        goto LABEL_17;
    }
    v23 = v56;
    appended = ssftstring_Clear((uint64_t)v56);
    if ((appended & 0x80000000) != 0)
      goto LABEL_77;
    if (a8)
      *a8 = 0;
    v24 = *v21;
    v25 = v24;
    if (v24 == 123)
    {
      v25 = v18[2];
      v21 = v18 + 2;
    }
    if (v25)
    {
      v26 = 0;
      v27 = v21;
      while (1)
      {
        v28 = (char)v25;
        if (!memchr("0123456789", (char)v25, 0xBuLL))
          break;
        v29 = 10 * v26 + v28 - 48;
        if (v29 < v26)
        {
          v29 = 0;
          v31 = 0;
          v32 = "slot number a lot too big";
          goto LABEL_36;
        }
        v30 = *++v27;
        LOBYTE(v25) = v30;
        v26 = 10 * v26 + v28 - 48;
        if (!v30)
          goto LABEL_31;
      }
      v29 = v26;
LABEL_31:
      v31 = v27 - v21;
      v33 = v52;
      if (v51)
        goto LABEL_41;
      v34 = &byte_1DEBD87CE;
      *v54 = &byte_1DEBD87CE;
      if (v29)
      {
        v32 = "slot number too big";
        if (v29 > v48)
          goto LABEL_39;
      }
      else
      {
        v32 = "invalid slot number";
LABEL_39:
        *v54 = v32;
        v34 = (char *)v32;
      }
      if (*v34)
        goto LABEL_89;
      goto LABEL_41;
    }
    v29 = 0;
    v31 = 0;
    v32 = "invalid slot number";
LABEL_36:
    v33 = v52;
    if (!v51)
      goto LABEL_39;
LABEL_41:
    a2 = &v21[v31];
    if (v24 == 123)
    {
      if (*a2 != 58)
      {
        v45 = v54;
        if (v54)
        {
          v46 = "bad slot reference: ':' expected";
          goto LABEL_88;
        }
        goto LABEL_89;
      }
      v35 = strchr(a2 + 1, 125);
      if (!v35)
      {
        v45 = v54;
        if (v54)
        {
          v46 = "bad slot reference: '}' expected";
          goto LABEL_88;
        }
LABEL_89:
        v16 = 2686459908;
        goto LABEL_90;
      }
      v36 = v35;
      appended = ssftstring_AppendCStrN((uint64_t)v23, a2 + 1, (int)v35 - ((int)a2 + 1));
      if ((appended & 0x80000000) != 0)
        goto LABEL_77;
      a2 = v36 + 1;
    }
    if (!a5 && ssftstring_Size((uint64_t)v56))
    {
      v45 = v54;
      if (v54)
      {
        v46 = "slot type mapping not allowed";
LABEL_88:
        *v45 = v46;
      }
      goto LABEL_89;
    }
    if (v50)
    {
      v37 = v55;
      v38 = v56;
      v57 = 0;
      v58 = 0;
      v39 = a3;
      if (v29 >= 2)
      {
        v40 = v29 - 1;
        v39 = a3;
        do
        {
          v39 += strlen(v39) + 1;
          if (a5)
            v39 += strlen(v39) + 1;
          --v40;
        }
        while (v40);
      }
      v16 = ssftstring_AssignCStr((uint64_t)v55, v39);
      if ((v16 & 0x80000000) != 0)
      {
        a8 = v54;
      }
      else
      {
        a8 = v54;
        if (ssftstring_Size((uint64_t)v38))
        {
          TnSequence = ssftstring_ObjOpen(*(_QWORD **)(v33 + 8), &v58);
          if ((TnSequence & 0x80000000) == 0)
          {
            TnSequence = ssftstring_ObjOpen(*(_QWORD **)(v33 + 8), &v57);
            if ((TnSequence & 0x80000000) == 0)
            {
              v42 = strlen(v39);
              TnSequence = makeTnSequence(&v39[v42 + 1], (uint64_t)v58);
              if ((TnSequence & 0x80000000) == 0)
              {
                v43 = (char *)ssftstring_CStr((uint64_t)v38);
                TnSequence = makeTnSequence(v43, (uint64_t)v57);
                if ((TnSequence & 0x80000000) == 0)
                  TnSequence = ssftstring_ReplaceAllBy((uint64_t)v37, (uint64_t)v58, (uint64_t)v57);
              }
            }
          }
          v16 = TnSequence;
        }
      }
      if (v58)
        ssftstring_ObjClose(v58);
      if (v57)
        ssftstring_ObjClose(v57);
      if ((v16 & 0x80000000) != 0)
        goto LABEL_90;
      if (a6)
      {
        v44 = (const char *)ssftstring_CStr((uint64_t)v55);
        strcat(a6, v44);
      }
      v19 += ssftstring_Size((uint64_t)v55);
    }
    else
    {
      v16 = 0;
      a8 = v54;
    }
LABEL_72:
    v18 = strchr(a2, 36);
  }
  while (v18);
  if (!a6)
    goto LABEL_75;
LABEL_74:
  strcat(a6, a2);
LABEL_75:
  if (v49)
    *v49 = v19 + strlen(a2) + 1;
LABEL_90:
  if (v56)
    ssftstring_ObjClose(v56);
  if (v55)
    ssftstring_ObjClose(v55);
  return v16;
}

uint64_t pts_CheckDataConsistency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a1 + 56))
    {
      if (*(_QWORD *)(a1 + 80))
      {
        v9 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)(a1 + 64))
        {
          if (v9)
          {
            if (*(_QWORD *)(a1 + 88) || !*(_DWORD *)(a1 + 96))
            {
              v10 = 2686459922;
              v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
              v12 = "Suspiciously initialized inputs";
            }
            else
            {
              if (!*(_QWORD *)(a1 + 104) && *(_DWORD *)(a1 + 112))
              {
                if (!*(_QWORD *)(a1 + 120))
                {
                  v10 = 2686459922;
                  v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                  v12 = "Uninitialized input cache";
                  goto LABEL_24;
                }
                return 0;
              }
              v10 = 2686459922;
              v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
              v12 = "Suspiciously initialized outputs";
            }
          }
          else
          {
            v10 = 2686459922;
            v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v12 = "Missing handle on input offsets";
          }
        }
        else
        {
          if (v9)
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&modInfoTBM, 1, 0, (uint64_t)"Suspiciously defined handle on input offsets", a6, a7, a8, v14);
          if (*(_QWORD *)(a1 + 88) && !*(_DWORD *)(a1 + 96))
          {
            if (*(_QWORD *)(a1 + 104) && !*(_DWORD *)(a1 + 112))
            {
              if (*(_QWORD *)(a1 + 120) || *(_BYTE *)(a1 + 128))
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&modInfoTBM, 1, 0, (uint64_t)"Suspiciously configured input cache", a6, a7, a8, v14);
              return 0;
            }
            v10 = 2686459922;
            v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v12 = "uninitialized outputs";
          }
          else
          {
            v10 = 2686459922;
            v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v12 = "uninitialized inputs";
          }
        }
      }
      else
      {
        v10 = 2686459922;
        v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v12 = "uninitialized input offsets";
      }
    }
    else
    {
      v10 = 2686459922;
      v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v12 = "unknown number of bytes of output sizes";
    }
  }
  else
  {
    v10 = 2686459922;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = "unknown number of bytes per output offset";
  }
LABEL_24:
  log_OutText(v11, (uint64_t)&modInfoTBM, 0, 0, (uint64_t)v12, a6, a7, a8, v14);
  return v10;
}

uint64_t pts_HandleCheck(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 1060, 144);
}

uint64_t pts_SetFormat(uint64_t a1, char *__s1)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    if (!strcmp(__s1, "Binary Template 1.0"))
      return pts_strclone(*(_QWORD *)(*(_QWORD *)a1 + 8), (char **)(a1 + 8), __s1);
    if (!strcmp(__s1, "Binary Template 2.0"))
    {
      *(_DWORD *)(a1 + 32) = 1;
      return pts_strclone(*(_QWORD *)(*(_QWORD *)a1 + 8), (char **)(a1 + 8), __s1);
    }
    if (!strcmp(__s1, "Binary Template 2.1"))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&modInfoTBM, 0, 0, (uint64_t)"'%s' not supported anymore", v4, v5, v6, (uint64_t)"Binary Template 2.1");
    }
    else if (!strcmp(__s1, "Binary Template 2.2"))
    {
      *(_QWORD *)(a1 + 32) = 0x100000001;
      return pts_strclone(*(_QWORD *)(*(_QWORD *)a1 + 8), (char **)(a1 + 8), __s1);
    }
  }
  return 2686459911;
}

uint64_t pts_ReadBinaryDataBroker(_WORD *a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v30 = 0;
  v31 = 0;
  v4 = 2686459911;
  v29 = 0;
  if (!a3 || !a4 || (InitRsrcFunction(a1, a2, &v30) & 0x80000000) != 0)
    return v4;
  *a4 = safeh_GetNullHandle();
  a4[1] = v9;
  v10 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "PT10", 131846, (uint64_t *)&v29);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_10;
  v10 = pts_ReadBinaryData(v30, (uint64_t)v29, 0, &v31);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_10;
  v18 = v31;
  v10 = brk_DataOpen(*(_QWORD *)(v30 + 24));
  if ((v10 & 0x80000000) != 0)
    goto LABEL_10;
  if (!*(_QWORD *)(v18 + 88))
  {
    v22 = *(_BYTE *)(v18 + 128);
    if (v22)
    {
      v23 = *(_QWORD *)(v18 + 40);
      while (!(v23 >> (v22 - 1)))
      {
        *(_BYTE *)(v18 + 128) = --v22;
        if (!v22)
        {
          v22 = 0;
          break;
        }
      }
    }
    v24 = heap_Calloc(*(_QWORD **)(v30 + 8), 1 << v22, 8);
    *(_QWORD *)(v18 + 120) = v24;
    if (!v24)
      return 2686459914;
    v25 = *(_BYTE *)(v18 + 128);
    if (v25)
    {
      v33 = 0;
      v34 = 0;
      v26 = 1 << v25;
      v32 = 0;
      v27 = (unint64_t)(1 << v25) >> 1;
      do
      {
        v28 = pts_BinSearch(v18, 0, v27, &v34, &v33, &v32);
        v4 = v28;
        if ((v28 & 0x80000000) != 0)
          break;
        ++v27;
      }
      while (v27 < v26);
      if ((v28 & 0x80000000) != 0)
        goto LABEL_11;
    }
  }
  v10 = pts_CheckDataConsistency(v18, v11, v12, v13, v14, v15, v16, v17);
  if ((v10 & 0x80000000) != 0)
  {
LABEL_10:
    v4 = v10;
  }
  else
  {
    v4 = 0;
    *a4 = v18;
    *((_DWORD *)a4 + 2) = 1060;
  }
LABEL_11:
  if (v29)
  {
    v19 = ssftriff_reader_ObjClose(v29, v11, v12, v13, v14, v15, v16, v17);
    if (v19 >= 0 || (int)v4 <= -1)
      return v4;
    else
      return v19;
  }
  return v4;
}

uint64_t pts_ReadBinaryData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ChunkData;
  char *v21;
  uint64_t v22;
  char **v23;
  unsigned int v24;
  unsigned int Position;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  char *__s;
  unsigned int v34;
  int v35;
  unsigned __int8 v36;

  v36 = 0;
  v34 = 0;
  v35 = 0;
  __s = 0;
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 144);
  *a4 = v8;
  if (!v8)
    return 2686459914;
  v13 = v8;
  *(_QWORD *)v8 = a1;
  *(_DWORD *)(v8 + 116) = 0;
  v14 = ssftriff_reader_OpenChunk(a2, &v35, &v34, 0, v9, v10, v11, v12);
  if ((v14 & 0x80000000) == 0)
  {
    v32 = (_QWORD *)(v13 + 80);
    do
    {
      if (v35 ^ 0x45485450 | v36)
      {
        if (v35 ^ 0x464F5450 | v36)
        {
          if (v35 ^ 0x50495450 | v36)
          {
            if (v35 ^ 0x504F5450 | v36)
            {
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)&modInfoTBM, 4, 0, (uint64_t)"pts_ReadBinaryData unknown chunk type: '%s'", v17, v18, v19, (uint64_t)&v35);
            }
            else
            {
              Position = ssftriff_reader_GetPosition(a2);
              if (a3)
                *(_QWORD *)(v13 + 104) = a3 + Position;
              else
                *(_DWORD *)(v13 + 112) = Position;
            }
          }
          else
          {
            v24 = ssftriff_reader_GetPosition(a2);
            if (a3)
              *(_QWORD *)(v13 + 88) = a3 + v24;
            else
              *(_DWORD *)(v13 + 96) = v24;
          }
        }
        else if (v34 >= 4)
        {
          *(_QWORD *)(v13 + 40) = ((unint64_t)v34 >> 2) - 1;
          if (a3)
          {
            *v32 = a3 + ssftriff_reader_GetPosition(a2);
          }
          else
          {
            ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v13 + 72), v32, v15, v16, v17, v18, v19);
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_35;
          }
        }
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, v34, &__s, v15, v16, v17, v18, v19);
        if ((ChunkData & 0x80000000) != 0
          || (ChunkData = pts_SetFormat(v13, __s), (ChunkData & 0x80000000) != 0)
          || (__s += strlen(__s) + 1,
              ChunkData = pts_strclone(*(_QWORD *)(a1 + 8), (char **)(v13 + 16), __s),
              (ChunkData & 0x80000000) != 0))
        {
LABEL_35:
          v30 = ChunkData;
          goto LABEL_36;
        }
        v21 = &__s[strlen(*(const char **)(v13 + 16)) + 1];
        __s = v21;
        v22 = *(_QWORD *)(a1 + 8);
        v23 = (char **)(v13 + 24);
        if (*(_DWORD *)(v13 + 32))
        {
          ChunkData = pts_strclone(v22, v23, v21);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_35;
          __s += strlen(*(const char **)(v13 + 24)) + 1;
        }
        else
        {
          ChunkData = pts_strclone(v22, v23, "<>");
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_35;
        }
        *(_OWORD *)(v13 + 48) = xmmword_1DECB90C0;
        if (a3)
          *(_BYTE *)(v13 + 128) = 0;
        else
          *(_BYTE *)(v13 + 128) = 8;
      }
      ChunkData = ssftriff_reader_CloseChunk(a2);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_35;
      v14 = ssftriff_reader_OpenChunk(a2, &v35, &v34, 0, v26, v27, v28, v29);
    }
    while ((v14 & 0x80000000) == 0);
  }
  v30 = v14;
  if ((v14 & 0x1FFF) == 0x14)
    return 0;
LABEL_36:
  if (*a4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), *a4);
    *a4 = 0;
  }
  return v30;
}

uint64_t pts_ReadBinaryDataBuffer(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  v5 = 2686459911;
  v24 = 0;
  if (a4)
  {
    if (a3)
    {
      if (a5)
      {
        v8 = a4;
        if ((InitRsrcFunction(a1, a2, &v25) & 0x80000000) == 0)
        {
          *a5 = safeh_GetNullHandle();
          a5[1] = v11;
          v12 = ssftriff_reader_ObjOpenEx(a1, a2, 4, "PromptTemplate in RAM", a3, v8, "PT10", 131846, (uint64_t *)&v24);
          if ((v12 & 0x80000000) != 0
            || (v12 = pts_ReadBinaryData(v25, (uint64_t)v24, a3, &v26), (v12 & 0x80000000) != 0)
            || (v20 = v26,
                v12 = pts_CheckDataConsistency(v26, v13, v14, v15, v16, v17, v18, v19),
                (v12 & 0x80000000) != 0))
          {
            v5 = v12;
          }
          else
          {
            v5 = 0;
            *a5 = v20;
            *((_DWORD *)a5 + 2) = 1060;
          }
          if (v24)
          {
            v21 = ssftriff_reader_ObjClose(v24, v13, v14, v15, v16, v17, v18, v19);
            if (v21 >= 0 || (int)v5 <= -1)
              return v5;
            else
              return v21;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t pts_Free(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8);
    if (v10)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      heap_Free(v11, v12);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      heap_Free(v11, v13);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v14 = *(_QWORD **)(a1 + 72);
    if (v14)
    {
      v9 = ssftriff_reader_ReleaseChunkData(v14, v13, v3, v4, v5, v6, v7, v8);
      *(_QWORD *)(a1 + 72) = 0;
    }
    else if (*(_DWORD *)(a1 + 116))
    {
      v15 = *(_QWORD *)(a1 + 80);
      if (v15)
        heap_Free(v11, v15);
    }
    *(_QWORD *)(a1 + 80) = 0;
    if (*(_DWORD *)(a1 + 116))
    {
      v16 = *(_QWORD *)(a1 + 88);
      if (v16)
        heap_Free(v11, v16);
    }
    *(_QWORD *)(a1 + 88) = 0;
    if (*(_QWORD *)(a1 + 120))
    {
      v17 = 0;
      do
        heap_Free(v11, *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v17++));
      while (!(v17 >> *(_BYTE *)(a1 + 128)));
      heap_Free(v11, *(_QWORD *)(a1 + 120));
      *(_QWORD *)(a1 + 120) = 0;
    }
    if (*(_DWORD *)(a1 + 116))
    {
      v18 = *(_QWORD *)(a1 + 104);
      if (v18)
        heap_Free(v11, v18);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      brk_DataClose(*(_QWORD *)(*(_QWORD *)a1 + 24), v19);
      *(_QWORD *)(a1 + 64) = 0;
    }
    heap_Free(v11, a1);
  }
  return v9;
}

uint64_t pts_MatchSlots(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, _QWORD *a7)
{
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;

  if (a4)
  {
    v7 = a5;
    v16 = a7;
    v17 = a6;
    v10 = 0;
    v11 = 0;
    v18 = a1;
    while (v7)
    {
      v12 = 0;
      v13 = *(_DWORD *)(a1 + 36);
      v14 = 1;
      do
      {
        if (*(_BYTE *)(a3 + v10))
        {
          if (!strcmp((const char *)(a3 + v10), (const char *)(a2 + v12)))
            v14 = v14;
          else
            v14 = 0;
        }
        v12 += strlen((const char *)(a2 + v12)) + 1;
        v10 += strlen((const char *)(a3 + v10)) + 1;
        if (v13)
        {
          if (strcmp((const char *)(a3 + v10), "*"))
          {
            if (!strcmp((const char *)(a3 + v10), (const char *)(a2 + v12)))
              v14 = v14;
            else
              v14 = 0;
          }
          v10 += strlen((const char *)(a3 + v10)) + 1;
          v12 += strlen((const char *)(a2 + v12)) + 1;
        }
        --v7;
      }
      while (v7);
      if ((_DWORD)v14)
        goto LABEL_22;
      a1 = v18;
      v7 = a5;
      v10 += *(_QWORD *)(v18 + 48) + *(_QWORD *)(v18 + 56);
      ++v11;
      if (v10 >= a4)
      {
        v14 = 0;
        goto LABEL_22;
      }
    }
    v14 = 1;
LABEL_22:
    a7 = v16;
    a6 = v17;
    if (v16)
      goto LABEL_23;
  }
  else
  {
    v14 = 0;
    v11 = 0;
    v10 = 0;
    if (a7)
LABEL_23:
      *a7 = v11;
  }
  if (a6)
    *a6 = v10;
  return v14;
}

uint64_t pts_Apply(uint64_t a1, int a2, _WORD *a3, int a4, _QWORD *a5, int a6, char *a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t Markup;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  size_t v37;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  char v57;
  unint64_t v58;
  int v59;
  char *__s;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int matched;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  size_t v73;
  char *v74;
  char *v75[2];

  v63 = 0;
  v64 = 0;
  v61 = 0;
  v16 = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v17 = 2686459911;
  if (a7 && a8)
  {
    v66 = 0;
    matched = 0;
    v62 = 0;
    v18 = safeh_HandleCheck(a1, a2, 1060, 144);
    if ((v18 & 0x80000000) != 0)
    {
      v17 = v18;
      goto LABEL_40;
    }
    v53 = a8;
    __s = *(char **)(a1 + 24);
    v59 = *(_DWORD *)(a1 + 36);
    v74 = 0;
    v75[0] = 0;
    v72 = 0;
    v73 = 0;
    v70 = 0;
    v71 = 0;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    v19 = 0;
    if ((InitRsrcFunction(a3, a4, &v67) & 0x80000000) != 0)
    {
      v20 = 0;
      goto LABEL_36;
    }
    v20 = 0;
    if (!v67)
      goto LABEL_36;
    v54 = a7;
    v55 = 0;
    v20 = 0;
    v58 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
LABEL_8:
    v57 = v23;
    if ((v23 & 1) != 0)
    {
      v19 = heap_Calloc(*(_QWORD **)(v67 + 8), v22, 1);
      if (!v19)
        goto LABEL_70;
      v20 = (char *)heap_Calloc(*(_QWORD **)(v67 + 8), v21 + 1, 1);
      if (!v20)
        goto LABEL_70;
      v55 = (char *)v19;
      v22 = 0;
      v21 = 0;
    }
    Markup = findMarkup("slotbegin", a3, a4, a5, a6, v54, v75, &v74, &v73, &v72);
    if ((Markup & 0x80000000) != 0)
    {
      v17 = Markup;
      v19 = (uint64_t)v55;
      goto LABEL_36;
    }
    v56 = v20;
    v25 = v54;
    v26 = v57;
    while (1)
    {
      if (!v72)
      {
        v37 = strlen(v25) + 1;
        if ((v26 & 1) == 0)
        {
          v22 += v37;
          v23 = 1;
          v20 = v56;
          goto LABEL_8;
        }
        v39 = &v55[v22];
        memcpy(v39, v25, v37);
        v40 = &v39[v37];
        v19 = (uint64_t)v55;
        *(v40 - 1) = 0;
        if (v58 != numberOfOccurrences(v55, __s))
          *v55 = 0;
        replaceSubstr(v55);
        v17 = pts_BinSearch(a1, v55, 0, &v63, &v61, &matched);
        v20 = v56;
        if ((v17 & 0x80000000) != 0)
          goto LABEL_37;
        if (matched)
        {
          v41 = v63;
          matched = pts_MatchSlots(a1, (uint64_t)v56, v63, v61, v58, &v62, 0);
          if (matched)
          {
            v42 = v41 + v62;
            v43 = *(_QWORD *)(a1 + 48);
            if (v43)
            {
              v44 = 0;
              v45 = *(_QWORD *)(a1 + 48);
              do
                v44 = *(unsigned __int8 *)(v42 - 1 + v45--) | (v44 << 8);
              while (v45);
            }
            else
            {
              v44 = 0;
            }
            v46 = *(_QWORD *)(a1 + 104);
            if (v46)
            {
              v64 = (char *)(v46 + v44);
              goto LABEL_57;
            }
            v48 = *(_QWORD *)(a1 + 56);
            if (v48)
            {
              LODWORD(v49) = 0;
              v50 = v42 + v43;
              do
                v49 = *(unsigned __int8 *)(v50 + v48-- - 1) | ((_DWORD)v49 << 8);
              while (v48);
            }
            else
            {
              v49 = 0;
            }
            v17 = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (*(_DWORD *)(a1 + 112) + v44), v49, (uint64_t)&v64);
            if ((v17 & 0x80000000) != 0)
            {
              v20 = v56;
            }
            else
            {
              if (!matched)
                goto LABEL_66;
LABEL_57:
              v20 = v56;
              v17 = fillInSlots(*(_QWORD *)a1, v64, v56, v58, *(_DWORD *)(a1 + 36), 0, (unint64_t)&v66, 0);
              if ((v17 & 0x80000000) == 0)
              {
                v47 = v66;
                goto LABEL_67;
              }
            }
LABEL_36:
            if (v19)
LABEL_37:
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
            if (v20)
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v20);
LABEL_40:
            if (!*(_QWORD *)(a1 + 104) && v64)
              brk_DataUnmap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (uint64_t)v64);
            return v17;
          }
        }
LABEL_66:
        v47 = strlen(v54) + 1;
        v66 = v47;
        v20 = v56;
LABEL_67:
        v51 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *v53, v47);
        if (v51)
        {
          *v53 = (uint64_t)v51;
          if (matched)
            v17 = fillInSlots(*(_QWORD *)a1, v64, v20, v58, *(_DWORD *)(a1 + 36), v51, 0, 0);
          else
            strcpy(v51, v54);
          goto LABEL_36;
        }
LABEL_70:
        v17 = 2686459914;
        goto LABEL_36;
      }
      v27 = findMarkup("slotend", a3, a4, a5, a6, v72, &v71, &v69, &v68, &v70);
      if ((v27 & 0x80000000) != 0)
        goto LABEL_34;
      if (v70)
        break;
      v36 = v72;
LABEL_28:
      v27 = findMarkup("slotbegin", a3, a4, a5, a6, v36, v75, &v74, &v73, &v72);
      if ((v27 & 0x80000000) != 0)
      {
LABEL_34:
        v17 = v27;
        v19 = (uint64_t)v55;
        v20 = v56;
        goto LABEL_36;
      }
    }
    v28 = (char *)(v75[0] - v25);
    if ((v26 & 1) != 0)
    {
      memcpy(&v55[v22], v25, v75[0] - v25);
      v29 = &v28[v22];
      v30 = strlen(__s);
      ++v58;
      memcpy(&v29[(_QWORD)v55], __s, v30);
      v22 = (uint64_t)&v29[v30];
      v31 = v71 - v72;
      memcpy(&v56[v21], v72, v71 - v72);
      v21 += v31 + 1;
      v35 = v73;
      if (!v59)
      {
        if (v73)
          log_OutText(*(_QWORD *)(v67 + 32), (uint64_t)&modInfoTBM, 1, 0, (uint64_t)"Slot type is not supported by currently active Prompt Template Set", v32, v33, v34, v52);
        v26 = v57;
        goto LABEL_27;
      }
      memcpy(&v56[v21], v74, v73);
      v26 = v57;
    }
    else
    {
      v22 += (uint64_t)&v28[strlen(__s)];
      v21 = &v71[v21] - v72 + 1;
      if (!v59)
      {
LABEL_27:
        v25 = v70;
        v36 = v70;
        goto LABEL_28;
      }
      v35 = v73;
    }
    v21 += v35 + 1;
    goto LABEL_27;
  }
  return v17;
}

uint64_t pts_BinSearch(uint64_t a1, char *__s1, unint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t v6;
  _DWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  int v20;
  size_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v39;
  void *__src;

  v6 = 2686459911;
  if (a4)
  {
    if (a1)
    {
      if (a5)
      {
        v8 = a6;
        if (a6)
        {
          if ((v10 = *(_DWORD *)(a1 + 40), __s1) && !a3 || !__s1 && a3 && !(a3 >> *(_BYTE *)(a1 + 128)))
          {
            *a4 = 0;
            *a6 = 0;
            *a5 = 0;
            *(_QWORD *)(a1 + 136) = 1;
            if (v10 >= 1)
            {
              v11 = 0;
              v12 = v10 - 1;
              while (1)
              {
                v39 = v12;
                v13 = v12 - v11;
                if (v12 < v11)
                  ++v13;
                v14 = v11 + (v13 >> 1);
                v16 = *(_QWORD *)(a1 + 80);
                v15 = *(_QWORD *)(a1 + 88);
                v17 = *(unsigned int *)(v16 + 4 * v14);
                v18 = *(unsigned int *)(v16 + 4 * (v14 + 1)) - v17;
                if (v15)
                {
                  v6 = 0;
                  v19 = (const char *)(v15 + v17);
                  if (__s1)
                    goto LABEL_16;
                  goto LABEL_28;
                }
                __src = 0;
                v22 = *(_QWORD *)(a1 + 136);
                v23 = *(uint64_t **)(a1 + 120);
                if (v22 >> *(_BYTE *)(a1 + 128))
                {
                  v22 = 0;
                  v24 = *v23;
                }
                else
                {
                  v19 = (const char *)v23[v22];
                  if (v19)
                  {
                    v6 = 0;
                    goto LABEL_27;
                  }
                  v24 = 0;
                }
                v25 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v24, v18);
                if (!v25)
                  return 2686459914;
                *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v22) = v25;
                v26 = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (*(_DWORD *)(a1 + 96) + v17), v18, (uint64_t)&__src);
                if ((v26 & 0x80000000) != 0)
                  return v26;
                memcpy(*(void **)(*(_QWORD *)(a1 + 120) + 8 * v22), __src, v18);
                v6 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (uint64_t)__src);
                if ((v6 & 0x80000000) != 0)
                  return v6;
                v19 = *(const char **)(*(_QWORD *)(a1 + 120) + 8 * v22);
LABEL_27:
                v8 = a6;
                if (__s1)
                {
LABEL_16:
                  v20 = strcmp(__s1, v19);
                  *(_QWORD *)(a1 + 136) = (v20 > 0) | (unint64_t)(2 * *(_QWORD *)(a1 + 136));
                  if (v20 > 0)
                    goto LABEL_41;
                  if ((v20 & 0x80000000) == 0)
                  {
LABEL_18:
                    *v8 = 1;
                    v21 = strlen(v19);
                    *a5 = v18 - (v21 + 1);
                    *a4 = &v19[v21 + 1];
                    goto LABEL_42;
                  }
                  goto LABEL_46;
                }
LABEL_28:
                v27 = a3;
                if (a3)
                {
                  v28 = 0;
                  do
                  {
                    ++v28;
                    v29 = v27 > 1;
                    v27 >>= 1;
                  }
                  while (v29);
                }
                else
                {
                  v28 = 0;
                }
                v30 = *(_QWORD *)(a1 + 136);
                if (v30)
                {
                  v31 = 0;
                  v32 = *(_QWORD *)(a1 + 136);
                  do
                  {
                    ++v31;
                    v29 = v32 > 1;
                    v32 >>= 1;
                  }
                  while (v29);
                }
                else
                {
                  v31 = 0;
                }
                if (v31 >= v28)
                {
                  v33 = 0;
                }
                else
                {
                  if (((a3 >> (v28 + ~(_BYTE)v31)) & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 136) = (2 * v30) | 1;
LABEL_41:
                    v11 = v14 + 1;
LABEL_42:
                    v12 = v39;
                    goto LABEL_47;
                  }
                  v33 = -1;
                }
                *(_QWORD *)(a1 + 136) = 2 * v30;
                if ((v33 & 0x80000000) == 0)
                  goto LABEL_18;
LABEL_46:
                v12 = v14 - 1;
LABEL_47:
                if (*v8 || v11 > v12)
                  return v6;
              }
            }
            return 0;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t makeTnSequence(char *a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = strlen(a1);
  result = ssftstring_Reserve(a2, v4 + 7);
  if ((result & 0x80000000) == 0)
  {
    result = ssftstring_Clear(a2);
    if ((result & 0x80000000) == 0)
    {
      result = ssftstring_AppendChar(a2, 27);
      if ((result & 0x80000000) == 0)
      {
        result = ssftstring_AppendCStr(a2, "\\tn=");
        if ((result & 0x80000000) == 0)
        {
          result = ssftstring_AppendCStr(a2, a1);
          if ((result & 0x80000000) == 0)
            return ssftstring_AppendCStr(a2, "\\");
        }
      }
    }
  }
  return result;
}

uint64_t findMarkup(char *__s, _WORD *a2, int a3, _QWORD *a4, int a5, char *a6, char **a7, char **a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v10;
  size_t v18;
  _QWORD *v19;
  size_t v20;
  char *v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  int v39;
  int v40;
  char **v42;
  int v43;
  _QWORD *v44;
  size_t v45;
  unsigned __int16 v47;

  v47 = 0;
  v10 = 2686459911;
  if (__s)
  {
    if (*__s)
    {
      v45 = strlen(__s);
      if (a7)
      {
        if (a8 && a9 && a10)
        {
          *a7 = 0;
          *a8 = 0;
          *a10 = 0;
          *a9 = 0;
          if (a6)
          {
            v18 = strlen(a6);
            v19 = a4;
            v20 = v18;
            v44 = v19;
            v21 = esc_seq_strstr(a2, a3, v19, a5, a6, &v47);
            if (v21)
            {
              v42 = a8;
              v43 = a5;
              v22 = (unint64_t)&a6[v20];
              v23 = v44;
              while (1)
              {
                *a7 = v21;
                v24 = &v21[v47];
                if (*v24 == 92)
                {
                  v25 = v24 + 1;
                  v26 = (uint64_t)&v21[v45 + 2 + v47];
                  do
                  {
                    v24 = v25;
                    v27 = v26;
                    if ((unint64_t)++v25 > v22)
                      break;
                    v28 = memchr("\r\n\t ", *v24, 5uLL);
                    v26 = v27 + 1;
                  }
                  while (v28);
                  v29 = &v24[v45];
                  if ((unint64_t)&v24[v45] >= v22)
                    goto LABEL_31;
                  v23 = v44;
                  if (!LH_strnicmp((uint64_t)v24, (uint64_t)__s, v45))
                    break;
                }
LABEL_32:
                v21 = esc_seq_strstr(a2, a3, v23, a5, v24, &v47);
                if (!v21)
                  return 0;
              }
              do
              {
                v24 = v29;
                v30 = v27;
                v32 = *v29++;
                v31 = v32;
                if ((unint64_t)v29 > v22)
                  break;
                ++v27;
              }
              while (memchr("\r\n\t ", v31, 5uLL));
              v31 = v31;
              if (v31 == 61)
              {
                v33 = v24 + 1;
                do
                {
                  v34 = v33++;
                  if ((unint64_t)v33 > v22)
                    break;
                  ++v30;
                }
                while (memchr("\r\n\t ", *v34, 5uLL));
                v35 = 0;
                *v42 = v34;
                do
                {
                  v36 = v35;
                  v37 = &v34[v35];
                  if ((unint64_t)&v34[v35 + 1] > v22)
                    break;
                  v38 = memchr("\r\n\t \\", v34[v35], 6uLL);
                  v35 = v36 + 1;
                }
                while (!v38);
                *a9 = v36;
                a5 = v43;
                do
                {
                  v24 = v37;
                  v40 = *v37++;
                  v39 = v40;
                  v31 = v40;
                }
                while ((unint64_t)v37 <= v22 && memchr("\r\n\t ", v39, 5uLL));
              }
              else
              {
                a5 = v43;
              }
              if (v31 == 92)
              {
                v10 = 0;
                *a10 = v24 + 1;
                return v10;
              }
LABEL_31:
              v23 = v44;
              goto LABEL_32;
            }
          }
          return 0;
        }
      }
    }
  }
  return v10;
}

char *replaceSubstr(char *result)
{
  char *v1;
  size_t v2;

  if (result)
  {
    result = strstr(result, "\r\n");
    if (result)
    {
      v1 = result;
      do
      {
        v2 = strlen(v1 + 2);
        memmove(v1 + 1, v1 + 2, v2 + 1);
        *v1 = 10;
        result = strstr(v1 + 1, "\r\n");
        v1 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t pts_ReadTextData(_WORD *a1, int a2, const char *a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  XML_ParserStruct *v21;
  XML_ParserStruct *v22;
  XML_Status v23;
  uint64_t v24;
  uint64_t v25;
  XML_Size CurrentLineNumber;
  XML_Error ErrorCode;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char **v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  size_t v76;
  size_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  size_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  int len;
  unsigned int lena;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  XML_Memory_Handling_Suite memsuite;
  uint64_t (*v99)();
  uint64_t v100;
  char __s[100];
  __int128 userData;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v7 = 2686459914;
  if (!a5)
    return 2686459911;
  v97 = 0;
  if ((InitRsrcFunction(a1, a2, &v97) & 0x80000000) != 0)
    return 2686459911;
  *a5 = safeh_GetNullHandle();
  a5[1] = v15;
  v16 = heap_Calloc(*(_QWORD **)(v97 + 8), 1, 64);
  if (v16)
  {
    v17 = v16;
    v100 = 0;
    if ((InitRsrcFunction(a1, a2, &v100) & 0x80000000) != 0)
    {
      v7 = 2686459911;
      goto LABEL_30;
    }
    v88 = a6;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    v18 = v100;
    *(_QWORD *)v17 = v100;
    memsuite.realloc_fcn = (void *(__cdecl *)(void *, size_t))builtin_Alloc;
    memsuite.free_fcn = (void (__cdecl *)(void *))builtin_Realloc;
    v99 = builtin_Free;
    memsuite.malloc_fcn = *(void *(__cdecl **)(size_t))(v18 + 8);
    strcpy(__s, "<>");
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    userData = 0u;
    v103 = 0u;
    *(_QWORD *)&v121 = __s;
    *(_QWORD *)&v128 = v17;
    *((_QWORD *)&v128 + 1) = v18;
    *(_QWORD *)&v122 = heap_Calloc(*(_QWORD **)(v18 + 8), 4, 8);
    if (!(_QWORD)v122)
    {
LABEL_29:
      DeiniState((uint64_t)&userData);
      goto LABEL_30;
    }
    v85 = a5;
    v86 = a7;
    v19 = 0;
    len = a4 - 1;
    while (1)
    {
      do
        ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), (_QWORD *)(v122 + 8 * v19++));
      while (v19 != 4);
      DWORD2(v122) = -1;
      v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), (_QWORD *)&v123 + 1);
      if ((v20 & 0x80000000) != 0
        || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), &v124), (v20 & 0x80000000) != 0)
        || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), (_QWORD *)&v124 + 1),
            (v20 & 0x80000000) != 0)
        || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), &v125), (v20 & 0x80000000) != 0)
        || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), (_QWORD *)&v125 + 1),
            (v20 & 0x80000000) != 0)
        || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), &v126), (v20 & 0x80000000) != 0))
      {
        v7 = v20;
        goto LABEL_29;
      }
      v21 = XML_ParserCreate_MM(0, &memsuite, 0);
      if (!v21)
        goto LABEL_30;
      v22 = v21;
      *(_QWORD *)&v129 = v21;
      XML_SetElementHandler(v21, (XML_StartElementHandler)CB_start, (XML_EndElementHandler)CB_end);
      XML_SetCharacterDataHandler(v22, (XML_CharacterDataHandler)CB_char);
      XML_SetUserData(v22, &userData);
      v23 = XML_Parse(v22, a3, len, 0);
      v24 = DWORD2(v129);
      if (v23)
      {
        if (DWORD2(v129) != -1608507392)
        {
          v31 = 2686459908;
          if (DWORD2(v129) != 1)
          {
            v31 = DWORD2(v129);
            if ((DWORD2(v129) & 0x80000000) == 0)
            {
              v40 = pts_strclone(*(_QWORD *)(v100 + 8), (char **)(v17 + 16), (char *)&v108 + 4);
              if ((v40 & 0x80000000) != 0)
              {
                v31 = v40;
              }
              else
              {
                v31 = pts_strclone(*(_QWORD *)(v100 + 8), (char **)(v17 + 24), __s);
                if ((v31 & 0x80000000) == 0)
                  ssft_qsort(*(_QWORD *)(v17 + 48), *(_QWORD *)(v17 + 32), 48, (uint64_t (*)(unint64_t, unint64_t))compare_4);
              }
            }
          }
LABEL_39:
          XML_ParserFree(v22);
          DeiniState((uint64_t)&userData);
          v7 = v31;
          if ((v31 & 0x80000000) == 0)
          {
            v89 = v97;
            v41 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), 1, 144);
            if (!v41)
              goto LABEL_108;
            v42 = v41;
            *(_QWORD *)v41 = *(_QWORD *)v17;
            *(_DWORD *)(v41 + 116) = 1;
            v43 = pts_SetFormat(v41, *(char **)(v17 + 8));
            if ((v43 & 0x80000000) != 0)
            {
              v7 = v43;
              goto LABEL_30;
            }
            v7 = pts_strclone(*(_QWORD *)(*(_QWORD *)v17 + 8), (char **)(v42 + 16), *(char **)(v17 + 16));
            if ((v7 & 0x80000000) != 0)
              goto LABEL_30;
            if (*(_DWORD *)(v42 + 32))
            {
              v7 = pts_strclone(*(_QWORD *)(*(_QWORD *)v17 + 8), (char **)(v42 + 24), *(char **)(v17 + 24));
              if ((v7 & 0x80000000) != 0)
                goto LABEL_30;
            }
            else if (strcmp(*(const char **)(v17 + 24), "<>"))
            {
              log_OutText(*(_QWORD *)(v89 + 32), (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"%s does not support custom slot place holders", v44, v45, v46, *(_QWORD *)(v17 + 8));
              v7 = 2686459908;
              goto LABEL_30;
            }
            *(_QWORD *)(v42 + 56) = 2;
            *(_OWORD *)(v42 + 40) = xmmword_1DECB9120;
            v47 = *(_QWORD *)(v17 + 32);
            if (v47)
            {
              v48 = 0;
              v49 = 0;
              v50 = (const char **)(*(_QWORD *)(v17 + 48) + 16);
              do
              {
                v51 = *v50;
                if (!v49 || strcmp(v49, *v50))
                {
                  *(_QWORD *)(v42 + 40) = ++v48;
                  v49 = v51;
                }
                v50 += 6;
                --v47;
              }
              while (v47);
            }
            else
            {
              v48 = 0;
            }
            v52 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), v48 + 1, 4);
            *(_QWORD *)(v42 + 80) = v52;
            if (!v52)
            {
LABEL_108:
              v7 = 2686459914;
              goto LABEL_30;
            }
            if (*(_QWORD *)(v42 + 40))
            {
              v60 = 0;
              v61 = 0;
              v92 = 0;
              v62 = 0;
              v63 = 0;
              v64 = 1;
              lena = v7;
              do
              {
                v65 = v64;
                if ((v63 & 1) != 0)
                {
                  v66 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), v61, 1);
                  *(_QWORD *)(v42 + 88) = v66;
                  if (!v66)
                    goto LABEL_108;
                  v67 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), v60, 1);
                  *(_QWORD *)(v42 + 104) = v67;
                  if (!v67)
                    goto LABEL_108;
                  v92 = v67;
                  v61 = 0;
                  v60 = 0;
                  v62 = *(_QWORD *)(v42 + 88);
                }
                v87 = v65;
                if (*(_QWORD *)(v17 + 32))
                {
                  v93 = 0;
                  v96 = 0;
                  v68 = 0;
                  v69 = 0;
                  v70 = *(_QWORD *)(v17 + 48);
                  do
                  {
                    if (v68 && (v71 = *(const char **)(v70 + 16), !strcmp(v68, v71)))
                    {
                      v94 = v71;
                      v73 = v61;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)(v42 + 80) + 4 * v93) = v61;
                      if (v62)
                        strcpy((char *)(v62 + v61), *(const char **)(v70 + 16));
                      v72 = *(const char **)(v70 + 16);
                      v94 = v72;
                      if (v72)
                        v61 += strlen(v72) + 1;
                      ++v93;
                      v73 = v61;
                      v96 = v61;
                    }
                    v95 = strlen(*(const char **)(v70 + 40));
                    if (v92)
                      strcpy((char *)(v92 + v60), *(const char **)(v70 + 40));
                    v61 = v73;
                    if (*(_QWORD *)(v70 + 24))
                    {
                      v74 = 0;
                      v75 = *(const char **)(v70 + 32);
                      v61 = v73;
                      do
                      {
                        if (v62)
                          strcpy((char *)(v62 + v61), v75);
                        v76 = strlen(v75);
                        v61 += v76 + 1;
                        v75 += v76 + 1;
                        if (*(_DWORD *)(v17 + 56))
                        {
                          if (v62)
                            strcpy((char *)(v62 + v61), v75);
                          v77 = strlen(v75);
                          v61 += v77 + 1;
                          v75 += v77 + 1;
                        }
                        ++v74;
                      }
                      while (v74 < *(_QWORD *)(v70 + 24));
                    }
                    v78 = *(_QWORD *)(v42 + 48);
                    if (v78)
                    {
                      v79 = 0;
                      v80 = v60;
                      v7 = lena;
                      do
                      {
                        if (v62)
                        {
                          *(_BYTE *)(v62 + v61 + v79) = v80;
                          v78 = *(_QWORD *)(v42 + 48);
                        }
                        v80 >>= 8;
                        ++v79;
                      }
                      while (v79 < v78);
                      v61 += v79;
                    }
                    else
                    {
                      v7 = lena;
                    }
                    v81 = *(_QWORD *)(v42 + 56);
                    if (v81)
                    {
                      v82 = 0;
                      v83 = v95 + 1;
                      do
                      {
                        if (v62)
                        {
                          *(_BYTE *)(v62 + v61 + v82) = v83;
                          v81 = *(_QWORD *)(v42 + 56);
                        }
                        v83 >>= 8;
                        ++v82;
                      }
                      while (v82 < v81);
                      v61 += v82;
                    }
                    if (v62)
                    {
                      v55 = v73 - v96;
                      if (v73 > v96)
                      {
                        *(_QWORD *)&userData = 0;
                        if (pts_MatchSlots(v42, v62 + v73, v62 + v96, v55, *(_QWORD *)(v70 + 24), 0, &userData))log_OutText(*(_QWORD *)(v89 + 32), (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %i: Template not reachable; covered by template in line %i",
                            v57,
                            v58,
                            v59,
                            *(_QWORD *)(v70 + 8));
                      }
                    }
                    v60 += v95 + 1;
                    v70 += 48;
                    ++v69;
                    v68 = v94;
                  }
                  while (v69 < *(_QWORD *)(v17 + 32));
                }
                else
                {
                  v93 = 0;
                }
                v64 = 0;
                *(_DWORD *)(*(_QWORD *)(v42 + 80) + 4 * v93) = v61;
                v63 = 1;
                a6 = v88;
              }
              while ((v87 & 1) != 0);
            }
            else
            {
              v61 = 0;
              v60 = 0;
            }
            if (a6)
            {
              *a6 = v61;
              *v86 = v60;
            }
            if ((v7 & 0x80000000) == 0)
            {
              v7 = pts_CheckDataConsistency(v42, v53, v54, v55, v56, v57, v58, v59);
              if ((v7 & 0x80000000) == 0)
              {
                *v85 = v42;
                *((_DWORD *)v85 + 2) = 1060;
              }
            }
          }
LABEL_30:
          v38 = *(_QWORD **)(*(_QWORD *)v17 + 8);
          intpts_FreeContent((_QWORD *)v17);
          heap_Free(v38, v17);
          return v7;
        }
      }
      else
      {
        v25 = *(_QWORD *)(v100 + 32);
        CurrentLineNumber = XML_GetCurrentLineNumber(v22);
        ErrorCode = XML_GetErrorCode(v22);
        XML_ErrorString(ErrorCode);
        log_OutText(v25, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"XML error in line %d: %s", v28, v29, v30, CurrentLineNumber);
        if ((v24 & 0x80000000) == 0)
          goto LABEL_38;
        v31 = v24;
        if ((_DWORD)v24 != -1608507392)
          goto LABEL_39;
      }
      v32 = strlen(__s);
      if (((v32 + 3) & 0xFFFFFFFC) > 0x63uLL)
      {
        log_OutText(*(_QWORD *)(v100 + 32), (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"Can't find suitable slot placeholder", v33, v34, v35, v84);
LABEL_38:
        v31 = 2686459908;
        goto LABEL_39;
      }
      v36 = v32 + 2;
      if (v32 <= 0xFFFFFFFD)
      {
        v37 = 0;
        do
        {
          __s[v37] = 60;
          __s[(v36 >> 1) + v37++] = 62;
        }
        while (v36 >> 1 != v37);
      }
      __s[v36] = 0;
      DeiniState((uint64_t)&userData);
      intpts_FreeContent((_QWORD *)v17);
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_QWORD *)v17 = v100;
      XML_ParserFree(v22);
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      userData = 0u;
      v103 = 0u;
      *(_QWORD *)&v121 = __s;
      *(_QWORD *)&v128 = v17;
      *((_QWORD *)&v128 + 1) = *(_QWORD *)v17;
      v19 = 0;
      *(_QWORD *)&v122 = heap_Calloc(*(_QWORD **)(*((_QWORD *)&v128 + 1) + 8), 4, 8);
      v7 = 2686459914;
      if (!(_QWORD)v122)
        goto LABEL_29;
    }
  }
  return v7;
}

uint64_t CB_start_pts(uint64_t a1, char **a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  XML_Size v10;
  uint64_t v11;
  uint64_t v12;
  XML_ParserStruct *v13;
  uint64_t v14;
  XML_Size CurrentLineNumber;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  XML_Size v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  if (!*a2)
  {
    v4 = 0;
LABEL_25:
    if (!*(_BYTE *)a1 || !*(_BYTE *)(a1 + 200))
    {
      v4 = 2686459908;
      v13 = *(XML_ParserStruct **)(a1 + 432);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
      CurrentLineNumber = XML_GetCurrentLineNumber(v13);
      log_OutText(v14, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Missing '%s'", v16, v17, v18, CurrentLineNumber);
    }
    return v4;
  }
  v4 = 0;
  v5 = a2 + 1;
  while (LH_stricmp(v3, "format"))
  {
    if (LH_stricmp((char *)*(v5 - 1), "version"))
    {
      if (LH_stricmp((char *)*(v5 - 1), "esc"))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
        v10 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
        v11 = *(unsigned int *)(a1 + 328);
        if ((v11 & 0x80000000) == 0)
          ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v11));
        log_OutText(v6, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v7, v8, v9, v10);
        v4 = 1;
        goto LABEL_22;
      }
      if (*v5)
LABEL_16:
        __strcpy_chk();
    }
    else if (*v5)
    {
      goto LABEL_16;
    }
LABEL_22:
    v3 = (char *)v5[1];
    v5 += 2;
    if (!v3)
      goto LABEL_25;
  }
  if (!*v5)
    goto LABEL_22;
  __strcpy_chk();
  v12 = *(_QWORD *)(a1 + 416);
  *(_DWORD *)(v12 + 56) = 1;
  if (!strcmp((const char *)a1, "Text Template 2.2"))
  {
    v4 = pts_strclone(*(_QWORD *)(*(_QWORD *)v12 + 8), (char **)(v12 + 8), "Binary Template 2.2");
    if ((v4 & 0x80000000) != 0)
      goto LABEL_28;
    goto LABEL_19;
  }
  if (strcmp((const char *)a1, "Text Template 2.0"))
    goto LABEL_29;
  v4 = pts_strclone(*(_QWORD *)(*(_QWORD *)v12 + 8), (char **)(v12 + 8), "Binary Template 2.0");
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(v12 + 56) = 0;
LABEL_19:
    *(_DWORD *)(a1 + 312) = strcmp((const char *)a1, "Text Template 2.0") != 0;
    goto LABEL_22;
  }
LABEL_28:
  if ((_DWORD)v4 != -1608507385)
    return v4;
LABEL_29:
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
  v20 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
  log_OutText(v19, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unsupported format: '%s'; use '%s' instead.",
    v21,
    v22,
    v23,
    v20);
  return 2686459911;
}

uint64_t CB_start_template(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  XML_Size CurrentLineNumber;
  uint64_t v9;

  *(_QWORD *)(a1 + 408) = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
  *(_QWORD *)(a1 + 332) = 0;
  if (!*a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
  CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
  v9 = *(unsigned int *)(a1 + 328);
  if ((v9 & 0x80000000) == 0)
    ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v9));
  log_OutText(v4, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v5, v6, v7, CurrentLineNumber);
  return 1;
}

uint64_t CB_end_template(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  XML_Size CurrentLineNumber;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  uint64_t v20;

  v2 = ssftstring_CStrDetach(*(_QWORD *)(a1 + 376));
  v3 = ssftstring_CStrDetach(*(_QWORD *)(a1 + 384));
  if (!*(_DWORD *)(a1 + 332))
  {
    v10 = "line %d: Missing <input>...</input>";
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 336))
  {
    v10 = "line %d: Missing <output>...</output>";
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    log_OutText(v11, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)v10, v13, v14, v15, CurrentLineNumber);
    v16 = 1;
    if (!v2)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(a1 + 408);
  v4 = *(_QWORD **)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 400);
  v7 = v4[4];
  v8 = v4[5];
  if (v7 < 1000 * v8)
  {
    v9 = v4[6];
LABEL_14:
    v16 = 0;
    v19 = (unint64_t *)(v9 + 48 * v7);
    v19[5] = v3;
    v19[2] = v2;
    v19[4] = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = 0;
    v19[3] = v6;
    *v19 = v7;
    v19[1] = v5;
    v4[4] = v7 + 1;
    goto LABEL_15;
  }
  v17 = 48000 * v8 + 48000;
  v18 = *(uint64_t **)(*v4 + 8);
  if (v8)
  {
    v9 = heap_Realloc(v18, v4[6], v17);
    if (v9)
    {
LABEL_13:
      v7 = v4[4];
      ++v4[5];
      v4[6] = v9;
      goto LABEL_14;
    }
  }
  else
  {
    v9 = heap_Alloc((uint64_t)v18, v17);
    if (v9)
      goto LABEL_13;
  }
  v16 = 2686459914;
  if (v2)
LABEL_8:
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v2);
LABEL_9:
  if (v3)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v3);
LABEL_15:
  v20 = *(_QWORD *)(a1 + 392);
  if (v20)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v20);
  return v16;
}

uint64_t CB_start_input(uint64_t a1, _QWORD *a2)
{
  XML_ParserStruct *v4;
  uint64_t v5;
  XML_Size CurrentLineNumber;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  XML_Size v14;
  uint64_t v15;

  ssftstring_Clear(*(_QWORD *)(a1 + 344));
  ssftstring_Clear(*(_QWORD *)(a1 + 368));
  *(_QWORD *)(a1 + 400) = 0;
  if (*(_DWORD *)(a1 + 332))
  {
    v4 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v4);
    log_OutText(v5, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unexpected <input>", v7, v8, v9, CurrentLineNumber);
  }
  else
  {
    *(_DWORD *)(a1 + 332) = 1;
    if (!*a2)
      return 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v14 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    v15 = *(unsigned int *)(a1 + 328);
    if ((v15 & 0x80000000) == 0)
      ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v15));
    log_OutText(v10, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v11, v12, v13, v14);
  }
  return 1;
}

uint64_t CB_char_container(uint64_t a1, const char *a2, unsigned int a3)
{
  return ssftstring_AppendCStrN(*(_QWORD *)(a1 + 344), a2, a3);
}

uint64_t CB_end_input(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  XML_ParserStruct *v11;
  uint64_t v12;
  XML_Size v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  XML_Size CurrentLineNumber;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (char *)ssftstring_CStr(*(_QWORD *)(a1 + 344));
  if (v2 && (v3 = v2, *v2))
  {
    replaceAltEsc(v2, (char *)(a1 + 200));
    v4 = *(_QWORD *)(a1 + 400);
    if (v4 == numberOfOccurrences(v3, *(char **)(a1 + 304)))
    {
      v5 = ssftstring_AssignCStr(*(_QWORD *)(a1 + 376), v3);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(a1 + 392);
        if (v6)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v6);
          *(_QWORD *)(a1 + 392) = 0;
        }
        v7 = ssftstring_Size(*(_QWORD *)(a1 + 368));
        if (v7)
        {
          v8 = v7;
          v9 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 424) + 8), v7);
          *(_QWORD *)(a1 + 392) = v9;
          if (v9)
          {
            v10 = (const void *)ssftstring_CStr(*(_QWORD *)(a1 + 368));
            memcpy(*(void **)(a1 + 392), v10, v8);
          }
          else
          {
            return 2686459914;
          }
        }
      }
    }
    else
    {
      v5 = 2686459908;
      if (*(_DWORD *)(a1 + 312))
      {
        return 2686459904;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
        CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
        log_OutText(v18, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: '%s' in input not allowed", v20, v21, v22, CurrentLineNumber);
      }
    }
  }
  else
  {
    v5 = 2686459908;
    v11 = *(XML_ParserStruct **)(a1 + 432);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v13 = XML_GetCurrentLineNumber(v11);
    log_OutText(v12, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: empty input not allowed", v14, v15, v16, v13);
  }
  return v5;
}

uint64_t CB_start_output(uint64_t a1, _QWORD *a2)
{
  XML_ParserStruct *v4;
  uint64_t v5;
  XML_Size CurrentLineNumber;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  XML_Size v16;
  uint64_t v17;
  XML_ParserStruct *v18;

  ssftstring_Clear(*(_QWORD *)(a1 + 384));
  ssftstring_Clear(*(_QWORD *)(a1 + 344));
  if (*(_DWORD *)(a1 + 336))
  {
    v4 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v4);
    v10 = "line %d: Unexpected <output>";
LABEL_3:
    log_OutText(v5, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)v10, v7, v8, v9, CurrentLineNumber);
    return 1;
  }
  *(_DWORD *)(a1 + 336) = 1;
  if (!*(_DWORD *)(a1 + 332))
  {
    v18 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v18);
    v10 = "line %d: Missing <input>...</input>";
    goto LABEL_3;
  }
  if (*a2)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v16 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    v17 = *(unsigned int *)(a1 + 328);
    if ((v17 & 0x80000000) == 0)
      ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v17));
    log_OutText(v12, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v13, v14, v15, v16);
    return 1;
  }
  return 0;
}

uint64_t CB_end_output(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  XML_ParserStruct *v4;
  uint64_t v5;
  XML_Size CurrentLineNumber;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;

  v11 = &byte_1DEBD87CE;
  v2 = (char *)ssftstring_CStr(*(_QWORD *)(a1 + 344));
  replaceAltEsc(v2, (char *)(a1 + 200));
  v3 = ssftstring_AssignCStr(*(_QWORD *)(a1 + 384), v2);
  if ((v3 & 0x80000000) == 0
    && (fillInSlots(*(_QWORD *)(a1 + 424), v2, *(char **)(a1 + 392), *(_QWORD *)(a1 + 400), *(_DWORD *)(*(_QWORD *)(a1 + 416) + 56), 0, 0, (const char **)&v11) & 0x80000000) != 0)
  {
    v4 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v4);
    log_OutText(v5, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: %s", v7, v8, v9, CurrentLineNumber);
    return 1;
  }
  return v3;
}

uint64_t CB_start_slot(uint64_t a1, const char **a2)
{
  uint64_t result;
  const char *v5;
  const char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  XML_Size CurrentLineNumber;
  uint64_t v12;

  ssftstring_Clear(*(_QWORD *)(a1 + 352));
  result = ssftstring_AssignCStr(*(_QWORD *)(a1 + 360), "*");
  if ((result & 0x80000000) == 0)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2 + 1;
      do
      {
        if (!strcmp("type", v5) && *(_DWORD *)(*(_QWORD *)(a1 + 416) + 56) == 1)
        {
          result = ssftstring_AssignCStr(*(_QWORD *)(a1 + 360), (char *)*v6);
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
          CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
          v12 = *(unsigned int *)(a1 + 328);
          if ((v12 & 0x80000000) == 0)
            ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v12));
          log_OutText(v7, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v8, v9, v10, CurrentLineNumber);
          result = 1;
        }
        v5 = v6[1];
        v6 += 2;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t CB_char_slot(uint64_t a1, const char *a2, unsigned int a3)
{
  return ssftstring_AppendCStrN(*(_QWORD *)(a1 + 352), a2, a3);
}

uint64_t CB_end_slot(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t result;
  unsigned int v5;

  v2 = (char *)ssftstring_CStr(*(_QWORD *)(a1 + 352));
  v3 = (char *)ssftstring_CStr(*(_QWORD *)(a1 + 360));
  if (!v2
    || (replaceAltEsc(v2, (char *)(a1 + 200)),
        result = ssftstring_AppendCStr(*(_QWORD *)(a1 + 368), v2),
        (result & 0x80000000) == 0))
  {
    result = ssftstring_AppendChar(*(_QWORD *)(a1 + 368), 0);
    if ((result & 0x80000000) == 0)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 416) + 56) != 1
        || (!v3 || (result = ssftstring_AppendCStr(*(_QWORD *)(a1 + 368), v3), (result & 0x80000000) == 0))
        && (result = ssftstring_AppendChar(*(_QWORD *)(a1 + 368), 0), (result & 0x80000000) == 0))
      {
        ++*(_QWORD *)(a1 + 400);
        v5 = strlen(*(const char **)(a1 + 304));
        return ssftstring_AppendCStrN(*(_QWORD *)(a1 + 344), *(const char **)(a1 + 304), v5);
      }
    }
  }
  return result;
}

char *replaceAltEsc(char *result, char *__s2)
{
  char *v3;
  char *v4;
  size_t v5;
  size_t v6;

  if (result)
  {
    if (__s2)
    {
      if (*__s2)
      {
        v3 = result;
        result = strstr(result, __s2);
        if (result)
        {
          v4 = result;
          v5 = strlen(__s2);
          do
          {
            *v4 = 27;
            v6 = strlen(&v4[v5]);
            memmove(v4 + 1, &v4[v5], v6 + 1);
            result = strstr(v3, __s2);
            v4 = result;
          }
          while (result);
        }
      }
    }
  }
  return result;
}

uint64_t builtin_Alloc(uint64_t a1, unsigned int a2)
{
  return heap_Alloc(a1, a2);
}

uint64_t builtin_Realloc(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  return heap_Realloc(a1, a2, a3);
}

void CB_start(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  XML_Size v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  XML_Size CurrentLineNumber;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v6 = 0;
  v7 = &byte_1DEBD87CE;
  while (strcmp(__s1, &cbTable[v6]))
  {
    v6 += 56;
    if (v6 == 280)
      goto LABEL_6;
  }
  v7 = &cbTable[v6 + 16];
LABEL_6:
  v8 = *(unsigned int *)(a1 + 328);
  if ((v8 & 0x80000000) != 0)
    v9 = &byte_1DEBD87CE;
  else
    v9 = (const char *)ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v8));
  if (!strcmp(v7, v9))
  {
    v13 = *(_DWORD *)(a1 + 328);
    if (v13 < 3)
    {
      v24 = v13 + 1;
      *(_DWORD *)(a1 + 328) = v24;
      v19 = ssftstring_AssignCStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v24), __s1);
      if ((v19 & 0x80000000) == 0)
      {
        v25 = 0;
        while (strcmp(__s1, &cbTable[v25]))
        {
          v25 += 56;
          if (v25 == 280)
            goto LABEL_20;
        }
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))&cbTable[v25 + 32])(a1, a3);
        if ((v19 & 0x80000000) == 0)
          setError(a1, v19);
      }
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
      CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
      log_OutText(v14, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: XML parsing stack too small", v16, v17, v18, CurrentLineNumber);
      v19 = -1608507382;
    }
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v11 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    for (i = 0; i != 280; i += 56)
    {
      if (!strcmp(__s1, &cbTable[i]))
        break;
    }
    for (j = 0; j != 280; j += 56)
    {
      if (!strcmp(__s1, &cbTable[j]))
        break;
    }
    v19 = -1608507388;
    log_OutText(v10, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %i: Unexpected <%s> inside <%s>...</%s>", v21, v22, v23, v11);
  }
LABEL_20:
  setError(a1, v19);
}

void CB_end(uint64_t a1, char *__s1)
{
  uint64_t v4;
  char *v5;
  int v6;
  int v7;

  v4 = 0;
  v5 = cbTable;
  while (strcmp(__s1, v5))
  {
    ++v4;
    v5 += 56;
    if (v4 == 5)
      goto LABEL_8;
  }
  if (v4)
  {
    v6 = (*((uint64_t (**)(uint64_t))v5 + 6))(a1);
    if (v6 < 0)
      goto LABEL_11;
    setError(a1, v6);
  }
LABEL_8:
  v7 = *(_DWORD *)(a1 + 328);
  if (v7 < 0)
  {
    v6 = -1608507388;
  }
  else
  {
    v6 = 0;
    *(_DWORD *)(a1 + 328) = v7 - 1;
  }
LABEL_11:
  setError(a1, v6);
}

void CB_char(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  char *v9;
  int v11;

  v6 = *(unsigned int *)(a1 + 328);
  if ((v6 & 0x80000000) != 0)
    v7 = &byte_1DEBD87CE;
  else
    v7 = (const char *)ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v6));
  v8 = -5;
  v9 = cbTable;
  while (strcmp(v7, v9))
  {
    v9 += 56;
    if (__CFADD__(v8++, 1))
      goto LABEL_10;
  }
  if (v8 < 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  v11 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v9 + 5))(a1, a2, a3);
  if ((v11 & 0x80000000) == 0)
    setError(a1, v11);
LABEL_11:
  setError(a1, v11);
}

double DeiniState(uint64_t a1)
{
  uint64_t i;
  double result;

  if (*(_QWORD *)(a1 + 320))
  {
    for (i = 0; i != 32; i += 8)
      ssftstring_ObjClose(*(_QWORD ***)(*(_QWORD *)(a1 + 320) + i));
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), *(_QWORD *)(a1 + 320));
  }
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 344));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 352));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 360));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 368));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 376));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 384));
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return result;
}

_QWORD *intpts_FreeContent(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = result;
  v2 = *(_QWORD **)(*result + 8);
  v3 = result[2];
  if (v3)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v3);
    v1[2] = 0;
  }
  v4 = v1[1];
  if (v4)
  {
    result = heap_Free(v2, v4);
    v1[1] = 0;
  }
  v5 = v1[3];
  if (v5)
  {
    result = heap_Free(v2, v5);
    v1[3] = 0;
  }
  v6 = v1[6];
  if (v6)
  {
    if (v1[4])
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = v1[6];
        if (v9)
        {
          v10 = v9 + v7;
          v11 = *(_QWORD *)(v9 + v7 + 16);
          if (v11)
          {
            heap_Free(v2, v11);
            *(_QWORD *)(v10 + 16) = 0;
          }
          v12 = *(_QWORD *)(v10 + 32);
          if (v12)
          {
            heap_Free(v2, v12);
            *(_QWORD *)(v10 + 32) = 0;
          }
          v13 = v9 + v7;
          v14 = *(_QWORD *)(v13 + 40);
          if (v14)
          {
            heap_Free(v2, v14);
            *(_QWORD *)(v13 + 40) = 0;
          }
        }
        ++v8;
        v7 += 48;
      }
      while (v8 < v1[4]);
      v6 = v1[6];
    }
    result = heap_Free(v2, v6);
    v1[6] = 0;
  }
  return result;
}

uint64_t compare_4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)a1 >= *(_QWORD *)a2)
      return *(_QWORD *)a1 > *(_QWORD *)a2;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

void setError(uint64_t a1, int a2)
{
  if (a2)
  {
    if ((*(_DWORD *)(a1 + 440) & 0x80000000) == 0)
      *(_DWORD *)(a1 + 440) = a2;
    if (a2 < 0)
    {
      XML_SetElementHandler(*(XML_Parser *)(a1 + 432), 0, 0);
      XML_SetCharacterDataHandler(*(XML_Parser *)(a1 + 432), 0);
    }
  }
}

uint64_t domain_mngr_utils_GetU32(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*a3 + 3) & 0xFFFFFFFC;
  *a3 = v4;
  if (v4 + 4 > (unint64_t)a2)
    return 2296389641;
  if (a4)
  {
    *a4 = *(_DWORD *)(a1 + v4);
    LODWORD(v4) = *a3;
  }
  result = 0;
  *a3 = v4 + 4;
  return result;
}

uint64_t domain_mngr_utils_CopyString(char *a1, char *__s, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  size_t v8;

  result = 2296389639;
  if (a1 && __s)
  {
    v7 = strlen(__s);
    if (v7 >= a3)
      v8 = a3 - 1;
    else
      v8 = v7;
    if ((_DWORD)v8)
      strncpy(a1, __s, v8);
    else
      v8 = 0;
    result = 0;
    a1[v8] = 0;
  }
  return result;
}

uint64_t domain_mngr_utils_DuplicateString(uint64_t a1, char *__s, char **a3)
{
  int v6;
  char *v7;

  v6 = strlen(__s);
  v7 = (char *)heap_Alloc(a1, (v6 + 1));
  *a3 = v7;
  if (!v7)
    return 2296389642;
  strcpy(v7, __s);
  return 0;
}

uint64_t domain_mngr_utils_ListContainsString(uint64_t __s1, char *__s2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (__s1)
  {
    v3 = (char *)__s1;
    __s1 = 0;
    if (__s2)
    {
      if (*v3)
      {
        if (*__s2)
        {
          __s1 = (uint64_t)strstr(v3, __s2);
          if (__s1)
          {
            v4 = __s1;
            v5 = strlen(__s2);
            do
            {
              if ((char *)v4 == v3 || *(_BYTE *)(v4 - 1) == 124)
              {
                __s1 = 1;
                if (!*(_BYTE *)(v4 + v5) || *(_BYTE *)(v4 + v5) == 124)
                  break;
              }
              __s1 = (uint64_t)strstr((char *)(v4 + v5), __s2);
              v4 = __s1;
            }
            while (__s1);
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return __s1;
}

uint64_t domain_mngr_utils_IsActiveVoiceAddon(uint64_t a1, char *a2, char *a3, char *a4, char *a5, int *a6)
{
  uint64_t v7;
  uint64_t result;
  size_t v14;
  char *v15;
  size_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t Str;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  size_t v30;
  int v31;
  char *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  char *v61;
  char *__s1;
  char *__s;
  char *v64;
  char *v65;
  char *v66;

  v64 = 0;
  v65 = 0;
  v7 = 2296389642;
  __s1 = 0;
  __s = 0;
  result = 2296389639;
  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        *a6 = 0;
        result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v65);
        if ((result & 0x80000000) == 0)
        {
          if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceoperatingpoint", &__s) & 0x80000000) != 0)
            v14 = 0;
          else
            v14 = strlen(__s) + 1;
          if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"vopversion", &__s1) & 0x80000000) != 0
            || (v15 = __s1, !strcmp(__s1, "0.0.0")))
          {
            v16 = 0;
          }
          else
          {
            v16 = strlen(v15) + 1;
          }
          v17 = strlen(v65);
          v18 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v14 + v16 + v17 + 14));
          if (!v18)
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v19, v20, v21, v22, v59);
            return 2296389642;
          }
          v23 = v18;
          strcpy(v18, "voiceaddons.");
          v24 = strlen(v18);
          domain_mngr_utils_StrToLower(&v23[v24], v65);
          if (v14)
          {
            *(_WORD *)&v23[strlen(v23)] = 46;
            strcat(v23, __s);
          }
          if (v16)
          {
            *(_WORD *)&v23[strlen(v23)] = 46;
            strcat(v23, __s1);
          }
          Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)v23, &v64);
          if ((Str & 0x80000000) != 0)
          {
            v7 = Str;
          }
          else
          {
            v26 = v64;
            *a6 = 0;
            v27 = strchr(v26, 59);
            if (!v27)
              goto LABEL_35;
            v28 = v27;
            v60 = a4;
            v61 = a5;
            v29 = 0;
            do
            {
              v30 = strlen(a2);
              if (v30 == v28 - v26)
              {
                if (LH_strnicmp((uint64_t)v26, (uint64_t)a2, v30))
                {
                  v29 = *a6;
                  v31 = *a6;
                }
                else
                {
                  v29 = 1;
                  *a6 = 1;
                  v31 = 1;
                }
              }
              else
              {
                v31 = 0;
              }
              v26 = v28 + 1;
              v32 = strchr(v28 + 1, 59);
              if (v31)
                break;
              v28 = v32;
            }
            while (v32);
            if (v29)
            {
              v33 = strlen(a2);
              v34 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v33 + 26));
              if (v34)
              {
                v39 = (uint64_t)v34;
                strcpy(v34, "voiceaddonrawdataversion.");
                v40 = strlen(v34);
                domain_mngr_utils_StrToLower((_BYTE *)(v39 + v40), a2);
                v66 = 0;
                if (a3
                  && *a3
                  && (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), v39, &v66) & 0x80000000) == 0
                  && LH_stricmp(v66, a3))
                {
                  v41 = 0;
                }
                else
                {
                  v44 = strlen(a2);
                  v45 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v44 + 28));
                  v41 = (uint64_t)v45;
                  if (!v45)
                  {
                    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v46, v47, v48, v49, v59);
                    v51 = 0;
                    goto LABEL_53;
                  }
                  strcpy(v45, "voiceaddonreductionversion.");
                  v50 = strlen(v45);
                  domain_mngr_utils_StrToLower((_BYTE *)(v41 + v50), a2);
                  if (!domain_mngr_utils_ReductionVersionCondition(a1, v61, v41))
                  {
                    v52 = strlen(a2);
                    v53 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v52 + 21));
                    v51 = (uint64_t)v53;
                    if (!v53)
                    {
                      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v54, v55, v56, v57, v59);
                      goto LABEL_53;
                    }
                    strcpy(v53, "voiceaddonreduction.");
                    v58 = strlen(v53);
                    domain_mngr_utils_StrToLower((_BYTE *)(v51 + v58), a2);
                    if (!v60 || !*v60 || !domain_mngr_utils_ReductionTypeVersionCondition(a1, v61, v60, v51))
                    {
                      v7 = 0;
                      goto LABEL_53;
                    }
                    goto LABEL_44;
                  }
                }
                v51 = 0;
LABEL_44:
                v7 = 0;
                *a6 = 0;
LABEL_53:
                heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
                heap_Free(*(_QWORD **)(a1 + 8), v39);
                if (v51)
                  heap_Free(*(_QWORD **)(a1 + 8), v51);
                if (!v41)
                  return v7;
                v42 = *(_QWORD **)(a1 + 8);
                v43 = v41;
LABEL_38:
                heap_Free(v42, v43);
                return v7;
              }
              log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v35, v36, v37, v38, v59);
            }
            else
            {
LABEL_35:
              v7 = 0;
            }
          }
          v42 = *(_QWORD **)(a1 + 8);
          v43 = (uint64_t)v23;
          goto LABEL_38;
        }
      }
    }
  }
  return result;
}

uint64_t domain_mngr_utils_StrToLower(_BYTE *a1, char *__s)
{
  char *v2;
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __darwin_ct_rune_t v8;

  v2 = __s;
  result = strlen(__s);
  v5 = result;
  if (result)
  {
    v6 = a1;
    v7 = result;
    do
    {
      v8 = *v2++;
      result = __tolower(v8);
      *v6++ = result;
      --v7;
    }
    while (v7);
  }
  a1[v5] = 0;
  return result;
}

BOOL domain_mngr_utils_ReductionVersionCondition(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;

  v5 = 0;
  return a2
      && *a2
      && (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), a3, &v5) & 0x80000000) == 0
      && LH_stricmp(v5, a2);
}

BOOL domain_mngr_utils_ReductionTypeVersionCondition(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v8;

  v8 = 0;
  return (!a2 || !*a2 || LH_stricmp(a2, "null"))
      && (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), a4, &v8) & 0x80000000) == 0
      && LH_stricmp(v8, a3);
}

uint64_t activeprompt_db_ObjClose(uint64_t a1, int a2)
{
  uint64_t inited;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;
  char *__s;
  char *v30;

  v28 = 0;
  if (!a1)
    return 2296389639;
  inited = InitRsrcFunction(**(_WORD ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (!a2)
  {
    v5 = *(uint64_t **)(*(_QWORD *)a1 + 16);
    __s = 0;
    v30 = 0;
    v6 = *(_QWORD *)(a1 + 64);
    if (!v6)
      goto LABEL_18;
    if ((paramc_ParamGetStr(v5[5], v6, &v30) & 0x80000000) != 0)
    {
LABEL_17:
      heap_Free((_QWORD *)v5[1], *(_QWORD *)(a1 + 64));
      *(_QWORD *)(a1 + 64) = 0;
LABEL_18:
      v18 = *(_QWORD *)(a1 + 72);
      if (v18)
      {
        heap_Free((_QWORD *)v5[1], v18);
        *(_QWORD *)(a1 + 72) = 0;
      }
LABEL_20:
      if (__s)
        heap_Free((_QWORD *)v5[1], (uint64_t)__s);
      goto LABEL_22;
    }
    if ((domain_mngr_utils_DuplicateString(v5[1], v30, &__s) & 0x80000000) == 0)
    {
      paramc_ParamRelease(v5[5]);
      v11 = __s;
      v12 = strchr(__s, 59);
      if (v12)
      {
        v13 = v12;
        while (1)
        {
          *v13 = 0;
          v14 = *(const char **)(*(_QWORD *)(a1 + 8) + 72);
          if (v14)
          {
            if (!strcmp(v11, v14))
              break;
          }
          *v13 = 59;
          v11 = v13 + 1;
          v13 = strchr(v13 + 1, 59);
          if (!v13)
            goto LABEL_17;
        }
        v16 = v13 + 1;
        v17 = strlen(v16);
        memmove(v11, v16, v17 + 1);
        if ((paramc_ParamSetStr(v5[5], *(_QWORD *)(a1 + 64), __s) & 0x80000000) != 0)
          goto LABEL_20;
      }
      goto LABEL_17;
    }
    log_OutPublic(v5[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v7, v8, v9, v10, v27);
  }
LABEL_22:
  v19 = *(_QWORD *)(a1 + 8);
  if (v19)
  {
    v15 = objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 48), v19 + 296);
    if ((v15 & 0x80000000) != 0)
      return v15;
  }
  else
  {
    v15 = 0;
  }
  v20 = *(_QWORD *)(a1 + 48);
  if (v20)
    heap_Free(*(_QWORD **)(v28 + 8), v20);
  v21 = *(_QWORD *)(a1 + 56);
  if (v21)
    heap_Free(*(_QWORD **)(v28 + 8), v21);
  v22 = *(_QWORD *)(a1 + 80);
  if (v22)
    heap_Free(*(_QWORD **)(v28 + 8), v22);
  v23 = *(_QWORD *)(a1 + 40);
  if (v23)
    heap_Free(*(_QWORD **)(v28 + 8), v23);
  v24 = *(_QWORD *)(a1 + 64);
  if (v24)
  {
    heap_Free(*(_QWORD **)(v28 + 8), v24);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    heap_Free(*(_QWORD **)(v28 + 8), v25);
    *(_QWORD *)(a1 + 72) = 0;
  }
  heap_Free(*(_QWORD **)(v28 + 8), a1);
  return v15;
}

uint64_t activeprompt_db_LoadData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[16];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  __strcpy_chk();
  *(_QWORD *)&v14 = a3;
  DWORD2(v14) = a4;
  result = objc_GetAddRefCountedObject(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))apdb_loc_ObjcLoadData, (void (*)(_QWORD, _QWORD, __int128 *))apdb_loc_ObjcUnloadData, (uint64_t)v13, &v12);
  if ((result & 0x80000000) != 0)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v12 + 32);
  *a5 = v11;
  return result;
}

uint64_t apdb_loc_ObjcLoadData(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t StringZ;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  char **v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t U32;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v85;
  int v86;
  const char *v87;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  _DWORD *v94;
  unsigned int v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  int v99[2];
  int v100;
  int v101;
  unsigned __int8 v102;
  char __s[256];
  __int128 __s1;
  __int16 v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v93 = 0;
  inited = InitRsrcFunction(a1, a2, &v93);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = 2296389642;
  v11 = (uint64_t *)heap_Calloc(*(_QWORD **)(v93 + 8), 1, 552);
  if (!v11)
    return v10;
  v12 = v11;
  inited = ssftriff_reader_ObjOpenEx(a1, a2, 4 * (*(_QWORD *)(a5 + 256) != 0), (const char *)a5, *(_QWORD *)(a5 + 256), *(_DWORD *)(a5 + 264), "APDB", 775, v11);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = ssftriff_reader_DetachChunkData(*v12, v12 + 2, v12 + 1, v13, v14, v15, v16, v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  strcpy((char *)v12 + 296, (const char *)a5);
  v102 = 0;
  v101 = 0;
  v100 = 0;
  v98 = 0;
  *(_QWORD *)v99 = 0;
  v18 = InitRsrcFunction(a1, a2, &v98);
  if ((v18 & 0x80000000) != 0)
  {
    v10 = v18;
    goto LABEL_182;
  }
  v19 = *(_QWORD **)(v98 + 8);
  v96 = xmmword_1EA9485C0;
  *(_QWORD *)&v97 = activeprompt_db_FreePartsGroup;
  v92 = v12 + 33;
  if (!vector_ObjOpen(v19, &v96, 1, v12 + 33))
  {
    log_OutPublic(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v20, v21, v22, v23, v89);
    goto LABEL_182;
  }
  v91 = v12 + 25;
  do
  {
    StringZ = ssftriff_reader_OpenChunk(*v12, &v101, (unsigned int *)&v100, v99, v20, v21, v22, v23);
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_180;
    if (!(v101 ^ 0x52545441 | v102))
    {
      v28 = v100;
      if (!v100)
        goto LABEL_143;
      v29 = 0;
      while (1)
      {
        LOBYTE(__s1) = 0;
        __s[0] = 0;
        LODWORD(v96) = 64;
        StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v99, v28, v29, &__s1, (unsigned int *)&v96);
        if ((StringZ & 0x80000000) == 0 && v29 < v100)
        {
          v29 += v96;
          LODWORD(v96) = 256;
          StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v99, v100, v29, __s, (unsigned int *)&v96);
        }
        if ((StringZ & 0x80000000) != 0)
          goto LABEL_143;
        v33 = v96;
        if ((_DWORD)__s1 == 1836216134 && *(_DWORD *)((char *)&__s1 + 3) == 7627117)
        {
          domain_mngr_utils_CopyString((char *)v12 + 32, __s, 0xCu);
          v48 = 0;
          while (strcmp((const char *)v12 + 32, off_1EA9485A8[v48]))
          {
            if (++v48 == 2)
            {
              log_OutText(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB Format: %s not implemented", v49, v50, v51, (uint64_t)(v12 + 4));
              StringZ = 2296389633;
              goto LABEL_143;
            }
          }
          goto LABEL_105;
        }
        if (*((_BYTE *)v12 + 32))
        {
          if ((_DWORD)__s1 == 6778444)
          {
            v52 = (char *)v12 + 44;
            goto LABEL_99;
          }
          if ((_QWORD)__s1 == 0x656D614E6F6156)
          {
            v54 = *(_QWORD *)(v98 + 8);
            v55 = (char **)(v12 + 9);
LABEL_103:
            StringZ = domain_mngr_utils_DuplicateString(v54, __s, v55);
            goto LABEL_104;
          }
          if ((_DWORD)__s1 == 1667854166 && WORD2(__s1) == 101)
          {
            v54 = *(_QWORD *)(v98 + 8);
            v55 = (char **)(v12 + 8);
            goto LABEL_103;
          }
          if ((_QWORD)__s1 == 0x5661746144776152 && *(_QWORD *)((char *)&__s1 + 7) == 0x6E6F6973726556)
          {
            v52 = (char *)(v12 + 10);
            goto LABEL_99;
          }
          if ((_QWORD)__s1 == 0x6F69746375646552 && WORD4(__s1) == 110)
          {
            v52 = (char *)(v12 + 11);
            goto LABEL_112;
          }
          if (!((unint64_t)__s1 ^ 0x6F69746375646552 | *((_QWORD *)&__s1 + 1) ^ 0x6E6F69737265566ELL | v105))
          {
            v52 = (char *)v12 + 100;
LABEL_99:
            v53 = 8;
LABEL_100:
            domain_mngr_utils_CopyString(v52, __s, v53);
            goto LABEL_104;
          }
          if ((_QWORD)__s1 == 0x7954444974696E55 && *(_QWORD *)((char *)&__s1 + 3) == 0x65707954444974)
          {
            v52 = (char *)v12 + 108;
LABEL_112:
            v53 = 12;
            goto LABEL_100;
          }
          if (!((unint64_t)__s1 ^ 0x6D6F436563696F56 | *((_QWORD *)&__s1 + 1) ^ 0x4449746E656E6F70 | v105))
          {
            domain_mngr_utils_CopyString((char *)v12 + 120, __s, 0x28u);
            *((_DWORD *)v12 + 40) = 1;
            goto LABEL_104;
          }
          if ((_DWORD)__s1 == 1634561860 && *(_DWORD *)((char *)&__s1 + 3) == 7235937)
          {
            v54 = *(_QWORD *)(v98 + 8);
            v55 = (char **)(v12 + 21);
            goto LABEL_103;
          }
          if ((_DWORD)__s1 == 2035568212 && *(_DWORD *)((char *)&__s1 + 3) == 6647929)
          {
            v54 = *(_QWORD *)(v98 + 8);
            v55 = (char **)(v12 + 25);
            goto LABEL_103;
          }
          if ((_QWORD)__s1 == 0x7550657361726850 && *((_QWORD *)&__s1 + 1) == 0x6F6974617574636ELL && v105 == 110)
          {
            v54 = *(_QWORD *)(v98 + 8);
            v55 = (char **)(v12 + 23);
            goto LABEL_103;
          }
          if ((_QWORD)__s1 == 0x74636E75506C6C41 && *(_QWORD *)((char *)&__s1 + 7) == 0x6E6F6974617574)
          {
            v54 = *(_QWORD *)(v98 + 8);
            v55 = (char **)(v12 + 24);
            goto LABEL_103;
          }
          if ((_QWORD)__s1 != 0x6953444974696E55 || *(_QWORD *)((char *)&__s1 + 3) != 0x657A6953444974)
          {
            if (__s1 ^ 0x65646F4D | BYTE4(__s1))
            {
              if ((_QWORD)__s1 != 0x6966667553495255 || WORD4(__s1) != 120)
              {
                if ((_QWORD)__s1 == 0x6874724F69724FLL)
                {
                  *((_DWORD *)v12 + 7) = 1;
                }
                else if ((_QWORD)__s1 == 0x573A563855786449 && *(_QWORD *)((char *)&__s1 + 7) == 0x6D725064726F57)
                {
                  *((_DWORD *)v12 + 52) = 1;
                  ++*((_WORD *)v12 + 106);
                  *((_WORD *)v12 + 107) = atoi(__s);
                }
                else if ((_QWORD)__s1 == 0x503A563855786449 && *(_QWORD *)((char *)&__s1 + 7) == 0x646E4273726850)
                {
                  *((_DWORD *)v12 + 55) = 1;
                  ++*((_WORD *)v12 + 106);
                  *((_WORD *)v12 + 108) = atoi(__s);
                }
                else if (!strcmp((const char *)&__s1, "SupportBackendPredictedSilenceDuration"))
                {
                  if ((unsigned __int16)atoi(__s))
                    *((_DWORD *)v12 + 57) = 1;
                  else
                    *((_DWORD *)v12 + 57) = 0;
                }
                goto LABEL_104;
              }
              v54 = *(_QWORD *)(v98 + 8);
              v55 = (char **)(v12 + 22);
              goto LABEL_103;
            }
            v52 = (char *)v12 + 52;
            goto LABEL_112;
          }
          if (atoi(__s) == 4)
            goto LABEL_104;
          log_OutPublic(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v56, v30, v31, v32, v89);
        }
        else
        {
          log_OutText(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB Format: 7.0.0 not supported", v30, v31, v32, v89);
        }
        StringZ = 2296389633;
LABEL_104:
        log_OutText(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB attribute %s=%s", v30, v31, v32, (uint64_t)&__s1);
LABEL_105:
        if ((StringZ & 0x80000000) == 0)
        {
          v29 += v33;
          v28 = v100;
          if (v29 < v100)
            continue;
        }
        goto LABEL_143;
      }
    }
    if (v101 ^ 0x50474850 | v102)
    {
      if (!(v101 ^ 0x50525453 | v102))
      {
        v12[30] = *(_QWORD *)v99;
        goto LABEL_144;
      }
      if (!(v101 ^ 0x50444955 | v102))
      {
        v12[31] = *(_QWORD *)v99;
        goto LABEL_144;
      }
      if (!(v101 ^ 0x50445257 | v102))
      {
        v12[32] = *(_QWORD *)v99;
        goto LABEL_144;
      }
      if (v101 ^ 0x52505041 | v102 && v101 ^ 0x50434552 | v102)
      {
        if (v101 ^ 0x4C414E54 | v102)
        {
          if (v101 ^ 0x50563855 | v102)
          {
            if (v101 ^ 0x31564C41 | v102)
            {
              if (v101 ^ 0x32564C41 | v102)
                log_OutText(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"Unknown data: %s for %s", v24, v25, v26, (uint64_t)&v101);
              else
                v12[36] = *(_QWORD *)v99;
            }
            else
            {
              v12[35] = *(_QWORD *)v99;
            }
          }
          else
          {
            v12[34] = *(_QWORD *)v99;
          }
          goto LABEL_144;
        }
        LODWORD(v94) = 0;
        v95 = 0;
        *(_QWORD *)&v96 = 0;
        U32 = domain_mngr_utils_GetU32(*(uint64_t *)v99, v100, &v94, &v95);
        if ((U32 & 0x80000000) != 0)
        {
          StringZ = U32;
        }
        else
        {
          v75 = v12[30];
          v76 = v95;
          StringZ = domain_mngr_utils_GetU32(*(uint64_t *)v99, v100, &v94, &v95);
          if ((StringZ & 0x80000000) == 0)
          {
            v90 = (char *)(v75 + v76);
            v77 = v12[30];
            v78 = v95;
            if (vector_GetElemAt(v12[33], 0, &v96))
            {
              v83 = 1;
              while (domain_mngr_utils_ListContainsString(*(_QWORD *)(v96 + 8), (char *)(v77 + v78)) != 1)
              {
                if (!vector_GetElemAt(*v92, v83++, &v96))
                  goto LABEL_169;
              }
              v85 = strlen(*(const char **)(v96 + 8));
              v86 = strlen(v90);
              v87 = (const char *)heap_Realloc(*(uint64_t **)(v98 + 8), *(_QWORD *)(v96 + 8), (v85 + v86 + 2));
              if (!v87)
              {
LABEL_162:
                log_OutPublic(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v70, v71, v72, v73, v89);
                StringZ = 2296389642;
                goto LABEL_143;
              }
              *(_QWORD *)(v96 + 8) = v87;
              *(_WORD *)&v87[strlen(v87)] = 124;
              strcat(*(char **)(v96 + 8), v90);
            }
            else
            {
LABEL_169:
              log_OutPublic(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 47017, "%s%s%s%s", v79, v80, v81, v82, "chunk");
              StringZ = 2296389636;
            }
          }
        }
      }
      else
      {
        v96 = xmmword_1EA9485D8;
        v97 = unk_1EA9485E8;
        v95 = 0;
        if (v101 ^ 0x50434552 | v102)
        {
          v94 = 0;
          if (vector_GetElemAt(*v92, 0, &v94))
          {
            v68 = 1;
            do
            {
              if (*v94 == 1)
                log_OutPublic(*(_QWORD *)(v98 + 32), (uint64_t)"DOMAIN_MNGR", 47020, "%s%s", v64, v65, v66, v67, "chunk");
            }
            while (vector_GetElemAt(*v92, v68++, &v94));
          }
        }
        else
        {
          *((_DWORD *)v12 + 6) = 1;
          LODWORD(v96) = 2;
        }
        if (*v91 && *(_BYTE *)*v91)
          *((_QWORD *)&v96 + 1) = *v91;
        StringZ = domain_mngr_utils_GetU32(*(uint64_t *)v99, v100, &v95, &v97);
        if ((StringZ & 0x80000000) == 0)
        {
          *((_QWORD *)&v97 + 1) = *(_QWORD *)v99 + v95;
          if (!vector_Add(*v92, &v96))
            goto LABEL_162;
        }
      }
    }
    else
    {
      LODWORD(v96) = 0;
      *((_DWORD *)v12 + 56) = 1;
      v12[29] = heap_Calloc(*(_QWORD **)(v98 + 8), 100, 8);
      v57 = v100;
      if (v100)
      {
        v58 = 0;
        do
        {
          LOBYTE(__s1) = 0;
          __s[0] = 0;
          LODWORD(v96) = 64;
          StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v99, v57, v58, &__s1, (unsigned int *)&v96);
          if ((StringZ & 0x80000000) == 0 && v58 < v100)
          {
            v58 += v96;
            LODWORD(v96) = 256;
            StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v99, v100, v58, __s, (unsigned int *)&v96);
          }
          if ((StringZ & 0x80000000) != 0)
            break;
          v59 = v96;
          if (strlen((const char *)&__s1) == 4
            && __s1 == 80
            && BYTE1(__s1) == 71
            && SBYTE2(__s1) >= 48
            && SBYTE2(__s1) <= 57
            && SBYTE3(__s1) >= 48
            && SBYTE3(__s1) <= 57)
          {
            v60 = BYTE3(__s1) + 10 * BYTE2(__s1) - 528;
            v61 = *(char **)(v12[29] + 8 * v60);
            if (!v61)
            {
              v62 = strlen(__s);
              *(_QWORD *)(v12[29] + 8 * v60) = heap_Calloc(*(_QWORD **)(v98 + 8), (v62 + 1), 1);
              v61 = *(char **)(v12[29] + 8 * v60);
            }
            strcpy(v61, __s);
          }
          v58 += v59;
          v57 = v100;
        }
        while (v58 < v100);
      }
    }
LABEL_143:
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_180;
LABEL_144:
    v63 = ssftriff_reader_CloseChunk(*v12);
  }
  while ((v63 & 0x80000000) == 0);
  StringZ = v63;
LABEL_180:
  v10 = StringZ;
  if ((StringZ & 0x1FFF) == 0x14)
  {
    v10 = 0;
    goto LABEL_183;
  }
LABEL_182:
  v12 = 0;
LABEL_183:
  *(_QWORD *)(a4 + 32) = v12;
  return v10;
}

uint64_t apdb_loc_ObjcUnloadData(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v34 = 0;
  inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) == 0)
  {
    v12 = *(_QWORD *)(a3 + 32);
    if (v12)
    {
      v13 = *(_QWORD **)(v12 + 16);
      if (v13)
      {
        ssftriff_reader_ReleaseChunkData(v13, v4, v5, v6, v7, v8, v9, v10);
        if (*(_QWORD *)v12)
        {
          v21 = ssftriff_reader_ObjClose(*(_QWORD **)v12, v14, v15, v16, v17, v18, v19, v20);
          if (v21 >= 0)
            inited = inited;
          else
            inited = v21;
        }
      }
      v22 = *(_QWORD *)(v12 + 72);
      if (v22)
        heap_Free(*(_QWORD **)(v34 + 8), v22);
      v23 = *(_QWORD *)(v12 + 64);
      if (v23)
        heap_Free(*(_QWORD **)(v34 + 8), v23);
      v24 = *(_QWORD *)(v12 + 168);
      if (v24)
        heap_Free(*(_QWORD **)(v34 + 8), v24);
      v25 = *(_QWORD *)(v12 + 200);
      if (v25)
        heap_Free(*(_QWORD **)(v34 + 8), v25);
      v26 = *(_QWORD *)(v12 + 176);
      if (v26)
        heap_Free(*(_QWORD **)(v34 + 8), v26);
      v27 = *(_QWORD *)(v12 + 184);
      if (v27)
        heap_Free(*(_QWORD **)(v34 + 8), v27);
      v28 = *(_QWORD *)(v12 + 192);
      if (v28)
        heap_Free(*(_QWORD **)(v34 + 8), v28);
      v29 = *(_QWORD *)(v12 + 264);
      if (v29)
        vector_ObjClose(v29);
      if (*(_DWORD *)(v12 + 224) == 1)
      {
        for (i = 0; i != 800; i += 8)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v12 + 232) + i);
          if (v31)
            heap_Free(*(_QWORD **)(v34 + 8), v31);
        }
        v32 = *(_QWORD *)(v12 + 232);
        if (v32)
          heap_Free(*(_QWORD **)(v34 + 8), v32);
      }
      heap_Free(*(_QWORD **)(v34 + 8), v12);
    }
  }
  return inited;
}

uint64_t activeprompt_db_ObjOpen(uint64_t a1, uint64_t a2, char *a3, char *a4, const void *a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  int v43;
  char *v44;
  size_t v45;
  int v46;
  char *v47;
  const char *v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  size_t v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  int Str;
  const char *v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  const char *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  size_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD **v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  size_t v93;
  size_t v94;
  int v95;
  unsigned int *v96;
  char **v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  char *v112;
  uint64_t v113;
  int v114;
  int v115;
  char *v116;
  char *v117;
  size_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  const char *v123;
  uint64_t v124;
  char *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char v130;
  size_t v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *__s[2];
  __int128 v137;
  __int128 v138;
  char *v139[2];
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char *v143[2];
  __int128 v144;
  __int128 v145;
  char *v146[2];
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  _QWORD **v150;
  uint64_t v151;
  uint64_t v152;
  char *__s1;
  char *__s2[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  char __dst[511];
  char v162;
  char __str[512];
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v8 = 2296389642;
  v134 = 0;
  v135 = 0;
  if (!a8)
    return 2296389639;
  inited = InitRsrcFunction(*(_WORD **)a2, *(_QWORD *)(a2 + 8), &v135);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a8 = 0;
  if (a4 && *a4)
  {
    strncpy(__dst, a4, 0x1FFuLL);
    v162 = 0;
  }
  else
  {
    __s2[0] = 0;
    if (cupreader_IsCupInTheScope(v135, __s2))
    {
      snprintf(__str, 0x200uLL, "cup:%s", __s2[0]);
      snprintf(__dst, 0x200uLL, "cup:%s%p");
    }
    else
    {
      snprintf(__str, 0x200uLL, "in-memory APDB%p", a5);
      snprintf(__dst, 0x200uLL, "in-memory APDB%p");
    }
    v162 = 0;
    __str[511] = 0;
    a4 = __str;
  }
  v17 = activeprompt_db_LoadData(a2, (uint64_t)__dst, (uint64_t)a5, a6, &v134);
  if ((v17 & 0x80000000) != 0)
  {
    v16 = v17;
    log_OutPublic(*(_QWORD *)(v135 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v18, v19, v20, v21, v126);
    goto LABEL_20;
  }
  v22 = heap_Calloc(*(_QWORD **)(v135 + 8), 1, 88);
  *a8 = v22;
  if (!v22)
    goto LABEL_18;
  *(_QWORD *)(v22 + 8) = v134;
  *(_QWORD *)*a8 = a2;
  v27 = *a8;
  *(_DWORD *)(v27 + 24) = 1;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(*a8 + 64) = 0;
  v28 = domain_mngr_utils_DuplicateString(*(_QWORD *)(v135 + 8), a4, (char **)(*a8 + 56));
  if ((v28 & 0x80000000) != 0)
    goto LABEL_18;
  v29 = *a8;
  v30 = *(_QWORD *)(*a8 + 8);
  v31 = *(char **)(v30 + 176);
  if (v31)
  {
    v32 = domain_mngr_utils_DuplicateString(*(_QWORD *)(v135 + 8), v31, (char **)(v29 + 40));
    if ((v32 & 0x80000000) == 0)
    {
      v16 = v32;
      v29 = *a8;
      v30 = *(_QWORD *)(*a8 + 8);
      goto LABEL_24;
    }
LABEL_18:
    log_OutPublic(*(_QWORD *)(v135 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v23, v24, v25, v26, v126);
    v16 = 2296389642;
    goto LABEL_20;
  }
  v16 = v28;
LABEL_24:
  if (*(_DWORD *)(v30 + 24) != 1)
    goto LABEL_41;
  v34 = *(uint64_t **)(*(_QWORD *)v29 + 16);
  __s2[0] = 0;
  v143[0] = 0;
  __s[0] = 0;
  if ((hlp_GetMimeParam((uint64_t)v34, a3, "urisuffix", v143) & 0x80000000) == 0)
  {
    v35 = *(_QWORD *)(v29 + 40);
    if (v35)
      heap_Free((_QWORD *)v34[1], v35);
    *(char **)(v29 + 40) = v143[0];
    if ((hlp_GetMimeParam((uint64_t)v34, a3, "uriprefix", v143) & 0x80000000) != 0)
      goto LABEL_29;
LABEL_34:
    *(_DWORD *)(v29 + 32) = 2;
    v40 = *(_QWORD *)(v29 + 80);
    if (v40)
      heap_Free((_QWORD *)v34[1], v40);
    v16 = 0;
    *(char **)(v29 + 80) = v143[0];
    goto LABEL_37;
  }
  if ((hlp_GetMimeParam((uint64_t)v34, a3, "uriprefix", v143) & 0x80000000) == 0)
    goto LABEL_34;
  if (IsRecordingCS((_QWORD *)v29, (uint64_t)a4, (uint64_t *)__s2))
  {
    *(_DWORD *)(v29 + 32) = 1;
    v70 = *(_QWORD *)(v29 + 80);
    if (v70)
      heap_Free((_QWORD *)v34[1], v70);
    v71 = strlen(__s2[0]);
    v72 = (char *)heap_Alloc(v34[1], v71 + 125);
    *(_QWORD *)(v29 + 80) = v72;
    if (v72)
    {
      strcpy(v72, "x-vocalizer-speechbase://");
      strcat(*(char **)(v29 + 80), __s2[0]);
      v16 = 0;
    }
    else
    {
      log_OutPublic(v34[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v73, v74, v75, v76, v126);
      v16 = 2296389642;
    }
    goto LABEL_37;
  }
LABEL_29:
  if (*a4)
  {
    if ((brk_TagQueryEx(v34[3], (uint64_t)a4, (uint64_t)"BROKERSTRING", 1, (uint64_t)__s) & 0x80000000) != 0)
    {
      *(_DWORD *)(v29 + 32) = 2;
      v16 = domain_mngr_utils_DuplicateString(v34[1], a4, (char **)(v29 + 48));
      goto LABEL_37;
    }
    brk_TagRelease(v34[3], (uint64_t)__s[0]);
    __s[0] = 0;
  }
  log_OutPublic(v34[4], (uint64_t)"DOMAIN_MNGR", 47018, "%s%s", v36, v37, v38, v39, "apdb");
  v16 = 2296389652;
LABEL_37:
  if (__s2[0])
    heap_Free((_QWORD *)v34[1], (uint64_t)__s2[0]);
  if ((v16 & 0x80000000) != 0)
    goto LABEL_20;
  v29 = *a8;
  v30 = *(_QWORD *)(*a8 + 8);
LABEL_41:
  if (!*(_QWORD *)(v30 + 72))
    goto LABEL_82;
  v41 = *(_QWORD *)(*(_QWORD *)v29 + 16);
  v143[0] = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(v41 + 40), (uint64_t)"voice", v143) & 0x80000000) != 0)
  {
    v43 = 0;
    goto LABEL_66;
  }
  __s[0] = 0;
  __s1 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(v41 + 40), (uint64_t)"voiceoperatingpoint", __s) & 0x80000000) != 0)
    v42 = 0;
  else
    v42 = strlen(__s[0]) + 1;
  if ((paramc_ParamGetStr(*(_QWORD *)(v41 + 40), (uint64_t)"vopversion", &__s1) & 0x80000000) != 0
    || (v44 = __s1, !strcmp(__s1, "0.0.0")))
  {
    v45 = 0;
  }
  else
  {
    v45 = strlen(v44) + 1;
  }
  v46 = strlen(v143[0]);
  v47 = (char *)heap_Calloc(*(_QWORD **)(v41 + 8), 1, (v42 + v45 + v46 + 14));
  *(_QWORD *)(v29 + 64) = v47;
  if (!v47)
    goto LABEL_80;
  v131 = v42;
  v133 = v41;
  strcpy(v47, "voiceaddons.");
  v48 = *(const char **)(v29 + 64);
  v49 = strlen(v48);
  v50 = v143[0];
  if (*v143[0])
  {
    v51 = 0;
    LODWORD(v52) = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v29 + 64) + (v49 + v52)) = __tolower(v50[v51]);
      v52 = (v52 + 1);
      v50 = v143[0];
      v53 = strlen(v143[0]);
      v51 = v52;
    }
    while (v53 > v52);
    v48 = *(const char **)(v29 + 64);
  }
  else
  {
    LODWORD(v52) = 0;
  }
  v48[(v52 + v49)] = 0;
  if (v131)
  {
    *(_WORD *)(*(_QWORD *)(v29 + 64) + strlen(*(const char **)(v29 + 64))) = 46;
    strcat(*(char **)(v29 + 64), __s[0]);
  }
  v41 = v133;
  if (v45)
  {
    *(_WORD *)(*(_QWORD *)(v29 + 64) + strlen(*(const char **)(v29 + 64))) = 46;
    strcat(*(char **)(v29 + 64), __s1);
  }
  v54 = *(const char **)(*(_QWORD *)(v29 + 8) + 72);
  v56 = *(char **)(v29 + 56);
  v55 = *(_QWORD *)(v29 + 64);
  __s2[0] = 0;
  LODWORD(v152) = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(v133 + 40), v55, __s2);
  v43 = 0;
  if (!v54 || Str < 0 || !__s2[0])
    goto LABEL_66;
  if (strstr(__s2[0], v54))
  {
    v43 = 1;
LABEL_66:
    v16 = 0;
    if (v43)
      goto LABEL_82;
    goto LABEL_67;
  }
  if (!v56 || !*v56 || (int)IsThisUrlOrRealPath(v56, &v152) < 1)
  {
    v113 = 0;
LABEL_129:
    v130 = 1;
    goto LABEL_130;
  }
  v111 = v152;
  v112 = strrchr(v56, 47);
  if (v111)
  {
    if (!v112)
    {
      v8 = 2296389639;
      goto LABEL_80;
    }
    goto LABEL_141;
  }
  if (v112 || (v112 = strrchr(v56, 92)) != 0)
  {
LABEL_141:
    v113 = v112 - v56 + 1;
    goto LABEL_129;
  }
  v130 = 0;
  v113 = 2;
LABEL_130:
  v114 = strlen(__s2[0]);
  v115 = strlen(v54);
  v132 = v113;
  v116 = (char *)heap_Calloc(*(_QWORD **)(v133 + 8), 1, (v113 + v114 + v115 + 3));
  if (!v116)
    goto LABEL_80;
  v117 = v116;
  strcpy(v116, __s2[0]);
  v118 = strlen(v54);
  v119 = (char *)heap_Calloc(*(_QWORD **)(v133 + 8), 1, v118 + 19);
  if (!v119)
  {
    v120 = (uint64_t)v117;
LABEL_148:
    heap_Free(*(_QWORD **)(v133 + 8), v120);
    goto LABEL_80;
  }
  v120 = (uint64_t)v119;
  strcpy(v119, "voiceaddonbaseuri.");
  strcat(v119, v54);
  v121 = (char *)heap_Calloc(*(_QWORD **)(v133 + 8), 1, v132 + 1);
  if (!v121)
  {
    heap_Free(*(_QWORD **)(v133 + 8), (uint64_t)v117);
    goto LABEL_148;
  }
  v122 = v121;
  if (v132)
  {
    if ((v130 & 1) != 0)
      v123 = v56;
    else
      v123 = "./";
    strncpy(v121, v123, v132);
  }
  v122[v132] = 0;
  v124 = paramc_ParamSetStrPermanent(*(_QWORD *)(v133 + 40), v120, v122);
  heap_Free(*(_QWORD **)(v133 + 8), (uint64_t)v122);
  heap_Free(*(_QWORD **)(v133 + 8), v120);
  if ((v124 & 0x80000000) != 0)
  {
    v120 = (uint64_t)v117;
    v8 = v124;
    goto LABEL_148;
  }
  v125 = strcat(v117, v54);
  *(_WORD *)&v117[strlen(v125)] = 59;
  v16 = paramc_ParamSetStrPermanent(*(_QWORD *)(v133 + 40), v55, v117);
  heap_Free(*(_QWORD **)(v133 + 8), (uint64_t)v117);
  if ((v16 & 0x80000000) != 0)
  {
    v8 = v16;
    goto LABEL_80;
  }
  v41 = v133;
LABEL_67:
  v58 = *(const char **)(*(_QWORD *)(v29 + 8) + 72);
  if (!v58)
    goto LABEL_82;
  v59 = strlen(v58);
  v60 = (char *)heap_Calloc(*(_QWORD **)(v41 + 8), 1, (v59 + 18));
  *(_QWORD *)(v29 + 72) = v60;
  if (!v60)
  {
    log_OutPublic(*(_QWORD *)(v41 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v61, v62, v63, v64, v126);
LABEL_80:
    v16 = v8;
    goto LABEL_20;
  }
  strcpy(v60, "voiceaddonoffset.");
  v65 = strlen(*(const char **)(v29 + 72));
  v66 = v65;
  v67 = *(const char **)(*(_QWORD *)(v29 + 8) + 72);
  if (*v67)
  {
    v68 = 0;
    v69 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v29 + 72) + v66 + v69) = __tolower(v67[v68]);
      v67 = *(const char **)(*(_QWORD *)(v29 + 8) + 72);
      v68 = ++v69;
    }
    while (strlen(v67) > v69);
    *(_BYTE *)(*(_QWORD *)(v29 + 72) + v66 + v69) = 0;
    if ((v16 & 0x80000000) != 0)
    {
LABEL_20:
      if (*a8)
      {
        activeprompt_db_ObjClose(*a8, 0);
        *a8 = 0;
      }
      return v16;
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(v29 + 72) + v65) = 0;
  }
LABEL_82:
  if (!log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)*a8 + 16) + 32)))
    return v16;
  v77 = (_QWORD *)*a8;
  v160 = 0;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  *(_OWORD *)__s2 = 0u;
  v155 = 0u;
  __s1 = 0;
  v152 = 0;
  v151 = 0;
  v150 = 0;
  ssftstring_ObjOpen(*(_QWORD **)(*(_QWORD *)(*v77 + 16) + 8), &v150);
  if (v150)
  {
    activeprompt_db_GetTNTypes((uint64_t)v77, (uint64_t)v150);
    v81 = v150;
  }
  else
  {
    v81 = 0;
  }
  v82 = *(_QWORD *)(*v77 + 16);
  v83 = *(uint64_t ***)(v82 + 32);
  v84 = v77[5];
  v85 = *(_QWORD *)(v77[1] + 192);
  if (v81)
  {
    v129 = *(char **)(v82 + 32);
    v128 = v77[5];
    v127 = *(_QWORD *)(v77[1] + 192);
    ssftstring_CStr((uint64_t)v81);
    v85 = v127;
    v84 = v128;
    v83 = (uint64_t **)v129;
  }
  log_OutTraceTuningData(v83, 203, (uint64_t)"%s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s", v78, v84, v79, v85, v80, "BEG");
  if (v150)
  {
    ssftstring_ObjClose(v150);
    v150 = 0;
  }
  if (vector_GetElemAt(*(_QWORD *)(v77[1] + 264), 0, &v151)
    && *(_DWORD *)v151 == 1
    && vector_GetElemAt(*(_QWORD *)(v77[1] + 264), 1u, &v152)
    && (v86 = v152, *(_DWORD *)v152 == 2))
  {
    v149 = 0;
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    *(_OWORD *)v146 = 0u;
    *(_OWORD *)v143 = 0u;
    v144 = 0u;
    v142 = 0;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    *(_OWORD *)v139 = 0u;
    *(_OWORD *)__s = 0u;
    v137 = 0u;
    v87 = v151;
    hlp_FillActivePrompt((uint64_t)v77, *(_DWORD *)v151, *(unsigned int **)(v151 + 24), 0, (uint64_t)v143);
    hlp_FillActivePrompt((uint64_t)v77, *(_DWORD *)v86, *(unsigned int **)(v86 + 24), 0, (uint64_t)__s);
    v88 = *(_DWORD *)(v87 + 16);
    v89 = *(_DWORD *)(v86 + 16);
    v90 = v89 != 0;
    if (v88 | v89)
    {
      v91 = 0;
      v92 = 0;
      do
      {
        if (v90
          && (v91 == v88
           || (v93 = strlen(v139[0]), v94 = strlen(v146[0]), v93 > v94)
           || v93 == v94
           && (HIDWORD(v137) > HIDWORD(v144) || HIDWORD(v137) == HIDWORD(v144)
                                             && v138 > v145)))
        {
          hlp_TraceContent_AP((uint64_t)v77, (uint64_t)__s);
          if (++v92 < *(_DWORD *)(v152 + 16))
          {
            v95 = *(_DWORD *)v152;
            v96 = (unsigned int *)(*(_QWORD *)(v152 + 24) + 24 * v92);
            v97 = __s;
            v98 = (uint64_t)v77;
            v99 = v92;
LABEL_107:
            hlp_FillActivePrompt(v98, v95, v96, v99, (uint64_t)v97);
          }
        }
        else
        {
          hlp_TraceContent_AP((uint64_t)v77, (uint64_t)v143);
          if (++v91 < *(_DWORD *)(v151 + 16))
          {
            v95 = *(_DWORD *)v151;
            v96 = (unsigned int *)(*(_QWORD *)(v151 + 24) + 24 * v91);
            v97 = v143;
            v98 = (uint64_t)v77;
            v99 = v91;
            goto LABEL_107;
          }
        }
        v88 = *(_DWORD *)(v151 + 16);
        v100 = *(_DWORD *)(v152 + 16);
        v90 = v92 < v100;
      }
      while (v91 < v88 || v92 < v100);
    }
    v102 = 2;
  }
  else
  {
    v102 = 0;
  }
  while (vector_GetElemAt(*(_QWORD *)(v77[1] + 264), v102, &__s1))
  {
    v103 = __s1;
    if (*((_DWORD *)__s1 + 4))
    {
      v104 = 0;
      v105 = 0;
      do
      {
        hlp_FillActivePrompt((uint64_t)v77, *(_DWORD *)v103, (unsigned int *)(*((_QWORD *)v103 + 3) + v104), v105, (uint64_t)__s2);
        hlp_TraceContent_AP((uint64_t)v77, (uint64_t)__s2);
        ++v105;
        v103 = __s1;
        v104 += 24;
      }
      while (v105 < *((unsigned int *)__s1 + 4));
    }
    ++v102;
  }
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v77 + 16) + 32), 203, (uint64_t)"%s%s", v106, v107, v108, v109, v110, "END");
  return v16;
}

uint64_t activeprompt_db_Get(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = 2296389652;
  v12 = 0;
  hlp_CheckBECompatibility(a1);
  if (*(_DWORD *)(a1 + 28) == 2
    && *(_DWORD *)(a1 + 24)
    && vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 0, &v12))
  {
    v7 = 0;
    while (1)
    {
      v8 = v12;
      if (*(_DWORD *)(v12 + 16))
        break;
LABEL_9:
      if (!vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), ++v7, &v12))
        return v6;
    }
    v9 = 0;
    v10 = 0;
    while (LH_stricmp(a2, (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 240)+ *(unsigned int *)(*(_QWORD *)(v8 + 24) + v9))))
    {
      ++v10;
      v8 = v12;
      v9 += 24;
      if (v10 >= *(unsigned int *)(v12 + 16))
        goto LABEL_9;
    }
    if (a3)
      hlp_FillActivePrompt(a1, *(_DWORD *)v12, (unsigned int *)(*(_QWORD *)(v12 + 24) + v9), v10, a3);
    return 0;
  }
  return v6;
}

uint64_t hlp_CheckBECompatibility(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v19 = 0;
  v18 = 0;
  result = domain_mngr_utils_IsActiveVoiceAddon(v3, *(char **)(v2 + 72), (char *)(v2 + 80), (char *)(v2 + 88), (char *)(v2 + 100), &v18);
  if ((result & 0x80000000) != 0)
  {
    result = hlp_CheckAttribute(v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168), (uint64_t)"langcode", (char *)(*(_QWORD *)(a1 + 8) + 44));
    if (!(_DWORD)result)
      goto LABEL_26;
    result = hlp_CheckAttribute(v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168), (uint64_t)"voice", *(char **)(*(_QWORD *)(a1 + 8) + 64));
    if (!(_DWORD)result)
    {
      result = hlp_CheckAttribute(v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168), (uint64_t)"fevoice", *(char **)(*(_QWORD *)(a1 + 8) + 64));
      if (!(_DWORD)result)
        goto LABEL_26;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v6 + 80))
    {
      result = paramc_ParamGetStr(*(_QWORD *)(v3 + 40), (uint64_t)"uselectrawdataversion", &v19);
      v6 = *(_QWORD *)(a1 + 8);
      if ((result & 0x80000000) == 0)
      {
        result = LH_stricmp(v19, (char *)(v6 + 80));
        v6 = *(_QWORD *)(a1 + 8);
        if ((_DWORD)result)
        {
          v11 = *(_QWORD *)(v3 + 32);
          v12 = "voiceRawDataVersion";
LABEL_15:
          result = log_OutPublic(v11, (uint64_t)"DOMAIN_MNGR", 47002, "%s%s%s%s", v7, v8, v9, v10, v12);
          goto LABEL_26;
        }
      }
    }
    if (*(_BYTE *)(v6 + 100))
    {
      result = paramc_ParamGetStr(*(_QWORD *)(v3 + 40), (uint64_t)"uselectreductionversion", &v19);
      v6 = *(_QWORD *)(a1 + 8);
      if ((result & 0x80000000) == 0)
      {
        result = LH_stricmp(v19, (char *)(v6 + 100));
        v6 = *(_QWORD *)(a1 + 8);
        if ((_DWORD)result)
        {
          v11 = *(_QWORD *)(v3 + 32);
          v12 = "voiceReductionVersion";
          goto LABEL_15;
        }
      }
    }
    if (*(_BYTE *)(v6 + 88))
    {
      if (!*(_BYTE *)(v6 + 100)
        || (result = LH_stricmp((char *)(v6 + 100), "null"), v6 = *(_QWORD *)(a1 + 8), (_DWORD)result))
      {
        result = hlp_CheckAttribute(v3, *(_QWORD *)(v6 + 168), (uint64_t)"reduction", (char *)(v6 + 88));
        if (!(_DWORD)result)
          goto LABEL_26;
        v6 = *(_QWORD *)(a1 + 8);
      }
    }
    if (*(_BYTE *)(v6 + 120))
    {
      if ((paramc_ParamGetStr(*(_QWORD *)(v3 + 40), (uint64_t)"voicecomponentid", &v19) & 0x80000000) != 0
        || (result = LH_stricmp(v19, (char *)(*(_QWORD *)(a1 + 8) + 120)), (_DWORD)result))
      {
        v17 = *(_QWORD *)(v3 + 32);
LABEL_25:
        result = log_OutPublic(v17, (uint64_t)"DOMAIN_MNGR", 47002, "%s%s%s%s", v13, v14, v15, v16, "VoiceComponentID");
        goto LABEL_26;
      }
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_DWORD *)(v6 + 160) != 1)
      goto LABEL_3;
    if (*(_BYTE *)(v6 + 120))
      goto LABEL_3;
    result = paramc_ParamGetStr(*(_QWORD *)(v3 + 40), (uint64_t)"voicecomponentid", &v19);
    if ((result & 0x80000000) == 0 && !*v19)
      goto LABEL_3;
    v17 = *(_QWORD *)(v3 + 32);
    goto LABEL_25;
  }
  if (!v18)
  {
LABEL_26:
    v5 = 1;
    goto LABEL_27;
  }
LABEL_3:
  v5 = 2;
LABEL_27:
  *(_DWORD *)(a1 + 28) = v5;
  return result;
}

uint64_t hlp_FillActivePrompt(uint64_t result, int a2, unsigned int *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = 0;
  v6 = *(_QWORD **)(result + 8);
  v7 = v6[30] + *a3;
  *(_QWORD *)a5 = result;
  *(_DWORD *)(a5 + 96) = a4;
  *(_DWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = v7;
  *(_WORD *)(a5 + 24) = *((_WORD *)a3 + 2);
  v8 = *((unsigned __int8 *)a3 + 7);
  *(_DWORD *)(a5 + 28) = *((unsigned __int8 *)a3 + 6);
  *(_DWORD *)(a5 + 32) = v8;
  v9 = *((unsigned __int16 *)a3 + 4);
  if ((_DWORD)v9 == 0xFFFF)
    v10 = 0;
  else
    v10 = v7 + v9;
  v11 = *((unsigned __int16 *)a3 + 5);
  v12 = (_DWORD)v11 == 0xFFFF;
  v13 = v7 + v11;
  if (v12)
    v13 = 0;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v13;
  *(_WORD *)(a5 + 56) = *((_WORD *)a3 + 9);
  v14 = a3[5];
  v15 = a3[3];
  *(_DWORD *)(a5 + 60) = v14;
  *(_DWORD *)(a5 + 64) = v15;
  if (a2 != 2)
    v5 = v6[31] + 4 * v15;
  *(_QWORD *)(a5 + 72) = v5;
  v16 = *((unsigned __int16 *)a3 + 8);
  v17 = v7 + v16;
  if ((_DWORD)v16 == 0xFFFF)
    v17 = 0;
  v18 = v6[32] + 8 * v14;
  *(_QWORD *)(a5 + 80) = v17;
  *(_QWORD *)(a5 + 88) = v18;
  return result;
}

uint64_t activeprompt_db_GetTNTypes(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v8;

  v8 = 0;
  hlp_CheckBECompatibility(a1);
  if (*(_DWORD *)(a1 + 28) == 2 && vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 0, &v8))
  {
    v4 = 1;
    do
    {
      v5 = *(char **)(v8 + 8);
      if (v5 && *v5)
      {
        ssftstring_AppendCStr(a2, v5);
        ssftstring_AppendChar(a2, 124);
      }
    }
    while (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), v4++, &v8));
  }
  return 2296389652;
}

uint64_t activeprompt_db_ConsultOriOrth(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  size_t v37;
  size_t v38;
  int v39;
  unsigned int *v40;
  __int128 *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  __int16 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *__s[2];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[16];

  v63 = 0;
  hlp_CheckBECompatibility(a1);
  v9 = 0;
  if (*(_DWORD *)(a1 + 28) != 2)
    return v9;
  if (!*(_DWORD *)(a1 + 24) || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 28))
    return 0;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32)))
  {
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 213, (uint64_t)"%s%s %s%s %s%s", v10, v11, v12, v13, v14, "BEG");
    v15 = a5;
    do
    {
      if (!v15)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 214, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
          *a2,
          0);
        if (!a4)
          goto LABEL_19;
        goto LABEL_17;
      }
      v16 = v15;
      v15 = *(_QWORD *)(v15 + 16);
    }
    while (v15);
    if (!a4)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
      v19 = *a2;
      v20 = "text/plain;charset=utf-8";
      v21 = 0;
      goto LABEL_18;
    }
    if (*a4)
      v17 = (*(_DWORD *)(v16 + 8) + *(_DWORD *)(v16 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v17 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 214, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
      *a2,
      v17);
LABEL_17:
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
    v19 = *a3;
    v21 = 32 * *a4;
    v20 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_18:
    log_OutTraceTuningDataBinary(v18, 214, (uint64_t)&byte_1DEBD87CE, (uint64_t)v20, v19, v21);
  }
LABEL_19:
  if (!a5)
  {
    v9 = 0;
    goto LABEL_71;
  }
  v22 = a5;
  while (1)
  {
    v79 = 0;
    v80 = 0;
    v78 = 0;
    if (!*(_DWORD *)v22)
    {
      v9 = 0;
      goto LABEL_65;
    }
    memset(v81, 0, 104);
    v63 = 0;
    if (!vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 0, &v78)
      || *(_DWORD *)v78 != 1
      || !vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 1u, &v79)
      || *(_DWORD *)v79 != 2)
    {
      v9 = 0;
      v46 = 0;
      goto LABEL_53;
    }
    v77 = 0;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    v71 = 0u;
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    *(_OWORD *)__s = 0u;
    v64 = 0u;
    v65 = 0u;
    v23 = domain_mngr_utils_ListContainsString(*(_QWORD *)(v78 + 8), "*");
    v24 = domain_mngr_utils_ListContainsString(*(_QWORD *)(v79 + 8), "*");
    if (!v23 || !v24)
    {
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 216, (uint64_t)"%s%s", v25, v26, v27, v28, v29, "INFO");
LABEL_68:
      v9 = 0;
      goto LABEL_69;
    }
    v30 = v78;
    hlp_FillActivePrompt(a1, *(_DWORD *)v78, *(unsigned int **)(v78 + 24), 0, (uint64_t)&v71);
    v31 = v79;
    hlp_FillActivePrompt(a1, *(_DWORD *)v79, *(unsigned int **)(v79 + 24), 0, (uint64_t)&v64);
    v9 = 0;
    if (*(_DWORD *)v22 == 1)
    {
      v32 = *(_DWORD *)(v30 + 16);
      v33 = *(_DWORD *)(v31 + 16);
      v34 = v33 != 0;
      if (v32 | v33)
      {
        v35 = 0;
        v36 = 0;
        while (1)
        {
          if (v34
            && (v36 == v32
             || (v37 = strlen(__s[0]), v38 = strlen((const char *)v74), v37 > v38)
             || v37 == v38
             && (HIDWORD(v65) > HIDWORD(v72) || HIDWORD(v65) == HIDWORD(v72) && v66 > v73)))
          {
            v9 = activeprompt_ConsultOriOrth(&v64, (const char **)a2, a3, a4, v22, &v63);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_71;
            if (++v35 >= *(_DWORD *)(v79 + 16))
              goto LABEL_45;
            v39 = *(_DWORD *)v79;
            v40 = (unsigned int *)(*(_QWORD *)(v79 + 24) + 24 * v35);
            v41 = &v64;
            v42 = a1;
            v43 = v35;
          }
          else
          {
            v9 = activeprompt_ConsultOriOrth(&v71, (const char **)a2, a3, a4, v22, &v63);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_71;
            if (++v36 >= *(_DWORD *)(v78 + 16))
              goto LABEL_45;
            v39 = *(_DWORD *)v78;
            v40 = (unsigned int *)(*(_QWORD *)(v78 + 24) + 24 * v36);
            v41 = &v71;
            v42 = a1;
            v43 = v36;
          }
          hlp_FillActivePrompt(v42, v39, v40, v43, (uint64_t)v41);
LABEL_45:
          if (*(_DWORD *)v22 == 1)
          {
            v32 = *(_DWORD *)(v78 + 16);
            v44 = *(_DWORD *)(v79 + 16);
            v34 = v35 < v44;
            if (v36 < v32 || v35 < v44)
              continue;
          }
          goto LABEL_69;
        }
      }
      goto LABEL_68;
    }
LABEL_69:
    v46 = 2;
LABEL_53:
    if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), v46, &v80))
      break;
LABEL_65:
    v22 = *(_QWORD *)(v22 + 16);
    if (!v22)
      goto LABEL_71;
  }
  do
  {
    if (domain_mngr_utils_ListContainsString(*(_QWORD *)(v80 + 8), "*"))
    {
      if (*(_DWORD *)v22 == 1)
      {
        v47 = v80;
        if (*(_DWORD *)(v80 + 16))
        {
          v48 = 0;
          v49 = 0;
          while (1)
          {
            hlp_FillActivePrompt(a1, *(_DWORD *)v47, (unsigned int *)(*(_QWORD *)(v47 + 24) + v48), v49, (uint64_t)v81);
            v9 = activeprompt_ConsultOriOrth(v81, (const char **)a2, a3, a4, v22, &v63);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_71;
            if (*(_DWORD *)v22 == 1)
            {
              ++v49;
              v47 = v80;
              v48 += 24;
              if (v49 < *(unsigned int *)(v80 + 16))
                continue;
            }
            break;
          }
        }
      }
    }
    ++v46;
  }
  while (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), v46, &v80));
  if ((v9 & 0x80000000) == 0)
    goto LABEL_65;
LABEL_71:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32)))
  {
    do
    {
      if (!a5)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 215, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
          *a2,
          0);
        if (!a4)
          goto LABEL_84;
        goto LABEL_82;
      }
      v50 = a5;
      a5 = *(_QWORD *)(a5 + 16);
    }
    while (a5);
    if (!a4)
    {
      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
      v58 = *a2;
      v59 = "text/plain;charset=utf-8";
      v60 = 0;
      goto LABEL_83;
    }
    if (*a4)
      v51 = (*(_DWORD *)(v50 + 8) + *(_DWORD *)(v50 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v51 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 215, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
      *a2,
      v51);
LABEL_82:
    v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
    v58 = *a3;
    v60 = 32 * *a4;
    v59 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_83:
    log_OutTraceTuningDataBinary(v57, 215, (uint64_t)&byte_1DEBD87CE, (uint64_t)v59, v58, v60);
LABEL_84:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 213, (uint64_t)"%s%s %s%u", v52, v53, v54, v55, v56, "END");
  }
  return v9;
}

uint64_t activeprompt_db_Consult(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  const char **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int16 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  size_t v66;
  size_t v67;
  int v68;
  unsigned int *v69;
  __int128 *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  __int16 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char *__s[2];
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112[16];

  v15 = (_QWORD *)a1;
  v94 = 0;
  hlp_CheckBECompatibility(a1);
  v16 = 0;
  if (*((_DWORD *)v15 + 7) != 2)
    return v16;
  if (!*((_DWORD *)v15 + 6))
    return 0;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32)))
  {
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v15 + 16) + 32), 273, (uint64_t)"%s%s %s%s %s%s", v17, v18, v19, v20, v21, "BEG");
    v22 = a7;
    do
    {
      if (!v22)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 274, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
          *a2,
          0);
        if (!a4)
          goto LABEL_18;
        goto LABEL_16;
      }
      v23 = v22;
      v22 = *(_QWORD *)(v22 + 16);
    }
    while (v22);
    if (!a4)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
      v26 = *a2;
      v27 = "text/plain;charset=depes";
      v28 = 0;
      goto LABEL_17;
    }
    if (*a4)
      v24 = (*(_DWORD *)(v23 + 8) + *(_DWORD *)(v23 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v24 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 274, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
      *a2,
      v24);
LABEL_16:
    v25 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
    v26 = *a3;
    v28 = 32 * *a4;
    v27 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_17:
    log_OutTraceTuningDataBinary(v25, 274, (uint64_t)&byte_1DEBD87CE, (uint64_t)v27, v26, v28);
  }
LABEL_18:
  v89 = a7;
  if (!a7)
  {
    v16 = 0;
    goto LABEL_116;
  }
  v90 = a5;
  v91 = a6;
  v92 = a8;
  v93 = v15;
  while (1)
  {
    v110 = 0;
    v111 = 0;
    v109 = 0;
    if (!*(_DWORD *)a7)
    {
      v16 = 0;
      goto LABEL_60;
    }
    memset(v112, 0, 104);
    v94 = 0;
    if (!vector_GetElemAt(*(_QWORD *)(v15[1] + 264), 0, &v109)
      || *(_DWORD *)v109 != 1
      || !vector_GetElemAt(*(_QWORD *)(v15[1] + 264), 1u, &v110)
      || *(_DWORD *)v110 != 2)
    {
      v16 = 0;
      v34 = 0;
      goto LABEL_36;
    }
    v108 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    *(_OWORD *)__s = 0u;
    v95 = 0u;
    v96 = 0u;
    v29 = domain_mngr_utils_ListContainsString(*(_QWORD *)(v109 + 8), "*");
    v30 = v29 != 0;
    if (!v29 && a4)
    {
      v31 = *a4;
      if (*a4)
      {
        v32 = 0;
        v33 = 0;
        v30 = 0;
        do
        {
          if (*(_DWORD *)(*a3 + v32) == 21)
          {
            if (domain_mngr_utils_ListContainsString(*(_QWORD *)(v109 + 8), *(char **)(*a3 + v32 + 24)) == 1)
              v30 = 1;
            v31 = *a4;
          }
          ++v33;
          v32 += 32;
        }
        while (v33 < v31);
      }
      else
      {
        v30 = 0;
      }
    }
    if (domain_mngr_utils_ListContainsString(*(_QWORD *)(v110 + 8), "*"))
    {
      v53 = 1;
      goto LABEL_65;
    }
    if (a4)
    {
      v54 = *a4;
      if (*a4)
      {
        v55 = 0;
        v56 = 0;
        v53 = 0;
        do
        {
          if (*(_DWORD *)(*a3 + v55) == 21)
          {
            if (domain_mngr_utils_ListContainsString(*(_QWORD *)(v110 + 8), *(char **)(*a3 + v55 + 24)) == 1)
              v53 = 1;
            v54 = *a4;
          }
          ++v56;
          v55 += 32;
        }
        while (v56 < v54);
LABEL_65:
        if (v53 && v30)
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    v53 = 0;
LABEL_78:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v93 + 16) + 32), 276, (uint64_t)"%s%s", v48, v49, v50, v51, v52, "INFO");
LABEL_79:
    v16 = 0;
    if (v53 == 1)
    {
      v15 = v93;
      if (v30)
      {
        v57 = v109;
        hlp_FillActivePrompt((uint64_t)v93, *(_DWORD *)v109, *(unsigned int **)(v109 + 24), 0, (uint64_t)&v102);
        v58 = v110;
        hlp_FillActivePrompt((uint64_t)v93, *(_DWORD *)v110, *(unsigned int **)(v110 + 24), 0, (uint64_t)&v95);
        v16 = 0;
        if (*(_DWORD *)a7 == 1)
        {
          v59 = v57;
          v60 = *(_DWORD *)(v57 + 16);
          v61 = *(_DWORD *)(v58 + 16);
          v62 = v61 != 0;
          if (v60 | v61)
          {
            v63 = 0;
            v64 = 0;
            while (1)
            {
              if (v62
                && (__s[0] ? (v65 = (_QWORD)v105 == 0) : (v65 = 1),
                    !v65
                 && (v64 == v60
                  || (v88 = v59, v66 = strlen(__s[0]), v67 = strlen((const char *)v105), v59 = v88, v66 > v67)
                  || v66 == v67
                  && (HIDWORD(v96) > HIDWORD(v103)
                   || HIDWORD(v96) == HIDWORD(v103) && v97 > v104))))
              {
                v16 = activeprompt_Consult((uint64_t **)&v95, *(_QWORD *)(v58 + 8), (const char **)a2, a3, a4, a7, v90, v91, &v94, v92);
                if ((v16 & 0x80000000) != 0)
                  goto LABEL_114;
                if (++v63 < *(_DWORD *)(v110 + 16))
                {
                  v68 = *(_DWORD *)v110;
                  v69 = (unsigned int *)(*(_QWORD *)(v110 + 24) + 24 * v63);
                  v70 = &v95;
                  v15 = v93;
                  v71 = (uint64_t)v93;
                  v72 = v63;
LABEL_101:
                  hlp_FillActivePrompt(v71, v68, v69, v72, (uint64_t)v70);
                  goto LABEL_103;
                }
              }
              else
              {
                v16 = activeprompt_Consult((uint64_t **)&v102, *(_QWORD *)(v59 + 8), (const char **)a2, a3, a4, a7, v90, v91, &v94, v92);
                if ((v16 & 0x80000000) != 0)
                {
LABEL_114:
                  v15 = v93;
                  goto LABEL_116;
                }
                if (++v64 < *(_DWORD *)(v109 + 16))
                {
                  v68 = *(_DWORD *)v109;
                  v69 = (unsigned int *)(*(_QWORD *)(v109 + 24) + 24 * v64);
                  v70 = &v102;
                  v15 = v93;
                  v71 = (uint64_t)v93;
                  v72 = v64;
                  goto LABEL_101;
                }
              }
              v15 = v93;
LABEL_103:
              if (*(_DWORD *)a7 == 1)
              {
                v59 = v109;
                v58 = v110;
                v60 = *(_DWORD *)(v109 + 16);
                v73 = *(_DWORD *)(v110 + 16);
                v62 = v63 < v73;
                if (v64 < v60 || v63 < v73)
                  continue;
              }
              goto LABEL_112;
            }
          }
          v16 = 0;
        }
      }
    }
    else
    {
      v15 = v93;
    }
LABEL_112:
    v34 = 2;
LABEL_36:
    if (vector_GetElemAt(*(_QWORD *)(v15[1] + 264), v34, &v111))
      break;
LABEL_60:
    a7 = *(_QWORD *)(a7 + 16);
    if (!a7)
      goto LABEL_116;
  }
  v35 = (const char **)a2;
  do
  {
    if (domain_mngr_utils_ListContainsString(*(_QWORD *)(v111 + 8), "*"))
      goto LABEL_134;
    if (!a4)
      goto LABEL_55;
    v44 = *a4;
    if (!*a4)
      goto LABEL_55;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    do
    {
      if (*(_DWORD *)(*a3 + v45) == 21)
      {
        if (domain_mngr_utils_ListContainsString(*(_QWORD *)(v111 + 8), *(char **)(*a3 + v45 + 24)) == 1)
          v47 = 1;
        v44 = *a4;
      }
      ++v46;
      v45 += 32;
    }
    while (v46 < v44);
    v15 = v93;
    if (v47)
    {
LABEL_134:
      if (*(_DWORD *)a7 == 1)
      {
        v41 = v111;
        if (*(_DWORD *)(v111 + 16))
        {
          v42 = 0;
          v43 = 0;
          while (1)
          {
            hlp_FillActivePrompt((uint64_t)v93, *(_DWORD *)v41, (unsigned int *)(*(_QWORD *)(v41 + 24) + v42), v43, (uint64_t)v112);
            v16 = activeprompt_Consult(v112, *(_QWORD *)(v41 + 8), v35, a3, a4, a7, v90, v91, &v94, v92);
            if ((v16 & 0x80000000) != 0)
              break;
            if (*(_DWORD *)a7 == 1)
            {
              ++v43;
              v41 = v111;
              v42 += 24;
              if (v43 < *(unsigned int *)(v111 + 16))
                continue;
            }
            goto LABEL_56;
          }
          a2 = (uint64_t *)v35;
          goto LABEL_114;
        }
      }
    }
    else
    {
LABEL_55:
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v15 + 16) + 32), 273, (uint64_t)"%s%s", v36, v37, v38, v39, v40, "INFO");
    }
LABEL_56:
    ++v34;
    v15 = v93;
  }
  while (vector_GetElemAt(*(_QWORD *)(v93[1] + 264), v34, &v111));
  a2 = (uint64_t *)v35;
  if ((v16 & 0x80000000) == 0)
    goto LABEL_60;
LABEL_116:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32)))
  {
    v75 = v89;
    do
    {
      if (!v75)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 275, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
          *a2,
          0);
        if (!a4)
          goto LABEL_130;
        goto LABEL_128;
      }
      v76 = v75;
      v75 = *(_QWORD *)(v75 + 16);
    }
    while (v75);
    if (!a4)
    {
      v83 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
      v84 = *a2;
      v85 = "text/plain;charset=depes";
      v86 = 0;
      goto LABEL_129;
    }
    if (*a4)
      v77 = (*(_DWORD *)(v76 + 8) + *(_DWORD *)(v76 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v77 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 275, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
      *a2,
      v77);
LABEL_128:
    v83 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
    v84 = *a3;
    v86 = 32 * *a4;
    v85 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_129:
    log_OutTraceTuningDataBinary(v83, 275, (uint64_t)&byte_1DEBD87CE, (uint64_t)v85, v84, v86);
LABEL_130:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v15 + 16) + 32), 273, (uint64_t)"%s%s %s%u", v78, v79, v80, v81, v82, "END");
  }
  return v16;
}

uint64_t IsRecordingCS(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;

  v6 = *(_QWORD *)(*a1 + 16);
  v11 = 0;
  v10 = 0;
  if ((paramc_ParamGetInt(*(_QWORD *)(v6 + 40), (uint64_t)"frequencyhz", (int *)&v10) & 0x80000000) != 0)
  {
    result = 0;
    v8 = 0;
    if (a3)
LABEL_11:
      *a3 = v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (v8)
        heap_Free(*(_QWORD **)(v6 + 8), v8);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))((char *)&off_1EA948578 + v7))(v6, a2, *(_QWORD *)(a1[1] + 64), *(_QWORD *)(a1[1] + 168), v10);
      if (v8)
      {
        if ((brk_DataOpenEx(*(_QWORD *)(v6 + 24), v8, 1, (uint64_t)&v11) & 0x80000000) == 0)
          break;
      }
      v7 += 8;
      if (v7 == 48)
      {
        result = 0;
        if (a3)
          goto LABEL_11;
        return result;
      }
    }
    brk_DataClose(*(_QWORD *)(v6 + 24), v11);
    result = 1;
    if (a3)
      goto LABEL_11;
  }
  return result;
}

uint64_t hlp_GetRecordingSrcFromApdbBrkString(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = strlen(__s);
  v10 = (char *)heap_Alloc(v8, v9 + 5);
  v11 = (uint64_t)v10;
  if (v10)
  {
    v12 = strcpy(v10, __s);
    if (!hlp_ReplaceRpWithCs(v12, 1, a5))
    {
      heap_Free(*(_QWORD **)(a1 + 8), v11);
      return 0;
    }
  }
  return v11;
}

char *hlp_GetRecordingSrcFromFixedBrkString(uint64_t a1, int a2, char *__s, const char *a4, int a5)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = strlen(__s);
  v10 = strlen(a4);
  v11 = (char *)heap_Alloc(v8, v9 + v10 + 14);
  v12 = v11;
  if (v11)
  {
    *v11 = 0;
    hlp_AppendStandardName(v11, 1, __s, a4, a5);
  }
  return v12;
}

char *hlp_GetRecordingSrcFromApdbURI(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!IsThisUrlOrRealPath(__s, 0))
    return 0;
  memset(v15, 0, sizeof(v15));
  v8 = strlen(__s);
  v9 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v8 + 5);
  v10 = v9;
  if (v9)
  {
    v11 = strcpy(v9, __s);
    v12 = strrchr(v11, 46);
    if (v12)
    {
      v13 = v12;
      __strcpy_chk();
      *v13 = 0;
    }
    if (hlp_ReplaceRpWithCs(v10, 0, a5))
    {
      strcat(v10, (const char *)v15);
      return v10;
    }
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v10);
    return 0;
  }
  return v10;
}

char *hlp_GetRecordingSrcFromFixedURI(uint64_t a1, char *__s, const char *a3, const char *a4, int a5)
{
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char __sa[32];
  char v21[512];
  char __s2[32];
  char __src[32];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!IsThisUrlOrRealPath(__s, 0))
    return 0;
  if (!SplitpathOrUrl((uint64_t)__s, __src, (uint64_t)__s2, v21, 0, __sa))
    return 0;
  v10 = strlen(__s);
  v11 = strlen(a3);
  v12 = strlen(a4);
  v13 = strlen(__sa);
  v14 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v10 + v11 + v12 + v13 + 14);
  if (!v14)
    return 0;
  v15 = v14;
  v16 = strcpy(v14, __src);
  v17 = strcat(v16, __s2);
  v18 = strcat(v17, v21);
  hlp_AppendStandardName(v18, 0, a3, a4, a5);
  strcat(v15, __sa);
  return v15;
}

char *hlp_GetRecordingSrcFromCupWithCustomName(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, int a5)
{
  char *v8;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *__s;

  if (strncmp(__s1, "cup:", 4uLL))
    return 0;
  __s = 0;
  if (!cupreader_GetTuningDataNameInCup(a1, &__s))
    return 0;
  v10 = strlen(__s1);
  v11 = strlen(__s);
  v12 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v10 + v11 + 14);
  v8 = v12;
  if (v12)
  {
    v13 = strcpy(v12, __s1 + 4);
    *(_WORD *)&v8[strlen(v13)] = 58;
    v14 = strcat(v8, __s);
    if (!hlp_ReplaceRpWithCs(v14, 0, a5))
    {
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v8);
      return 0;
    }
  }
  return v8;
}

char *hlp_GetRecordingSrcFromCupWithFixedName(uint64_t a1, char *__s1, const char *a3, const char *a4, int a5)
{
  char *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  char *v15;

  if (strncmp(__s1, "cup:", 4uLL))
    return 0;
  v11 = strlen(__s1);
  v12 = strlen(a3);
  v13 = strlen(a4);
  v14 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v11 + v12 + v13 + 14);
  v10 = v14;
  if (v14)
  {
    v15 = strcpy(v14, __s1 + 4);
    *(_WORD *)&v10[strlen(v15)] = 58;
    hlp_AppendStandardName(v10, 0, a3, a4, a5);
  }
  return v10;
}

uint64_t activeprompt_db_CopyPartsGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v6;
  int v8;

  result = 0;
  if (a1 && a3)
  {
    v6 = *(const char **)(a1 + 8);
    if (v6)
    {
      v8 = strlen(v6);
      result = heap_Alloc(a2, (v8 + 1));
      *(_QWORD *)(a3 + 8) = result;
      if (!result)
        return result;
      strcpy((char *)result, *(const char **)(a1 + 8));
    }
    return 1;
  }
  return result;
}

_QWORD *activeprompt_db_FreePartsGroup(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result[1];
    if (v2)
      return heap_Free(a2, v2);
  }
  return result;
}

uint64_t hlp_CheckAttribute(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;

  v10 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), a3, &v10) & 0x80000000) == 0 && !LH_stricmp(v10, a4))
    return 1;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB does not match the voice: %s=%s, %s=%s, %s=%s, %s=%s", v6, v7, v8, (uint64_t)"domain");
  return 0;
}

uint64_t hlp_ReplaceRpWithCs(char *__s1, int a2, int a3)
{
  const char *v6;
  const char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  size_t v13;

  if (a2)
    v6 = "/rp/";
  else
    v6 = "_rp_";
  if (a2)
    v7 = "/f";
  else
    v7 = "_f";
  v8 = __s1;
  if (*v6)
  {
    v9 = 0;
    v10 = __s1;
    do
    {
      v8 = v9;
      v9 = strstr(v10, v6);
      v10 = v9 + 1;
    }
    while (v9);
  }
  if (!v8)
    return 0;
  if (a2)
    v11 = 796091183;
  else
    v11 = 1601397599;
  *(_DWORD *)v8 = v11;
  v12 = &__s1[strlen(__s1)];
  *(_WORD *)v12 = *(_WORD *)v7;
  v12[2] = v7[2];
  v13 = strlen(__s1);
  LH_itoa(a3 / 1000, &__s1[v13], 0xAu);
  return 1;
}

char *hlp_AppendStandardName(char *a1, int a2, const char *a3, const char *a4, int a5)
{
  size_t v10;
  BOOL v11;
  const char *v12;
  char *v13;
  __int16 v14;
  const char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  strcat(a1, "apdb");
  v10 = strlen(a1);
  v11 = a2 == 0;
  if (a2)
    v12 = "/cs/";
  else
    v12 = "_cs_";
  v13 = &a1[v10];
  *(_DWORD *)v13 = *(_DWORD *)v12;
  v13[4] = v12[4];
  if (a2)
    v14 = 47;
  else
    v14 = 95;
  if (v11)
    v15 = "_f";
  else
    v15 = "/f";
  v16 = strcat(a1, a3);
  *(_WORD *)&a1[strlen(v16)] = v14;
  v17 = strcat(a1, a4);
  v18 = &a1[strlen(v17)];
  *(_WORD *)v18 = *(_WORD *)v15;
  v18[2] = v15[2];
  v19 = &a1[strlen(a1)];
  return LH_itoa(a5 / 1000, v19, 0xAu);
}

uint64_t hlp_GetMimeParam(uint64_t a1, char *__s, const char *a3, char **a4)
{
  uint64_t v4;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  unsigned int v23;

  v4 = 2296389639;
  if (__s)
  {
    if (a3)
    {
      if (*__s)
      {
        if (*a3)
        {
          *a4 = 0;
          v8 = strchr(__s, 59);
          v4 = 2296389652;
          if (v8)
          {
            v9 = v8;
            v10 = strlen(a3);
            do
            {
              v11 = v9 + 1;
              if (!strncmp(v9 + 1, a3, v10))
              {
                v12 = &v11[v10];
                if (v11[v10] == 61)
                {
                  v13 = 0;
                  v14 = v12 + 1;
                  v15 = &v9[v10];
                  while (v15[v13 + 2] && v15[v13 + 2] != 59)
                    ++v13;
                  v16 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), (v13 + 1));
                  *a4 = v16;
                  if (!v16)
                  {
                    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v17, v18, v19, v20, v23);
                    return 2296389642;
                  }
                  if ((_DWORD)v13)
                  {
                    v21 = v13;
                    strncpy(v16, v14, v13);
                    v16 = &(*a4)[v13];
                  }
                  else
                  {
                    v21 = 0;
                  }
                  v4 = 0;
                  v11 = &v9[v10 + 1 + v13];
                  *v16 = 0;
                  v10 = v21;
                }
              }
              v9 = strchr(v11, 59);
            }
            while (v9);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t hlp_TraceContent_AP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __strcpy_chk();
  __strcpy_chk();
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 204, (uint64_t)"%s%s %s%s %s%s %s%s %s%s %s%s %s%s", v4, v5, v6, v7, v8, "NAME");
  return log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 204, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-usids;version=4.0",
           a2 + 64,
           4 * *(unsigned __int16 *)(a2 + 56));
}

uint64_t activeprompt_GetRecPromptURI(unsigned int *a1, uint64_t a2, char **a3)
{
  uint64_t v3;
  const char *v6;
  int v8;
  int v9;
  char *v10;
  char __s[12];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = 2296389639;
  if (*(_QWORD *)a1)
  {
    if (a3)
    {
      v6 = *(const char **)(*(_QWORD *)a1 + 80);
      if (v6)
      {
        v8 = strlen(v6);
        strcpy(__s, "#");
        LH_utoa(a1[16], &__s[1], 0xAu);
        v9 = strlen(__s);
        v10 = (char *)heap_Alloc(a2, (v8 + v9 + 1));
        *a3 = v10;
        if (v10)
        {
          strcpy(v10, *(const char **)(*(_QWORD *)a1 + 80));
          strcpy(&(*a3)[v8], __s);
          return 0;
        }
        else
        {
          return 2296389642;
        }
      }
    }
  }
  return v3;
}

uint64_t activeprompt_GetUserNorm(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 2296389639;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t activeprompt_Insert(uint64_t a1, unsigned int a2, int a3, int a4, const char **a5, uint64_t *a6, unsigned __int16 *a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t RecPromptURI;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  unsigned __int16 v38;
  int64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  uint64_t v42;
  unsigned int v43;
  size_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  uint64_t NextTokenRecIdAtFrom;
  uint64_t v57;
  unsigned int v58;
  __int16 v59;
  unsigned int v60;
  unsigned __int16 v61;
  uint64_t v62;
  uint64_t j;
  const char *v64;
  int v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  uint64_t v68;
  const char *v69;
  int v70;
  int v71;
  char *v72;
  const char *v73;
  const char *v74;
  _QWORD *v75;
  const char *v76;
  size_t v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, _QWORD, const char *, uint64_t, uint64_t, uint64_t, char **);
  uint64_t v80;
  uint64_t NullHandle;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned __int16 v85;
  _BOOL4 v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  char *v90;
  _QWORD *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  char i;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned __int16 v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int16 *v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  char *v143;
  int v144;
  int v145;
  const char *v146;
  char k;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  _OWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v165;
  int v166;
  uint64_t *v167;
  _QWORD *v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  _BOOL4 v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v181;
  _DWORD *v182;
  __int16 v184;
  unsigned int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  const char **v190;
  unsigned __int16 *v191;
  unsigned __int16 *v192;
  unsigned __int16 *v193;
  char *v194;
  char *__s;
  __int16 v196;
  char *v197;
  const char *v198;
  unsigned __int16 v199;
  unsigned __int16 v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  unsigned __int16 v205;
  int v206;
  char *v207;
  int v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;

  v182 = (_DWORD *)a9;
  v214 = *MEMORY[0x1E0C80C00];
  v16 = **(_QWORD **)a1;
  v17 = *(_QWORD *)(v16 + 16);
  v206 = 0;
  v205 = 0;
  v203 = 0;
  v204 = 0;
  v201 = 11;
  v202 = 0;
  v200 = 0;
  v199 = 255;
  v197 = 0;
  v198 = 0;
  v18 = *(_QWORD *)(v16 + 56);
  v213 = 0;
  v212 = 0;
  v196 = 0;
  v194 = 0;
  __s = 0;
  v19 = a1;
  v20 = *(char **)(a1 + 48);
  v21 = strstr(v20, "%Ä");
  v189 = a2;
  v190 = a5;
  if (v21)
  {
    v22 = (_WORD)v21 - (_WORD)v20;
    v23 = (_WORD)v21 - (_WORD)v20 + 1;
    hlp_RemoveSetPhonInRange((uint64_t)a5, (_DWORD **)a6, a7, a2, (unsigned __int16)(v22 + 1));
    v24 = a7;
    v25 = a6;
    v26 = a11;
    v27 = v23;
    goto LABEL_3;
  }
  v192 = a7;
  v187 = v17;
  v178 = a6;
  v26 = a11;
  v27 = a3;
  if (a3)
    goto LABEL_9;
  v66 = strlen(*a5);
  v210 = 0;
  v211 = 0;
  v208 = 11;
  v209 = 0;
  v207 = 0;
  NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v18 + 104))(a10, a11, 1, 0, (char *)&v211 + 2);
  if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
    goto LABEL_266;
  v27 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v18 + 152))(a10, a11, 2, HIWORD(v211), &v209) & 0x80000000) == 0&& (_WORD)v209)
  {
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v18 + 104))(a10, a11, 2, HIWORD(v211), &v211);
    if ((NextTokenRecIdAtFrom & 0x80000000) == 0)
    {
      v67 = v211;
      if ((_WORD)v211)
      {
        v27 = 0;
        do
        {
          if (v27)
            break;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v18 + 168))(a10, a11, v67, 1, 1, &v210, (char *)&v210 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          if ((unsigned __int16)v210 > a2)
            goto LABEL_90;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v18 + 168))(a10, a11, (unsigned __int16)v211, 0, 1, &v208, (char *)&v210 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          if (v208 != 6)
            goto LABEL_90;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v18 + 176))(a10, a11, (unsigned __int16)v211, 4, &v207, (char *)&v210 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          if (HIWORD(v210) && !strncmp(v207, "_PR_", HIWORD(v210)))
          {
            NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v18 + 168))(a10, a11, (unsigned __int16)v211, 2, 1, (char *)&v209 + 2, (char *)&v210 + 2);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_266;
            v27 = HIWORD(v209) >= a2 ? HIWORD(v209) - a2 : 0;
          }
          else
          {
LABEL_90:
            v27 = 0;
          }
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v18 + 120))(a10, a11, (unsigned __int16)v211, &v211);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          v67 = v211;
          if (!(_WORD)v211)
            break;
        }
        while ((unsigned __int16)v210 <= a2);
      }
      else
      {
        v27 = 0;
      }
      goto LABEL_201;
    }
LABEL_266:
    v57 = NextTokenRecIdAtFrom;
    goto LABEL_267;
  }
LABEL_201:
  if (a2 + v27 >= v66)
  {
    if (v66 > a2)
      v27 = v66 - a2;
    else
      v27 = 0;
  }
  else
  {
    v115 = &(*a5)[a2];
    for (i = v115[v27]; i; i = v115[++v27])
    {
      v117 = i;
      if (!memchr(&szWordBoundOrth, i, 3uLL) && !strchr(*(char **)(*(_QWORD *)(*(_QWORD *)v19 + 8) + 192), v117))
        break;
    }
  }
LABEL_9:
  v25 = v178;
  hlp_RemoveSetPhonInRange((uint64_t)a5, (_DWORD **)v178, v192, a2, v27);
  v36 = *a5;
  v37 = strstr((char *)&(*a5)[a2], "§");
  if (!v37)
  {
    v184 = 0;
    v17 = v187;
    v24 = v192;
    goto LABEL_100;
  }
  v184 = 0;
  v17 = v187;
  v24 = v192;
  v175 = v19;
  do
  {
    if (v27 < 4u)
      break;
    v38 = (_WORD)v37 - (_WORD)v36;
    v39 = a2 + v27;
    if (v37 - v36 >= v39)
    {
      v25 = v178;
      break;
    }
    v40 = (unsigned __int16)((_WORD)v37 - (_WORD)v36);
    if (v40 > a2 && v36[(v40 - 1)] == 32)
    {
      v41 = 3;
      v38 = v40 - 1;
    }
    else
    {
      v42 = v40 + 2;
      if (v42 >= v39)
      {
        v41 = 2;
      }
      else if (v36[v42] == 32)
      {
        v41 = 3;
      }
      else
      {
        v41 = 2;
      }
    }
    v43 = v41;
    v44 = strlen(v36);
    memmove((void *)&v36[v38], &v36[v38 + v41], v44 - (v38 + (unint64_t)v41) + 1);
    v45 = *v192;
    if (*v192)
    {
      v46 = a4 + v38;
      v47 = v46 + v41;
      v48 = (unsigned int *)(*v178 + 16);
      do
      {
        v49 = *(v48 - 1);
        v50 = *v48;
        v51 = v49 - v41;
        if (v49 <= v47)
          v51 = a4 + v38;
        if (v49 <= v46)
          v51 = *(v48 - 1);
        if (v50)
        {
          v52 = v50 + v49;
          v53 = v52 - v41;
          if (v52 <= v47)
            v53 = a4 + v38;
          if (v52 > v46)
            v52 = v53;
          v54 = v52 >= v51;
          v55 = v52 - v51;
          if (!v54)
            v55 = 0;
          *v48 = v55;
        }
        *(v48 - 1) = v51;
        v48 += 8;
        --v45;
      }
      while (v45);
    }
    LOWORD(v207) = 0;
    LOWORD(v208) = 0;
    v210 = 0;
    v211 = 0;
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char **))(v18 + 104))(a10, a11, 1, 0, &v207);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_266;
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v18 + 104))(a10, a11, 2, (unsigned __int16)v207, &v208);
    if ((v57 & 0x80000000) != 0 || !(_WORD)v208)
    {
LABEL_64:
      a2 = v189;
      if ((v57 & 0x80000000) == 0)
        goto LABEL_65;
      goto LABEL_267;
    }
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 168))(a10, a11);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_266;
    v58 = v41 + v38;
    while (1)
    {
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v18 + 168))(a10, a11, (unsigned __int16)v208, 2, 1, &v210, (char *)&v211 + 2);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
      if (HIWORD(v210) > v38)
      {
        v59 = v58 >= HIWORD(v210) ? v38 : HIWORD(v210) - v43;
        HIWORD(v210) = v59;
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(v18 + 160))(a10, a11, (unsigned __int16)v208, 1, 1, (char *)&v210 + 2, &v211);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_266;
      }
      v60 = (unsigned __int16)v210;
      if ((unsigned __int16)v210 > v38)
      {
        if (v58 >= (unsigned __int16)v210)
          v61 = v38;
        else
          v61 = v210 - v43;
        LOWORD(v210) = v61;
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v18 + 160))(a10, a11, (unsigned __int16)v208, 2, 1, &v210, &v211);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_266;
        v60 = (unsigned __int16)v210;
      }
      if (v60 <= HIWORD(v210))
        v62 = (unsigned __int16)v208;
      else
        v62 = 0;
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 120))(a10, a11);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
      if (!(_DWORD)v62)
        break;
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 192))(a10, a11, v62);
      if ((v57 & 0x80000000) != 0 || !(_WORD)v208)
        goto LABEL_64;
LABEL_62:
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 168))(a10, a11);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
    }
    if ((_WORD)v208)
      goto LABEL_62;
    a2 = v189;
LABEL_65:
    *(_DWORD *)(a9 + 8) = (*(_DWORD *)(a9 + 8) - v43) & ~((int)(*(_DWORD *)(a9 + 8) - v43) >> 31);
    for (j = *(_QWORD *)(a9 + 16); j; j = *(_QWORD *)(j + 16))
      *(_DWORD *)(j + 4) = (*(_DWORD *)(j + 4) - v43) & ~((int)(*(_DWORD *)(j + 4) - v43) >> 31);
    v184 += v43;
    if (v27 >= v43)
      v27 -= v43;
    else
      v27 = 0;
    v36 = *v190;
    v37 = strstr((char *)&(*v190)[v38], "§");
    v17 = v187;
    v19 = v175;
    v25 = v178;
    v24 = v192;
  }
  while (v37);
LABEL_100:
  *a12 -= v184;
LABEL_3:
  if (*(_DWORD *)(v19 + 8) != 2)
  {
LABEL_120:
    v84 = v17;
    v57 = 2296389642;
    LODWORD(v212) = -65536;
    BYTE4(v212) = 0;
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v18 + 104))(a10, v26, 1, 0, (char *)&v206 + 2);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_266;
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v18 + 104))(a10, v26, 2, HIWORD(v206), &v206);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_266;
    v179 = v25;
    v85 = v206;
    if ((_WORD)v206)
    {
      v185 = 0;
      v167 = 0;
      v168 = 0;
      v86 = 0;
      v166 = 0;
      v170 = 0;
      v172 = v189 + v27;
      v169 = 1;
      while (1)
      {
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v18 + 168))(a10, v26, v85, 0, 1, &v201, (char *)&v203 + 2);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_266;
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v18 + 168))(a10, v26, (unsigned __int16)v206, 1, 1, &v202, (char *)&v203 + 2);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_266;
        if (v201 - 9 < 2)
        {
LABEL_129:
          if ((unsigned __int16)v202 < v189 || v172 <= (unsigned __int16)v202)
          {
            v87 = 0;
            v92 = v170;
            if (v172 <= (unsigned __int16)v202)
              v92 = 1;
            v170 = v92;
          }
          else if (*(_DWORD *)(v19 + 8) == 1)
          {
            v87 = (unsigned __int16)v206;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v18 + 184))(a10, v26, (unsigned __int16)v206, 14, (char *)&v202 + 2) & 0x80000000) == 0&& HIWORD(v202))
            {
              NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v18 + 176))(a10, v26, (unsigned __int16)v206, 14, &__s, (char *)&v203 + 2);
              if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                goto LABEL_266;
              v88 = __s;
              if (__s)
              {
                v89 = v167;
                if (!v167)
                {
                  v89 = StrArrInit(*(_QWORD *)(**(_QWORD **)v19 + 16));
                  if (!v89)
                    goto LABEL_267;
                  v88 = __s;
                }
                v167 = v89;
                NextTokenRecIdAtFrom = StrArrSave(v89, v185, (uint64_t)v88);
                if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                  goto LABEL_266;
              }
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v18 + 184))(a10, v26, (unsigned __int16)v206, 5, (char *)&v202 + 2) & 0x80000000) == 0&& HIWORD(v202))
            {
              NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v18 + 176))(a10, v26, (unsigned __int16)v206, 5, &v194, (char *)&v203 + 2);
              if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                goto LABEL_266;
              v90 = v194;
              if (v194)
              {
                v91 = v168;
                if (!v168)
                {
                  v91 = StrArrInit(*(_QWORD *)(**(_QWORD **)v19 + 16));
                  if (!v91)
                    goto LABEL_267;
                  v90 = v194;
                }
                v168 = v91;
                NextTokenRecIdAtFrom = StrArrSave(v91, v185, (uint64_t)v90);
                if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                  goto LABEL_266;
              }
            }
          }
          else
          {
            if (v169 == 1)
              v93 = 14;
            else
              v93 = 12;
            v201 = v93;
            NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(v18 + 160))(a10, v26, (unsigned __int16)v206, 0, 1, &v201, &v203);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_266;
            v87 = 0;
            v169 = 0;
          }
          goto LABEL_168;
        }
        if (v201 != 15)
          break;
        if (*(_DWORD *)(v19 + 8) != 1)
          goto LABEL_157;
        if ((unsigned __int16)v202 < v189 || v172 <= (unsigned __int16)v202)
        {
          v87 = 0;
          v94 = v170;
          v95 = v166;
          if (v172 <= (unsigned __int16)v202 && v170 == 0)
            v95 = (unsigned __int16)v206;
          v166 = v95;
          if (v172 <= (unsigned __int16)v202 && v170 == 0)
            v94 = 0;
          v170 = v94;
        }
        else
        {
          v87 = (unsigned __int16)v206;
          if ((unsigned __int16)v202 == v189)
            hlp_SavePhraseProps(v18, a10, v26, (unsigned __int16)v206, (uint64_t)&v212);
        }
LABEL_168:
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v18 + 120))(a10, v26, (unsigned __int16)v206, &v206);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_266;
        if ((_DWORD)v87)
        {
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(v18 + 168))(a10, v26, v87, 8, 1, &v200, (char *)&v203 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          v86 = 0;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v18 + 184))(a10, v26, v87, 18, (char *)&v202 + 2) & 0x80000000) == 0&& HIWORD(v202))
          {
            NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, char *))(v18 + 176))(a10, v26, v87, 18, &v198, (char *)&v203 + 2);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_266;
            v86 = 0;
            if (HIWORD(v203) && v198)
              v86 = strcmp(v198, "external") == 0;
          }
          if (v201 <= 0xA && ((1 << v201) & 0x610) != 0)
            ++v185;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 192))(a10, v26, v87);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
        }
        v85 = v206;
        if (!(_WORD)v206)
        {
          if (*(_DWORD *)(v19 + 8) != 1)
          {
            v100 = v189;
            goto LABEL_211;
          }
          v173 = v86;
          v100 = v189;
          if (v167)
          {
            StrArrDump((uint64_t)v167, v185, (uint64_t)"NLU feat Before AP subst", (uint64_t)"NLU", v96, v97, v98, v99);
            v101 = v167;
            v102 = *(unsigned __int16 *)(v19 + 56);
            if (v167[1] < v102)
            {
              NextTokenRecIdAtFrom = StrArrRealloc(v167, v102 + 10);
              if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                goto LABEL_266;
              v102 = *(unsigned __int16 *)(v19 + 56);
              v101 = v167;
            }
            NextTokenRecIdAtFrom = NLUFeatAdaptToAp(v101, v185, v102);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_266;
            StrArrDump((uint64_t)v101, *(unsigned __int16 *)(v19 + 56), (uint64_t)"NLU feats after AP subst", (uint64_t)"NLU", v103, v104, v105, v106);
            v100 = v189;
          }
          else
          {
            v101 = 0;
          }
          v167 = v101;
          if (!v168)
          {
            v168 = 0;
            v86 = v173;
            goto LABEL_197;
          }
          StrArrDump((uint64_t)v168, v185, (uint64_t)"POS Before AP subst", (uint64_t)"POS", v96, v97, v98, v99);
          v159 = *(unsigned __int16 *)(v19 + 56);
          if (v168[1] < v159)
          {
            NextTokenRecIdAtFrom = StrArrRealloc(v168, v159 + 10);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_266;
            v159 = *(unsigned __int16 *)(v19 + 56);
          }
          NextTokenRecIdAtFrom = POSAdaptToAp(v168, v185, v159);
          if ((NextTokenRecIdAtFrom & 0x80000000) == 0)
          {
            StrArrDump((uint64_t)v168, *(unsigned __int16 *)(v19 + 56), (uint64_t)"POS after AP subst", (uint64_t)"POS", v160, v161, v162, v163);
            v86 = v173;
            v100 = v189;
            goto LABEL_197;
          }
          goto LABEL_266;
        }
      }
      if (v201 == 4)
        goto LABEL_129;
LABEL_157:
      v87 = 0;
      goto LABEL_168;
    }
    v167 = 0;
    v168 = 0;
    v86 = 0;
    LOWORD(v166) = 0;
    v100 = v189;
    if (*(_DWORD *)(v19 + 8) == 1)
    {
LABEL_197:
      NextTokenRecIdAtFrom = hlp_AlignOrthAndPhonWords(a10, v26, v18, (unsigned __int16 *)v19, v190, v179, v24, a9, a4, v100, &v196);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
    }
LABEL_211:
    v174 = v86;
    v193 = v24;
    v176 = v19;
    v118 = v100;
    v119 = v100 + a4;
    v120 = *(_DWORD *)(a9 + 4);
    v186 = *(_DWORD *)(a9 + 8);
    v181 = *(_QWORD *)(a9 + 16);
    v121 = v196 + v27;
    v188 = v84;
    v122 = *(_QWORD *)(v84 + 8);
    v123 = v119;
    v171 = *(_DWORD *)a9;
    if (v119 <= v120)
    {
      v124 = (unsigned __int16)(v196 + v27);
      v57 = CI_Update(v122, (_DWORD *)a9, 0, v120, v121);
      v107 = v168;
      if ((v57 & 0x80000000) != 0)
        goto LABEL_267;
    }
    else
    {
      v57 = CI_Update(v122, (_DWORD *)a9, *(_DWORD *)a9, v120, v119 - v120);
      if ((v57 & 0x80000000) != 0)
        goto LABEL_267;
      v124 = v121;
      v125 = CILE_New(*(_QWORD **)(v84 + 8), 0, v123, v121);
      if (!v125)
      {
        v158 = *(_QWORD *)(v84 + 32);
        goto LABEL_257;
      }
      *(_QWORD *)(a9 + 16) = v125;
      v182 = v125;
      v118 = v189;
      v107 = v168;
    }
    v130 = v123 + v124;
    v131 = v186 + v120 - (v123 + v124);
    if (v186 + v120 <= v123 + v124)
    {
      v132 = v188;
      v138 = v193;
      v133 = v182;
    }
    else
    {
      v132 = v188;
      v133 = CILE_New(*(_QWORD **)(v188 + 8), v171, v130, v131);
      v138 = v193;
      if (!v133)
      {
        log_OutPublic(*(_QWORD *)(v188 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v134, v135, v136, v137, v165);
        *((_QWORD *)v182 + 2) = v181;
LABEL_258:
        v57 = 2296389642;
        goto LABEL_267;
      }
      *((_QWORD *)v182 + 2) = v133;
    }
    *((_QWORD *)v133 + 2) = v181;
    if (*(_DWORD *)(v176 + 8) == 1)
    {
      v205 = 0;
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v18 + 104))(a10, v26, 1, 0, (char *)&v206 + 2);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v18 + 104))(a10, v26, 2, HIWORD(v206), &v206);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
      NextTokenRecIdAtFrom = hlp_GetNextTokenRecIdAtFrom(a10, v26, v18, v118, (unsigned __int16)v206, &v205);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_266;
      if ((~(_DWORD)v212 & 0xFFFF0000) != 0)
      {
        NextTokenRecIdAtFrom = hlp_InsertInitialPhraseRecord(a10, v26, v18, HIWORD(v206), (uint64_t)&v212, &v205);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_266;
      }
      v139 = *(unsigned __int16 *)(v176 + 56);
      if (*(_WORD *)(v176 + 56))
      {
        v140 = v118;
        v141 = 0;
        v142 = 0;
        do
        {
          LOWORD(v207) = 0;
          if (v139 - 1 == v141)
            v142 = 1;
          v143 = (char *)&(*v190)[(unsigned __int16)v140];
          v144 = hlp_SearchWordBoundaryInOrth(v143);
          if (v144 == 0xFFFF)
            v144 = strlen(v143);
          v145 = v144 + v140;
          NextTokenRecIdAtFrom = hlp_InsertPromptWordRecord(a10, v26, v18, v176, (uint64_t)v167, (uint64_t)v107, (unsigned __int16)v141, v142, HIWORD(v206), v140, SBYTE1(v140), v144 + v140, v200, v174, (unsigned __int16 *)&v207, &v199, &v204, &v205);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          v146 = *v190;
          for (k = (*v190)[(unsigned __int16)v145]; k; k = v146[(unsigned __int16)++v145])
          {
            if (!memchr(&szWordBoundOrth, k, 3uLL))
              break;
          }
          NextTokenRecIdAtFrom = hlp_GetNextTokenRecIdAtFrom(a10, v26, v18, (unsigned __int16)v145, v205, &v205);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_266;
          if (!v204)
          {
            NextTokenRecIdAtFrom = hlp_CreateOrUpdatePhraseRecord(a10, v26, v18, v142, (unsigned __int16)v166, v140, v199, (__int16)v207, &v205);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_266;
          }
          ++v141;
          v139 = *(unsigned __int16 *)(v176 + 56);
          v140 = v145;
        }
        while (v141 < v139);
      }
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v18 + 272))(a10, v26, 16, 3, 0, 0);
      goto LABEL_252;
    }
    v148 = *v138;
    LOWORD(v149) = a8;
    v150 = *v179;
    if (v148 > a8)
    {
      v149 = a8;
      v151 = (unsigned int *)(v150 + 32 * a8 + 12);
      while (1)
      {
        v152 = *v151;
        v151 += 8;
        if (v152 > v123)
          break;
        if (v148 == ++v149)
        {
          LOWORD(v149) = *v138;
          break;
        }
      }
    }
    v153 = heap_Realloc(*(uint64_t **)(v132 + 8), v150, 32 * v148 + 32);
    if (v153)
    {
      *v179 = v153;
      v154 = *v138;
      if ((unsigned __int16)v149 < v154)
      {
        memmove((void *)(v153 + 32 * ((unsigned __int16)v149 + 1)), (const void *)(v153 + 32 * (unsigned __int16)v149), 32 * (int)(v154 - (unsigned __int16)v149));
        LOWORD(v154) = *v138;
        v153 = *v179;
      }
      *v138 = v154 + 1;
      v155 = (_OWORD *)(v153 + 32 * (unsigned __int16)v149);
      *v155 = 0u;
      v155[1] = 0u;
      v156 = *v179;
      *(_DWORD *)(*v179 + 32 * (unsigned __int16)v149) = 26;
      if ((_WORD)v149)
        *(_DWORD *)(v156 + 32 * (unsigned __int16)v149 + 4) = *(_DWORD *)(v156
                                                                          + 32
                                                                          * ((unsigned __int16)v149 - 1)
                                                                          + 4);
      v157 = v156 + 32 * (unsigned __int16)v149;
      *(_DWORD *)(v157 + 12) = v123;
      *(_QWORD *)(v157 + 24) = v197;
LABEL_252:
      v108 = v167;
      if ((v57 & 0x80000000) != 0)
        goto LABEL_267;
      goto LABEL_190;
    }
    v158 = *(_QWORD *)(v132 + 32);
LABEL_257:
    log_OutPublic(v158, (uint64_t)"DOMAIN_MNGR", 47000, 0, v126, v127, v128, v129, v165);
    goto LABEL_258;
  }
  v191 = v24;
  v28 = v25;
  v29 = *(_QWORD **)v19;
  if (*(_DWORD *)(*(_QWORD *)v19 + 32) != 1)
  {
    v188 = v17;
    if (*(_QWORD *)(*v29 + 64))
    {
      v64 = (const char *)v29[10];
      if (v64)
        v65 = strlen(v64);
      else
        v65 = 0;
      v69 = (const char *)v29[5];
      if (v69)
        v70 = strlen(v69);
      else
        v70 = 0;
      v71 = strlen(*(const char **)(v19 + 16));
      v72 = (char *)heap_Alloc(*(_QWORD *)(v188 + 8), (v65 + v70 + v71 + 1));
      if (!v72)
      {
        v57 = 2296389642;
        v68 = *(_QWORD *)(v188 + 32);
        goto LABEL_117;
      }
      v73 = v72;
      v74 = *(const char **)(*(_QWORD *)v19 + 80);
      if (v74)
        strcpy(v72, v74);
      strcpy((char *)&v73[v65], *(const char **)(v19 + 16));
      v75 = *(_QWORD **)v19;
      v76 = *(const char **)(*(_QWORD *)v19 + 40);
      v176 = v19;
      if (v76)
      {
        v77 = strlen(v73);
        strcpy((char *)&v73[v77], v76);
        v75 = *(_QWORD **)v19;
      }
      v78 = *v75;
      v79 = *(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, uint64_t, uint64_t, char **))(*(_QWORD *)(*v75 + 64) + 64);
      if (v75[10])
        v80 = 0;
      else
        v80 = v75[6];
      NullHandle = safeh_GetNullHandle();
      v83 = v79(*(_QWORD *)(v78 + 72), *(_QWORD *)(v78 + 80), v73, v80, NullHandle, v82, &v197);
      v17 = v188;
      heap_Free(*(_QWORD **)(v188 + 8), (uint64_t)v73);
      v19 = v176;
      v25 = v28;
      v24 = v191;
      if ((v83 & 0x80000000) == 0)
        goto LABEL_120;
    }
    else
    {
      v176 = v19;
    }
    v57 = 0;
    v107 = 0;
    v108 = 0;
LABEL_190:
    v207 = 0;
    StrArrDelete(v108);
    StrArrDelete(v107);
    if ((ssftstring_ObjOpen(*(_QWORD **)(v188 + 8), &v207) & 0x80000000) == 0)
    {
      if ((ssftstring_AppendCStr((uint64_t)v207, *(char **)(*(_QWORD *)(*(_QWORD *)v176 + 8) + 168)) & 0x80000000) == 0
        && (ssftstring_AppendCStr((uint64_t)v207, "::") & 0x80000000) == 0
        && (ssftstring_AppendCStr((uint64_t)v207, *(char **)(v176 + 16)) & 0x80000000) == 0)
      {
        v109 = *(uint64_t ***)(v188 + 32);
        ssftstring_CStr((uint64_t)v207);
        log_OutEvent(v109, 14, "%s%s", v110, v111, v112, v113, v114, "APID");
      }
      ssftstring_ObjClose((_QWORD **)v207);
    }
    goto LABEL_267;
  }
  v207 = 0;
  v30 = v17;
  RecPromptURI = activeprompt_GetRecPromptURI((unsigned int *)v19, *(_QWORD *)(v17 + 8), &v207);
  if ((RecPromptURI & 0x80000000) != 0)
  {
    v57 = RecPromptURI;
  }
  else
  {
    if (vector_Add(*(_QWORD *)(**(_QWORD **)v19 + 88), &v207))
    {
      v197 = v207;
      v25 = v28;
      v24 = v191;
      goto LABEL_120;
    }
    v57 = 2296389642;
    heap_Free(*(_QWORD **)(v30 + 8), (uint64_t)v207);
  }
  v68 = *(_QWORD *)(v30 + 32);
LABEL_117:
  log_OutPublic(v68, (uint64_t)"DOMAIN_MNGR", 47000, 0, v32, v33, v34, v35, v165);
LABEL_267:
  *a12 += v196;
  return v57;
}

uint64_t hlp_RemoveSetPhonInRange(uint64_t result, _DWORD **a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  unsigned __int16 v5;
  const char **v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v5 = *a3;
  if (*a3)
  {
    v9 = (const char **)result;
    v10 = 0;
    v11 = 0;
    v20 = 0;
    v18 = 0;
    v17 = 0;
    v12 = a5 + a4;
    do
    {
      v13 = *a2;
      v14 = &(*a2)[8 * v11];
      if (*v14 != 34
        || ((result = hlp_GetRangeForSETPHON(*v9, v13, v5, v11, &v20, &v19, &v18, (unsigned int *)&v17 + 1, (unsigned int *)&v17), (_DWORD)result)? (v15 = HIDWORD(v17) >= a4): (v15 = 0), v15 ? (v16 = v17 >= v12) : (v16 = 1), v16))
      {
        ++v11;
      }
      else
      {
        result = (uint64_t)memmove(v14, &v13[8 * (v10 + 1)], 32 * (~v10 + v5));
        v5 = *a3 - 1;
        *a3 = v5;
      }
      v10 = v11;
    }
    while (v11 < v5);
  }
  return result;
}

_QWORD *StrArrInit(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;

  v2 = (_QWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 24);
  v3 = v2;
  if (v2)
  {
    *v2 = a1;
    v2[1] = 10;
    v4 = heap_Alloc(*(_QWORD *)(a1 + 8), 80);
    v3[2] = v4;
    if (v4)
    {
      v5 = v3[1];
      if (v5)
      {
        for (i = 0; i != v5; ++i)
          *(_QWORD *)(v3[2] + 8 * i) = 0;
      }
    }
    else
    {
      StrArrDelete(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t StrArrSave(_QWORD *a1, unint64_t a2, uint64_t __s)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  char *v9;

  v3 = a1[2];
  if (!v3)
    return 7;
  if (a1[1] <= a2)
  {
    if (StrArrRealloc(a1, a2 + 10))
      return 2296389642;
    v3 = a1[2];
  }
  v7 = *(_QWORD *)(v3 + 8 * a2);
  if (v7)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v7);
    *(_QWORD *)(a1[2] + 8 * a2) = 0;
  }
  if (__s)
  {
    v8 = strlen((const char *)__s);
    *(_QWORD *)(a1[2] + 8 * a2) = heap_Alloc(*(_QWORD *)(*a1 + 8), (v8 + 1));
    v9 = *(char **)(a1[2] + 8 * a2);
    if (v9)
    {
      strcpy(v9, (const char *)__s);
      return 0;
    }
    else
    {
      __s = 2296389642;
      StrArrDelete(a1);
    }
  }
  return __s;
}

uint64_t hlp_SavePhraseProps(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *__src;
  __int16 v11;

  v11 = 0;
  __src = 0;
  if ((_DWORD)a4 && a5)
  {
    v9 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(result + 168))(a2, a3, a4, 8, 1, a5, &v11);
    if ((result & 0x80000000) != 0
      || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v9 + 168))(a2, a3, a4, 7, 1, a5 + 2, &v11), (result & 0x80000000) != 0)|| (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(v9 + 176))(a2, a3, a4, 4, &__src, &v11), (result & 0x80000000) != 0))
    {
      *(_DWORD *)a5 = -65536;
      *(_BYTE *)(a5 + 4) = 0;
    }
    else if (__src)
    {
      if (v11)
      {
        result = (uint64_t)strncpy((char *)(a5 + 4), __src, 8uLL);
        *(_BYTE *)(a5 + 11) = 0;
      }
    }
  }
  return result;
}

uint64_t StrArrDump(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (_QWORD *)result;
  if (a3)
    result = log_OutText(*(_QWORD *)(*(_QWORD *)result + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"%s", a6, a7, a8, a3);
  if (a2)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*v10 + 32);
      if (*(_QWORD *)(v10[2] + 8 * v11))
        result = log_OutText(v12, (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"%s %3u: %s", a6, a7, a8, a4);
      else
        result = log_OutText(v12, (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"%s %3u: <NULL>", a6, a7, a8, a4);
      ++v11;
    }
    while (a2 != v11);
  }
  return result;
}

uint64_t StrArrRealloc(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (a1[1] >= a2)
    return 0;
  v4 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[2], (8 * a2));
  if (v4)
  {
    a1[2] = v4;
    v5 = a1[1];
    if (v5 < a2)
    {
      do
        *(_QWORD *)(a1[2] + 8 * v5++) = 0;
      while (a2 != v5);
    }
    result = 0;
    a1[1] = a2;
  }
  else
  {
    StrArrDelete(a1);
    return 2296389642;
  }
  return result;
}

uint64_t NLUFeatAdaptToAp(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  const char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  int v17;
  char *v18;
  unint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *i;
  uint64_t *v32;
  unsigned int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v3 = a1[2];
  if (!v3)
    return 7;
  v4 = a2;
  v6 = a1[1];
  if (v6 < a2)
    return 7;
  v7 = 0;
  if (a3 && a2 && a3 != a2)
  {
    if (a3 <= a2)
    {
      v49 = 0;
      v21 = StrArrInit(*a1);
      if (!v21)
        return 2296389642;
      v26 = v21;
      v27 = a3 - 1;
      if (v27 >= v4)
      {
        v28 = 0;
      }
      else
      {
        v28 = 0;
        v29 = v27;
        do
        {
          v30 = a1[2];
          if (v30)
          {
            if (a1[1] > v29)
            {
              for (i = *(char **)(v30 + 8 * v29); i; i = hlp_NLUStrNext(i))
              {
                if (memchr("seiSEI", *i, 7uLL) && i[1] == 95)
                {
                  v32 = *(uint64_t **)(*a1 + 8);
                  v33 = hlp_NLUStrLength(i);
                  v34 = strhelper_StringAppend(v32, 0, i, v33, &v49, 0xAuLL);
                  if (!v34)
                    goto LABEL_70;
                  v35 = v34;
                  v36 = StrArrSave(v26, v28, (uint64_t)v34);
                  if ((_DWORD)v36)
                  {
                    v7 = v36;
                    goto LABEL_76;
                  }
                  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v35);
                  v49 = 0;
                  ++v28;
                }
              }
            }
          }
          ++v29;
        }
        while (v29 != v4);
      }
      StrArrDump((uint64_t)v26, v28, (uint64_t)"Extra words before purge", (uint64_t)"NLU", v22, v23, v24, v25);
      PurgeNLUStrArr(v26, v28, 69, 83, 0);
      PurgeNLUStrArr(v26, v28, 73, 73, 73);
      PurgeNLUStrArr(v26, v28, 73, 69, 69);
      PurgeNLUStrArr(v26, v28, 83, 73, 83);
      StrArrDump((uint64_t)v26, v28, (uint64_t)"Extra words after purge", (uint64_t)"NLU", v37, v38, v39, v40);
      v41 = a1[2];
      if (v41 && a1[1] > v27 && (v42 = *(char **)(v41 + 8 * v27)) != 0)
      {
        v35 = 0;
        while (1)
        {
          if (!memchr("seiSEI", *v42, 7uLL) || v42[1] != 95)
          {
            if (v49)
            {
              v35 = strhelper_StringAppend(*(uint64_t **)(*a1 + 8), v35, ";", 0xFFFFFFFFFFFFFFFFLL, &v49, 0xAuLL);
              if (!v35)
                break;
            }
            v43 = *(uint64_t **)(*a1 + 8);
            v44 = hlp_NLUStrLength(v42);
            v35 = strhelper_StringAppend(v43, v35, v42, v44, &v49, 0xAuLL);
            if (!v35)
              break;
          }
          v42 = hlp_NLUStrNext(v42);
          if (!v42)
            goto LABEL_60;
        }
      }
      else
      {
        v35 = 0;
LABEL_60:
        if (!v28)
        {
          v7 = 0;
LABEL_72:
          if (v35)
LABEL_76:
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v35);
          goto LABEL_77;
        }
        v45 = 0;
        while (1)
        {
          v46 = v26[2];
          if (v46)
          {
            if (v26[1] > v45)
            {
              v47 = *(char **)(v46 + 8 * v45);
              if (v47)
              {
                if (v49)
                {
                  v35 = strhelper_StringAppend(*(uint64_t **)(*a1 + 8), v35, ";", 0xFFFFFFFFFFFFFFFFLL, &v49, 0xAuLL);
                  if (!v35)
                    break;
                }
                v35 = strhelper_StringAppend(*(uint64_t **)(*a1 + 8), v35, v47, 0xFFFFFFFFFFFFFFFFLL, &v49, 0xAuLL);
                if (!v35)
                  break;
              }
            }
          }
          v48 = StrArrSave(a1, v27, (uint64_t)v35);
          if (v28 == ++v45)
          {
            v7 = v48;
            goto LABEL_72;
          }
        }
      }
LABEL_70:
      v7 = 2296389642;
LABEL_77:
      v49 = 0;
      StrArrDelete(v26);
      return v7;
    }
    if (v6 > a2 - 1 && (v10 = *(const char **)(v3 + 8 * (a2 - 1))) != 0)
    {
      v11 = *(_QWORD *)(*a1 + 8);
      v12 = strlen(v10);
      v13 = (char *)heap_Alloc(v11, (v12 + 1));
      if (v13)
      {
        v14 = (uint64_t)v13;
        v15 = strcpy(v13, v10);
        do
        {
          if ((*v15 | 0x20) == 0x73 && v15[1] == 95)
          {
            v16 = hlp_NLUStrLength(v15);
            v17 = 1;
            v18 = v15;
            do
            {
              if ((*v18 | 0x20) == 0x65
                && v18[1] == 95
                && v16 == hlp_NLUStrLength(v18)
                && !strncmp(v15 + 2, v18 + 2, v16 - 2))
              {
                v17 = 0;
              }
              v18 = hlp_NLUStrNext(v18);
            }
            while (v18);
            if (v17)
              *v15 = 73;
          }
          v15 = hlp_NLUStrNext(v15);
        }
        while (v15);
        v19 = a3 - 1;
        do
        {
          v7 = StrArrSave(a1, v4, v14);
          if ((_DWORD)v7)
            break;
        }
        while (v19 != v4++);
        heap_Free(*(_QWORD **)(*a1 + 8), v14);
      }
      else
      {
        return 10;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t POSAdaptToAp(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;

  if (!a1[2])
    return 7;
  v3 = a2;
  if (a1[1] < a2)
    return 7;
  result = 0;
  if (a2 && a3 > a2)
  {
    while (1)
    {
      result = StrArrSave(a1, v3, (uint64_t)"*");
      if ((_DWORD)result)
        break;
      if (a3 == ++v3)
        return 0;
    }
  }
  return result;
}

uint64_t hlp_AlignOrthAndPhonWords(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, const char **a5, _QWORD *a6, _WORD *a7, uint64_t a8, int a9, unsigned __int16 a10, _WORD *a11)
{
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  const char *v21;
  char i;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  __int16 v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _DWORD *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t result;
  unsigned __int16 v50;
  int v51;
  uint64_t j;
  int v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v65;
  __int16 v66;
  __int16 v67;
  int v68;

  v16 = a10;
  *a11 = 0;
  v17 = (char *)*((_QWORD *)a4 + 6);
  v18 = hlp_SearchWordBoundaryInOrth(v17);
  v61 = a2;
  v62 = a3;
  v60 = a1;
  if (v18 == 0xFFFF)
  {
    v19 = 1;
  }
  else
  {
    v20 = 0;
    v19 = 1;
    do
    {
      ++v19;
      v20 += v18 + 1;
      v18 = hlp_SearchWordBoundaryInOrth(&v17[v20]);
    }
    while (v18 != 0xFFFF);
  }
  v21 = *a5;
  for (i = (*a5)[a10]; i; i = v21[(unsigned __int16)v16])
  {
    if (memchr(&szWordBoundOrth, i, 3uLL))
      break;
    v16 = (v16 + 1);
  }
  v23 = a4[28];
  if (v23 >= 2)
  {
    v58 = a8;
    v24 = 1;
    v25 = 1;
    while (1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v27 = *(_QWORD *)(v26 + 280);
      if (v27)
      {
        v28 = *(_DWORD *)(v27 + 4 * *((unsigned int *)a4 + 24));
        if (v28 == -1)
          goto LABEL_25;
        v29 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 288) + (v28 + v24));
      }
      else
      {
        if ((unsigned __int16)v19 <= (unsigned __int16)v23)
        {
          if ((unsigned __int16)v23 - (unsigned __int16)v19 < v24)
            goto LABEL_25;
          goto LABEL_27;
        }
        if (v24 != 1)
          goto LABEL_25;
        v29 = v19 - v23 + 1;
      }
      if ((_BYTE)v29)
      {
        if (v29 == 1)
        {
LABEL_25:
          v31 = (unsigned __int16)v16;
        }
        else
        {
          v30 = (v29 - 2);
          do
          {
            v21[(unsigned __int16)v16] = 45;
            v21 = *a5;
            do
            {
              v16 = (v16 + 1);
              v31 = (unsigned __int16)v16;
            }
            while (v21[(unsigned __int16)v16] && !memchr(&szWordBoundOrth, v21[(unsigned __int16)v16], 3uLL));
            --v29;
          }
          while (v29 > 1u);
          v25 += v30 + 1;
        }
        ++v25;
        v32 = v16;
        goto LABEL_66;
      }
LABEL_27:
      if ((_WORD)v16)
      {
        v33 = *(char **)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 192);
        v32 = (unsigned __int16)v16;
        while (strchr(v33, v21[(v32 - 1)]))
        {
          if (!(_WORD)--v32)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v32 = 0;
      }
      v34 = strlen(v21);
      v31 = (unsigned __int16)v32;
      if (v34 >= (unsigned __int16)v32)
      {
        v36 = v34;
        v37 = *(_QWORD *)(**(_QWORD **)a4 + 16);
        v38 = heap_Realloc(*(uint64_t **)(v37 + 8), (uint64_t)v21, (v34 + 4));
        if (!v38)
        {
          log_OutPublic(*(_QWORD *)(v37 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v39, v40, v41, v42, v58);
          return 2296389642;
        }
        *a5 = (const char *)v38;
        memmove((void *)(v38 + (unsigned __int16)v32 + 3), (const void *)(v38 + (unsigned __int16)v32), v36 - (unsigned __int16)v32 + 1);
        (*a5)[(unsigned __int16)v32] = 32;
        *(_WORD *)&(*a5)[(unsigned __int16)v32 + 1] = -22590;
        v43 = (unsigned __int16)*a7;
        if (*a7)
        {
          v44 = a9 + (unsigned __int16)v32;
          v45 = (_DWORD *)(*a6 + 16);
          do
          {
            v46 = *(v45 - 1);
            if (v46 >= v44)
            {
              *(v45 - 1) = v46 + 3;
            }
            else
            {
              v47 = *v45 + v46;
              if (*v45)
                v48 = v47 >= v44;
              else
                v48 = 0;
              if (v48)
                *v45 += 3;
            }
            v45 += 8;
            --v43;
          }
          while (v43);
        }
        v68 = 0;
        v67 = 0;
        v66 = 0;
        v65 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v62 + 104))(v60, v61, 1, 0, (char *)&v68 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v62 + 104))(v60, v61, 2, HIWORD(v68), &v68);
        if ((result & 0x80000000) != 0)
          return result;
        v50 = v68;
        if ((_WORD)v68)
        {
          while (1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v62 + 168))(v60, v61, v50, 1, 1, (char *)&v65 + 2, &v67);
            if ((result & 0x80000000) != 0)
              return result;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v62 + 168))(v60, v61, (unsigned __int16)v68, 2, 1, &v65, &v67);
            if ((result & 0x80000000) != 0)
              return result;
            if (HIWORD(v65) > (unsigned __int16)v32)
            {
              HIWORD(v65) += 3;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v62 + 160))(v60, v61, (unsigned __int16)v68, 1, 1, (char *)&v65 + 2, &v66);
              if ((result & 0x80000000) != 0)
                return result;
            }
            if ((unsigned __int16)v65 > (unsigned __int16)v32)
            {
              LOWORD(v65) = v65 + 3;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v62 + 160))(v60, v61, (unsigned __int16)v68, 2, 1, &v65, &v66);
              if ((result & 0x80000000) != 0)
                return result;
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v62 + 120))(v60, v61, (unsigned __int16)v68, &v68);
            if ((result & 0x80000000) == 0)
            {
              v50 = v68;
              if ((_WORD)v68)
                continue;
            }
            if ((result & 0x80000000) != 0)
              return result;
            break;
          }
        }
        v51 = *(_DWORD *)(v58 + 8);
        if (v51 <= -3)
          v51 = -3;
        *(_DWORD *)(v58 + 8) = v51 + 3;
        for (j = *(_QWORD *)(v58 + 16); j; j = *(_QWORD *)(j + 16))
        {
          v53 = *(_DWORD *)(j + 4);
          if (v53 <= -3)
            v53 = -3;
          *(_DWORD *)(j + 4) = v53 + 3;
        }
        v35 = 3;
      }
      else
      {
        v35 = 0;
      }
      *a11 += v35;
      v21 = *a5;
LABEL_66:
      v54 = v21[v31];
      if (v54)
      {
        while (1)
        {
          v55 = v54;
          if (!memchr(&szWordBoundOrth, v54, 3uLL)
            && !strchr(*(char **)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 192), v55))
          {
            break;
          }
          v32 = (v32 + 1);
          v54 = v21[(unsigned __int16)v32];
          if (!v54)
            goto LABEL_70;
        }
        v56 = v21[(unsigned __int16)v32];
        if (v56)
        {
          v57 = v32;
          while (!memchr(&szWordBoundOrth, v56, 3uLL))
          {
            v57 = (v57 + 1);
            v56 = v21[(unsigned __int16)v57];
            v32 = v57;
            if (!v56)
              goto LABEL_70;
          }
          v32 = v57;
        }
      }
LABEL_70:
      ++v24;
      v23 = a4[28];
      v16 = v32;
      if (v24 >= v23)
        goto LABEL_79;
    }
  }
  v25 = 1;
  LOWORD(v32) = v16;
LABEL_79:
  while ((unsigned __int16)v25 < (unsigned __int16)v19)
  {
    v21[(unsigned __int16)v32] = 45;
    v21 = *a5;
    do
      LOWORD(v32) = v32 + 1;
    while (v21[(unsigned __int16)v32] && !memchr(&szWordBoundOrth, v21[(unsigned __int16)v32], 3uLL));
    ++v25;
  }
  return 0;
}

uint64_t hlp_GetNextTokenRecIdAtFrom(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _WORD *a6)
{
  uint64_t result;
  __int16 v12;
  unsigned __int16 v13;
  __int16 v14;

  v14 = a5;
  if (!a5)
    return 0;
  v13 = 0;
  v12 = 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a3 + 168))(a1, a2, (unsigned __int16)a5, 1, 1, &v13, &v12);
    if ((result & 0x80000000) != 0)
      break;
    if (v13 >= a4)
      break;
    *a6 = v14;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a1, a2);
    if ((result & 0x80000000) != 0)
      break;
    LOWORD(a5) = v14;
  }
  while (v14);
  return result;
}

uint64_t hlp_InsertInitialPhraseRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t result;
  const char *v12;
  __int16 v13;
  __int16 v14;
  int v15;
  __int16 v16;

  v16 = 0;
  v15 = 15;
  if (*a6)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(a1, a2);
    if ((result & 0x80000000) != 0)
      return result;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a3 + 72))(a1, a2, 2, a4, a6);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v14 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 0, 1, &v15, &v14);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 1, 1, &v16, &v14);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 2, 1, &v16, &v14);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 7, 1, a5 + 2, &v14);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 8, 1, a5, &v14);
          if ((result & 0x80000000) == 0)
          {
            v12 = (const char *)(a5 + 4);
            v13 = strlen(v12);
            return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 4, (unsigned __int16)(v13 + 1), v12, &v14);
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_SearchWordBoundaryInOrth(char *a1)
{
  char *v2;
  unsigned __int16 v3;
  uint64_t v4;
  int v5;

  v2 = strstr(a1, "%Ä");
  if (v2)
    v3 = (_WORD)v2 - (_WORD)a1;
  else
    v3 = strlen(a1);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      v5 = a1[v4];
      if (v5 == 32 || v5 == 95)
        break;
      if (v3 == ++v4)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    LOWORD(v4) = -1;
  }
  return (unsigned __int16)v4;
}

uint64_t hlp_InsertPromptWordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned __int16 a9, char a10, char a11, char a12, unsigned __int16 a13, int a14, unsigned __int16 *a15, _WORD *a16, _DWORD *a17, unsigned __int16 *a18)
{
  unsigned __int16 *v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unsigned int v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _WORD *v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  _WORD *v68;
  _DWORD *v69;
  unsigned __int16 *v70;
  int v71;
  unsigned int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v86;
  int v87;
  __int16 v88;
  unsigned int v89;
  char v90;
  char __s[2];
  int v92;
  int v93[4];
  char v94[8];
  uint64_t v95;

  v21 = a18;
  v95 = *MEMORY[0x1E0C80C00];
  v86 = *(_QWORD *)(**(_QWORD **)a4 + 16);
  if (a7)
    v23 = 11;
  else
    v23 = 13;
  v92 = v23;
  strcpy(__s, "*");
  v90 = 0;
  v89 = 0;
  v88 = 0;
  v24 = *(_QWORD *)(a4 + 80);
  v84 = *(_QWORD *)(a4 + 88);
  v25 = *(unsigned __int16 *)(v84 + 8 * a7);
  v87 = 0;
  if (*a18)
  {
    v26 = a1;
    v27 = a2;
    v28 = (*(uint64_t (**)(void))(a3 + 80))();
    if ((v28 & 0x80000000) != 0)
      return v28;
  }
  else
  {
    v26 = a1;
    v27 = a2;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a3 + 72))(a1, a2, 2, a9, a18);
    if ((v28 & 0x80000000) != 0)
      return v28;
  }
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a3 + 160))(v26, v27, *v21, 0, 1, &v92, &v88);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a3 + 160))(v26, v27, *v21, 1, 1, &a10, &v88);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a3 + 160))(v26, v27, *v21, 2, 1, &a12, &v88);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v29 = (const char *)(v24 + v25);
  v81 = a3;
  v30 = strlen(v29);
  v80 = v26;
  v82 = v27;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, __int16 *))(a3 + 160))(v26, v27, *v21, 3, (unsigned __int16)(v30 + 1), v29, &v88);
  if ((v28 & 0x80000000) != 0)
    return v28;
  if (a5)
  {
    v31 = *(_QWORD *)(a5 + 16);
    if (v31)
    {
      if (*(_QWORD *)(a5 + 8) > (unint64_t)a7)
      {
        v32 = *(_QWORD *)(v31 + 8 * a7);
        if (v32)
        {
          v33 = strlen(*(const char **)(v31 + 8 * a7));
          v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, __int16 *))(a3 + 160))(v26, v27, *v21, 14, (unsigned __int16)(v33 + 1), v32, &v88);
          if ((v28 & 0x80000000) != 0)
            return v28;
        }
      }
    }
  }
  v79 = a7;
  if (a6
    && (v34 = *(_QWORD *)(a6 + 16)) != 0
    && *(_QWORD *)(a6 + 8) > (unint64_t)a7
    && (v35 = *(const char **)(v34 + 8 * a7)) != 0)
  {
    v36 = a3;
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a3 + 160);
    v38 = (unsigned __int16)(strlen(v35) + 1);
    v39 = v80;
    v40 = v80;
    v41 = v82;
    v42 = *v21;
    v43 = (char *)v35;
  }
  else
  {
    v36 = a3;
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a3 + 160);
    v38 = (unsigned __int16)(strlen(__s) + 1);
    v43 = __s;
    v39 = v80;
    v40 = v80;
    v41 = v82;
    v42 = *v21;
  }
  v28 = v37(v40, v41, v42, 5, v38, v43, &v88);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v78 = a7;
  v44 = 2296389642;
  v89 = strlen(v29) + 1;
  v45 = heap_Calloc(*(_QWORD **)(v86 + 8), v89, 1);
  if (v45)
  {
    v46 = (const char *)v45;
    v47 = strlen(v29);
    utf8_Utf8ToDepes((uint64_t)v29, v47, 0, (uint64_t)v46, v89, &v89, 0);
    v48 = strlen(v46);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, __int16 *))(v36 + 160))(v39, v82, *v21, 15, (unsigned __int16)(v48 + 1), v46, &v88);
    if ((v49 & 0x80000000) != 0)
    {
      v56 = (uint64_t)v46;
      v44 = v49;
      v50 = v86;
      goto LABEL_86;
    }
    v50 = v86;
    if ((domain_mngr_utils_IsActiveVoiceAddon(v86, *(char **)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 72), (char *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 80), (char *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 88), (char *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 100), &v87) & 0x80000000) != 0|| !v87|| (v93[0] = 0, (paramc_ParamGetInt(*(_QWORD *)(v86 + 40), *(_QWORD *)(*(_QWORD *)a4 + 72), v93) & 0x80000000) != 0)|| (v51 = v93[0]) == 0)
    {
      v56 = 0;
      v60 = v79;
      v59 = v82;
    }
    else
    {
      v52 = v84 + 8 * v79;
      v54 = *(unsigned __int16 *)(v52 + 4);
      v53 = (_WORD *)(v52 + 4);
      v55 = (void *)heap_Calloc(*(_QWORD **)(v86 + 8), v54, 4);
      if (!v55)
      {
        v56 = (uint64_t)v46;
        v50 = v86;
        goto LABEL_86;
      }
      v56 = (uint64_t)v55;
      memcpy(v55, (const void *)(*(_QWORD *)(a4 + 72) + 4 * *(unsigned __int16 *)(v84 + 8 * v79 + 2)), 4 * (unsigned __int16)*v53);
      v57 = (unsigned __int16)*v53;
      if (*v53)
      {
        v58 = 0;
        v50 = v86;
        v36 = a3;
        v59 = v82;
        v39 = v80;
        v60 = v79;
        do
        {
          v61 = *(_DWORD *)(v56 + v58);
          if (v61 != -1)
            *(_DWORD *)(v56 + v58) = v61 + v51;
          v58 += 4;
        }
        while (4 * v57 != v58);
      }
      else
      {
        v50 = v86;
        v36 = a3;
        v59 = v82;
        v39 = v80;
        v60 = v79;
      }
    }
    v63 = v59;
    v64 = (*(uint64_t (**)(uint64_t))(v36 + 160))(v39);
    if ((v64 & 0x80000000) != 0)
      goto LABEL_84;
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v36 + 160))(v39, v63, *v21, 6, 2, __s, &v88);
    if ((v64 & 0x80000000) != 0)
      goto LABEL_84;
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v36 + 160))(v39, v63, *v21, 9, 1, &v90, &v88);
    if ((v64 & 0x80000000) != 0)
      goto LABEL_84;
    v65 = *(_QWORD *)(*(_QWORD *)a4 + 8);
    if (*(_DWORD *)(v65 + 208) == 1)
    {
      __sprintf_chk(v94, 0, 8uLL, "%u", *(unsigned __int8 *)(*(_QWORD *)(v65 + 272)+ *(unsigned __int16 *)(v65 + 214)+ (*(_DWORD *)(a4 + 60) + v78) * *(unsigned __int16 *)(v65 + 212)));
      v66 = strlen(v94);
      v67 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *))(v36 + 160))(v39, v82, *v21, 13, (unsigned __int16)(v66 + 1), v94, &v88);
      if ((v67 & 0x80000000) != 0)
      {
        v44 = v67;
        goto LABEL_85;
      }
      v65 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v60 = v79;
      v36 = v81;
    }
    v68 = a16;
    v69 = a17;
    v70 = a15;
    v71 = *(unsigned __int16 *)(v84 + 8 * v60 + 6);
    *a15 = v71;
    if (*(_DWORD *)(v65 + 220) == 1)
    {
      v72 = *(unsigned __int8 *)(*(_QWORD *)(v65 + 272)
                               + *(unsigned __int16 *)(v65 + 216)
                               + (*(_DWORD *)(a4 + 60) + v78) * *(unsigned __int16 *)(v65 + 212));
      *v68 = v72;
      if (v72 < 2)
      {
        v73 = a8;
        if (*v70 != 0xFFFF && *v70)
        {
          v74 = 0;
        }
        else
        {
          v74 = 0;
          *v70 = 1;
        }
LABEL_64:
        v75 = a14;
        *v69 = 0;
        v76 = *v70;
        if (v73)
        {
          if (v75 || v76 == 0xFFFF)
          {
            v76 = a13;
            *v70 = a13;
            *v69 = 1;
          }
        }
        else if (v76 == 0xFFFF)
        {
          *v70 = 0;
LABEL_72:
          if (*(_DWORD *)(v65 + 228) == 1)
            v77 = v74;
          else
            v77 = 1;
          if (((v77 & 1) != 0 || *v70 == 65533 || !*v70) && (v73 != 1 || v75 != 1)
            || (strcpy((char *)v93, "external"),
                v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v36 + 160))(v39, v82, *v21, 18, 9, v93, &v88), (v64 & 0x80000000) == 0))
          {
            if ((__int16)*v70 == -3)
              *v70 = 200;
            v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(v36 + 160))(v39, v82, *v21, 8, 1, v70, &v88);
          }
LABEL_84:
          v44 = v64;
LABEL_85:
          heap_Free(*(_QWORD **)(v50 + 8), (uint64_t)v46);
          if (!v56)
            return v44;
LABEL_86:
          heap_Free(*(_QWORD **)(v50 + 8), v56);
          return v44;
        }
        if (v76)
          *v68 = 1;
        goto LABEL_72;
      }
      v73 = a8;
      if (v72 == 2)
        *v70 = 0;
    }
    else
    {
      if (!v71)
      {
        *v68 = 255;
        v74 = 1;
        v73 = a8;
        goto LABEL_64;
      }
      v73 = a8;
      if (v71 != 0xFFFF)
      {
        v74 = 0;
        *v68 = 1;
        goto LABEL_64;
      }
      *v68 = 255;
    }
    v74 = 1;
    goto LABEL_64;
  }
  return v44;
}

uint64_t hlp_CreateOrUpdatePhraseRecord(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 a6, int a7, __int16 a8, _WORD *a9)
{
  uint64_t result;
  __int16 v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v17 = a6;
  v16 = a7;
  v15 = a8;
  v14 = 15;
  if (a7 == 255)
  {
    result = 0;
    if (a4)
    {
      if ((_DWORD)a5)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 192))(a1, a2, a5);
    }
  }
  else
  {
    v13 = 0;
    if (a4 && (_DWORD)a5)
    {
      *a9 = a5;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(a3 + 80))(a1, a2, (unsigned __int16)*a9, a9);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 0, 1, &v14, &v13);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 1, 1, &v17, &v13);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 2, 1, &v17, &v13);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 4, 1, &byte_1DEBD87CE, &v13);
      if ((result & 0x80000000) != 0)
        return result;
      a5 = (unsigned __int16)*a9;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, a5, 7, 1, &v16, &v13);
    if ((result & 0x80000000) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 8, 1, &v15, &v13);
  }
  return result;
}

_QWORD *StrArrDelete(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
    {
      v3 = result[1];
      if (v3)
      {
        v4 = v3 - 1;
        do
        {
          v5 = *(_QWORD *)(v1[2] + 8 * v4);
          if (v5)
            heap_Free(*(_QWORD **)(*v1 + 8), v5);
          --v4;
        }
        while (v4 != -1);
        v2 = v1[2];
      }
      heap_Free(*(_QWORD **)(*v1 + 8), v2);
    }
    return heap_Free(*(_QWORD **)(*v1 + 8), (uint64_t)v1);
  }
  return result;
}

uint64_t activeprompt_InsertOrth(char **a1, unsigned __int16 a2, int a3, const char **a4, uint64_t *a5, unsigned __int16 *a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, _WORD *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  unsigned __int16 v31;
  int v32;
  char *v33;
  unsigned __int16 v34;
  __int16 v35;
  int v36;
  unsigned __int16 v37;
  char *v38;
  uint64_t v39;
  unsigned __int16 v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v51;
  char *v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unsigned __int16 v69;
  unsigned __int16 v70;
  unsigned __int16 v71;
  uint64_t v72;
  unsigned __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  uint64_t (*v84)(uint64_t, uint64_t, _QWORD, char *);
  uint64_t v85;
  uint64_t v86;
  __int16 v88;
  unsigned int v89;
  unsigned __int16 v90;
  __int16 v91;
  int v92;
  unsigned __int16 *v93;
  _BOOL4 v94;
  char v95;
  int v96;
  uint64_t v97;
  char *v98;
  unsigned __int16 v101;
  int v102;
  unsigned __int16 v103;
  int v104;
  uint64_t v106;
  unsigned __int16 v107;
  char *v108;
  __int16 v109;
  char *__s;
  unsigned __int16 v111;
  int v112;
  unsigned __int16 v113;
  int v114;
  int v115;
  int v116;
  int v117;
  unsigned __int16 v118[5];

  v118[0] = a2;
  v14 = *(_QWORD *)*a1;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = 2296389642;
  v117 = 0;
  v116 = 0;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 5;
  v111 = 0;
  __s = 0;
  v17 = *(_QWORD *)(v14 + 56);
  v109 = 0;
  v18 = a1[6];
  v19 = strstr(v18, "%Ä");
  v20 = v19;
  if (v19)
  {
    v21 = (_DWORD)v19 - (_DWORD)v18;
    v22 = (unsigned __int16)((_WORD)v19 - (_WORD)v18);
    v23 = (char *)heap_Alloc(*(_QWORD *)(v15 + 8), v22 + 1);
    if (!v23)
    {
      log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v24, v25, v26, v27, v89);
      return v16;
    }
    v18 = v23;
    v106 = v17;
    v108 = v20;
    strncpy(v23, a1[6], v22)[v22] = 0;
  }
  else
  {
    v106 = v17;
    v108 = 0;
    v21 = strlen(v18);
  }
  v28 = (unsigned __int16)v21;
  if ((_WORD)v21)
  {
    v93 = a6;
    v104 = v21;
    v97 = v15;
    v98 = v18;
    v29 = v118[0];
    v30 = *a4;
    v31 = strlen(*a4);
    v32 = v118[0];
    if (v31 > v118[0])
    {
      v33 = *(char **)(*((_QWORD *)*a1 + 1) + 192);
      v32 = v118[0];
      do
      {
        if (!strchr(v33, v30[(unsigned __int16)v32]))
          break;
        ++v32;
      }
      while (v31 > (unsigned __int16)v32);
    }
    if ((unsigned __int16)v32 == v31)
    {
      v91 = 0;
      v94 = 0;
      v34 = v104;
      v102 = v104;
    }
    else
    {
      if (v30[(unsigned __int16)v32] == 32)
        v35 = 0;
      else
        v35 = -1;
      v91 = v35;
      v94 = v30[(unsigned __int16)v32] != 32;
      v34 = v104;
      if (v30[(unsigned __int16)v32] == 32)
        v36 = v104;
      else
        v36 = v104 + 1;
      v102 = v36;
      if (v30[(unsigned __int16)v32] == 32)
        ++v32;
      else
        v32 = v118[0];
    }
    if (v118[0])
      v37 = v118[0] - 1;
    else
      v37 = 0;
    if (v118[0] >= 2u)
    {
      v38 = *(char **)(*((_QWORD *)*a1 + 1) + 192);
      v39 = v37;
      while (strchr(v38, v30[v39]))
      {
        if (!(_WORD)--v39)
        {
          v37 = 0;
          goto LABEL_32;
        }
      }
      v37 = v39;
    }
LABEL_32:
    v15 = v97;
    v92 = v28;
    if (v118[0])
    {
      v40 = v34;
      if (v30[v37] != 32)
      {
        ++v102;
        v37 = v118[0] + 1;
        v111 = v118[0] + 1;
        v95 = 0;
        v96 = 1;
LABEL_38:
        v41 = strlen(v30);
        v42 = (const char *)heap_Realloc(*(uint64_t **)(v97 + 8), (uint64_t)v30, v41 + (unsigned __int16)v102 + 2);
        if (!v42)
        {
          log_OutPublic(*(_QWORD *)(v97 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v43, v44, v45, v46, v89);
LABEL_139:
          v18 = v98;
          goto LABEL_156;
        }
        v90 = v37;
        v47 = v102;
        *a4 = v42;
        LODWORD(v48) = strlen(v42) + 1;
        v49 = v40;
        if ((int)v48 >= v29)
        {
          v48 = (int)v48;
          do
          {
            (*a4)[(unsigned __int16)v102 + v48] = (*a4)[v48];
            v29 = v118[0];
          }
          while (v48-- > v118[0]);
        }
        if (v96)
          (*a4)[v29] = 32;
        v18 = v98;
        if (v92)
        {
          v51 = v40;
          v52 = v98;
          v53 = v96;
          do
          {
            v54 = *v52++;
            (*a4)[v53 + v118[0]] = v54;
            ++v53;
            --v51;
          }
          while (v51);
        }
        if (v94)
          (*a4)[v118[0] - 1 + (unint64_t)(unsigned __int16)v102] = 32;
        *a11 += v102;
        v55 = *a5;
        v56 = *a5 + 32 * a7;
        v59 = *(_DWORD *)(v56 + 12);
        v57 = (_DWORD *)(v56 + 12);
        v58 = v59;
        v57[1] = v92;
        if ((v95 & 1) == 0 && v58 == v118[0] + a3)
          *v57 = v58 + 1;
        v60 = *v93;
        v61 = v106;
        if (v60 > (unsigned __int16)(a7 + 1))
        {
          v62 = (unsigned __int16)(a7 + 1);
          v63 = (_DWORD *)(v55 + 32 * v62 + 12);
          v64 = v62 + 1;
          do
          {
            *v63 += (unsigned __int16)v102;
            v63 += 8;
          }
          while (v60 != (unsigned __int16)v64++);
        }
        v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v106 + 104))(a9, a10, 1, 0, (char *)&v117 + 2);
        if ((v66 & 0x80000000) == 0)
        {
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(v106 + 152))(a9, a10, 3, HIWORD(v117), &v109) & 0x80000000) == 0&& v109)
          {
            v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v106 + 104))(a9, a10, 3, HIWORD(v117), &v117);
            if ((v66 & 0x80000000) != 0)
              goto LABEL_155;
            while ((_WORD)v117)
            {
              v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 168))(a9, a10);
              if ((v66 & 0x80000000) != 0)
                goto LABEL_155;
              v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v106 + 168))(a9, a10, (unsigned __int16)v117, 2, 1, &v113, &v115);
              if ((v66 & 0x80000000) != 0)
                goto LABEL_155;
              v67 = v118[0];
              v49 = v104;
              if ((unsigned __int16)v114 >= v118[0])
              {
                LOWORD(v114) = v114 + v102;
                v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v106 + 160))(a9, a10, (unsigned __int16)v117, 1, 1, &v114, (char *)&v114 + 2);
                if ((v66 & 0x80000000) != 0)
                  goto LABEL_155;
                v67 = v118[0];
              }
              if (v113 > v67)
              {
                v113 += v102;
                v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v106 + 160))(a9, a10, (unsigned __int16)v117, 2, 1, &v113, (char *)&v114 + 2);
                if ((v66 & 0x80000000) != 0)
                  goto LABEL_155;
              }
              v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v106 + 120))(a9, a10, (unsigned __int16)v117, &v117);
              if ((v16 & 0x80000000) != 0)
                goto LABEL_156;
            }
          }
          v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v106 + 104))(a9, a10, 1, 0, (char *)&v117 + 2);
          if ((v66 & 0x80000000) == 0)
          {
            v68 = v102 + v32;
            v69 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(v106 + 152))(a9, a10, 3, HIWORD(v117), &v109) & 0x80000000) != 0)
            {
              v70 = 0;
              v107 = 0;
              v71 = 0;
            }
            else
            {
              v70 = 0;
              v107 = 0;
              v71 = 0;
              if (v109)
              {
                v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v61 + 104))(a9, a10, 3, HIWORD(v117), &v117);
                if ((v72 & 0x80000000) != 0)
                  goto LABEL_137;
                v73 = v117;
                if ((_WORD)v117)
                {
                  v74 = v61;
                  v69 = 0;
                  v75 = 0;
                  v101 = 0;
                  v107 = 0;
                  v103 = 0;
                  while (1)
                  {
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v74 + 168))(a9, a10, v73, 1, 1, &v114, &v115);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v74 + 168))(a9, a10, (unsigned __int16)v117, 2, 1, &v113, &v115);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(v74 + 168))(a9, a10, (unsigned __int16)v117, 0, 1, &v112, &v115);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v76 = v112;
                    if (v112 == 3)
                    {
                      if ((unsigned __int16)v114 >= v118[0] || v113 <= v118[0])
                      {
LABEL_93:
                        v77 = (unsigned __int16)v114;
                        goto LABEL_94;
                      }
                      v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v74 + 160))(a9, a10, (unsigned __int16)v117, 2, 1, v118, (char *)&v114 + 2);
                      if ((v72 & 0x80000000) != 0)
                        goto LABEL_137;
                      v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v74 + 80))(a9, a10, (unsigned __int16)v117, &v117);
                      if ((v72 & 0x80000000) != 0)
                        goto LABEL_137;
                      v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v74 + 160))(a9, a10, (unsigned __int16)v117, 0, 1, &v112, (char *)&v114 + 2);
                      if ((v72 & 0x80000000) != 0)
                        goto LABEL_137;
                      LOWORD(v114) = v118[0] + v47;
                      v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v74 + 160))(a9, a10, (unsigned __int16)v117, 1, 1, &v114, (char *)&v114 + 2);
                      if ((v72 & 0x80000000) != 0)
                        goto LABEL_137;
                      v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v74 + 160))(a9, a10, (unsigned __int16)v117, 2, 1, &v113, (char *)&v114 + 2);
                      if ((v72 & 0x80000000) != 0)
                        goto LABEL_137;
                      LOWORD(v114) = v118[0];
                      v76 = v112;
                    }
                    if (v76 != 5)
                      goto LABEL_93;
                    v103 = v117;
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 176))(a9, a10);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v77 = (unsigned __int16)v114;
                    v101 = v113;
                    v107 = v114;
LABEL_94:
                    v78 = (unsigned __int16)v117;
                    if (!HIWORD(v116) && v77 >= v118[0])
                      HIWORD(v116) = v117;
                    if (!v75)
                    {
                      if (v77 >= v90)
                      {
                        LOWORD(v116) = v117;
                        v69 = v117;
                        v75 = v117;
                      }
                      else
                      {
                        v75 = 0;
                      }
                    }
                    if (!HIWORD(v115) && v77 >= (unsigned __int16)v68)
                    {
                      HIWORD(v115) = v117;
                      if ((_WORD)v117)
                      {
                        v61 = v74;
                        v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v74 + 88))(a9, a10, HIWORD(v116), (char *)&v116 + 2);
                        goto LABEL_136;
                      }
                      goto LABEL_140;
                    }
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v74 + 120))(a9, a10, (unsigned __int16)v117, &v117);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v73 = v117;
                    if (!(_WORD)v117)
                    {
                      if ((_DWORD)v78)
                      {
                        v79 = v78;
                        v61 = v74;
                        v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v74 + 80))(a9, a10, v79, (char *)&v116 + 2);
LABEL_136:
                        v49 = v104;
                        v70 = v101;
                        if ((v72 & 0x80000000) == 0)
                          goto LABEL_110;
                        goto LABEL_137;
                      }
LABEL_140:
                      v61 = v74;
                      v49 = v104;
                      v70 = v101;
                      v71 = v103;
                      goto LABEL_109;
                    }
                  }
                }
                v69 = 0;
                v70 = 0;
                v107 = 0;
                v71 = 0;
              }
            }
LABEL_109:
            v103 = v71;
            v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v61 + 72))(a9, a10, 3, HIWORD(v117), (char *)&v116 + 2);
            if ((v72 & 0x80000000) != 0)
              goto LABEL_137;
LABEL_110:
            if (HIWORD(v115))
            {
              v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 120))(a9, a10);
              if ((v72 & 0x80000000) != 0)
                goto LABEL_137;
              if (!(_WORD)v117)
                goto LABEL_171;
              v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 168))(a9, a10);
              if ((v72 & 0x80000000) != 0)
                goto LABEL_137;
              if (v112 == 5)
              {
                HIWORD(v115) = 0;
              }
              else
              {
LABEL_171:
                if (HIWORD(v115))
                {
                  v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 80))(a9, a10);
                  if ((v72 & 0x80000000) != 0)
                    goto LABEL_137;
                }
              }
            }
            if ((v95 & 1) == 0)
            {
              LOWORD(v114) = v118[0];
              v113 = v118[0] + 1;
              v112 = 3;
              v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 0, 1, &v112, (char *)&v114 + 2);
              if ((v72 & 0x80000000) != 0)
                goto LABEL_137;
              v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 1, 1, &v114, (char *)&v114 + 2);
              if ((v72 & 0x80000000) != 0)
                goto LABEL_137;
              v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 2, 1, &v113, (char *)&v114 + 2);
              if ((v72 & 0x80000000) != 0)
                goto LABEL_137;
              v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v61 + 80))(a9, a10, HIWORD(v116), (char *)&v116 + 2);
              if ((v72 & 0x80000000) != 0)
                goto LABEL_137;
            }
            LOWORD(v114) = v118[0] + v96;
            v113 = v47 + v91 + v118[0];
            v112 = 6;
            v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 0, 1, &v112, (char *)&v114 + 2);
            if ((v72 & 0x80000000) != 0
              || (v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 1, 1, &v114, (char *)&v114 + 2), (v72 & 0x80000000) != 0)|| (v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 2, 1, &v113, (char *)&v114 + 2), (v72 & 0x80000000) != 0)|| (v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(v61 + 160))(a9,
                          a10,
                          HIWORD(v116),
                          4,
                          5,
                          "_PR_",
                          (char *)&v114 + 2),
                  (v72 & 0x80000000) != 0)
              || (v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(v61 + 160))(a9, a10, HIWORD(v116), 3, (unsigned __int16)(v49 + 1), v98, (char *)&v114 + 2), (v72 & 0x80000000) != 0))
            {
LABEL_137:
              v16 = v72;
LABEL_138:
              v15 = v97;
              goto LABEL_139;
            }
            v80 = v70;
            v81 = v61;
            LOWORD(v114) = v90;
            v113 = v68;
            do
            {
              v82 = v68;
              v83 = (*a4)[(unsigned __int16)v68++];
            }
            while (v83 == 32);
            v112 = 5;
            v84 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v81 + 80);
            if (v96 + v118[0] == v90)
            {
              v66 = v84(a9, a10, HIWORD(v116), (char *)&v116 + 2);
              v15 = v97;
              v18 = v98;
              if ((v66 & 0x80000000) != 0)
                goto LABEL_155;
              LOWORD(v116) = HIWORD(v116);
            }
            else
            {
              v85 = v84(a9, a10, v69, (char *)&v116);
              v18 = v98;
              if ((v85 & 0x80000000) != 0)
              {
                v16 = v85;
                v15 = v97;
                goto LABEL_156;
              }
              v15 = v97;
            }
            v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 160))(a9, a10);
            if ((v66 & 0x80000000) == 0)
            {
              v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v81 + 160))(a9, a10, (unsigned __int16)v116, 1, 1, &v114, (char *)&v114 + 2);
              if ((v66 & 0x80000000) == 0)
              {
                v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v81 + 160))(a9, a10, (unsigned __int16)v116, 2, 1, &v113, (char *)&v114 + 2);
                if ((v66 & 0x80000000) == 0)
                {
                  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(v81 + 160))(a9, a10, (unsigned __int16)v116, 4, 7, "prompt", (char *)&v114 + 2);
                  if ((v16 & 0x80000000) != 0)
                    goto LABEL_156;
                  if (v94)
                  {
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v81 + 80))(a9, a10, HIWORD(v116), (char *)&v116 + 2);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    LOWORD(v114) = v118[0] + v47 - 1;
                    v113 = v118[0] + v47;
                    v112 = 3;
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v81 + 160))(a9, a10, HIWORD(v116), 0, 1, &v112, (char *)&v114 + 2);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v81 + 160))(a9, a10, HIWORD(v116), 1, 1, &v114, (char *)&v114 + 2);
                    if ((v72 & 0x80000000) != 0)
                      goto LABEL_137;
                    v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v81 + 160))(a9, a10, HIWORD(v116), 2, 1, &v113, (char *)&v114 + 2);
                    v15 = v97;
                    v18 = v98;
                    if ((v16 & 0x80000000) != 0)
                      goto LABEL_156;
                  }
                  if (__s)
                  {
                    v86 = v107 >= v90
                        ? (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v81 + 192))(a9, a10, v103)
                        : (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v81 + 160))(a9, a10, v103, 2, 1, &v111, (char *)&v114 + 2);
                    v16 = v86;
                    v15 = v97;
                    v18 = v98;
                    if ((v86 & 0x80000000) != 0)
                      goto LABEL_156;
                  }
                  if (HIWORD(v115))
                  {
                    v15 = v97;
                    v18 = v98;
                    if (__s)
                    {
                      LOWORD(v114) = v82;
                      v113 = v80;
                      v112 = 5;
                      v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 160))(a9, a10);
                      if ((v72 & 0x80000000) == 0)
                      {
                        v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v81 + 160))(a9, a10, HIWORD(v115), 1, 1, &v114, (char *)&v114 + 2);
                        if ((v72 & 0x80000000) == 0)
                        {
                          v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v81 + 160))(a9, a10, HIWORD(v115), 2, 1, &v113, (char *)&v114 + 2);
                          if ((v72 & 0x80000000) == 0)
                          {
                            v88 = strlen(__s);
                            v72 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(v81 + 160))(a9, a10, HIWORD(v115), 4, (unsigned __int16)(v88 + 1), __s, (char *)&v114 + 2);
                          }
                        }
                      }
                      goto LABEL_137;
                    }
                    goto LABEL_156;
                  }
                  goto LABEL_138;
                }
              }
            }
          }
        }
LABEL_155:
        v16 = v66;
        goto LABEL_156;
      }
      v96 = 0;
      ++v37;
    }
    else
    {
      v40 = v34;
      v96 = 0;
    }
    v111 = v37;
    v95 = 1;
    goto LABEL_38;
  }
  v16 = 2296389639;
LABEL_156:
  if (v108 && v18)
    heap_Free(*(_QWORD **)(v15 + 8), (uint64_t)v18);
  return v16;
}

uint64_t activeprompt_ConsultOriOrth(_QWORD *a1, const char **a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5, _WORD *a6)
{
  uint64_t v6;
  const char *v7;
  uint64_t *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned __int16 v30;
  int v31;
  unsigned __int16 v32;
  unsigned int v33;
  int v34;
  unsigned __int16 *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  _BOOL4 v43;
  BOOL v44;
  uint64_t v45;
  unsigned __int16 v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  unsigned __int16 v51;
  int v52;
  char *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _DWORD *v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned __int16 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  const char *v83;
  _BOOL4 v84;
  uint64_t v85;
  size_t v86;
  int v87;
  int v88;
  size_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  int v97;
  size_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  unsigned __int8 v104;
  const char *v105;
  _DWORD *v106;
  int v107;
  char v108;
  size_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  int v120;
  BOOL v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  int v131;
  BOOL v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  BOOL v144;
  unsigned int v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int16 *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int16 v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int16 *v179;
  unsigned int v180;
  _OWORD *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  const void *v187;
  uint64_t v188;
  size_t v189;
  unsigned int v190;
  int v191;
  int *v192;
  uint64_t v193;
  int v194;
  uint64_t i;
  _DWORD *v196;
  unsigned int v197;
  _WORD *v198;
  unsigned __int16 v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int __s;
  char *__sa;
  unsigned int v204;
  char v205;
  unsigned int v206;
  __int16 v207;
  char v208;
  unsigned __int16 v209;
  unsigned __int16 v210;
  int v211;
  const char **v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t *v215;
  unsigned __int16 v217;
  _DWORD *v218;
  uint64_t v219;
  uint64_t v220;
  __int16 v221;
  int v222;
  char v223[64];
  char __dst[128];
  _QWORD v225[4];
  _QWORD v226[6];

  v226[4] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)*a1 + 16);
  v222 = 0;
  v221 = 0;
  v220 = 0;
  v7 = (const char *)a1[5];
  if (!v7)
    return 0;
  v11 = (uint64_t *)a2;
  v12 = a1;
  v199 = strlen(*a2);
  v13 = *(_DWORD *)(*a3 + 12);
  v14 = (*(_DWORD *)(a5 + 4) - v13);
  v217 = strlen(v7);
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v6 + 32)))
  {
    v20 = a5;
    do
    {
      v21 = v20;
      v20 = *(_QWORD *)(v20 + 16);
    }
    while (v20);
    v22 = (unsigned __int16)v14;
    if (a4)
    {
      v206 = v14;
      if (*a4)
        v23 = (*(_DWORD *)(v21 + 8) + *(_DWORD *)(v21 + 4) - *(_DWORD *)(*a3 + 12));
      else
        v23 = 0;
      log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 217, (uint64_t)"%s%s %s%s %s%d %s%d", v15, v16, v17, v18, v19, "BEG");
      log_OutTraceTuningDataBinary(*(_QWORD *)(v6 + 32), 218, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
        *v11,
        v23);
      log_OutTraceTuningDataBinary(*(_QWORD *)(v6 + 32), 218, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        *a3,
        32 * *a4);
      v14 = v206;
    }
    else
    {
      log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 217, (uint64_t)"%s%s %s%s %s%d %s%d", v15, v16, v17, v18, v19, "BEG");
      log_OutTraceTuningDataBinary(*(_QWORD *)(v6 + 32), 218, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
        *v11,
        0);
    }
  }
  else
  {
    v22 = (unsigned __int16)v14;
  }
  if ((__int16)(*(_DWORD *)(a5 + 8) + v14) < (__int16)(v14 + v217))
  {
LABEL_14:
    v24 = 0;
    goto LABEL_15;
  }
  v198 = a6;
  v210 = 0;
  LOWORD(__s) = 0;
  LOWORD(v204) = 0;
  v208 = 0;
  LOBYTE(v211) = 0;
  v27 = v14;
  v28 = (const char *)*v11;
  v200 = v6;
  v201 = v22;
  v214 = v22;
  v215 = a3;
  v207 = v27;
  v29 = v27;
  v218 = v12;
  v212 = (const char **)v11;
  v213 = a5;
  while (1)
  {
    if (!v28[(unsigned __int16)v29])
      goto LABEL_14;
    if (v199 <= (unsigned __int16)v29)
    {
      v45 = v6;
      v46 = 0;
      v34 = v29;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = (unsigned __int16)v29;
      v34 = v29;
      v35 = a4;
      do
      {
        if ((_WORD)v31
          && v33 + 1 < v199
          && v28[(unsigned __int16)v34] == 32
          && (v36 = strncmp(&v28[v33 + 1], "§", 2uLL), v35 = a4, !v36))
        {
          v34 += 2;
          --v31;
          v43 = 1;
        }
        else
        {
          if (v35)
          {
            v37 = *v35;
            v38 = v30 <= v37 ? *v35 : v30;
            if (v30 >= v37)
            {
LABEL_39:
              v30 = v38;
LABEL_41:
              LOWORD(v40) = *v35;
            }
            else
            {
              v39 = v33 + v13;
              v40 = v30;
              v41 = (_DWORD *)(*v215 + 32 * v30);
              while (1)
              {
                v42 = v41[3];
                if (v42 > v39)
                {
                  v30 = v40;
                  goto LABEL_41;
                }
                if (v42 >= v39 && *v41 == 34)
                  break;
                v41 += 8;
                if (v38 == ++v40)
                  goto LABEL_39;
              }
              v30 = v40;
            }
            if (v37 > (unsigned __int16)v40)
            {
              if (!hlp_GetRangeForSETPHON(v28, (_DWORD *)*v215, v37, (unsigned __int16)v40, &v222, &v221, (_WORD *)&v222 + 1, (unsigned int *)&v220 + 1, (unsigned int *)&v220))goto LABEL_69;
              if (v221)
                v31 = HIWORD(v222);
              v35 = a4;
            }
          }
          if (v32 >= v217)
            goto LABEL_58;
          v43 = *(unsigned __int8 *)(*((_QWORD *)v218 + 5) + v32++) == v28[(unsigned __int16)v34];
        }
        v33 = (unsigned __int16)++v34;
        v44 = v43 && v199 > (unsigned __int16)v34;
      }
      while (v44);
      if (!v43)
      {
LABEL_69:
        v50 = 0;
        v209 = v34 - v29;
        goto LABEL_98;
      }
LABEL_58:
      v45 = v6;
      v46 = v34 - v29;
      v47 = v220 >= v33 || (unsigned __int16)v31 == 0;
      v12 = v218;
      if (v47)
      {
        a3 = v215;
        goto LABEL_74;
      }
      v48 = (unsigned __int16)v34;
      if (v199 <= (unsigned __int16)v34)
      {
        a3 = v215;
      }
      else
      {
        v49 = v34;
        a3 = v215;
        if (strncmp(&v28[(unsigned __int16)v34], "§", 2uLL))
        {
          while (1)
          {
            v48 = (unsigned __int16)++v49;
            if (v199 <= (unsigned __int16)v49)
              break;
            v34 = v49;
            if (!strncmp(&v28[(unsigned __int16)v49], "§", 2uLL))
              goto LABEL_72;
          }
          v34 = v49;
        }
      }
LABEL_72:
      if (v199 == v48 || (v34 = 3 * v31 + v34 - 1, v12 = v218, (unsigned __int16)v34 > v199))
      {
        v24 = 0;
        v11 = (uint64_t *)v212;
        a5 = v213;
        v6 = v45;
        goto LABEL_15;
      }
    }
LABEL_74:
    v209 = v34 - v29;
    v210 = v46;
    v51 = v46 + v29;
    v44 = v199 > (unsigned __int16)(v46 + v29);
    v6 = v45;
    if (v44)
    {
      while (1)
      {
        v52 = v28[v51];
        if (memchr(" \t\r\n", v52, 5uLL))
          break;
        v53 = strchr(*(char **)(*(_QWORD *)(*(_QWORD *)v12 + 8) + 192), v52);
        ++v51;
        if (v53)
          v54 = v199 > v51;
        else
          v54 = 0;
        if (!v54)
        {
          if (v53)
            break;
          v50 = 0;
          goto LABEL_99;
        }
      }
    }
    if (a4)
    {
      v55 = *a4;
      if (*a4)
      {
        v56 = 0;
        v57 = v214 + v209;
        v58 = (_DWORD *)*v215;
        v59 = (int *)*v215;
        while (1)
        {
          v60 = *v59;
          v59 += 8;
          if (v60 == 34
            && (!hlp_GetRangeForSETPHON(v28, v58, v55, (unsigned __int16)v56, &v222, &v221, (_WORD *)&v222 + 1, (unsigned int *)&v220 + 1, (unsigned int *)&v220)|| v221&& (HIDWORD(v220) < v214 && v220 >= v214 || HIDWORD(v220) < v57 && v57 <= v220)))
          {
            break;
          }
          if (v55 == ++v56)
          {
            v50 = 1;
            goto LABEL_97;
          }
        }
        v50 = 0;
LABEL_97:
        v6 = v200;
LABEL_98:
        a3 = v215;
        v12 = v218;
      }
      else
      {
        v50 = 1;
        a3 = v215;
      }
    }
    else
    {
      v50 = 1;
    }
LABEL_99:
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v6 + 32)))
      break;
    if (v50)
      goto LABEL_105;
LABEL_234:
    v11 = (uint64_t *)v212;
    v28 = *v212;
    v153 = (*v212)[(unsigned __int16)v29];
    if ((*v212)[(unsigned __int16)v29])
    {
      a5 = v213;
      while (!memchr(" \t\r\n", v153, 5uLL))
      {
        v29 = (v29 + 1);
        v153 = v28[(unsigned __int16)v29];
        if (!v28[(unsigned __int16)v29])
          goto LABEL_245;
      }
      v154 = v29;
      while (memchr(" \t\r\n", v153, 5uLL))
      {
        v154 = (v154 + 1);
        v153 = v28[(unsigned __int16)v154];
        v29 = v154;
        if (!v28[(unsigned __int16)v154])
          goto LABEL_245;
      }
      v29 = v154;
    }
    else
    {
      a5 = v213;
    }
LABEL_245:
    v214 = (unsigned __int16)v29;
    v12 = v218;
    if ((__int16)(*(_DWORD *)(a5 + 8) + v207) < (__int16)(v29 + v217))
      goto LABEL_14;
  }
  log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 220, (uint64_t)"%s%d %s%d %s%s", v61, v62, v63, v64, v65, "IDXBEG");
  if (!v50)
    goto LABEL_234;
  v71 = v12[7];
  v72 = a4;
  if (v71)
    goto LABEL_106;
  if (v12[8])
  {
LABEL_115:
    v71 = 0;
    v205 = 1;
    if (v72)
      goto LABEL_107;
LABEL_116:
    v84 = 0;
    v83 = *v212;
    goto LABEL_131;
  }
  log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 221, (uint64_t)"%s%s %s%s", v66, v67, v68, v69, v70, "RES");
  log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 222, (uint64_t)"%s%s %s%s", v73, v74, v75, v76, v77, "RES");
LABEL_105:
  v71 = v12[7];
  v72 = a4;
  if (!v71)
  {
    if (!v12[8])
      goto LABEL_214;
    goto LABEL_115;
  }
LABEL_106:
  v205 = 0;
  if (!v72)
    goto LABEL_116;
LABEL_107:
  v78 = *v72;
  if (*v72)
  {
    v79 = 0;
    v80 = *a3;
    v81 = (int *)*a3;
    while (1)
    {
      v82 = *v81;
      v81 += 8;
      if (v82 == 40 && *(_DWORD *)(v80 + 12) >= v13 + (unsigned __int16)v34)
        break;
      ++v79;
      v80 = (uint64_t)v81;
      if (v78 == v79)
      {
        v83 = *v212;
        goto LABEL_120;
      }
    }
    LODWORD(v79) = (unsigned __int16)v79;
  }
  else
  {
    LODWORD(v79) = 0;
  }
  v83 = *v212;
  if ((_DWORD)v79 == (_DWORD)v78)
  {
LABEL_120:
    v85 = (unsigned __int16)v34;
    v86 = strlen(v83);
    if (v86 > (unsigned __int16)v34)
    {
      v87 = v34;
      do
      {
        v88 = v83[v85];
        if (!memchr(" \t\r\n", v88, 5uLL))
        {
          v89 = strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)v218 + 8) + 192));
          if (!v89)
            break;
          v90 = 0;
          v91 = 0;
          while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v218 + 8) + 192) + v90) != v88)
          {
            v90 = (unsigned __int16)++v91;
            if (v89 <= (unsigned __int16)v91)
              goto LABEL_129;
          }
        }
        v85 = (unsigned __int16)++v87;
      }
      while (v86 > (unsigned __int16)v87);
    }
LABEL_129:
    v84 = v86 == v85;
    v6 = v200;
  }
  else
  {
    v84 = 0;
  }
LABEL_131:
  v92 = *(_QWORD *)(*(_QWORD *)v218 + 8);
  v93 = *(const char **)(v92 + 192);
  __sa = *(char **)(v92 + 184);
  v94 = (unsigned __int16)v29;
  do
  {
    if (!v94)
      goto LABEL_139;
    v95 = v94 - 1;
    v96 = memchr(" \t\r\n", v83[v94 - 1], 5uLL);
    v94 = v95;
  }
  while (v96);
  if ((v95 & 0x8000) != 0 || (v97 = v83[v95], (v98 = strlen(v93)) == 0))
  {
LABEL_139:
    v211 = 0;
    goto LABEL_140;
  }
  v99 = 0;
  v100 = 0;
  while (v93[v99] != v97)
  {
    v99 = (unsigned __int16)++v100;
    if (v98 <= (unsigned __int16)v100)
      goto LABEL_139;
  }
  v211 = v97;
LABEL_140:
  v101 = v210 + (unint64_t)(unsigned __int16)v29;
  if ((_DWORD)v101 << 16 >= (signed int)(strlen(v83) << 16))
  {
    v108 = 0;
    v106 = v218;
  }
  else
  {
    v102 = v6;
    v103 = v84;
    v104 = v83[v101];
    if (v104)
    {
      v105 = &v83[v101 + 1];
      v106 = v218;
      do
      {
        if (!memchr(" \t\r\n", v104, 5uLL))
          break;
        v107 = *(unsigned __int8 *)v105++;
        v104 = v107;
      }
      while (v107);
    }
    else
    {
      v106 = v218;
    }
    v108 = v104;
    v109 = strlen(v93);
    if (v109)
    {
      v110 = 0;
      v111 = 0;
      v84 = v103;
      v6 = v102;
      while (v93[v110] != v108)
      {
        v110 = (unsigned __int16)++v111;
        if (v109 <= (unsigned __int16)v111)
        {
          v108 = 0;
          break;
        }
      }
    }
    else
    {
      v108 = 0;
      v84 = v103;
      v6 = v102;
    }
  }
  v208 = v108;
  a3 = v215;
  if ((_WORD)v29)
  {
    if (v211)
    {
      if (strchr(__sa, (char)v211))
      {
        LODWORD(v226[0]) = 2;
        v112 = 3;
        v113 = 1;
      }
      else
      {
        v113 = 0;
        v112 = 4;
      }
      *(_DWORD *)((unint64_t)v226 | (4 * v113)) = v112;
      *((_DWORD *)v226 + v113 + 1) = 6;
      v114 = v113 | 2;
LABEL_163:
      *((_DWORD *)v226 + v114++) = 5;
    }
    else
    {
      v226[0] = 0x600000004;
      v114 = 2;
    }
  }
  else
  {
    v226[0] = 0x300000001;
    v114 = 2;
    if (v211)
      goto LABEL_163;
  }
  *((_DWORD *)v226 + v114) = 0;
  if (!v84)
  {
    if (!v208)
    {
      v225[0] = 0x600000004;
      v115 = 2;
      goto LABEL_174;
    }
    if (strchr(__sa, v208))
    {
      LODWORD(v225[0]) = 2;
      v116 = 3;
      v117 = 1;
    }
    else
    {
      v117 = 0;
      v116 = 4;
    }
    *(_DWORD *)((unint64_t)v225 | (4 * v117)) = v116;
    *((_DWORD *)v225 + v117 + 1) = 6;
    v115 = v117 | 2;
    goto LABEL_173;
  }
  v225[0] = 0x300000001;
  v115 = 2;
  if (v208)
LABEL_173:
    *((_DWORD *)v225 + v115++) = 5;
LABEL_174:
  *((_DWORD *)v225 + v115) = 0;
  if ((v205 & 1) != 0)
  {
    v118 = 1;
  }
  else
  {
    v119 = 0;
    while (1)
    {
      v120 = *((_DWORD *)v226 + v119);
      if (v120 == v71 && v71 == 5)
        break;
      v122 = v120 == v71 || v119++ >= v114;
      if (v122)
      {
        v123 = v120 == v71;
        goto LABEL_188;
      }
    }
    v123 = *((unsigned __int8 *)v106 + 24) == (char)v211;
LABEL_188:
    v118 = v123;
  }
  v204 = v114 + 1;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v6 + 32)))
  {
    __dst[0] = 0;
    hlp_ContextToString(v118, v106[7], *((_BYTE *)v106 + 24), v204, (uint64_t)v226, v211, __dst);
    log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 221, (uint64_t)"%s%s %s%s", v124, v125, v126, v127, v128, "RES");
  }
  __s = v115 + 1;
  if (!v118)
    goto LABEL_234;
  v129 = v106[8];
  if (v129)
  {
    v130 = 0;
    while (1)
    {
      v131 = *((_DWORD *)v225 + v130);
      if (v131 == v129 && v129 == 5)
        break;
      if (v131 == v129 || v130++ >= v115)
      {
        v134 = v131 == v129;
        goto LABEL_208;
      }
    }
    v134 = *((unsigned __int8 *)v106 + 25) == v208;
LABEL_208:
    v135 = v134;
  }
  else
  {
    v135 = 1;
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v6 + 32)))
  {
    __dst[0] = 0;
    hlp_ContextToString(v135, v218[8], *((_BYTE *)v218 + 25), __s, (uint64_t)v225, v208, __dst);
    log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 222, (uint64_t)"%s%s %s%s", v136, v137, v138, v139, v140, "RES");
  }
  v72 = a4;
  if (!v135)
    goto LABEL_234;
LABEL_214:
  if (v218[2] == 2 && v72)
  {
    if (*v72)
    {
      v141 = 0;
      v142 = 1;
      while (1)
      {
        v143 = *(_DWORD *)(*a3 + v141);
        v144 = (v143 - 16) < 4 || v143 == 24;
        if (v144 && v218[2] == 2)
        {
          v145 = *(_DWORD *)(*a3 + v141 + 12);
          if (v145 > v13 + (unsigned __int16)v29 && v145 < v13 + (unsigned __int16)v34)
            break;
        }
        v152 = 1;
        v141 += 32;
        v122 = v142++ >= *v72;
        if (v122)
          goto LABEL_233;
      }
      log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s] at %u-%u deactivated because of ESC pitch, volume or rate", v63, v64, v65, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v218 + 8) + 168));
      log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 223, (uint64_t)"%s%s %s%s", v147, v148, v149, v150, v151, "RES");
      v152 = 0;
    }
    else
    {
      v152 = 1;
    }
LABEL_233:
    if (!v152)
      goto LABEL_234;
  }
  if (log_GetLogLevel(*(_QWORD *)(v6 + 32)) >= 5)
  {
    __dst[0] = 0;
    v223[0] = 0;
    hlp_ContextToString(1, v218[7], *((_BYTE *)v218 + 24), (unsigned __int16)v204, (uint64_t)v226, v211, __dst);
    hlp_ContextToString(1, v218[8], *((_BYTE *)v218 + 25), (unsigned __int16)__s, (uint64_t)v225, v208, v223);
    log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s], begPos %ld, endPos %ld, begCtxt %s, endCtxt %s", v166, v167, v168, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v218 + 8) + 168));
  }
  v11 = (uint64_t *)v212;
  v169 = (unsigned __int16)a4;
  hlp_RemoveSetPhonInRange((uint64_t)v212, (_DWORD **)a3, a4, (unsigned __int16)v29, (unsigned __int16)(v34 - v29));
  v170 = v214;
  if (a4)
  {
    v171 = *a4;
    v172 = v214 - v201;
    v173 = *a3;
    a5 = v213;
    if (*a4)
    {
      v169 = 0;
      while (*(_DWORD *)(v173 + 32 * v169 + 12) <= v172 + *(_DWORD *)(v213 + 4))
      {
        if (v171 <= ++v169)
          goto LABEL_265;
      }
    }
    else
    {
LABEL_265:
      v169 = *a4;
    }
    v174 = heap_Realloc(*(uint64_t **)(v6 + 8), v173, 32 * v171 + 32);
    if (v174)
    {
      *a3 = v174;
      v179 = a4;
      v180 = *a4;
      if (v169 < v180)
      {
        memmove((void *)(v174 + 32 * (v169 + 1)), (const void *)(v174 + 32 * v169), 32 * (int)(v180 - v169));
        v179 = a4;
        LOWORD(v180) = *a4;
        v174 = *a3;
      }
      *v179 = v180 + 1;
      v181 = (_OWORD *)(v174 + 32 * v169);
      *v181 = 0u;
      v181[1] = 0u;
      v182 = *a3;
      *(_DWORD *)(*a3 + 32 * v169) = 40;
      if (v169)
        *(_DWORD *)(v182 + 32 * v169 + 4) = *(_DWORD *)(v182 + 32 * (v169 - 1) + 4);
      v183 = v182 + 32 * v169;
      *(_DWORD *)(v183 + 12) = v172 + *(_DWORD *)(v213 + 4);
      *(_DWORD *)(v183 + 16) = v209;
      v184 = strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)v218 + 8) + 168));
      v185 = strlen(*((const char **)v218 + 2));
      *(_QWORD *)(*a3 + 32 * v169 + 24) = heap_Alloc(*(_QWORD *)(v6 + 8), (v184 + v185 + 3));
      v186 = *a3 + 32 * v169;
      v188 = *(_QWORD *)(v186 + 24);
      v187 = (const void *)(v186 + 24);
      if (v188)
      {
        if (vector_Add(*(_QWORD *)(**(_QWORD **)v218 + 88), v187))
        {
          strcpy(*(char **)(*a3 + 32 * v169 + 24), *(const char **)(*(_QWORD *)(*(_QWORD *)v218 + 8) + 168));
          strcat(*(char **)(*a3 + 32 * v169 + 24), "::");
          strcat(*(char **)(*a3 + 32 * v169 + 24), *((const char **)v218 + 2));
          v170 = v214;
          goto LABEL_275;
        }
        v24 = 2296389642;
        heap_Free(*(_QWORD **)(v6 + 8), *(_QWORD *)(*a3 + 32 * v169 + 24));
        *(_QWORD *)(*a3 + 32 * v169 + 24) = 0;
LABEL_289:
        log_OutPublic(*(_QWORD *)(v6 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v175, v176, v177, v178, v197);
        goto LABEL_15;
      }
    }
LABEL_288:
    v24 = 2296389642;
    goto LABEL_289;
  }
  a5 = v213;
LABEL_275:
  v219 = v170 + v209;
  v189 = strlen(*v212);
  memmove((void *)&(*v212)[(unsigned __int16)v29], &(*v212)[v219], v189 - ((unsigned __int16)v29 + (unint64_t)v209) + 1);
  *v198 -= v209;
  if (a4)
  {
    v190 = *a4;
    if (v190 > (unsigned __int16)(v169 + 1))
    {
      v191 = *(_DWORD *)(*a3 + 32 * v169 + 12);
      v192 = (int *)(*a3 + 32 * (unsigned __int16)(v169 + 1) + 12);
      v193 = (unsigned __int16)(v169 + 1) + 1;
      do
      {
        v194 = *v192 - v209;
        if ((__int16)v209 > (__int16)(*(_WORD *)v192 - v191))
          v194 = v191;
        *v192 = v194;
        v192 += 8;
        v47 = v190 == (unsigned __int16)v193++;
      }
      while (!v47);
    }
  }
  for (i = *(_QWORD *)(a5 + 16); i; i = *(_QWORD *)(i + 16))
    *(_DWORD *)(i + 4) -= v209;
  v196 = CILE_New(*(_QWORD **)(v6 + 8), 1, v214 - v201 + *(_DWORD *)(a5 + 4), v201 - v219 + *(_DWORD *)(a5 + 8));
  if (!v196)
    goto LABEL_288;
  *((_QWORD *)v196 + 2) = *(_QWORD *)(a5 + 16);
  *(_DWORD *)(a5 + 8) = v214 - v201;
  if (v214 == v201)
    *(_DWORD *)a5 = 0;
  v24 = 0;
  *(_QWORD *)(a5 + 16) = v196;
LABEL_15:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v6 + 32)))
  {
    do
    {
      if (!a5)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(v6 + 32), 219, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
          *v11,
          0);
        v160 = a4;
        if (!a4)
          goto LABEL_256;
        goto LABEL_254;
      }
      v25 = a5;
      a5 = *(_QWORD *)(a5 + 16);
    }
    while (a5);
    if (!a4)
    {
      v161 = *(_QWORD *)(v6 + 32);
      v162 = *v11;
      v163 = "text/plain;charset=utf-8";
      v164 = 0;
      goto LABEL_255;
    }
    if (*a4)
      v26 = (*(_DWORD *)(v25 + 8) + *(_DWORD *)(v25 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v26 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(v6 + 32), 219, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
      *v11,
      v26);
    v160 = a4;
LABEL_254:
    v161 = *(_QWORD *)(v6 + 32);
    v162 = *a3;
    v164 = 32 * *v160;
    v163 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_255:
    log_OutTraceTuningDataBinary(v161, 219, (uint64_t)&byte_1DEBD87CE, (uint64_t)v163, v162, v164);
LABEL_256:
    log_OutTraceTuningData(*(uint64_t ***)(v6 + 32), 217, (uint64_t)"%s%s %s%s %s%u", v155, v156, v157, v158, v159, "END");
  }
  return v24;
}

uint64_t hlp_GetRangeForSETPHON(const char *a1, _DWORD *a2, unsigned int a3, unsigned int a4, _WORD *a5, _WORD *a6, _WORD *a7, unsigned int *a8, unsigned int *a9)
{
  __int16 v10;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _WORD *v26;
  unsigned int *v27;
  int v28;
  int v29;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int i;
  int v35;
  const char *v36;
  unint64_t v37;
  unsigned int v38;
  int v40;

  if (a4 >= a3)
    return 0;
  if (*a2 != 0x4000)
    return 0;
  v10 = a4;
  if (a2[8 * a4] != 34)
    return 0;
  v12 = a2[3];
  v13 = &a2[8 * a4];
  v15 = v13[3];
  v14 = v13 + 3;
  v16 = *(const char **)(v14 + 3);
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = v15 - v12;
  *a9 = v15 - v12;
  if (!v16)
    return 1;
  v17 = 1;
  if (*v16)
  {
    v40 = v12;
    *a5 = 1;
    if (strlen(v16) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      LOWORD(v17) = 1;
      v20 = 1;
      v21 = 1;
      do
      {
        v22 = v16[v20];
        if (v22 == 95 || v22 == 35)
        {
          LOWORD(v17) = v17 + 1;
          *a5 = v17;
        }
        v20 = (unsigned __int16)++v21;
      }
      while (strlen(v16) - 1 > (unsigned __int16)v21);
    }
    LOWORD(v23) = v10 + 1;
    if (a3 <= (unsigned __int16)(v10 + 1))
    {
      v32 = 0;
      v27 = a9;
      v26 = a7;
    }
    else
    {
      v23 = (unsigned __int16)(v10 + 1);
      v24 = &a2[8 * v23];
      v25 = v24;
      v27 = a9;
      v26 = a7;
      while (1)
      {
        v29 = *v25;
        v25 += 8;
        v28 = v29;
        if (v29 == 34 || v28 == 21)
        {
          v31 = v24[3];
          if (*v14 != v31)
            break;
        }
        LOWORD(v23) = v23 + 1;
        v24 = v25;
        if (a3 == (unsigned __int16)v23)
          goto LABEL_25;
      }
      v32 = v31 - v40;
    }
    if (a3 == (unsigned __int16)v23)
LABEL_25:
      v32 = strlen(a1);
    v33 = v32 - 1;
    *v27 = v32 - 1;
    for (i = *a8; v33 > *a8; i = *a8)
    {
      if (memchr(" \t\r\n", a1[v33], 5uLL))
      {
        v35 = -1;
      }
      else
      {
        if (v33 < 3 || strncmp(&a1[v33 - 1], "§", 2uLL))
          break;
        v35 = -2;
      }
      v33 += v35;
      *v27 = v33;
    }
    if (v33 > i)
    {
      while (!memchr(" \t\r\n", a1[v33], 5uLL))
      {
        *v27 = --v33;
        i = *a8;
        if (v33 <= *a8)
          goto LABEL_38;
      }
      *v27 = v33 + 1;
      i = *a8;
    }
LABEL_38:
    if (i < v32)
    {
      v36 = &a1[i];
      v37 = v32 - (unint64_t)i;
      do
      {
        if (!strncmp(v36, "§", 2uLL))
          ++*v26;
        ++v36;
        --v37;
      }
      while (v37);
      LOWORD(v17) = *a5;
    }
    v38 = (unsigned __int16)*v26;
    if (v38 > (unsigned __int16)v17)
      return 0;
    *a6 = v17 - v38;
    return 1;
  }
  return v17;
}

size_t hlp_ContextToString(int a1, int a2, char a3, unsigned int a4, uint64_t a5, char a6, char *__dst)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t result;

  if (a2 == 5)
  {
    *__dst = 91;
    __dst[1] = a3;
    *((_WORD *)__dst + 1) = 93;
  }
  else
  {
    strcpy(__dst, (&AP_BOUNDARYCND_STR_0)[a2]);
  }
  if (a1 == 1)
    v12 = " matches (";
  else
    v12 = " does not match (";
  strcat(__dst, v12);
  if (a4)
  {
    v13 = 0;
    v14 = 4 * a4;
    do
    {
      if (v13)
        *(_WORD *)&__dst[strlen(__dst)] = 32;
      v15 = *(unsigned int *)(a5 + v13);
      if ((_DWORD)v15 == 5)
      {
        v16 = strlen(__dst);
        __dst[v16] = 91;
        __dst[v16 + 1] = a6;
        __dst[v16 + 2] = 93;
        __dst[v16 + 3] = 0;
      }
      else
      {
        strcat(__dst, (&AP_BOUNDARYCND_STR_0)[v15]);
      }
      v13 += 4;
    }
    while (v14 != v13);
  }
  result = strlen(__dst);
  *(_WORD *)&__dst[result] = 41;
  return result;
}

uint64_t activeprompt_Consult(uint64_t **a1, uint64_t a2, const char **a3, uint64_t *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 *a9, int a10)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  size_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int v30;
  int v31;
  unsigned __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  _BOOL4 v39;
  BOOL v40;
  BOOL v41;
  unsigned __int16 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  const char *v62;
  size_t v63;
  int v64;
  int v65;
  int v66;
  unsigned __int16 v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  unint64_t v71;
  char *v73;
  char *v74;
  unsigned int v75;
  size_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  size_t v99;
  int v100;
  uint64_t i;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  char v107;
  char v108;
  unsigned int v109;
  const char *v110;
  int v111;
  int v112;
  char v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  const char *v124;
  int v125;
  unsigned int v126;
  unsigned int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t j;
  char *v135;
  int v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  const char *v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unsigned __int16 v153;
  int v154;
  int v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  const char *v160;
  const char *v161;
  char *v162;
  const char *v163;
  int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  uint64_t v191;
  _DWORD *v192;
  const char **v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  _DWORD *v197;
  unint64_t v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  char *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t k;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  size_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v228;
  int *v229;
  unsigned __int16 v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  uint64_t v238;
  unsigned __int16 *v239;
  __int16 v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  __int16 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  _OWORD *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  const void *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  int v272;
  char *v273;
  char v274;
  int v275;
  unsigned __int16 v276;
  unsigned __int16 v277;
  unsigned int v278;
  char *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int16 v283;
  unsigned __int16 v284;
  unsigned __int16 v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v290;
  unsigned int v291;
  const char **v292;
  uint64_t v293;
  uint64_t *v296;
  int v297;
  unsigned __int16 v298;
  uint64_t **v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned __int16 v303;
  unsigned __int16 v304;
  int v305;
  char *__s;
  __int16 v307;
  unsigned int v308;
  unsigned __int16 v309;
  char __dst[64];
  char *__s1[16];
  uint64_t v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;

  v316 = *MEMORY[0x1E0C80C00];
  v14 = **a1;
  v15 = *(_QWORD *)(v14 + 16);
  v305 = 0;
  v287 = *(_QWORD *)(v14 + 56);
  v303 = 0;
  v302 = 0;
  v301 = 0;
  v300 = 0;
  v276 = strlen(*a3);
  v16 = *(_DWORD *)(*a4 + 12);
  v288 = a6;
  v17 = (*(_DWORD *)(a6 + 4) - v16);
  v18 = (char *)a1[6];
  v19 = strstr(v18, "%Ä");
  v279 = v19;
  if (v19)
    v20 = (_WORD)v19 - (_WORD)v18;
  else
    v20 = strlen(v18);
  v26 = a5;
  v293 = v15;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v15 + 32)))
  {
    log_OutTraceTuningData(*(uint64_t ***)(v15 + 32), 277, (uint64_t)"%s%s %s%s %s%d %s%d", v21, v22, v23, v24, v25, "BEG");
    v27 = strlen(*a3);
    v26 = a5;
    log_OutTraceTuningDataBinary(*(_QWORD *)(v15 + 32), 278, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
      (uint64_t)*a3,
      v27);
    log_OutTraceTuningDataBinary(*(_QWORD *)(v15 + 32), 278, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      *a4,
      32 * *a5);
  }
  v297 = v16;
  v28 = 0;
  v309 = 0;
  v308 = 0;
  v307 = 0;
  __s = 0;
  v304 = 0;
  if (*(_DWORD *)(v288 + 8) + (unsigned __int16)v17 < (unsigned __int16)(v17 + v20))
    goto LABEL_366;
  v28 = 0;
  v272 = 0;
  v281 = 0;
  v275 = 0;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v274 = 0;
  v278 = v20;
  v29 = *a3;
  v290 = a8;
  v291 = (unsigned __int16)v17;
  v296 = a4;
  v298 = v20;
  v299 = a1;
  v280 = (unsigned __int16)v17;
  while (2)
  {
    v282 = (unsigned __int16)v17;
    if (!v29[(unsigned __int16)v17])
      goto LABEL_366;
    v30 = (unsigned __int16)v17;
    if (v276 <= (unsigned __int16)v17)
    {
      v32 = 0;
      v31 = 0;
      v39 = 1;
      v33 = v17;
      goto LABEL_38;
    }
    v31 = 0;
    v32 = 0;
    v33 = v17;
    while (1)
    {
      if ((_WORD)v31 && v30 + 1 < v276 && v29[(unsigned __int16)v33] == 32 && !strncmp(&v29[v30 + 1], "§", 2uLL))
      {
        v33 += 2;
        --v31;
        v39 = 1;
        goto LABEL_30;
      }
      v34 = *v26;
      if (!(_WORD)v33 || memchr(&szWordBoundOrth, v29[v30 - 1], 3uLL))
      {
        if ((_DWORD)v34)
        {
          v35 = 0;
          v36 = *a4;
          v37 = (int *)*a4;
          while (1)
          {
            v38 = *v37;
            v37 += 8;
            if (v38 == 34 && *(_DWORD *)(v36 + 12) == v30 + v297)
              break;
            ++v35;
            v36 = (uint64_t)v37;
            if (v34 == v35)
              goto LABEL_28;
          }
        }
        else
        {
          LOWORD(v35) = 0;
        }
        if (v34 > (unsigned __int16)v35)
        {
          if (!hlp_GetRangeForSETPHON(v29, (_DWORD *)*a4, v34, (unsigned __int16)v35, (_WORD *)&v302 + 1, &v302, &v303, &v301, &v300))goto LABEL_50;
          if ((_WORD)v302)
            v31 = v303;
        }
      }
LABEL_28:
      if (v32 >= v298)
        break;
      v39 = *((unsigned __int8 *)v299[6] + v32++) == v29[(unsigned __int16)v33];
LABEL_30:
      v30 = (unsigned __int16)++v33;
      v40 = v39 && v276 > (unsigned __int16)v33;
      if (!v40)
        goto LABEL_38;
    }
    v39 = 1;
LABEL_38:
    v41 = v278 > v32 && v276 == v30;
    if (v41 || !v39)
    {
LABEL_50:
      v49 = 0;
      v277 = v33 - v17;
LABEL_51:
      v50 = v293;
      v51 = v299;
LABEL_73:
      v57 = v280;
LABEL_142:
      if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v50 + 32)))
      {
        v85 = *(uint64_t ***)(v50 + 32);
        if (!v49)
        {
          log_OutTraceTuningData(v85, 280, (uint64_t)"%s%d %s%d %s%s", v80, v81, v82, v83, v84, "IDXBEG");
          goto LABEL_352;
        }
        log_OutTraceTuningData(v85, 280, (uint64_t)"%s%d %s%d %s%s", v80, v81, v82, v83, v84, "IDXBEG");
        v91 = *((_DWORD *)v51 + 7);
        if (v91)
          goto LABEL_151;
        if (*((_DWORD *)v51 + 8))
        {
LABEL_150:
          v91 = 0;
          goto LABEL_151;
        }
        log_OutTraceTuningData(*(uint64_t ***)(v50 + 32), 281, (uint64_t)"%s%s %s%s", v86, v87, v88, v89, v90, "RES");
        log_OutTraceTuningData(*(uint64_t ***)(v50 + 32), 282, (uint64_t)"%s%s %s%s", v92, v93, v94, v95, v96, "RES");
      }
      else if (!v49)
      {
        goto LABEL_352;
      }
      v91 = *((_DWORD *)v51 + 7);
      if (!v91)
      {
        v97 = a7;
        if (!*((_DWORD *)v51 + 8))
          goto LABEL_312;
        goto LABEL_150;
      }
LABEL_151:
      v269 = v91;
      v98 = *a3;
      v99 = strlen(*a3);
      v100 = v275;
      for (i = (unsigned __int16)v275; v99 > (unsigned __int16)v100; i = (unsigned __int16)++v100)
      {
        if (memchr(&szWordBoundOrth, v98[i], 3uLL))
          break;
      }
      v102 = (*v51)[1];
      v103 = *(char **)(v102 + 192);
      v286 = *(char **)(v102 + 184);
      v104 = v284;
      do
      {
        if (!v104)
        {
          LOBYTE(v281) = 0;
          a4 = v296;
          goto LABEL_165;
        }
        v105 = v104 - 1;
        v106 = memchr(&szWordBoundOrth, v98[v104 - 1], 3uLL);
        v104 = v105;
      }
      while (v106);
      a4 = v296;
      if ((v105 & 0x8000) != 0)
      {
        LOBYTE(v281) = 0;
      }
      else
      {
        v107 = v98[v105];
        if (strchr(v103, v107))
          v108 = v107;
        else
          v108 = 0;
        LOBYTE(v281) = v108;
      }
LABEL_165:
      v109 = v284 + WORD2(v281);
      v26 = a5;
      if ((signed int)(v109 << 16) >= (_DWORD)v99 << 16)
      {
        v113 = 0;
      }
      else
      {
        v110 = &v98[v109];
        do
        {
          v112 = *v110++;
          v111 = v112;
        }
        while (memchr(&szWordBoundOrth, v112, 3uLL));
        if (strchr(v103, v111))
          v113 = v111;
        else
          v113 = 0;
        a4 = v296;
      }
      if (v284)
      {
        if ((_BYTE)v281 && strchr(v286, (char)v281))
        {
          v314 = 0x300000002;
          v315 = 6;
          v114 = 3;
LABEL_180:
          *((_DWORD *)&v314 + v114++) = 5;
LABEL_181:
          v117 = 0;
          *((_DWORD *)&v314 + v114) = 0;
          v118 = 0x300000001;
          v51 = v299;
          if (v99 != i)
          {
            if (v113 && strchr(v286, v113))
            {
              v312 = 0x300000002;
              v313 = 6;
              v119 = 3;
LABEL_187:
              *((_DWORD *)&v312 + v119++) = 5;
LABEL_188:
              v274 = v113;
              v285 = v114 + 1;
              *((_DWORD *)&v312 + v119) = 0;
              v283 = v119 + 1;
              if (*a5)
              {
                v120 = 0;
                v121 = 0;
                v122 = (unsigned __int16)(v284 + v277);
                v123 = *a4;
                do
                {
                  if (*(_DWORD *)(v123 + v120) == 50)
                  {
                    v124 = *(const char **)(v123 + v120 + 24);
                    if (v124)
                    {
                      if (*v124)
                      {
                        strncpy(*(char **)(v123 + v120 + 24), *(const char **)(v123 + v120 + 24), 8uLL);
                        v123 = *a4;
                        v125 = *(_DWORD *)(*a4 + v120 + 12) - v297;
                        if (v125 == v284)
                        {
                          if (!strcmp(v124, "medial"))
                          {
                            v314 = 0x700000004;
                            v126 = 2;
                          }
                          else
                          {
                            v126 = 0;
                          }
                          if (!strcmp(v124, "phrase-break"))
                          {
                            *(uint64_t *)((char *)&v314 + 4 * v126) = 0x300000002;
                            v126 += 2;
                          }
                          if (!strcmp(v124, "sentence-break"))
                          {
                            *(uint64_t *)((char *)&v314 + 4 * v126) = 0x300000001;
                            v126 += 2;
                          }
                          *((_DWORD *)&v314 + v126) = 0;
                          v285 = v126 + 1;
                          v26 = a5;
                        }
                        if (v125 == v122 || v125 - 1 == v122)
                        {
                          v51 = v299;
                          if (!strcmp(v124, "medial"))
                          {
                            v312 = 0x700000004;
                            v128 = 2;
                          }
                          else
                          {
                            v128 = 0;
                          }
                          if (!strcmp(v124, "phrase-break"))
                          {
                            *(uint64_t *)((char *)&v312 + 4 * v128) = 0x300000002;
                            v128 += 2;
                          }
                          if (!strcmp(v124, "sentence-break"))
                          {
                            *(uint64_t *)((char *)&v312 + 4 * v128) = 0x300000001;
                            v128 += 2;
                          }
                          *((_DWORD *)&v312 + v128) = 0;
                          v283 = v128 + 1;
                          v26 = a5;
                        }
                        else
                        {
                          v51 = v299;
                        }
                      }
                    }
                  }
                  ++v121;
                  v120 += 32;
                }
                while (v121 < *v26);
                v129 = *((_DWORD *)v51 + 7);
              }
              else
              {
                v129 = v269;
              }
              v130 = v290;
              v131 = v287;
              if (!v129)
              {
LABEL_255:
                LODWORD(v135) = 1;
                goto LABEL_257;
              }
              if (!v285)
                goto LABEL_256;
              v132 = 0;
              while (1)
              {
                v133 = *((_DWORD *)&v314 + v132);
                if (v133 != *((_DWORD *)v51 + 7))
                {
LABEL_235:
                  LODWORD(v135) = 0;
                  goto LABEL_236;
                }
                if (v133 != 7)
                  break;
                if (!*(_QWORD *)(*(_QWORD *)((*v51)[1] + 232) + 8 * *((unsigned __int8 *)v51 + 24)))
                  goto LABEL_235;
                __s1[0] = 0;
                v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v131 + 104))(a7, v130, 1, 0, &v304);
                if ((v59 & 0x80000000) != 0)
                  goto LABEL_365;
                for (j = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v131 + 104))(a7, v130, 2, v304, &v309);
                      ;
                      j = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v131 + 120))(a7, v130, v309, &v309))
                {
                  v28 = j;
                  if ((j & 0x80000000) != 0)
                    goto LABEL_366;
                  if (!v309)
                    goto LABEL_235;
                  v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v131 + 168))(a7, v130, v309, 1, 1, (char *)&v305 + 2, &v307);
                  if ((v59 & 0x80000000) != 0)
                    goto LABEL_365;
                  v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v131 + 168))(a7, v130, v309, 2, 1, &v305, &v307);
                  if ((v59 & 0x80000000) != 0)
                    goto LABEL_365;
                  if ((unsigned __int16)v305 + 1 == v284)
                  {
                    v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(v131 + 168))(a7, v130, v309, 0, 1, &v308, &v307);
                    if ((v59 & 0x80000000) != 0)
                      goto LABEL_365;
                    if (v308 <= 0xE && ((1 << v308) & 0x7E10) != 0)
                      break;
                  }
                }
                v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(v131 + 176))(a7, v130, v309, 3, __s1, &v307);
                if ((v28 & 0x80000000) != 0)
                  goto LABEL_366;
                v136 = strlen(*(const char **)(*(_QWORD *)((*v51)[1] + 232) + 8 * *((unsigned __int8 *)v51 + 24)));
                v137 = heap_Calloc(*(_QWORD **)(v293 + 8), (v136 + 1), 1);
                v138 = strcpy((char *)v137, *(const char **)(*(_QWORD *)((*v51)[1] + 232) + 8 * *((unsigned __int8 *)v51 + 24)));
                v139 = strchr(v138, 32);
                v140 = v137;
                if (v137 | (unint64_t)v139)
                {
                  v135 = v139;
                  v265 = v140;
                  v141 = (const char *)v140;
                  if (v139)
LABEL_243:
                    *v135 = 0;
                  while (1)
                  {
                    v142 = strlen(__s1[0]);
                    v143 = v142 - strlen(v141);
                    if (v143 >= 0 && !strcmp(v141, &__s1[0][v143]))
                      break;
                    v51 = v299;
                    if (!v135)
                    {
                      v144 = v293;
                      goto LABEL_250;
                    }
                    v141 = v135 + 1;
                    v135 = strchr(v135 + 1, 32);
                    if (v135)
                      goto LABEL_243;
                  }
                  LODWORD(v135) = 1;
                  v144 = v293;
                  v51 = v299;
LABEL_250:
                  v130 = v290;
                  v131 = v287;
                  v140 = v265;
                }
                else
                {
                  LODWORD(v135) = 0;
                  v144 = v293;
                }
                heap_Free(*(_QWORD **)(v144 + 8), v140);
                if ((_DWORD)v135)
                  goto LABEL_257;
LABEL_236:
                if (++v132 >= (unint64_t)v285)
                  goto LABEL_257;
              }
              if (v133 != 5 || *((unsigned __int8 *)v51 + 24) == (char)v281)
                goto LABEL_255;
LABEL_256:
              LODWORD(v135) = 0;
LABEL_257:
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v293 + 32)))
              {
                LOBYTE(__s1[0]) = 0;
                hlp_ContextToString((int)v135, *((_DWORD *)v51 + 7), *((_BYTE *)v51 + 24), v285, (uint64_t)&v314, v281, (char *)__s1);
                log_OutTraceTuningData(*(uint64_t ***)(v293 + 32), 281, (uint64_t)"%s%s %s%s", v145, v146, v147, v148, v149, "RES");
              }
              if ((_DWORD)v135)
              {
                if (*((_DWORD *)v51 + 8))
                {
                  v97 = a7;
                  if (!v283)
                    goto LABEL_308;
                  v150 = 0;
                  v151 = v283;
LABEL_263:
                  v152 = *((_DWORD *)&v312 + v150);
                  if (v152 != *((_DWORD *)v51 + 8))
                  {
LABEL_278:
                    v154 = 0;
                    goto LABEL_299;
                  }
                  if (v152 != 7)
                  {
                    if (v152 != 5 || *((unsigned __int8 *)v51 + 25) == v274)
                    {
                      v154 = 1;
                      goto LABEL_309;
                    }
LABEL_308:
                    v154 = 0;
                    goto LABEL_309;
                  }
                  if (!*(_QWORD *)(*(_QWORD *)((*v51)[1] + 232) + 8 * *((unsigned __int8 *)v51 + 25)))
                    goto LABEL_278;
                  __s1[0] = 0;
                  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v131 + 104))(v97, v290, 1, 0, &v304);
                  if ((v59 & 0x80000000) != 0)
                    goto LABEL_365;
                  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v131 + 104))(v97, v290, 2, v304, &v309);
                  if ((v28 & 0x80000000) != 0)
                    goto LABEL_366;
                  v153 = v309;
                  if (!v309)
                  {
LABEL_277:
                    v154 = 0;
                    goto LABEL_298;
                  }
                  while (1)
                  {
                    v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v131 + 168))(v97, v290, v153, 1, 1, (char *)&v305 + 2, &v307);
                    if ((v59 & 0x80000000) != 0)
                      goto LABEL_365;
                    if (HIWORD(v305) - 1 == (unsigned __int16)v275)
                    {
                      v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v131 + 168))(v97, v290, v309, 2, 1, &v305, &v307);
                      if ((v59 & 0x80000000) != 0)
                        goto LABEL_365;
                      v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(v131 + 168))(v97, v290, v309, 0, 1, &v308, &v307);
                      if ((v59 & 0x80000000) != 0)
                        goto LABEL_365;
                      if (v308 <= 0xE && ((1 << v308) & 0x7E10) != 0)
                        break;
                    }
                    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v131 + 120))(v97, v290, v309, &v309);
                    if ((v28 & 0x80000000) != 0)
                      goto LABEL_366;
                    v153 = v309;
                    if (!v309)
                      goto LABEL_277;
                  }
                  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(v131 + 176))(v97, v290, v309, 3, __s1, &v307);
                  if ((v28 & 0x80000000) != 0)
                    goto LABEL_366;
                  v155 = strlen(*(const char **)(*(_QWORD *)((*v51)[1] + 232) + 8 * *((unsigned __int8 *)v51 + 25)));
                  v156 = heap_Calloc(*(_QWORD **)(v293 + 8), (v155 + 1), 1);
                  v157 = strcpy((char *)v156, *(const char **)(*(_QWORD *)((*v51)[1] + 232) + 8 * *((unsigned __int8 *)v51 + 25)));
                  v158 = strchr(v157, 32);
                  if (!(v156 | (unint64_t)v158))
                  {
                    v154 = 0;
                    v169 = v293;
                    goto LABEL_297;
                  }
                  v159 = v158;
                  v160 = (const char *)v156;
                  if (!v158)
                    goto LABEL_283;
LABEL_282:
                  *v159 = 0;
                  while (1)
                  {
LABEL_283:
                    v161 = __s1[0];
                    v162 = strstr(__s1[0], v160);
                    if (v162)
                    {
                      v163 = v162;
                      v164 = strlen(v161);
                      v165 = v164 - strlen(v163);
                      if ((int)v165 < 1)
                      {
                        v154 = 1;
                        v169 = v293;
                        v51 = v299;
LABEL_296:
                        v131 = v287;
LABEL_297:
                        heap_Free(*(_QWORD **)(v169 + 8), v156);
                        v97 = a7;
LABEL_298:
                        v151 = v283;
                        if (v154)
                          goto LABEL_309;
LABEL_299:
                        if (++v150 >= v151)
                          goto LABEL_309;
                        goto LABEL_263;
                      }
                      v51 = v299;
                      while (1)
                      {
                        v166 = *(unsigned __int8 *)v161++;
                        v167 = (1 << v166) & 0x4008400000000;
                        if (v166 > 0x32 || v167 == 0)
                          break;
                        if (!--v165)
                        {
                          v154 = 1;
                          v169 = v293;
                          goto LABEL_296;
                        }
                      }
                    }
                    v169 = v293;
                    v131 = v287;
                    if (!v159)
                    {
                      v154 = 0;
                      goto LABEL_297;
                    }
                    v160 = v159 + 1;
                    v159 = strchr(v159 + 1, 32);
                    if (v159)
                      goto LABEL_282;
                  }
                }
                v154 = 1;
                v97 = a7;
LABEL_309:
                if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v293 + 32)))
                {
                  LOBYTE(__s1[0]) = 0;
                  hlp_ContextToString(v154, *((_DWORD *)v51 + 8), *((_BYTE *)v51 + 25), v283, (uint64_t)&v312, v274, (char *)__s1);
                  log_OutTraceTuningData(*(uint64_t ***)(v293 + 32), 282, (uint64_t)"%s%s %s%s", v170, v171, v172, v173, v174, "RES");
                }
                v57 = v280;
                if (!v154)
                  goto LABEL_352;
LABEL_312:
                v175 = domain_mngr_utils_ListContainsString(a2, "*");
                v179 = v272;
                if (!v175)
                  v179 = 1;
                v180 = *v26;
                if (*((_DWORD *)v51 + 2) == 2 || v179 == 1)
                {
                  v272 = v179;
                  v181 = v297 + (unsigned __int16)v275;
                  if (*v26)
                  {
                    v182 = 0;
                    v183 = 0;
                    v184 = 2;
                    v185 = 56;
                    v186 = v297 + v284;
                    while (1)
                    {
                      v187 = *v296;
                      v188 = *(_DWORD *)(*v296 + 32 * v182);
                      if ((v188 - 16) < 4)
                        goto LABEL_323;
                      if (v188 == 21)
                      {
                        if (v272 == 1)
                        {
                          if (v182 + 1 >= (unsigned __int16)v180)
                          {
                            v201 = -1;
                          }
                          else
                          {
                            v264 = v186;
                            v266 = v183;
                            v270 = v181;
                            v191 = v187 + 32 * v182;
                            v192 = (_DWORD *)(v191 + 12);
                            v292 = (const char **)(v191 + 24);
                            v193 = (const char **)(v187 + v185);
                            v194 = v184;
                            v267 = v17;
                            while (1)
                            {
                              if (*((_DWORD *)v193 - 6) == 21)
                              {
                                v195 = *((_DWORD *)v193 - 3);
                                if (v195 >= *v192)
                                {
                                  v196 = v28;
                                  v197 = v192;
                                  v198 = v180;
                                  v199 = v195 - *v192;
                                  v200 = strcmp(*v193, *v292);
                                  v201 = v199;
                                  v180 = v198;
                                  v17 = v267;
                                  v192 = v197;
                                  v28 = v196;
                                  if (v200)
                                    break;
                                }
                              }
                              v193 += 4;
                              v41 = (unsigned __int16)v180 == (unsigned __int16)v194++;
                              if (v41)
                              {
                                v201 = -1;
                                break;
                              }
                            }
                            v51 = v299;
                            v57 = v280;
                            v181 = v270;
                            v183 = v266;
                            v186 = v264;
                          }
                          v202 = *(_DWORD *)(v187 + 32 * v182 + 12);
                          if (v202 <= v186 && (v201 == -1 || v202 + v201 >= v181))
                          {
                            v203 = *(char **)(v187 + 32 * v182 + 24);
                            v204 = v181;
                            v205 = v183;
                            v206 = v186;
                            v207 = domain_mngr_utils_ListContainsString(a2, v203);
                            v186 = v206;
                            v181 = v204;
                            if (v207 == 1)
                              v183 = 1;
                            else
                              v183 = v205;
                          }
                          v26 = a5;
                        }
                        goto LABEL_346;
                      }
                      if (v188 == 24)
                      {
LABEL_323:
                        if (*((_DWORD *)v51 + 2) == 2)
                        {
                          v189 = *(_DWORD *)(v187 + 32 * v182 + 12);
                          if (v189 > v186 && v189 < v181)
                          {
                            log_OutText(*(_QWORD *)(v293 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s] at %u-%u deactivated because of ESC pitch, volume or rate", v176, v177, v178, *(_QWORD *)((*v51)[1] + 168));
                            log_OutTraceTuningData(*(uint64_t ***)(v293 + 32), 283, (uint64_t)"%s%s %s%s", v216, v217, v218, v219, v220, "RES");
                            goto LABEL_352;
                          }
                        }
                      }
LABEL_346:
                      ++v182;
                      v180 = *v26;
                      v185 += 32;
                      ++v184;
                      if (v182 >= v180)
                        goto LABEL_349;
                    }
                  }
                  v183 = 0;
LABEL_349:
                  if (v272 == 1 && !v183)
                  {
                    log_OutText(*(_QWORD *)(v293 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s] at %u-%u deactivated because of ESC tn", v176, v177, v178, *(_QWORD *)((*v51)[1] + 168));
                    log_OutTraceTuningData(*(uint64_t ***)(v293 + 32), 283, (uint64_t)"%s%s %s%s", v208, v209, v210, v211, v212, "RES");
                    v272 = 1;
                    goto LABEL_352;
                  }
                  LODWORD(v180) = *v26;
                  a4 = v296;
                  v97 = a7;
                }
                if ((_DWORD)v180)
                {
                  v228 = 0;
                  v229 = (int *)(*a4 + 12);
                  v230 = v285;
                  while (1)
                  {
                    v231 = *v229;
                    v229 += 8;
                    if (v231 - v297 >= v284)
                      break;
                    if (v180 == ++v228)
                      goto LABEL_378;
                  }
                  LOWORD(v180) = v228;
                }
                else
                {
                  v230 = v285;
                }
LABEL_378:
                if (log_GetLogLevel(*(_QWORD *)(v293 + 32)) >= 5)
                {
                  LOBYTE(__s1[0]) = 0;
                  __dst[0] = 0;
                  hlp_ContextToString(1, *((_DWORD *)v51 + 7), *((_BYTE *)v51 + 24), v230, (uint64_t)&v314, v281, (char *)__s1);
                  hlp_ContextToString(1, *((_DWORD *)v51 + 8), *((_BYTE *)v51 + 25), v283, (uint64_t)&v312, v274, __dst);
                  v235 = *v26;
                  LOWORD(v236) = v180;
                  if (v235 > (unsigned __int16)v180)
                  {
                    v236 = (unsigned __int16)v180;
                    v237 = (_DWORD *)(*v296 + 32 * (unsigned __int16)v180);
                    while (v237[3] - v297 <= v284 && *v237 == 36)
                    {
                      ++v236;
                      v237 += 8;
                      if (v235 == v236)
                        goto LABEL_390;
                    }
                  }
                  if ((_DWORD)v235 != (unsigned __int16)v236 && *v26)
                  {
                    v238 = *v296 + 8;
                    do
                    {
                      if (*(_DWORD *)(v238 + 4) - v297 >= (unsigned __int16)v275)
                        break;
                      v238 += 32;
                      --v235;
                    }
                    while (v235);
                  }
LABEL_390:
                  log_OutText(*(_QWORD *)(v293 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s], begPos %ld, endPos %ld, begCtxt %s, endCtxt %s", v232, v233, v234, *(_QWORD *)((*v51)[1] + 168));
                }
                v239 = v26;
                v240 = *a9;
                v28 = activeprompt_Insert((uint64_t)v51, v284, v277, v297, a3, v296, v239, (unsigned __int16)v180, v288, v97, v290, a9);
                if ((v28 & 0x80000000) != 0)
                {
                  v26 = v239;
                  a4 = v296;
                  goto LABEL_366;
                }
                v241 = *v239;
                v242 = *v296;
                v243 = v297 + v284;
                a4 = v296;
                if (v241)
                {
                  v244 = 0;
                  v245 = (unsigned int *)(v242 + 12);
                  while (1)
                  {
                    v246 = *v245;
                    v245 += 8;
                    if (v246 > v243)
                      break;
                    if (v241 == ++v244)
                    {
                      LOWORD(v244) = v241;
                      break;
                    }
                  }
                }
                else
                {
                  LOWORD(v244) = 0;
                }
                v247 = *a9;
                v248 = heap_Realloc(*(uint64_t **)(v293 + 8), v242, 32 * v241 + 32);
                if (v248)
                {
                  *v296 = v248;
                  v253 = *a5;
                  if ((unsigned __int16)v244 < v253)
                  {
                    memmove((void *)(v248 + 32 * ((unsigned __int16)v244 + 1)), (const void *)(v248 + 32 * (unsigned __int16)v244), 32 * (int)(v253 - (unsigned __int16)v244));
                    LOWORD(v253) = *a5;
                    v248 = *v296;
                  }
                  *a5 = v253 + 1;
                  v254 = (_OWORD *)(v248 + 32 * (unsigned __int16)v244);
                  *v254 = 0u;
                  v254[1] = 0u;
                  v255 = *v296;
                  *(_DWORD *)(*v296 + 32 * (unsigned __int16)v244) = 40;
                  if ((_WORD)v244)
                    *(_DWORD *)(v255 + 32 * (unsigned __int16)v244 + 4) = *(_DWORD *)(v255
                                                                                      + 32
                                                                                      * ((unsigned __int16)v244
                                                                                       - 1)
                                                                                      + 4);
                  v256 = v255 + 32 * (unsigned __int16)v244;
                  *(_DWORD *)(v256 + 12) = v243;
                  *(_DWORD *)(v256 + 16) = ((unsigned __int16)v275 - v284 + (__int16)(v247 - v240)) & ~(((unsigned __int16)v275 - v284 + (__int16)(v247 - v240)) >> 31);
                  v257 = strlen(*(const char **)((*v51)[1] + 168));
                  v258 = strlen((const char *)v51[2]);
                  *(_QWORD *)(*v296 + 32 * (unsigned __int16)v244 + 24) = heap_Alloc(*(_QWORD *)(v293 + 8), (v257 + v258 + 3));
                  v259 = *v296 + 32 * (unsigned __int16)v244;
                  v261 = *(_QWORD *)(v259 + 24);
                  v260 = (const void *)(v259 + 24);
                  if (v261)
                  {
                    if (vector_Add(*(_QWORD *)(**v51 + 88), v260))
                    {
                      strcpy(*(char **)(*v296 + 32 * (unsigned __int16)v244 + 24), *(const char **)((*v51)[1] + 168));
                      strcat(*(char **)(*v296 + 32 * (unsigned __int16)v244 + 24), "::");
                      strcat(*(char **)(*v296 + 32 * (unsigned __int16)v244 + 24), (const char *)v51[2]);
LABEL_411:
                      v26 = a5;
                      goto LABEL_366;
                    }
                    v28 = 2296389642;
                    heap_Free(*(_QWORD **)(v293 + 8), *(_QWORD *)(*v296 + 32 * (unsigned __int16)v244 + 24));
                    *(_QWORD *)(*v296 + 32 * (unsigned __int16)v244 + 24) = 0;
                    v262 = *(_QWORD *)(v293 + 32);
                  }
                  else
                  {
                    v28 = 2296389642;
                    v262 = *(_QWORD *)(v293 + 32);
                  }
                }
                else
                {
                  v28 = 2296389642;
                  v262 = *(_QWORD *)(v293 + 32);
                }
                log_OutPublic(v262, (uint64_t)"DOMAIN_MNGR", 47000, 0, v249, v250, v251, v252, v263);
                goto LABEL_411;
              }
              v57 = v280;
LABEL_352:
              v29 = *a3;
              for (k = v282; ; k = (unsigned __int16)v17)
              {
                v214 = v29[k];
                if (!v214)
                  break;
                if (memchr(&szWordBoundOrth, v214, 3uLL))
                {
                  v215 = v17;
                  while (memchr(&szWordBoundOrth, v214, 3uLL))
                  {
                    v215 = (v215 + 1);
                    v214 = v29[(unsigned __int16)v215];
                    v17 = v215;
                    if (!v214)
                      goto LABEL_361;
                  }
                  v17 = v215;
                  break;
                }
                v17 = (v17 + 1);
              }
LABEL_361:
              v291 = (unsigned __int16)v17;
              a4 = v296;
              if (*(_DWORD *)(v288 + 8) + v57 < (unsigned __int16)(v17 + v298))
                goto LABEL_366;
              continue;
            }
            LODWORD(v312) = 4;
            v117 = 1;
            v118 = 0x600000007;
          }
          *(_QWORD *)((unint64_t)&v312 | (4 * v117)) = v118;
          v119 = v117 | 2;
          if (!v113)
            goto LABEL_188;
          goto LABEL_187;
        }
        LODWORD(v314) = 4;
        v115 = 1;
        v116 = 0x600000007;
      }
      else
      {
        v115 = 0;
        v116 = 0x300000001;
      }
      *(_QWORD *)((unint64_t)&v314 | (4 * v115)) = v116;
      v114 = v115 | 2;
      if (!(_BYTE)v281)
        goto LABEL_181;
      goto LABEL_180;
    }
    break;
  }
  v42 = v33 - v17;
  WORD2(v281) = v33 - v17;
  v43 = v33;
  if (v300 < v30)
  {
    v42 = v33 - v17;
    v43 = v33;
    if ((_WORD)v31)
    {
      v44 = (unsigned __int16)v33;
      if (v276 <= (unsigned __int16)v33)
      {
        v47 = v33;
      }
      else
      {
        v45 = strncmp(&v29[(unsigned __int16)v33], "§", 2uLL);
        v46 = v33;
        v47 = v33;
        if (v45)
        {
          while (1)
          {
            v44 = (unsigned __int16)++v46;
            if (v276 <= (unsigned __int16)v46)
              break;
            v48 = strncmp(&v29[(unsigned __int16)v46], "§", 2uLL);
            v47 = v46;
            if (!v48)
              goto LABEL_54;
          }
          v47 = v46;
        }
      }
LABEL_54:
      if (v276 == v44)
      {
        a4 = v296;
        goto LABEL_366;
      }
      v43 = 3 * v31 + v47 - 1;
      a4 = v296;
      if ((unsigned __int16)(3 * v31 + v47 - 1) > v276)
        goto LABEL_366;
      v42 = v43 - v17;
    }
  }
  v268 = v43;
  v52 = 0;
  v53 = 0;
  v277 = v42;
  v54 = v291 + v42;
  v51 = v299;
  while (2)
  {
    v55 = *v26;
    if (v53 >= v55)
      goto LABEL_74;
    if (*(_DWORD *)(*a4 + v52) == 34)
    {
      if (!hlp_GetRangeForSETPHON(v29, (_DWORD *)*a4, v55, (unsigned __int16)v53, (_WORD *)&v302 + 1, &v302, &v303, &v301, &v300))goto LABEL_66;
      v56 = (unsigned __int16)v302;
      if ((_WORD)v302)
      {
        if (v301 < v291 && v300 >= v291)
        {
LABEL_66:
          v56 = 1;
        }
        else if (v301 >= v54)
        {
          v56 = 0;
        }
        else
        {
          v56 = 0;
          if (v54 <= v300)
            goto LABEL_66;
        }
      }
    }
    else
    {
      v56 = 0;
    }
    ++v53;
    v52 += 32;
    if (!v56)
      continue;
    break;
  }
  if (v56 == 1)
  {
    v49 = 0;
    v50 = v293;
    goto LABEL_73;
  }
LABEL_74:
  v58 = v287;
  if (!v279)
    goto LABEL_115;
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v287 + 104))(a7, v290, 1, 0, &v304);
  if ((v59 & 0x80000000) != 0)
  {
LABEL_365:
    v28 = v59;
  }
  else
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v287 + 104))(a7, v290, 2, v304, &v309);
    if ((v28 & 0x80000000) == 0)
    {
      v60 = strstr((char *)v299[6], "§");
      if (v60)
      {
        v61 = v60;
        v62 = v279 + 3;
        do
        {
          v273 = v61;
          while (1)
          {
            if (!v309)
              goto LABEL_92;
            v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v58 + 168))(a7, v290, v309, 1, 1, (char *)&v305 + 2, &v307);
            if ((v59 & 0x80000000) != 0)
              goto LABEL_365;
            v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(v58 + 168))(a7, v290, v309, 0, 1, &v308, &v307);
            if ((v59 & 0x80000000) != 0)
              goto LABEL_365;
            if (v308 == 5 && HIWORD(v305) == (unsigned __int16)(v17 + (_WORD)v273 - *((_WORD *)v51 + 24)))
              break;
            v58 = v287;
            v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v287 + 120))(a7, v290, v309, &v309);
            if ((v28 & 0x80000000) != 0)
              goto LABEL_366;
          }
          v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(v287 + 176))(a7, v290, v309, 3, &__s, &v307);
          if ((v28 & 0x80000000) != 0)
            goto LABEL_366;
          v63 = strlen(__s);
          if (!strncmp(v62, __s, v63) && (!v62[v63] || !strcmp(&v62[v63], "%Ä")))
LABEL_92:
            v64 = 1;
          else
            v64 = 0;
          if (v309)
            v65 = v64;
          else
            v65 = 0;
          LOBYTE(v66) = *v62;
          if (*v62)
          {
            v67 = 1;
            do
            {
              v68 = strcmp(v62, "%Ä");
              v69 = v68 == 0;
              if (!v68)
                break;
              v62 += utf8_determineUTF8CharLength(v66);
              v66 = *(unsigned __int8 *)v62;
              if (v66 == 95 || v66 == 35)
              {
                v70 = *((unsigned __int8 *)v62 - 1) - 32;
                v40 = v70 > 0x3F;
                v71 = (1 << v70) & 0x8000000000000009;
                if (v40 || v71 == 0)
                  ++v67;
              }
            }
            while (*v62);
          }
          else
          {
            v69 = 0;
            v67 = 1;
          }
          v73 = strstr(&v273[3 * v67 - 1], "§");
          if (!v69 && v73)
          {
            v49 = 0;
            goto LABEL_51;
          }
          v74 = v73;
          v75 = utf8_determineUTF8CharLength(v66);
          v51 = v299;
          v58 = v287;
          if (!v74)
            break;
          v61 = v74;
          v62 += v75;
        }
        while (v65);
        if (v65)
          goto LABEL_114;
        v49 = 0;
        v57 = v280;
        v50 = v293;
        goto LABEL_142;
      }
LABEL_114:
      v29 = *a3;
LABEL_115:
      v76 = strlen(v29);
      while (1)
      {
        if (v76 <= (unsigned __int16)v33)
        {
          v49 = 1;
          goto LABEL_122;
        }
        v77 = v29[(unsigned __int16)v33];
        if (memchr(&szWordBoundOrth, v77, 3uLL))
          break;
        LOWORD(v33) = v33 + 1;
        a4 = v296;
        if (!strchr(*(char **)((*v51)[1] + 192), v77))
        {
          v49 = 0;
          goto LABEL_122;
        }
      }
      v49 = 1;
      a4 = v296;
LABEL_122:
      v57 = v280;
      if (a10)
      {
        if ((_WORD)v17)
        {
          if (strlen(v29) == (unsigned __int16)v268 && v29[v291 - 1] == 95)
          {
            v49 = 0;
            goto LABEL_127;
          }
          v78 = v268;
          if (strlen(v29) > (unsigned __int16)v268)
          {
            if (v29[v291 - 1] == 95 || v29[(unsigned __int16)v268] == 95)
              v49 = 0;
            v284 = v17;
            v79 = v268;
LABEL_140:
            v275 = v79;
            a4 = v296;
LABEL_141:
            v50 = v293;
            goto LABEL_142;
          }
          v284 = v17;
        }
        else
        {
          v78 = v268;
          if (strlen(v29) <= (unsigned __int16)v268)
          {
            v284 = 0;
          }
          else
          {
            v284 = 0;
            if (v29[(unsigned __int16)v268] == 95)
              v49 = 0;
          }
        }
        v79 = v78;
        goto LABEL_140;
      }
LABEL_127:
      v284 = v17;
      v275 = v268;
      goto LABEL_141;
    }
  }
LABEL_366:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v293 + 32)))
  {
    v221 = strlen(*a3);
    log_OutTraceTuningDataBinary(*(_QWORD *)(v293 + 32), 279, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
      (uint64_t)*a3,
      v221);
    log_OutTraceTuningDataBinary(*(_QWORD *)(v293 + 32), 279, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      *a4,
      32 * *v26);
    log_OutTraceTuningData(*(uint64_t ***)(v293 + 32), 277, (uint64_t)"%s%s", v222, v223, v224, v225, v226, "END");
  }
  return v28;
}

_QWORD *PurgeNLUStrArr(_QWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  int v27;

  if (a2)
  {
    v6 = a5 == a3 || a5 == 0;
    v7 = v6;
    v8 = a2 - 1;
    if (a2 != 1)
    {
      v9 = result;
      v10 = 0;
      v11 = 0;
      v12 = a3;
      v27 = a3 + 32;
      v13 = a4;
      v14 = a4 + 32;
      v15 = a5 == a4 || v7;
      v16 = v15 ^ 1;
      while (1)
      {
        if (v9)
        {
          v17 = v9[2];
          if (v17)
          {
            if (v9[1] > v11)
            {
              v18 = *(char **)(v17 + 8 * v11);
              if (v18)
              {
                v19 = *v18;
                if (v19 == v12 || v27 == v19)
                {
                  v21 = v11 + 1;
                  do
                  {
                    v22 = v9[2];
                    if (v22)
                    {
                      if (v9[1] > v21)
                      {
                        v23 = *(char **)(v22 + 8 * v21);
                        if (v23)
                        {
                          v24 = *v23;
                          v25 = v24 == v13 || v14 == v24;
                          if (v25)
                            v10 = 1;
                          if (v25 && (v16 & 1) == 0)
                          {
                            if (v7)
                              v26 = v21;
                            else
                              v26 = v11;
                            result = (_QWORD *)StrArrSave(v9, v26, 0);
                            v10 = 1;
                          }
                        }
                      }
                    }
                    ++v21;
                  }
                  while (a2 != v21);
                }
              }
            }
          }
        }
        if (++v11 == v8)
        {
          if (!v10)
            break;
          v10 = 0;
          v11 = 0;
          if (!v8)
            break;
        }
      }
    }
  }
  return result;
}

_DWORD *CILE_New(_QWORD *a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = (_DWORD *)heap_Calloc(a1, 1, 24);
  if (result)
  {
    *result = a2;
    result[1] = a3;
    result[2] = a4;
  }
  return result;
}

_QWORD *CILE_Free(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = (uint64_t)result;
    do
    {
      v4 = *(_QWORD *)(v3 + 16);
      result = heap_Free(a2, v3);
      v3 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t CI_Update(uint64_t a1, _DWORD *a2, int a3, int a4, int a5)
{
  *a2 = a3;
  a2[1] = a4;
  a2[2] = a5;
  return 0;
}

uint64_t domain_mngr_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2296389633;
  result = 0;
  *a2 = &IDomain_Mngr;
  return result;
}

uint64_t domain_mngr_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2296389639;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t domain_mngr_ClassClose()
{
  return 0;
}

uint64_t domain_mngr_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t Object;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  __int128 v41;
  _QWORD *(*v42)(_QWORD *, _QWORD *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = 0;
  v45 = 0;
  v43 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v45);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a1, a2, &v44);
  if ((inited & 0x80000000) != 0)
    return inited;
  v14 = 2296389642;
  log_OutText(*(_QWORD *)(v45 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ObjOpen", v11, v12, v13, v40);
  v15 = heap_Calloc(*(_QWORD **)(v45 + 8), 1, 136);
  if (!v15)
  {
    log_OutPublic(*(_QWORD *)(v45 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v16, v17, v18, v19, v40);
    return v14;
  }
  v20 = v15;
  *(_QWORD *)a5 = v15;
  *(_DWORD *)(a5 + 8) = 285;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = a4;
  v22 = v44;
  v21 = v45;
  *(_QWORD *)(v15 + 16) = v45;
  *(_QWORD *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = v22;
  *(_DWORD *)(v15 + 96) = 1;
  *(_DWORD *)(v15 + 128) = 0;
  v23 = *(_QWORD **)(v21 + 8);
  v40 = xmmword_1EA948678;
  *(_QWORD *)&v41 = domain_mngr_IElemConsultMemVecFreeParts;
  v24 = vector_ObjOpen(v23, &v40, 1, (uint64_t *)(v20 + 88));
  v29 = v45;
  if (!v24)
    goto LABEL_16;
  v30 = *(_QWORD **)(v45 + 8);
  v40 = xmmword_1EA948690;
  v41 = *(_OWORD *)off_1EA9486A0;
  v42 = domain_mngr_IElemDomainFree;
  v31 = ssftmap_ObjOpen(v30, 0, &v40, (uint64_t *)(v20 + 112));
  v29 = v45;
  if ((v31 & 0x80000000) != 0)
  {
    v14 = v31;
    goto LABEL_16;
  }
  v32 = *(_QWORD **)(v45 + 8);
  v40 = xmmword_1DECB9208;
  *(_QWORD *)&v41 = 0;
  v33 = vector_ObjOpen(v32, &v40, 1, (uint64_t *)(v20 + 120));
  v29 = v45;
  if (!v33)
  {
LABEL_16:
    log_OutPublic(*(_QWORD *)(v29 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v25, v26, v27, v28, v40);
    goto LABEL_17;
  }
  Object = objc_GetObject(*(_QWORD *)(v45 + 48), (uint64_t)"SYNTHSTREAM", &v43);
  if ((Object & 0x80000000) != 0)
  {
    v14 = Object;
  }
  else
  {
    *(_QWORD *)(v20 + 48) = *(_QWORD *)(v43 + 8);
    v14 = objc_GetObject(*(_QWORD *)(v45 + 48), (uint64_t)"LINGDB", &v43);
    if ((v14 & 0x80000000) == 0)
    {
      *(_QWORD *)(v20 + 56) = *(_QWORD *)(v43 + 8);
      if ((objc_GetObject(*(_QWORD *)(v45 + 48), (uint64_t)"AUDIOFETCHER", &v43) & 0x80000000) == 0)
      {
        v38 = v43;
        *(_QWORD *)(v20 + 64) = *(_QWORD *)(v43 + 8);
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(v38 + 16);
      }
      log_OutText(*(_QWORD *)(v45 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ObjOpen", v35, v36, v37, v40);
      return v14;
    }
  }
LABEL_17:
  if (v45)
  {
    domain_mngr_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
  return v14;
}

uint64_t domain_mngr_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ObjClose", v4, v5, v6, v15);
    if (*(_QWORD *)(a1 + 64))
      objc_ReleaseObject(*(_QWORD *)(v17 + 48), (uint64_t)"AUDIOFETCHER");
    if (*(_QWORD *)(a1 + 56))
      objc_ReleaseObject(*(_QWORD *)(v17 + 48), (uint64_t)"LINGDB");
    if (*(_QWORD *)(a1 + 48))
      objc_ReleaseObject(*(_QWORD *)(v17 + 48), (uint64_t)"SYNTHSTREAM");
    v11 = *(_QWORD *)(a1 + 120);
    if (v11)
      vector_ObjClose(v11);
    v12 = *(_QWORD *)(a1 + 112);
    if (v12)
      ssftmap_ObjClose(v12);
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
      vector_ObjClose(v13);
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ObjClose", v8, v9, v10, v16);
    heap_Free(*(_QWORD **)(v17 + 8), a1);
  }
  return inited;
}

uint64_t domain_mngr_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ObjReopen", v4, v5, v6, v14);
    if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v19) & 0x80000000) == 0)
    {
      while ((ssftmap_IteratorNext(v19, &v18, &v17) & 0x80000000) == 0)
      {
        if (vector_GetElemAt(*(_QWORD *)(v17 + 16), 0, &v16))
        {
          v11 = 1;
          do
            *(_DWORD *)(*(_QWORD *)v16 + 28) = 0;
          while (vector_GetElemAt(*(_QWORD *)(v17 + 16), v11++, &v16));
        }
      }
      ssftmap_IteratorClose((uint64_t)v19);
    }
    *(_DWORD *)(a1 + 128) = 0;
    log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ObjReopen", v8, v9, v10, v15);
  }
  return inited;
}

uint64_t domain_mngr_ProcessStart(uint64_t a1, int a2)
{
  uint64_t inited;
  uint64_t refreshed;
  uint64_t v6;

  v6 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v6);
  if ((inited & 0x80000000) != 0)
    return inited;
  refreshed = hlp_RefreshTNTypes(a1);
  if ((refreshed & 0x80000000) == 0)
    *(_DWORD *)(a1 + 104) = vector_GetSize(*(_QWORD *)(a1 + 120));
  return refreshed;
}

uint64_t domain_mngr_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  unsigned int Size;
  unsigned int v6;
  uint64_t v8;

  v8 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8);
  if ((inited & 0x80000000) == 0)
  {
    vector_Clear(*(_QWORD *)(a1 + 88));
    Size = vector_GetSize(*(_QWORD *)(a1 + 120));
    if (Size > *(_DWORD *)(a1 + 104))
    {
      v6 = Size;
      do
      {
        vector_StackPop(*(_QWORD *)(a1 + 120));
        --v6;
      }
      while (v6 > *(_DWORD *)(a1 + 104));
    }
  }
  return inited;
}

uint64_t domain_mngr_EnableDomain(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ReadOnly;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  v19 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 112), a3, &v19);
  if ((ReadOnly & 0x80000000) != 0)
  {
LABEL_8:
    log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 47008, "%s%s%s%x", v6, v7, v8, v9, "domain");
    return ReadOnly;
  }
  v15 = vector_Add(*(_QWORD *)(a1 + 120), &v19);
  v16 = *(_QWORD *)(v20 + 32);
  if (!v15)
  {
    log_OutPublic(v16, (uint64_t)"DOMAIN_MNGR", 47000, 0, v11, v12, v13, v14, v18);
    ReadOnly = 2296389642;
    goto LABEL_8;
  }
  log_OutText(v16, (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"    Enable domain [%s]", v12, v13, v14, a3);
  return ReadOnly;
}

uint64_t domain_mngr_DisableDomain(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t ReadOnly;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v14);
  if ((inited & 0x80000000) != 0)
    return inited;
  ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 112), a3, &v12);
  if ((ReadOnly & 0x80000000) == 0 && *(_DWORD *)(a1 + 100))
  {
    v7 = 0;
    while (1)
    {
      vector_GetElemAt(*(_QWORD *)(a1 + 120), v7, &v13);
      if (v13)
      {
        if (v12 == *v13)
          break;
      }
      if (++v7 >= *(_DWORD *)(a1 + 100))
        return ReadOnly;
    }
    vector_Remove(*(_QWORD *)(a1 + 120), v7);
    --*(_DWORD *)(a1 + 100);
    log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"    Disable domain [%s]", v9, v10, v11, a3);
  }
  return ReadOnly;
}

uint64_t domain_mngr_DisableAllDomains(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  unsigned int Size;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12);
  if ((inited & 0x80000000) == 0)
  {
    Size = vector_GetSize(*(_QWORD *)(a1 + 120));
    if (Size > *(_DWORD *)(a1 + 100))
    {
      v9 = Size;
      do
      {
        vector_StackPop(*(_QWORD *)(a1 + 120));
        --v9;
      }
      while (v9 > *(_DWORD *)(a1 + 100));
    }
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"    Disable all domains", v6, v7, v8, v11);
  }
  return inited;
}

BOOL domain_mngr_ActivePromptExists(uint64_t a1, int a2, char *a3)
{
  return (safeh_HandleCheck(a1, a2, 285, 136) & 0x80000000) == 0 && (int)hlp_FindActivePrompt(a1, a3, 0) >= 0;
}

uint64_t domain_mngr_ConsultActivePromptDbs(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, __int16 *a8, int a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int16 v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  int v44;
  char *v45;
  uint64_t v46;
  unsigned int v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t ActivePrompt;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  int Size;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int16 v111;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  _WORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  _OWORD v127[6];
  uint64_t v128;
  uint64_t v129;
  int v130;
  const char *v131;
  int v132;
  int v133;
  unsigned __int16 v134[6];

  v121 = 0;
  v17 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v17 & 0x80000000) != 0)
    return v17;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v121);
  if ((inited & 0x80000000) != 0)
    return inited;
  log_OutText(*(_QWORD *)(v121 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ConsultActivePromptDbs", v18, v19, v20, v113);
  vector_Clear(*(_QWORD *)(a1 + 88));
  v26 = *a5;
  if (v26 < 2)
  {
LABEL_7:
    log_OutText(*(_QWORD *)(v121 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    [%s]", v23, v24, v25, *a3);
    v116 = a8;
    v30 = strlen((const char *)*a3);
    v120 = CILE_New(*(_QWORD **)(v121 + 8), 1, *(_DWORD *)(*a4 + 12) + *a8, v30);
    if (!v120)
    {
      inited = 2296389642;
      log_OutPublic(*(_QWORD *)(v121 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v34, v35, v36, v37, v115);
      return inited;
    }
    v118 = a7;
    v119 = a6;
    if (!*a5)
    {
LABEL_32:
      if (!*(_BYTE *)*a3)
        goto LABEL_103;
      v51 = *(_QWORD *)(a1 + 16);
      v128 = 0;
      memset(v127, 0, sizeof(v127));
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v124 = 0;
      v122 = 0;
      v52 = *(_DWORD *)(*a4 + 12);
      v117 = v51;
      if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v51 + 32)))
      {
        log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 250, (uint64_t)"%s%s", v53, v54, v55, v56, v57, "BEG");
        v58 = strlen((const char *)*a3);
        log_OutTraceTuningDataBinary(*(_QWORD *)(v51 + 32), 251, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
          *a3,
          v58);
        log_OutTraceTuningDataBinary(*(_QWORD *)(v51 + 32), 251, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
          *a4,
          32 * *a5);
      }
      v59 = *a5;
      if (!*a5)
      {
        inited = 0;
        v69 = 0;
        goto LABEL_59;
      }
      v60 = 0;
      v61 = 0;
      inited = 2296389642;
      v62 = (uint64_t)v120;
      while (1)
      {
        if (*(_DWORD *)(*a4 + 32 * v60) == 40)
        {
          v63 = strlen(*(const char **)(*a4 + 32 * v60 + 24));
          v64 = (char *)heap_Alloc(*(_QWORD *)(v117 + 8), (v63 + 1));
          v69 = v64;
          if (!v64)
          {
            v51 = v117;
            log_OutPublic(*(_QWORD *)(v117 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v65, v66, v67, v68, v115);
LABEL_59:
            if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v51 + 32)))
            {
              v84 = *(_QWORD *)(v51 + 32);
              v85 = strlen((const char *)*a3);
              v51 = v117;
              log_OutTraceTuningDataBinary(v84, 252, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
                *a3,
                v85);
              log_OutTraceTuningDataBinary(*(_QWORD *)(v117 + 32), 252, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                *a4,
                32 * *a5);
              log_OutTraceTuningData(*(uint64_t ***)(v117 + 32), 250, (uint64_t)"%s%s %s%u", v86, v87, v88, v89, v90, "END");
            }
            if ((inited & 0x80000000) == 0 && *(_DWORD *)(a1 + 96))
            {
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v51 + 32)))
              {
                log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 270, (uint64_t)"%s%s", v91, v92, v93, v94, v95, "BEG");
                v96 = *(_QWORD *)(v51 + 32);
                v97 = strlen((const char *)*a3);
                v51 = v117;
                log_OutTraceTuningDataBinary(v96, 271, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
                  *a3,
                  v97);
                log_OutTraceTuningDataBinary(*(_QWORD *)(v117 + 32), 271, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                  *a4,
                  32 * *a5);
              }
              if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v123) & 0x80000000) == 0)
              {
                while ((ssftmap_IteratorNext(v123, &v125, &v124) & 0x80000000) == 0)
                  domain_SetConsulted(v124, 0);
                ssftmap_IteratorClose((uint64_t)v123);
              }
              Size = vector_GetSize(*(_QWORD *)(a1 + 120));
              if (Size)
              {
                v99 = Size;
                while (vector_GetElemAt(*(_QWORD *)(a1 + 120), --v99, &v126))
                {
                  if (accphr_getAccPhrType(*v126))
                  {
                    if (!v99)
                      break;
                  }
                  else
                  {
                    v100 = vector_GetSize(*(_QWORD *)(*v126 + 16));
                    if (v100)
                    {
                      v101 = v100;
                      if (vector_GetElemAt(*(_QWORD *)(*v126 + 16), v100 - 1, &v122))
                      {
                        v102 = v101 - 2;
                        while (1)
                        {
                          inited = activeprompt_db_Consult(*v122, a3, a4, a5, v119, v118, (uint64_t)v120, a9);
                          if ((inited & 0x80000000) != 0)
                            goto LABEL_82;
                          if (v102 != -1)
                          {
                            if (vector_GetElemAt(*(_QWORD *)(*v126 + 16), v102--, &v122))
                              continue;
                          }
                          break;
                        }
                      }
                    }
                    domain_SetConsulted(*v126, 1);
                    if (!v99)
                      break;
                  }
                }
              }
            }
LABEL_82:
            if (v69)
              heap_Free(*(_QWORD **)(v51 + 8), (uint64_t)v69);
            if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v51 + 32)))
            {
              v104 = strlen((const char *)*a3);
              log_OutTraceTuningDataBinary(*(_QWORD *)(v51 + 32), 272, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
                *a3,
                v104);
              log_OutTraceTuningDataBinary(*(_QWORD *)(v51 + 32), 272, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                *a4,
                32 * *a5);
              v105 = *(_QWORD *)(a1 + 56);
              v133 = 0;
              *(_DWORD *)v134 = 0;
              v132 = 0;
              v131 = 0;
              v130 = 0;
              v129 = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v105 + 104))(v119, v118, 1, 0, &v134[1]) & 0x80000000) == 0&& ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v105 + 152))(v119, v118, 2, v134[1], &v132) & 0x80000000) == 0)
              {
                if ((_WORD)v132)
                {
                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v105 + 104))(v119, v118, 2, v134[1], v134) & 0x80000000) == 0)
                  {
                    v111 = v134[0];
                    if (v134[0])
                    {
                      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v105 + 168))(v119, v118, v111, 0, 1, &v130, (char *)&v133 + 2) & 0x80000000) == 0)
                      {
                        if (v130 == 5)
                        {
                          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, char *))(v105 + 176))(v119, v118, v134[0], 4, &v131, (char *)&v133 + 2) & 0x80000000) != 0)break;
                          if (HIWORD(v133) && !strncmp(v131, "phon", HIWORD(v133)))
                          {
                            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(v105 + 176))(v119, v118, v134[0], 3, &v129, (char *)&v133 + 2) & 0x80000000) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v105 + 168))(v119, v118, v134[0], 1, 1, &v133, (char *)&v133 + 2) & 0x80000000) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v105 + 168))(v119, v118, v134[0], 2,
                                    1,
                                    (char *)&v132 + 2,
                                    (char *)&v133 + 2) & 0x80000000) != 0)
                            {
                              break;
                            }
                            log_OutTraceTuningData(*(uint64_t ***)(v117 + 32), 272, (uint64_t)"%s%s %s%d %s%d", v106, v107, v108, v109, v110, "PHON");
                          }
                        }
                        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v105 + 120))(v119, v118, v134[0], v134) & 0x80000000) == 0)
                        {
                          v111 = v134[0];
                          if (v134[0])
                            continue;
                        }
                        break;
                      }
                    }
                  }
                }
              }
              log_OutTraceTuningData(*(uint64_t ***)(v117 + 32), 270, (uint64_t)"%s%s %s%u", v106, v107, v108, v109, v110, "END");
            }
LABEL_103:
            if (v121)
            {
              CILE_Free(v120, *(_QWORD **)(v121 + 8));
              goto LABEL_105;
            }
            return inited;
          }
          strcpy(v64, *(const char **)(*a4 + 32 * v60 + 24));
          ActivePrompt = hlp_FindActivePrompt(a1, v69, (uint64_t)v127);
          if ((ActivePrompt & 0x80000000) != 0)
          {
            inited = ActivePrompt;
            goto LABEL_57;
          }
          log_OutText(*(_QWORD *)(v117 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Do User Prompt Insertion for [%s]", v71, v72, v73, (uint64_t)v69);
          heap_Free(*(_QWORD **)(v117 + 8), (uint64_t)v69);
          v74 = *(_DWORD *)(*a4 + 32 * v60 + 12);
          while (1)
          {
            v75 = *(_DWORD *)(v62 + 4);
            v76 = *(_DWORD *)(v62 + 8) + v75;
            v77 = v75 > v74 || v74 >= v76;
            if (!v77 || v74 == v76 && v74 == v52 + strlen((const char *)*a3))
              break;
            v62 = *(_QWORD *)(v62 + 16);
            if (!v62)
            {
              v69 = 0;
              inited = 2296389632;
              goto LABEL_57;
            }
          }
          v61 = activeprompt_Insert((uint64_t)v127, (unsigned __int16)(v74 - v52), 0, v52, (const char **)a3, a4, a5, (unsigned __int16)v60, v62, v119, v118, v116);
          if ((v61 & 0x80000000) != 0)
          {
LABEL_53:
            v69 = 0;
            inited = v61;
LABEL_57:
            v51 = v117;
            goto LABEL_59;
          }
          log_OutText(*(_QWORD *)(v117 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    [%s]", v78, v79, v80, *a3);
          v59 = *a5;
        }
        if (++v60 >= (unint64_t)v59)
          goto LABEL_53;
      }
    }
    v38 = 0;
    v39 = 0;
    v40 = v120;
    while (1)
    {
      v41 = *a4;
      v42 = *(_DWORD *)(*a4 + v38);
      if (v42 > 25)
      {
        if (v42 == 26 || v42 == 29)
        {
LABEL_24:
          v48 = *(_DWORD *)(v41 + v38 + 12);
          v33 = *((unsigned int *)v40 + 1);
          v34 = v48 - v33;
          if (v48 > v33)
          {
            v49 = *((_DWORD *)v40 + 2);
            if ((v49 - (int)v34) << 16 >= 1)
            {
              inited = CI_Update(*(_QWORD *)(v121 + 8), v40, *(_DWORD *)v40, v33, v34);
              if ((inited & 0x80000000) != 0)
                goto LABEL_103;
              v50 = CILE_New(*(_QWORD **)(v121 + 8), *(_DWORD *)v40, *(_DWORD *)(*a4 + v38 + 12), v49 - *((_DWORD *)v40 + 2));
              if (!v50)
              {
LABEL_102:
                inited = 2296389642;
                log_OutPublic(*(_QWORD *)(v121 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v34, v35, v36, v37, v115);
                goto LABEL_103;
              }
              v40[2] = v50;
              v40 = v50;
            }
          }
        }
      }
      else
      {
        if (v42 == 8)
          goto LABEL_24;
        if (v42 == 12)
        {
          v43 = *(const char **)(v41 + v38 + 24);
          if (v43 && *v43 && strcmp(v43, "normal"))
          {
            if (!*(_DWORD *)(a1 + 128))
            {
              v44 = strlen(v43);
              v45 = (char *)heap_Alloc(*(_QWORD *)(v121 + 8), (v44 + 1));
              if (!v45)
                goto LABEL_102;
              v46 = (uint64_t)v45;
              strcpy(v45, *(const char **)(*a4 + v38 + 24));
              domain_mngr_EnableDomain(a1, a2, v46);
              heap_Free(*(_QWORD **)(v121 + 8), v46);
            }
          }
          else if (!*(_DWORD *)(a1 + 128))
          {
            hlp_DisableLastDomain(a1, v31, v32, v33, v34, v35, v36, v37, v115);
          }
        }
      }
      ++v39;
      v38 += 32;
      if (v39 >= *a5)
        goto LABEL_32;
    }
  }
  v27 = 0;
  v28 = (unsigned int *)(*a4 + 44);
  while (1)
  {
    v29 = *v28;
    v28 += 8;
    if (*(_DWORD *)(*a4 + 32 * v27 + 12) > v29)
      break;
    if ((unsigned __int16)(v26 - 1) <= ++v27)
      goto LABEL_7;
  }
  log_OutPublic(*(_QWORD *)(v121 + 32), (uint64_t)"DOMAIN_MNGR", 47015, 0, v22, v23, v24, v25, v114);
  inited = 2296389639;
LABEL_105:
  if (v121)
    log_OutText(*(_QWORD *)(v121 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ConsultActivePromptDbs", v81, v82, v83, v115);
  return inited;
}

uint64_t domain_mngr_ConsultOriOrth(uint64_t a1, int a2, const char **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int *v30;
  uint64_t v31;
  const char *v32;
  int v33;
  int v34;
  _BOOL4 v35;
  const char *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char **v42;
  const char *v43;
  int v44;
  const char *v45;
  char *v46;
  unsigned int v47;
  int v48;
  int *v49;
  uint64_t v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  int Size;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  const char **v81;
  const char *__s1;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char __s2[8];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v83 = 0;
  strcpy(__s2, "normal");
  v10 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v10 & 0x80000000) != 0)
    return v10;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v83);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v83 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ConsultOriOrth", v11, v12, v13, v77);
    *(_DWORD *)(a1 + 128) = 1;
    v15 = CILE_New(*(_QWORD **)(v83 + 8), 1, *(_DWORD *)(*a4 + 12), *(_DWORD *)(*a4 + 16));
    if (v15)
    {
      v80 = v15;
      v81 = a3;
      if (*a5)
      {
        v79 = a2;
        v23 = 0;
        v24 = __s2;
        __s1 = __s2;
        v25 = v15;
        while (1)
        {
          v26 = *a4;
          v27 = *(unsigned int *)(*a4 + 32 * v23);
          if (v27 > 0x28)
            break;
          if (((1 << v27) & 0x10024000100) != 0)
          {
            v28 = *(_DWORD *)(v26 + 32 * v23 + 12);
            v18 = v25[1];
            v19 = v28 - v18;
            if (v28 > v18)
            {
              v29 = v25[2];
              if (v29 != (_DWORD)v19)
              {
                inited = CI_Update(*(_QWORD *)(v83 + 8), v25, *v25, v18, v19);
                if ((inited & 0x80000000) != 0)
                  goto LABEL_95;
                v30 = CILE_New(*(_QWORD **)(v83 + 8), *v25, *(_DWORD *)(*a4 + 32 * v23 + 12), v29 - v25[2]);
                if (!v30)
                  goto LABEL_94;
                *((_QWORD *)v25 + 2) = v30;
                v25 = v30;
              }
            }
            goto LABEL_49;
          }
          if (v27 == 12)
          {
            v36 = *(const char **)(v26 + 32 * v23 + 24);
            if (v36 && *v36 && strcmp(v36, "normal"))
            {
              v37 = strlen(v36);
              v38 = (char *)heap_Alloc(*(_QWORD *)(v83 + 8), (v37 + 1));
              if (!v38)
                goto LABEL_94;
              v39 = (uint64_t)v38;
              strcpy(v38, *(const char **)(*a4 + 32 * v23 + 24));
              domain_mngr_EnableDomain(a1, v79, v39);
              heap_Free(*(_QWORD **)(v83 + 8), v39);
            }
            else
            {
              hlp_DisableLastDomain(a1, v16, v17, v18, v19, v20, v21, v22, v78);
            }
            goto LABEL_49;
          }
          if (v27 != 21)
            break;
          if (!strcmp(__s1, *(const char **)(v26 + 32 * v23 + 24)))
            goto LABEL_49;
LABEL_16:
          v31 = v26 + 32 * v23;
          v32 = *(const char **)(v31 + 24);
          v33 = strcmp(v32, __s2);
          v34 = *(_DWORD *)v31;
          if (v33)
          {
            v35 = 0;
            if (v34 == 21)
              goto LABEL_37;
            if (v34 == 36)
              goto LABEL_40;
            goto LABEL_38;
          }
          if (v34 != 36)
          {
            if (v34 == 21)
            {
              v35 = strcmp(v24, __s2) == 0;
LABEL_37:
              __s1 = v32;
LABEL_39:
              v32 = v24;
              goto LABEL_40;
            }
LABEL_38:
            v35 = 0;
            goto LABEL_39;
          }
          v35 = strcmp(__s1, __s2) == 0;
LABEL_40:
          v18 = *(unsigned int *)(v26 + 32 * v23 + 12);
          v47 = v25[1];
          v19 = v18 - v47;
          if (v18 <= v47 || (v48 = v25[2], v48 == (_DWORD)v19))
          {
            if ((_DWORD)v18 == v47)
            {
              inited = CI_Update(*(_QWORD *)(v83 + 8), v25, v35, v18, v25[2]);
              v24 = (char *)v32;
              if ((inited & 0x80000000) != 0)
                goto LABEL_95;
              goto LABEL_49;
            }
          }
          else
          {
            inited = CI_Update(*(_QWORD *)(v83 + 8), v25, *v25, v25[1], v19);
            if ((inited & 0x80000000) != 0)
              goto LABEL_95;
            v49 = CILE_New(*(_QWORD **)(v83 + 8), v35, *(_DWORD *)(*a4 + 32 * v23 + 12), v48 - v25[2]);
            if (!v49)
            {
LABEL_94:
              inited = 2296389642;
              log_OutPublic(*(_QWORD *)(v83 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v19, v20, v21, v22, v78);
              goto LABEL_95;
            }
            *((_QWORD *)v25 + 2) = v49;
            v25 = v49;
          }
          v24 = (char *)v32;
LABEL_49:
          if (++v23 >= (unint64_t)*a5)
            goto LABEL_65;
        }
        v40 = v83;
        v88 = 0;
        if (!v24)
          goto LABEL_49;
        if (!v83)
          goto LABEL_49;
        if ((_DWORD)v27 != 36)
          goto LABEL_49;
        v41 = v26 + 32 * v23;
        v43 = *(const char **)(v41 + 24);
        v42 = (const char **)(v41 + 24);
        if (!strcmp(v24, v43)
          || (paramc_ParamGetStr(*(_QWORD *)(v40 + 40), (uint64_t)"langcode", &v88) & 0x80000000) != 0)
        {
          goto LABEL_49;
        }
        v44 = strcmp(v24, "normal");
        v45 = *v42;
        if (v44)
        {
          if (strcmp(v45, "normal"))
          {
LABEL_54:
            v26 = *a4;
            if (*a5)
            {
              v50 = 0;
              v51 = 0;
              v52 = *(_DWORD *)(v26 + 32 * v23 + 12);
              do
              {
                if (v51)
                  break;
                v53 = *(_DWORD *)(v26 + v50 + 12);
                if (v53 > v52)
                  break;
                v51 = v53 == v52 && *(_DWORD *)(v26 + v50) == 34;
                v50 += 32;
              }
              while (32 * *a5 != v50);
              if (v51)
                goto LABEL_49;
            }
            goto LABEL_16;
          }
          v46 = v88;
          v45 = v24;
        }
        else
        {
          v46 = v88;
        }
        if (!strcmp(v45, v46))
          goto LABEL_49;
        goto LABEL_54;
      }
LABEL_65:
      if (*v81 && **v81)
      {
        v54 = *(_QWORD *)(a1 + 16);
        v87 = 0;
        v88 = 0;
        v85 = 0;
        v86 = 0;
        v84 = 0;
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v54 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v54 + 32), 210, (uint64_t)"%s%s", v55, v56, v57, v58, v59, "BEG");
          v60 = strlen(*v81);
          log_OutTraceTuningDataBinary(*(_QWORD *)(v54 + 32), 211, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)*v81,
            v60);
          log_OutTraceTuningDataBinary(*(_QWORD *)(v54 + 32), 211, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
            *a4,
            32 * *a5);
        }
        if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v85) & 0x80000000) == 0)
        {
          while ((ssftmap_IteratorNext(v85, &v87, &v86) & 0x80000000) == 0)
            domain_SetConsulted(v86, 0);
          ssftmap_IteratorClose((uint64_t)v85);
        }
        Size = vector_GetSize(*(_QWORD *)(a1 + 120));
        if (Size)
        {
          v62 = Size;
          inited = 0;
          while (vector_GetElemAt(*(_QWORD *)(a1 + 120), --v62, &v88))
          {
            if (accphr_getAccPhrType(*(_QWORD *)v88))
            {
              if (!v62)
                break;
            }
            else
            {
              v63 = vector_GetSize(*(_QWORD *)(*(_QWORD *)v88 + 16));
              if (v63)
              {
                v64 = v63;
                if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)v88 + 16), v63 - 1, &v84))
                {
                  v65 = v64 - 2;
                  while (1)
                  {
                    inited = activeprompt_db_ConsultOriOrth(*v84, (uint64_t *)v81, a4, a5, (uint64_t)v80);
                    if ((inited & 0x80000000) != 0)
                      goto LABEL_90;
                    if (v65 != -1)
                    {
                      if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)v88 + 16), v65--, &v84))
                        continue;
                    }
                    break;
                  }
                }
              }
              domain_SetConsulted(*(_QWORD *)v88, 1);
              if (!v62)
                break;
            }
          }
        }
        else
        {
          inited = 0;
        }
LABEL_90:
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v54 + 32)))
        {
          if ((inited & 0x80000000) == 0)
          {
            v72 = strlen(*v81);
            log_OutTraceTuningDataBinary(*(_QWORD *)(v54 + 32), 212, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
              (uint64_t)*v81,
              v72);
            log_OutTraceTuningDataBinary(*(_QWORD *)(v54 + 32), 212, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
              *a4,
              32 * *a5);
          }
          log_OutTraceTuningData(*(uint64_t ***)(v54 + 32), 210, (uint64_t)"%s%s %s%u", v67, v68, v69, v70, v71, "END");
        }
      }
LABEL_95:
      if (v83)
      {
        CILE_Free(v80, *(_QWORD **)(v83 + 8));
        if (v83)
          log_OutText(*(_QWORD *)(v83 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ConsultOriOrth", v73, v74, v75, v78);
      }
    }
    else
    {
      inited = 2296389642;
      log_OutPublic(*(_QWORD *)(v83 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v19, v20, v21, v22, v78);
    }
  }
  return inited;
}

uint64_t domain_mngr_InsertPromptOrth(uint64_t a1, int a2, const char **a3, uint64_t *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, _WORD *a8)
{
  uint64_t v12;
  uint64_t inited;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t ActivePrompt;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  _OWORD v38[6];
  uint64_t v39;
  uint64_t v40;

  v40 = 0;
  v12 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v40);
  if ((inited & 0x80000000) == 0)
  {
    v14 = *a5;
    if (*a5)
    {
      v15 = 0;
      v16 = 0;
      v17 = *(_DWORD *)(*a4 + 12);
      do
      {
        if (*(_DWORD *)(*a4 + v15) == 40)
        {
          v18 = strlen(*(const char **)(*a4 + v15 + 24));
          v19 = (char *)heap_Alloc(*(_QWORD *)(v40 + 8), (v18 + 1));
          if (!v19)
          {
            log_OutPublic(*(_QWORD *)(v40 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v20, v21, v22, v23, v34);
            return 2296389642;
          }
          v24 = v19;
          strcpy(v19, *(const char **)(*a4 + v15 + 24));
          ActivePrompt = hlp_FindActivePrompt(a1, v24, (uint64_t)v38);
          if ((ActivePrompt & 0x80000000) != 0)
          {
            inited = ActivePrompt;
            heap_Free(*(_QWORD **)(v40 + 8), (uint64_t)v24);
            return inited;
          }
          log_OutText(*(_QWORD *)(v40 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Do User Prompt Insertion for [%s]", v26, v27, v28, (uint64_t)v24);
          heap_Free(*(_QWORD **)(v40 + 8), (uint64_t)v24);
          inited = activeprompt_InsertOrth((char **)v38, (unsigned __int16)*(_DWORD *)(*a4 + v15 + 12) - (unsigned __int16)v17, v17, a3, a4, a5, (unsigned __int16)v16, v29, a6, a7, a8);
          if ((inited & 0x80000000) != 0)
            return inited;
          log_OutText(*(_QWORD *)(v40 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    [%s]", v30, v31, v32, (uint64_t)*a3);
          v14 = *a5;
        }
        ++v16;
        v15 += 32;
      }
      while (v16 < v14);
    }
  }
  return inited;
}

uint64_t domain_mngr_ExternalDBRegister(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = safeh_HandleCheck(a1, a2, 285, 136);
  if ((result & 0x80000000) == 0)
  {
    LODWORD(result) = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4);
    if ((int)result >= 0)
      return 2296389633;
    else
      return result;
  }
  return result;
}

uint64_t domain_mngr_ActivePromptFind(uint64_t a1, int a2, char *a3, unsigned int *a4, uint64_t a5, char **a6, _QWORD *a7)
{
  uint64_t result;

  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  result = safeh_HandleCheck(a1, a2, 285, 136);
  if ((result & 0x80000000) == 0)
  {
    result = hlp_FindActivePrompt(a1, a3, (uint64_t)a4);
    if ((result & 0x80000000) == 0)
    {
      if (a6)
        result = activeprompt_GetRecPromptURI(a4, a5, a6);
      if (a7)
      {
        if ((result & 0x80000000) == 0)
          return activeprompt_GetUserNorm((uint64_t)a4, a7);
      }
    }
  }
  return result;
}

uint64_t domain_mngr_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = safeh_HandleCheck(a1, a2, 285, 136);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v6);
    if ((result & 0x80000000) == 0)
      *a3 = &domain_mngr_ResourceTypes_SZ_CONTENT_TYPES;
  }
  return result;
}

uint64_t domain_mngr_ResourceLoad(_WORD **a1, int a2, char *a3, char *a4, const void *a5, int a6, uint64_t a7)
{
  uint64_t active;
  int v9;
  _BOOL4 v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ReadOnly;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = 0;
  v73 = 0;
  v74 = 0;
  active = 2296389639;
  if (!a3 || !a7)
    return active;
  v9 = a6;
  if (a4)
  {
    v15 = a6 != 0;
    if (!a5 && a6)
      return active;
  }
  else
  {
    if (!a5 || !a6)
      return active;
    v15 = 1;
  }
  inited = safeh_HandleCheck((uint64_t)a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  memset(v72, 0, sizeof(v72));
  inited = InitRsrcFunction(*a1, (int)a1[1], &v75);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  v22 = a5 != 0;
  if (v22 && v15)
    v23 = a5;
  else
    v23 = 0;
  if (!v22 || !v15)
    v9 = 0;
  log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 201, (uint64_t)"%s%s %s%s %s%s", v17, v18, v19, v20, v21, "BEG");
  active = activeprompt_db_ObjOpen(0, (uint64_t)a1, a3, a4, v23, v9, 0, &v73);
  if ((active & 0x80000000) != 0)
    goto LABEL_42;
  v29 = v73;
  if (!v73)
    goto LABEL_52;
  v30 = *(_QWORD *)(v73 + 80);
  if (v30)
  {
    if (strstr(a3, "application/x-vocalizer-activeprompt-db"))
    {
      v31 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t))a1[8] + 13))(a1[9], a1[10], v30);
      active = v31;
      if ((v31 & 0x80000000) != 0 || (v29 = v73) == 0)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_52;
        goto LABEL_42;
      }
    }
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 168);
  if ((ssftmap_FindReadOnly((uint64_t)a1[14], v32, &v74) & 0x80000000) != 0)
  {
    v42 = domain_ObjOpen(0, *a1, (uint64_t)a1[1], (uint64_t)v72);
    if ((v42 & 0x80000000) != 0)
    {
      v52 = v42;
      log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47004, "%s%s%s%x", v43, v44, v45, v46, "domain");
      v53 = 0;
      v54 = 1;
      active = v52;
      goto LABEL_44;
    }
    ReadOnly = ssftmap_Insert((uint64_t)a1[14], v32, (uint64_t)v72);
    if ((ReadOnly & 0x80000000) != 0
      || (ReadOnly = ssftmap_FindReadOnly((uint64_t)a1[14], v32, &v74), (ReadOnly & 0x80000000) != 0))
    {
      active = ReadOnly;
      log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47005, "%s%s%s%x", v48, v49, v50, v51, "domain");
      domain_ObjClose((uint64_t)v72);
      goto LABEL_42;
    }
    log_OutText(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Adding %s", v49, v50, v51, v32);
  }
  v33 = domain_checkIfPresent(v74, v73);
  if ((v33 & 0x80000000) != 0)
  {
    v52 = v33;
    v53 = (v33 & 0x1FFF) == 19;
    if ((v33 & 0x1FFF) == 0x13)
      active = 0;
    else
      active = v33;
    v54 = 1;
LABEL_44:
    log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 201, (uint64_t)"%s%s %s%u", v24, v25, v26, v27, v28, "END");
    v60 = v73;
    if (v73)
    {
      if (v54)
      {
        log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 202, (uint64_t)"%s%s %s%s", v55, v56, v57, v58, v59, "BEG");
        activeprompt_db_ObjClose(v73, v53);
        log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 202, (uint64_t)"%s%s %s%u", v61, v62, v63, v64, v65, "END");
        return active;
      }
      *(_QWORD *)a7 = v73;
      *(_DWORD *)(a7 + 8) = 316;
      domain_mngr_ResourceUnload((uint64_t)a1, a2, v60, *(_QWORD *)(a7 + 8));
      *(_QWORD *)a7 = 0;
      *(_DWORD *)(a7 + 8) = 0;
    }
    return v52;
  }
  active = domain_AddActivePromptDb(v74, v73);
  if ((active & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47009, "%s%s%s%x", v34, v35, v36, v37, "domain");
LABEL_42:
    v53 = 0;
    v54 = 1;
LABEL_43:
    v52 = active;
    goto LABEL_44;
  }
  if (!strstr(a3, ";mode=automatic") && strcmp((const char *)(*(_QWORD *)(v73 + 8) + 52), "automatic"))
    goto LABEL_51;
  active = domain_mngr_EnableDomain((uint64_t)a1, a2, v32);
  if ((active & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47010, "%s%s%s%x", v38, v39, v40, v41, "domain");
    v53 = 0;
    v54 = 0;
    goto LABEL_43;
  }
  ++*((_DWORD *)a1 + 25);
LABEL_51:
  hlp_RefreshTNTypes((uint64_t)a1);
  *(_QWORD *)a7 = v73;
  *(_DWORD *)(a7 + 8) = 316;
LABEL_52:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v75 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 201, (uint64_t)"%s%s %s%u", v66, v67, v68, v69, v70, "END");
  return active;
}

uint64_t domain_mngr_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 316, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v33);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = 2296390669;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v32) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v32, &v31, &v30) & 0x80000000) != 0)
    {
      ssftmap_IteratorClose((uint64_t)v32);
    }
    else
    {
      do
      {
        if (vector_GetElemAt(*(_QWORD *)(v30 + 16), 0, &v29))
        {
          v15 = 0;
          while (*v29 != a3)
          {
            if (!vector_GetElemAt(*(_QWORD *)(v30 + 16), ++v15, &v29))
              goto LABEL_16;
          }
          log_OutTraceTuningData(*(uint64_t ***)(v33 + 32), 202, (uint64_t)"%s%s %s%s", v10, v11, v12, v13, v14, "BEG");
          v16 = *v29;
          if (*(_QWORD *)(*v29 + 80))
          {
            inited = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 112))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
            if ((inited & 0x80000000) != 0)
              return inited;
            v16 = *v29;
          }
          v17 = domain_mngr_DisableDomain(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 + 8) + 168));
          if ((v17 & 0x80000000) != 0)
          {
            v9 = v17;
            log_OutTraceTuningData(*(uint64_t ***)(v33 + 32), 202, (uint64_t)"%s%s %s%u", v18, v19, v20, v21, v22, "END");
            return v9;
          }
          vector_Remove(*(_QWORD *)(v30 + 16), v15);
          log_OutTraceTuningData(*(uint64_t ***)(v33 + 32), 202, (uint64_t)"%s%s %s%u", v23, v24, v25, v26, v27, "END");
          v9 = 0;
        }
LABEL_16:
        ;
      }
      while ((ssftmap_IteratorNext(v32, &v31, &v30) & 0x80000000) == 0);
      ssftmap_IteratorClose((uint64_t)v32);
      if ((v9 & 0x80000000) == 0)
        hlp_RefreshTNTypes(a1);
    }
  }
  return v9;
}

uint64_t domain_mngr_ResourceEnable(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 316, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = 2296390669;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v16) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v16, &v15, &v14) & 0x80000000) != 0)
    {
      v9 = 2296390669;
    }
    else
    {
      v9 = 2296390669;
      do
      {
        if (vector_GetElemAt(*(_QWORD *)(v14 + 16), 0, &v13))
        {
          v10 = 1;
          while (*v13 != a3)
          {
            if (!vector_GetElemAt(*(_QWORD *)(v14 + 16), v10++, &v13))
              goto LABEL_15;
          }
          if (*(_DWORD *)(a3 + 24))
          {
            v9 = 2296390682;
          }
          else
          {
            v9 = 0;
            *(_DWORD *)(a3 + 24) = 1;
          }
        }
LABEL_15:
        ;
      }
      while ((ssftmap_IteratorNext(v16, &v15, &v14) & 0x80000000) == 0);
    }
    ssftmap_IteratorClose((uint64_t)v16);
    return v9;
  }
  return v8;
}

uint64_t domain_mngr_ResourceDisable(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 316, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v16);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = 2296390669;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v15) & 0x80000000) == 0)
  {
LABEL_5:
    while ((ssftmap_IteratorNext(v15, &v14, &v13) & 0x80000000) == 0)
    {
      if (vector_GetElemAt(*(_QWORD *)(v13 + 16), 0, &v12))
      {
        v9 = 1;
        while (*v12 != a3)
        {
          if (!vector_GetElemAt(*(_QWORD *)(v13 + 16), v9++, &v12))
            goto LABEL_5;
        }
        v8 = 2296390669;
        if (*(_DWORD *)(a3 + 24))
        {
          v8 = 0;
          *(_DWORD *)(a3 + 24) = 0;
        }
      }
    }
    ssftmap_IteratorClose((uint64_t)v15);
  }
  return v8;
}

uint64_t domain_mngr_IElemConsultMemVecCopyParts()
{
  return 1;
}

uint64_t *domain_mngr_IElemConsultMemVecFreeParts(uint64_t *result, _QWORD *a2)
{
  if (result)
  {
    if (*result)
      return heap_Free(a2, *result);
  }
  return result;
}

uint64_t domain_mngr_IElemDomainCopy(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t result;
  __int128 v8;

  v5 = heap_Alloc(a2, 32);
  if (!v5)
    return 2296389642;
  v6 = (_OWORD *)v5;
  result = 0;
  v8 = a1[1];
  *v6 = *a1;
  v6[1] = v8;
  *((_QWORD *)a1 + 2) = 0;
  *a3 = v6;
  return result;
}

_QWORD *domain_mngr_IElemDomainFree(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    domain_ObjClose((uint64_t)result);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t hlp_RefreshTNTypes(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD **v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering hlp_RefreshTNTypes", v3, v4, v5, (uint64_t)v15);
  inited = ssftstring_ObjOpen(*(_QWORD **)(v20 + 8), &v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v18) & 0x80000000) == 0)
  {
    while ((ssftmap_IteratorNext(v18, &v17, &v16) & 0x80000000) == 0)
    {
      if (vector_GetElemAt(*(_QWORD *)(v16 + 16), 0, &v15))
      {
        v6 = 1;
        do
          activeprompt_db_GetTNTypes(*v15, (uint64_t)v19);
        while (vector_GetElemAt(*(_QWORD *)(v16 + 16), v6++, &v15));
      }
    }
    ssftmap_IteratorClose((uint64_t)v18);
  }
  v9 = *(_QWORD *)(v20 + 40);
  v10 = (char *)ssftstring_CStr((uint64_t)v19);
  v8 = paramc_ParamSetStr(v9, (uint64_t)"domainmngrtntypes", v10);
  ssftstring_ObjClose(v19);
  log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting hlp_RefreshTNTypes", v11, v12, v13, (uint64_t)v15);
  return v8;
}

uint64_t hlp_FindActivePrompt(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ReadOnly;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int Size;
  int v17;
  unsigned int v18;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  char *__s1;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 16);
  __s1 = 0;
  v29 = 0;
  v4 = 2296389652;
  v27 = 0;
  if (!v3)
    return 2296389639;
  if (a3)
  {
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  ReadOnly = domain_mngr_utils_DuplicateString(*(_QWORD *)(v3 + 8), __s, &__s1);
  if ((ReadOnly & 0x80000000) != 0)
    goto LABEL_15;
  v13 = __s1;
  v14 = strstr(__s1, "::");
  if (v14)
  {
    *v14 = 0;
    v15 = v14 + 2;
    ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 112), (uint64_t)__s1, &v29);
    if ((ReadOnly & 0x80000000) == 0)
    {
      Size = vector_GetSize(*(_QWORD *)(v29 + 16));
      if (Size)
      {
        v17 = Size;
        if (vector_GetElemAt(*(_QWORD *)(v29 + 16), Size - 1, &v27))
        {
          v18 = v17 - 2;
          do
          {
            v4 = activeprompt_db_Get(*v27, v15, a3);
            if ((v4 & 0x80000000) == 0)
              break;
            if (v18 == -1)
              break;
          }
          while (vector_GetElemAt(*(_QWORD *)(v29 + 16), v18--, &v27));
        }
      }
LABEL_16:
      v13 = __s1;
      if (!__s1)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_15:
    v4 = ReadOnly;
    goto LABEL_16;
  }
  v4 = 2296389633;
  if (v13)
  {
LABEL_17:
    heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v13);
    __s1 = 0;
  }
LABEL_18:
  v20 = *(uint64_t ***)(v3 + 32);
  if ((v4 & 0x80000000) != 0)
  {
    log_OutPublic((uint64_t)v20, (uint64_t)"DOMAIN_MNGR", 47016, "%s%s", v9, v10, v11, v12, "prompt");
    log_OutTraceTuningData(*(uint64_t ***)(v3 + 32), 253, (uint64_t)"%s%s %s%d", v21, v22, v23, v24, v25, "NAME");
  }
  else
  {
    log_OutTraceTuningData(v20, 253, (uint64_t)"%s%s", v8, v9, v10, v11, v12, "NAME");
  }
  return v4;
}

uint64_t hlp_DisableLastDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;

  v10 = *(_QWORD *)(a1 + 16);
  if (vector_GetSize(*(_QWORD *)(a1 + 120)) <= *(_DWORD *)(a1 + 100))
  {
    v14 = "    No domains were activated, so could not disable the last domain";
  }
  else
  {
    vector_StackPop(*(_QWORD *)(a1 + 120));
    v14 = "    Disable last enabled domain";
  }
  return log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)v14, v11, v12, v13, a9);
}

uint64_t domain_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  _QWORD *(*v15)(_QWORD *);
  uint64_t v16;

  v16 = 0;
  inited = InitRsrcFunction(a2, a3, &v16);
  if ((inited & 0x80000000) == 0)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_QWORD *)a4 = a2;
    *(_QWORD *)(a4 + 8) = a3;
    v8 = *(_QWORD **)(v16 + 8);
    v14 = xmmword_1EA9486C8;
    v15 = domain_IElemApdbVecFreeParts;
    if (!vector_ObjOpen(v8, &v14, 1, (uint64_t *)(a4 + 16)))
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v9, v10, v11, v12, v14);
      domain_ObjClose(a4);
      return 2296389642;
    }
  }
  return inited;
}

uint64_t domain_IElemApdbVecCopyParts()
{
  return 1;
}

_QWORD *domain_IElemApdbVecFreeParts(_QWORD *result)
{
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
      return (_QWORD *)activeprompt_db_ObjClose((uint64_t)result, 0);
  }
  return result;
}

uint64_t domain_ObjClose(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (!a1)
    return 2296389639;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5);
  if ((inited & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      vector_ObjClose(v3);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  return inited;
}

uint64_t domain_checkIfPresent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  const char *v6;
  const char *v7;
  BOOL v8;
  uint64_t v10;

  v2 = 2296389639;
  if (a1)
  {
    v10 = 0;
    if (vector_GetSize(*(_QWORD *)(a1 + 16)))
    {
      v5 = 0;
      while (1)
      {
        vector_GetElemAt(*(_QWORD *)(a1 + 16), v5, &v10);
        v6 = *(const char **)(*(_QWORD *)v10 + 56);
        v7 = *(const char **)(a2 + 56);
        v8 = !v7 || v6 == 0;
        if (!v8 && *v7 && !strcmp(v7, v6))
          break;
        if (++v5 >= vector_GetSize(*(_QWORD *)(a1 + 16)))
          return 0;
      }
      return 2296389651;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t domain_AddActivePromptDb(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 2296389639;
  if (a1)
  {
    v4 = a2;
    if (vector_Add(*(_QWORD *)(a1 + 16), &v4))
      return 0;
    else
      return 2296389642;
  }
  return v2;
}

uint64_t domain_SetConsulted(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 2296389639;
  result = 0;
  *(_DWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t fe_prompt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  if (!a5)
    return 2342526983;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v26);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v26[6], (uint64_t)"LINGDB", &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v26[6], (uint64_t)"SYNTHSTREAM", &v25);
  v8 = v26[6];
  if ((Object & 0x80000000) != 0)
  {
    v19 = "LINGDB";
LABEL_16:
    objc_ReleaseObject(v8, (uint64_t)v19);
    return Object;
  }
  Object = objc_GetObject(v8, (uint64_t)"DOMAINMNGR", &v23);
  v9 = v26[6];
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v9, (uint64_t)"LINGDB");
    v8 = v26[6];
    v19 = "SYNTHSTREAM";
    goto LABEL_16;
  }
  Object = objc_GetObject(v9, (uint64_t)"FE_DEPES", &v22);
  v10 = v26[6];
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v10, (uint64_t)"LINGDB");
    objc_ReleaseObject(v26[6], (uint64_t)"SYNTHSTREAM");
    v8 = v26[6];
    v19 = "DOMAINMNGR";
    goto LABEL_16;
  }
  Object = objc_GetObject(v10, (uint64_t)"FE_DCTLKP", &v21);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v26[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v26[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v26[6], (uint64_t)"DOMAINMNGR");
    v8 = v26[6];
    v19 = "FE_DEPES";
    goto LABEL_16;
  }
  v11 = heap_Alloc(v26[1], 920);
  if (v11)
  {
    *(_QWORD *)v11 = v26;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v25 + 8);
    v16 = v23;
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v23 + 8);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v16 + 16);
    v17 = v22;
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(v22 + 8);
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(v17 + 16);
    v18 = v21;
    *(_QWORD *)(v11 + 912) = *(_QWORD *)(v21 + 8);
    *(_OWORD *)(v11 + 896) = *(_OWORD *)(v18 + 16);
    *(_QWORD *)a5 = v11;
    *(_DWORD *)(a5 + 8) = 62338;
  }
  else
  {
    log_OutPublic(v26[4], (uint64_t)"FE_PROMPT", 45200, 0, v12, v13, v14, v15, v21);
    objc_ReleaseObject(v26[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v26[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v26[6], (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(v26[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v26[6], (uint64_t)"FE_DCTLKP");
    return 2342526986;
  }
  return Object;
}

uint64_t fe_prompt_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62338, 920);
  if ((result & 0x80000000) != 0)
    return 2342526984;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_prompt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62338, 920);
  if ((int)result >= 0)
    return result;
  else
    return 2342526984;
}

uint64_t fe_prompt_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62338, 920) & 0x80000000) != 0)
    return 2342526984;
  synstrmaux_InitStreamOpener(a1 + 72, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PROMPT");
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(_QWORD *)(a1 + 16), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t fe_prompt_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  int v39;
  __int16 v40;
  int v41;
  _DWORD *v42;
  void *__src;
  __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  __int16 v47;
  char v48;
  unsigned __int8 **v49;
  char *v50;
  const char *v51;

  v49 = 0;
  v50 = 0;
  v48 = 0;
  v47 = 0;
  v45 = 0;
  v44 = 0;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62338, 920) & 0x80000000) != 0)
    return 2342526984;
  v51 = 0;
  v46 = 0;
  __src = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 104))(a3, a4, 1, 0, &v46);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_23;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a1[1] + 184))(a3, a4, v46, 0, &v41) & 0x80000000) == 0
    && (unsigned __int16)v41 == 1)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v46, 0, &v51, &v45);
    if ((v9 & 0x80000000) != 0)
    {
LABEL_23:
      if (v50)
        heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v50);
      v50 = 0;
      if (v42)
        heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v42);
      return v9;
    }
    if (v45 < 2u)
      return v9;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v46, 1, &__src, &v45);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = v45;
      HIWORD(v41) = v45;
      v12 = strlen(v51);
      v13 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v12 + 1));
      v50 = v13;
      if (v13)
      {
        v18 = (uint64_t)v13;
        strcpy(v13, v51);
        v19 = 32 * v11;
        v20 = (_DWORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v19);
        v42 = v20;
        if (v20)
        {
          memcpy(v20, __src, v19);
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, unsigned __int8 ***, __int16 *, char *))(a1[114] + 96))(a1[112], a1[113], "fecfg", "mdesegpos_morpheme_processing", &v49, &v47, &v48);
          if ((v10 & 0x80000000) == 0)
          {
            v25 = 0;
            if (v47 == 1 && v49)
              v25 = **v49 == 49;
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, char **, _DWORD **, char *, uint64_t, uint64_t, __int16 *, _BOOL4))(a1[3] + 104))(a1[4], a1[5], &v50, &v42, (char *)&v41 + 2, a3, a4, &v40, v25);
            if ((v10 & 0x80000000) == 0)
            {
              if (!v50
                || (v26 = strlen(v50),
                    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *, __int16 *))(a1[1] + 160))(a3, a4, v46, 0, (unsigned __int16)(v26 + 1), v50, &v44), (v10 & 0x80000000) == 0))
              {
                if (!v42
                  || !HIWORD(v41)
                  || (v42[4] += v40,
                      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1[1] + 160))(a3, a4, v46, 1), (v10 & 0x80000000) == 0))
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(a1[6] + 112))(a1[7], a1[8], &v39, 0);
                  if ((v10 & 0x80000000) == 0)
                  {
                    v39 += v40;
                    v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 104))(a1[7], a1[8]);
                  }
                }
              }
            }
          }
          goto LABEL_22;
        }
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPT", 45200, 0, v21, v22, v23, v24, v38);
        heap_Free(*(_QWORD **)(*a1 + 8), v18);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPT", 45200, 0, v14, v15, v16, v17, v38);
      }
      return 2342526986;
    }
LABEL_22:
    v9 = v10;
    goto LABEL_23;
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*a1 + 32))
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a3, a4, v46, 1, &v41) & 0x80000000) == 0
    && (unsigned __int16)v41 == 1
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v46, 1, &__src, &v45) & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(*a1 + 32), 270, (uint64_t)"%s%s", v27, v28, v29, v30, v31, "BEG");
    log_OutTraceTuningDataBinary(*(_QWORD *)(*a1 + 32), 271, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
      (uint64_t)&byte_1DEBD87CE,
      0);
    log_OutTraceTuningDataBinary(*(_QWORD *)(*a1 + 32), 271, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      (uint64_t)__src,
      32 * v45);
    log_OutTraceTuningDataBinary(*(_QWORD *)(*a1 + 32), 272, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
      (uint64_t)&byte_1DEBD87CE,
      0);
    log_OutTraceTuningDataBinary(*(_QWORD *)(*a1 + 32), 272, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      (uint64_t)__src,
      32 * v45);
    log_OutTraceTuningData(*(uint64_t ***)(*a1 + 32), 270, (uint64_t)"%s%s %s%u", v32, v33, v34, v35, v36, "END");
  }
  return v9;
}

uint64_t fe_prompt_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62338, 920) & 0x80000000) != 0)
    return 2342526984;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
}

uint64_t fe_prompt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2342526977;
  result = 0;
  *a2 = &IFePrompt;
  return result;
}

uint64_t fe_promptorth_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  if (!a5)
    return 2343575559;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v21[6], (uint64_t)"LINGDB", &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v21[6], (uint64_t)"DOMAINMNGR", &v19);
  v8 = v21[6];
  if ((Object & 0x80000000) != 0)
  {
    v16 = "LINGDB";
LABEL_12:
    objc_ReleaseObject(v8, (uint64_t)v16);
    return Object;
  }
  Object = objc_GetObject(v8, (uint64_t)"FE_DEPES", &v18);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v21[6], (uint64_t)"LINGDB");
    v8 = v21[6];
    v16 = "DOMAINMNGR";
    goto LABEL_12;
  }
  v9 = heap_Alloc(v21[1], 64);
  if (v9)
  {
    *(_QWORD *)v9 = v21;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v20 + 8);
    v14 = v19;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v19 + 8);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v14 + 16);
    v15 = v18;
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(v18 + 8);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v15 + 16);
    *(_QWORD *)a5 = v9;
    *(_DWORD *)(a5 + 8) = 62339;
  }
  else
  {
    log_OutPublic(v21[4], (uint64_t)"FE_PROMPTORTH", 45000, 0, v10, v11, v12, v13, v18);
    objc_ReleaseObject(v21[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v21[6], (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(v21[6], (uint64_t)"FE_DEPES");
    return 2343575562;
  }
  return Object;
}

uint64_t fe_promptorth_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62339, 64);
  if ((result & 0x80000000) != 0)
    return 2343575560;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_promptorth_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62339, 64);
  if ((int)result >= 0)
    return result;
  else
    return 2343575560;
}

uint64_t fe_promptorth_ProcessStart(_QWORD *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD))(a1[2] + 56))(a1[3], a1[4]);
}

uint64_t fe_promptorth_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v30;
  int v31;
  __int16 v32;
  int v33;
  _DWORD *v34;
  void *__src;
  __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  char *v39;
  char *__s;

  v39 = 0;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  __s = 0;
  v38 = 0;
  __src = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 104))(a3, a4, 1, 0, &v38);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_26;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a1[1] + 184))(a3, a4, v38, 0, &v33);
  v11 = a1[1];
  if (v10 < 0 || (unsigned __int16)v33 != 1)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v11 + 184))(a3, a4, v38, 1, &v33);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, unsigned __int16 *))(v11 + 176))(a3, a4, v38, 0, &__s, &v37);
    if ((v9 & 0x80000000) != 0)
      return v9;
    if (v37 > 1u)
      goto LABEL_13;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a3, a4, v38, 1, &v33);
  }
  if (v12 < 0 || (unsigned __int16)v33 != 1)
    return v9;
  __s = &byte_1DEBD87CE;
LABEL_13:
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v38, 1, &__src, &v37);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v37;
    HIWORD(v33) = v37;
    v15 = strlen(__s);
    v16 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v15 + 1));
    v39 = v16;
    if (v16)
    {
      v21 = (uint64_t)v16;
      strcpy(v16, __s);
      v22 = 32 * v14;
      v23 = (_DWORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v22);
      v34 = v23;
      if (v23)
      {
        memcpy(v23, __src, v22);
        v13 = (*(uint64_t (**)(_QWORD, _QWORD, char **, _DWORD **, char *, uint64_t, uint64_t, __int16 *))(a1[2] + 120))(a1[3], a1[4], &v39, &v34, (char *)&v33 + 2, a3, a4, &v32);
        if ((v13 & 0x80000000) == 0)
        {
          if (!v39
            || !*v39
            || (v28 = strlen(v39),
                v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *, __int16 *))(a1[1] + 160))(a3, a4, v38, 0, (unsigned __int16)(v28 + 1), v39, &v36), (v13 & 0x80000000) == 0))
          {
            if (!v34
              || !HIWORD(v33)
              || (v34[4] += v32,
                  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1[1] + 160))(a3, a4, v38, 1),
                  (v13 & 0x80000000) == 0))
            {
              v13 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(a1[5] + 112))(a1[6], a1[7], &v31, 0);
              if ((v13 & 0x80000000) == 0)
              {
                v31 += v32;
                v13 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 104))(a1[6], a1[7]);
              }
            }
          }
        }
        goto LABEL_25;
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPTORTH", 45000, 0, v24, v25, v26, v27, v30);
      heap_Free(*(_QWORD **)(*a1 + 8), v21);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPTORTH", 45000, 0, v17, v18, v19, v20, v30);
    }
    return 2343575562;
  }
LABEL_25:
  v9 = v13;
LABEL_26:
  if (v39)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v39);
  v39 = 0;
  if (v34)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v34);
  return v9;
}

uint64_t fe_promptorth_ProcessEnd(_QWORD *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD))(a1[2] + 64))(a1[3], a1[4]);
}

uint64_t fe_promptorth_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2343575553;
  result = 0;
  *a2 = &IFePromptorth;
  return result;
}

uint64_t fe_promptorth_ResourceTypes(_QWORD *a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1[2] + 144))(a1[3], a1[4], a3);
}

uint64_t fe_promptorth_ResourceLoad(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[2] + 152))(a1[3], a1[4], a3, a4, a5, a6, a7);
}

uint64_t fe_promptorth_ResourceUnload(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[2] + 160))(a1[3], a1[4], a3, a4);
}

uint64_t fe_promptorth_ResourceEnable(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[2] + 168))(a1[3], a1[4], a3, a4);
}

uint64_t fe_promptorth_ResourceDisable(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[2] + 176))(a1[3], a1[4], a3, a4);
}

uint64_t fe_promptoriorth_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v5 = 2357207047;
  v18 = 0;
  v19 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v21);
    if ((inited & 0x80000000) != 0)
      return inited;
    v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 952);
    if (!v8)
    {
      log_OutPublic(*(_QWORD *)(v21 + 32), (uint64_t)"FE_PROMPTORIORTH", 57000, 0, v9, v10, v11, v12, v18);
      return 2357207050;
    }
    v13 = v8;
    *v8 = v21;
    Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v20);
    if ((Object & 0x80000000) != 0
      || (Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"DOMAINMNGR", &v19), (Object & 0x80000000) != 0))
    {
      v5 = Object;
    }
    else
    {
      v5 = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"FE_DEPES", &v18);
      if ((v5 & 0x80000000) == 0)
      {
        v13[1] = *(_QWORD *)(v20 + 8);
        v15 = v19;
        v13[2] = *(_QWORD *)(v19 + 8);
        *(_OWORD *)(v13 + 3) = *(_OWORD *)(v15 + 16);
        v16 = v18;
        v13[7] = *(_QWORD *)(v18 + 8);
        *(_OWORD *)(v13 + 5) = *(_OWORD *)(v16 + 16);
        *(_QWORD *)a5 = v13;
        *(_DWORD *)(a5 + 8) = 62500;
        return v5;
      }
    }
    *(_QWORD *)a5 = v13;
    *(_DWORD *)(a5 + 8) = 62500;
    fe_promptoriorth_ObjClose(v13, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
  return v5;
}

uint64_t fe_promptoriorth_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62500, 952);
  if ((result & 0x80000000) != 0)
    return 2357207048;
  if (a1)
  {
    if (a1[1])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[2])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"DOMAINMNGR");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_promptoriorth_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62500, 952) & 0x80000000) != 0)
    return 2357207048;
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PROMPTORIORTH");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 8), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
  return v7;
}

uint64_t fe_promptoriorth_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  _DWORD *v17;
  const char *v18;
  uint64_t v19;
  size_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  void *v25;
  _DWORD __n[3];
  void *__src;
  int v28;
  uint64_t v29;

  v29 = 0;
  v7 = 2357207050;
  v28 = 0;
  __src = 0;
  memset(__n, 0, sizeof(__n));
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  if ((safeh_HandleCheck(a1, a2, 62500, 952) & 0x80000000) != 0)
    return 2357207048;
  *a5 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *, int *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), (char *)&v29 + 4, &v28);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v29, &v28);
    if ((result & 0x80000000) == 0)
    {
      if (!v29)
      {
        if (v28 == 1)
          return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
        *a5 = 0;
        return result;
      }
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _DWORD *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), &__src, __n);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_23;
      v10 = (_BYTE *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), (__n[0] + 1));
      *(_QWORD *)&__n[1] = v10;
      if (!v10)
        goto LABEL_25;
      v15 = v10;
      if (__src)
        memcpy(v10, __src, __n[0]);
      v15[__n[0]] = 0;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, void **, char *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v25, (char *)&v23 + 4);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_23;
      v16 = HIDWORD(v23);
      LODWORD(v23) = HIDWORD(v23) >> 5;
      HIDWORD(v23) >>= 5;
      v17 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v16 & 0xFFFFFFE0);
      v24 = v17;
      if (!v17)
      {
LABEL_25:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PROMPTORIORTH", 57000, 0, v11, v12, v13, v14, v21);
        goto LABEL_26;
      }
      memcpy(v17, v25, 32 * HIDWORD(v23));
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v22, 0);
      if ((v9 & 0x80000000) == 0)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD, _DWORD *, _DWORD **, uint64_t *))(*(_QWORD *)(a1 + 16) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &__n[1], &v24, &v23);
        if ((v9 & 0x80000000) == 0)
        {
          v18 = *(const char **)&__n[1];
          v19 = __n[0];
          v24[4] = v24[4] + strlen(*(const char **)&__n[1]) - __n[0] + 1;
          v20 = strlen(v18);
          if (!v20)
          {
LABEL_19:
            v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v19);
            if ((v9 & 0x80000000) == 0)
            {
              v9 = (*(uint64_t (**)(_QWORD, _QWORD, _DWORD *, _QWORD))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), v24, (32 * v23));
              if ((v9 & 0x80000000) == 0)
              {
                v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), (32 * HIDWORD(v23)));
                if ((v9 & 0x80000000) == 0)
                {
                  v22 = v22 + strlen(*(const char **)&__n[1]) - __n[0] + 1;
                  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 104))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
                }
              }
            }
            goto LABEL_23;
          }
          v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 928), v18, (v20 + 1));
          if ((v9 & 0x80000000) == 0)
          {
            v19 = __n[0];
            goto LABEL_19;
          }
        }
      }
LABEL_23:
      v7 = v9;
LABEL_26:
      if (*(_QWORD *)&__n[1])
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(uint64_t *)&__n[1]);
      if (v24)
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v24);
      return v7;
    }
  }
  return result;
}

uint64_t fe_promptoriorth_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62500, 952) & 0x80000000) != 0)
    return 2357207048;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
}

uint64_t fe_promptoriorth_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2357207041;
  result = 0;
  *a2 = &IFePromptoriorth;
  return result;
}

uint64_t fe_voice_switch_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Object;
  uint64_t v15;
  uint64_t v16;
  uint64_t Str;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  unsigned int v32;
  _QWORD *v33;
  __int128 v34;
  char *__s;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = 0;
  v36 = 0;
  v37 = 0;
  v5 = 2372935687;
  __s = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v38);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v38 + 8), 1, 1048);
      if (v8)
      {
        v13 = v8;
        *v8 = v38;
        Object = objc_GetObject(*(_QWORD *)(v38 + 48), (uint64_t)"SYNTHSTREAM", &v37);
        if ((Object & 0x80000000) != 0)
        {
          v5 = Object;
LABEL_41:
          *(_QWORD *)a5 = 0;
          *(_DWORD *)(a5 + 8) = 0;
          return v5;
        }
        v13[1] = *(_QWORD *)(v37 + 8);
        if ((objc_GetObject(*(_QWORD *)(v38 + 48), (uint64_t)"COMPQUERY", &v37) & 0x80000000) != 0)
        {
          v13[4] = 0;
          v13[2] = safeh_GetNullHandle();
          v13[3] = v16;
        }
        else
        {
          v15 = v37;
          v13[4] = *(_QWORD *)(v37 + 8);
          *((_OWORD *)v13 + 1) = *(_OWORD *)(v15 + 16);
        }
        if ((paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"mlset", &__s) & 0x80000000) != 0)
        {
          Str = paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"langcode", &__s);
          if ((Str & 0x80000000) != 0)
            goto LABEL_40;
        }
        v22 = __s;
        v13[130] = __s;
        if ((int)strlen(v22) >= 1)
        {
          v23 = 0;
          do
          {
            v22[(unsigned __int16)v23] = __tolower(v22[(unsigned __int16)v23]);
            ++v23;
            v22 = (char *)v13[130];
          }
          while ((int)strlen(v22) > (unsigned __int16)v23);
        }
        *((_DWORD *)v13 + 233) = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"lidvoiceswitch", &v36) & 0x80000000) == 0)
        {
          if (LH_stricmp(v36, "yes"))
          {
            if (LH_stricmp(v36, "no"))
              goto LABEL_22;
            v24 = 1;
          }
          else
          {
            v24 = 0;
          }
          *((_DWORD *)v13 + 233) = v24;
        }
LABEL_22:
        v25 = *(_QWORD *)(v38 + 40);
        v33 = v13;
        v32 = -562455432;
        v34 = xmmword_1EA9486E8;
        Str = paramc_ListenerAdd(v25, "lidvoiceswitch", &v33);
        if ((Str & 0x80000000) == 0)
        {
          *((_DWORD *)v13 + 232) = 0;
          if ((paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"lidscope", &v36) & 0x80000000) == 0)
          {
            if (LH_stricmp(v36, "none"))
            {
              if (LH_stricmp(v36, "user-defined"))
              {
                if (LH_stricmp(v36, "message"))
                  goto LABEL_38;
                v26 = 2;
              }
              else
              {
                v26 = 1;
              }
            }
            else
            {
              v26 = 0;
            }
            *((_DWORD *)v13 + 232) = v26;
LABEL_38:
            v30 = *(_QWORD *)(v38 + 40);
            v33 = v13;
            v34 = xmmword_1EA9486E8;
            Str = paramc_ListenerAdd(v30, "lidscope", &v33);
            if ((Str & 0x80000000) == 0)
            {
              v5 = 0;
              *(_QWORD *)a5 = v13;
              *(_DWORD *)(a5 + 8) = 62466;
              return v5;
            }
            goto LABEL_40;
          }
          v27 = *((_DWORD *)v13 + 232);
          v28 = "message";
          if (v27 == 1)
            v28 = "user-defined";
          if (v27)
            v29 = (char *)v28;
          else
            v29 = "none";
          Str = paramc_ParamSetStr(*(_QWORD *)(v38 + 40), (uint64_t)"lidscope", v29);
          if ((Str & 0x80000000) == 0)
            goto LABEL_38;
        }
LABEL_40:
        v5 = Str;
        log_OutPublic(*(_QWORD *)(*v13 + 32), (uint64_t)"FE_LID", 48000, 0, v18, v19, v20, v21, v32);
        goto LABEL_41;
      }
      log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"FE_LID", 48000, 0, v9, v10, v11, v12, v32);
      return 2372935690;
    }
  }
  return v5;
}

uint64_t fe_lid_ParamCheckChange_0(int a1, char *__s1, char *a3, _BOOL4 *a4)
{
  uint64_t result;
  char *v8;
  int v9;
  _BOOL4 v10;

  if (!strcmp(__s1, "lidscope"))
  {
    result = LH_stricmp(a3, "none");
    if (!(_DWORD)result)
      goto LABEL_13;
    result = LH_stricmp(a3, "user-defined");
    if (!(_DWORD)result)
      goto LABEL_13;
    v8 = "message";
  }
  else
  {
    result = strcmp(__s1, "lidmode");
    if (!(_DWORD)result)
    {
LABEL_13:
      v10 = 1;
      goto LABEL_14;
    }
    if (strcmp(__s1, "lidvoiceswitch"))
    {
      result = 0;
      goto LABEL_13;
    }
    result = LH_stricmp(a3, "yes");
    if (!(_DWORD)result)
      goto LABEL_13;
    v8 = "no";
  }
  v9 = LH_stricmp(a3, v8);
  v10 = v9 == 0;
  if (v9)
    result = 2372935695;
  else
    result = 0;
LABEL_14:
  *a4 = v10;
  return result;
}

uint64_t fe_lid_ParamLearnChange_0(uint64_t a1, char *__s1, char *a3)
{
  uint64_t result;
  int v7;

  if (!strcmp(__s1, "lidscope"))
  {
    result = LH_stricmp(a3, "none");
    if ((_DWORD)result)
    {
      result = LH_stricmp(a3, "user-defined");
      if ((_DWORD)result)
      {
        result = LH_stricmp(a3, "message");
        if ((_DWORD)result)
          return 2372935695;
        v7 = 2;
      }
      else
      {
        v7 = 1;
      }
      *(_DWORD *)(a1 + 928) = v7;
    }
    else
    {
      *(_DWORD *)(a1 + 928) = 0;
    }
  }
  else
  {
    result = strcmp(__s1, "lidmode");
    if (!(_DWORD)result)
      return result;
    if (strcmp(__s1, "lidvoiceswitch"))
      return 0;
    result = LH_stricmp(a3, "yes");
    if ((_DWORD)result)
    {
      result = LH_stricmp(a3, "no");
      if ((_DWORD)result)
        return 2372935695;
      *(_DWORD *)(a1 + 932) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 932) = 0;
    }
  }
  return result;
}

uint64_t fe_voice_switch_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62466, 1048);
  if ((result & 0x80000000) != 0)
    return 2372935688;
  if (a1)
  {
    hlp_TrackStartMsgMarkers(a1, 1, 0, 0);
    if (a1[1])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[4])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"COMPQUERY");
    v4 = *(_QWORD *)(*a1 + 40);
    v7 = a1;
    v8 = xmmword_1EA9486E8;
    paramc_ListenerRemove(v4, "lidscope", (__int128 *)&v7);
    v5 = *(_QWORD *)(*a1 + 40);
    v7 = a1;
    v8 = xmmword_1EA9486E8;
    paramc_ListenerRemove(v5, "lidmode", (__int128 *)&v7);
    v6 = *(_QWORD *)(*a1 + 40);
    v7 = a1;
    v8 = xmmword_1EA9486E8;
    paramc_ListenerRemove(v6, "lidvoiceswitch", (__int128 *)&v7);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_TrackStartMsgMarkers(_QWORD *a1, int a2, int *a3, unsigned int a4)
{
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;

  if (a2)
  {
    v7 = a1 + 117;
    if (*((_DWORD *)a1 + 250) == 21)
    {
      v8 = a1[128];
      if (v8)
        heap_Free(*(_QWORD **)(*a1 + 8), v8);
    }
    *(_OWORD *)(a1 + 125) = 0u;
    *(_OWORD *)(a1 + 127) = 0u;
    *(_OWORD *)(a1 + 121) = 0u;
    *(_OWORD *)(a1 + 123) = 0u;
    *v7 = 0u;
    *(_OWORD *)(a1 + 119) = 0u;
  }
  if (!a3)
    return 0;
  if (*((_DWORD *)a1 + 232) != 1 || a4 == 0)
    return 0;
  v10 = a1 + 125;
  v11 = a4;
  while (1)
  {
    v12 = *a3;
    if (*a3 != 31)
      break;
    v14 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 123) = v14;
LABEL_23:
    a3 += 8;
    if (!--v11)
      return 0;
  }
  if (v12 != 21)
  {
    if (v12 == 7)
    {
      v13 = *((_OWORD *)a3 + 1);
      *(_OWORD *)(a1 + 117) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 119) = v13;
    }
    goto LABEL_23;
  }
  v15 = a1[128];
  if (v15)
    heap_Free(*(_QWORD **)(*a1 + 8), v15);
  if (!strcmp(*((const char **)a3 + 3), "normal"))
  {
    *v10 = 0u;
    *(_OWORD *)(a1 + 127) = 0u;
    goto LABEL_23;
  }
  v16 = *((_OWORD *)a3 + 1);
  *v10 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 127) = v16;
  v17 = strlen(*((const char **)a3 + 3));
  v18 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v17 + 1));
  a1[128] = v18;
  if (v18)
  {
    strcpy(v18, *((const char **)a3 + 3));
    goto LABEL_23;
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_LID", 48000, 0, v19, v20, v21, v22, v24);
  return 2372935690;
}

uint64_t fe_voice_switch_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v10;
  char *v11;

  v10 = 0;
  v11 = 0;
  v7 = safeh_HandleCheck(a1, a2, 62466, 1048);
  if ((v7 & 0x80000000) != 0)
    return 2372935688;
  v8 = v7;
  synstrmaux_InitStreamOpener(a1 + 40, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_LID");
  if (*(_DWORD *)(a1 + 928))
  {
    synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 864);
    synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      0,
      a1 + 880);
    synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", a1 + 896);
    synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      a1 + 912);
    v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 8), a3, a4);
    if ((v8 & 0x80000000) != 0)
    {
      synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
    }
    else
    {
      if (((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", &v11) & 0x80000000) != 0
         || !v11
         || !*v11)
        && (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &v11) & 0x80000000) == 0
        && v11
        && *v11)
      {
        paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", v11);
      }
      if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidstate", &v10) & 0x80000000) == 0
        && v10
        && *v10)
      {
        *(_DWORD *)(a1 + 1032) = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 1032) = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &v11) & 0x80000000) == 0
          && v11
          && *v11)
        {
          paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", v11);
        }
      }
    }
  }
  return v8;
}

uint64_t fe_voice_switch_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t started;
  uint64_t v10;
  uint64_t Object;
  uint64_t v12;
  int v13;
  uint64_t InputOutputMarkers_0;
  unsigned int v15;
  int v16;
  _DWORD *v17;
  unsigned __int16 v18;
  _DWORD *v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  _DWORD *v26;
  char *v27;
  int v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int16 v48;
  unsigned __int16 v49;
  _QWORD *v50;
  uint64_t v51;
  const char *v52;
  int v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned int v56;
  int v58;
  unsigned __int16 v59;
  int v60;
  unsigned int v61;
  _BOOL4 v62;
  int *v63;
  _QWORD *v64;
  const char *v65;
  unsigned int v66;
  unsigned int v67;
  _DWORD *v68;
  _QWORD *v69;
  char *__s1;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  void *__src;
  int *v76;
  unsigned int v77;
  uint64_t v78;
  _BYTE v79[12];
  char v80[1024];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  memset(v79, 0, sizeof(v79));
  v78 = 0;
  v77 = 0;
  __src = 0;
  v76 = 0;
  v74 = 0;
  v73 = 0;
  v71 = 0;
  v72 = 0;
  __s1 = 0;
  bzero(v80, 0x400uLL);
  v8 = safeh_HandleCheck(a1, a2, 62466, 1048);
  if ((v8 & 0x80000000) != 0)
    return 2372935688;
  started = v8;
  *a5 = 1;
  v10 = *(_QWORD *)(a1 + 864);
  if (v10)
  {
    Object = (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 8) + 144))(v10, *(_QWORD *)(a1 + 872), &v79[8], v79);
    if ((Object & 0x80000000) != 0)
      return Object;
    started = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), &v79[4], v79);
    if ((started & 0x80000000) != 0)
      return started;
    if (!*(_DWORD *)&v79[8])
    {
      v13 = *(_DWORD *)v79;
      if (!*(_QWORD *)v79)
      {
        *a5 = 0;
        return started;
      }
      if (*(_DWORD *)&v79[4])
      {
        InputOutputMarkers_0 = hlp_GetInputOutputMarkers_0((_QWORD *)a1, (const void **)&v76, &__src, (int *)&v74 + 1, (int *)&v74);
        if ((InputOutputMarkers_0 & 0x80000000) != 0)
          goto LABEL_150;
        started = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 120))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), (32 * v74));
        __src = 0;
        if ((started & 0x80000000) != 0)
          return started;
        if (HIDWORD(v74))
        {
          started = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), (32 * HIDWORD(v74)));
          if ((started & 0x80000000) != 0)
            goto LABEL_155;
        }
        v13 = *(_DWORD *)v79;
      }
      if (!v13)
        return started;
      return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
    }
    Object = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, unsigned int *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872), &v78, &v77);
    if ((Object & 0x80000000) != 0)
      return Object;
    v12 = v77;
    started = hlp_GetInputOutputMarkers_0((_QWORD *)a1, (const void **)&v76, &__src, (int *)&v74 + 1, (int *)&v74);
    if ((started & 0x80000000) != 0)
      goto LABEL_155;
    if (*(_DWORD *)__src == 0x4000)
      v73 = *((_DWORD *)__src + 3);
    else
      (*(void (**)(_QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 136))(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872), &v73);
    v15 = v74;
    if (v74 >= 2)
    {
      v16 = 1;
      v17 = __src;
      v18 = 1;
      do
      {
        if (v17[8 * v18] == 36)
        {
          v19 = &v17[8 * v16 - 8];
          if (*v19 == 36 && v17[8 * v18 + 3] == v19[3])
            *v19 = 0x4000;
        }
        v16 = ++v18;
      }
      while (v15 > v18);
    }
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidstate", &__s1) & 0x80000000) == 0)
    {
      v20 = __s1;
      if (__s1)
      {
        if (*__s1)
        {
          v21 = strcmp(__s1, "__NUAN_LID_voiceswitch");
          v22 = *(_QWORD *)(*(_QWORD *)a1 + 40);
          if (v21)
          {
            v23 = v20;
            goto LABEL_111;
          }
          started = paramc_ParamRemove(v22, (uint64_t)"lidstate");
          if ((started & 0x80000000) != 0)
            goto LABEL_155;
          if (*(_DWORD *)(a1 + 928) == 1 && v15)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            v50 = __src;
            v67 = v12;
            v68 = __src;
            do
            {
              v51 = v49;
              if (LODWORD(v50[4 * v49]) == 36)
              {
                v52 = (const char *)v50[4 * v49 + 3];
                v53 = strncmp(v52 + 3, "_lid", 3uLL);
                if (v48)
                {
                  if (!v53 || !strncmp(v52 + 3, "_vli", 3uLL) || !strcmp(v52, "normal"))
                  {
                    v12 = (v68[8 * v51 + 3] - v73);
                    v77 = v68[8 * v51 + 3] - v73;
                    LODWORD(v74) = v47;
                    *a5 = 2;
                    v15 = v47;
                    break;
                  }
                }
                else
                {
                  v48 = !v53 || !strncmp(v52 + 3, "_vli", 3uLL);
                }
                ++v48;
                v12 = v67;
                v50 = v68;
              }
              v49 = v51 + 1;
              v47 = (unsigned __int16)(v51 + 1);
            }
            while (v15 > v47);
          }
LABEL_115:
          if (!(_DWORD)v12)
          {
LABEL_118:
            if (!v15)
            {
              v58 = 0;
LABEL_142:
              if (v77)
              {
                started = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872));
                if ((started & 0x80000000) != 0)
                  goto LABEL_155;
              }
              v61 = HIDWORD(v74);
              if (!HIDWORD(v74))
                goto LABEL_155;
              if (*a5 == 2)
              {
                v62 = v58 == 0;
                v63 = v76;
                v64 = (_QWORD *)a1;
              }
              else
              {
                v64 = (_QWORD *)a1;
                v62 = 1;
                v63 = 0;
                v61 = 0;
              }
              started = hlp_TrackStartMsgMarkers(v64, v62, v63, v61);
              if ((started & 0x80000000) != 0)
                goto LABEL_155;
              InputOutputMarkers_0 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), (32 * HIDWORD(v74)));
LABEL_150:
              started = InputOutputMarkers_0;
              goto LABEL_155;
            }
            if (*a5 == 2)
            {
              if (*((_DWORD *)__src + 3) - v73 >= v12)
              {
                v56 = 0;
              }
              else
              {
                v55 = 0;
                do
                  v56 = ++v55;
                while (v15 > v55 && *((_DWORD *)__src + 8 * v55 + 3) - v73 < v12);
              }
              LODWORD(v74) = v56;
              if (HIDWORD(v74) && v76[3] - v73 < v77)
              {
                v59 = 0;
                do
                  v60 = ++v59;
                while (HIDWORD(v74) > v59 && v76[8 * v59 + 3] - v73 < v77);
              }
              else
              {
                v60 = 0;
              }
              HIDWORD(v74) = v60;
              if (!v56)
                goto LABEL_140;
            }
            else
            {
              v56 = v15;
            }
            if (*(_DWORD *)__src == 0x4000)
            {
              v58 = 0;
              *((_DWORD *)__src + 4) = v12;
              goto LABEL_141;
            }
LABEL_140:
            hlp_AddStartMsgMarkers((_QWORD *)a1, (char *)__src, (int *)&v74, v12);
            v58 = 1;
            v56 = v74;
LABEL_141:
            started = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 120))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), 32 * v56);
            __src = 0;
            if ((started & 0x80000000) != 0)
              return started;
            goto LABEL_142;
          }
          v69 = 0;
          Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CHARCOUNT", &v69);
          if ((Object & 0x80000000) == 0)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v69[1] + 72))(v69[2], v69[3], v78, v12);
            objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CHARCOUNT");
            started = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), v78, v12);
            if ((started & 0x80000000) != 0)
              goto LABEL_155;
            goto LABEL_118;
          }
          return Object;
        }
      }
    }
    if (*(_DWORD *)(a1 + 928) == 2)
    {
      if (v15)
      {
        v24 = 0;
        while (*((_DWORD *)__src + 8 * v24) != 36)
        {
          if (v15 <= ++v24)
            goto LABEL_109;
        }
        started = hlp_FindBestVoiceForLidLang((_QWORD *)a1, *(_DWORD *)(a1 + 932) == 0, *((_QWORD *)__src + 4 * v24 + 3), v80);
        if ((started & 0x80000000) != 0)
          goto LABEL_155;
      }
LABEL_109:
      if (!v80[0])
        goto LABEL_115;
      v22 = *(_QWORD *)(*(_QWORD *)a1 + 40);
      v23 = v80;
LABEL_111:
      v54 = paramc_ParamSetStr(v22, (uint64_t)"pipelineswitchvoice", v23);
      if ((v54 & 0x80000000) == 0)
      {
        started = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidstate", "__NUAN_LID_voiceswitch");
        if ((started & 0x80000000) != 0)
          goto LABEL_154;
        *a5 = 3;
        v77 = 0;
        HIDWORD(v74) = 0;
        goto LABEL_155;
      }
      goto LABEL_153;
    }
    if (!v15)
    {
LABEL_90:
      LODWORD(v74) = v15;
      goto LABEL_115;
    }
    v25 = 0;
    while (1)
    {
      if (*a5 != 1)
        goto LABEL_90;
      v26 = __src;
      if (*((_DWORD *)__src + 8 * v25) == 36)
      {
        v27 = (char *)*((_QWORD *)__src + 4 * v25 + 3);
        if (!strcmp(v27, "normal"))
        {
          if (*(_DWORD *)(a1 + 1032)
            && (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", &v71) & 0x80000000) == 0
            && v71
            && *v71
            && ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &v72) & 0x80000000) != 0
             || !v72
             || LH_stricmp(v72, v71)))
          {
            v36 = *(_QWORD *)(*(_QWORD *)a1 + 40);
            v37 = v71;
            if (*((_DWORD *)__src + 8 * v25 + 3) == v73)
            {
              v65 = "pipelineswitchvoice";
              goto LABEL_157;
            }
LABEL_87:
            started = paramc_ParamSetStr(v36, (uint64_t)"lidstate", v37);
            if ((started & 0x80000000) != 0)
              goto LABEL_154;
            *a5 = 2;
            v46 = *((_DWORD *)__src + 8 * v25 + 3);
            v12 = (v46 - v73);
            v77 = v46 - v73;
          }
        }
        else if (strcmp(v27, "unknown") && strncmp(v27, "vceunkn", 7uLL))
        {
          v28 = v26[8 * v25 + 3];
          v29 = v12 - v28 + v73;
          v30 = v25;
          while (v15 > ++v30)
          {
            v31 = v26[8 * v30];
            if (v31 == 36 || v31 == 7)
            {
              v29 = v26[8 * v30 + 3] - v28;
              break;
            }
          }
          if (v29)
          {
            v33 = *(_DWORD *)(a1 + 932);
            v34 = v12;
            if (v27)
              v35 = strstr(v27, "_vli");
            else
              v35 = 0;
            if (v35)
              v38 = 1;
            else
              v38 = v33 == 0;
            v39 = v38;
            started = hlp_FindBestVoiceForLidLang((_QWORD *)a1, v39, (uint64_t)v27, v80);
            if ((started & 0x80000000) != 0)
              goto LABEL_155;
            v40 = v80[0];
            if (v80[0])
              v41 = 0;
            else
              v41 = v39;
            v12 = v34;
            if (v41 == 1)
            {
              if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", &v71) & 0x80000000) == 0
                && v71
                && *v71)
              {
                __strcpy_chk();
              }
              v40 = v80[0];
            }
            if (v40)
            {
              v36 = *(_QWORD *)(*(_QWORD *)a1 + 40);
              if (*((_DWORD *)__src + 8 * v25 + 3) == v73)
              {
                v54 = paramc_ParamSetStr(v36, (uint64_t)"pipelineswitchvoice", v80);
                if ((v54 & 0x80000000) == 0)
                {
                  v36 = *(_QWORD *)(*(_QWORD *)a1 + 40);
                  v65 = "lidstate";
                  v37 = "__NUAN_LID_voiceswitch";
LABEL_157:
                  started = paramc_ParamSetStr(v36, (uint64_t)v65, v37);
                  if ((started & 0x80000000) == 0)
                  {
                    v15 = 0;
                    v12 = 0;
                    *a5 = 3;
                    v77 = 0;
                    HIDWORD(v74) = 0;
                    goto LABEL_90;
                  }
LABEL_154:
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_LID", 48000, 0, v42, v43, v44, v45, v66);
LABEL_155:
                  if (__src)
                    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 120))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), 0);
                  return started;
                }
LABEL_153:
                started = v54;
                goto LABEL_154;
              }
              v37 = v80;
              goto LABEL_87;
            }
          }
        }
      }
      if (v15 <= ++v25)
        goto LABEL_90;
    }
  }
  return started;
}

uint64_t hlp_GetInputOutputMarkers_0(_QWORD *a1, const void **a2, void **a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a5 = 0;
  *a4 = 0;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const void **))(a1[1] + 88))(a1[110], a1[111], a2);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = *a4;
  *a4 = *a4 >> 5;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _QWORD))(a1[1] + 112))(a1[114], a1[115], a3, (v11 & 0xFFFFFFE0) + 64);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *a4;
    if ((_DWORD)v13)
    {
      memcpy(*a3, *a2, 32 * v13);
      *a5 = *a4;
    }
  }
  return v12;
}

uint64_t hlp_FindBestVoiceForLidLang(_QWORD *a1, int a2, uint64_t a3, _BYTE *a4)
{
  uint64_t Str;
  char *v9;
  size_t v10;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  _OWORD v16[4];
  _OWORD v17[4];
  __int128 v18;
  __int128 v19;
  char v20[144];
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"lidoriginalvoice", &v15);
  if ((Str & 0x80000000) != 0)
    v15 = 0;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  if (a3)
  {
    v9 = strstr((char *)a3, "_vli");
    if (v9)
    {
      v10 = (size_t)(v9 + 4);
      VoiceParamExtract((size_t)(v9 + 4), "gender", &v20[8]);
      VoiceParamExtract(v10, "age", (char *)&v21 + 4);
      VoiceParamExtract(v10, "model", &v20[28]);
    }
    v11 = *(unsigned __int8 *)(a3 + 2) == 120;
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v11 = 0;
    if (!a2)
    {
LABEL_13:
      result = 0;
      *a4 = 0;
      return result;
    }
  }
  v12 = a1[4];
  if (!v12)
    goto LABEL_13;
  if (v11)
  {
    if (!a3)
      goto LABEL_17;
    v13 = (char *)&v22;
  }
  else
  {
    if (!a3)
      goto LABEL_17;
    v13 = (char *)v17;
  }
  strncpy(v13, (const char *)a3, 3uLL);
LABEL_17:
  if (v15)
  {
    __strcpy_chk();
    v12 = a1[4];
  }
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, _BYTE *, uint64_t))(v12 + 136))(a1[2], a1[3], *(_QWORD *)(*a1 + 24), *(_QWORD *)(*a1 + 40), v16, a4, 1024) & 0x80000000) != 0)
  {
    result = Str;
    if ((Str & 0x80000000) != 0)
      return result;
    goto LABEL_25;
  }
  if (*a4)
    result = 0;
  else
    result = Str;
  if ((Str & 0x80000000) == 0 && !*a4)
  {
LABEL_25:
    BYTE8(v18) = 0;
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, _BYTE *, uint64_t))(a1[4] + 136))(a1[2], a1[3], *(_QWORD *)(*a1 + 24), *(_QWORD *)(*a1 + 40), v16, a4, 1024);
  }
  return result;
}

uint64_t hlp_AddStartMsgMarkers(_QWORD *a1, char *__src, int *a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;

  v8 = *a3;
  if ((_DWORD)v8)
  {
    memmove(__src + 32, __src, 32 * v8);
    v9 = *a3 + 1;
  }
  else
  {
    v9 = 1;
  }
  *a3 = v9;
  *(_QWORD *)__src = 0x4000;
  *((_DWORD *)__src + 2) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[1] + 136))(a1[108], a1[109], __src + 12);
  *((_DWORD *)__src + 4) = 2 * a4;
  return result;
}

uint64_t fe_voice_switch_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62466, 1048) & 0x80000000) != 0)
    return 2372935688;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
}

uint64_t fe_voice_switch_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2372935681;
  result = 0;
  *a2 = &IFeVoiceSwitch;
  return result;
}

size_t VoiceParamExtract(size_t result, const char *a2, char *a3)
{
  char *v5;
  char *v6;
  char *v7;
  size_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (result)
  {
    result = strlen((const char *)result);
    if (result <= 0x7F)
    {
      __strcpy_chk();
      result = (size_t)strhelper_SafeStrtok((uint64_t)v12, "{}();,", &v11);
      if (result)
      {
        v5 = (char *)result;
        while (1)
        {
          v6 = strchr(v5, 58);
          if (v6)
          {
            v7 = v6;
            v8 = strlen(a2);
            result = strncmp(v5, a2, v8);
            if (!(_DWORD)result)
              break;
          }
          result = (size_t)strhelper_SafeStrtok((uint64_t)v12, "{}();,", &v11);
          v5 = (char *)result;
          if (!result)
            return result;
        }
        v10 = v7[1];
        v9 = v7 + 1;
        if (v10)
          return (size_t)strcpy(a3, v9);
      }
    }
  }
  return result;
}

uint64_t fxd_HighPrecisionFastSynthesisFilter(uint64_t result, _WORD *a2, int a3, char a4, int *a5, unsigned int a6, __int16 a7, uint64_t a8, char a9)
{
  int v11;
  __int16 *v13;
  int *v14;
  char v15;
  int v16;
  int v17;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v25;
  uint64_t v26;

  if (a3)
  {
    v11 = a3;
    v13 = (__int16 *)result;
    v14 = (int *)(a8 + 4 * a6 - 4);
    v15 = a9 - a4;
    v26 = a6 + 1;
    v25 = 1 << (a9 - a4 - 1);
    do
    {
      v16 = *v13++;
      v17 = v16 << v15;
      if (a6)
      {
        v18 = a5;
        v19 = a6;
        do
        {
          v21 = *v14--;
          v20 = v21;
          v22 = *v18++;
          result = fxd_S32ShMultRndS32S32(v20, v22, a7);
          v17 -= result;
          --v19;
        }
        while ((_WORD)v19);
      }
      v14 += v26;
      *v14 = v17;
      v23 = (v17 + v25) >> v15;
      if (v23 <= -32768)
        v23 = -32768;
      if (v23 >= 0x7FFF)
        LOWORD(v23) = 0x7FFF;
      *a2++ = v23;
      --v11;
    }
    while ((_WORD)v11);
  }
  return result;
}

void *LH_S32ToLH_S32(void *__src, void *__dst, unsigned int a3)
{
  return memcpy(__dst, __src, 4 * a3);
}

void *LH_S16ToLH_S16(void *__src, void *__dst, unsigned int a3)
{
  return memmove(__dst, __src, 2 * a3);
}

void FillZeroLH_S32(void *a1, unsigned int a2)
{
  bzero(a1, 4 * a2);
}

void FillZeroLH_S16(void *a1, unsigned int a2)
{
  bzero(a1, 2 * a2);
}

__int16 *fxd_InterpolateVectors(__int16 *result, __int16 *a2, _WORD *a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (a5 >= 1)
  {
    v5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v8 = *a2++;
      *a3++ = (v6 * (a4 ^ 0x7FFFu) + v8 * a4) >> 15;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t fxd_InterpolateVectors_32BIT(uint64_t result, int *a2, _DWORD *a3, int a4, int a5)
{
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (a5 >= 1)
  {
    v8 = (int *)result;
    v9 = 0x800000 - a4;
    v10 = a5;
    do
    {
      v11 = *v8++;
      v12 = fxd_S32ShMultRndS32S32(v11, v9, 23);
      v13 = *a2++;
      result = fxd_S32ShMultRndS32S32(v13, a4, 23);
      *a3++ = result + v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t fxd_LinSpace(_WORD *a1, int a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;

  if (a4 < 1)
    return 0xFFFFFFFFLL;
  v4 = a4;
  v5 = ((a3 - a2) << 16 >> 7) / (__int16)(((_WORD)a4 << 8) + 256);
  do
  {
    a2 += v5 >> 1;
    *a1++ = a2;
    --v4;
  }
  while (v4);
  return 0;
}

__int16 *fxd_LspToCosLsp(__int16 *result, _WORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v8;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      v6 = ((v5 << 14) / 25736) >> 1;
      if (v5 >= -1 && v4 < 25736)
        v8 = v6;
      else
        v8 = 0;
      *a2++ = CosTbl[v8];
      --v3;
    }
    while (v3);
  }
  return result;
}

int *fxd_LspToCosLsp__32BITX(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      v5 = 32 * v4 / 25736;
      if (((v5 >> 15) & 3) != 0)
        v6 = 0;
      else
        v6 = (__int16)(v5 >> 1);
      *a2++ = CosTbl__32BIT[v6];
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t fxd_HighPrecisionCosLspToAi(unint64_t result, _DWORD *a2, int a3)
{
  int *v3;
  int v4;
  __int16 *v5;
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64_t v15;
  int v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  int *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  _DWORD v42[2];
  int v43;
  _BYTE v44[172];

  *(_QWORD *)&v44[156] = *MEMORY[0x1E0C80C00];
  v3 = &v42[a3 + 1];
  v3[2] = 0x800000;
  v43 = 0x800000;
  *v3 = 0x800000;
  v4 = -512 * *(__int16 *)result;
  v42[0] = 0x800000;
  v42[1] = v4;
  v3[1] = -512 * *(__int16 *)(result + 2);
  if (a3 >= 3)
  {
    v5 = (__int16 *)result;
    v6 = &v42[a3];
    v38 = ((a3 - 3) >> 1) + 2;
    v7 = v6 + 4;
    v40 = 2;
    v41 = (int *)v44;
    v8 = 1;
    v9 = v42;
    do
    {
      v10 = 0;
      v11 = v40;
      v12 = v5[v40];
      v39 = v7;
      v40 += 2;
      v42[v40] = 0x800000;
      v13 = v42[v11 - 1];
      v14 = v11 | 1;
      v42[v11 | 1] = v13 - (v12 << 9);
      v15 = v11 >> 1;
      do
      {
        v16 = fxd_S32ShMultRndS32S16(v13, v5[v11], 15);
        v17 = &v9[v10];
        v13 = *v17;
        v17[2] = (((*v17 - 2 * v16) & 0xFFFFFFFE) + v17[2]) & 0xFFFFFFFE;
        --v10;
      }
      while ((uint64_t)(v11 + v10) > v15);
      v18 = v41;
      v19 = v8;
      do
      {
        v20 = *v18++;
        v42[v19] = v20;
        v21 = v19-- <= 1;
      }
      while (!v21);
      v22 = 0;
      v23 = v5[v14];
      v3[v40] = 0x800000;
      LODWORD(result) = v3[v11 - 1];
      v3[v14] = result - (v23 << 9);
      do
      {
        v24 = fxd_S32ShMultRndS32S16(result, v5[v14], 15);
        v25 = &v6[v22];
        result = v25[1];
        v25[3] = (((result - 2 * v24) & 0xFFFFFFFE) + v25[3]) & 0xFFFFFFFE;
        --v22;
      }
      while ((uint64_t)(v11 + v22) > v15);
      v26 = v39;
      v27 = v8;
      do
      {
        v28 = *v26++;
        v3[v27] = v28;
        v21 = v27-- <= 1;
      }
      while (!v21);
      ++v8;
      v9 += 2;
      ++v41;
      v6 += 2;
      v7 = v39 + 1;
    }
    while (v8 != v38);
  }
  v29 = a2;
  if (a3 >= 1)
  {
    v30 = a3;
    v31 = *v3;
    v32 = v42[0];
    v33 = &v43;
    do
    {
      v34 = *(v33 - 1);
      v35 = v33[a3];
      *v29++ = 16 * (v35 + v34 - v31 + v32);
      ++v33;
      v32 = v34;
      v31 = v35;
      --v30;
    }
    while (v30);
  }
  return result;
}

unint64_t fxd_HighPrecisionCosLspToAi__32BIT(unint64_t result, _DWORD *a2, int a3)
{
  int *v3;
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  int *v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int *v42;
  _DWORD v43[2];
  int v44;
  _BYTE v45[172];

  *(_QWORD *)&v45[156] = *MEMORY[0x1E0C80C00];
  v3 = &v43[a3 + 1];
  v3[2] = 0x800000;
  v44 = 0x800000;
  *v3 = 0x800000;
  v4 = *(_DWORD *)(result + 4);
  v5 = -2 * *(_DWORD *)result;
  v43[0] = 0x800000;
  v43[1] = v5;
  v3[1] = -2 * v4;
  if (a3 >= 3)
  {
    v6 = (_DWORD *)result;
    v7 = &v43[a3];
    v39 = ((a3 - 3) >> 1) + 2;
    v8 = v7 + 4;
    v41 = 2;
    v42 = (int *)v45;
    v9 = 1;
    v10 = v43;
    do
    {
      v11 = 0;
      v12 = v41;
      v13 = v6[v41];
      v40 = v8;
      v41 += 2;
      v43[v41] = 0x800000;
      v14 = v43[v12 - 1];
      v15 = v12 | 1;
      v43[v12 | 1] = v14 - 2 * v13;
      v16 = v12 >> 1;
      do
      {
        v17 = fxd_S32ShMultRndS32S32(v14, v6[v12], 23);
        v18 = &v10[v11];
        v14 = *v18;
        v18[2] = (((*v18 - 2 * v17) & 0xFFFFFFFE) + v18[2]) & 0xFFFFFFFE;
        --v11;
      }
      while ((uint64_t)(v12 + v11) > v16);
      v19 = v42;
      v20 = v9;
      do
      {
        v21 = *v19++;
        v43[v20] = v21;
        v22 = v20-- <= 1;
      }
      while (!v22);
      v23 = 0;
      v24 = v6[v15];
      v3[v41] = 0x800000;
      LODWORD(result) = v3[v12 - 1];
      v3[v15] = result - 2 * v24;
      do
      {
        v25 = fxd_S32ShMultRndS32S32(result, v6[v15], 23);
        v26 = &v7[v23];
        result = v26[1];
        v26[3] = (((result - 2 * v25) & 0xFFFFFFFE) + v26[3]) & 0xFFFFFFFE;
        --v23;
      }
      while ((uint64_t)(v12 + v23) > v16);
      v27 = v40;
      v28 = v9;
      do
      {
        v29 = *v27++;
        v3[v28] = v29;
        v22 = v28-- <= 1;
      }
      while (!v22);
      ++v9;
      v10 += 2;
      ++v42;
      v7 += 2;
      v8 = v40 + 1;
    }
    while (v9 != v39);
  }
  v30 = a2;
  if (a3 >= 1)
  {
    v31 = a3;
    v32 = *v3;
    v33 = v43[0];
    v34 = &v44;
    do
    {
      v35 = *(v34 - 1);
      v36 = v34[a3];
      *v30++ = 16 * (v36 + v35 - v32 + v33);
      ++v34;
      v33 = v35;
      v32 = v36;
      --v31;
    }
    while (v31);
  }
  return result;
}

uint64_t fxd_HighPrecisionExpandLpcBandwidth(uint64_t result, _DWORD *a2, int a3, int a4, char a5)
{
  int *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;

  if (a4 >= 1)
  {
    v7 = (int *)result;
    v8 = a4;
    v9 = 15 - a5;
    LOWORD(v10) = a3;
    do
    {
      v11 = *v7++;
      v12 = (__int16)v10;
      result = fxd_S32ShMultRndS32S16(v11, (__int16)v10, v9);
      *a2++ = result;
      v10 = (v12 * a3) >> 15;
      --v8;
    }
    while (v8);
  }
  return result;
}

void fxd_MultiStageVectorDecodeLsp(_DWORD *a1, int a2, _DWORD *a3, uint64_t a4, signed int a5, __int16 *a6)
{
  __int16 *v6;
  int v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  __int16 *v16;
  __int16 v17;
  __int16 *v18;
  uint64_t v19;
  int v20;
  __int16 v21;

  v6 = a6;
  FillZeroLH_S16(a6, a5);
  if (a2 > 1)
  {
    v12 = *a3 * a5;
    v13 = 1;
    do
    {
      if (a5 >= 1)
      {
        v14 = (__int16 *)(a4 + 2 * v12 + 2 * a1[v13] * a5);
        v15 = a5;
        v16 = v6;
        do
        {
          v17 = *v14++;
          *v16++ += v17;
          --v15;
        }
        while (v15);
      }
      v12 += a3[v13++] * a5;
    }
    while (v13 != a2);
  }
  if (a5 >= 1)
  {
    v18 = (__int16 *)(a4 + 2 * *a1 * a5);
    v19 = a5;
    do
    {
      v20 = *v6;
      *v6 >>= 2;
      v21 = *v18++;
      *v6++ = v21 + (v20 >> 2);
      --v19;
    }
    while (v19);
  }
}

void fxd_MultiStageVectorDecodeLsp__32BIT(_DWORD *a1, int a2, _DWORD *a3, uint64_t a4, signed int a5, uint64_t a6, int *a7)
{
  int v14;
  uint64_t v15;
  __int16 *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  __int16 *v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  _BYTE v26[96];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  FillZeroLH_S32(v26, a5);
  if (a2 > 1)
  {
    v14 = *a3 * a5;
    v15 = 1;
    do
    {
      if (a5 >= 1)
      {
        v16 = (__int16 *)(a4 + 2 * v14 + 2 * a1[v15] * a5);
        v17 = 8 - *(_DWORD *)(a6 + 4 * v15);
        v18 = v26;
        v19 = a5;
        do
        {
          v20 = *v16++;
          *v18++ += v20 << v17;
          --v19;
        }
        while (v19);
      }
      v14 += a3[v15++] * a5;
    }
    while (v15 != a2);
  }
  if (a5 >= 1)
  {
    v21 = (__int16 *)(a4 + 2 * *a1 * a5);
    v22 = a5;
    v23 = (int *)v26;
    do
    {
      v24 = *v21++;
      v25 = *v23 + (v24 << 10);
      *v23++ = v25;
      *a7++ = v25;
      --v22;
    }
    while (v22);
  }
}

uint64_t fxd_OrderCheckLsp(__int16 *a1, int a2, int a3)
{
  int v3;
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  __int16 *v8;
  int v9;

  v3 = 0;
  if (a3 == 3)
    v4 = 5;
  else
    v4 = 2;
  do
  {
    if (a2 < 2)
      break;
    v5 = *a1;
    v6 = 1;
    v7 = (a2 - 1);
    v8 = a1 + 1;
    do
    {
      v9 = *v8;
      if (v9 >= v5)
      {
        v5 = *v8;
      }
      else
      {
        v6 = 0;
        *(v8 - 1) = v9;
        *v8 = v5;
      }
      ++v8;
      --v7;
    }
    while (v7);
    if (v6 == 1)
      break;
    ++v3;
  }
  while (v3 != v4);
  return fxd_SmoothLsp(a1, a2, a3);
}

uint64_t fxd_SmoothLsp(__int16 *a1, int a2, int a3)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  __int16 v24;
  __int16 v25;

  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      result = 1;
      break;
    case 3:
      if ((a2 - 14) > 6)
        v4 = 322;
      else
        v4 = dword_1DECCD390[a2 - 14];
      v5 = 0;
      v6 = 2 * v4;
      v7 = (a2 - 1);
      v8 = (int)v7;
      v9 = v7 - 1;
      while (a2 >= 2)
      {
        v10 = 0;
        v11 = (unsigned __int16)*a1;
        v12 = (unsigned __int16 *)(a1 + 1);
        do
        {
          v13 = v10 + 1;
          v14 = (__int16)*v12;
          v15 = *v12;
          if (v4 > (__int16)(*v12 - v11))
          {
            v16 = (v4 - (v14 - v11)) << 16 >> 17;
            if (v10)
            {
              if (v4 <= (__int16)(v11 - a1[(v10 - 1)]))
              {
                v18 = v11 - a1[(v10 - 1)];
                if (v6 > v18)
                  v17 = (__int16)(v18 - v4) >> 1;
                else
                  v17 = (__int16)(v4 - (v14 - v11)) >> 1;
              }
              else
              {
                v17 = 0;
              }
            }
            else if (v4 <= *a1)
            {
              v17 = (__int16)(v4 - (v14 - v11)) >> 1;
            }
            else
            {
              v17 = (__int16)v11 >> 1;
            }
            if (v9 == v10 && 25736 - v4 < v14)
            {
              v16 = (25736 - v15) << 16 >> 17;
            }
            else if (v13 < v8)
            {
              v19 = (__int16)(v12[1] - v15);
              if (v6 > v19)
                v16 = (v19 - v4) << 16 >> 17;
              if (v4 > (__int16)(v12[1] - v15))
                v16 = 0;
            }
            *(v12 - 1) = v11 - v17;
            v15 += v16;
            *v12 = v15;
          }
          ++v12;
          ++v10;
          v11 = v15;
        }
        while (a2 - 1 != v13);
        v20 = *a1;
        v21 = 1;
        v22 = a2 - 1;
        v23 = a1 + 1;
        do
        {
          v25 = *v23++;
          v24 = v25;
          if ((int)((32440 * v4) >> 15) > (__int16)(v25 - v20))
            v21 = 0;
          v20 = v24;
          --v22;
        }
        while (v22);
        if (v21 == 1)
          break;
        if (++v5 == 10)
          return 0;
      }
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

int *fxd_OrderCheckLsp__S32(int *result, int a2)
{
  char v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  char v7;

  v2 = 1;
  do
  {
    if (a2 < 2)
      break;
    v3 = *result;
    v4 = 1;
    v5 = (a2 - 1);
    v6 = result + 1;
    do
    {
      if (v3 <= *v6)
      {
        v3 = *v6;
      }
      else
      {
        v4 = 0;
        *(v6 - 1) = *v6;
        *v6 = v3;
      }
      ++v6;
      --v5;
    }
    while (v5);
    v7 = (v4 != 1) & v2;
    v2 = 0;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t fxd_S16SatAddS16S16(int a1, int a2)
{
  int v2;

  v2 = a1 + a2;
  if (a1 + a2 >= 0x7FFF)
    v2 = 0x7FFF;
  if (v2 <= -32768)
    return 4294934528;
  else
    return v2;
}

uint64_t fxd_S32SatAddS32S32(int a1, int a2)
{
  if (((a2 + a1) ^ a1) > -1 || (a2 ^ a1) < 0)
    return (a2 + a1);
  else
    return (a1 >> 31) ^ 0x7FFFFFFFu;
}

uint64_t fxd_S32ShMultRndS32S32(int a1, int a2, __int16 a3)
{
  int v3;

  v3 = (int)((a2 >> 16) * (unsigned __int16)a1
           + (unsigned __int16)a2 * (a1 >> 16)
           + (((unsigned __int16)a2 * (unsigned __int16)a1 + 0x8000) >> 16)
           + (1 << (a3 - 17))) >> (a3 - 16);
  if (a3 == 16)
    v3 = (a2 >> 16) * (unsigned __int16)a1
       + (unsigned __int16)a2 * (a1 >> 16)
       + (((unsigned __int16)a2 * (unsigned __int16)a1 + 0x8000) >> 16);
  return (v3 + (((a2 >> 16) * (a1 >> 16)) << (32 - a3)));
}

uint64_t fxd_S32ShMultRndS32S16(int a1, int a2, char a3)
{
  return ((((1 << (a3 - 1)) + (unsigned __int16)a1 * a2) >> a3) + (((a1 >> 16) * a2) << (16 - a3)));
}

uint64_t fxd_S16Lookup10Log10S16S16(int a1, uint64_t a2)
{
  int v2;

  if (a1 >> 5 == 1023)
    LOWORD(v2) = 0;
  else
    v2 = *(__int16 *)(a2 + 2 * (a1 >> 5))
       + (((2 * a1 - (a1 >> 5 << 6)) * (*(__int16 *)(a2 + 2 * (a1 >> 5) + 2) - *(__int16 *)(a2 + 2 * (a1 >> 5)))
         + 0x8000) >> 24);
  return (__int16)v2;
}

uint64_t fxd_U16LookupPow10U16U16(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  int v3;

  v2 = a1 >> 5;
  if (a1 >> 5 > 0x400)
    v2 = 1023;
  v3 = *(unsigned __int16 *)(a2 + 2 * v2);
  return (unsigned __int16)(v3 + (((*(unsigned __int16 *)(a2 + 2 * (v2 + 1)) - v3) * (a1 - 32 * v2) + 16) >> 5));
}

uint64_t fxd_DPFExtractS32S16S16(uint64_t result, _WORD *a2, _WORD *a3)
{
  *a2 = WORD1(result);
  *a3 = (unsigned __int16)result >> 1;
  return result;
}

uint64_t fxd_U16SqrtS32(int a1)
{
  unsigned __int16 v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (a1 > 3519)
  {
    if (a1 <= 5119)
    {
      if (a1 == 3520)
        return 59;
      if (a1 == 4096)
        return 64;
    }
    else
    {
      switch(a1)
      {
        case 5120:
          return 72;
        case 5632:
          return 75;
        case 7040:
          return 84;
      }
    }
  }
  else if (a1 <= 2047)
  {
    if (a1 == 1024)
      return 32;
    if (a1 == 1408)
      return 38;
  }
  else
  {
    switch(a1)
    {
      case 2048:
        return 45;
      case 2560:
        return 51;
      case 2816:
        return 53;
    }
  }
  v1 = 0;
  v2 = 0;
  v3 = 0x8000;
  do
  {
    v4 = (unsigned __int16)(v1 + v3) * (unsigned __int16)(v1 + v3);
    if (v4 <= a1)
    {
      v1 += v3;
      if (v4 == a1)
        break;
    }
    v3 >>= 1;
  }
  while (v2++ < 0xF);
  return v1;
}

uint64_t uselect_CreateBrokerString(uint64_t a1, char *a2, size_t a3, char *a4, char *a5, int a6, int a7)
{
  uint64_t Str;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  char v26;
  int v28;
  char *__s;
  const char *v30;
  char *__src;
  char v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  __src = 0;
  __s = 0;
  *a2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceaddon", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (!__s || !*__s)
    goto LABEL_12;
  v15 = strlen(__s);
  v16 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v15 + 19);
  if (!v16)
    return 2229280778;
  v17 = (uint64_t)v16;
  strcpy(v16, "voiceaddonbaseuri.");
  strcat(v16, __s);
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), v17, &__src);
  if ((Str & 0x80000000) != 0)
    return Str;
  heap_Free(*(_QWORD **)(a1 + 8), v17);
  if (__src && *__src)
  {
    Str = strhelper_SafeCat(a2, __src, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    if (a2[strlen(a2) - 1] != 47)
    {
      Str = strhelper_SafeCat(a2, "/", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
    }
    v18 = 1;
    v19 = "_";
  }
  else
  {
LABEL_12:
    v18 = 0;
    v19 = "/";
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &__src);
  if ((Str & 0x80000000) != 0)
    return Str;
  v20 = 2229280778;
  if (!__src)
    return 2229282821;
  v28 = v18;
  v21 = strlen(__src);
  v22 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v21 + 1);
  if (v22)
  {
    v23 = v22;
    v24 = strcpy(v22, __src);
    vf_MakeLower(v24);
    if (__s && *__s)
    {
      Str = strhelper_SafeCat(a2, "uselectvao", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v19, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v23, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v19, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, __s, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v19, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, "vao", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
      v25 = 0;
    }
    else
    {
      Str = strhelper_SafeCat(a2, "uselect", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v19, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v23, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      if (a4)
        strcpy(a4, __src);
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
      Str = strhelper_SafeCat(a2, v19, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      v25 = 1;
    }
    if (a6 != 1
      || (Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &__src), (Str & 0x80000000) == 0)
      && (Str = strhelper_SafeCat(a2, __src, 0xFFFFFFFFFFFFFFFFLL, a3), (Str & 0x80000000) == 0)
      && (Str = strhelper_SafeCat(a2, v19, 0xFFFFFFFFFFFFFFFFLL, a3), (Str & 0x80000000) == 0))
    {
      if (v25)
      {
        Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"reduction", &__src);
        if ((Str & 0x80000000) != 0)
          return Str;
        Str = strhelper_SafeCat(a2, __src, 0xFFFFFFFFFFFFFFFFLL, a3);
        if ((Str & 0x80000000) != 0)
          return Str;
        if (a5)
          strcpy(a5, __src);
      }
      else if (a5)
      {
        *(_DWORD *)a5 = 7299446;
      }
      if (!v28 || (Str = strhelper_SafeCat(a2, ".dat", 0xFFFFFFFFFFFFFFFFLL, a3), (Str & 0x80000000) == 0))
      {
        v20 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &__src);
        if ((v20 & 0x80000000) != 0)
          return v20;
        if (a7)
          v26 = 1;
        else
          v26 = v28;
        if ((v26 & 1) == 0 && __src)
        {
          if (*__src)
          {
            Str = brokeraux_ComposeBrokerString(a1, a2, 0, 0, 0, 0, 0, v32, a3);
            if ((Str & 0x80000000) == 0)
            {
              *a2 = 0;
              return strhelper_SafeCat(a2, v32, 0xFFFFFFFFFFFFFFFFLL, a3);
            }
            return Str;
          }
          return v20;
        }
        if (!a7 || !cupreader_IsCupInTheScope(a1, &v30))
          return v20;
        return cupreader_PrependCupName(a2, v30, a3);
      }
    }
    return Str;
  }
  return v20;
}

uint64_t uselect_ObjcVoiceOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  _WORD *v22;
  int v23;
  _WORD *v24;
  unsigned __int16 *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int16 v36;
  char *v37;
  int v38;
  unsigned __int8 v39;
  char *v40;
  unsigned __int8 *v41;
  int v42;
  _BYTE *v43;
  BOOL v44;
  BOOL v45;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD __dst[26];
  void *__src;
  int v61;
  _QWORD *v62;
  int *v63;
  _BYTE *v64;
  uint64_t *v65;
  __int128 v66;
  __int128 v67;
  char v68[64];
  char v69[64];
  char v70[256];
  _OWORD v71[5];
  uint64_t v72;

  v7 = a2;
  v72 = *MEMORY[0x1E0C80C00];
  __src = 0;
  memset(__dst, 0, 408);
  inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0)
    return inited;
  memcpy(__dst, __src, 0x198uLL);
  __dst[2] = *(_OWORD *)(a5 + 32);
  v62 = 0;
  v61 = 0;
  v70[0] = 0;
  v69[0] = 0;
  v68[0] = 0;
  if ((uselect_CreateBrokerString((uint64_t)__dst, v70, 0x100uLL, v69, v68, 1, 0) & 0x80000000) != 0)
    goto LABEL_5;
  v10 = uselect_CheckForDataFile(a1, v7, v70, &v61);
  if ((v10 & 0x80001FFF) == 0x8000000A)
    return v10;
  if (!v61)
  {
LABEL_5:
    inited = uselect_CreateBrokerString((uint64_t)__dst, v70, 0x100uLL, v69, v68, 0, 0);
    if ((inited & 0x80000000) != 0)
      return inited;
    v10 = uselect_CheckForDataFile(a1, v7, v70, &v61);
    if ((v10 & 0x80001FFF) == 0x8000000A)
      return v10;
    if (!v61)
    {
      if ((uselect_CreateBrokerString((uint64_t)__dst, v70, 0x100uLL, v69, v68, 0, 1) & 0x80000000) != 0)
        goto LABEL_102;
      v10 = uselect_CheckForDataFile(a1, v7, v70, &v61);
      if ((v10 & 0x80001FFF) == 0x8000000A)
        return v10;
      if (!v61)
      {
LABEL_102:
        v18 = 0;
        v10 = 2229280788;
        goto LABEL_109;
      }
    }
  }
  inited = ssftriff_reader_ObjOpen(a1, v7, 0, v70, "USEL", 1031, (uint64_t *)&v62);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = 2229280769;
  v18 = heap_Calloc(*((_QWORD **)&__dst[0] + 1), 1, 28400);
  if (!v18)
    goto LABEL_98;
  __strcpy_chk();
  __strcpy_chk();
  __strcpy_chk();
  *(_QWORD *)&v19 = -1;
  *((_QWORD *)&v19 + 1) = -1;
  *(_OWORD *)(v18 + 2144) = v19;
  *(_OWORD *)(v18 + 2160) = v19;
  *(_OWORD *)(v18 + 2176) = v19;
  *(_OWORD *)(v18 + 2192) = v19;
  *(_OWORD *)(v18 + 2208) = v19;
  *(_OWORD *)(v18 + 2224) = v19;
  *(_OWORD *)(v18 + 2240) = v19;
  *(_OWORD *)(v18 + 2256) = v19;
  *(_OWORD *)(v18 + 2272) = v19;
  *(_OWORD *)(v18 + 2288) = v19;
  *(_OWORD *)(v18 + 2304) = v19;
  *(_OWORD *)(v18 + 2320) = v19;
  *(_OWORD *)(v18 + 2336) = v19;
  *(_OWORD *)(v18 + 2352) = v19;
  *(_OWORD *)(v18 + 2368) = v19;
  *(_OWORD *)(v18 + 2384) = v19;
  *(_OWORD *)(v18 + 3048) = v19;
  *(_OWORD *)(v18 + 3064) = v19;
  *(_OWORD *)(v18 + 3080) = v19;
  *(_OWORD *)(v18 + 3096) = v19;
  *(_OWORD *)(v18 + 3112) = v19;
  *(_OWORD *)(v18 + 3128) = v19;
  *(_OWORD *)(v18 + 3144) = v19;
  *(_OWORD *)(v18 + 3160) = v19;
  *(_OWORD *)(v18 + 3176) = v19;
  *(_OWORD *)(v18 + 3192) = v19;
  *(_OWORD *)(v18 + 3208) = v19;
  *(_OWORD *)(v18 + 3224) = v19;
  *(_OWORD *)(v18 + 3240) = v19;
  *(_OWORD *)(v18 + 3256) = v19;
  *(_OWORD *)(v18 + 3272) = v19;
  *(_OWORD *)(v18 + 3288) = v19;
  *(_OWORD *)(v18 + 3304) = v19;
  *(_OWORD *)(v18 + 3316) = v19;
  *(_OWORD *)(v18 + 3392) = v19;
  *(_OWORD *)(v18 + 3376) = v19;
  *(_OWORD *)(v18 + 2400) = 0u;
  *(_OWORD *)(v18 + 2416) = 0u;
  *(_OWORD *)(v18 + 2432) = 0u;
  *(_OWORD *)(v18 + 2448) = 0u;
  *(_OWORD *)(v18 + 2748) = 0u;
  *(_OWORD *)(v18 + 2764) = 0u;
  *(_OWORD *)(v18 + 2780) = 0u;
  *(_OWORD *)(v18 + 2796) = 0u;
  *(_OWORD *)(v18 + 2812) = 0u;
  *(_OWORD *)(v18 + 2828) = 0u;
  *(_OWORD *)(v18 + 2844) = 0u;
  *(_OWORD *)(v18 + 2860) = 0u;
  *(_OWORD *)(v18 + 2876) = 0u;
  *(_OWORD *)(v18 + 2892) = 0u;
  *(_OWORD *)(v18 + 2908) = 0u;
  *(_OWORD *)(v18 + 2924) = 0u;
  *(_OWORD *)(v18 + 2940) = 0u;
  *(_OWORD *)(v18 + 2950) = 0u;
  *(_QWORD *)(v18 + 28168) = uselect_CartLookup;
  *(_WORD *)(v18 + 3578) = 2;
  v20 = (_QWORD *)heap_Calloc(*((_QWORD **)&__dst[0] + 1), 1, 280);
  *(_QWORD *)(v18 + 3552) = v20;
  if (!v20)
  {
LABEL_98:
    v10 = 2229280778;
    goto LABEL_109;
  }
  *v20 = v18;
  memset(v71, 0, sizeof(v71));
  v21 = uselect_ParseRiff((uint64_t *)__dst, (uint64_t)v62, v18, 0, (const char *)v71, 0, 0, 0);
  if ((v21 & 0x80000000) != 0)
  {
    v47 = v21;
    LOBYTE(v66) = 0;
    if (LOBYTE(v71[0]))
    {
      v48 = 0;
      do
      {
        __strcat_chk();
        __strcat_chk();
        ++v48;
      }
      while (*((_BYTE *)v71 + 5 * (unsigned __int16)v48));
    }
    log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"USELECT", 19000, "%s%s%s%s%s%x", v14, v15, v16, v17, "file");
    v10 = v47;
  }
  else
  {
    v50 = v7;
    v51 = a4;
    v65 = 0;
    v64 = 0;
    v63 = 0;
    v22 = (_WORD *)(v18 + 3440);
    v23 = 1;
LABEL_13:
    v24 = v22;
    v26 = (uint64_t *)(v18 + 3448);
    v25 = (unsigned __int16 *)(v18 + 3442);
    switch(v23)
    {
      case 1:
        goto LABEL_17;
      case 2:
        v25 = (unsigned __int16 *)(v18 + 3474);
        v24 = (_WORD *)(v18 + 3472);
        v26 = (uint64_t *)(v18 + 3480);
        goto LABEL_17;
      case 3:
        v25 = (unsigned __int16 *)(v18 + 3490);
        v24 = (_WORD *)(v18 + 3488);
        v26 = (uint64_t *)(v18 + 3496);
        goto LABEL_17;
      case 4:
        v25 = (unsigned __int16 *)(v18 + 3506);
        v24 = (_WORD *)(v18 + 3504);
        v26 = (uint64_t *)(v18 + 3512);
LABEL_17:
        v53 = (unsigned __int16)*v24;
        if (!*v24)
          goto LABEL_51;
        v27 = 0;
        v58 = *v26;
        v54 = *v25;
        v52 = v23;
        break;
      default:
        goto LABEL_108;
    }
LABEL_19:
    v28 = uselect_AddGenericContextRule((uint64_t)__dst, v18, (uint64_t)&v65);
    if ((v28 & 0x80000000) == 0)
    {
      v56 = v65;
      v28 = uselect_AddGCRAction((uint64_t)__dst, (uint64_t)v65, (uint64_t *)&v63);
      if ((v28 & 0x80000000) == 0)
      {
        v29 = v63;
        *v63 = v23;
        v57 = v27 * v54;
        v30 = v27 * v54 + v54;
        *((_BYTE *)v29 + 4) = *(_BYTE *)(v58 + v30 - 2);
        v31 = *(unsigned __int8 *)(v58 + v30 - 1);
        v29[2] = v31;
        if (v23 != 4)
        {
          if (v31)
          {
            if (v31 == 1)
              v32 = 0;
            else
              v32 = 10 * v31;
          }
          else
          {
            v32 = 10;
          }
          v29[2] = v32;
        }
        v55 = v27;
        v33 = 0;
        if (*(int *)(v18 + 3092) < 0)
          v34 = 4;
        else
          v34 = 6;
        while (1)
        {
          v66 = 0u;
          v67 = 0u;
          if ((v33 & 0x7FFFFFFE) == 4)
          {
            v35 = *(_QWORD **)(v18 + 2464);
            if (*v35)
            {
              v36 = 0;
              v37 = *(char **)(*(_QWORD *)(v18 + 3432) + 8 * *(unsigned __int8 *)(v58 + v33 + v57));
              v38 = 1;
              do
              {
                if (strchr(v37, (char)v36 + 48))
                  *((_BYTE *)&v66 + (v36 >> 3)) |= 1 << (v36 & 7);
                else
                  v38 = 0;
                ++v36;
              }
              while (v35[v36]);
              goto LABEL_45;
            }
          }
          else
          {
            v39 = *(_BYTE *)(v18 + 602);
            if (v39)
            {
              v40 = *(char **)(*(_QWORD *)(v18 + 3424) + 8 * *(unsigned __int8 *)(v58 + v33 + v57));
              v38 = 1;
              v41 = (unsigned __int8 *)(v18 + 603);
              do
              {
                if (strchr(v40, (char)v39))
                  *((_BYTE *)&v66 + (v39 >> 3)) |= 1 << (v39 & 7);
                else
                  v38 = 0;
                v42 = *v41++;
                v39 = v42;
              }
              while (v42);
LABEL_45:
              if (!v38)
              {
                v28 = uselect_AddGCRCondition((uint64_t)__dst, v56, (uint64_t *)&v64);
                if ((v28 & 0x80000000) != 0)
                  break;
                v43 = v64;
                *v64 = 0;
                *(_OWORD *)(v43 + 3) = v66;
                *(_OWORD *)(v43 + 19) = v67;
                if (v33 > 5)
                  goto LABEL_108;
                v43[1] = 0x1D1D02020202uLL >> (8 * v33);
                v43[2] = 0x10002FF0100uLL >> (8 * v33);
              }
            }
          }
          if (++v33 == v34)
          {
            v27 = v55 + 1;
            v23 = v52;
            if (v55 + 1 == v53)
            {
LABEL_51:
              ++v23;
              v22 = (_WORD *)(v18 + 3440);
              if (v23 == 5)
              {
                *(_DWORD *)(v18 + 2748) = 33620225;
                *(_WORD *)(v18 + 2752) = 513;
                *(_BYTE *)(v18 + 2777) = 1;
                *(_QWORD *)(v18 + 2755) = 0x101010101010101;
                *(_QWORD *)(v18 + 2763) = 0x101010101010101;
                if ((*(_DWORD *)(v18 + 3220) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2919) = 1;
                LODWORD(v7) = v50;
                a4 = v51;
                if ((*(_DWORD *)(v18 + 3224) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2920) = 1;
                if ((*(_DWORD *)(v18 + 3212) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2824) = 1;
                if ((*(_DWORD *)(v18 + 3168) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2813) = 1;
                if ((*(_DWORD *)(v18 + 3172) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2814) = 1;
                if ((*(_DWORD *)(v18 + 3176) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2815) = 1;
                if ((*(_DWORD *)(v18 + 3180) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2816) = 1;
                if ((*(_DWORD *)(v18 + 3184) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2817) = 1;
                if ((*(_DWORD *)(v18 + 3188) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2818) = 1;
                if ((*(_DWORD *)(v18 + 3192) & 0x80000000) == 0)
                {
                  *(_BYTE *)(v18 + 2819) = 1;
                  *(_BYTE *)(v18 + 2825) = 1;
                }
                if ((*(_DWORD *)(v18 + 3196) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2820) = 1;
                if ((*(_DWORD *)(v18 + 3200) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2821) = 1;
                if ((*(_DWORD *)(v18 + 3204) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2822) = 1;
                *(_BYTE *)(v18 + 2804) = -1;
                *(_DWORD *)(v18 + 2799) = -1;
                if (*(_DWORD *)(v18 + 2684))
                  *(_WORD *)(v18 + 2958) = 257;
                if (*(_DWORD *)(v18 + 2516))
                  *(_BYTE *)(v18 + 2803) = 1;
                if ((*(_DWORD *)(v18 + 3104) & 0x80000000) == 0)
                {
                  *(_WORD *)(v18 + 2779) = 257;
                  if ((*(_DWORD *)(v18 + 3208) & 0x80000000) == 0)
                    *(_BYTE *)(v18 + 2823) = 1;
                }
                if ((*(_DWORD *)(v18 + 3120) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2781) = 1;
                if ((*(_DWORD *)(v18 + 3068) & 0x80000000) == 0)
                {
                  *(_WORD *)(v18 + 2773) = 257;
                  v44 = *(_DWORD *)(v18 + 2736) != 0;
                  *(_BYTE *)(v18 + 2960) = v44;
                  *(_BYTE *)(v18 + 2961) = v44;
                }
                *(_BYTE *)(v18 + 2964) = *(_DWORD *)(v18 + 3324) >= 0;
                *(_BYTE *)(v18 + 2965) = *(_DWORD *)(v18 + 3328) >= 0;
                if ((*(_DWORD *)(v18 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v18 + 3396) & 0x80000000) == 0)
                  *(_BYTE *)(v18 + 2772) = 8;
                if ((*(_DWORD *)(v18 + 3072) & 0x80000000) == 0)
                {
                  *(_WORD *)(v18 + 2775) = 257;
                  v45 = *(_DWORD *)(v18 + 2740) != 0;
                  *(_BYTE *)(v18 + 2962) = v45;
                  *(_BYTE *)(v18 + 2963) = v45;
                }
                v10 = 0;
                if (*(_DWORD *)(v18 + 2560))
                  *(_BYTE *)(v18 + 2794) = 9;
                goto LABEL_109;
              }
              goto LABEL_13;
            }
            goto LABEL_19;
          }
        }
      }
    }
    v10 = v28;
LABEL_108:
    LODWORD(v7) = v50;
    a4 = v51;
  }
LABEL_109:
  if (v62)
  {
    ssftriff_reader_ObjClose(v62, v11, v12, v13, v14, v15, v16, v17);
    v62 = 0;
  }
  if ((v10 & 0x80000000) != 0)
  {
    if ((v10 & 0x1FFF) == 0xA)
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"USELECT", 19000, 0, v14, v15, v16, v17, v49);
    uselect_VoiceClose(a1, v7, v18);
    v18 = 0;
  }
  *(_QWORD *)(a4 + 32) = v18;
  return v10;
}

uint64_t uselect_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  return uselect_VoiceClose(a1, a2, *(_QWORD *)(a3 + 32));
}

uint64_t uselect_VoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v53;

  v53 = 0;
  if (!a3)
    return 0;
  inited = InitRsrcFunction(a1, a2, &v53);
  if ((inited & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a3 + 28232);
    if (v5)
      heap_Free((_QWORD *)v53[1], v5);
    v6 = *(_QWORD *)(a3 + 28160);
    if (v6)
      heap_Free((_QWORD *)v53[1], v6);
    v7 = *(_QWORD *)(a3 + 3512);
    if (v7)
    {
      heap_Free((_QWORD *)v53[1], v7);
      *(_QWORD *)(a3 + 3512) = 0;
    }
    v8 = *(_QWORD *)(a3 + 3448);
    if (v8)
    {
      heap_Free((_QWORD *)v53[1], v8);
      *(_QWORD *)(a3 + 3448) = 0;
    }
    v9 = *(_QWORD *)(a3 + 3480);
    if (v9)
    {
      heap_Free((_QWORD *)v53[1], v9);
      *(_QWORD *)(a3 + 3480) = 0;
    }
    v10 = *(_QWORD *)(a3 + 3496);
    if (v10)
    {
      heap_Free((_QWORD *)v53[1], v10);
      *(_QWORD *)(a3 + 3496) = 0;
    }
    v11 = *(uint64_t **)(a3 + 3520);
    if (v11)
    {
      v12 = v53;
      do
      {
        v13 = v11;
        v11 = (uint64_t *)v11[2];
        v14 = *v13;
        if (*v13)
        {
          do
          {
            v15 = *(_QWORD *)(v14 + 40);
            heap_Free((_QWORD *)v12[1], v14);
            v14 = v15;
          }
          while (v15);
          v13 = *(uint64_t **)(a3 + 3520);
        }
        v16 = v13[1];
        if (v16)
        {
          do
          {
            v17 = *(_QWORD *)(v16 + 16);
            heap_Free((_QWORD *)v12[1], v16);
            v16 = v17;
          }
          while (v17);
          v13 = *(uint64_t **)(a3 + 3520);
        }
        heap_Free((_QWORD *)v12[1], (uint64_t)v13);
        *(_QWORD *)(a3 + 3520) = v11;
      }
      while (v11);
    }
    v18 = *(_QWORD *)(a3 + 3416);
    if (v18)
    {
      v19 = *(_WORD *)(a3 + 3408);
      if (v19)
      {
        do
        {
          *(_WORD *)(a3 + 3408) = --v19;
          v20 = *(_QWORD *)(a3 + 3416);
          v21 = v20 + 24 * v19;
          v24 = *(_QWORD *)(v21 + 8);
          v23 = (_QWORD *)(v21 + 8);
          v22 = v24;
          if (v24)
          {
            heap_Free((_QWORD *)v53[1], v22);
            *v23 = 0;
            v20 = *(_QWORD *)(a3 + 3416);
            v19 = *(_WORD *)(a3 + 3408);
          }
          v25 = *(_QWORD *)(v20 + 24 * v19 + 16);
          if (v25)
          {
            heap_Free((_QWORD *)v53[1], v25);
            v19 = *(_WORD *)(a3 + 3408);
          }
        }
        while (v19);
        v18 = *(_QWORD *)(a3 + 3416);
      }
      heap_Free((_QWORD *)v53[1], v18);
    }
    v26 = v53;
    v27 = *(uint64_t **)(a3 + 3336);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        v29 = 0;
        do
        {
          heap_Free((_QWORD *)v26[1], v28);
          ++v29;
          v27 = *(uint64_t **)(a3 + 3336);
          v28 = v27[(unsigned __int16)v29];
        }
        while (v28);
      }
      heap_Free((_QWORD *)v26[1], (uint64_t)v27);
      *(_QWORD *)(a3 + 3336) = 0;
    }
    v30 = *(uint64_t ***)(a3 + 3344);
    if (v30)
    {
      v31 = *v30;
      if (*v30)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = *v31;
          if (*v31)
          {
            v35 = 0;
            do
            {
              heap_Free((_QWORD *)v26[1], v34);
              ++v35;
              v31 = *(uint64_t **)(*(_QWORD *)(a3 + 3344) + 8 * v32);
              v34 = v31[(unsigned __int16)v35];
            }
            while (v34);
          }
          heap_Free((_QWORD *)v26[1], (uint64_t)v31);
          ++v33;
          v30 = *(uint64_t ***)(a3 + 3344);
          v32 = (unsigned __int16)v33;
          v31 = v30[(unsigned __int16)v33];
        }
        while (v31);
      }
      heap_Free((_QWORD *)v26[1], (uint64_t)v30);
      *(_QWORD *)(a3 + 3344) = 0;
    }
    v36 = *(uint64_t **)(a3 + 3352);
    if (v36)
    {
      v37 = *v36;
      if (*v36)
      {
        v38 = 0;
        do
        {
          heap_Free((_QWORD *)v26[1], v37);
          ++v38;
          v36 = *(uint64_t **)(a3 + 3352);
          v37 = v36[(unsigned __int16)v38];
        }
        while (v37);
      }
      heap_Free((_QWORD *)v26[1], (uint64_t)v36);
      *(_QWORD *)(a3 + 3352) = 0;
    }
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 3432));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 3424));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 2464));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28248));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28240));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28264));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28256));
    v45 = *(_QWORD *)(a3 + 2968);
    if (v45)
      heap_Free((_QWORD *)v53[1], v45);
    v46 = *(_QWORD *)(a3 + 3368);
    if (v46)
      heap_Free((_QWORD *)v53[1], v46);
    if (*(_WORD *)(a3 + 600))
    {
      v47 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a3 + 408 + 8 * v47++), v46, v39, v40, v41, v42, v43, v44);
      while (v47 < *(unsigned __int16 *)(a3 + 600));
    }
    *(_WORD *)(a3 + 600) = 0;
    v48 = v53;
    v49 = *(_QWORD *)(a3 + 3552);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 152);
      if (v50)
        heap_Free((_QWORD *)v53[1], v50);
      if (*(_WORD *)(v49 + 104))
      {
        v51 = 0;
        do
          ssftriff_reader_ReleaseChunkData(*(_QWORD **)(v49 + 8 + 8 * v51++), v50, v39, v40, v41, v42, v43, v44);
        while (v51 < *(unsigned __int16 *)(v49 + 104));
      }
      heap_Free((_QWORD *)v48[1], v49);
      v48 = v53;
    }
    *(_QWORD *)(a3 + 3552) = 0;
    heap_Free((_QWORD *)v48[1], a3);
  }
  return inited;
}

uint64_t uselect_CheckForDataFile(_WORD *a1, uint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v15 = 0;
  *a4 = 0;
  v12 = ssftriff_reader_ObjOpen(a1, a2, 2, a3, "USEL", 1031, (uint64_t *)&v15);
  v13 = v15;
  if ((v12 & 0x80000000) == 0 && v15)
  {
    *a4 = 1;
LABEL_5:
    ssftriff_reader_ObjClose(v13, v5, v6, v7, v8, v9, v10, v11);
    return v12;
  }
  if (v15)
    goto LABEL_5;
  return v12;
}

uint64_t uselect_ParseRiff(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v14;
  uint64_t ChunkData;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int RiffStringTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  size_t v73;
  int v74;
  unsigned __int8 *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned __int16 v86;
  uint64_t v88;
  unsigned __int16 *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  _BYTE *v105;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unsigned __int16 *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int16 *v128;
  int v129;
  _DWORD *v130;
  void *v131;
  _DWORD *v132;
  int SubChunkInfo;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  int v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  _WORD *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t Position;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  void *v169;
  int v170;
  unsigned int v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  _BYTE *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t *v185;
  _BYTE *v186;
  uint64_t *v187;
  unsigned int v188;
  uint64_t *v189;
  _BYTE *v190;
  _BYTE *v191;
  unsigned int v192;
  _BYTE *v193;
  uint64_t *v194;
  _BYTE *v195;
  void *__dst;
  uint64_t v197;
  unsigned int v198;
  char *__s1;
  char *v200;
  char *__s;
  unsigned int v203;
  int v204[2];
  unsigned int v205;
  int v206;
  char __src[4];
  unsigned __int8 v208;
  unsigned int __n;
  unsigned int __n_4;
  __int128 v211;
  unsigned __int8 v212;
  uint64_t v213;

  v203 = a7;
  v8 = a6;
  v198 = 0;
  v188 = 0;
  v192 = 0;
  v213 = *MEMORY[0x1E0C80C00];
  __n = 0;
  v208 = 0;
  *(_DWORD *)__src = 0;
  v14 = (char *)&a5[5 * a4];
  v187 = (uint64_t *)(a3 + 3040);
  v189 = (uint64_t *)(a3 + 3032);
  v184 = (uint64_t *)(a3 + 3016);
  v185 = (uint64_t *)(a3 + 3024);
  v182 = (uint64_t *)(a3 + 3000);
  v183 = (uint64_t *)(a3 + 3008);
  v180 = (uint64_t *)(a3 + 2984);
  v181 = (uint64_t *)(a3 + 2992);
  v194 = (uint64_t *)(a3 + 2976);
  v174 = (uint64_t *)(a3 + 28264);
  v175 = (uint64_t *)(a3 + 28256);
  v176 = (uint64_t *)(a3 + 28248);
  v177 = (uint64_t *)(a3 + 28240);
  v178 = (uint64_t *)(a3 + 2464);
  v179 = (_BYTE *)(a3 + 2400);
  v186 = (_BYTE *)(a3 + 1887);
  v190 = (_BYTE *)(a3 + 1373);
  v191 = (_BYTE *)(a3 + 1630);
  v193 = (_BYTE *)(a3 + 1116);
  v195 = (_BYTE *)(a3 + 859);
  __dst = (void *)(a3 + 2500);
  v197 = a3 + 192 * a8;
  __s = (char *)(a3 + 602);
  __s1 = (char *)(a5 + 5);
  v200 = v14;
  while (1)
  {
    v206 = 1;
    LODWORD(ChunkData) = ssftriff_reader_OpenChunk(a2, __src, &__n, 0, (uint64_t)a5, a6, a7, a8);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_343;
    strcpy(v14, __src);
    if (a4 == 1)
      break;
    if (a4)
    {
      if (strcmp(__s1, "CTXT"))
        goto LABEL_40;
      *(_QWORD *)&v211 = 0;
      if (*(_DWORD *)__src ^ 0x4C4C204C | v208)
      {
        if (!(*(_DWORD *)__src ^ 0x204C204C | v208))
        {
          v59 = 0;
          v70 = 0;
          goto LABEL_264;
        }
        if (!(*(_DWORD *)__src ^ 0x2052204C | v208))
        {
          v59 = 0;
          goto LABEL_151;
        }
        if (!(*(_DWORD *)__src ^ 0x5252204C | v208))
        {
          v59 = 0;
LABEL_163:
          v70 = 3;
          goto LABEL_264;
        }
        if (*(_DWORD *)__src ^ 0x4C4C2052 | v208)
        {
          if (*(_DWORD *)__src ^ 0x204C2052 | v208)
          {
            if (*(_DWORD *)__src ^ 0x20522052 | v208)
            {
              if (!(*(_DWORD *)__src ^ 0x52522052 | v208))
              {
                v59 = 1;
                goto LABEL_163;
              }
LABEL_275:
              if ((ChunkData & 0x1FFF) == 0x14)
                LODWORD(ChunkData) = 0;
              goto LABEL_314;
            }
            v59 = 1;
LABEL_151:
            v70 = 1;
          }
          else
          {
            v70 = 0;
            v59 = 1;
          }
LABEL_264:
          SubChunkInfo = uselect_GetSubChunkInfo(a2, a6, v203, __src, &__n, &v211, v57, v58);
          if (SubChunkInfo < 0)
          {
            LODWORD(ChunkData) = SubChunkInfo;
            v8 = a6;
          }
          else
          {
            v136 = v197 + 96 * v59 + 24 * v70;
            v137 = (_QWORD *)(v136 + 3600);
            v138 = (_QWORD *)(v136 + 3584);
            v139 = (_QWORD *)(v136 + 3592);
            do
            {
              if (*(_DWORD *)__src ^ 0x4C424154 | v208)
              {
                if (*(_DWORD *)__src ^ 0x20584449 | v208)
                {
                  if (!(*(_DWORD *)__src ^ 0x32584449 | v208))
                    *v137 = v211;
                }
                else
                {
                  *v139 = v211;
                }
              }
              else
              {
                *v138 = v211;
              }
              v140 = uselect_GetSubChunkInfo(a2, a6, v203, __src, &__n, &v211, v134, v135);
            }
            while ((v140 & 0x80000000) == 0);
            LODWORD(ChunkData) = v140;
            v8 = a6;
            v14 = v200;
          }
          goto LABEL_275;
        }
        v59 = 1;
      }
      else
      {
        v59 = 0;
      }
      v70 = 2;
      goto LABEL_264;
    }
    if (!(*(_DWORD *)__src ^ 0x464E4956 | v208))
    {
      v205 = 0;
      *(_QWORD *)v204 = 0;
      if (v8)
      {
        *(_QWORD *)v204 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, v204, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      v64 = __n;
      if (__n)
      {
        v65 = 0;
        do
        {
          LOBYTE(__n_4) = 0;
          LOBYTE(v211) = 0;
          v205 = 256;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v204, v64, v65, &v211, &v205);
          if ((ChunkData & 0x80000000) == 0 && v65 < __n)
          {
            v65 += v205;
            v205 = 256;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v204, __n, v65, &__n_4, &v205);
          }
          if ((ChunkData & 0x80000000) != 0)
            break;
          v69 = v205;
          if ((_QWORD)v211 == 0x6E6F6973726556
            || !((unint64_t)v211 ^ 0x6F69746375646552 | *((_QWORD *)&v211 + 1) ^ 0x6E6F69737265566ELL | v212))
          {
            __strcpy_chk();
          }
          v65 += v69;
          log_OutText(a1[4], (uint64_t)"USELECT", 3, 0, (uint64_t)"Voice attribute %s=%s", v66, v67, v68, (uint64_t)&v211);
          v64 = __n;
        }
        while (v65 < __n);
      }
      goto LABEL_199;
    }
    if (!(*(_DWORD *)__src ^ 0x54415453 | v208))
    {
      v205 = 0;
      *(_QWORD *)v204 = 0;
      if (v8)
      {
        *(_QWORD *)v204 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, v204, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      v90 = __n;
      if (__n)
      {
        v91 = 0;
        do
        {
          LOBYTE(__n_4) = 0;
          LOBYTE(v211) = 0;
          v205 = 64;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v204, v90, v91, &v211, &v205);
          if ((ChunkData & 0x80000000) == 0 && v91 < __n)
          {
            v91 += v205;
            v205 = 64;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v204, __n, v91, &__n_4, &v205);
          }
          if ((ChunkData & 0x80000000) != 0)
            break;
          v95 = v205;
          if ((_QWORD)v211 == 0x637469703A353970 && WORD4(v211) == 104)
          {
            v100 = atoi((const char *)&__n_4);
            v101 = v100 >= 255 ? 255 : v100;
            *(_BYTE *)(a3 + 2499) = v101 & ~(v101 >> 31);
          }
          else if ((_QWORD)v211 == 0x64676F6C3A353970 && *(_QWORD *)((char *)&v211 + 3) == 0x727564676F6C3ALL)
          {
            v98 = atoi((const char *)&__n_4);
            if (v98 >= 255)
              v99 = 255;
            else
              v99 = v98;
            *(_BYTE *)(a3 + 2498) = v99 & ~(v99 >> 31);
          }
          v91 += v95;
          log_OutText(a1[4], (uint64_t)"USELECT", 3, 0, (uint64_t)"Statistics %s=%s", v92, v93, v94, (uint64_t)&v211);
          v90 = __n;
        }
        while (v91 < __n);
      }
      goto LABEL_199;
    }
    if (!(*(_DWORD *)__src ^ 0x54414356 | v208))
    {
      if (v8)
      {
        ssftriff_reader_GetPosition(a2);
      }
      else
      {
        *(_QWORD *)&v211 = 0;
        v108 = ssftriff_reader_GetChunkData(a2, __n, &v211, v16, v17, v18, v19, v20);
        if ((v108 & 0x80000000) != 0)
          return v108;
      }
      goto LABEL_312;
    }
    if (!(*(_DWORD *)__src ^ 0x504F4256 | v208))
    {
      *(_QWORD *)&v211 = 0;
      __n_4 = 0;
      if (v8)
      {
        *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      if (__n >= 0xF9)
        goto LABEL_347;
      memcpy(__dst, (const void *)v211, __n);
      if ((paramc_ParamGetUInt(a1[5], (uint64_t)"uselectmaxcandspruning", &__n_4) & 0x80000000) == 0 && __n_4)
        *(_DWORD *)(a3 + 2552) = __n_4;
      if (__n <= 0x8F)
      {
        *(_DWORD *)(a3 + 2640) = 400000;
        goto LABEL_172;
      }
      if (__n <= 0xC3)
      {
LABEL_172:
        *(_DWORD *)(a3 + 2692) = 0;
        goto LABEL_173;
      }
      if (__n <= 0xC7)
      {
LABEL_173:
        *(_DWORD *)(a3 + 2696) = 0;
      }
      else if (__n > 0xCB)
      {
        if (__n > 0xCF)
        {
          if (__n > 0xD3)
          {
            if (__n > 0xD7)
            {
              if (__n > 0xDB)
              {
                if (__n > 0xDF)
                {
                  if (__n > 0xE3)
                  {
                    if (__n > 0xE7)
                    {
                      if (__n > 0xEB)
                      {
                        if (__n > 0xEF)
                        {
                          if (__n > 0xF3)
                          {
                            if (__n > 0xF7)
                              goto LABEL_186;
                            goto LABEL_185;
                          }
LABEL_184:
                          *(_DWORD *)(a3 + 2740) = 0;
LABEL_185:
                          *(_DWORD *)(a3 + 2744) = 0;
LABEL_186:
                          if (!*(_DWORD *)(a3 + 2672)
                            && !*(_DWORD *)(a3 + 2676)
                            && !*(_DWORD *)(a3 + 2664)
                            && !*(_DWORD *)(a3 + 2652))
                          {
                            *(_QWORD *)(a3 + 2672) = -1;
                          }
                          goto LABEL_314;
                        }
LABEL_183:
                        *(_DWORD *)(a3 + 2736) = 0;
                        goto LABEL_184;
                      }
LABEL_182:
                      *(_DWORD *)(a3 + 2732) = 0;
                      goto LABEL_183;
                    }
LABEL_181:
                    *(_DWORD *)(a3 + 2728) = 2;
                    goto LABEL_182;
                  }
LABEL_180:
                  *(_DWORD *)(a3 + 2724) = 1;
                  goto LABEL_181;
                }
LABEL_179:
                *(_DWORD *)(a3 + 2720) = 5;
                goto LABEL_180;
              }
LABEL_178:
              *(_DWORD *)(a3 + 2716) = 2;
              goto LABEL_179;
            }
LABEL_177:
            *(_DWORD *)(a3 + 2712) = 0;
            goto LABEL_178;
          }
LABEL_176:
          *(_DWORD *)(a3 + 2708) = 5;
          goto LABEL_177;
        }
LABEL_175:
        *(_DWORD *)(a3 + 2704) = 1;
        goto LABEL_176;
      }
      *(_DWORD *)(a3 + 2700) = 0;
      goto LABEL_175;
    }
    if (!(*(_DWORD *)__src ^ 0x584D5054 | v208) || !(*(_DWORD *)__src ^ 0x4E4D5054 | v208))
    {
      *(_QWORD *)&v211 = 0;
      ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), &v211, v16, v17, v18, v19, v20);
      if ((ChunkData & 0x80000000) != 0)
        return ChunkData;
      ++*(_WORD *)(a3 + 600);
      v84 = *(_QWORD *)(a3 + 2464);
      if (!v84)
        goto LABEL_347;
      v85 = 0;
      do
        v86 = v85;
      while (*(_QWORD *)(v84 + 8 * (unsigned __int16)v85++));
      if (!v86 || (unsigned __int16)(__n >> 2) != 2 * v86)
        goto LABEL_347;
      v88 = 2480;
      if (*(_DWORD *)__src ^ 0x584D5054 | v208)
        v88 = 2488;
      *(_QWORD *)(a3 + v88) = v211;
      goto LABEL_314;
    }
    if (!(*(_DWORD *)__src ^ 0x46455250 | v208))
    {
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        v130 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(a2) - v203);
        *(_QWORD *)&v211 = v130;
      }
      else
      {
        v108 = ssftriff_reader_GetChunkData(a2, __n, &v211, v16, v17, v18, v19, v20);
        if ((v108 & 0x80000000) != 0)
          return v108;
        v130 = (_DWORD *)v211;
      }
      *(_WORD *)(a3 + 2966) = *v130;
      ssftriff_reader_Seek(a2, 4u, 1);
      v142 = heap_Calloc((_QWORD *)a1[1], 32, *(unsigned __int16 *)(a3 + 2966) + 1);
      *(_QWORD *)(a3 + 2968) = v142;
      if (!v142)
        return 2229280778;
      *(_DWORD *)(v142 + 32 * *(unsigned __int16 *)(a3 + 2966)) = 0;
      goto LABEL_312;
    }
    if (!(*(_DWORD *)__src ^ 0x46415254 | v208))
    {
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        v132 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(a2) - v203);
        *(_QWORD *)&v211 = v132;
      }
      else
      {
        v108 = ssftriff_reader_GetChunkData(a2, __n, &v211, v16, v17, v18, v19, v20);
        if ((v108 & 0x80000000) != 0)
          return v108;
        v132 = (_DWORD *)v211;
      }
      *(_WORD *)(a3 + 3360) = *v132;
      ssftriff_reader_Seek(a2, 4u, 1);
      v143 = heap_Calloc((_QWORD *)a1[1], 12, *(unsigned __int16 *)(a3 + 3360));
      *(_QWORD *)(a3 + 3368) = v143;
      if (!v143)
        return 2229280778;
      goto LABEL_312;
    }
    if (!(*(_DWORD *)__src ^ 0x5A5A5546 | v208))
    {
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        v141 = (int *)(v8 + ssftriff_reader_GetPosition(a2) - v203);
        *(_QWORD *)&v211 = v141;
      }
      else
      {
        v108 = ssftriff_reader_GetChunkData(a2, __n, &v211, v16, v17, v18, v19, v20);
        if ((v108 & 0x80000000) != 0)
          return v108;
        v141 = (int *)v211;
      }
      v149 = *v141;
      ssftriff_reader_Seek(a2, 4u, 1);
      v150 = heap_Calloc((_QWORD *)a1[1], 24, (v149 + 2));
      *(_QWORD *)(a3 + 3416) = v150;
      if (!v150)
        return 2229280778;
      *(_WORD *)(a3 + 3408) = 1;
LABEL_312:
      RiffStringTable = uselect_ParseRiff(a1, a2, a3, 1, a5, 0, 0, 0);
      goto LABEL_313;
    }
    if (!(*(_DWORD *)__src ^ 0x52585443 | v208))
    {
      RiffStringTable = uselect_ParseContextRules((uint64_t)a1, a2, a3, v16, v17, v18, v19, v20);
      goto LABEL_313;
    }
    if (!(*(_DWORD *)__src ^ 0x52544347 | v208))
    {
      RiffStringTable = uselect_ParseGenericContextRule((uint64_t)a1, a2, a3, __n, v17, v18, v19, v20);
      goto LABEL_313;
    }
    if (!(*(_DWORD *)__src ^ 0x464E4547 | v208))
    {
      RiffStringTable = uselect_ParseGenericFeatureMap((uint64_t)a1, a2, (_QWORD *)a3, __n, v17, v18, v19, v20);
      goto LABEL_313;
    }
    if (!(*(_DWORD *)__src ^ 0x52414350 | v208))
      goto LABEL_324;
    if (!(*(_DWORD *)__src ^ 0x52414344 | v208))
    {
      Position = ssftriff_reader_GetPosition(a2);
      *(_QWORD *)&v211 = 0;
      v108 = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), &v211, v162, v163, v164, v165, v166);
      if ((v108 & 0x80000000) != 0)
        return v108;
      ++*(_WORD *)(a3 + 600);
      v167 = strlen(__s);
      v168 = heap_Calloc((_QWORD *)a1[1], v167, 8);
      *(_QWORD *)(a3 + 28232) = v168;
      if (!v168)
        return 2229280778;
LABEL_329:
      LODWORD(ChunkData) = uselect_ParseRiff(a1, a2, a3, 1, a5, v211, Position, 0);
LABEL_199:
      v14 = v200;
      goto LABEL_314;
    }
    if (*(_DWORD *)__src ^ 0x53494850 | v208)
    {
      if (!(*(_DWORD *)__src ^ 0x49445453 | v208) || !(*(_DWORD *)__src ^ 0x53535453 | v208))
      {
LABEL_324:
        Position = ssftriff_reader_GetPosition(a2);
        *(_QWORD *)&v211 = 0;
        v108 = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), &v211, v157, v158, v159, v160, v161);
        if ((v108 & 0x80000000) != 0)
          return v108;
        ++*(_WORD *)(a3 + 600);
        goto LABEL_329;
      }
      if (*(_DWORD *)__src ^ 0x4B424443 | v208)
      {
        if (!(*(_DWORD *)__src ^ 0x534F4343 | v208))
          goto LABEL_324;
        RiffStringTable = uselect_ParseVoicePartChunks((uint64_t)a1, a2, a3, __n, __src, &v206);
        goto LABEL_313;
      }
      *(_QWORD *)&v211 = 0;
      ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), &v211, v16, v17, v18, v19, v20);
      if ((ChunkData & 0x80000000) != 0)
        return ChunkData;
      ++*(_WORD *)(a3 + 600);
      v170 = *(_DWORD *)(a3 + 2608);
      if (!v170)
        goto LABEL_341;
      if (v170 != 256)
      {
        if (v170 != 128)
          return 2229280772;
LABEL_341:
        *(_QWORD *)(a3 + 3560) = v211;
        goto LABEL_314;
      }
      *(_QWORD *)(a3 + 3568) = v211;
    }
    else
    {
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      v169 = (void *)heap_Alloc(a1[1], __n);
      *(_QWORD *)(a3 + 28160) = v169;
      if (!v169)
        return 2229280778;
      memcpy(v169, (const void *)v211, __n);
    }
LABEL_314:
    if (!v206)
      goto LABEL_315;
LABEL_318:
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_343;
    v155 = ssftriff_reader_CloseChunk(a2);
    if (v155 < 0)
    {
      LODWORD(ChunkData) = v155;
LABEL_343:
      if ((ChunkData & 0x1FFF) == 0x14)
        return 0;
      else
        return ChunkData;
    }
  }
  if (!strcmp(a5, "VCAT"))
  {
    *(_QWORD *)&v211 = 0;
    if (v8)
    {
      *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
    }
    else
    {
      ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v22, v23, v24, v25, v26);
      if ((ChunkData & 0x80000000) != 0)
        return ChunkData;
    }
    if (!(*(_DWORD *)__src ^ 0x48504C41 | v208))
    {
      __n_4 = 257;
      LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a2, v211, __n, 0, __s, &__n_4);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_314;
      v173 = a1;
      v71 = -1;
      *(_WORD *)(a3 + 2496) = 255;
      if (*(_BYTE *)(a3 + 602))
      {
        v72 = 0;
        v73 = 0;
        v74 = 0;
        do
        {
          v75 = (unsigned __int8 *)(a3 + v73 + 602);
          v76 = *v75;
          if (v76 >= v71)
          {
            v77 = *v75;
          }
          else
          {
            *(_BYTE *)(a3 + 2496) = v76;
            v77 = *v75;
            v71 = v76;
          }
          if (v77 <= v72)
          {
            v78 = v77;
            LOBYTE(v77) = v72;
          }
          else
          {
            *(_BYTE *)(a3 + 2497) = v77;
            v78 = *v75;
            v72 = v77;
          }
          *(_BYTE *)(a3 + v78 + 2144) = v74;
          v73 = (v74 + 1);
          v79 = strlen(__s);
          v74 = v73;
        }
        while (v79 > v73);
      }
      else
      {
        LOBYTE(v77) = 0;
      }
      *(_BYTE *)(a3 + 3576) = v77 - v71 + 2;
      *(_BYTE *)(a3 + 3577) = v77 - v71 + 1;
      a1 = v173;
      v8 = a6;
      goto LABEL_199;
    }
    if (*(_DWORD *)__src ^ 0x43494F56 | v208)
    {
      if (*(_DWORD *)__src ^ 0x4F564F43 | v208)
      {
        if (*(_DWORD *)__src ^ 0x45464153 | v208)
        {
          if (*(_DWORD *)__src ^ 0x534F4C50 | v208)
          {
            if (*(_DWORD *)__src ^ 0x4F4E4F53 | v208)
            {
              if (*(_DWORD *)__src ^ 0x46464944 | v208)
              {
                if (*(_DWORD *)__src ^ 0x41474154 | v208)
                {
                  if (*(_DWORD *)__src ^ 0x4C534231 | v208)
                  {
                    if (*(_DWORD *)__src ^ 0x52534231 | v208)
                    {
                      if (*(_DWORD *)__src ^ 0x4C534232 | v208)
                      {
                        if (*(_DWORD *)__src ^ 0x52534232 | v208)
                        {
                          v206 = 0;
                          goto LABEL_314;
                        }
                        v144 = (_WORD *)v211;
                        v145 = __n;
                        v146 = (uint64_t)a1;
                        v147 = a2;
                        v148 = v174;
                      }
                      else
                      {
                        v144 = (_WORD *)v211;
                        v145 = __n;
                        v146 = (uint64_t)a1;
                        v147 = a2;
                        v148 = v175;
                      }
                    }
                    else
                    {
                      v144 = (_WORD *)v211;
                      v145 = __n;
                      v146 = (uint64_t)a1;
                      v147 = a2;
                      v148 = v176;
                    }
                  }
                  else
                  {
                    v144 = (_WORD *)v211;
                    v145 = __n;
                    v146 = (uint64_t)a1;
                    v147 = a2;
                    v148 = v177;
                  }
                }
                else
                {
                  v144 = (_WORD *)v211;
                  v145 = __n;
                  v146 = (uint64_t)a1;
                  v147 = a2;
                  v148 = v178;
                }
                RiffStringTable = uselect_LoadRiffStringTable(v146, v147, v144, v145, v148);
                goto LABEL_313;
              }
              __n_4 = 64;
              v102 = v211;
              v103 = __n;
              v104 = a2;
              v105 = v179;
            }
            else
            {
              __n_4 = 257;
              v102 = v211;
              v103 = __n;
              v104 = a2;
              v105 = v186;
            }
          }
          else
          {
            __n_4 = 257;
            v102 = v211;
            v103 = __n;
            v104 = a2;
            v105 = v190;
          }
        }
        else
        {
          __n_4 = 257;
          v102 = v211;
          v103 = __n;
          v104 = a2;
          v105 = v191;
        }
      }
      else
      {
        __n_4 = 257;
        v102 = v211;
        v103 = __n;
        v104 = a2;
        v105 = v193;
      }
    }
    else
    {
      __n_4 = 257;
      v102 = v211;
      v103 = __n;
      v104 = a2;
      v105 = v195;
    }
    RiffStringTable = ssftriff_reader_ReadStringZ(v104, v102, v103, 0, v105, &__n_4);
LABEL_313:
    LODWORD(ChunkData) = RiffStringTable;
    goto LABEL_314;
  }
  if (!strcmp(a5, "PREF") && !(*(_DWORD *)__src ^ 0x54414546 | v208))
  {
    *(_QWORD *)&v211 = 0;
    if (v8)
    {
      v89 = (unsigned __int16 *)(v8 + ssftriff_reader_GetPosition(a2) - v203);
    }
    else
    {
      v108 = ssftriff_reader_GetChunkData(a2, __n, &v211, v27, v28, v29, v30, v31);
      if ((v108 & 0x80000000) != 0)
        return v108;
      v89 = (unsigned __int16 *)v211;
    }
    v109 = *v89;
    *(_QWORD *)&v211 = v89 + 1;
    if (v109 >= 0x47)
    {
LABEL_347:
      ChunkData = 2229280772;
      log_OutPublic(a1[4], (uint64_t)"USELECT", 19008, 0, v80, v81, v82, v83, v172);
      return ChunkData;
    }
    *(_DWORD *)(a3 + 4 * v109 + 3048) = v198;
    v110 = *(_QWORD *)(a3 + 2968) + 32 * v198;
    *(_DWORD *)v110 = v109;
    *(_WORD *)(v110 + 8) = v89[1];
    *(_DWORD *)(v110 + 4) = *((_DWORD *)v89 + 1);
    *(_BYTE *)(v110 + 10) = *((_BYTE *)v89 + 8) + 1;
    *(_BYTE *)(v110 + 11) = *((_BYTE *)v89 + 9);
    *(_BYTE *)(v110 + 12) = *((_BYTE *)v89 + 10);
    *(_BYTE *)(v110 + 13) = *((_BYTE *)v89 + 11);
    *(_QWORD *)&v211 = v89 + 6;
    LODWORD(ChunkData) = uselect_InitForPreselDistFunc(v110);
    v111 = *(_QWORD *)(a3 + 2968) + 32 * v198;
    *(_BYTE *)(v111 + 25) = v198;
    v112 = *(_DWORD *)v111;
    v113 = v194;
    v14 = v200;
    switch(*(_DWORD *)v111)
    {
      case 1:
        goto LABEL_289;
      case 2:
        v113 = v180;
        goto LABEL_289;
      case 3:
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xC:
      case 0xD:
        goto LABEL_290;
      case 5:
        v113 = v183;
        goto LABEL_289;
      case 7:
        v113 = v181;
        goto LABEL_289;
      case 0xA:
        v113 = v185;
        goto LABEL_289;
      case 0xB:
        v113 = v182;
        goto LABEL_289;
      case 0xE:
        v113 = v184;
        goto LABEL_289;
      default:
        v113 = v189;
        v14 = v200;
        if (v112 != 26)
        {
          v113 = v187;
          if (v112 != 27)
            goto LABEL_290;
        }
LABEL_289:
        *v113 = v111;
LABEL_290:
        v125 = v198;
        break;
    }
LABEL_291:
    ++v125;
    goto LABEL_292;
  }
  if (!strcmp(a5, "TRAF") && !(*(_DWORD *)__src ^ 0x54414546 | v208))
  {
    *(_QWORD *)&v211 = 0;
    if (v8)
    {
      v106 = (unsigned __int16 *)(v8 + ssftriff_reader_GetPosition(a2) - v203);
    }
    else
    {
      ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v32, v33, v34, v35, v36);
      if ((ChunkData & 0x80000000) != 0)
        return ChunkData;
      v106 = (unsigned __int16 *)v211;
    }
    v114 = *v106;
    *(_QWORD *)&v211 = v106 + 1;
    if (v114 >= 8)
      goto LABEL_347;
    if ((_DWORD)v114 == 1)
    {
      v115 = 0;
    }
    else
    {
      if ((_DWORD)v114 != 3)
      {
        if (v198 == 2)
          v126 = 3;
        else
          v126 = v198;
        *(_DWORD *)(a3 + 4 * v114 + 3376) = v126;
        v127 = *(_QWORD *)(a3 + 3368) + 12 * v126;
        *(_DWORD *)v127 = v114;
        v129 = *((_DWORD *)v106 + 1);
        v128 = v106 + 2;
        *(_WORD *)(v127 + 8) = *(v128 - 1);
        *(_QWORD *)&v211 = v128;
        v125 = v126;
        *(_DWORD *)(v127 + 4) = v129;
        goto LABEL_291;
      }
      v115 = 2;
    }
    *(_DWORD *)(a3 + 4 * v114 + 3376) = v115;
    v122 = *(_QWORD *)(a3 + 3368) + 12 * v115;
    *(_DWORD *)v122 = v114;
    v124 = *((_DWORD *)v106 + 1);
    v123 = v106 + 2;
    *(_WORD *)(v122 + 8) = *(v123 - 1);
    *(_QWORD *)&v211 = v123;
    *(_DWORD *)(v122 + 4) = v124;
    v125 = v198;
    if (v115 == v198)
      goto LABEL_291;
LABEL_292:
    v198 = v125;
    goto LABEL_314;
  }
  if (strcmp(a5, "FUZZ"))
    goto LABEL_31;
  if (!(*(_DWORD *)__src ^ 0x4C425446 | v208))
  {
    *(_QWORD *)&v211 = 0;
    if (v8)
    {
      v107 = (unsigned __int16 *)(v8 + ssftriff_reader_GetPosition(a2) - v203);
      *(_QWORD *)&v211 = v107;
    }
    else
    {
      v108 = ssftriff_reader_GetChunkData(a2, __n, &v211, v37, v38, v39, v40, v41);
      if ((v108 & 0x80000000) != 0)
        return v108;
      v107 = (unsigned __int16 *)v211;
    }
    LODWORD(ChunkData) = -2065686524;
    v116 = __n;
    v117 = (unsigned __int16 *)(*(_QWORD *)(a3 + 3416) + 24 * *(unsigned __int16 *)(a3 + 3408));
    v118 = *v107;
    *v117 = v118;
    v119 = v107[1];
    v117[1] = v119;
    v120 = 2 * v118 * (unint64_t)v119;
    if (v120 + 4 <= v116)
    {
      v121 = (void *)heap_Alloc(a1[1], v120);
      *((_QWORD *)v117 + 1) = v121;
      if (v121)
      {
        memcpy(v121, v107 + 2, 2 * *v117 * (unint64_t)v117[1]);
        LODWORD(ChunkData) = 0;
      }
      else
      {
        LODWORD(ChunkData) = -2065686518;
      }
    }
    ++*(_WORD *)(a3 + 3408);
    v8 = a6;
    goto LABEL_314;
  }
  if (*(_DWORD *)__src ^ 0x41425446 | v208)
  {
LABEL_31:
    if (!strcmp(a5, "PCAR"))
    {
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v42, v43, v44, v45, v46);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      if (*(_DWORD *)__src ^ 0x46514143 | v208)
      {
        if (*(_DWORD *)__src ^ 0x49514143 | v208)
        {
          if (*(_DWORD *)__src ^ 0x56514143 | v208)
          {
            if (!(*(_DWORD *)__src ^ 0x4E544143 | v208))
              *(_QWORD *)(a3 + 28200) = v211;
          }
          else
          {
            *(_QWORD *)(a3 + 28192) = v211;
          }
        }
        else
        {
          *(_QWORD *)(a3 + 28184) = v211;
        }
      }
      else
      {
        *(_QWORD *)(a3 + 28176) = v211;
      }
    }
    else if (!strcmp(a5, "DCAR"))
    {
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v47, v48, v49, v50, v51);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      if (*(_DWORD *)__src ^ 0x46514143 | v208)
      {
        if (*(_DWORD *)__src ^ 0x49514143 | v208)
        {
          if (*(_DWORD *)__src ^ 0x56514143 | v208)
          {
            if (!(*(_DWORD *)__src ^ 0x4E544143 | v208))
              *(_QWORD *)(*(_QWORD *)(a3 + 28232) + 8 * v188++) = v211;
          }
          else
          {
            *(_QWORD *)(a3 + 28224) = v211;
          }
        }
        else
        {
          *(_QWORD *)(a3 + 28216) = v211;
        }
      }
      else
      {
        *(_QWORD *)(a3 + 28208) = v211;
      }
    }
    else if (!strcmp(a5, "CCOS") && !(*(_DWORD *)__src ^ 0x54585443 | v208))
    {
      LODWORD(ChunkData) = uselect_ParseRiff(a1, a2, a3, 2, a5, v8, v203, v192++);
    }
    else
    {
      if (strcmp(a5, "STDI") && strcmp(a5, "STSS"))
      {
LABEL_40:
        v206 = 0;
LABEL_315:
        v151 = 0;
        LOBYTE(v211) = 0;
        do
        {
          __strcat_chk();
          __strcat_chk();
          ++v151;
        }
        while (a4 >= (unsigned __int16)v151);
        log_OutText(a1[4], (uint64_t)"USELECT", 3, 0, (uint64_t)"Unknown data: %s for %s", v152, v153, v154, (uint64_t)&v211);
        goto LABEL_318;
      }
      *(_QWORD *)&v211 = 0;
      if (v8)
      {
        *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v52, v53, v54, v55, v56);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
      }
      if (*(_DWORD *)__src ^ 0x49565453 | v208)
      {
        if (!(*(_DWORD *)__src ^ 0x41565453 | v208))
        {
          if (!strcmp(a5, "STDI"))
            *(_QWORD *)(a3 + 3536) = v211;
          else
            *(_QWORD *)(a3 + 3544) = v211;
        }
      }
      else
      {
        *(_QWORD *)(a3 + 3528) = v211;
      }
    }
    goto LABEL_314;
  }
  *(_QWORD *)&v211 = 0;
  if (v8)
  {
    *(_QWORD *)&v211 = v8 + ssftriff_reader_GetPosition(a2) - v203;
  }
  else
  {
    ChunkData = ssftriff_reader_GetChunkData(a2, __n, &v211, v37, v38, v39, v40, v41);
    if ((ChunkData & 0x80000000) != 0)
      return ChunkData;
  }
  if (*(_WORD *)(a3 + 3408))
  {
    v131 = (void *)heap_Calloc((_QWORD *)a1[1], 1, __n);
    *(_QWORD *)(*(_QWORD *)(a3 + 3416) + 24 * *(unsigned __int16 *)(a3 + 3408) - 8) = v131;
    if (v131)
      memmove(v131, (const void *)v211, __n);
    else
      LODWORD(ChunkData) = -2065686518;
    goto LABEL_314;
  }
  log_OutPublic(a1[4], (uint64_t)"USELECT", 19008, 0, v60, v61, v62, v63, v172);
  return 2229280772;
}

uint64_t uselect_ParseContextRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  _WORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int16 *v29;
  int v30;
  unsigned __int8 v31;
  unsigned int v32;
  _WORD *v33;

  v33 = 0;
  v32 = 0;
  v10 = (unsigned __int16 *)(a3 + 3488);
  v29 = (unsigned __int16 *)(a3 + 3472);
  v11 = (unsigned __int16 *)(a3 + 3440);
  v31 = 0;
  v12 = (unsigned __int16 *)(a3 + 3504);
  v30 = 0;
  v13 = (uint64_t *)(a3 + 3432);
  v14 = (uint64_t *)(a3 + 3424);
  do
  {
    LODWORD(result) = ssftriff_reader_OpenChunk(a2, &v30, &v32, &v33, a5, a6, a7, a8);
    if ((result & 0x80000000) != 0)
      break;
    if (!(v30 ^ 0x464C5552 | v31))
    {
      v24 = v33;
      v25 = v32;
      v26 = a1;
      v27 = a2;
      v28 = v14;
      goto LABEL_12;
    }
    if (!(v30 ^ 0x544C5552 | v31))
    {
      v24 = v33;
      v25 = v32;
      v26 = a1;
      v27 = a2;
      v28 = v13;
LABEL_12:
      LODWORD(result) = uselect_LoadRiffStringTable(v26, v27, v24, v25, v28);
      if ((result & 0x80000000) != 0)
        break;
      goto LABEL_18;
    }
    if (v30 ^ 0x52575346 | v31)
    {
      if (v30 ^ 0x57455250 | v31)
      {
        if (v30 ^ 0x44575254 | v31)
        {
          if (v30 ^ 0x50575254 | v31)
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"USELECT", 19008, 0, v16, v17, v18, v19, v29);
            LODWORD(result) = -2065686524;
            break;
          }
          v20 = v33;
          v21 = v32;
          v22 = a1;
          v23 = v10;
        }
        else
        {
          v20 = v33;
          v21 = v32;
          v22 = a1;
          v23 = v29;
        }
      }
      else
      {
        v20 = v33;
        v21 = v32;
        v22 = a1;
        v23 = v11;
      }
    }
    else
    {
      v20 = v33;
      v21 = v32;
      v22 = a1;
      v23 = v12;
    }
    LODWORD(result) = uselect_LoadRiffMatrix2D_U8(v22, v20, v21, v23);
    if ((result & 0x80000000) != 0)
      break;
LABEL_18:
    LODWORD(result) = ssftriff_reader_CloseChunk(a2);
  }
  while ((result & 0x80000000) == 0);
  if ((result & 0x1FFF) == 0x14)
    return 0;
  else
    return result;
}

uint64_t uselect_ParseGenericContextRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int ChunkData;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v39;
  unsigned int *v40;
  _BYTE *v41;
  uint64_t *v42;
  int v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  unsigned int v46;

  v46 = a4;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  ChunkData = ssftriff_reader_GetChunkData(a2, a4, &v45, a4, a5, a6, a7, a8);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_32;
  ChunkData = ssftriff_reader_Seek(a2, 4u, 1);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_32;
  v16 = *(_DWORD *)v45;
  v45 += 4;
  if (!v16)
  {
    ChunkData = uselect_AddGenericContextRule(a1, a3, (uint64_t)&v42);
    if ((ChunkData & 0x80000000) == 0)
    {
      v23 = v42;
      while (1)
      {
        ChunkData = ssftriff_reader_OpenChunk(a2, &v43, &v46, &v45, v19, v20, v21, v22);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_32;
        if (!(v43 ^ 0x43524347 | v44))
        {
          ChunkData = uselect_AddGCRCondition(a1, v23, (uint64_t *)&v41);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_32;
          v30 = 0;
          v31 = v45;
          v32 = *v45;
          v33 = v41;
          *v41 = v32;
          v45 = v31 + 1;
          v34 = v31[1];
          v33[1] = v34;
          v45 = v31 + 2;
          v33[2] = v31[2];
          v35 = v31 + 3;
          v45 = v31 + 3;
          do
          {
            v33[v30 + 3] = *v35;
            v35 = ++v45;
            ++v30;
          }
          while (v30 != 32);
          if (!v32)
            *(_BYTE *)(a3 + v34 + 2748) = 1;
          goto LABEL_30;
        }
        if (v43 ^ 0x41524347 | v44)
        {
          v17 = 19008;
          goto LABEL_5;
        }
        ChunkData = uselect_AddGCRAction(a1, (uint64_t)v23, (uint64_t *)&v40);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_32;
        v24 = v45;
        v25 = *v45;
        v26 = v40;
        *v40 = v25;
        v45 = v24 + 1;
        v27 = v24[1];
        *((_BYTE *)v26 + 4) = v27;
        if (v25 - 7 >= 2)
        {
          v28 = *((unsigned __int16 *)v24 + 1);
          v29 = 4;
        }
        else
        {
          v28 = *((_DWORD *)v24 + 1);
          v29 = 8;
        }
        v26[2] = v28;
        v45 = &v24[v29];
        v17 = 19008;
        if (v25 > 8)
          goto LABEL_5;
        v36 = 1 << v25;
        if ((v36 & 0x72) != 0)
          break;
        if ((v36 & 0xC) != 0)
        {
          v37 = *(_DWORD *)(a3 + 4 * v27 + 3376);
          if (v37 < 0)
          {
            v17 = 19025;
            goto LABEL_5;
          }
          goto LABEL_29;
        }
        if ((v36 & 0x180) == 0)
          goto LABEL_5;
        if ((_DWORD)v27 != 46)
        {
          v39 = 2229280772;
          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"USELECT", 19008, 0, v12, v13, v14, v15, v40);
          return v39;
        }
LABEL_30:
        v18 = ssftriff_reader_CloseChunk(a2);
        if ((v18 & 0x80000000) != 0)
          goto LABEL_33;
      }
      v37 = *(_DWORD *)(a3 + 4 * v27 + 3048);
      if (v37 < 0)
      {
        v17 = 19024;
        goto LABEL_5;
      }
LABEL_29:
      *((_BYTE *)v26 + 4) = v37;
      goto LABEL_30;
    }
LABEL_32:
    v18 = ChunkData;
    goto LABEL_33;
  }
  v17 = 19022;
LABEL_5:
  v18 = -2065686524;
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"USELECT", v17, 0, v12, v13, v14, v15, v40);
LABEL_33:
  if ((v18 & 0x1FFF) == 0x14)
    return 0;
  else
    return v18;
}

uint64_t uselect_ParseGenericFeatureMap(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ChunkData;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t i;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30[2];
  char __dst[256];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v30 = 0;
  v28 = a4;
  ChunkData = ssftriff_reader_GetChunkData(a2, a4, v30, a4, a5, a6, a7, a8);
  if ((ChunkData & 0x80000000) == 0)
  {
    v12 = (unsigned __int16)**(_WORD **)v30;
    if (**(_WORD **)v30)
    {
      v13 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
      a3[417] = v13;
      if (v13)
      {
        v14 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
        a3[418] = v14;
        if (v14)
        {
          v15 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
          a3[419] = v15;
          if (v15)
          {
            v16 = 0;
            v17 = 2;
            v27 = v12;
            while (1)
            {
              __dst[0] = 0;
              v29 = 256;
              ChunkData = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v30, v28, v17, __dst, &v29);
              v18 = v29;
              *(_QWORD *)(a3[417] + 8 * v16) = uselect_strdup(a1, __dst);
              if (!*(_QWORD *)(a3[417] + 8 * v16))
                break;
              v19 = v16;
              v20 = v18 + v17;
              v21 = *(unsigned __int16 *)(*(_QWORD *)v30 + v20);
              *(_QWORD *)(a3[418] + 8 * v16) = heap_Calloc(*(_QWORD **)(a1 + 8), (v21 + 1), 8);
              if (!*(_QWORD *)(a3[418] + 8 * v16))
                break;
              *(_QWORD *)(a3[419] + 8 * v16) = heap_Calloc(*(_QWORD **)(a1 + 8), (v21 + 1), 1);
              if (!*(_QWORD *)(a3[419] + 8 * v16))
                break;
              v17 = v20 + 2;
              if ((_DWORD)v21)
              {
                v22 = 0;
                while (1)
                {
                  v23 = v17;
                  __dst[0] = 0;
                  v29 = 256;
                  ChunkData = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v30, v28, v17, __dst, &v29);
                  v24 = v29;
                  *(_QWORD *)(*(_QWORD *)(a3[418] + 8 * v19) + 8 * v22) = uselect_strdup(a1, __dst);
                  if (!*(_QWORD *)(*(_QWORD *)(a3[418] + 8 * v19) + 8 * v22))
                    return 2229280778;
                  v17 += v24;
                  if (++v22 >= v21)
                  {
                    for (i = 0; i != v21; ++i)
                      *(_BYTE *)(*(_QWORD *)(a3[419] + 8 * v19) + i) = *(_BYTE *)(*(_QWORD *)v30
                                                                                + v23
                                                                                + v24
                                                                                + i);
                    v17 = v23 + v24 + i;
                    LODWORD(v12) = v27;
                    break;
                  }
                }
              }
              v16 = v19 + 1;
              if ((int)v19 + 1 >= v12)
                return ChunkData;
            }
          }
        }
      }
      return 2229280778;
    }
  }
  return ChunkData;
}

uint64_t uselect_ParseVoicePartChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1, _DWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ChunkData;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int Position;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int SubChunkInfo;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned int *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned int v97;

  v97 = a4;
  v11 = *(_QWORD *)(a3 + 3552);
  if (!strcmp(__s1, "CTUN"))
  {
    v96 = 0;
    ChunkData = ssftriff_reader_GetChunkData(a2, a4, &v96, v12, v13, v14, v15, v16);
    if ((ChunkData & 0x80000000) == 0)
      *(_DWORD *)(v11 + 108) = *v96;
  }
  else if (!strcmp(__s1, "CNT0"))
  {
    v96 = 0;
    ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v17, v18, v19, v20, v21);
    if ((ChunkData & 0x80000000) == 0)
    {
      ++*(_WORD *)(v11 + 104);
      *(_QWORD *)(v11 + 120) = v96;
      *(_WORD *)(v11 + 112) = a4 >> 1;
    }
  }
  else if (!strcmp(__s1, "TAB0"))
  {
    v96 = 0;
    ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v22, v23, v24, v25, v26);
    if ((ChunkData & 0x80000000) == 0)
    {
      ++*(_WORD *)(v11 + 104);
      *(_QWORD *)(v11 + 128) = v96;
    }
  }
  else
  {
    if (strcmp(__s1, "XTNU"))
    {
      if (!strcmp(__s1, "SYMB"))
      {
        v96 = 0;
        ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v32, v33, v34, v35, v36);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
        v60 = 2229280772;
        ++*(_WORD *)(v11 + 104);
        v61 = *(_DWORD *)(v11 + 108);
        if (!v61 || a4 % v61)
          return v60;
        *(_BYTE *)(v11 + 168) = a4 / v61;
        *(_QWORD *)(v11 + 160) = v96;
      }
      else if (!strcmp(__s1, "SYLC"))
      {
        v96 = 0;
        ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v37, v38, v39, v40, v41);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
        v60 = 2229280772;
        ++*(_WORD *)(v11 + 104);
        v62 = *(_DWORD *)(v11 + 108);
        if (!v62 || a4 % v62)
          return v60;
        *(_BYTE *)(v11 + 184) = a4 / v62;
        *(_QWORD *)(v11 + 176) = v96;
      }
      else
      {
        if (strcmp(__s1, "UNIT"))
        {
          if (strcmp(__s1, "PREU"))
          {
            if (strcmp(__s1, "TRI "))
            {
              ChunkData = 0;
              *a6 = 0;
              return ChunkData;
            }
            v96 = 0;
            Position = ssftriff_reader_GetPosition(a2);
            v95 = 0;
            v72 = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v95, v67, v68, v69, v70, v71);
            if ((v72 & 0x80000000) != 0)
              return v72;
            v77 = 0;
            ++*(_WORD *)(v11 + 104);
            while (1)
            {
              v94 = ssftriff_reader_OpenChunk(a2, __s1, &v97, 0, v73, v74, v75, v76);
              if (!strcmp(__s1, "TRIL"))
                break;
              v80 = strcmp(__s1, "TRIR");
              if (v80)
                v81 = 4;
              else
                v81 = 1;
              if (!v80)
                goto LABEL_56;
LABEL_68:
              if ((v77 & 0x1FFF) == 0x14)
                v77 = 0;
              if (v77 >= 0)
                v92 = v94;
              else
                v92 = v77;
              if ((v92 & 0x80000000) == 0)
              {
                v92 = ssftriff_reader_CloseChunk(a2);
                if ((v92 & 0x80000000) == 0)
                  continue;
              }
              if ((v92 & 0x1FFF) == 0x14)
                return 0;
              else
                return v92;
            }
            v81 = 0;
LABEL_56:
            if ((v77 & 0x80000000) == 0)
            {
              SubChunkInfo = uselect_GetSubChunkInfo(a2, v95, Position, __s1, &v97, &v96, v78, v79);
              if (SubChunkInfo < 0)
              {
                v77 = SubChunkInfo;
              }
              else
              {
                v83 = v11 + 4 * v81;
                v84 = (_QWORD *)(v11 + 8 * v81);
                v93 = (unsigned int *)(v83 + 248);
                v85 = v84 + 32;
                v86 = v84 + 29;
                v87 = (unsigned int *)(v83 + 204);
                v88 = v84 + 27;
                do
                {
                  if (!strcmp(__s1, "HAIN"))
                  {
                    *v87 = v97 >> 2;
                    *v88 = v96;
                  }
                  else if (!strcmp(__s1, "OFCT"))
                  {
                    *v86 = v96;
                  }
                  else if (!strcmp(__s1, "TABL"))
                  {
                    *v93 = v97 >> 2;
                    *v85 = v96;
                  }
                  v91 = uselect_GetSubChunkInfo(a2, v95, Position, __s1, &v97, &v96, v89, v90);
                }
                while ((v91 & 0x80000000) == 0);
                v77 = v91;
              }
            }
            goto LABEL_68;
          }
          v96 = 0;
          ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v47, v48, v49, v50, v51);
          if ((ChunkData & 0x80000000) != 0)
            return ChunkData;
          v60 = 2229280772;
          ++*(_WORD *)(v11 + 104);
          v64 = *(_DWORD *)(v11 + 108);
          if (v64 && a4 >> 2 == v64)
          {
            *(_QWORD *)(v11 + 272) = v96;
            return ChunkData;
          }
          return v60;
        }
        v96 = 0;
        ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v42, v43, v44, v45, v46);
        if ((ChunkData & 0x80000000) != 0)
          return ChunkData;
        v60 = 2229280772;
        ++*(_WORD *)(v11 + 104);
        v63 = *(_DWORD *)(v11 + 108);
        if (!v63 || a4 % v63)
          return v60;
        *(_BYTE *)(v11 + 200) = a4 / v63;
        *(_QWORD *)(v11 + 192) = v96;
      }
      return ChunkData;
    }
    v96 = 0;
    ChunkData = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v27, v28, v29, v30, v31);
    if ((ChunkData & 0x80000000) == 0)
    {
      ++*(_WORD *)(v11 + 104);
      *(_QWORD *)(v11 + 136) = v96;
      *(_DWORD *)(v11 + 144) = a4 >> 2;
      v53 = *(unsigned int *)(v11 + 108);
      if ((_DWORD)v53)
      {
        v54 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v53 >> 3) + 2);
        *(_QWORD *)(v11 + 152) = v54;
        if (v54)
        {
          if (*(_DWORD *)(v11 + 144))
          {
            v55 = 0;
            v56 = *(_QWORD *)(v11 + 136);
            do
            {
              v57 = *(unsigned int *)(v56 + 4 * v55);
              v58 = v57 >> 3;
              v59 = v57 & 7;
              if (v59)
                ++v58;
              *(_BYTE *)(*(_QWORD *)(v11 + 152) + v58) |= 1 << (v59 ^ 7);
              v56 = *(_QWORD *)(v11 + 136);
              v55 += *(_DWORD *)(v56 + 4 * (v55 + 1)) + 2;
            }
            while (v55 < *(_DWORD *)(v11 + 144));
          }
        }
        else
        {
          return 2229280778;
        }
      }
      else
      {
        return 2229280772;
      }
    }
  }
  return ChunkData;
}

uint64_t uselect_LoadRiffStringTable(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t *a5)
{
  unint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  _BYTE *v16;
  unsigned int v17;

  v6 = (unsigned __int16)*a3;
  if (*a3)
  {
    v11 = heap_Calloc(*(_QWORD **)(a1 + 8), v6 + 1, 8);
    *a5 = v11;
    if (v11)
    {
      v12 = 0;
      v13 = (uint64_t)(a3 + 1);
      v14 = a4 - 2;
      do
      {
        v17 = 0;
        result = ssftriff_reader_ReadStringW(a2, v13, v14, 0, 0, &v17);
        if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 9)
          break;
        *(_QWORD *)(*a5 + 8 * v12) = heap_Alloc(*(_QWORD *)(a1 + 8), v17);
        v16 = *(_BYTE **)(*a5 + 8 * v12);
        if (!v16)
          return 2229280778;
        result = ssftriff_reader_ReadStringW(a2, v13, v14, 0, v16, &v17);
        if ((result & 0x80000000) != 0)
          break;
        v13 += v17 - 1 + 2;
        v14 -= v17 + 1;
        ++v12;
      }
      while (v12 < v6);
    }
    else
    {
      return 2229280778;
    }
  }
  else
  {
    result = 0;
    *a5 = 0;
  }
  return result;
}

uint64_t uselect_GetSubChunkInfo(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, unsigned int *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int Position;
  uint64_t v15;

  result = ssftriff_reader_OpenChunk(a1, a4, a5, 0, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if ((result & 0x80000000) != 0)
  {
    v15 = 0;
    *a4 = 0;
  }
  else
  {
    Position = ssftriff_reader_GetPosition(a1);
    result = ssftriff_reader_CloseChunk(a1);
    v15 = a2 + (Position - a3);
  }
  *a6 = v15;
  return result;
}

uint64_t uselect_LoadRiffMatrix2D_U8(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v10;

  v5 = 2229280772;
  v6 = *a2;
  *a4 = v6;
  v7 = a2[1];
  a4[1] = v7;
  v8 = v7 * (unint64_t)v6;
  if (v8 + 4 <= (unint64_t)a3)
  {
    v10 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v8);
    *((_QWORD *)a4 + 1) = v10;
    if (v10)
    {
      memcpy(v10, a2 + 2, a4[1] * (unint64_t)*a4);
      return 0;
    }
    else
    {
      return 2229280778;
    }
  }
  return v5;
}

uint64_t uselect_AddGenericContextRule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v5 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 24);
  *(_QWORD *)a3 = v5;
  if (!v5)
    return 2229280778;
  *v5 = 0;
  *(_QWORD *)(*(_QWORD *)a3 + 8) = 0;
  *(_QWORD *)(*(_QWORD *)a3 + 16) = 0;
  v6 = *(_QWORD *)(a2 + 3520);
  if (v6)
  {
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
    v8 = (_QWORD *)(v7 + 16);
  }
  else
  {
    v8 = (_QWORD *)(a2 + 3520);
  }
  result = 0;
  *v8 = *(_QWORD *)a3;
  return result;
}

uint64_t uselect_AddGCRCondition(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 48);
  *a3 = v5;
  if (!v5)
    return 2229280778;
  *(_WORD *)v5 = -256;
  *(_BYTE *)(v5 + 2) = 0;
  *(_OWORD *)(v5 + 3) = 0u;
  *(_OWORD *)(v5 + 19) = 0u;
  *(_QWORD *)(*a3 + 40) = 0;
  v6 = *a2;
  if (*a2)
  {
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 40);
    }
    while (v6);
    a2 = (uint64_t *)(v7 + 40);
  }
  result = 0;
  *a2 = *a3;
  return result;
}

uint64_t uselect_AddGCRAction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 24);
  *a3 = v5;
  if (!v5)
    return 2229280778;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = -1;
  *(_DWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  v6 = v8;
  if (v8)
  {
    do
    {
      v9 = v6;
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
    v7 = (uint64_t *)(v9 + 16);
  }
  result = 0;
  *v7 = *a3;
  return result;
}

char *uselect_strdup(uint64_t a1, char *__s)
{
  _QWORD *v3;
  int v4;
  char *result;

  if (!__s)
    return 0;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = strlen(__s);
  result = (char *)heap_Calloc(v3, (v4 + 1), 1);
  if (result)
    return strcpy(result, __s);
  return result;
}

_QWORD *uselect_FreeRiffStringTable(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    if (v4)
    {
      v5 = 0;
      do
      {
        heap_Free((_QWORD *)v3[1], v4);
        v4 = a2[(unsigned __int16)++v5];
      }
      while (v4);
    }
    return heap_Free((_QWORD *)v3[1], (uint64_t)a2);
  }
  return result;
}

uint64_t uselect_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2229280769;
  result = 0;
  *a2 = &IUselect;
  return result;
}

uint64_t get_f0(uint64_t a1, unsigned int a2, _DWORD *a3, int *a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v13 = 0;
  v12 = 0;
  result = uselect_splitGID(a1, a2, &v12, &v13);
  v7 = *(_DWORD *)(*(_QWORD *)v12 + 2604);
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      v8 = *(_QWORD *)(v12 + 192) + v13 * *(unsigned __int8 *)(v12 + 200);
      *a3 = *(unsigned __int8 *)(v8 + 16);
      v9 = (unsigned __int8 *)(v8 + 17);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (!*(_DWORD *)(*(_QWORD *)v12 + 2656))
  {
LABEL_6:
    v10 = *(_QWORD *)(v12 + 192) + v13 * *(unsigned __int8 *)(v12 + 200);
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v12 + 192) + v13 * *(unsigned __int8 *)(v12 + 200);
LABEL_7:
  *a3 = *(unsigned __int8 *)(v10 + 4);
  v9 = (unsigned __int8 *)(v10 + 5);
LABEL_8:
  v11 = *v9;
  *a4 = v11;
  if (*a3)
  {
    *a3 = ScaledLogToHz[3 * *a3 - 270];
    v11 = *a4;
  }
  if (v11)
    *a4 = ScaledLogToHz[3 * v11 - 270];
  return result;
}

uint64_t uselect_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2229280775;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 34633;
  }
  return result;
}

uint64_t uselect_ClassClose()
{
  return 0;
}

uint64_t uselect_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Param;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = 0;
  v39 = 0;
  *a5 = 0;
  *((_DWORD *)a5 + 2) = 0;
  inited = InitRsrcFunction(a3, a4, &v39);
  if ((inited & 0x80000000) != 0)
    return inited;
  v11 = 2229280778;
  if ((safeh_HandleCheck(a1, a2, 34633, 408) & 0x80000000) != 0)
    return 2229280776;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v39 + 8), 1, 952);
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(v39 + 32), (uint64_t)"USELECT", 19000, 0, v13, v14, v15, v16, v34);
    return v11;
  }
  v17 = (uint64_t)v12;
  *v12 = a3;
  v12[1] = a4;
  v18 = v39;
  v12[2] = v39;
  v12[3] = a1;
  *a5 = (uint64_t)v12;
  *((_DWORD *)a5 + 2) = 34632;
  v19 = heap_Calloc(*(_QWORD **)(v18 + 8), 1, 3656);
  *(_QWORD *)(v17 + 776) = v19;
  if (!v19)
  {
    log_OutPublic(*(_QWORD *)(v39 + 32), (uint64_t)"USELECT", 19000, 0, v20, v21, v22, v23, v34);
    goto LABEL_30;
  }
  Param = uselect_ObjReopen((_WORD **)*a5, a5[1]);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "minphrase", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselearlyemission", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectusetriphonecache", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectweightnoreusebias", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectweightdurationbias", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectweightpitchbias", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectonlinereduction", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectmaxcandspruning", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v25 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v25, "minphrase", &v35);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v26 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v26, "uselearlyemission", &v35);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v27 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v27, "uselectusetriphonecache", &v35);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v28 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v28, "uselectweightnoreusebias", &v35);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v29 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v29, "uselectweightdurationbias", &v35);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v30 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v30, "uselectweightpitchbias", &v35);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v31 = *(_QWORD *)(v39 + 40);
  *(_QWORD *)&v35 = v17;
  *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v36 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v31, "uselectonlinereduction", &v35);
  if ((Param & 0x80000000) != 0
    || (v32 = *(_QWORD *)(v39 + 40),
        *(_QWORD *)&v35 = v17,
        *((_QWORD *)&v35 + 1) = uselect_ParamCheckChange,
        *(_QWORD *)&v36 = uselect_ParamLearnChange,
        Param = paramc_ListenerAdd(v32, "uselectmaxcandspruning", &v35),
        (Param & 0x80000000) != 0)
    || (Param = objc_GetObject(*(_QWORD *)(v39 + 48), (uint64_t)"SYNTHSTREAM", &v38), (Param & 0x80000000) != 0))
  {
LABEL_27:
    v11 = Param;
    goto LABEL_30;
  }
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v38 + 8);
  *((_QWORD *)&v35 + 1) = &IUselect;
  *(_QWORD *)&v35 = 1;
  v36 = *(_OWORD *)a5;
  v37 = 0;
  v11 = objc_RegisterObject(*(_QWORD *)(v39 + 48), (uint64_t)"USELECT", &v35);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_30:
    uselect_ObjClose(*a5, a5[1]);
    *a5 = 0;
    *((_DWORD *)a5 + 2) = 0;
    return v11;
  }
  *(_DWORD *)(v17 + 32) = 1;
  return v11;
}

uint64_t uselect_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t (*v35)(uint64_t, char *);

  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 88))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    v3 = *(_QWORD *)(a1 + 816);
    if (v3 && *(_QWORD *)(a1 + 40))
    {
      v4 = *(unsigned __int8 *)(a1 + 908);
      if (*(_BYTE *)(a1 + 908))
      {
        v5 = 0;
        v6 = 24;
        do
        {
          if (*(_QWORD *)(v3 + v6))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v3 + v6));
            v3 = *(_QWORD *)(a1 + 816);
            *(_QWORD *)(v3 + v6) = 0;
            v4 = *(unsigned __int8 *)(a1 + 908);
          }
          ++v5;
          v6 += 112;
        }
        while (v5 < 3 * (unint64_t)v4);
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v3);
      *(_QWORD *)(a1 + 816) = 0;
    }
    v7 = *(_QWORD *)(a1 + 856);
    if (v7)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v7);
      *(_QWORD *)(a1 + 856) = 0;
    }
    v8 = *(_QWORD *)(a1 + 864);
    if (v8)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v8);
      *(_QWORD *)(a1 + 864) = 0;
    }
    v9 = *(_QWORD *)(a1 + 888);
    if (v9)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v9);
      *(_QWORD *)(a1 + 888) = 0;
    }
    v10 = *(_QWORD *)(a1 + 896);
    if (v10)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v10);
      *(_QWORD *)(a1 + 896) = 0;
    }
    v11 = *(_QWORD *)(a1 + 936);
    if (v11)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11);
      *(_QWORD *)(a1 + 936) = 0;
    }
    v12 = *(_QWORD *)(a1 + 944);
    if (v12)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v12);
      *(_QWORD *)(a1 + 944) = 0;
    }
    uselect_ResetUnitSelector(a1, 0);
    v13 = *(_QWORD **)(a1 + 776);
    if (v13)
    {
      DeallocBufferUnitSelector((_QWORD *)a1, v13);
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 776));
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v14, "minphrase", &v34);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v15, "uselearlyemission", &v34);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v16, "uselectusetriphonecache", &v34);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v17, "uselectweightnoreusebias", &v34);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v18, "uselectweightdurationbias", &v34);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v19, "uselectweightpitchbias", &v34);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v20, "uselectonlinereduction", &v34);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v21, "uselectmaxcandspruning", &v34);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v23 = *(_BYTE **)(a1 + 80);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v22, v23, &v34);
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
    v24 = *(_QWORD *)(a1 + 80);
    if (v24)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
      *(_QWORD *)(a1 + 80) = 0;
    }
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectrawdataversion", &byte_1DEBD87CE);
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectreductionversion", &byte_1DEBD87CE);
    v25 = *(_QWORD *)(a1 + 40);
    if (v25)
    {
      v26 = *(_QWORD *)(a1 + 24);
      if (!v26 || (v27 = *(_QWORD *)(v26 + 48)) == 0)
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
      objc_ReleaseObject(v27, v25 + 152);
    }
    v28 = *(_DWORD *)(a1 + 48);
    if (v28 >= 2)
    {
      v29 = v28 - 1;
      do
        uselect_RemoveDataPartClose(a1, v29--);
      while (v29);
    }
    v30 = *(uint64_t **)(a1 + 72);
    if (v30)
    {
      if (!*v30
        || (heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *v30),
            **(_QWORD **)(a1 + 72) = 0,
            (v30 = *(uint64_t **)(a1 + 72)) != 0))
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v30);
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
    v31 = *(_QWORD *)(a1 + 56);
    if (v31)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v31);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v32 = *(_QWORD *)(a1 + 64);
    if (v32)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v32);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (*(_DWORD *)(a1 + 32) == 1)
      objc_UnregisterObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"USELECT");
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
  }
  return 0;
}

uint64_t uselect_ObjReopen(_WORD **a1, int a2)
{
  uint64_t BrokerString;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AddRefCountedObject;
  _WORD *v30;
  _QWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  size_t v36;
  int v37;
  char *v38;
  char *v39;
  int v40;
  const char *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  unsigned int v56;
  int v57;
  uint64_t v59;
  __int128 v60;
  uint64_t (*v61)(uint64_t, char *);
  char *__s1;
  char *__s;
  int v64;
  char __s2[256];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v64 = 0;
  __s1 = 0;
  __s = 0;
  __s2[0] = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
  BrokerString = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    v4 = (const char *)a1[5];
    if (v4)
    {
      v5 = BrokerString;
      if (!strcmp(v4 + 152, __s2))
        goto LABEL_21;
    }
  }
  v6 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 1, 0);
  if ((v6 & 0x80000000) != 0)
  {
    __s2[0] = 0;
  }
  else
  {
    v5 = v6;
    v7 = (const char *)a1[5];
    if (!v7 || strcmp(v7 + 152, __s2))
    {
      v8 = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v64);
      v9 = v8;
      if (!v64)
        __s2[0] = 0;
      if ((v8 & 0x80001FFF) == 0x8000000A)
        return v9;
    }
    if (__s2[0])
      goto LABEL_21;
  }
  v10 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  v5 = v10;
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v64);
  v9 = v11;
  if (!v64)
    __s2[0] = 0;
  if ((v11 & 0x80001FFF) != 0x8000000A)
  {
    if (__s2[0]
      || (v5 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 1),
          v9 = v5,
          (v5 & 0x80000000) == 0))
    {
LABEL_21:
      v12 = (const char *)a1[5];
      if (!v12)
        goto LABEL_47;
      v9 = v5;
      if (strcmp(v12 + 152, __s2))
      {
        DeallocUnitSelectorMemory_NRowsDependency(a1);
        v13 = (uint64_t)a1[107];
        if (v13)
        {
          heap_Free(*((_QWORD **)a1[2] + 1), v13);
          a1[107] = 0;
        }
        v14 = (uint64_t)a1[111];
        if (v14)
        {
          heap_Free(*((_QWORD **)a1[2] + 1), v14);
          a1[111] = 0;
        }
        v15 = (uint64_t)a1[112];
        if (v15)
        {
          heap_Free(*((_QWORD **)a1[2] + 1), v15);
          a1[112] = 0;
        }
        uselect_ResetUnitSelector((uint64_t)a1, 0);
        v16 = a1[3];
        if (!v16 || (v17 = *((_QWORD *)v16 + 6)) == 0)
          v17 = *((_QWORD *)a1[2] + 6);
        v9 = objc_ReleaseObject(v17, (uint64_t)(a1[5] + 76));
        a1[5] = 0;
        *(_QWORD *)a1[97] = 0;
        v18 = *((_DWORD *)a1 + 12);
        if (v18 >= 2)
        {
          v19 = v18 - 1;
          do
            uselect_RemoveDataPartClose((uint64_t)a1, v19--);
          while (v19);
        }
        v20 = (uint64_t *)a1[9];
        if (v20)
        {
          if (!*v20
            || (heap_Free(*((_QWORD **)a1[2] + 1), *v20), *(_QWORD *)a1[9] = 0, (v20 = (uint64_t *)a1[9]) != 0))
          {
            heap_Free(*((_QWORD **)a1[2] + 1), (uint64_t)v20);
            a1[9] = 0;
          }
        }
        v21 = (uint64_t)a1[7];
        if (v21)
        {
          heap_Free(*((_QWORD **)a1[2] + 1), v21);
          a1[7] = 0;
        }
        v22 = (uint64_t)a1[8];
        if (v22)
        {
          heap_Free(*((_QWORD **)a1[2] + 1), v22);
          a1[8] = 0;
        }
        *((_DWORD *)a1 + 12) = 0;
        v23 = *((_QWORD *)a1[2] + 5);
        v24 = a1[10];
        *(_QWORD *)&v60 = a1;
        *((_QWORD *)&v60 + 1) = uselect_ParamCheckChange;
        v61 = uselect_ParamLearnChange;
        paramc_ListenerRemove(v23, v24, &v60);
        v25 = (uint64_t)a1[10];
        if (v25)
        {
          heap_Free(*((_QWORD **)a1[2] + 1), v25);
          a1[10] = 0;
        }
        if ((v9 & 0x80000000) == 0 && !a1[5])
        {
LABEL_47:
          v59 = 0;
          v26 = a1[3];
          if (v26 && (v27 = *((_QWORD *)v26 + 6)) != 0)
          {
            v28 = (uint64_t)a1[2];
          }
          else
          {
            v28 = (uint64_t)a1[2];
            v27 = *(_QWORD *)(v28 + 48);
          }
          AddRefCountedObject = objc_GetAddRefCountedObject(v27, (uint64_t)__s2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))uselect_ObjcVoiceClose, v28, &v59);
          if ((AddRefCountedObject & 0x80000000) != 0)
            return AddRefCountedObject;
          v9 = 2229280778;
          v30 = *(_WORD **)(v59 + 32);
          a1[5] = v30;
          *(_QWORD *)a1[97] = v30;
          *((_DWORD *)a1 + 12) = 1;
          v31 = (_QWORD *)heap_Calloc(*((_QWORD **)a1[2] + 1), 1, 8);
          a1[7] = v31;
          if (v31)
          {
            *v31 = *((_QWORD *)a1[5] + 444);
            v32 = (_DWORD *)heap_Calloc(*((_QWORD **)a1[2] + 1), *((unsigned int *)a1 + 12), 4);
            a1[8] = v32;
            if (v32)
            {
              *v32 = 0;
              v33 = heap_Calloc(*((_QWORD **)a1[2] + 1), *((unsigned int *)a1 + 12), 8);
              a1[9] = (_WORD *)v33;
              if (v33)
              {
                *(_QWORD *)a1[9] = heap_Calloc(*((_QWORD **)a1[2] + 1), 1, 1);
                v34 = (paramc_ParamGetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"voiceoperatingpoint", &__s) & 0x80000000) != 0
                    ? 0
                    : strlen(__s) + 1;
                if ((paramc_ParamGetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"vopversion", &__s1) & 0x80000000) != 0
                  || (v35 = __s1, !strcmp(__s1, "0.0.0")))
                {
                  v36 = 0;
                }
                else
                {
                  v36 = strlen(v35) + 1;
                }
                v37 = strlen((const char *)a1[5]);
                v38 = (char *)heap_Calloc(*((_QWORD **)a1[2] + 1), 1, (v34 + v36 + v37 + 14));
                a1[10] = v38;
                if (v38)
                {
                  strcpy(v38, "voiceaddons.");
                  v39 = (char *)a1[10];
                  v40 = strlen(v39);
                  v41 = (const char *)a1[5];
                  if (*v41)
                  {
                    v42 = v40;
                    v43 = 0;
                    v44 = 0;
                    do
                    {
                      *((_BYTE *)a1[10] + v42 + v44) = __tolower(v41[v43]);
                      v41 = (const char *)a1[5];
                      v43 = ++v44;
                    }
                    while (strlen(v41) > v44);
                    v39 = (char *)a1[10];
                  }
                  if (v34)
                  {
                    *(_WORD *)&v39[strlen(v39)] = 46;
                    strcat((char *)a1[10], __s);
                    v39 = (char *)a1[10];
                  }
                  if (v36)
                  {
                    *(_WORD *)&v39[strlen(v39)] = 46;
                    strcat((char *)a1[10], __s1);
                    v39 = (char *)a1[10];
                  }
                  AddRefCountedObject = uselect_GetParam((uint64_t)a1, v39, 1);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  v45 = *((_QWORD *)a1[2] + 5);
                  v46 = a1[10];
                  *(_QWORD *)&v60 = a1;
                  *((_QWORD *)&v60 + 1) = uselect_ParamCheckChange;
                  v61 = uselect_ParamLearnChange;
                  AddRefCountedObject = paramc_ListenerAdd(v45, v46, &v60);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  AddRefCountedObject = uselect_GetParam((uint64_t)a1, "uselectmaxcandspruning", 0);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  AddRefCountedObject = uselect_ResetUnitSelector((uint64_t)a1, 500);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  v47 = heap_Calloc(*((_QWORD **)a1[2] + 1), 1, 74);
                  a1[107] = (_WORD *)v47;
                  v52 = a1[2];
                  if (v47)
                  {
                    v53 = heap_Calloc(*((_QWORD **)v52 + 1), 1, 160);
                    a1[111] = (_WORD *)v53;
                    v52 = a1[2];
                    if (v53)
                    {
                      v54 = heap_Calloc(*((_QWORD **)v52 + 1), (unsigned __int16)a1[5][1483], 24);
                      a1[112] = (_WORD *)v54;
                      if (v54)
                      {
                        v55 = a1[5];
                        v56 = *((_DWORD *)v55 + 770);
                        if ((v56 & 0x80000000) != 0 && (v56 = *((_DWORD *)v55 + 769), (v56 & 0x80000000) != 0))
                          v57 = 5000;
                        else
                          v57 = 5 * *(_DWORD *)(*((_QWORD *)v55 + 371) + 32 * v56 + 4);
                        *((_DWORD *)a1 + 226) = v57;
                        AddRefCountedObject = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectrawdataversion", (char *)v55 + 64);
                        if ((AddRefCountedObject & 0x80000000) == 0)
                          return paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectreductionversion", (char *)a1[5] + 140);
                        return AddRefCountedObject;
                      }
                      v52 = a1[2];
                    }
                  }
                  log_OutPublic(*((_QWORD *)v52 + 4), (uint64_t)"USELECT", 19000, 0, v48, v49, v50, v51, v59);
                }
              }
            }
          }
          else
          {
            *((_DWORD *)a1 + 12) = 0;
          }
        }
      }
    }
  }
  return v9;
}

uint64_t uselect_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) == 0)
  {
    *(_WORD *)(a1 + 736) = 0;
    *(_BYTE *)(a1 + 744) = 1;
    v7 = *(_DWORD *)(a1 + 752);
    if (!v7 || v7 != 1 && (v7 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 2616), v7 != 1))
      v7 = 0;
    v8 = 0;
    v9 = "application/x-realspeak-feat-vector";
    *(_DWORD *)(a1 + 756) = v7;
    while (1)
    {
      if (*(unsigned __int16 *)(a1 + 736) > 0xFuLL)
        goto LABEL_22;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 88) + 64))(a3, a4, 78, v9, 0, 0, a1 + 40 * *(unsigned __int16 *)(a1 + 736) + 104);
      if ((v10 & 0x80000000) != 0)
      {
        v12 = v10;
        if (strncmp(v9, "application/x-realspeak-cspp-", 0x1DuLL)
          && strcmp(v9, "application/x-realspeak-usnoreusebias;version=4.0")
          && strcmp(v9, "application/x-realspeak-usprosodybias;version=4.0")
          && strcmp(v9, "application/x-realspeak-usfrozen;version=4.0"))
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19001, "%s%s", v13, v14, v15, v16, "layer");
LABEL_35:
          v24 = v12;
          if (!*(_WORD *)(a1 + 736))
          {
LABEL_32:
            *(_WORD *)(a1 + 736) = 0;
            return v12;
          }
LABEL_23:
          v25 = 0;
          v26 = (_QWORD *)(a1 + 96);
          do
          {
            v27 = v26[1];
            if (v27
              && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v27, v26[2]) & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, "%s%s", v28, v29, v30, v31, "layer");
            }
            v32 = v26[3];
            if (v32
              && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v32, v26[4]) & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, "%s%s", v33, v34, v35, v36, "layer");
            }
            ++v25;
            v26 += 5;
          }
          while (v25 < *(unsigned __int16 *)(a1 + 736));
          v12 = v24;
          goto LABEL_32;
        }
      }
      else
      {
        v11 = *(_WORD *)(a1 + 736);
        *(_QWORD *)(a1 + 40 * v11 + 96) = v9;
        *(_WORD *)(a1 + 736) = v11 + 1;
      }
      v9 = uselect_ProcessStart_szINPUT_STREAMS[++v8];
      if (v8 == 4)
      {
        v17 = "application/x-realspeak-usmarkers-u16;version=4.0";
        v18 = 1u;
        while (*(unsigned __int16 *)(a1 + 736) <= 0xFuLL)
        {
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 88) + 64))(a3, a4, 78, v17, 0, 1, a1 + 40 * *(unsigned __int16 *)(a1 + 736) + 120);
          if ((v12 & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19002, "%s%s", v19, v20, v21, v22, "layer");
            goto LABEL_35;
          }
          v23 = *(_WORD *)(a1 + 736);
          *(_QWORD *)(a1 + 40 * v23 + 96) = v17;
          *(_WORD *)(a1 + 736) = v23 + 1;
          v17 = uselect_ProcessStart_szOUTPUT_STREAMS[v18++];
          if (v18 == 7)
            return v12;
        }
LABEL_22:
        v24 = 2229280777;
        goto LABEL_23;
      }
    }
  }
  return 2229280776;
}

uint64_t uselect_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int16 *v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  char v158;
  void *__src;
  int v160;
  size_t __n;

  __n = 0;
  v7 = -2065686521;
  v160 = 0;
  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  __src = 0;
  v158 = 0;
  *a5 = 1;
  if (*(_BYTE *)(a1 + 744) != 1)
  {
    v25 = 0;
    v26 = *(_WORD *)(a1 + 748);
    *(_WORD *)(a1 + 746) = v26;
    v27 = *(_DWORD *)(a1 + 768);
    goto LABEL_16;
  }
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, char *, int *))(*(_QWORD *)(a1 + 88) + 144))(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), (char *)&__n + 4, &v160);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (HIDWORD(__n))
  {
    v12 = uselect_ReadDirectStart(a1, "application/x-realspeak-feat-vector", &__src, (_DWORD *)&__n + 1);
    v17 = HIDWORD(__n);
    *(_DWORD *)(a1 + 768) = (159072863 * (unint64_t)(HIDWORD(__n) >> 5)) >> 32;
    if ((v12 & 0x80000000) == 0)
    {
      v18 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v17);
      *(_QWORD *)(a1 + 760) = v18;
      if (!v18)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v19, v20, v21, v22, v155);
        v7 = -2065686518;
        goto LABEL_145;
      }
      memcpy(v18, __src, HIDWORD(__n));
      v17 = HIDWORD(__n);
    }
    if (*(_WORD *)(a1 + 736))
    {
      v23 = 0;
      v24 = 40 * *(unsigned __int16 *)(a1 + 736);
      while (strcmp(*(const char **)(a1 + v23 + 96), "application/x-realspeak-feat-vector"))
      {
        v23 += 40;
        if (v24 == v23)
          goto LABEL_12;
      }
      v140 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + v23 + 104), *(_QWORD *)(a1 + v23 + 112), v17);
      if ((v140 & 0x80000000) == 0)
      {
        v141 = *(_DWORD *)(a1 + 768);
        if (v141 >> 15)
          goto LABEL_145;
        v142 = *(_QWORD *)(a1 + 776);
        *(_WORD *)(v142 + 3524) = *(_WORD *)(*(_QWORD *)(a1 + 40) + 3578) * v141;
        v143 = uselect_ReadDirectStart(a1, "application/x-realspeak-usfrozen;version=4.0",
                 (_QWORD *)(v142 + 3632),
                 &__n);
        v144 = *(_QWORD *)(a1 + 776);
        if (v143 < 0)
          *(_QWORD *)(v144 + 3632) = 0;
        if ((uselect_ReadDirectStart(a1, "application/x-realspeak-usnoreusebias;version=4.0",
                (_QWORD *)(v144 + 3640),
                &__n) & 0x80000000) != 0)
        {
          v145 = *(_QWORD *)(a1 + 776);
          *(_QWORD *)(v145 + 3640) = 0;
        }
        else
        {
          v145 = *(_QWORD *)(a1 + 776);
          if (__n / 0x1F8 != *(unsigned __int16 *)(v145 + 3524))
          {
            *(_QWORD *)(v145 + 3640) = 0;
            goto LABEL_145;
          }
        }
        if ((uselect_ReadDirectStart(a1, "application/x-realspeak-usprosodybias;version=4.0",
                (_QWORD *)(v145 + 3648),
                &__n) & 0x80000000) != 0)
        {
          v146 = *(_QWORD *)(a1 + 776);
          *(_QWORD *)(v146 + 3648) = 0;
        }
        else
        {
          v146 = *(_QWORD *)(a1 + 776);
          if (*(unsigned __int16 *)(v146 + 3524) != __n >> 3)
          {
            *(_QWORD *)(v146 + 3648) = 0;
            goto LABEL_145;
          }
        }
        v147 = *(_WORD *)(a1 + 768);
        *(_WORD *)(v146 + 10) = v147;
        *(_WORD *)(v146 + 3524) = *(_WORD *)(*(_QWORD *)(a1 + 40) + 3578) * v147;
        v52 = AllocBufferUnitSelector(a1, v146);
        if ((v52 & 0x80000000) != 0)
          goto LABEL_144;
        v27 = *(_DWORD *)(a1 + 768);
        if (v27)
        {
          v149 = *(_QWORD *)(a1 + 40);
          v150 = (unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 2);
          v151 = *(unsigned int *)(a1 + 768);
          do
          {
            v152 = *v150;
            if (*(unsigned __int8 *)(v149 + v152 + 2144) != 255
              && !*(_DWORD *)(v149 + 2684)
              && !*(_WORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 56) + 120)
                           + 2 * (int)(2 * (v152 - *(unsigned __int8 *)(v149 + 2496)))))
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19009, "%s%d", v148, v8, v9, v10, "phoneme");
              v7 = -2065686500;
              goto LABEL_145;
            }
            v150 += 864;
            --v151;
          }
          while (v151);
          if (v27 == 2)
          {
            v153 = *(_QWORD *)(a1 + 760);
            if (*(_BYTE *)(v153 + 2) == 35)
            {
              v25 = *(unsigned __int8 *)(v153 + 866) == 35;
              goto LABEL_150;
            }
          }
        }
        v25 = 0;
LABEL_150:
        v26 = 0;
        *(_WORD *)(a1 + 746) = 0;
LABEL_16:
        v28 = v27 - 1;
        *(_WORD *)(a1 + 748) = v27 - 1;
        v29 = *(_DWORD *)(a1 + 740);
        if (v29 < 1 || (v30 = v29 + v26 + 1, v30 >= v28))
        {
LABEL_23:
          LOWORD(v31) = v27 - 1;
        }
        else
        {
          v31 = v30;
          v32 = (unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 864 * v30 + 2);
          while (1)
          {
            v33 = *v32;
            if (v33 == 35)
              break;
            if (*(_DWORD *)(a1 + 756) == 1)
            {
              v34 = *(_QWORD *)(a1 + 40);
              if (*(_BYTE *)(v34 + *(unsigned __int8 *)(v34 + v33 + 2144) + 1630) == 83)
                goto LABEL_115;
            }
            v32 += 864;
            if (++v31 >= v28)
              goto LABEL_23;
          }
          v34 = *(_QWORD *)(a1 + 40);
LABEL_115:
          *(_WORD *)(a1 + 748) = v31;
          if (!*(_DWORD *)(v34 + 2616))
            *(_DWORD *)(a1 + 756) = 0;
        }
        if ((__int16)v27 - 1 <= (__int16)v31)
        {
          if (*(_BYTE *)(a1 + 744) == 1)
            v36 = 5;
          else
            v36 = 4;
          *(_BYTE *)(a1 + 744) = v36;
          v35 = 1;
        }
        else
        {
          v35 = 2;
        }
        *a5 = v35;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 3, 0, (uint64_t)"uselect phonemes %d -> %d, state %x", v8, v9, v10, *(__int16 *)(a1 + 746));
        if (v25)
        {
          v37 = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(v37 + 2684))
          {
            v38 = *(unsigned __int8 *)(v37 + 2497);
            v39 = *(unsigned __int8 *)(v37 + 2496);
            v40 = (v38 - v39 + 1);
            v41 = **(_QWORD **)(a1 + 56);
            v42 = (v38 - v39 + 2);
            v43 = v42 * (35 - v39) - v39;
            v44 = (v43 + 35);
            v45 = *(_QWORD *)(v41 + 120);
            if (*(_WORD *)(v45 + 2 * v44))
              v46 = 0;
            else
              v46 = v38 > v39;
            if (v46)
            {
              do
              {
                v44 = v43 + v39;
                if (*(_WORD *)(v45 + 2 * v44))
                  break;
                LOBYTE(v39) = v39 + 1;
              }
              while (v38 > v39);
            }
            v47 = v40 + v40 * v42;
            v48 = *(_QWORD *)(v41 + 128);
            v49 = *(_DWORD *)(v48 + 4 * v44);
            v50 = *(_QWORD *)(a1 + 776);
            v51 = *(_DWORD **)(v50 + 3528);
            v51[2] = v49;
            *v51 = v49;
            LODWORD(v48) = *(_DWORD *)(v48 + 4 * (v44 + v47));
            v51[3] = v48;
            v51[1] = v48;
          }
          else
          {
            v53 = **(_QWORD **)(a1 + 56);
            v54 = *(unsigned __int8 *)(v37 + 2496);
            v55 = 70 - 2 * v54;
            v56 = *(_QWORD *)(v53 + 128);
            v50 = *(_QWORD *)(a1 + 776);
            v57 = *(_DWORD **)(v50 + 3528);
            *v57 = *(_DWORD *)(v56 + 4 * v55);
            v57[2] = *(_DWORD *)(v56 + 4 * v55);
            v58 = 71 - 2 * v54;
            LODWORD(v53) = *(unsigned __int16 *)(*(_QWORD *)(v53 + 120) + 2 * v58) - 1;
            v57[1] = v53 + *(_DWORD *)(v56 + 4 * v58);
            v57[3] = v53 + *(_DWORD *)(v56 + 4 * v58);
          }
          v59 = *(_QWORD **)(v50 + 3536);
          *v59 = 0;
          v59[1] = 0;
LABEL_45:
          v60 = *(__int16 *)(a1 + 748) - *(__int16 *)(a1 + 746) + 1;
          v61 = 2 * v60;
          v62 = *(unsigned __int16 *)(v37 + 3578);
          if (2 * v60 * v62 >= 1)
          {
            v63 = 0;
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536);
            do
            {
              v65 = v63 + 2 * v62 * *(__int16 *)(a1 + 746);
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              if (v66 < 0x5B)
              {
                *(_WORD *)(v64 + 2 * v65) = 0;
              }
              else
              {
                *(_WORD *)(v64 + 2 * v65) = v66 - 90;
                v67 = v63 + 2 * *(__int16 *)(a1 + 746) * *(unsigned __int16 *)(v37 + 3578);
                *(_WORD *)(v64 + 2 * v67) *= 3;
              }
              v62 = *(unsigned __int16 *)(v37 + 3578);
              v68 = (v61 * v62);
              ++v63;
            }
            while ((int)v63 < (int)v68);
            if ((int)v68 >= 1)
            {
              v69 = 0;
              v70 = 0;
              v71 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536) + 4
                                                                                     * v62
                                                                                     * *(__int16 *)(a1 + 746));
              do
              {
                v72 = *v71++;
                v70 += v72;
                if (v72)
                  ++v69;
                --v68;
              }
              while (v68);
              if (v70)
                v73 = v69 == 0;
              else
                v73 = 1;
              if (!v73)
              {
                v74 = 0;
                v75 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536);
                v76 = v70 / v69;
                do
                {
                  v77 = v74 + 2 * v62 * *(__int16 *)(a1 + 746);
                  if (100 * *(unsigned __int16 *)(v75 + 2 * v77) / v76 - 201 <= 0xFFFFFF68)
                  {
                    *(_WORD *)(v75 + 2 * v77) = 0;
                    v62 = *(unsigned __int16 *)(v37 + 3578);
                  }
                  ++v74;
                }
                while ((int)v74 < v61 * v62);
              }
            }
          }
          smooth_f0(*(_QWORD *)(a1 + 16), (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536) + 4 * *(__int16 *)(a1 + 746) * v62), 2 * v60, 2u);
          v82 = *(_QWORD *)(a1 + 40);
          v83 = *(unsigned __int16 *)(v82 + 3578);
          if (v60 * v83 >= 1)
          {
            v84 = 0;
            v85 = *(_QWORD **)(a1 + 776);
            do
            {
              v156 = 0;
              v157 = 0;
              get_f0(a1, *(_DWORD *)(v85[441] + 4 * (v84 + *(__int16 *)(a1 + 746) * (uint64_t)v83)), &v157, (int *)&v156);
              v85 = *(_QWORD **)(a1 + 776);
              v86 = v85[443];
              v82 = *(_QWORD *)(a1 + 40);
              *(_WORD *)(v86 + 2 * (int)(2 * (v84 + *(unsigned __int16 *)(v82 + 3578) * *(__int16 *)(a1 + 746)))) = 1000;
              v87 = *(_WORD *)(a1 + 746);
              v88 = *(unsigned __int16 *)(v82 + 3578);
              if (v157)
              {
                v89 = 2 * (v84 + v88 * *(__int16 *)(a1 + 746));
                v90 = *(unsigned __int16 *)(v85[442] + 2 * v89);
                if ((v90 - 256) >= 0xFFFFFF01)
                {
                  *(_WORD *)(v86 + 2 * v89) = 1000 * ScaledLogToHz[v90] / v157;
                  v87 = *(_WORD *)(a1 + 746);
                  v88 = *(unsigned __int16 *)(v82 + 3578);
                }
              }
              *(_WORD *)(v86 + 2 * (int)((2 * (v84 + v88 * v87)) | 1)) = 1000;
              v83 = *(unsigned __int16 *)(v82 + 3578);
              v91 = v60 * v83;
              if ((int)v84 + 1 < v60 * v83 && v156 != 0)
              {
                v93 = 2 * (v84 + *(__int16 *)(a1 + 746) * v83);
                v94 = *(unsigned __int16 *)(v85[442] + 2 * (v93 + 2));
                if ((v94 - 256) >= 0xFFFFFF01)
                {
                  *(_WORD *)(v86 + 2 * (v93 | 1)) = 1000 * ScaledLogToHz[v94] / v156;
                  v83 = *(unsigned __int16 *)(v82 + 3578);
                  v91 = v60 * v83;
                }
              }
              ++v84;
            }
            while ((int)v84 < v91);
          }
          if (v61 * v83 >= 1)
          {
            v95 = 0;
            v96 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3544);
            do
            {
              v97 = v95 + 2 * v83 * *(__int16 *)(a1 + 746);
              if (*(unsigned __int16 *)(v96 + 2 * v97) - 1301 <= 0xFFFFFDD8)
              {
                *(_WORD *)(v96 + 2 * v97) = 1000;
                v83 = *(unsigned __int16 *)(v82 + 3578);
              }
              ++v95;
            }
            while ((int)v95 < v61 * v83);
          }
          LOBYTE(v157) = *(_BYTE *)(a1 + 744);
          LOBYTE(v156) = 0;
          v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts", (uint64_t)&v157, 1, v78, v79, v80, v81);
          if ((v52 & 0x80000000) == 0)
          {
            v158 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 2497);
            if (v60 < 1)
            {
              v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts",
                      (uint64_t)&v156,
                      1,
                      v98,
                      v99,
                      v100,
                      v101);
              if ((v52 & 0x80000000) == 0)
              {
LABEL_106:
                v128 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 3578);
                v52 = uselect_Write(a1, "application/x-realspeak-usids;version=4.0",
                        *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3528) + 4 * v128 * *(__int16 *)(a1 + 746),
                        (4 * v60 * v128),
                        v112,
                        v113,
                        v114,
                        v115);
                if ((v52 & 0x80000000) == 0)
                {
                  v133 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 3578);
                  v7 = uselect_Write(a1, "application/x-realspeak-targf0;version=4.0",
                         *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3544) + 4 * *(__int16 *)(a1 + 746) * v133,
                         (4 * v60 * v133),
                         v129,
                         v130,
                         v131,
                         v132);
                  if ((v7 & 0x80000000) == 0)
                  {
                    if (v60 < 1)
                    {
LABEL_112:
                      *(_WORD *)(*(_QWORD *)(a1 + 760) + 864 * *(__int16 *)(a1 + 748)) = 0;
                      v139 = *(unsigned __int8 *)(a1 + 744);
                      if (v139 == 1)
                      {
                        *(_BYTE *)(a1 + 744) = 2;
                      }
                      else if ((v139 & 4) != 0)
                      {
                        *(_BYTE *)(a1 + 744) = 1;
                        DeallocBufferUnitSelector((_QWORD *)a1, *(_QWORD **)(a1 + 776));
                        *(_DWORD *)(a1 + 768) = 0;
                      }
                    }
                    else
                    {
                      v138 = 0;
                      while (1)
                      {
                        v7 = uselect_Write(a1, "application/x-realspeak-usplosives;version=4.0",
                               *(_QWORD *)(a1 + 760) + 864 * (v138 + *(__int16 *)(a1 + 746)) + 12,
                               1,
                               v134,
                               v135,
                               v136,
                               v137);
                        if ((v7 & 0x80000000) != 0)
                          break;
                        if (v60 == (_DWORD)++v138)
                          goto LABEL_112;
                      }
                    }
                  }
                  goto LABEL_145;
                }
              }
            }
            else
            {
              v102 = 0;
              while (1)
              {
                v52 = uselect_Write(a1, "application/x-realspeak-usmarkers-u16;version=4.0",
                        *(_QWORD *)(a1 + 760) + 864 * (v102 + *(__int16 *)(a1 + 746)),
                        2,
                        v98,
                        v99,
                        v100,
                        v101);
                if ((v52 & 0x80000000) != 0)
                  break;
                v107 = *(_QWORD *)(a1 + 760);
                v108 = v102 + *(__int16 *)(a1 + 746);
                v109 = v107 + 864 * v108;
                v111 = *(unsigned __int8 *)(v109 + 2);
                v110 = (char *)(v109 + 2);
                if (v111 == 35
                  && ((*(_DWORD *)(v107 + 864 * v108 + 4) & 0x80000000) == 0
                   || (*(_DWORD *)(v107 + 864 * v108 + 8) & 0x80000000) == 0))
                {
                  v110 = &v158;
                }
                v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts",
                        (uint64_t)v110,
                        1,
                        v103,
                        v104,
                        v105,
                        v106);
                if ((v52 & 0x80000000) != 0)
                  break;
                if (v60 == (_DWORD)++v102)
                {
                  v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts",
                          (uint64_t)&v156,
                          1,
                          v98,
                          v99,
                          v100,
                          v101);
                  if ((v52 & 0x80000000) == 0)
                  {
                    v116 = 0;
                    while (1)
                    {
                      v52 = uselect_Write(a1, "application/x-realspeak-usdurs;version=4.0",
                              *(_QWORD *)(a1 + 760) + 864 * (v116 + *(__int16 *)(a1 + 746)) + 50,
                              2,
                              v112,
                              v113,
                              v114,
                              v115);
                      if ((v52 & 0x80000000) != 0)
                        break;
                      if (v60 == (_DWORD)++v116)
                        goto LABEL_106;
                    }
                  }
                  goto LABEL_144;
                }
              }
            }
          }
          goto LABEL_144;
        }
        v52 = uselect_ResetUnitSelector(a1, *(__int16 *)(*(_QWORD *)(a1 + 776) + 3524));
        if ((v52 & 0x80000000) == 0)
        {
          v52 = uselect_ProcessUnitSelector(a1);
          if ((v52 & 0x80000000) == 0)
          {
            v37 = *(_QWORD *)(a1 + 40);
            goto LABEL_45;
          }
        }
LABEL_144:
        v7 = v52;
LABEL_145:
        if ((v7 & 0x1FFF) == 0x80B)
          return 0;
        else
          return v7;
      }
      v7 = v140;
    }
    else
    {
LABEL_12:
      v7 = -2065686508;
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19004, "%s%s", v13, v14, v15, v16, "layer");
    goto LABEL_145;
  }
  if (v160)
  {
    *a5 = 1;
    v117 = *(unsigned __int16 *)(a1 + 736);
    if (*(_WORD *)(a1 + 736))
    {
      v118 = 0;
      v119 = (_QWORD *)(a1 + 128);
      do
      {
        v120 = *(v119 - 1);
        if (v120)
        {
          v121 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v120, *v119);
          if ((v121 & 0x80000000) != 0)
          {
            v126 = v121;
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, "%s%s", v122, v123, v124, v125, "layer");
            v11 = v126;
          }
          *(v119 - 1) = safeh_GetNullHandle();
          *v119 = v127;
          v117 = *(unsigned __int16 *)(a1 + 736);
        }
        ++v118;
        v119 += 5;
      }
      while (v118 < v117);
    }
  }
  else
  {
    *a5 = 0;
  }
  return v11;
}

uint64_t uselect_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = safeh_HandleCheck(a1, a2, 34632, 952);
  if ((v3 & 0x80000000) != 0)
    return 2229280776;
  v4 = v3;
  DeallocBufferUnitSelector((_QWORD *)a1, *(_QWORD **)(a1 + 776));
  if (*(_WORD *)(a1 + 736))
  {
    v5 = 0;
    v6 = (_QWORD *)(a1 + 128);
    do
    {
      v7 = *(v6 - 3);
      if (v7)
      {
        v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v7, *(v6 - 2));
        if ((v8 & 0x80000000) != 0)
        {
          v13 = v8;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, "%s%s", v9, v10, v11, v12, "layer");
          v4 = v13;
        }
        *(v6 - 3) = safeh_GetNullHandle();
        *(v6 - 2) = v14;
      }
      v15 = *(v6 - 1);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v15, *v6);
        if ((v16 & 0x80000000) != 0)
        {
          v21 = v16;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, "%s%s", v17, v18, v19, v20, "layer");
          v4 = v21;
        }
        *(v6 - 1) = safeh_GetNullHandle();
        *v6 = v22;
      }
      ++v5;
      v6 += 5;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 736));
  }
  *(_WORD *)(a1 + 736) = 0;
  return v4;
}

uint64_t uselect_GetAlphabetInformation(uint64_t a1, int a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  char *v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  int v13;
  char *v14;
  char *v15;

  v5 = safeh_HandleCheck(a1, a2, 34632, 952);
  if ((v5 & 0x80000000) != 0)
    return 2229280776;
  if (!*(_QWORD *)(a1 + 40))
    return 2229280785;
  v6 = v5;
  bzero(a3, 0x985uLL);
  v7 = 0;
  for (i = 2144; i != 2400; ++i)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) != 255)
    {
      v9 = &a3[(unsigned __int16)v7];
      *v9 = i - 96;
      v9[514] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 1116);
      v9[257] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 859);
      v9[771] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 1373);
      v9[1028] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 1630);
      ++v7;
    }
  }
  __strcpy_chk();
  v10 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v10 + 3120) & 0x80000000) == 0)
  {
    strcpy(a3 + 1349, "1234");
    v10 = *(_QWORD *)(a1 + 40);
  }
  v11 = *(const char ***)(v10 + 2464);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = 0;
      v14 = a3 + 1413;
      do
      {
        v15 = strcat(v14, v12);
        *(_WORD *)&v14[strlen(v15)] = 32;
        v12 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2464) + 8 * (unsigned __int16)++v13);
      }
      while (v12);
    }
  }
  return v6;
}

uint64_t uselect_SetUserInformation(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  if (*(_QWORD *)(a1 + 40))
    return 2229280768;
  return 2229280785;
}

uint64_t uselect_QueryCapability(uint64_t a1, int a2, const char *a3, _BOOL4 *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *i;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int j;
  int v21;
  unsigned int v22;
  _BYTE *k;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned int m;
  char v30;

  v7 = 2229280768;
  v8 = safeh_HandleCheck(a1, a2, 34632, 952);
  if ((v8 & 0x80000000) != 0)
    return 2229280776;
  v9 = *(_QWORD *)(a1 + 40);
  if (!v9)
    return 2229280785;
  v10 = v8;
  if (!strcmp(a3, "PRM"))
  {
    if ((*(_DWORD *)(v9 + 3168) & 0x80000000) == 0)
    {
LABEL_24:
      v15 = 1;
      goto LABEL_25;
    }
    v14 = *(_DWORD *)(v9 + 3176);
LABEL_14:
    v15 = v14 >= 0;
LABEL_25:
    *a4 = v15;
    return v10;
  }
  if (!strcmp(a3, "BND"))
  {
    if ((*(_DWORD *)(v9 + 3172) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3176) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3180) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3184) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3188) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3192) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3196) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3200) & 0x80000000) == 0
      || (*(_DWORD *)(v9 + 3204) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    v14 = *(_DWORD *)(v9 + 3212);
    goto LABEL_14;
  }
  if (!strcmp(a3, "max-PRM"))
  {
    *(_BYTE *)a4 = 0;
    v11 = *(_QWORD *)(v9 + 2968);
    for (i = (_BYTE *)(v11 + 12); ; i += 32)
    {
      v13 = *((_DWORD *)i - 3);
      if (v13 == 30)
      {
        v17 = **(_QWORD **)(a1 + 56);
        v18 = *(_DWORD *)(v17 + 108);
        if (!v18)
          return 0;
        v19 = 0;
        for (j = 0; j < v18; ++j)
        {
          v21 = i[12];
          v22 = (*(unsigned __int8 *)(*(_QWORD *)(v17 + 160)
                                    + j * *(unsigned __int8 *)(v17 + 168)
                                    + *(i - 1)) >> *i) & v21;
          if (v22 > v19 && v22 != 4)
          {
            *(_BYTE *)a4 = (*(unsigned __int8 *)(*(_QWORD *)(v17 + 160)
                                               + j * *(unsigned __int8 *)(v17 + 168)
                                               + *(i - 1)) >> *i) & v21;
            v18 = *(_DWORD *)(v17 + 108);
            v19 = v22;
          }
          v7 = 0;
        }
        return v7;
      }
      if (!v13)
        break;
    }
    for (k = (_BYTE *)(v11 + 12); ; k += 32)
    {
      v25 = *((_DWORD *)k - 3);
      if (!v25)
        break;
      if (v25 == 32)
      {
        v26 = **(_QWORD **)(a1 + 56);
        v27 = *(_DWORD *)(v26 + 108);
        if (!v27)
          return 0;
        v28 = 0;
        for (m = 0; m < v27; ++m)
        {
          if ((k[12] & (*(unsigned __int8 *)(*(_QWORD *)(v26 + 160)
                                                             + m * *(unsigned __int8 *)(v26 + 168)
                                                             + *(k - 1)) >> *k)) >= 6u)
            v30 = 1;
          else
            v30 = 0x20202020203uLL >> (8
                                     * (k[12] & (*(unsigned __int8 *)(*(_QWORD *)(v26 + 160)
                                                                                     + m
                                                                                     * *(unsigned __int8 *)(v26 + 168)
                                                                                     + *(k - 1)) >> *k)));
          if ((v30 & 3u) > v28)
          {
            *(_BYTE *)a4 = v30;
            v27 = *(_DWORD *)(v26 + 108);
            v28 = v30;
          }
          v7 = 0;
        }
        return v7;
      }
    }
  }
  return v7;
}

uint64_t uselect_GetParam(uint64_t a1, char *__s1, int a3)
{
  const char *v6;
  uint64_t Int;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t i;
  char *v13;
  char *v14;
  const char *v15;
  int v16;
  char *v17;
  BOOL v18;
  uint64_t BrokerString;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t Str;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t UInt;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  _QWORD *v55;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  char *__s;
  char __s2[4];
  char __s1a[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!strcmp(__s1, "minphrase"))
  {
    Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"minphrase", (int *)(a1 + 740));
    if ((Int & 0x80000000) == 0)
      return Int;
    *(_DWORD *)(a1 + 740) = 10;
    if (a3)
      return paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"minphrase", 0xAu);
    return 0;
  }
  if (!strcmp(__s1, "uselearlyemission"))
  {
    *(_QWORD *)__s1a = 0;
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselearlyemission", __s1a);
    if ((Str & 0x80000000) == 0)
    {
      v41 = *(const char **)__s1a;
      if (**(_BYTE **)__s1a)
      {
        Int = Str;
        if (!strcmp(*(const char **)__s1a, "yes") || !strcmp(v41, "1"))
        {
          *(_DWORD *)(a1 + 752) = 1;
        }
        else if (!strcmp(v41, "no") || !strcmp(v41, "0"))
        {
          *(_DWORD *)(a1 + 752) = 0;
        }
        else
        {
          *(_DWORD *)(a1 + 752) = -1;
          return 2229280783;
        }
        return Int;
      }
    }
    *(_DWORD *)(a1 + 752) = -1;
    if (!a3)
      return 0;
    return paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselearlyemission", &byte_1DEBD87CE);
  }
  if (!strcmp(__s1, "uselectusetriphonecache"))
  {
    *(_DWORD *)__s1a = 0;
    v42 = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectusetriphonecache", (int *)__s1a);
    if ((v42 & 0x80000000) == 0)
    {
      Int = v42;
      *(_DWORD *)(a1 + 912) = *(_DWORD *)__s1a != 0;
      return Int;
    }
    *(_DWORD *)(a1 + 912) = 1;
    if (a3)
      return paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectusetriphonecache", 1u);
    return 0;
  }
  if (!strcmp(__s1, "uselectweightnoreusebias"))
  {
    v44 = (_DWORD *)(a1 + 916);
    UInt = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightnoreusebias", (unsigned int *)(a1 + 916));
    if ((UInt & 0x80000000) == 0)
    {
      Int = UInt;
      *v44 *= 100;
      return Int;
    }
    *v44 = 0;
    if (a3)
      return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightnoreusebias", 0);
    return 0;
  }
  if (!strcmp(__s1, "uselectweightdurationbias"))
  {
    v46 = (_DWORD *)(a1 + 920);
    v47 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightdurationbias", (unsigned int *)(a1 + 920));
    if ((v47 & 0x80000000) != 0)
    {
      *v46 = 0;
      if (!a3)
        return 0;
      Int = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightdurationbias", 0);
      if ((Int & 0x80000000) != 0 || !*v46)
        return Int;
    }
    else
    {
      Int = v47;
      v53 = *(_DWORD *)(a1 + 904) * *(_DWORD *)(a1 + 920) / 0x64u;
      *(_DWORD *)(a1 + 920) = v53;
      if (!v53)
        return Int;
    }
    if (*(_BYTE *)(a1 + 924) || !*(_QWORD *)(a1 + 40))
      return Int;
    v54 = (_BYTE *)(a1 + 924);
    v55 = (_QWORD *)a1;
    v56 = 0;
LABEL_82:
    uselect_GetP95Value(v55, v56, v54, v48, v49, v50, v51, v52, v64);
    return Int;
  }
  if (!strcmp(__s1, "uselectweightpitchbias"))
  {
    v57 = (_DWORD *)(a1 + 928);
    v58 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightpitchbias", (unsigned int *)(a1 + 928));
    if ((v58 & 0x80000000) != 0)
    {
      *v57 = 0;
      if (!a3)
        return 0;
      Int = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightpitchbias", 0);
      if ((Int & 0x80000000) != 0 || !*v57)
        return Int;
    }
    else
    {
      Int = v58;
      v59 = *(_DWORD *)(a1 + 904) * *(_DWORD *)(a1 + 928) / 0x64u;
      *(_DWORD *)(a1 + 928) = v59;
      if (!v59)
        return Int;
    }
    if (*(_BYTE *)(a1 + 932) || !*(_QWORD *)(a1 + 40))
      return Int;
    v54 = (_BYTE *)(a1 + 932);
    v55 = (_QWORD *)a1;
    v56 = 1;
    goto LABEL_82;
  }
  if (!strcmp(__s1, "uselectonlinereduction"))
  {
    *(_QWORD *)__s1a = 0;
    *(_DWORD *)__s2 = 0;
    LOBYTE(__s) = 0;
    if ((paramc_ParamGet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectonlinereduction", __s1a, __s2) & 0x80000000) == 0)
    {
      Int = uselect_ApplyOnlineReduction(a1, *(uint64_t *)__s1a, *(unsigned int *)__s2);
      paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
      return Int;
    }
    if (a3)
      return paramc_ParamSet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectonlinereduction", &__s, 1uLL);
    return 0;
  }
  if (!strcmp(__s1, "uselectmaxcandspruning"))
  {
    *(_DWORD *)__s1a = 0;
    DeallocUnitSelectorMemory_NRowsDependency((_QWORD *)a1);
    if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectmaxcandspruning", (int *)__s1a) & 0x80000000) == 0)
      goto LABEL_93;
    *(_DWORD *)__s1a = 0;
    if (!a3)
      goto LABEL_107;
    v43 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectmaxcandspruning", 0);
    if ((v43 & 0x80000000) == 0)
    {
LABEL_93:
      LOBYTE(v60) = __s1a[0];
      if (*(_DWORD *)__s1a)
      {
        if (*(int *)__s1a >= 256)
          LOBYTE(v60) = -1;
        v61 = *(_QWORD *)(a1 + 40);
        goto LABEL_108;
      }
LABEL_107:
      v61 = *(_QWORD *)(a1 + 40);
      v60 = *(_DWORD *)(v61 + 2552);
LABEL_108:
      *(_BYTE *)(a1 + 908) = v60;
      if (*(_DWORD *)(v61 + 2560))
      {
        v62 = v60;
        v63 = v60 + 20;
        if (v62 > 0xEB)
          v63 = -1;
        *(_BYTE *)(a1 + 908) = v63;
      }
      return AllocUnitSelectorMemory_NRowsDependency(a1);
    }
    return v43;
  }
  v6 = *(const char **)(a1 + 80);
  if (strcmp(__s1, v6))
    return 0;
  __s = 0;
  Int = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)v6, &__s);
  if ((Int & 0x80000000) != 0)
  {
    if (a3)
      Int = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 80), &byte_1DEBD87CE);
    v10 = 0;
LABEL_118:
    if (v10)
LABEL_119:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v10);
    return Int;
  }
  v8 = strlen(__s);
  v9 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v8 + 1));
  if (v9)
  {
    v10 = v9;
    strcpy(v9, __s);
    paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
    if (*(_DWORD *)(a1 + 48) >= 2u)
    {
      v11 = 0;
      for (i = 1; i < *(unsigned int *)(a1 + 48); ++i)
      {
        v13 = strchr(v10, 59);
        if (!v13)
          goto LABEL_22;
        v14 = v13;
        v15 = v10;
        do
        {
          *v14 = 0;
          v16 = strcmp(v15, *(const char **)(*(_QWORD *)(a1 + 72) + 8 * i));
          *v14 = 59;
          v15 = v14 + 1;
          v17 = strchr(v14 + 1, 59);
          v14 = v17;
          if (v16)
            v18 = v17 == 0;
          else
            v18 = 1;
        }
        while (!v18);
        if (v16)
        {
LABEL_22:
          if (i >= *(unsigned int *)(a1 + 48))
          {
            Int = 0;
          }
          else
          {
            paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", *(char **)(*(_QWORD *)(a1 + 72) + 8 * i));
            BrokerString = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), __s1a, 0x100uLL, 0, 0, 0, 0);
            if ((BrokerString & 0x80000000) != 0)
            {
              Int = BrokerString;
              goto LABEL_119;
            }
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i);
            if (v20)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v20);
              *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i) = 0;
            }
            v21 = *(_QWORD *)(a1 + 24);
            if (!v21 || (v22 = *(_QWORD *)(v21 + 48)) == 0)
              v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
            v23 = objc_ReleaseObject(v22, (uint64_t)__s1a);
            Int = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), __s2, 0x100uLL, 0, 0, 0, 1);
            if ((Int & 0x80000000) != 0)
              goto LABEL_118;
            if ((v23 & 0x1FFF) == 0x14 && strcmp(__s1a, __s2))
            {
              v24 = *(_QWORD *)(a1 + 24);
              if (!v24 || (v25 = *(_QWORD *)(v24 + 48)) == 0)
                v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
              objc_ReleaseObject(v25, (uint64_t)__s2);
            }
            v26 = *(unsigned int *)(a1 + 48);
            v27 = v11;
            if (i + 1 < v26)
            {
              do
              {
                v28 = v27 + 1;
                *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v28) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v27 + 16);
                *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v28) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v27 + 16);
                v29 = *(_QWORD *)(a1 + 64);
                v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v27) + 108)
                    + *(_DWORD *)(v29 + 4 * v27);
                *(_DWORD *)(v29 + 4 * v28) = v30;
                Int = uselect_CommunicateAddonOffset(a1, *(char **)(*(_QWORD *)(a1 + 72) + 8 * (v27 + 1)), v30);
                if ((Int & 0x80000000) != 0)
                  goto LABEL_118;
                v26 = *(unsigned int *)(a1 + 48);
                v31 = v27 + 3;
                ++v27;
              }
              while (v31 < v26);
            }
            *(_DWORD *)(a1 + 48) = v26 - 1;
          }
        }
        ++v11;
      }
    }
    v32 = strchr(v10, 59);
    if (v32)
    {
      v33 = v32;
      v34 = v10;
      do
      {
        *v33 = 0;
        v35 = *(_DWORD *)(a1 + 48);
        if (v35 <= 1)
          v35 = 1;
        v36 = 8 * v35;
        v37 = 8;
        while (v36 != v37)
        {
          v38 = strcmp(v34, *(const char **)(*(_QWORD *)(a1 + 72) + v37));
          v37 += 8;
          if (!v38)
            goto LABEL_51;
        }
        Int = uselect_AddDataPart(a1, v34);
        if ((Int & 0x80000000) != 0)
          goto LABEL_118;
LABEL_51:
        *v33 = 59;
        v34 = v33 + 1;
        v33 = strchr(v33 + 1, 59);
      }
      while (v33);
    }
    goto LABEL_118;
  }
  return 2229280778;
}

uint64_t uselect_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t result;

  *a4 = 1;
  if (!strcmp(__s1, "minphrase"))
  {
    if (atoi(a3) < 0)
    {
LABEL_10:
      *a4 = 0;
      return 2229280783;
    }
    return 0;
  }
  if (strcmp(__s1, "uselearlyemission"))
    return 0;
  result = strcmp(a3, "yes");
  if ((_DWORD)result)
  {
    result = strcmp(a3, "1");
    if ((_DWORD)result)
    {
      result = strcmp(a3, "no");
      if ((_DWORD)result)
      {
        result = strcmp(a3, "0");
        if ((_DWORD)result)
          goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t uselect_ParamLearnChange(uint64_t a1, char *a2)
{
  return uselect_GetParam(a1, a2, 0);
}

_QWORD *uselect_GetP95Value(_QWORD *result, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int j;
  char v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;

  if (result)
  {
    v9 = result;
    v10 = result[5];
    if (v10)
    {
      v11 = (uint64_t *)result[7];
      if (*(_DWORD *)(*v11 + 108))
      {
        if (a2)
        {
          i = *(_QWORD *)(v10 + 3008);
          if (!i)
            return result;
        }
        else
        {
          v18 = *(unsigned __int16 *)(v10 + 2966);
          if (!*(_WORD *)(v10 + 2966))
            return result;
          for (i = *(_QWORD *)(v10 + 2968); *(_DWORD *)i != 6; i += 32)
          {
            if (!--v18)
              return result;
          }
        }
        v15 = *((unsigned int *)result + 12);
        if ((_DWORD)v15)
        {
          LODWORD(v16) = 0;
          do
          {
            v17 = *v11++;
            v16 = (*(_DWORD *)(v17 + 108) + v16);
            --v15;
          }
          while (v15);
        }
        else
        {
          v16 = 0;
        }
        v19 = heap_Calloc(*(_QWORD **)(result[2] + 8), v16, 1);
        v24 = v9[2];
        if (v19)
        {
          v25 = v19;
          v30 = heap_Calloc(*(_QWORD **)(v24 + 8), v16, 1);
          if (v30)
          {
            v31 = *((unsigned int *)v9 + 12);
            if ((_DWORD)v31)
            {
              v32 = 0;
              v33 = 0;
              do
              {
                v34 = *(_QWORD *)(v9[7] + 8 * v32);
                v35 = *(_DWORD *)(v34 + 108);
                if (v35)
                {
                  for (j = 0; j < v35; ++j)
                  {
                    v37 = *(_BYTE *)(*(_QWORD *)(v34 + 160)
                                   + j * *(unsigned __int8 *)(v34 + 168)
                                   + *(unsigned __int8 *)(i + 11));
                    if (v37)
                      v38 = a2 == 0;
                    else
                      v38 = 1;
                    if (!a2 || !v38)
                    {
                      *(_BYTE *)(v25 + v33++) = v37;
                      v35 = *(_DWORD *)(v34 + 108);
                    }
                  }
                  v31 = *((unsigned int *)v9 + 12);
                }
                ++v32;
              }
              while (v32 < v31);
            }
            else
            {
              v33 = 0;
            }
            v40 = heap_Calloc(*(_QWORD **)(v9[2] + 8), 256, 4);
            v39 = v40;
            if (v40)
            {
              if (v33)
              {
                v45 = v33;
                v46 = (unsigned __int8 *)v25;
                do
                {
                  v47 = *v46++;
                  ++*(_DWORD *)(v40 + 4 * v47);
                  --v45;
                }
                while (v45);
              }
              v48 = 0;
              v49 = 0;
              do
              {
                if (*(_DWORD *)(v40 + 4 * v48))
                {
                  v50 = 0;
                  do
                    *(_BYTE *)(v30 + v49 + v50++) = v48;
                  while (v50 < *(_DWORD *)(v40 + 4 * v48));
                  v49 += v50;
                }
                ++v48;
              }
              while (v48 != 256);
              *a3 = *(_BYTE *)(v30 + (95 * v49) / 0x64uLL);
            }
            else
            {
              log_OutPublic(*(_QWORD *)(v9[2] + 32), (uint64_t)"USELECT", 19000, 0, v41, v42, v43, v44, v51);
            }
          }
          else
          {
            log_OutPublic(*(_QWORD *)(v9[2] + 32), (uint64_t)"USELECT", 19000, 0, v26, v27, v28, v29, v51);
            v39 = 0;
          }
          result = heap_Free(*(_QWORD **)(v9[2] + 8), v25);
          if (v39)
            result = heap_Free(*(_QWORD **)(v9[2] + 8), v39);
          if (v30)
            return heap_Free(*(_QWORD **)(v9[2] + 8), v30);
        }
        else
        {
          return (_QWORD *)log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"USELECT", 19000, 0, v20, v21, v22, v23, a9);
        }
      }
    }
  }
  return result;
}

uint64_t uselect_ApplyOnlineReduction(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;

  if (a3 != 1)
  {
    v5 = 2229280778;
    if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 108) != a3)
      return 2229280783;
    if (*(_QWORD *)(a1 + 936))
    {
      if (!a3)
        return 0;
    }
    else
    {
      v7 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a3, 1);
      *(_QWORD *)(a1 + 936) = v7;
      if (!v7)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v8, v9, v10, v11, v14);
        return v5;
      }
      if (!*(_DWORD *)(**(_QWORD **)(a1 + 56) + 108))
        return 0;
    }
    v12 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 936) + v12) = *(_BYTE *)(a2 + v12);
      ++v12;
    }
    while (v12 < *(unsigned int *)(**(_QWORD **)(a1 + 56) + 108));
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 936);
  if (!v4)
    return 0;
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4);
  v5 = 0;
  *(_QWORD *)(a1 + 936) = 0;
  return v5;
}

_QWORD *DeallocUnitSelectorMemory_NRowsDependency(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = result[108];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(result[2] + 8), v2);
    v1[108] = 0;
  }
  v3 = *((unsigned __int8 *)v1 + 908);
  if (!*((_BYTE *)v1 + 908))
  {
    v5 = v1[102];
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  v4 = 0;
  v5 = v1[102];
  v6 = 24;
  v7 = v5;
  do
  {
    if (v7 && *(_QWORD *)(v7 + v6))
    {
      result = heap_Free(*(_QWORD **)(v1[2] + 8), *(_QWORD *)(v7 + v6));
      v5 = v1[102];
      *(_QWORD *)(v5 + v6) = 0;
      v3 = *((unsigned __int8 *)v1 + 908);
      v7 = v5;
    }
    ++v4;
    v6 += 112;
  }
  while (v4 < 3 * (unint64_t)v3);
  if (v5)
  {
LABEL_10:
    result = heap_Free(*(_QWORD **)(v1[2] + 8), v5);
    v1[102] = 0;
  }
LABEL_11:
  *((_BYTE *)v1 + 908) = 0;
  return result;
}

uint64_t AllocUnitSelectorMemory_NRowsDependency(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v2 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 3 * *(unsigned __int8 *)(a1 + 908), 112);
  *(_QWORD *)(a1 + 816) = v2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 908))
    {
      v7 = 0;
      v8 = 24;
      while (1)
      {
        v9 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 3360), 4);
        *(_QWORD *)(*(_QWORD *)(a1 + 816) + v8) = v9;
        if (!v9)
          break;
        ++v7;
        v10 = *(unsigned __int8 *)(a1 + 908);
        v8 += 112;
        if (v7 >= 3 * v10)
        {
          v11 = v10 + 1;
          goto LABEL_8;
        }
      }
    }
    else
    {
      v11 = 1;
LABEL_8:
      v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11, 56);
      *(_QWORD *)(a1 + 864) = v12;
      if (v12)
        return 0;
    }
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v3, v4, v5, v6, v14);
  return 2229280778;
}

uint64_t uselect_AddDataPart(uint64_t a1, char *a2)
{
  uint64_t BrokerString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char **v20;
  const char **v21;
  const char *v22;
  const char **v23;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39[256];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v37 = 0;
  v39[0] = 0;
  if (!a2 || !*a2)
    return 0;
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", a2);
  BrokerString = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), v39, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v5 = uselect_CheckForDataFile(*(_WORD **)a1, *(_QWORD *)(a1 + 8), v39, &v37);
  if ((v5 & 0x80001FFF) == 0x8000000A)
    return v5;
  if (!v37)
  {
    BrokerString = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), v39, 0x100uLL, 0, 0, 0, 1);
    if ((BrokerString & 0x80000000) != 0)
      return BrokerString;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 48)) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v8 + 48);
  }
  BrokerString = objc_GetAddRefCountedObject(v7, (uint64_t)v39, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))uselect_ObjcVoiceClose, v8, &v38);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v9 = *(_QWORD *)(v38 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (!strcmp((const char *)(v10 + 602), (const char *)(v9 + 602)))
  {
    v5 = 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, "%s:%s", v11, v12, v13, v14, v9 + 152);
    v10 = *(_QWORD *)(a1 + 40);
    v5 = 2229280793;
  }
  if (strcmp((const char *)(v10 + 2400), (const char *)(v9 + 2400)))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, "%s:%s", v16, v17, v18, v19, v9 + 152);
    v10 = *(_QWORD *)(a1 + 40);
    v5 = 2229280793;
  }
  v20 = *(const char ***)(v10 + 2464);
  v21 = *(const char ***)(v9 + 2464);
  if (v20)
  {
    if (v21)
    {
      v22 = *v20;
      if (*v20)
      {
        v23 = v20 + 1;
        while (*v21)
        {
          if (strcmp(v22, *v21))
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, "%s:%s", v16, v17, v18, v19, v9 + 152);
            v5 = 2229280793;
          }
          ++v21;
          v24 = *v23++;
          v22 = v24;
          if (!v24)
            goto LABEL_28;
        }
        goto LABEL_38;
      }
LABEL_28:
      if (!*v21)
      {
LABEL_29:
        if ((v5 & 0x80000000) == 0)
        {
          v25 = *(_DWORD *)(a1 + 48) + 1;
          *(_DWORD *)(a1 + 48) = v25;
          v26 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 56), 8 * v25);
          if (v26
            && (*(_QWORD *)(a1 + 56) = v26,
                v27 = *(unsigned int *)(a1 + 48),
                *(_QWORD *)(v26 + 8 * (v27 - 1)) = *(_QWORD *)(v9 + 3552),
                (v28 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 64), 4 * v27)) != 0)
            && (*(_QWORD *)(a1 + 64) = v28,
                *(_DWORD *)(v28 + 4 * (*(_DWORD *)(a1 + 48) - 1)) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (*(_DWORD *)(a1 + 48) - 2))
                                                                                              + 108)
                                                                                  + *(_DWORD *)(v28
                                                                                              + 4
                                                                                              * (*(_DWORD *)(a1 + 48) - 2)),
                (v29 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 72), 8 * *(unsigned int *)(a1 + 48))) != 0))
          {
            *(_QWORD *)(a1 + 72) = v29;
            v30 = strlen(a2);
            v31 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v30 + 1));
            v32 = *(_DWORD *)(a1 + 48) - 1;
            *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v32) = v31;
            v33 = *(char **)(*(_QWORD *)(a1 + 72) + 8 * v32);
            v5 = 2229280778;
            if (v33)
            {
              strcpy(v33, a2);
              v34 = uselect_CommunicateAddonOffset(a1, *(char **)(*(_QWORD *)(a1 + 72) + 8 * (*(_DWORD *)(a1 + 48) - 1)), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (*(_DWORD *)(a1 + 48) - 1)));
              if ((v34 & 0x80000000) != 0)
              {
                v5 = v34;
              }
              else
              {
                v5 = uselect_CommunicateAddonReductionParameters(a1, *(char **)(*(_QWORD *)(a1 + 72) + 8 * (*(_DWORD *)(a1 + 48) - 1)), (char *)v9);
                if ((v5 & 0x80000000) == 0)
                  return v5;
              }
            }
          }
          else
          {
            v5 = 2229280778;
          }
        }
        goto LABEL_39;
      }
    }
  }
  else if (!v21)
  {
    goto LABEL_29;
  }
LABEL_38:
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, "%s:%s", v16, v17, v18, v19, v9 + 152);
  v5 = 2229280793;
LABEL_39:
  if (v9 && v39[0])
  {
    v35 = *(_QWORD *)(a1 + 24);
    if (!v35 || (v36 = *(_QWORD *)(v35 + 48)) == 0)
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
    objc_ReleaseObject(v36, (uint64_t)v39);
    if ((v5 & 0x1FFF) == 0xA)
      --*(_DWORD *)(a1 + 48);
  }
  return v5;
}

uint64_t uselect_CommunicateAddonOffset(uint64_t a1, char *__s, unsigned int a3)
{
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int v19;

  if (!__s || !*__s)
    return 0;
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v7 = strlen(__s);
  v8 = (char *)heap_Calloc(v6, 1, (v7 + 18));
  if (v8)
  {
    v13 = (uint64_t)v8;
    strcpy(v8, "voiceaddonoffset.");
    v14 = strlen(v8);
    if (*__s)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        *(_BYTE *)(v13 + v14 + v16++) = __tolower(__s[v15]);
        v15 = v16;
      }
      while (strlen(__s) > v16);
    }
    else
    {
      LODWORD(v15) = 0;
    }
    *(_BYTE *)(v13 + (v15 + v14)) = 0;
    v18 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), v13, a3);
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
    return v18;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v9, v10, v11, v12, v19);
    return 2229280778;
  }
}

uint64_t uselect_CommunicateAddonReductionParameters(uint64_t a1, char *__s, char *a3)
{
  uint64_t v3;
  _QWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v41;

  v3 = 0;
  if (!__s || !a3)
    return v3;
  if (!*__s)
    return 0;
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v8 = strlen(__s);
  v9 = (char *)heap_Calloc(v7, 1, (v8 + 26));
  if (!v9)
  {
    v3 = 2229280778;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v10, v11, v12, v13, v41);
    return v3;
  }
  v14 = (uint64_t)v9;
  strcpy(v9, "voiceaddonrawdataversion.");
  v15 = strlen(v9);
  if (*__s)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      *(_BYTE *)(v14 + v15 + v17++) = __tolower(__s[v16]);
      v16 = v17;
    }
    while (strlen(__s) > v17);
  }
  else
  {
    LODWORD(v16) = 0;
  }
  *(_BYTE *)(v14 + (v16 + v15)) = 0;
  v18 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), v14, a3 + 64);
  if ((v18 & 0x80000000) != 0)
  {
    v3 = v18;
    v29 = 0;
    v25 = 0;
  }
  else
  {
    v19 = strlen(__s);
    v20 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v19 + 21));
    v25 = (uint64_t)v20;
    if (v20)
    {
      strcpy(v20, "voiceaddonreduction.");
      v26 = strlen(v20);
      if (*__s)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          *(_BYTE *)(v25 + v26 + v28++) = __tolower(__s[v27]);
          v27 = v28;
        }
        while (strlen(__s) > v28);
      }
      else
      {
        LODWORD(v27) = 0;
      }
      *(_BYTE *)(v25 + (v27 + v26)) = 0;
      v30 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), v25, a3 + 76);
      if ((v30 & 0x80000000) == 0)
      {
        v31 = strlen(__s);
        v32 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v31 + 28));
        v29 = (uint64_t)v32;
        if (v32)
        {
          strcpy(v32, "voiceaddonreductionversion.");
          v37 = strlen(v32);
          if (*__s)
          {
            v38 = 0;
            v39 = 0;
            do
            {
              *(_BYTE *)(v29 + v37 + v39++) = __tolower(__s[v38]);
              v38 = v39;
            }
            while (strlen(__s) > v39);
          }
          else
          {
            LODWORD(v38) = 0;
          }
          *(_BYTE *)(v29 + (v38 + v37)) = 0;
          v3 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), v29, a3 + 140);
        }
        else
        {
          v3 = 2229280778;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v33, v34, v35, v36, v41);
        }
        goto LABEL_32;
      }
      v3 = v30;
    }
    else
    {
      v3 = 2229280778;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v21, v22, v23, v24, v41);
    }
    v29 = 0;
  }
LABEL_32:
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
  if (v25)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v25);
  if (v29)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v29);
  return v3;
}

_QWORD *DeallocBufferUnitSelector(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v2 = result;
    if (result[5])
    {
      v4 = result[95];
      if (v4)
      {
        result = heap_Free(*(_QWORD **)(result[2] + 8), v4);
        v2[95] = 0;
      }
      v5 = a2[441];
      if (v5)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v5);
        a2[441] = 0;
      }
      v6 = a2[442];
      if (v6)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v6);
        a2[442] = 0;
      }
      v7 = a2[443];
      if (v7)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v7);
        a2[443] = 0;
      }
      v8 = a2[451];
      if (v8)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v8);
        a2[451] = 0;
      }
    }
  }
  return result;
}

uint64_t uselect_RemoveDataPartClose(uint64_t result, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 48) > a2)
  {
    v3 = (_QWORD *)result;
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(result + 16) + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
    v4 = *(_QWORD *)(v3[9] + 8 * a2);
    if (v4)
    {
      heap_Free(*(_QWORD **)(v3[2] + 8), v4);
      *(_QWORD *)(v3[9] + 8 * a2) = 0;
    }
    v5 = v3[3];
    if (!v5 || (v6 = *(_QWORD *)(v5 + 48)) == 0)
      v6 = *(_QWORD *)(v3[2] + 48);
    return objc_ReleaseObject(v6, **(_QWORD **)(v3[7] + 8 * a2) + 152);
  }
  return result;
}

uint64_t uselect_ReadDirectStart(uint64_t a1, char *__s1, _QWORD *a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 2229280775;
  v7 = *(unsigned __int16 *)(a1 + 736);
  if (!*(_WORD *)(a1 + 736))
  {
LABEL_5:
    v6 = 2229280788;
    goto LABEL_6;
  }
  v10 = a1 + 96;
  while (strcmp(*(const char **)v10, __s1))
  {
    v10 += 40;
    if (!--v7)
      goto LABEL_5;
  }
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _DWORD *))(*(_QWORD *)(a1 + 88) + 88))(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), a3, a4);
  v17 = v16;
  if ((v16 & 0x80000000) != 0)
  {
    v6 = v16;
LABEL_6:
    if (!strncmp(__s1, "application/x-realspeak-cspp-", 0x1DuLL)
      || !strcmp(__s1, "application/x-realspeak-usnoreusebias;version=4.0")
      || !strcmp(__s1, "application/x-realspeak-usprosodybias;version=4.0")
      || !strcmp(__s1, "application/x-realspeak-usfrozen;version=4.0"))
    {
      return v6;
    }
    v15 = 19004;
LABEL_16:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", v15, "%s%s", v11, v12, v13, v14, "layer");
    return v6;
  }
  if (!strncmp(*(const char **)v10, "text/", 5uLL) && (!*a4 || *(_BYTE *)(*a3 + (*a4 - 1))))
  {
    v15 = 19005;
    goto LABEL_16;
  }
  return v17;
}

uint64_t AllocBufferUnitSelector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned int v16;

  v4 = *(__int16 *)(a2 + 3524);
  v5 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4, 4);
  *(_QWORD *)(a2 + 3528) = v5;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v5
    || (v11 = heap_Calloc(*(_QWORD **)(v10 + 8), (2 * v4), 2),
        *(_QWORD *)(a2 + 3536) = v11,
        v10 = *(_QWORD *)(a1 + 16),
        !v11)
    || (v12 = heap_Calloc(*(_QWORD **)(v10 + 8), (2 * v4), 2),
        *(_QWORD *)(a2 + 3544) = v12,
        v10 = *(_QWORD *)(a1 + 16),
        !v12))
  {
    v14 = 2229280778;
LABEL_9:
    log_OutPublic(*(_QWORD *)(v10 + 32), (uint64_t)"USELECT", 19000, 0, v6, v7, v8, v9, v16);
    return v14;
  }
  v13 = (void *)heap_Calloc(*(_QWORD **)(v10 + 8), v4, 4);
  *(_QWORD *)(a2 + 3608) = v13;
  if (!v13)
  {
    v14 = 2229280778;
    v10 = *(_QWORD *)(a1 + 16);
    goto LABEL_9;
  }
  if (*(__int16 *)(a2 + 3524) >= 1)
    memset(v13, 255, 4 * *(unsigned __int16 *)(a2 + 3524));
  return 0;
}

uint64_t uselect_Write(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v14;

  v10 = 2229280788;
  v11 = *(unsigned __int16 *)(a1 + 736);
  if (!*(_WORD *)(a1 + 736))
    goto LABEL_7;
  v14 = (_QWORD *)(a1 + 128);
  while (strcmp((const char *)*(v14 - 4), __s2))
  {
    v14 += 5;
    if (!--v11)
      goto LABEL_7;
  }
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 88) + 104))(*(v14 - 1), *v14, a3, a4);
  if ((v10 & 0x80000000) != 0)
LABEL_7:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19003, "%s%s", a5, a6, a7, a8, "layer");
  return v10;
}

uint64_t uselect_GetOffsetAndCountInCache3Table(_BYTE *a1, uint64_t a2, _BYTE *a3, int a4, int a5, _DWORD *a6)
{
  int v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  int *v10;
  uint64_t *v11;
  int *v12;
  uint64_t *v13;
  uint64_t *v14;
  int *v15;
  uint64_t *v16;
  int *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  unsigned __int8 v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v6 = a3[1];
  v7 = (int *)(a2 + 208);
  v8 = (uint64_t *)(a2 + 224);
  v9 = (uint64_t *)(a2 + 240);
  v10 = (int *)(a2 + 252);
  v11 = (uint64_t *)(a2 + 264);
  v12 = (int *)(a2 + 204);
  v13 = (uint64_t *)(a2 + 216);
  v14 = (uint64_t *)(a2 + 232);
  v15 = (int *)(a2 + 248);
  v16 = (uint64_t *)(a2 + 256);
  if (v6 == 108)
    v17 = v12;
  else
    v17 = v7;
  if (v6 == 108)
  {
    v10 = v15;
    v18 = v13;
  }
  else
  {
    v18 = v8;
  }
  if (v6 == 108)
    v19 = v14;
  else
    v19 = v9;
  if (v6 == 108)
    v20 = v16;
  else
    v20 = v11;
  if (a4)
    v21 = a4 - a1[2496];
  else
    v21 = a1[3577];
  v22 = *v19;
  v23 = *v18;
  v24 = *v10;
  v25 = *v17;
  if (a5)
  {
    v26 = a1[2496];
    v27 = a5 - v26;
  }
  else
  {
    v27 = a1[3577];
    v26 = a1[2496];
  }
  v28 = 0;
  v29 = *v20;
  v30 = *a3 - v26;
  v31 = a1[3576];
  v32 = v30;
  v33 = (v31 * v21 + v30) * v31;
  v34 = v27;
  v35 = v33 + v27;
  v36 = (v25 - 1);
  v37 = v36;
  v38 = v36;
  do
  {
    v39 = (v28 + v38) >> 1;
    v40 = *(_DWORD *)(v23 + 4 * v39);
    if (v40 <= v35)
    {
      if (v40 >= v35)
      {
LABEL_59:
        if (v39 != (_DWORD)v36)
        {
          v24 = *(_DWORD *)(v22 + 4 * (v39 + 1));
          v36 = v39;
        }
        *a6 = v24 - *(_DWORD *)(v22 + 4 * v36);
        return v29 + 4 * *(unsigned int *)(v22 + 4 * v39);
      }
      v28 = v39 + 1;
    }
    else
    {
      if (v28 + v38 < 2)
        break;
      v38 = v39 - 1;
    }
  }
  while (v28 <= v38);
  v41 = a1[3577];
  if (v6 == 108)
  {
    if (v34 != v41)
    {
      v42 = 0;
      v43 = v33 + v41;
      v44 = v36;
      do
      {
        v39 = (v42 + v44) >> 1;
        v45 = *(_DWORD *)(v23 + 4 * v39);
        if (v45 <= v43)
        {
          if (v45 >= v43)
            goto LABEL_59;
          v42 = v39 + 1;
        }
        else
        {
          if (v42 + v44 < 2)
            break;
          v44 = v39 - 1;
        }
      }
      while (v42 <= v44);
    }
    v46 = 0;
    v47 = v41 + (v32 + v41 * v31) * v31;
    do
    {
      v39 = (v46 + v37) >> 1;
      v48 = *(_DWORD *)(v23 + 4 * v39);
      if (v48 <= v47)
      {
        if (v48 >= v47)
          goto LABEL_59;
        v46 = v39 + 1;
      }
      else
      {
        if (v46 + v37 < 2)
          return 0;
        v37 = v39 - 1;
      }
    }
    while (v46 <= v37);
  }
  else
  {
    v49 = (v32 + v41 * v31) * v31;
    if (v41 != v21)
    {
      v50 = 0;
      v51 = v49 + v34;
      v52 = v36;
      do
      {
        v39 = (v50 + v52) >> 1;
        v53 = *(_DWORD *)(v23 + 4 * v39);
        if (v53 <= v51)
        {
          if (v53 >= v51)
            goto LABEL_59;
          v50 = v39 + 1;
        }
        else
        {
          if (v50 + v52 < 2)
            break;
          v52 = v39 - 1;
        }
      }
      while (v50 <= v52);
    }
    v54 = 0;
    v55 = v49 + v41;
    do
    {
      v39 = (v54 + v37) >> 1;
      v56 = *(_DWORD *)(v23 + 4 * v39);
      if (v56 <= v55)
      {
        if (v56 >= v55)
          goto LABEL_59;
        v54 = v39 + 1;
      }
      else
      {
        if (v54 + v37 < 2)
          return 0;
        v37 = v39 - 1;
      }
    }
    while (v54 <= v37);
  }
  return 0;
}

uint64_t uselect_InitForPreselDistFunc(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)();
  unsigned int v3;
  int v4;

  v1 = 2229280769;
  v2 = (uint64_t (*)())dist_LPHONEME_DATACOST;
  switch(*(_DWORD *)a1)
  {
    case 1:
      goto LABEL_16;
    case 2:
      v2 = (uint64_t (*)())dist_RPHONEME_DATACOST;
      goto LABEL_16;
    case 3:
      v2 = (uint64_t (*)())dist_LLPHONEME_DATACOST;
      goto LABEL_16;
    case 4:
      v2 = (uint64_t (*)())dist_RRPHONEME_DATACOST;
      goto LABEL_16;
    case 5:
      v2 = (uint64_t (*)())dist_PITCH_CART;
      goto LABEL_16;
    case 6:
      v2 = (uint64_t (*)())dist_DUR_CART;
      goto LABEL_16;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x12:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2B:
    case 0x2C:
    case 0x45:
    case 0x46:
      v3 = *(unsigned __int8 *)(a1 + 13) - 2;
      if (v3 >= 7 || ((0x47u >> v3) & 1) == 0)
        return v1;
      v2 = off_1EA948758[(char)v3];
      goto LABEL_16;
    case 0x11:
      v2 = (uint64_t (*)())dist_UNITBIAS;
      goto LABEL_16;
    case 0x13:
    case 0x14:
    case 0x15:
      v4 = *(unsigned __int8 *)(a1 + 13);
      if (v4 == 2)
      {
        v2 = (uint64_t (*)())dist_COMMON_EMULATEBUG203_2;
      }
      else
      {
        if (v4 != 3)
          return v1;
        v2 = (uint64_t (*)())dist_COMMON_EMULATEBUG203_3;
      }
LABEL_16:
      v1 = 0;
      *(_QWORD *)(a1 + 16) = v2;
      *(_BYTE *)(a1 + 24) = ~(-1 << *(_BYTE *)(a1 + 13));
      return v1;
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      v2 = (uint64_t (*)())dist_COMMON_8;
      goto LABEL_16;
    default:
      return v1;
  }
}

uint64_t dist_LPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[6];
  v7 = v6[7];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[8];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_RPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[9];
  v7 = v6[10];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[11];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_LLPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[12];
  v7 = v6[13];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[14];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_RRPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[15];
  v7 = v6[16];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[17];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_PITCH_CART(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = (_DWORD *)a1[111];
  if (!*v5)
    return 0;
  if (!a3 && *a5)
    return 500000;
  v6 = a1[5];
  LODWORD(v7) = *(_DWORD *)(v6 + 2680);
  if ((_DWORD)v7)
  {
    LODWORD(v7) = v5[1];
    if ((_DWORD)v7)
    {
      v7 = *(_QWORD *)(v6 + 3000);
      if (v7)
      {
        v8 = *(unsigned __int8 *)(a1[107] + *(unsigned __int8 *)(v7 + 25) + 3);
        v7 = *(_QWORD *)(v6 + 2480);
        if (!v7 || (v9 = (_DWORD *)(v7 + 8 * v8), (LODWORD(v7) = *v9) == 0) || v9[1] >= a3)
        {
          v7 = *(_QWORD *)(v6 + 2488);
          if (v7)
          {
            v10 = (_DWORD *)(v7 + 8 * v8);
            LODWORD(v7) = *v10;
            if (*v10)
            {
              if (v10[1] <= a3)
                LODWORD(v7) = 0;
            }
          }
        }
      }
    }
  }
  v11 = a3 - a2;
  if (a2 >= a3)
    v11 = a2 - a3;
  if (*(_DWORD *)(v6 + 2700))
  {
    if (v11 <= v5[36] * *(_DWORD *)(v6 + 2704))
      v12 = v11 * v11 * *a5 / v5[37];
    else
      v12 = v11 * v11 * *a5 / v5[37] * *(_DWORD *)(v6 + 2708);
  }
  else
  {
    v12 = (a2 - a3) * (a2 - a3) * *a5 / v5[37];
    if (v11 > *(_DWORD *)(v6 + 2576))
      v12 *= 10;
  }
  return v12 + v7;
}

uint64_t dist_DUR_CART(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = *(_DWORD **)(a1 + 40);
  if (!v5[678])
  {
    if (a2)
    {
      v10 = a3 - a2;
      if (a2 >= a3)
        v10 = a2 - a3;
      v11 = (a2 - a3) * (a2 - a3) * *a5 / *(_DWORD *)(*(_QWORD *)(a1 + 888) + 156);
      if (v10 <= v5[645])
        return v11;
      else
        return 10 * v11;
    }
    return 0;
  }
  if (!a2)
    return 0;
  v6 = a2 - a3;
  if (a2 < a3)
    v6 = a3 - a2;
  v7 = *(_QWORD *)(a1 + 888);
  v8 = *(_DWORD *)(v7 + 152);
  if (v6 > v8 * v5[679])
  {
    v9 = v5[680];
    return v6 * v6 * *a5 / *(_DWORD *)(v7 + 156) * v9;
  }
  if (a2 > a3 && v6 > v5[681] * v8)
  {
    v9 = v5[682];
    return v6 * v6 * *a5 / *(_DWORD *)(v7 + 156) * v9;
  }
  return v6 * v6 * *a5 / *(_DWORD *)(v7 + 156);
}

uint64_t dist_UNITBIAS(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  return ((int)(a3 >> *(_BYTE *)(a4 + 12) << 31) >> 31) & *a5;
}

uint64_t dist_COMMON_EMULATEBUG203_2(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  int v12;

  v5 = *a5;
  if (!*a5)
    return 0;
  v6 = (a3 >> *(_BYTE *)(a4 + 12)) & 3;
  v7 = *((_QWORD *)a5 + 1);
  if (*(_WORD *)v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + v6)
         + *(unsigned __int16 *)(v7 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2);
    else
      v9 = v6 + *(unsigned __int16 *)(v7 + 2) * a2;
    v12 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 8) + 2 * v9);
    if (v12 == 150)
    {
      return 5000000;
    }
    else if (v12 == 200)
    {
      return 15000000;
    }
    else
    {
      return (v5 * v12);
    }
  }
  else
  {
    v11 = 100 * v5;
    if ((_DWORD)v6 == a2)
      return 0;
    else
      return v11;
  }
}

uint64_t dist_COMMON_EMULATEBUG203_3(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v10;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 7;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + v5)
         + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v7 + a2);
    else
      v8 = v5 + *(unsigned __int16 *)(v6 + 2) * a2;
    v10 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 2 * v8);
    if (v10 == 150)
    {
      return 5000000;
    }
    else if (v10 == 200)
    {
      return 15000000;
    }
    else
    {
      return (*(_DWORD *)a5 * v10);
    }
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_2(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 3;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      v9 = *(unsigned __int16 *)(v7
                               + 2
                               * (*(unsigned __int8 *)(v8 + v5)
                                + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2)));
    else
      v9 = *(unsigned __int16 *)(v7 + 2 * (v5 + *(unsigned __int16 *)(v6 + 2) * a2));
    return (*(_DWORD *)a5 * v9);
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_3(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 7;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      v9 = *(unsigned __int16 *)(v7
                               + 2
                               * (*(unsigned __int8 *)(v8 + v5)
                                + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2)));
    else
      v9 = *(unsigned __int16 *)(v7 + 2 * (v5 + *(unsigned __int16 *)(v6 + 2) * a2));
    return (*(_DWORD *)a5 * v9);
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_4(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 0xFLL;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      v9 = *(unsigned __int16 *)(v7
                               + 2
                               * (*(unsigned __int8 *)(v8 + v5)
                                + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2)));
    else
      v9 = *(unsigned __int16 *)(v7 + 2 * (v5 + *(unsigned __int16 *)(v6 + 2) * a2));
    return (*(_DWORD *)a5 * v9);
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_8(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v11;

  v5 = *((_QWORD *)a5 + 1);
  if (*(_WORD *)v5)
  {
    v6 = *a5;
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + a3)
         + *(unsigned __int16 *)(v5 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2);
    else
      v9 = *(unsigned __int16 *)(v5 + 2) * (unint64_t)a2 + a3;
    v11 = *(unsigned __int16 *)(v7 + 2 * v9);
  }
  else
  {
    if (a2 == a3)
      return 0;
    v6 = *a5;
    v11 = 100;
  }
  return (v6 * v11);
}

uint64_t uselect_IsNextUnit(uint64_t result, unsigned int a2)
{
  unsigned int *v2;
  uint64_t i;
  unsigned int v4;
  unsigned int v5;

  if (result)
  {
    v4 = *(_DWORD *)result;
    v2 = (unsigned int *)(result + 4);
    for (i = v4; ; --i)
    {
      if (!i)
        return 0;
      v5 = *v2;
      if (*v2 == a2)
        break;
      ++v2;
      if (v5 > a2)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t uselect_CalculateCost(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t result;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  BOOL v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;

  result = 4000000000;
  v7 = *(_DWORD **)(a1 + 40);
  v8 = **(_QWORD **)(a2 + 40);
  *(_BYTE *)(a2 + 108) = 0;
  v9 = *(unsigned __int8 *)(a1 + 848);
  if (*(_BYTE *)(a1 + 848))
  {
    v10 = 0;
    v11 = a4 | a3;
    v12 = *(unsigned int **)(a1 + 824);
    v13 = a2 + 65;
    while (1)
    {
      v14 = *v12;
      v15 = **((_QWORD **)v12 + 5);
      if (v10)
      {
        v16 = v7[667] == 1 && v14 >= result;
        if (v16)
          return result;
      }
      if (!v11)
        break;
LABEL_9:
      if (v14 < result)
        goto LABEL_10;
LABEL_186:
      v12 += 28;
      if (++v10 >= v9)
        return result;
    }
    v17 = v7[640];
    if (v17 && (*((_BYTE *)v12 + 61) != 1 || *((_BYTE *)v12 + 77) != 114))
    {
      v18 = *(_DWORD *)(a2 + 96);
      if (v12[24])
      {
        if (!v18)
          goto LABEL_186;
      }
      else if (v18)
      {
        goto LABEL_186;
      }
    }
    if (v14 >= result)
      goto LABEL_186;
    if (v15 == v8 && v12[2] == *(_DWORD *)(a2 + 32))
    {
      v19 = 0;
LABEL_22:
      v20 = 1;
      if (!v17)
        goto LABEL_56;
    }
    else
    {
      if (a5 && (*((_BYTE *)v12 + 86) || *(_BYTE *)(a2 + 87)))
        goto LABEL_186;
      if (v15 == v8)
      {
        v21 = *(_DWORD *)(v8 + 2632);
        if (v21 <= 0x63)
        {
          v22 = (unsigned int *)*((_QWORD *)v12 + 2);
          if (v22)
          {
            v23 = *(_DWORD *)(a2 + 32);
            v26 = *v22;
            v24 = v22 + 1;
            v25 = v26;
            while (v25)
            {
              v27 = *v24;
              if (*v24 == v23)
              {
                v46 = **((_DWORD **)v12 + 3);
                v19 = 0;
                if (*(_DWORD *)(v8 + 2588) == 1)
                  v46 = v46 << *((_BYTE *)v12 + 86) << *(_BYTE *)(a2 + 87);
                v14 = v46 * v21 / 0x64 + v14;
                goto LABEL_22;
              }
              ++v24;
              --v25;
              if (v27 > v23)
                break;
            }
          }
        }
      }
      if (*(_DWORD *)(v15 + 2588) == 1 && *(_DWORD *)(v8 + 2588) == 1)
      {
        v20 = 0;
        v28 = **((_DWORD **)v12 + 3) << *((_BYTE *)v12 + 86) << *(_BYTE *)(a2 + 87);
      }
      else
      {
        v20 = 0;
        v28 = **((_DWORD **)v12 + 3);
      }
      v14 = (v28 + v14);
      v19 = 1;
      if (!v17)
      {
LABEL_56:
        if (v14 >= result)
          goto LABEL_186;
        v30 = *(unsigned int *)(v15 + 3384);
        if ((v30 & 0x80000000) != 0 || (*(_DWORD *)(v8 + 3384) & 0x80000000) != 0)
        {
LABEL_87:
          if (v15 != v8)
            goto LABEL_113;
          if (v19)
          {
            if (*(_DWORD *)(v8 + 2604) == 2)
            {
              if (*(_DWORD *)(v8 + 2624))
              {
                if (*((_BYTE *)v12 + 77) != 114)
                {
                  if (*(_BYTE *)(v8 + *((unsigned __int8 *)v12 + 76) + 1630) == 83)
                  {
                    v48 = 0;
                    goto LABEL_103;
                  }
                  v47 = (unsigned __int8 *)(*(_QWORD *)(v8 + 3568)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + 75) << 8)
                                          + *(unsigned __int8 *)(a2 + 74)
                                          + 0x10000);
LABEL_102:
                  v48 = *v47;
LABEL_103:
                  if (v7[669] < v48)
                    goto LABEL_186;
                  v49 = *(_DWORD *)(*((_QWORD *)v12 + 3) + 8);
                  v50 = v14 + v49 * v48;
                  LODWORD(v14) = v14 + 10 * v48 * v49;
                  if (v7[650] < v48)
                    v14 = v14;
                  else
                    v14 = v50;
                  goto LABEL_112;
                }
                v41 = *(unsigned __int8 *)(a2 + 74);
                v42 = *(_QWORD *)(v8 + 3568) + ((unint64_t)*((unsigned __int8 *)v12 + 75) << 8);
              }
              else
              {
                v41 = *(unsigned __int8 *)(a2 + 74);
                v42 = *(_QWORD *)(v8 + 3560) + ((unint64_t)*((unsigned __int8 *)v12 + 75) << 7);
              }
              v47 = (unsigned __int8 *)(v42 + v41);
              goto LABEL_102;
            }
            v43 = *(_QWORD *)(v8 + 3560);
            if (v43)
            {
              v44 = 0;
              v45 = 0;
              do
              {
                v45 += 2
                     * *(unsigned __int8 *)(v43
                                          + *(unsigned __int8 *)(v13 + v44)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + v44 + 68) << 7))
                     + *(unsigned __int8 *)(v43
                                          + *(unsigned __int8 *)(v13 + v44 - 3)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + v44 + 68) << 7))
                     + *(unsigned __int8 *)(v43
                                          + *(unsigned __int8 *)(v13 + v44)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + v44 + 71) << 7));
                ++v44;
                v43 += 0x4000;
              }
              while (v44 != 3);
            }
            else
            {
              v45 = 0;
              v51 = *(_QWORD *)(v8 + 3568);
              do
              {
                v45 += 2
                     * *(unsigned __int8 *)(v51
                                          + (*(unsigned __int8 *)(v13 + v43) | ((unint64_t)*((unsigned __int8 *)v12
                                                                                                  + v43
                                                                                                  + 68) << 8)))
                     + *(unsigned __int8 *)(v51
                                          + (*(unsigned __int8 *)(v13 + v43 - 3) | ((unint64_t)*((unsigned __int8 *)v12 + v43 + 68) << 8)))
                     + *(unsigned __int8 *)(v51
                                          + (*(unsigned __int8 *)(v13 + v43) | ((unint64_t)*((unsigned __int8 *)v12
                                                                                                  + v43
                                                                                                  + 71) << 8)));
                ++v43;
                v51 += 0x10000;
              }
              while (v43 != 3);
            }
            v52 = v45 / 0xA;
            v53 = v45 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 8);
            if (v52 <= v7[650])
              v14 = (v14 + 2 * v53);
            else
              v14 = (v14 + 20 * v53);
          }
LABEL_112:
          if (v14 >= result)
            goto LABEL_186;
LABEL_113:
          v54 = *(unsigned int *)(v15 + 3404);
          if ((v54 & 0x80000000) != 0 || (*(_DWORD *)(v8 + 3404) & 0x80000000) != 0)
            goto LABEL_157;
          if (v19
            && *(_BYTE *)(v8 + *(unsigned __int8 *)(a2 + 76) + 859) == 118
            && *(_BYTE *)(v15 + *((unsigned __int8 *)v12 + 76) + 859) == 118)
          {
            v55 = *((unsigned __int8 *)v12 + 92);
            v57 = (v55 >> 4) + ((v55 >> 4) + 1) * ((v55 >> 4) + 1);
            if ((v55 & 0x80) != 0)
            {
              v56 = ((*((_BYTE *)v12 + 92) >> 4) - 8);
              v57 = ~v56 + ~v56 * v56 - v56;
            }
            v58 = v55 & 0xF;
            if (v58 <= 7)
              v59 = v58 + (v58 + 1) * (v58 + 1);
            else
              v59 = ~(v58 - 8)
                  + ~(v58 - 8) * (v58 - 8)
                  - (v58 - 8);
            if (*((_BYTE *)v12 + 77) == 114)
              v57 = v59;
            v60 = *(unsigned __int8 *)(a2 + 92);
            v62 = (v60 >> 4) + ((v60 >> 4) + 1) * ((v60 >> 4) + 1);
            if ((v60 & 0x80) != 0)
            {
              v61 = ((*(_BYTE *)(a2 + 92) >> 4) - 8);
              v62 = ~v61 + ~v61 * v61 - v61;
            }
            v63 = v60 & 0xF;
            if (v63 <= 7)
              v64 = v63 + (v63 + 1) * (v63 + 1);
            else
              v64 = ~(v63 - 8)
                  + ~(v63 - 8) * (v63 - 8)
                  - (v63 - 8);
            if (*(_BYTE *)(a2 + 77) == 114)
              v65 = v64;
            else
              v65 = v62;
            if (v65 - v57 >= 0)
              v66 = v65 - v57;
            else
              v66 = v57 - v65;
            if (v66 > v7[663])
              goto LABEL_186;
            v68 = v65 > 0 && v57 < 0;
            if (v66 > v7[662])
            {
              if (v68 || v65 < 0 && v57 >= 1)
              {
                v14 = v14 + 100 * v66 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v54);
                goto LABEL_156;
              }
              goto LABEL_155;
            }
            if (v68 || v65 < 0 && v57 >= 1)
            {
LABEL_155:
              v14 = v14 + 10 * v66 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v54);
              goto LABEL_156;
            }
            v14 = v14 + *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v54) * v66;
          }
LABEL_156:
          if (v14 >= result)
            goto LABEL_186;
LABEL_157:
          v69 = *(unsigned int *)(v15 + 3400);
          if ((v69 & 0x80000000) == 0 && (*(_DWORD *)(v8 + 3400) & 0x80000000) == 0)
          {
            if (v19)
            {
              v70 = *((unsigned __int8 *)v12 + 91);
              v71 = v70 & 0xF;
              v72 = v70 >> 4;
              if (*((_BYTE *)v12 + 77) == 114)
                v73 = v71;
              else
                v73 = v72;
              v74 = 6554 * (66 * v73 + 38);
              v75 = HIWORD(v74);
              v76 = *(unsigned __int8 *)(a2 + 91);
              v77 = v76 & 0xF;
              v78 = v76 >> 4;
              if (*(_BYTE *)(a2 + 77) == 114)
                v79 = v77;
              else
                v79 = v78;
              v80 = 6554 * (66 * v79 + 38);
              v81 = HIWORD(v80) - HIWORD(v74);
              v16 = v75 >= HIWORD(v80);
              v82 = v75 - HIWORD(v80);
              if (v16)
                v83 = v82;
              else
                v83 = v81;
              if (v83 > v7[666])
                goto LABEL_186;
              v84 = *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v69);
              if (v83 <= v7[665])
                v14 = v14 + 10 * v83 * v84;
              else
                v14 = v14 + 100 * v83 * v84;
            }
            if (v14 >= result)
              goto LABEL_186;
          }
          if (v15 != v8
            || (v85 = *(unsigned int *)(v8 + 3392), (v85 & 0x80000000) != 0)
            && (v85 = *(unsigned int *)(v8 + 3396), (v85 & 0x80000000) != 0))
          {
LABEL_10:
            *(_BYTE *)(a2 + 108) = v10;
            result = v14;
            goto LABEL_186;
          }
          if (*(_BYTE *)(v8 + *(unsigned __int8 *)(a2 + 76) + 1116) == 86 && *(_BYTE *)(a2 + 77) == 108)
          {
            v86 = *((unsigned __int8 *)v12 + 85);
            if (v86 != 255)
            {
              v87 = *(unsigned __int8 *)(a2 + 84);
              if (v87 != 255)
              {
                v88 = v87 - v86;
                v89 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 3368) + 12 * v85 + 8);
                v90 = *(__int16 *)(a2 + 56);
                if (v88 >= v90)
                {
LABEL_185:
                  v94 = 10 * v89;
LABEL_189:
                  v14 = (v14 + *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v85) * v94);
                  goto LABEL_9;
                }
                v91 = *(__int16 *)(a2 + 54);
                if (v88 >= v91)
                {
                  v95 = (v88 - v91) * v89;
                  v96 = v90 - v91;
                  goto LABEL_193;
                }
                v92 = *(__int16 *)(a2 + 52);
                if (v92 > v88)
                {
                  v93 = *(__int16 *)(a2 + 50);
                  if (v88 < v93)
                    goto LABEL_185;
                  v95 = (v92 - v88) * v89;
                  v96 = v92 - v93;
LABEL_193:
                  v94 = v95 / v96;
                  goto LABEL_189;
                }
              }
            }
          }
          v94 = 0;
          goto LABEL_189;
        }
        if (v19)
        {
          if (*(_DWORD *)(a2 + 80) == 1
            && v12[20] == 1
            && (*(unsigned __int8 *)(a2 + 90) < 0x15u || *((unsigned __int8 *)v12 + 88) <= 0x14u))
          {
            v31 = 10 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v30);
            v32 = (unsigned __int8 *)(*(_QWORD *)(v15 + 28160) + 99);
LABEL_85:
            v14 = v14 + v31 * *v32;
            goto LABEL_86;
          }
          if (*(_DWORD *)(v15 + 2612) == 1)
          {
            v33 = *(unsigned __int8 *)(a2 + 90);
            if (*(_DWORD *)(v8 + 2612) == 1)
            {
              v34 = *((unsigned __int8 *)v12 + 88);
              goto LABEL_72;
            }
          }
          else
          {
            v33 = *(unsigned __int8 *)(a2 + 90);
          }
          if (v33 >= 0x15)
          {
            v34 = *((unsigned __int8 *)v12 + 88);
            if (v34 >= 0x15 && *((unsigned __int8 *)v12 + 89) <= 0xEu)
            {
LABEL_72:
              v35 = v34 - v33;
              v16 = v33 >= v34;
              v36 = v33 - v34;
              if (v16)
                v37 = v36;
              else
                v37 = v35;
              if (v36 >= 49)
                v38 = 49;
              else
                v38 = v36;
              v39 = v38 + 50;
              if (v36 >= -50)
                v40 = v39;
              else
                v40 = 0;
              if (v37 > v7[668])
                goto LABEL_186;
              v31 = *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v30);
              if (v37 > v7[649])
                v31 *= 10;
              v32 = (unsigned __int8 *)(*(_QWORD *)(v15 + 28160) + v40);
              goto LABEL_85;
            }
          }
        }
LABEL_86:
        if (v14 >= result)
          goto LABEL_186;
        goto LABEL_87;
      }
    }
    v29 = *((unsigned __int8 *)v12 + 61);
    if (v29 == 1 && *((_BYTE *)v12 + 77) == 114)
    {
      if (!*(_DWORD *)(a2 + 100))
      {
        if (*(unsigned __int8 *)(a2 + 76) == *(unsigned __int8 *)(v8 + 2179))
          v14 = v14;
        else
          v14 = (v14 + 50000);
      }
    }
    else
    {
      if (v12[26])
      {
        if (!v12[25])
          v20 = 1;
        if (v20)
          v14 = v14;
        else
          v14 = (v14 + 50000);
      }
      if (v19 && (v29 != 1 || *((_BYTE *)v12 + 77) != 114) && (v12[24] || *(_DWORD *)(a2 + 96)))
        goto LABEL_186;
    }
    goto LABEL_56;
  }
  return result;
}

uint64_t uselect_ExtractFeatFromMsg(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  char v29;
  int v30;
  _BYTE *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  __int128 *v36;
  int v37;
  _BYTE *v38;
  __int128 *v39;
  int v40;
  _BYTE *v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  BOOL v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  int v85;
  int v86;
  int v87;
  int v88;
  __int128 *v89;
  __int128 *v90;
  __int128 *v91;
  __int128 *v92;
  __int128 *v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  __int128 *v116;
  __int128 *v117;
  __int128 *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _QWORD v124[2];

  v2 = result;
  v3 = 0;
  v4 = *(_QWORD *)(result + 888);
  v5 = *(_BYTE **)(result + 856);
  v6 = *(_QWORD *)(result + 896);
  v7 = *(_QWORD *)(result + 40);
  v8 = (__int16)(a2 + ((unsigned __int16)(a2 & 0x8000) >> 15)) >> 1;
  if ((a2 & 1) != 0)
    v9 = 114;
  else
    v9 = 108;
  v124[0] = 0;
  v123 = 0;
  v5[1] = v9;
  v10 = (uint64_t)(__int16)(a2 + ((unsigned __int16)(a2 & 0x8000) >> 15)) >> 1;
  *v5 = *(_BYTE *)(*(_QWORD *)(result + 760) + 864 * v8 + 2);
  v5[2] = 0;
  if (*(_DWORD *)(v7 + 2564) != 1)
    v3 = *(unsigned __int8 *)(v7 + *(unsigned __int8 *)(*(_QWORD *)(result + 760) + 864 * (int)v10 + 2) + 2144);
  if (*(_WORD *)(v7 + 2966))
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 + 1;
    v14 = v10 + 2;
    v119 = v8 - 2;
    v15 = v10 - 1;
    result = (v10 - 1);
    v16 = (_BYTE *)(v7 + 2179);
    v17 = v4 + 120;
    v18 = v4 + 48;
    v19 = (__int128 *)(v7 + 192 * v3);
    v20 = (__int128 *)((char *)v19 + 3752);
    v21 = v19 + 230;
    v22 = v19 + 224;
    v23 = (__int128 *)((char *)v19 + 3656);
    v122 = v4 + 96;
    v117 = v19 + 227;
    v118 = v19 + 233;
    v121 = v4 + 72;
    v115 = (__int128 *)((char *)v19 + 3608);
    v116 = (__int128 *)((char *)v19 + 3704);
    v120 = a2 + 1;
    v24 = v5 + 3;
    v25 = 864 * (int)v10;
    v26 = v25 + 356;
    while (2)
    {
      if (v5[1] == 108)
        v27 = (_DWORD *)(*(_QWORD *)(v2 + 760) + v26 - 284);
      else
        v27 = (_DWORD *)(*(_QWORD *)(v2 + 760) + v26);
      *(_DWORD *)v6 = *v27;
      v28 = *(_QWORD *)(v2 + 760);
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 3416)
                          + 24 * *(unsigned __int8 *)(v28 + v25 + v12 + 640);
      switch(*(_DWORD *)(*(_QWORD *)(v7 + 2968) + v11))
      {
        case 1:
          v30 = v5[1];
          v31 = v16;
          if (v120 >= 3)
          {
            if (v30 != 114 || (v31 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
              v31 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * (int)v15 + 2) + 2144);
          }
          v24[v12] = *v31;
          if (v30 == 108)
          {
            v32 = *v22;
            v33 = *((_QWORD *)v22 + 2);
          }
          else
          {
            v32 = *v21;
            v33 = *((_QWORD *)v21 + 2);
          }
          *(_QWORD *)(v18 + 16) = v33;
          *(_OWORD *)v18 = v32;
          goto LABEL_82;
        case 2:
          v34 = v5[1];
          v35 = v16;
          if (*(__int16 *)(v2 + 768) - 1 != v8)
          {
            if (v34 != 108 || (v35 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
              v35 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * (int)v13 + 2) + 2144);
          }
          v24[v12] = *v35;
          if (v34 == 108)
            v36 = v115;
          else
            v36 = v116;
          v52 = *v36;
          v53 = *((_QWORD *)v36 + 2);
          v54 = v121;
          goto LABEL_103;
        case 3:
          v37 = v5[1];
          v38 = v16;
          if (a2 >= 4)
          {
            if (v37 != 114 || (v38 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
            {
              v38 = v16;
              if (*(_BYTE *)(v28 + 864 * result + 2) != 35)
                v38 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * v119 + 2) + 2144);
            }
          }
          v24[v12] = *v38;
          if (v37 == 108)
            v39 = v117;
          else
            v39 = v118;
          v52 = *v39;
          v53 = *((_QWORD *)v39 + 2);
          v54 = v122;
LABEL_103:
          *(_QWORD *)(v54 + 16) = v53;
          *(_OWORD *)v54 = v52;
          goto LABEL_82;
        case 4:
          v40 = v5[1];
          v41 = v16;
          if ((int)v14 < *(__int16 *)(v2 + 768))
          {
            if (v40 != 108 || (v41 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
            {
              v41 = v16;
              if (*(_BYTE *)(v28 + 864 * (int)v13 + 2) != 35)
                v41 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * (int)v14 + 2) + 2144);
            }
          }
          v24[v12] = *v41;
          if (v40 == 108)
          {
            v42 = *v23;
            v43 = *((_QWORD *)v23 + 2);
          }
          else
          {
            v42 = *v20;
            v43 = *((_QWORD *)v20 + 2);
          }
          *(_QWORD *)(v17 + 16) = v43;
          *(_OWORD *)v17 = v42;
          goto LABEL_82;
        case 5:
          if (*(_DWORD *)(v7 + 2736) == 1 && v5[1] == 114)
            v44 = (_BYTE *)(v28 + 864 * (int)v10 + 44);
          else
            v44 = (_BYTE *)(v28 + 864 * (int)v10 + 22);
          v24[v12] = *v44;
          v48 = *(_QWORD *)(v4 + 16);
          if (v48 && *(_BYTE *)(v48 + 4) && *(_BYTE *)(v48 + 5))
          {
            v89 = v22;
            v91 = v21;
            v93 = v20;
            v95 = v18;
            v97 = v17;
            v99 = v16;
            v101 = (_QWORD *)result;
            v103 = v15;
            v105 = v14;
            v107 = v13;
            v109 = v8;
            v111 = a2;
            v113 = v4;
            uselect_splitGID(v2, *(_DWORD *)v48, v124, &v123);
            v4 = v113;
            v49 = *(_QWORD *)(v113 + 16);
            v50 = *(unsigned __int8 *)(v49 + 4);
            if (v50 == 3)
            {
              v51 = 0;
            }
            else if (v50 == 1)
            {
              v51 = *(unsigned __int8 *)(v49 + 5);
            }
            else
            {
              v51 = -*(unsigned __int8 *)(v49 + 5);
            }
            v8 = v109;
            a2 = v111;
            v14 = v105;
            v13 = v107;
            result = (uint64_t)v101;
            v15 = v103;
            v17 = v97;
            v16 = v99;
            v20 = v93;
            v18 = v95;
            v22 = v89;
            v21 = v91;
            v59 = (*(unsigned __int8 *)(*(_QWORD *)(v124[0] + 160)
                                      + v123 * *(unsigned __int8 *)(v124[0] + 168)
                                      + *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 11)) >> *(_BYTE *)(*(_QWORD *)(v7 + 2968) + v11 + 12)) & *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 24);
            v60 = *(unsigned __int8 *)(v2 + 932);
            v61 = v60 - v59;
            v62 = v59 >= v60;
            v63 = v59 - v60;
            if (v63 == 0 || !v62)
              LOBYTE(v63) = v61;
            v64 = v51 * v63 / 100 + v59;
            if (v64 >= 255)
              v64 = 255;
            v24[v12] = v64 & ~(v64 >> 31);
            *(_DWORD *)v6 = *(_DWORD *)(v2 + 928);
          }
          *(_DWORD *)v6 *= 1000;
          if (*(_DWORD *)(v7 + 2736) == 1 && v5[1] == 114)
          {
            v65 = *(_QWORD *)(v2 + 760);
            v66 = v65 + 864 * (int)v10;
            v69 = *(unsigned __int8 *)(v66 + 45);
            v67 = (unsigned __int8 *)(v66 + 45);
            v68 = v69;
          }
          else
          {
            v65 = *(_QWORD *)(v2 + 760);
            v70 = v65 + 864 * (int)v10;
            v71 = *(unsigned __int8 *)(v70 + 23);
            v67 = (unsigned __int8 *)(v70 + 23);
            v68 = v71;
          }
          *(_DWORD *)(v4 + 148) = v68 * v68;
          *(_DWORD *)(v4 + 144) = (6554 * *v67 + 32770) >> 16;
          v72 = v7 + *(unsigned __int8 *)(v7 + *(unsigned __int8 *)(v65 + 864 * (int)v10 + 2) + 2144);
          *(_DWORD *)v4 = *(unsigned __int8 *)(v72 + 859) == 118;
          *(_DWORD *)(v4 + 4) = *(_BYTE *)(v72 + 1116) == 86
                             && (v73 = *(_QWORD *)(v7 + 2992)) != 0
                             && v5[*(unsigned __int8 *)(v73 + 25) + 3] == 3;
          goto LABEL_82;
        case 6:
          if (*(_BYTE *)(v28 + 864 * (int)v10 + 2) == 35)
          {
            v45 = 0;
          }
          else if (*(_DWORD *)(v7 + 2740) == 1 && v5[1] == 114)
          {
            v45 = *(_BYTE *)(v28 + 864 * (int)v10 + 46);
          }
          else
          {
            v45 = *(_BYTE *)(v28 + 864 * (int)v10 + 24);
          }
          v24[v12] = v45;
          if (*(_BYTE *)(*(_QWORD *)(v2 + 760) + 864 * (int)v10 + 2) != 35)
          {
            v55 = *(_QWORD *)(v4 + 16);
            if (v55)
            {
              if (*(_BYTE *)(v55 + 6) && *(_BYTE *)(v55 + 7))
              {
                v90 = v22;
                v92 = v21;
                v94 = v20;
                v96 = v18;
                v98 = v17;
                v100 = v16;
                v102 = (_QWORD *)result;
                v104 = v15;
                v106 = v14;
                v108 = v13;
                v110 = v8;
                v112 = a2;
                v114 = v4;
                uselect_splitGID(v2, *(_DWORD *)v55, v124, &v123);
                v4 = v114;
                v56 = *(_QWORD *)(v114 + 16);
                v57 = *(unsigned __int8 *)(v56 + 6);
                if (v57 == 3)
                {
                  v58 = 0;
                }
                else if (v57 == 1)
                {
                  v58 = *(unsigned __int8 *)(v56 + 7);
                }
                else
                {
                  v58 = -*(unsigned __int8 *)(v56 + 7);
                }
                v8 = v110;
                a2 = v112;
                v14 = v106;
                v13 = v108;
                result = (uint64_t)v102;
                v15 = v104;
                v17 = v98;
                v16 = v100;
                v20 = v94;
                v18 = v96;
                v22 = v90;
                v21 = v92;
                v74 = (*(unsigned __int8 *)(*(_QWORD *)(v124[0] + 160)
                                          + v123 * *(unsigned __int8 *)(v124[0] + 168)
                                          + *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 11)) >> *(_BYTE *)(*(_QWORD *)(v7 + 2968) + v11 + 12)) & *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 24);
                v75 = *(unsigned __int8 *)(v2 + 924);
                v76 = v75 - v74;
                v62 = v74 >= v75;
                v77 = v74 - v75;
                if (v77 == 0 || !v62)
                  LOBYTE(v77) = v76;
                v78 = v58 * v77 / 100 + v74;
                if (v78 >= 255)
                  v78 = 255;
                v24[v12] = v78 & ~(v78 >> 31);
                *(_DWORD *)v6 = *(_DWORD *)(v2 + 920);
              }
            }
          }
          *(_DWORD *)v6 *= 10;
          if (*(_DWORD *)(v7 + 2740) == 1)
          {
            v79 = *(_QWORD *)(v2 + 760);
            if (v5[1] == 114)
            {
              v80 = v79 + 864 * (int)v10;
              *(_DWORD *)(v4 + 156) = *(unsigned __int8 *)(v80 + 47) * *(unsigned __int8 *)(v80 + 47);
              v81 = *(unsigned __int8 *)(v80 + 47);
              goto LABEL_145;
            }
          }
          else
          {
            v79 = *(_QWORD *)(v2 + 760);
          }
          v82 = v79 + 864 * (int)v10;
          *(_DWORD *)(v4 + 156) = *(unsigned __int8 *)(v82 + 25) * *(unsigned __int8 *)(v82 + 25);
          v81 = *(unsigned __int8 *)(v82 + 25);
LABEL_145:
          *(_DWORD *)(v4 + 152) = v81;
LABEL_82:
          v47 = !*(_DWORD *)v6
             && (*(_DWORD *)(*(_QWORD *)(v7 + 2968) + v11) != 5
              || !*(_DWORD *)(*(_QWORD *)(v2 + 40) + 2680)
              || !*(_DWORD *)(*(_QWORD *)(v2 + 888) + 4));
          *(_DWORD *)(v6 + 16) = v47;
          ++v12;
          v6 += 24;
          v26 += 4;
          v11 += 32;
          if (v12 >= *(unsigned __int16 *)(v7 + 2966))
            break;
          continue;
        case 7:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 13);
          goto LABEL_81;
        case 8:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 14);
          goto LABEL_81;
        case 9:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 15);
          goto LABEL_81;
        case 0xA:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 16);
          goto LABEL_81;
        case 0xB:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 17);
          goto LABEL_81;
        case 0xC:
        case 0x13:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 18);
          goto LABEL_81;
        case 0xD:
        case 0x14:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 21);
          goto LABEL_81;
        case 0xE:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 26);
          goto LABEL_81;
        case 0xF:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 27);
          goto LABEL_81;
        case 0x10:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 28);
          goto LABEL_81;
        case 0x11:
          v24[v12] = 0;
          goto LABEL_82;
        case 0x12:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 29);
          goto LABEL_81;
        case 0x1A:
          if (a2 < 2)
            goto LABEL_64;
          v46 = v28 + 864 * result;
          goto LABEL_63;
        case 0x1B:
          if (*(__int16 *)(v2 + 768) <= (int)v13)
            goto LABEL_64;
          v46 = v28 + 864 * (int)v13;
          goto LABEL_63;
        case 0x1C:
          if (a2 < 4)
            goto LABEL_64;
          v46 = v28 + 864 * v119;
          goto LABEL_63;
        case 0x1D:
          if (*(__int16 *)(v2 + 768) <= (int)v14)
          {
LABEL_64:
            v29 = 35;
          }
          else
          {
            v46 = v28 + 864 * (int)v14;
LABEL_63:
            v29 = *(_BYTE *)(v46 + 2);
          }
LABEL_81:
          v24[v12] = v29;
          goto LABEL_82;
        case 0x1E:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 30);
          goto LABEL_81;
        case 0x1F:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 31);
          goto LABEL_81;
        case 0x20:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 32);
          goto LABEL_81;
        case 0x21:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 33);
          goto LABEL_81;
        case 0x22:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 34);
          goto LABEL_81;
        case 0x23:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 35);
          goto LABEL_81;
        case 0x24:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 36);
          goto LABEL_81;
        case 0x25:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 37);
          goto LABEL_81;
        case 0x26:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 38);
          goto LABEL_81;
        case 0x27:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 39);
          goto LABEL_81;
        case 0x28:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 40);
          goto LABEL_81;
        case 0x29:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 41);
          goto LABEL_81;
        case 0x2B:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 42);
          goto LABEL_81;
        case 0x2C:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 43);
          goto LABEL_81;
        case 0x45:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 48);
          goto LABEL_81;
        case 0x46:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 49);
          goto LABEL_81;
        default:
          goto LABEL_82;
      }
      break;
    }
  }
  if (*(_DWORD *)(v7 + 2560))
  {
    v83 = *(_QWORD *)(v2 + 760) + 864 * (int)v10;
    v84 = *(_BYTE *)(v83 + 68);
    *(_QWORD *)(v4 + 29) = *(_QWORD *)(v83 + 60);
    *(_BYTE *)(v4 + 37) = v84;
    v85 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 36));
    *(_BYTE *)(v4 + 36) = v85;
    v86 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 37));
    *(_BYTE *)(v4 + 37) = v86;
    v87 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 34));
    *(_BYTE *)(v4 + 34) = v87;
    v88 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 35));
    *(_BYTE *)(v4 + 35) = v88;
    if (v85 == 255 || v86 == 255 || v87 == 255 || v88 == 255)
    {
      *(_BYTE *)(v4 + 37) = 0;
      *(_QWORD *)(v4 + 29) = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)(v2 + 760) + 864 * (int)v10 + 20))
    {
      if (v5[1] == 108)
        *(_DWORD *)(v4 + 40) = 100000;
    }
  }
  return result;
}

uint64_t smooth_f0(uint64_t a1, unsigned __int16 *a2, int a3, unsigned int a4)
{
  char v4;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  BOOL *v31;
  int v32;
  _WORD *v33;
  uint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int32x2_t *v41;
  __int32 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  signed int v46;
  uint64_t v47;
  int v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned __int16 *v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;

  v4 = a4;
  v8 = (a3 + 1);
  v9 = 0x200000 / a4;
  v10 = 2229280778;
  v11 = heap_Calloc(*(_QWORD **)(a1 + 8), (3 * v8), 4);
  if (v11)
  {
    v12 = v11;
    v13 = heap_Calloc(*(_QWORD **)(a1 + 8), v8, 4);
    v14 = *(_QWORD **)(a1 + 8);
    if (!v13)
    {
      v67 = v12;
LABEL_78:
      heap_Free(v14, v67);
      return v10;
    }
    v15 = heap_Calloc(v14, v8, 2);
    if (!v15)
    {
LABEL_77:
      heap_Free(*(_QWORD **)(a1 + 8), v12);
      v14 = *(_QWORD **)(a1 + 8);
      v67 = v13;
      goto LABEL_78;
    }
    v72 = (unsigned __int16 *)v15;
    v16 = heap_Calloc(*(_QWORD **)(a1 + 8), v8, 4);
    v17 = *(_QWORD **)(a1 + 8);
    if (!v16)
    {
      v68 = (uint64_t)v72;
LABEL_76:
      heap_Free(v17, v68);
      goto LABEL_77;
    }
    v71 = v16;
    v70 = heap_Calloc(v17, v8, 1);
    if (v70)
    {
      v18 = heap_Calloc(*(_QWORD **)(a1 + 8), v8, 1);
      v19 = v18;
      if (v18)
      {
        v20 = (uint64_t)v72;
        *v72 = *a2;
        if (a3 >= 2)
        {
          v21 = v72 + 1;
          v22 = a2 + 2;
          v23 = a3 - 1;
          do
          {
            v24 = *v22;
            v25 = *(v22 - 1);
            v22 += 2;
            v26 = (v25 + v24) >> 1;
            if (!v25)
              LOWORD(v26) = v24;
            if (v24)
              v27 = v26;
            else
              v27 = v25;
            *v21++ = v27;
            --v23;
          }
          while (v23);
        }
        v28 = 2 * a3;
        v72[a3] = a2[2 * a3 - 1];
        if (a3 <= 0x7FFFFFFE)
        {
          v29 = v8;
          v30 = v72;
          v31 = (BOOL *)v70;
          do
          {
            v32 = *v30++;
            *v31++ = v32 != 0;
            --v29;
          }
          while (v29);
        }
        if (a3 >= 1)
        {
          v33 = a2 + 1;
          v34 = a3;
          v35 = (_BYTE *)v18;
          v36 = (_DWORD *)v71;
          do
          {
            v37 = (unsigned __int16)*(v33 - 1);
            if (*(v33 - 1))
            {
              v37 = (unsigned __int16)*v33 - v37;
              if (*v33)
              {
                v38 = v4;
              }
              else
              {
                v37 = 0;
                v38 = 0;
              }
            }
            else
            {
              v38 = 0;
            }
            *v36++ = v37;
            *v35++ = v38;
            v33 += 2;
            --v34;
          }
          while (v34);
        }
        v39 = v70;
        if (a3 <= 0x7FFFFFFE)
        {
          v40 = 0;
          v41 = (int32x2_t *)(v12 + 8);
          do
          {
            v41[-1].i32[0] = 0;
            v41[-1].i32[1] = *(unsigned __int8 *)(v70 + v40);
            v41->i32[0] = 0;
            *(_DWORD *)(v13 + 4 * v40) = v72[v40] * *(unsigned __int8 *)(v70 + v40);
            if (v40)
            {
              v42 = v41[-1].i32[1];
              v41[-1].i32[0] -= *(unsigned __int8 *)(v18 + (v40 - 1));
              v41[-1].i32[1] = v42 + *(unsigned __int8 *)(v18 + (v40 - 1));
              *(_DWORD *)(v13 + 4 * v40) += *(_DWORD *)(v71 + 4 * (v40 - 1))
                                          * *(unsigned __int8 *)(v18 + (v40 - 1));
            }
            if (v40 < a3)
            {
              v41[-1].i32[1] += *(unsigned __int8 *)(v18 + v40);
              v41->i32[0] -= *(unsigned __int8 *)(v18 + v40);
              *(_DWORD *)(v13 + 4 * v40) -= *(_DWORD *)(v71 + 4 * v40) * *(unsigned __int8 *)(v18 + v40);
            }
            v41[-1] = vshl_n_s32(v41[-1], 9uLL);
            v41->i32[0] <<= 9;
            v41 = (int32x2_t *)((char *)v41 + 12);
            *(_DWORD *)(v13 + 4 * v40++) <<= 9;
          }
          while (v8 != v40);
        }
        if (a3 >= 1)
        {
          v43 = 0;
          do
          {
            v44 = 3 * v43 + 1;
            v45 = *(_DWORD *)(v12 + 4 * v44);
            if (v45)
            {
              v46 = *(_DWORD *)(v13 + 4 * v43);
              v47 = 3 * v43 + 2;
              if (v46 <= v9)
              {
                v48 = *(_DWORD *)(v12 + 4 * v47);
              }
              else
              {
                do
                {
                  *(_DWORD *)(v13 + 4 * v43) = v46 >> 1;
                  v45 = *(_DWORD *)(v12 + 4 * v44) / 2;
                  *(_DWORD *)(v12 + 4 * v44) = v45;
                  v48 = *(_DWORD *)(v12 + 4 * v47) / 2;
                  *(_DWORD *)(v12 + 4 * v47) = v48;
                  v46 = *(_DWORD *)(v13 + 4 * v43);
                }
                while (v46 > v9);
              }
              v49 = (int *)(v12 + 12 * (v43 + 1));
              v50 = *v49;
              v51 = *v49 * v48;
              if (v45 >= 0)
                v52 = v45;
              else
                v52 = v45 + 1;
              v49[1] -= (v51 + (v52 >> 1)) / v45;
              *(_DWORD *)(v13 + 4 * (v43 + 1)) -= (*(_DWORD *)(v13 + 4 * v43) * v50 + (v52 >> 1)) / v45;
              ++v43;
            }
            else
            {
              ++v43;
            }
          }
          while (v43 != a3);
        }
        v53 = *(_DWORD *)(v12 + 12 * a3 + 4);
        if (v53)
        {
          if (v53 >= 0)
            v54 = *(_DWORD *)(v12 + 12 * a3 + 4);
          else
            v54 = v53 + 1;
          v53 = (*(_DWORD *)(v13 + 4 * a3) + (v54 >> 1)) / v53;
        }
        a2[2 * (_DWORD)v8 - 3] = v53;
        v55 = (a3 - 1);
        if (a3 - 1 >= 0)
        {
          v56 = 2 * (a3 - 1);
          v57 = (_DWORD *)(v12 + 12 * v55 + 8);
          v58 = a3;
          v59 = (a3 - 1);
          do
          {
            v60 = *(v57 - 1);
            if (v60)
            {
              v61 = &a2[v28];
              if (v58 >= a3)
                v61 = &a2[2 * (_DWORD)v8 - 3];
              v62 = *v61;
              if (v60 >= 0)
                v63 = *(v57 - 1);
              else
                v63 = v60 + 1;
              v60 = (*(_DWORD *)(v13 + 4 * v59) + (v63 >> 1) - *v57 * v62) / v60;
            }
            v57 -= 3;
            v64 = &a2[v56 & 0xFFFFFFFE];
            if (v59 >= a3)
              v64 = &a2[2 * (_DWORD)v8 - 3];
            *v64 = v60;
            v56 -= 2;
            --v58;
            v28 -= 2;
          }
          while (v59-- > 0);
          if (a3 >= 2)
          {
            v66 = a2 + 2;
            do
            {
              *(v66 - 1) = *v66;
              v66 += 2;
              --v55;
            }
            while (v55);
          }
        }
        v10 = 0;
        goto LABEL_72;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t)v72;
    v39 = v70;
LABEL_72:
    heap_Free(*(_QWORD **)(a1 + 8), v20);
    heap_Free(*(_QWORD **)(a1 + 8), v71);
    if (v39)
      heap_Free(*(_QWORD **)(a1 + 8), v39);
    if (!v19)
      goto LABEL_77;
    v17 = *(_QWORD **)(a1 + 8);
    v68 = v19;
    goto LABEL_76;
  }
  return v10;
}

uint64_t US_comp(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 != *a2;
}

uint64_t uselect_ResetUnitSelector(uint64_t a1, int a2)
{
  int v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  if (a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 908);
    if ((v3 * a2) > *(_DWORD *)(a1 + 784))
    {
      v4 = (v3 * (__int16)((a2 & 0xFFC0) + 64));
      v5 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 792), 4 * v4);
      if (!v5
        || (*(_QWORD *)(a1 + 792) = v5,
            (v10 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 800), v4)) == 0)
        || (*(_QWORD *)(a1 + 800) = v10,
            (v11 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 808), 2 * v4)) == 0))
      {
        v12 = 2229280778;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v6, v7, v8, v9, v17);
        return v12;
      }
      *(_QWORD *)(a1 + 808) = v11;
      *(_DWORD *)(a1 + 784) = v4;
      memset(*(void **)(a1 + 792), 255, 4 * v4);
      memset(*(void **)(a1 + 800), 255, v4);
    }
    return 0;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 792);
    if (v13)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
      *(_QWORD *)(a1 + 792) = 0;
      *(_DWORD *)(a1 + 784) = 0;
    }
    v14 = *(_QWORD *)(a1 + 800);
    if (v14)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
      *(_QWORD *)(a1 + 800) = 0;
    }
    v15 = *(_QWORD *)(a1 + 808);
    if (v15)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
      *(_QWORD *)(a1 + 808) = 0;
    }
    v12 = 0;
    *(_DWORD *)(a1 + 784) = 0;
  }
  return v12;
}

uint64_t uselect_ProcessUnitSelector(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 i;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  unsigned __int8 *v84;
  _BOOL4 v85;

  v2 = *(_DWORD **)(a1 + 40);
  if (v2[671])
  {
    v85 = v2[672] != 0;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v85 = 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 746);
  if (*(_WORD *)(a1 + 746))
  {
    v5 = *(_DWORD *)(a1 + 768);
LABEL_16:
    v14 = v5 << 16;
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 824) = v6;
  v7 = *(unsigned __int8 *)(a1 + 908);
  v8 = v6 + 112 * v7;
  *(_QWORD *)(a1 + 832) = v8;
  *(_QWORD *)(a1 + 840) = v8 + 112 * v7;
  *(_WORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 850) = 0;
  if (v7)
  {
    v9 = v6 + 32;
    v10 = v7;
    do
    {
      *(_DWORD *)v9 = -1;
      *(_BYTE *)(v9 + 26) = -1;
      v9 += 112;
      --v10;
    }
    while (v10);
    v11 = v6 + 112 * v7 + 32;
    v12 = v7;
    do
    {
      *(_DWORD *)v11 = -1;
      *(_BYTE *)(v11 + 26) = -1;
      v11 += 112;
      --v12;
    }
    while (v12);
    v13 = v6 + 224 * v7 + 32;
    do
    {
      *(_DWORD *)v13 = -1;
      *(_BYTE *)(v13 + 26) = -1;
      v13 += 112;
      --v7;
    }
    while (v7);
  }
  v5 = *(_DWORD *)(a1 + 768);
  v14 = v5 << 16;
  if (v5 << 16 >= 1)
  {
    v15 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3528);
    do
    {
      *(_DWORD *)(v16 + 4 * (__int16)v15++) = -1;
      v5 = *(_DWORD *)(a1 + 768);
    }
    while (2 * (__int16)v5 > (__int16)v15);
    goto LABEL_16;
  }
LABEL_17:
  if (v4)
    LOWORD(v4) = 2 * v4 + 4;
  else
    LOWORD(v4) = 0;
  v17 = 2 * v5 - 1;
  if (v14 >> 15 > (__int16)(2 * *(_WORD *)(a1 + 748) + 3))
    v17 = 2 * *(_WORD *)(a1 + 748) + 3;
  v18 = v17;
  if ((__int16)v4 <= v17)
  {
    while (1)
    {
      v21 = (__int16)v4;
      v22 = (__int16)v4 - 1;
      if ((__int16)v4 > 1)
        break;
      result = uselect_SelectNextCandidate(a1, v3, 0, (__int16)v4);
      if ((_DWORD)result)
        return result;
      LODWORD(v24) = *(unsigned __int8 *)(a1 + 908);
      v25 = *(unsigned __int8 *)(a1 + 850);
      if (*(_BYTE *)(a1 + 850))
      {
        v26 = 0;
        v27 = (int)(v24 * v21);
        v28 = *(_QWORD *)(a1 + 808) + 2 * v27;
        v29 = *(_QWORD *)(a1 + 840);
        v30 = *(_QWORD *)(a1 + 64);
        v31 = *(_QWORD *)(a1 + 792) + 4 * v27;
        do
        {
          v32 = v29 + 112 * v26;
          v33 = *(_QWORD *)(v32 + 40);
          v34 = *(_DWORD *)(v32 + 32);
          v35 = *(_DWORD *)(a1 + 48) - 1;
          while (v35)
          {
            v36 = v35;
            v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v35--);
            if (v37 == v33)
            {
              v38 = v36;
              goto LABEL_33;
            }
          }
          v38 = 0;
LABEL_33:
          *(_DWORD *)(v31 + 4 * v26) = *(_DWORD *)(v30 + 4 * v38) + v34;
          *(_WORD *)(v28 + 2 * v26) = *(_WORD *)(v29 + 112 * v26 + 59);
          if (!v21)
            *(_DWORD *)(v29 + 112 * v26) = 0;
          ++v26;
        }
        while (v26 != v25);
      }
LABEL_65:
      v20 = *(unsigned __int8 *)(a1 + 849);
      *(_BYTE *)(a1 + 848) = v20;
      *(_BYTE *)(a1 + 849) = *(_BYTE *)(a1 + 850);
      *(_BYTE *)(a1 + 850) = 0;
      v60 = *(_QWORD *)(a1 + 824);
      v61 = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 824) = v61;
      *(_QWORD *)(a1 + 840) = v60;
      if ((_DWORD)v24)
      {
        v24 = v24;
        v62 = v60 + 32;
        do
        {
          *(_DWORD *)v62 = -1;
          *(_BYTE *)(v62 + 26) = -1;
          v62 += 112;
          --v24;
        }
        while (v24);
      }
      v4 = (__int16)(v21 + 1);
      if (v4 > v18)
      {
        v19 = (unsigned int *)v61;
        goto LABEL_70;
      }
    }
    if (!v85)
      goto LABEL_44;
    v39 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v39 + 2732) == 1)
    {
      if ((v21 & 1) != 0)
      {
LABEL_44:
        v40 = 0;
LABEL_45:
        result = uselect_SelectNextCandidate(a1, v3, v40, v21);
        if ((_DWORD)result)
          return result;
        if (v85 && v21 != 2 && (v21 & 1) == 0)
        {
          v41 = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(v41 + 2732) == 1
            || *(_BYTE *)(v41
                        + *((unsigned __int8 *)v2
                          + *(unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 864 * ((v21 >> 1) - 1) + 2)
                          + 2144)
                        + 1887) != 83)
          {
            result = uselect_SelectNextCandidate(a1, v3, 1, (__int16)v22);
            if ((_DWORD)result)
              return result;
          }
        }
        uselect_SelectBestPredecessor(a1);
        if (v2[667] == 1)
          ssft_qsort(*(_QWORD *)(a1 + 832), *(unsigned __int8 *)(a1 + 849), 112, (uint64_t (*)(unint64_t, unint64_t))US_comp);
        v42 = *(unsigned __int8 *)(a1 + 849);
        LODWORD(v24) = *(unsigned __int8 *)(a1 + 908);
        if (*(_BYTE *)(a1 + 849))
        {
          v43 = 0;
          v44 = *(_QWORD *)(a1 + 832);
          v45 = *(_QWORD *)(a1 + 64);
          v46 = *(_QWORD *)(a1 + 792) + 4 * (v22 * v24);
          do
          {
            v47 = v44 + 112 * v43;
            v48 = *(_QWORD *)(v47 + 40);
            v49 = *(_DWORD *)(v47 + 32);
            v50 = *(_DWORD *)(a1 + 48) - 1;
            while (v50)
            {
              v51 = v50;
              v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v50--);
              if (v52 == v48)
              {
                v53 = v51;
                goto LABEL_61;
              }
            }
            v53 = 0;
LABEL_61:
            *(_DWORD *)(v46 + 4 * v43++) = *(_DWORD *)(v45 + 4 * v53) + v49;
          }
          while (v43 != v42);
          v54 = 0;
          v55 = 0;
          v56 = *(_QWORD *)(a1 + 832);
          v57 = (v22 * v24);
          v58 = *(_QWORD *)(a1 + 800) + v57;
          v59 = *(_QWORD *)(a1 + 808) + 2 * v57 + 1;
          do
          {
            *(_BYTE *)(v58 + v55) = *(_BYTE *)(v56 + v54 + 108);
            v56 = *(_QWORD *)(a1 + 832);
            *(_WORD *)(v59 - 1) = *(_WORD *)(v56 + v54 + 59);
            ++v55;
            v59 += 2;
            v54 += 112;
          }
          while (v55 < *(unsigned __int8 *)(a1 + 849));
          LODWORD(v24) = *(unsigned __int8 *)(a1 + 908);
        }
        goto LABEL_65;
      }
    }
    else if ((v21 & 1) != 0
           || *(_BYTE *)(v39
                       + *((unsigned __int8 *)v2
                         + *(unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 864 * (v21 >> 1) + 2)
                         + 2144)
                       + 1887) == 83)
    {
      goto LABEL_44;
    }
    v40 = 2;
    goto LABEL_45;
  }
  v19 = *(unsigned int **)(a1 + 824);
  v20 = *(unsigned __int8 *)(a1 + 848);
LABEL_70:
  if (v20 < 2)
  {
    v63 = 0;
  }
  else
  {
    v63 = 0;
    v66 = *v19;
    v64 = v19 + 28;
    v65 = v66;
    for (i = 1; i < v20; ++i)
    {
      v69 = *v64;
      v64 += 28;
      v68 = v69;
      if (v69 < v65)
      {
        v65 = v68;
        v63 = i;
      }
    }
  }
  v70 = v18 - 1;
  v71 = (__int16)(v18 - 1);
  if (v71 <= 2 * *(__int16 *)(a1 + 746))
  {
    v74 = *(_QWORD *)(a1 + 792);
    v73 = *(unsigned __int8 *)(a1 + 908);
    v82 = *(_QWORD *)(a1 + 776);
    v76 = *(_QWORD *)(v82 + 3528);
    v72 = *(_QWORD *)(a1 + 808);
    v77 = *(_QWORD *)(v82 + 3536);
  }
  else
  {
    v72 = *(_QWORD *)(a1 + 808);
    v73 = *(unsigned __int8 *)(a1 + 908);
    v74 = *(_QWORD *)(a1 + 792);
    v75 = *(_QWORD *)(a1 + 776);
    v76 = *(_QWORD *)(v75 + 3528);
    v77 = *(_QWORD *)(v75 + 3536);
    v78 = *(_QWORD *)(a1 + 800);
    do
    {
      v79 = v73 * (uint64_t)v71;
      v80 = v63;
      *(_DWORD *)(v76 + 4 * v70) = *(_DWORD *)(v74 + 4 * v79 + 4 * v63);
      v81 = (unsigned __int8 *)(v72 + 2 * v79 + 2 * v63);
      *(_WORD *)(v77 + 4 * v71) = *v81;
      *(_WORD *)(v77 + 4 * v71 + 2) = v81[1];
      v63 = *(_BYTE *)(v78 + v79 + v80);
      v71 = --v70;
    }
    while (v70 > 2 * *(__int16 *)(a1 + 746));
  }
  v83 = v71 * v73;
  *(_DWORD *)(v76 + 4 * v70) = *(_DWORD *)(v74 + 4 * v83 + 4 * v63);
  v84 = (unsigned __int8 *)(v72 + 2 * v83 + 2 * v63);
  *(_WORD *)(v77 + 4 * v71) = *v84;
  *(_WORD *)(v77 + 4 * v71 + 2) = v84[1];
  result = 0;
  if (v18 + 1 == (int)(*(_DWORD *)(a1 + 768) << 16) >> 15)
    *(_DWORD *)(v76 + 4 * v18) = *(_DWORD *)(*(_QWORD *)(a1 + 832) + 32);
  return result;
}

uint64_t uselect_SelectNextCandidate(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a1 + 776);
  if (*(_DWORD *)(a1 + 916))
  {
    v9 = *(_QWORD *)(v8 + 3640);
    v10 = v9 + 504 * a4;
    if (!v9)
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(v11 + 8) = v10;
  v12 = *(_QWORD *)(v8 + 3648);
  if (v12)
  {
    if (*(_BYTE *)(v12 + 8 * a4 + 4) || *(_BYTE *)(v12 + 8 * a4 + 6))
      v12 += 8 * a4;
    else
      v12 = 0;
  }
  *(_QWORD *)(v11 + 16) = v12;
  uselect_ExtractFeatFromMsg(a1, a4);
  v13 = *(_QWORD *)(a1 + 760);
  v14 = (uint64_t)(__int16)(a4 + ((unsigned __int16)(a4 & 0x8000) >> 15)) >> 1;
  v15 = *(_QWORD *)(a1 + 888);
  v16 = v13 + 864 * (int)v14;
  v17 = (int *)(v16 + 8);
  v18 = (int *)(v16 + 4);
  if ((a4 & 1) != 0)
    v18 = v17;
  v19 = *v18;
  *(_DWORD *)(v15 + 24) = v19;
  if (v19 <= 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3632);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 4 * a4);
      if (v22 != -1)
        *(_DWORD *)(v15 + 24) = v22;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 2532))
  {
    if ((a4 + 1) >= 3)
      v20 = *(_BYTE *)(v13 + 864 * (int)v14 - 862);
    else
      v20 = 0;
    *(_BYTE *)(v15 + 44) = v20;
    if (*(__int16 *)(a1 + 768) - 1 == (_DWORD)v14)
      v24 = 0;
    else
      v24 = *(_BYTE *)(*(_QWORD *)(a1 + 760) + 864 * (int)v14 + 866);
    *(_BYTE *)(v15 + 45) = v24;
    v23 = *(_BYTE **)(a1 + 856);
    if (*v23 == 35)
    {
      if (v23[1] == 114)
        *(_BYTE *)(v15 + 44) = 35;
      else
        *(_BYTE *)(v15 + 45) = 35;
    }
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 856);
  }
  *(_BYTE *)(v15 + 28) = 0;
  if (v23[1] == 108)
  {
    if (a4 < 2)
      goto LABEL_34;
    v25 = *(_QWORD *)(a1 + 760) + 864 * (unsigned __int16)(((unsigned __int16)a4 >> 1) - 1);
  }
  else
  {
    if (*(__int16 *)(a1 + 768) <= (int)v14 + 1)
      goto LABEL_34;
    v25 = *(_QWORD *)(a1 + 760) + 864 * ((int)v14 + 1);
  }
  *(_BYTE *)(v15 + 28) = *(_BYTE *)(v25 + 2);
LABEL_34:
  if (a2)
  {
    v26 = *(_QWORD *)(a1 + 760);
    if (v23[1] == 108)
      v27 = *(unsigned __int8 *)(v26 + 864 * (int)v14 + 776);
    else
      v27 = *(unsigned __int8 *)(v26 + 864 * (int)v14 + 777);
    v28 = uselect_CascadingFlatSearch(a1, v27, a3);
  }
  else
  {
    v28 = uselect_FlatSearch(a1);
  }
  *(_BYTE *)(a1 + 872) = v28;
  uselect_CopyResultsToDpNode(a1, a3, a4);
  if (a3 == 1 || *(_BYTE *)(a1 + 850))
    return 0;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19009, "%s%d", v29, v30, v31, v32, "phoneme");
  return 2229280796;
}

uint64_t uselect_SelectBestPredecessor(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = result;
  v2 = *(_QWORD *)(result + 824);
  v3 = *(unsigned __int8 *)(v2 + 76);
  v4 = **(_QWORD **)(v2 + 40);
  if ((_DWORD)v3 == *(unsigned __int8 *)(v4 + 2179)
    || *(unsigned __int8 *)(*(_QWORD *)(result + 832) + 76) == *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(result + 832)
                                                                                                  + 40)
                                                                                    + 2179))
  {
    if (!*(_DWORD *)(v4 + 2588) || (v5 = *(_QWORD *)(result + 832), !*(_DWORD *)(**(_QWORD **)(v5 + 40) + 2588)))
    {
      v6 = 1;
      goto LABEL_9;
    }
    if (!*(_BYTE *)(v2 + 86))
    {
      v6 = *(_BYTE *)(v5 + 87) == 0;
      goto LABEL_9;
    }
  }
  v6 = 0;
LABEL_9:
  v7 = *(unsigned __int8 *)(result + 849);
  v9 = *(_DWORD *)(*(_QWORD *)(result + 40) + 2616) == 1
    && *(_BYTE *)(v4 + v3 + 1630) == 83
    && (v8 = *(_QWORD *)(result + 832), *(_BYTE *)(**(_QWORD **)(v8 + 40) + *(unsigned __int8 *)(v8 + 76) + 1630) == 83)
    && *(unsigned __int8 *)(v8 + 77) == 114;
  v10 = *(_QWORD *)(result + 832);
  if (*(_DWORD *)(v4 + 2696))
  {
    v11 = v4 == **(_QWORD **)(v10 + 40);
    if (!*(_BYTE *)(result + 849))
      return result;
  }
  else
  {
    v11 = 0;
    if (!*(_BYTE *)(result + 849))
      return result;
  }
  v21 = *(_QWORD *)(result + 40);
  v12 = 1;
  do
  {
    result = uselect_CalculateCost(v1, v10, v6, v9, v11);
    *(_DWORD *)(v10 + 4) = result;
    if (result < 0xEE6B2800)
      v12 = 0;
    v13 = *(_QWORD *)(v1 + 832);
    v10 += 112;
  }
  while (v10 < v13 + 112 * v7);
  if (v12 && v11)
  {
    do
    {
      result = uselect_CalculateCost(v1, v13, v6, v9, 0);
      *(_DWORD *)(v13 + 4) = result;
      v13 += 112;
    }
    while (v13 < *(_QWORD *)(v1 + 832) + 112 * (unint64_t)v7);
    v13 = *(_QWORD *)(v1 + 832);
  }
  v14 = v13 + 112 * v7;
  v15 = *(_QWORD *)(v1 + 824);
  do
  {
    *(_DWORD *)v13 += *(_DWORD *)(v13 + 4);
    v16 = *(unsigned __int8 *)(v13 + 108);
    v17 = **(_DWORD ***)(v15 + 112 * *(unsigned __int8 *)(v13 + 108) + 40);
    if ((v17[848] & 0x80000000) == 0 || (v17[849] & 0x80000000) == 0)
    {
      v18 = **(_QWORD **)(v13 + 40);
      if (((*(_DWORD *)(v18 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v18 + 3396) & 0x80000000) == 0)
        && *(unsigned __int8 *)(v13 + 85) == 255)
      {
        *(_BYTE *)(v13 + 85) = *(_BYTE *)(v15 + 112 * *(unsigned __int8 *)(v13 + 108) + 85);
      }
    }
    if ((v17[846] & 0x80000000) == 0 && !v17[648])
    {
      v19 = **(_QWORD **)(v13 + 40);
      if ((*(_DWORD *)(v19 + 3384) & 0x80000000) == 0 && !*(_DWORD *)(v19 + 2592) && !*(_BYTE *)(v13 + 88))
      {
        v20 = v15 + 112 * v16;
        *(_BYTE *)(v13 + 88) = *(_BYTE *)(v20 + 88);
        *(_BYTE *)(v13 + 89) = *(_BYTE *)(v20 + 89) + 1;
      }
    }
    if (*(_DWORD *)(v21 + 2560)
      && (*(_BYTE *)(v15 + 112 * v16 + 61) != 1 || *(_BYTE *)(v15 + 112 * v16 + 77) != 114)
      && (v17 != **(_DWORD ***)(v13 + 40)
       || *(_DWORD *)(v15 + 112 * v16 + 8) != *(_DWORD *)(v13 + 32)
       || !*(_DWORD *)(v15 + 112 * v16 + 104)))
    {
      *(_DWORD *)(v13 + 104) = 0;
    }
    v13 += 112;
  }
  while (v13 < v14);
  return result;
}

uint64_t uselect_CopyResultsToDpNode(uint64_t result, int a2, int a3)
{
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  BOOL v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  _WORD *v43;
  int v44;
  unsigned int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;

  if ((a3 & 1) != 0)
    v3 = 114;
  else
    v3 = 108;
  if (a2 != 1)
  {
    v4 = *(_QWORD *)(result + 840);
    v6 = *(unsigned __int8 *)(result + 872);
    *(_BYTE *)(result + 850) = v6;
    if (!v6)
      return result;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(result + 832) + 112 * *(unsigned __int8 *)(result + 849);
  v5 = *(unsigned __int8 *)(result + 872);
  *(_BYTE *)(result + 849) += v5;
  if (v5)
  {
LABEL_8:
    v7 = (a3 + ((unsigned __int16)(a3 & 0x8000) >> 15)) << 16 >> 17;
    v8 = *(unsigned int **)(result + 880);
    v9 = v4;
    while (1)
    {
      v10 = *((_QWORD *)v8 + 1);
      *(_QWORD *)(v9 + 40) = v10;
      v11 = *v8;
      *(_DWORD *)(v9 + 32) = v11;
      *(_DWORD *)v9 = v8[4];
      *(_BYTE *)(v9 + 58) = *((_BYTE *)v8 + 20);
      if (*(_DWORD *)(*(_QWORD *)(result + 40) + 2560))
      {
        *(int32x2_t *)(v9 + 96) = vrev64_s32(*(int32x2_t *)(v8 + 7));
        *(_DWORD *)(v9 + 104) = 1;
      }
      v12 = *(_DWORD **)v10;
      v13 = *(unsigned __int8 *)(*(_QWORD *)v10
                               + *(unsigned __int8 *)(*(_QWORD *)(result + 760) + 864 * v7 + 2)
                               + 2144);
      v14 = *(unsigned __int8 *)(*(_QWORD *)v10 + v13 + 859) == 118;
      *(_BYTE *)(v9 + 76) = v13;
      *(_BYTE *)(v9 + 77) = v3;
      *(_DWORD *)(v9 + 80) = v14;
      if (v12[658] <= 0x63u)
      {
        *(_QWORD *)(v9 + 16) = 0;
        v15 = *(_QWORD *)(v10 + 152);
        if (v15)
        {
          v16 = v11 >> 3;
          if ((v11 & 7) != 0)
            ++v16;
          if (((*(unsigned __int8 *)(v15 + v16) >> (v11 & 7 ^ 7)) & 1) != 0)
          {
            v17 = *(_DWORD *)(v10 + 144);
            if (v17)
            {
              v18 = 0;
              v19 = *(_QWORD *)(v10 + 136);
              while (1)
              {
                v20 = v18;
                v21 = *(_DWORD *)(v19 + 4 * v18);
                if (v21 == (_DWORD)v11)
                  break;
                if (v21 <= v11)
                {
                  v18 = v20 + *(_DWORD *)(v19 + 4 * (v20 + 1)) + 2;
                  if (v18 < v17)
                    continue;
                }
                goto LABEL_23;
              }
              *(_QWORD *)(v9 + 16) = v19 + 4 * v20 + 4;
            }
          }
        }
      }
LABEL_23:
      v22 = v12[651];
      if (v22 != 2)
        break;
      v28 = v12[664];
      v29 = v12[661];
      if (v28)
      {
        v30 = *(_QWORD *)(v10 + 192) + v11 * *(unsigned __int8 *)(v10 + 200);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)v30;
        v24 = *(_BYTE *)(v30 + 4);
        *(_BYTE *)(v9 + 59) = v24;
        v25 = *(unsigned __int8 *)(v30 + 5);
        *(_BYTE *)(v9 + 60) = v25;
        *(_WORD *)(v9 + 74) = *(_WORD *)(v30 + 6);
        if (v29)
          *(_WORD *)(v9 + 91) = *(_WORD *)(v30 + 8);
        else
          *(_BYTE *)(v9 + 91) = *(_BYTE *)(v30 + 8);
        goto LABEL_34;
      }
      if (!v29)
        goto LABEL_33;
      v31 = *(_QWORD *)(v10 + 192) + v11 * *(unsigned __int8 *)(v10 + 200);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)v31;
      v24 = *(_BYTE *)(v31 + 4);
      *(_BYTE *)(v9 + 59) = v24;
      v25 = *(unsigned __int8 *)(v31 + 5);
      *(_BYTE *)(v9 + 60) = v25;
      *(_WORD *)(v9 + 74) = *(_WORD *)(v31 + 6);
      *(_BYTE *)(v9 + 92) = *(_BYTE *)(v31 + 8);
LABEL_34:
      v33 = *(_DWORD **)v10;
      if (*(_DWORD *)(*(_QWORD *)v10 + 2696))
      {
        v34 = *(_DWORD *)(v9 + 8);
        *(_BYTE *)(v9 + 87) = v34 < 0;
        *(_BYTE *)(v9 + 86) = (v34 & 0x40000000) != 0;
        v35 = v34 & 0x3FFFFFFF;
        if (v35 == 0x3FFFFFFF)
          v35 = -1;
        *(_DWORD *)(v9 + 8) = v35;
        v33 = *(_DWORD **)v10;
      }
      if ((v33[846] & 0x80000000) == 0)
      {
        *(_BYTE *)(v9 + 90) = v24;
        v36 = v33[648] == 0;
        v37 = v25 < 0x15;
        v38 = !v36 || !v37;
        if (v36 && v37)
          v39 = 0;
        else
          v39 = v25;
        if (v38)
          v40 = 0;
        else
          v40 = 100;
        *(_BYTE *)(v9 + 88) = v39;
        *(_BYTE *)(v9 + 89) = v40;
      }
      if ((v33[848] & 0x80000000) == 0 || (v33[849] & 0x80000000) == 0)
      {
        v41 = *((_BYTE *)v8 + 36);
        *(_BYTE *)(v9 + 84) = v41;
        v42 = *(_QWORD *)(result + 760);
        v43 = (_WORD *)(v42 + 864 * v7);
        *(_WORD *)(v9 + 50) = v43[26];
        *(_WORD *)(v9 + 52) = v43[27];
        *(_WORD *)(v9 + 54) = v43[28];
        *(_WORD *)(v9 + 56) = v43[29];
        if (*((_BYTE *)v33 + v13 + 1116) == 86)
        {
          v44 = (a3 + ((unsigned __int16)(a3 & 0x8000) >> 15)) << 16 >> 17;
          do
          {
            if ((__int16)v44 < 1)
              break;
            LOWORD(v44) = v44 - 1;
            if (*(_BYTE *)(v42 + 864 * (unsigned __int16)v44 + 19) == 1)
              goto LABEL_54;
          }
          while (*((_BYTE *)v33
                  + *((unsigned __int8 *)v33 + *(unsigned __int8 *)(v42 + 864 * (unsigned __int16)v44 + 2) + 2144)
                  + 1116) != 86);
        }
        v41 = -1;
LABEL_54:
        *(_BYTE *)(v9 + 85) = v41;
      }
      v45 = *((unsigned __int16 *)v33 + 1680);
      if (*((_WORD *)v33 + 1680))
      {
        v46 = 0;
        v47 = *(_QWORD *)(result + 760);
        v48 = *(_QWORD *)(v9 + 24);
        do
        {
          v49 = v47 + 864 * v7 + 4 * v46;
          v50 = (_DWORD *)(v49 + 712);
          v51 = (_DWORD *)(v49 + 744);
          if ((a3 & 1) == 0)
            v51 = v50;
          *(_DWORD *)(v48 + 4 * v46++) = *v51;
        }
        while (v45 > v46);
      }
      else
      {
        v47 = *(_QWORD *)(result + 760);
      }
      *(_BYTE *)(v9 + 61) = *(_BYTE *)(v47 + 864 * v7 + 19);
      v9 += 112;
      v8 = (unsigned int *)*((_QWORD *)v8 + 6);
      if (v9 >= v4 + 112 * (unint64_t)*(unsigned __int8 *)(result + 872))
        return result;
    }
    if (v22 == 1)
    {
      v23 = *(_QWORD *)(v10 + 192) + v11 * *(unsigned __int8 *)(v10 + 200);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)v23;
      v24 = *(_BYTE *)(v23 + 16);
      *(_BYTE *)(v9 + 59) = v24;
      v25 = *(unsigned __int8 *)(v23 + 17);
      *(_BYTE *)(v9 + 60) = v25;
      if (v12[647] == 1)
      {
        v26 = *(unsigned __int8 *)(v23 + 18);
        *(_BYTE *)(v9 + 87) = v26 & 0xF;
        *(_BYTE *)(v9 + 86) = v26 >> 4;
      }
      v27 = *(_QWORD *)(v23 + 4);
      *(_DWORD *)(v9 + 70) = *(_DWORD *)(v23 + 12);
      *(_QWORD *)(v9 + 62) = v27;
      goto LABEL_34;
    }
LABEL_33:
    v32 = *(_QWORD *)(v10 + 192) + v11 * *(unsigned __int8 *)(v10 + 200);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)v32;
    v24 = *(_BYTE *)(v32 + 4);
    *(_BYTE *)(v9 + 59) = v24;
    v25 = *(unsigned __int8 *)(v32 + 5);
    *(_BYTE *)(v9 + 60) = v25;
    *(_WORD *)(v9 + 74) = *(_WORD *)(v32 + 6);
    goto LABEL_34;
  }
  return result;
}

uint64_t uselect_splitGID(uint64_t a1, unsigned int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v4 = 0;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 <= 1)
    v5 = 1;
  v6 = v5 - 1;
  while (v6 != v4)
  {
    v7 = v4 + 1;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v4++ + 4);
    if (v8 > a2)
    {
      v6 = v7 - 1;
      break;
    }
  }
  *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
  *a4 = a2 - *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v6);
  return 0;
}

uint64_t uselect_FlatSearch(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t OffsetAndCountInCache3Table;
  int v14;
  _BYTE *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int IsNextUnit;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v104;
  int v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  char v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t i;
  unsigned int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t result;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *j;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  _QWORD *v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  unsigned int v165;
  int v166;
  int *v167;
  int v168;
  int v169;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unsigned int v181;
  int v182;
  int *v183;
  int v184;
  int v185;
  BOOL v187;
  unsigned __int8 v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  char v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int *v195;
  _BYTE *v196;
  _BOOL4 v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  __int16 v207;
  char v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  int v220;
  _QWORD v221[4];
  _QWORD v222[146];

  v222[143] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 888);
  v3 = *(unsigned __int8 **)(a1 + 856);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 908);
  v205 = -1;
  v206 = 0;
  *(_QWORD *)(a1 + 880) = 0;
  v207 = 0;
  v208 = 0;
  if (*(_DWORD *)(v4 + 2560))
    v5 -= 20;
  v188 = v5;
  v6 = *v3;
  v7 = *(unsigned __int8 *)(v4 + 2496);
  v196 = v3;
  v8 = v3[1];
  v9 = v8 == 114;
  v10 = **(_QWORD **)(a1 + 56);
  v209 = v10;
  if (*(_DWORD *)(v4 + 2532) != 1 || *(_DWORD *)(a1 + 912) != 1)
    goto LABEL_31;
  if (*(_BYTE *)(v4 + *(unsigned __int8 *)(v4 + v6 + 2144) + 859) != 118)
    goto LABEL_27;
  v11 = *(_DWORD *)(v4 + 2536) == 1 && v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 2992) + 25) + 3] == 1;
  if (*(_DWORD *)(v4 + 2540) == 1 && v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 2992) + 25) + 3] == 2)
    v11 = 1;
  if (*(_DWORD *)(v4 + 2544) == 1 && v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 2992) + 25) + 3] == 3)
    v11 = 1;
  if (*(_DWORD *)(v4 + 2548) == 1)
  {
    v12 = v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 3000) + 25) + 3] != 1 && !v11;
    if (v12)
      goto LABEL_27;
  }
  else if (!v11)
  {
    goto LABEL_27;
  }
  if (v8 == 108)
  {
    *(_BYTE *)(v2 + 45) = 0;
  }
  else if (v8 == 114)
  {
    *(_BYTE *)(v2 + 44) = 0;
  }
LABEL_27:
  OffsetAndCountInCache3Table = uselect_GetOffsetAndCountInCache3Table((_BYTE *)v4, v10, v3, *(unsigned __int8 *)(v2 + 44), *(unsigned __int8 *)(v2 + 45), &v206);
  if (!*(_DWORD *)(v4 + 2532) || !OffsetAndCountInCache3Table)
  {
    v10 = v209;
LABEL_31:
    v195 = 0;
    v14 = v9 | (2 * (v6 - v7));
    v190 = *(_DWORD *)(*(_QWORD *)(v10 + 128) + 4 * v14);
    v206 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 120) + 2 * v14);
    goto LABEL_32;
  }
  v195 = (unsigned int *)OffsetAndCountInCache3Table;
  v190 = 0;
LABEL_32:
  v16 = v195;
  v15 = v196;
  if (*v196 == 35 || *(_DWORD *)(v2 + 24) != -1)
    goto LABEL_34;
  v124 = *(_DWORD *)(v4 + 2556);
  if (v124 == 3)
  {
    v151 = *(_QWORD *)(a1 + 888);
    if (!*(_BYTE *)(v151 + 29))
      goto LABEL_34;
    v152 = v188;
    v153 = v206;
    v154 = v188 >> 1;
    if (!v206)
    {
LABEL_345:
      v156 = 0;
      v155 = 0;
LABEL_346:
      v197 = v156 > v152;
      v187 = v155 > v154;
LABEL_35:
      if (!v206)
        goto LABEL_259;
      v198 = 0;
      v199 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v204 = 0;
      v21 = 0;
      v189 = v2;
      v191 = -1;
      v192 = 0;
      v194 = -1;
      v193 = v4;
      while (1)
      {
        v22 = *(_DWORD *)(v2 + 24);
        if (v22 == -1)
        {
          if (v16)
            v28 = v16[v18];
          else
            v28 = v18 + v190;
          v205 = v28;
          goto LABEL_52;
        }
        if (!v199)
        {
          v23 = v18;
          uselect_splitGID(a1, v22 & 0x7FFFFFFF, &v209, &v205);
          v28 = v205;
          v29 = v209;
          if (v205 < *(_DWORD *)(v209 + 108))
          {
            v30 = *(_DWORD *)(v2 + 24);
            if ((v30 & 0x80000000) == 0)
            {
              v18 = v206 - 1;
LABEL_196:
              v202 = v20;
              v203 = v19;
              v34 = 0;
              v32 = *(_QWORD *)(v209 + 160) + v205 * *(unsigned __int8 *)(v209 + 168);
              v33 = *(unsigned __int8 **)(v4 + 3000);
              v199 = 1;
              goto LABEL_58;
            }
            v18 = v23;
            if (v30 != -1)
              goto LABEL_196;
            goto LABEL_51;
          }
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19028, "%s%d", v24, v25, v26, v27, "ID");
        }
        *(_DWORD *)(v2 + 24) = -1;
        v209 = **(_QWORD **)(a1 + 56);
        v18 = 0;
        if (v16)
          v28 = *v16;
        else
          v28 = v190;
        v205 = v28;
LABEL_51:
        v199 = 1;
LABEL_52:
        v31 = *(_QWORD *)(a1 + 936);
        v29 = v209;
        if (v31 && v209 == **(_QWORD **)(a1 + 56) && *(unsigned __int8 *)(v31 + v28) == 255)
          goto LABEL_193;
        v32 = *(_QWORD *)(v209 + 160) + v28 * *(unsigned __int8 *)(v209 + 168);
        v33 = *(unsigned __int8 **)(v4 + 3000);
        if (v33)
        {
          if (*(unsigned __int8 *)(v32 + v33[11]) == 255)
            goto LABEL_193;
        }
        v202 = v20;
        v203 = v19;
        v34 = 1;
LABEL_58:
        v35 = *(_QWORD *)(v4 + 2968);
        v36 = *(_QWORD *)(a1 + 896);
        v201 = v21;
        if (!v197 || *v15 == 35)
          goto LABEL_60;
        if (!v34)
          goto LABEL_93;
        v47 = *(_DWORD *)(v4 + 2556);
        switch(v47)
        {
          case 3:
            if (v15[v33[25] + 3] != ((*(unsigned __int8 *)(v32 + v33[11]) >> v33[12]) & v33[24]))
              goto LABEL_236;
            v33 = *(unsigned __int8 **)(v4 + 3016);
            break;
          case 2:
            break;
          case 1:
            v37 = *(_DWORD *)(v4 + 2560);
            if (v37 == 1)
              goto LABEL_63;
            v48 = v15[1];
            if (v48 == 114)
            {
              v49 = *(_QWORD *)(v4 + 2984);
            }
            else
            {
              if (v48 != 108)
                goto LABEL_236;
              v49 = *(_QWORD *)(v4 + 2976);
            }
            v104 = v15[*(unsigned __int8 *)(v49 + 25) + 3];
            v105 = *(unsigned __int8 *)(v32 + *(unsigned __int8 *)(v49 + 11));
            goto LABEL_200;
          default:
            goto LABEL_60;
        }
        v104 = v15[v33[25] + 3];
        v105 = (*(unsigned __int8 *)(v32 + v33[11]) >> v33[12]) & v33[24];
LABEL_200:
        if (v104 != v105)
          goto LABEL_236;
LABEL_60:
        v37 = *(_DWORD *)(v4 + 2560);
        v38 = v34 ^ 1;
        if (!v37)
          v38 = 1;
        if ((v38 & 1) != 0)
        {
LABEL_93:
          v55 = 0;
          v56 = 0;
          goto LABEL_94;
        }
LABEL_63:
        if (!*(_BYTE *)(v2 + 29))
          goto LABEL_93;
        if (v37 == 2)
        {
          if (*v15 != 35
            && ((v50 = (int *)(*(_QWORD *)(v29 + 176) + v28 * *(unsigned __int8 *)(v29 + 184)),
                 v51 = *v50,
                 v52 = *((unsigned __int8 *)v50 + 4),
                 *(_DWORD *)(v2 + 29) == v51)
              ? (v53 = *(unsigned __int8 *)(v2 + 33) == v52)
              : (v53 = 0),
                v53))
          {
            v55 = 0;
            v56 = 1;
          }
          else
          {
            if (v187)
              goto LABEL_236;
            v54 = v15[1];
            if (v54 == 114)
            {
              if (v15[*(unsigned __int8 *)(*(_QWORD *)(v4 + 3024) + 25) + 3] == 3)
                goto LABEL_93;
            }
            else if (v54 == 108 && v15[*(unsigned __int8 *)(*(_QWORD *)(v4 + 3024) + 25) + 3] == 1)
            {
              goto LABEL_93;
            }
            v56 = 0;
            v55 = *(_DWORD *)(v4 + 2640);
          }
        }
        else
        {
          if (v37 != 1)
            goto LABEL_93;
          v39 = (int *)(*(_QWORD *)(v29 + 176) + v28 * *(unsigned __int8 *)(v29 + 184));
          v40 = *(unsigned __int8 *)(v4 + *((unsigned __int8 *)v39 + 5) + 2144);
          if ((_DWORD)v40 == 255)
            goto LABEL_224;
          v41 = *(unsigned __int8 *)(v4 + *((unsigned __int8 *)v39 + 6) + 2144);
          if ((_DWORD)v41 == 255 || *v15 == 35)
            goto LABEL_224;
          v42 = *v39;
          v43 = *((unsigned __int8 *)v39 + 4);
          if (*(_DWORD *)(v2 + 29) != v42 || *(unsigned __int8 *)(v2 + 33) != v43)
            goto LABEL_224;
          v45 = *(unsigned __int8 *)(v2 + 34);
          if ((_DWORD)v45 == (_DWORD)v40)
          {
            v46 = 0;
          }
          else
          {
            v106 = (_QWORD *)(v4 + 192 * *(unsigned __int8 *)(v2 + 36));
            v107 = v106[449];
            v108 = *(unsigned __int8 *)(v107 + v40);
            v109 = *(unsigned __int8 *)(v107 + v45);
            v110 = v106[450];
            v111 = v106[448];
            if (v109 <= v108)
              v112 = v108;
            else
              v112 = v109;
            if (v109 < v108)
              v108 = v109;
            v46 = *(unsigned __int16 *)(v111 + 2 * (*(unsigned __int16 *)(v110 + 2 * v108) + v112));
          }
          if (*(unsigned __int8 *)(v2 + 35) != (_DWORD)v41)
          {
            v113 = (_QWORD *)(v4 + 192 * *(unsigned __int8 *)(v2 + 37));
            v114 = v113[463];
            v115 = v113[464];
            v116 = *(unsigned __int8 *)(v115 + *(unsigned __int8 *)(v2 + 35));
            v117 = v113[465];
            v118 = *(unsigned __int8 *)(v115 + v41);
            if (v116 <= v118)
              v119 = v118;
            else
              v119 = *(unsigned __int8 *)(v115 + *(unsigned __int8 *)(v2 + 35));
            if (v116 < v118)
              v118 = v116;
            v46 += *(unsigned __int16 *)(v114 + 2 * (*(unsigned __int16 *)(v117 + 2 * v118) + v119));
          }
          v120 = *(_DWORD *)(v2 + 40);
          v198 = v46;
          if (v46 >= v120 + 100)
          {
LABEL_224:
            v56 = 0;
          }
          else
          {
            if (v46 < v120)
              *(_DWORD *)(v2 + 40) = v46;
            v56 = 1;
          }
          v121 = !v197;
          if (*(_DWORD *)(v4 + 2556) != 1)
            v121 = 1;
          if ((v121 & 1) == 0 && *v15 != 35)
          {
            v122 = v15[1];
            if (v122 == 114)
            {
              v123 = *(_QWORD *)(v4 + 2984);
            }
            else
            {
              if (v122 != 108)
                goto LABEL_235;
              v123 = *(_QWORD *)(v4 + 2976);
            }
            if (v15[*(unsigned __int8 *)(v123 + 25) + 3] != *(_BYTE *)(v32 + *(unsigned __int8 *)(v123 + 11)))
            {
LABEL_235:
              v16 = v195;
LABEL_236:
              v20 = v202;
              v19 = v203;
              goto LABEL_193;
            }
          }
          v55 = 0;
        }
LABEL_94:
        v200 = v18;
        v57 = v17;
        v58 = v2;
        if (v29 != **(_QWORD **)(a1 + 56))
          goto LABEL_95;
        v63 = v191 >= v194 ? v194 : v191;
        if (!*(_DWORD *)v35)
          goto LABEL_95;
        v64 = v196 + 3;
        while (1)
        {
          v65 = v32;
          v55 += (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v35 + 16))(a1, *v64, *(unsigned __int8 *)(v32 + *(unsigned __int8 *)(v35 + 11)), v35, v36);
          if (!v56 && v55 >= v63)
            break;
          v66 = *(_DWORD *)(v35 + 32);
          v35 += 32;
          ++v64;
          v36 += 24;
          v32 = v65;
          if (!v66)
            goto LABEL_95;
        }
        v32 = v65;
        if (*(_DWORD *)v35)
        {
          v2 = v58;
          v4 = v193;
          v16 = v195;
          v15 = v196;
          v17 = v57;
          v21 = v201;
          v19 = v203;
        }
        else
        {
LABEL_95:
          v2 = v58;
          v59 = *(unsigned int **)(v58 + 8);
          if (!v59)
          {
            v4 = v193;
LABEL_112:
            v17 = v57;
            v19 = v203;
LABEL_113:
            if (*(_DWORD *)(v4 + 2620))
            {
              v67 = *(unsigned __int8 *)(a1 + 849);
              if (!*(_BYTE *)(a1 + 849))
                goto LABEL_128;
              v68 = v19;
              v69 = 0;
              v70 = 0;
              v71 = 0;
              do
              {
                v72 = *(_QWORD *)(a1 + 832);
                if (*(_DWORD *)(v72 + v69 + 8) == v205 && *(_QWORD *)(v72 + v69 + 40) == v209)
                  break;
                if (*(_DWORD *)(v4 + 2636) <= 0x63u)
                {
                  v73 = v72 + v69;
                  v74 = *(_QWORD *)(v73 + 16);
                  if (v74)
                  {
                    if (*(_QWORD *)(v73 + 40) == v209)
                    {
                      v75 = v32;
                      IsNextUnit = uselect_IsNextUnit(v74, v205);
                      v32 = v75;
                      if (IsNextUnit)
                        v71 = 1;
                      v67 = *(unsigned __int8 *)(a1 + 849);
                    }
                  }
                }
                ++v70;
                v69 += 112;
              }
              while (v70 < v67);
              v17 = v57;
              if (v67 == v70)
              {
                v19 = v68;
                v2 = v189;
                if (v71)
                {
                  v55 += *(_DWORD *)(v4 + 2636) * *(_DWORD *)(v4 + 2620) / 0x64u;
                  goto LABEL_130;
                }
LABEL_128:
                v55 += *(_DWORD *)(v4 + 2620);
              }
              else
              {
                v19 = v68;
                v2 = v189;
              }
            }
LABEL_130:
            v77 = v209;
            v79 = v204;
            v78 = v205;
            if (*(_DWORD *)(v4 + 2560))
              v79 = v198;
            v204 = v79;
            v20 = v202;
            if (*(_DWORD *)(v4 + 2560))
              v20 = v56;
            v80 = *(_QWORD *)v209;
            v81 = *(_QWORD *)(*(_QWORD *)v209 + 3008);
            v21 = v201;
            if (v81 && ((*(_DWORD *)(v80 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v80 + 3396) & 0x80000000) == 0))
              v192 = *(_BYTE *)(v32 + *(unsigned __int8 *)(v81 + 11));
            v82 = *(_QWORD *)(a1 + 880);
            if (v82)
            {
              while (*(_DWORD *)(v82 + 16) <= v55)
              {
                v82 = *(_QWORD *)(v82 + 48);
                if (!v82)
                  goto LABEL_141;
              }
              if ((int)v19 >= v188)
              {
                if (v201 == v82)
                  v86 = 0;
                else
                  v86 = v82;
                if (v201)
                {
                  v84 = *(_QWORD *)(v82 + 40);
                  v85 = *(_QWORD *)(v201 + 40);
                  if (v85)
                    *(_QWORD *)(v85 + 48) = 0;
                  v83 = v201;
                  goto LABEL_149;
                }
              }
              else
              {
                v83 = *(_QWORD *)(a1 + 864) + 56 * (int)v19;
                v84 = *(_QWORD *)(v82 + 40);
LABEL_148:
                v19 = (v19 + 1);
                v85 = v201;
                v86 = v82;
                if (v83)
                {
LABEL_149:
                  *(_DWORD *)v83 = v78;
                  *(_DWORD *)(v83 + 4) = 0;
                  *(_QWORD *)(v83 + 8) = v77;
                  *(_DWORD *)(v83 + 16) = v55;
                  *(_DWORD *)(v83 + 20) = 0;
                  *(_DWORD *)(v83 + 24) = v204;
                  *(_DWORD *)(v83 + 28) = v20;
                  *(_DWORD *)(v83 + 32) = 0;
                  *(_BYTE *)(v83 + 36) = v192;
                  *(_WORD *)(v83 + 37) = v207;
                  *(_BYTE *)(v83 + 39) = v208;
                  *(_QWORD *)(v83 + 40) = v84;
                  *(_QWORD *)(v83 + 48) = v86;
                  if (v84)
                  {
                    *(_QWORD *)(v84 + 48) = v83;
                    if (v86)
                      goto LABEL_151;
LABEL_162:
                    v85 = v83;
                  }
                  else
                  {
                    *(_QWORD *)(a1 + 880) = v83;
                    v87 = *(_DWORD *)(v4 + 2568);
                    v88 = v55 + v87;
                    v12 = v87 == -1;
                    v89 = v194;
                    if (!v12)
                      v89 = v88;
                    v194 = v89;
                    if (!v86)
                      goto LABEL_162;
LABEL_151:
                    *(_QWORD *)(v86 + 40) = v83;
                  }
                  if ((int)v19 >= v188 && v85)
                    v191 = *(_DWORD *)(v85 + 16);
                  v21 = v85;
                }
              }
            }
            else
            {
LABEL_141:
              if ((int)v19 < v188)
              {
                v82 = 0;
                v83 = *(_QWORD *)(a1 + 864) + 56 * (int)v19;
                v84 = v201;
                goto LABEL_148;
              }
              if (v201 && v55 < *(_DWORD *)(v201 + 16))
              {
                *(_DWORD *)v201 = v205;
                *(_DWORD *)(v201 + 4) = 0;
                *(_QWORD *)(v201 + 8) = v77;
                *(_DWORD *)(v201 + 16) = v55;
                *(_DWORD *)(v201 + 20) = 0;
                *(_DWORD *)(v201 + 24) = v204;
                *(_DWORD *)(v201 + 28) = v20;
                *(_DWORD *)(v201 + 32) = 0;
                *(_BYTE *)(v201 + 36) = v192;
                *(_WORD *)(v201 + 37) = v207;
                v191 = v55;
                *(_BYTE *)(v201 + 39) = v208;
              }
            }
            if (v56 && *(_DWORD *)(v4 + 2560))
            {
              v90 = (unsigned __int16)v17;
              v91 = &v221[7 * (unsigned __int16)v17];
              *((_DWORD *)v91 + 4) = v55;
              *(_DWORD *)v91 = v205;
              v92 = v209;
              v91[1] = v209;
              *((_DWORD *)v91 + 6) = v198;
              *((_DWORD *)v91 + 7) = 1;
              v93 = *(_QWORD *)(*(_QWORD *)v92 + 3008);
              v16 = v195;
              if (v93)
                BYTE4(v222[7 * (unsigned __int16)v17]) = *(_BYTE *)(v32 + *(unsigned __int8 *)(v93 + 11));
              v15 = v196;
              if ((_WORD)v17)
              {
                v94 = &v221[7 * (unsigned __int16)v17];
                do
                {
                  v95 = &v221[7 * (v90 - 1)];
                  v96 = *((_DWORD *)v95 + 6);
                  v97 = *((_DWORD *)v94 + 6);
                  if (v96 <= v97
                    && (v96 != v97 || LODWORD(v221[7 * (v90 - 1) + 2]) <= *((_DWORD *)v94 + 4)))
                  {
                    break;
                  }
                  v98 = *((_OWORD *)v95 + 1);
                  v210 = *(_OWORD *)v95;
                  v211 = v98;
                  v212 = *((_OWORD *)v95 + 2);
                  *(_QWORD *)&v213 = v95[6];
                  v100 = *((_OWORD *)v94 + 1);
                  v99 = *((_OWORD *)v94 + 2);
                  v101 = *(_OWORD *)v94;
                  v95[6] = v94[6];
                  *((_OWORD *)v95 + 1) = v100;
                  *((_OWORD *)v95 + 2) = v99;
                  *(_OWORD *)v95 = v101;
                  v102 = v211;
                  *(_OWORD *)v94 = v210;
                  *((_OWORD *)v94 + 1) = v102;
                  *((_OWORD *)v94 + 2) = v212;
                  --v90;
                  v94[6] = v213;
                  v94 -= 7;
                }
                while ((_WORD)v90);
              }
              if ((unsigned __int16)v17 >= 0x14u)
                v17 = v17;
              else
                v17 = (v17 + 1);
            }
            else
            {
              v16 = v195;
              v15 = v196;
            }
            goto LABEL_192;
          }
          v4 = v193;
          if (v209 != **(_QWORD **)(a1 + 56))
            goto LABEL_112;
          v60 = *v59;
          v17 = v57;
          v19 = v203;
          if ((_DWORD)v60)
          {
            v61 = 0;
            while (v59[v61 + 1] != v205)
            {
              if (v60 == ++v61)
                goto LABEL_101;
            }
            v62 = *((unsigned __int8 *)v59 + v61 + 404);
          }
          else
          {
LABEL_101:
            v62 = 0;
          }
          v55 += 100 * *(_DWORD *)(a1 + 916) * v62;
          if (v56)
            goto LABEL_113;
          if (v55 < v191 && v55 < v194)
            goto LABEL_113;
          v16 = v195;
          v15 = v196;
          v21 = v201;
        }
        v20 = v202;
LABEL_192:
        v18 = v200;
LABEL_193:
        if (++v18 >= v206)
          goto LABEL_260;
      }
    }
    v155 = 0;
    v156 = 0;
    v157 = *(_QWORD *)(a1 + 856);
    v158 = v195;
    v159 = v190;
    v160 = *(_QWORD **)(a1 + 40);
    while (1)
    {
      if (v156 > v188 && v155 > v154)
        goto LABEL_346;
      v161 = v159;
      if (v195)
        v161 = *v158;
      v162 = *(_QWORD *)(a1 + 936);
      if (!v162 || **(_QWORD **)(a1 + 56) != v209 || *(unsigned __int8 *)(v162 + v161) != 255)
      {
        v163 = *(_QWORD *)(v209 + 160) + v161 * *(unsigned __int8 *)(v209 + 168);
        v164 = (unsigned __int8 *)v160[375];
        if (v164)
        {
          v165 = *(unsigned __int8 *)(v163 + v164[11]);
          if (v165 == 255)
            goto LABEL_316;
        }
        else
        {
          v165 = *(unsigned __int8 *)(v163 + MEMORY[0xB]);
        }
        if (*(unsigned __int8 *)(v157 + v164[25] + 3) == ((v165 >> v164[12]) & v164[24])
          && *(unsigned __int8 *)(v157 + *(unsigned __int8 *)(v160[377] + 25) + 3) == ((*(unsigned __int8 *)(v163 + *(unsigned __int8 *)(v160[377] + 11)) >> *(_BYTE *)(v160[377] + 12)) & *(unsigned __int8 *)(v160[377] + 24)))
        {
          ++v156;
          v166 = *(unsigned __int8 *)(v157 + 1);
          if (v166 == 114)
          {
            if (*(_BYTE *)(v157 + *(unsigned __int8 *)(v160[378] + 25) + 3) != 3)
              goto LABEL_311;
          }
          else if (v166 != 108 || *(_BYTE *)(v157 + *(unsigned __int8 *)(v160[378] + 25) + 3) != 1)
          {
LABEL_311:
            v167 = (int *)(*(_QWORD *)(v209 + 176) + v161 * *(unsigned __int8 *)(v209 + 184));
            v168 = *v167;
            v169 = *((unsigned __int8 *)v167 + 4);
            if (*(_DWORD *)(v151 + 29) == v168 && *(unsigned __int8 *)(v151 + 33) == v169)
              ++v155;
          }
        }
      }
LABEL_316:
      ++v159;
      ++v158;
      if (!--v153)
        goto LABEL_346;
    }
  }
  if (v124 == 2)
  {
    v171 = *(_QWORD *)(a1 + 888);
    if (!*(_BYTE *)(v171 + 29))
      goto LABEL_34;
    v152 = v188;
    v172 = v206;
    v154 = v188 >> 1;
    if (v206)
    {
      v155 = 0;
      v156 = 0;
      v173 = *(_QWORD *)(a1 + 856);
      v174 = v195;
      v175 = v190;
      v176 = *(_QWORD *)(a1 + 40);
      while (1)
      {
        if (v156 > v188 && v155 > v154)
          goto LABEL_346;
        v177 = v175;
        if (v195)
          v177 = *v174;
        v178 = *(_QWORD *)(a1 + 936);
        if (!v178 || **(_QWORD **)(a1 + 56) != v209 || *(unsigned __int8 *)(v178 + v177) != 255)
        {
          v179 = *(_QWORD *)(v209 + 160) + v177 * *(unsigned __int8 *)(v209 + 168);
          v180 = *(unsigned __int8 **)(v176 + 3000);
          if (v180)
          {
            v181 = *(unsigned __int8 *)(v179 + v180[11]);
            if (v181 == 255)
              goto LABEL_343;
          }
          else
          {
            v181 = *(unsigned __int8 *)(v179 + MEMORY[0xB]);
          }
          if (*(unsigned __int8 *)(v173 + v180[25] + 3) == ((v181 >> v180[12]) & v180[24]))
          {
            ++v156;
            v182 = *(unsigned __int8 *)(v173 + 1);
            if (v182 == 114)
            {
              if (*(_BYTE *)(v173 + *(unsigned __int8 *)(*(_QWORD *)(v176 + 3024) + 25) + 3) != 3)
                goto LABEL_338;
            }
            else if (v182 != 108 || *(_BYTE *)(v173 + *(unsigned __int8 *)(*(_QWORD *)(v176 + 3024) + 25) + 3) != 1)
            {
LABEL_338:
              v183 = (int *)(*(_QWORD *)(v209 + 176) + v177 * *(unsigned __int8 *)(v209 + 184));
              v184 = *v183;
              v185 = *((unsigned __int8 *)v183 + 4);
              if (*(_DWORD *)(v171 + 29) == v184 && *(unsigned __int8 *)(v171 + 33) == v185)
                ++v155;
            }
          }
        }
LABEL_343:
        ++v175;
        ++v174;
        if (!--v172)
          goto LABEL_346;
      }
    }
    goto LABEL_345;
  }
  if (v124 != 1)
  {
LABEL_34:
    v197 = 0;
    v187 = 0;
    goto LABEL_35;
  }
  if (v206)
  {
    v125 = 0;
    v126 = 0;
    v127 = *(_QWORD *)(a1 + 856);
    v128 = *(_QWORD **)(a1 + 40);
    v129 = *(_QWORD *)(a1 + 936);
    while (1)
    {
      if (v195)
      {
        v130 = v195[v125];
        if (v129)
          goto LABEL_246;
      }
      else
      {
        v130 = v190 + v125;
        if (v129)
        {
LABEL_246:
          if (**(_QWORD **)(a1 + 56) == v209 && *(unsigned __int8 *)(v129 + v130) == 255)
            goto LABEL_256;
        }
      }
      v131 = *(_QWORD *)(v209 + 160) + v130 * *(unsigned __int8 *)(v209 + 168);
      v132 = v128[375];
      if (!v132 || *(unsigned __int8 *)(v131 + *(unsigned __int8 *)(v132 + 11)) != 255)
      {
        v133 = *(unsigned __int8 *)(v127 + 1);
        if (v133 == 114)
        {
          v134 = v128[373];
LABEL_254:
          if (*(unsigned __int8 *)(v127 + *(unsigned __int8 *)(v134 + 25) + 3) == *(unsigned __int8 *)(v131 + *(unsigned __int8 *)(v134 + 11)))
            ++v126;
          goto LABEL_256;
        }
        if (v133 == 108)
        {
          v134 = v128[372];
          goto LABEL_254;
        }
      }
LABEL_256:
      if (++v125 >= (unint64_t)v206 || v126 > v188)
      {
        v187 = 0;
        v197 = v126 > v188;
        goto LABEL_35;
      }
    }
  }
LABEL_259:
  v21 = 0;
  v19 = 0;
  LOWORD(v17) = 0;
  v194 = -1;
LABEL_260:
  v135 = *(_DWORD *)(v4 + 2568);
  if (v135 != -1)
  {
    v136 = *(_DWORD *)(v4 + 2572);
    if (v136 == -1)
    {
LABEL_272:
      if ((int)v19 >= 2 && v21)
      {
        while (*(_DWORD *)(v21 + 16) > v194)
        {
          v21 = *(_QWORD *)(v21 + 40);
          *(_QWORD *)(v21 + 48) = 0;
          result = (v19 - 1);
          if ((int)v19 >= 3)
          {
            v19 = (v19 - 1);
            if (v21)
              continue;
          }
          goto LABEL_279;
        }
      }
      goto LABEL_278;
    }
    v220 = 0;
    v218 = 0u;
    v219 = 0u;
    v217 = 0u;
    v215 = 0u;
    v216 = 0u;
    v213 = 0u;
    v214 = 0u;
    v211 = 0u;
    v212 = 0u;
    v210 = 0u;
    for (i = *(_QWORD *)(a1 + 880); i; i = *(_QWORD *)(i + 48))
    {
      v138 = (v135 - v194 + *(_DWORD *)(i + 16)) / 0x9C4;
      if (v138 >= 0x27)
        v138 = 39;
      ++*((_DWORD *)&v210 + v138);
    }
    v139 = 0;
    v140 = 0;
    v141 = 2500;
    while (1)
    {
      v140 += *((_DWORD *)&v210 + v139);
      if (v141 > v135 - v140 * v136)
        break;
      ++v139;
      v141 += 2500;
      if (v139 == 40)
        goto LABEL_278;
    }
    if ((unsigned __int16)v139 < 0x27u)
    {
      v194 = v194 - v135 + v141;
      goto LABEL_272;
    }
  }
LABEL_278:
  result = v19;
LABEL_279:
  if (*(_DWORD *)(v4 + 2560))
    v143 = (unsigned __int16)v17 == 0;
  else
    v143 = 1;
  if (!v143)
  {
    v144 = result + (unsigned __int16)v17;
    v145 = (unsigned __int16)v17;
    v146 = 56 * v188;
    for (j = v222; *(j - 2) < *(_DWORD *)(v2 + 40) + 100; j += 14)
    {
      *j = 1;
      v148 = *(_QWORD *)(a1 + 864) + v146;
      v149 = *(_OWORD *)j;
      v150 = *((_OWORD *)j - 2);
      *(_OWORD *)(v148 + 16) = *((_OWORD *)j - 1);
      *(_OWORD *)(v148 + 32) = v149;
      *(_OWORD *)v148 = v150;
      *(_QWORD *)(v148 + 40) = v21;
      *(_QWORD *)(v148 + 48) = 0;
      if (v21)
        *(_QWORD *)(v21 + 48) = v148;
      result = (result + 1);
      v146 += 56;
      v21 = v148;
      if (!--v145)
        return v144;
    }
  }
  return result;
}

uint64_t tmp_GetFirstContextPhone(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  unsigned __int8 ***v7;
  uint64_t v8;
  unsigned __int8 ***v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;

  v3 = a1[111];
  switch(a2)
  {
    case 0:
      return *(unsigned __int8 *)(v3 + 28);
    case 1:
      v5 = a1[5];
      v6 = *(_BYTE *)(a1[107] + 1) == 108;
      v7 = (unsigned __int8 ***)(v5 + 28248);
      v8 = 28240;
      goto LABEL_5;
    case 2:
      v5 = a1[5];
      v6 = *(_BYTE *)(a1[107] + 1) == 108;
      v7 = (unsigned __int8 ***)(v5 + 28264);
      v8 = 28256;
LABEL_5:
      v9 = (unsigned __int8 ***)(v5 + v8);
      if (v6)
        v7 = v9;
      v10 = *v7;
      if (!*v7)
        return 0;
      v11 = *v10;
      if (!*v10)
        return 0;
      v12 = *(unsigned __int8 *)(v3 + 28);
      v13 = v10 + 1;
      break;
    case 3:
      return *(unsigned __int8 *)(a1[5] + 2496);
    default:
      return 0;
  }
  while (*v11 != v12)
  {
    v14 = *v13++;
    v11 = v14;
    if (!v14)
      return 0;
  }
  *a3 = v11 + 1;
  return v11[1];
}

uint64_t presearch_IsCarryingRequired(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;

  if (a2 == 1)
  {
    v3 = *(unsigned __int8 *)(a1 + 849);
    if ((_DWORD)v3 == *(unsigned __int8 *)(a1 + 908) >> 1)
    {
      if (*(_BYTE *)(a1 + 849))
      {
        v4 = (unsigned __int8 *)(*(_QWORD *)(a1 + 832) + 58);
        while (1)
        {
          v5 = *v4;
          v4 += 112;
          if (v5)
            break;
          if (!--v3)
            return 1;
        }
        return 0;
      }
      return 1;
    }
  }
  else if (a3 == *(unsigned __int8 *)(a1 + 908) >> 1)
  {
    v6 = *(_QWORD *)(a1 + 880);
    if (v6)
    {
      while (!*(_BYTE *)(v6 + 20))
      {
        v6 = *(_QWORD *)(v6 + 48);
        if (!v6)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t presearch_GetCarryCandidate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 58))
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 32);
  if (a3 == 1)
  {
    result = *(unsigned int *)(*(_QWORD *)(v5 + 272) + 4 * v6);
    if ((_DWORD)result != -1)
    {
      v7 = *(unsigned __int8 *)(a1 + 849);
      if (*(_BYTE *)(a1 + 849))
      {
        v8 = *(_QWORD *)(a1 + 832);
        if (*(_QWORD *)(v8 + 40) == v5)
        {
          for (i = (_QWORD *)(v8 + 40); *((_DWORD *)i - 2) != (_DWORD)result || *i != v5; i += 14)
          {
            if (!--v7)
              return result;
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    result = *(unsigned int *)(*(_QWORD *)(v5 + 192) + v6 * *(unsigned __int8 *)(v5 + 200));
    if (*(_DWORD *)(v10 + 2696))
    {
      result &= 0x3FFFFFFFu;
      if ((_DWORD)result == 0x3FFFFFFF)
        return 0xFFFFFFFFLL;
    }
    else if ((_DWORD)result == -1)
    {
      return result;
    }
    v11 = *(_QWORD *)(a1 + 880);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 8) == v5)
      {
        while (*(_DWORD *)v11 != (_DWORD)result || *(_QWORD *)(v11 + 8) != v5)
        {
          v11 = *(_QWORD *)(v11 + 48);
          if (!v11)
            return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t presearch_GetIdRange(uint64_t result, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  _BYTE *v6;
  char v7;
  char v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(_BYTE **)(result + 856);
  v7 = *(_BYTE *)(v5 + 2497);
  LODWORD(v5) = *(unsigned __int8 *)(v5 + 2496);
  v8 = v7 - v5;
  v9 = (v8 + 2);
  v10 = (*v6 - v5) * v9 - v5 + a3;
  if (v6[1] == 114)
    v10 += (v8 + 1) * v9 + (v8 + 1);
  v11 = *(_QWORD *)(a2 + 120);
  *a4 = *(_DWORD *)(*(_QWORD *)(a2 + 128) + 4 * v10);
  *a5 = *(unsigned __int16 *)(v11 + 2 * v10);
  return result;
}

uint64_t presearch_CalculateUnitCost(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v3 = *a2;
  if ((_DWORD)v3 == -1
    || (v4 = result,
        v5 = *(_QWORD *)(*(_QWORD *)(result + 40) + 2968),
        v6 = *(_QWORD *)(result + 896),
        v7 = *(_QWORD *)(result + 856),
        v8 = (uint64_t *)*((_QWORD *)a2 + 1),
        (v9 = *(_QWORD *)(result + 936)) != 0)
    && v8 == **(uint64_t ***)(result + 56)
    && *(unsigned __int8 *)(v9 + v3) == 255)
  {
    v14 = -1;
LABEL_10:
    a2[4] = v14;
    return result;
  }
  a2[4] = 0;
  v10 = v8[20] + v3 * *((unsigned __int8 *)v8 + 168);
  v11 = *v8;
  v12 = *(_QWORD *)(*v8 + 3000);
  if (!v12 || *(unsigned __int8 *)(v10 + *(unsigned __int8 *)(v12 + 11)) != 255)
  {
    if (v8 == **(uint64_t ***)(result + 56))
    {
      v13 = *(_DWORD *)v5;
      if (*(_DWORD *)v5)
      {
        v13 = 0;
        v15 = (unsigned __int8 *)(v7 + 3);
        do
        {
          if (v13 >= a2[14])
            break;
          if (!*(_DWORD *)(v6 + 16))
          {
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v5 + 16))(v4, *v15, *(unsigned __int8 *)(v10 + *(unsigned __int8 *)(v5 + 11)), v5, v6);
            v13 = a2[4] + result;
            a2[4] = v13;
          }
          v16 = *(_DWORD *)(v5 + 32);
          v5 += 32;
          ++v15;
          v6 += 24;
        }
        while (v16);
        v11 = *v8;
      }
    }
    else
    {
      v13 = 0;
    }
    v17 = *(_QWORD *)(v11 + 3008);
    if (v17 && ((*(_DWORD *)(v11 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v11 + 3396) & 0x80000000) == 0))
      *((_BYTE *)a2 + 36) = *(_BYTE *)(v10 + *(unsigned __int8 *)(v17 + 11));
    v18 = *(unsigned int **)(*(_QWORD *)(v4 + 888) + 8);
    if (v18)
    {
      if (v8 == **(uint64_t ***)(v4 + 56) && v13 < a2[14])
      {
        v19 = *v18;
        if ((_DWORD)v19)
        {
          v20 = 0;
          while (v18[v20 + 1] != (_DWORD)v3)
          {
            if (v19 == ++v20)
              goto LABEL_29;
          }
          v21 = *((unsigned __int8 *)v18 + v20 + 404);
        }
        else
        {
LABEL_29:
          v21 = 0;
        }
        v14 = v13 + 100 * *(_DWORD *)(v4 + 916) * v21;
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t presearch_RetainCandidate(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v2 = (_QWORD *)(result + 880);
  v3 = *(_QWORD *)(result + 880);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 880);
    while (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(a2 + 16))
    {
      v4 = *(_QWORD *)(v4 + 48);
      if (!v4)
        goto LABEL_5;
    }
    v5 = (uint64_t *)(v4 + 40);
  }
  else
  {
LABEL_5:
    v4 = 0;
    v5 = (uint64_t *)(a2 + 64);
  }
  v6 = *(_QWORD *)(result + 40);
  v7 = *v5;
  v8 = *(_DWORD *)(a2 + 80);
  if (v8 < *(unsigned __int8 *)(a2 + 61))
  {
    v9 = *(_QWORD *)(a2 + 72);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(a2 + 72) = v10;
      if (v10)
        *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
LABEL_30:
      v14 = *(_OWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *(_OWORD *)(v9 + 16) = v14;
      *(_QWORD *)(v9 + 32) = v15;
      *(_QWORD *)(v9 + 40) = v7;
      *(_QWORD *)(v9 + 48) = v4;
      v16 = (_QWORD *)(v7 + 48);
      if (!v7)
        v16 = (_QWORD *)(result + 880);
      *v16 = v9;
      v17 = (uint64_t *)(a2 + 64);
      if (v4)
        v18 = (_QWORD *)(v4 + 40);
      else
        v18 = (_QWORD *)(a2 + 64);
      *v18 = v9;
      v19 = *(_DWORD *)(a2 + 80);
      v20 = v19 + 1;
      *(_DWORD *)(a2 + 80) = v19 + 1;
      if (!v7 && *(_BYTE *)(a2 + 60) != 1)
      {
        v21 = *(_DWORD *)(v6 + 2568);
        if (v21 != -1)
        {
          v22 = *(_DWORD *)(v9 + 16) + v21;
          *(_DWORD *)(a2 + 84) = v22;
          if (*v2)
          {
            if (*(_DWORD *)(v6 + 2568) != -1 && v19 >= 1)
            {
              v23 = *v17;
              if (*v17)
              {
                if (*(_DWORD *)(v23 + 16) >= v22)
                {
                  do
                  {
                    v24 = *(_QWORD *)(v23 + 40);
                    *(_DWORD *)(v23 + 16) = -1;
                    v25 = *(_QWORD *)(a2 + 72);
                    if (v25)
                    {
                      *(_QWORD *)(v25 + 48) = v23;
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 48) + 48) = 0;
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 48) + 40) = *(_QWORD *)(a2 + 72);
                      *(_QWORD *)(a2 + 72) = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 48);
                    }
                    else
                    {
                      *(_QWORD *)(a2 + 72) = v23;
                      *(_QWORD *)(v23 + 48) = 0;
                      *(_QWORD *)(*(_QWORD *)(a2 + 72) + 40) = 0;
                    }
                    *(_QWORD *)(a2 + 64) = v24;
                    *(_QWORD *)(v24 + 48) = 0;
                    v26 = *(_DWORD *)(a2 + 80);
                    v20 = v26 - 1;
                    *(_DWORD *)(a2 + 80) = v26 - 1;
                    if (v26 < 3)
                      break;
                    if (!v24)
                      break;
                    v23 = v24;
                  }
                  while (*(_DWORD *)(v24 + 16) >= v22);
                }
              }
            }
          }
          if (v22 < *(_DWORD *)(a2 + 56))
            *(_DWORD *)(a2 + 56) = v22;
        }
      }
      if (v20 >= *(unsigned __int8 *)(a2 + 61))
      {
        v27 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 16);
        *(_DWORD *)(a2 + 88) = v27;
        *(_DWORD *)(a2 + 56) = v27;
      }
      return result;
    }
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    v9 = *(_QWORD *)(a2 + 64);
    while (*(unsigned __int8 *)(v9 + 20) != *(unsigned __int8 *)(a2 + 20))
    {
      v9 = *(_QWORD *)(v9 + 40);
      if (!v9)
        return result;
    }
    if (*(_DWORD *)(v9 + 16) > *(_DWORD *)(a2 + 16))
    {
      if (v7 == v9)
        v7 = *(_QWORD *)(v7 + 40);
      if (v4 == v9)
        v4 = *(_QWORD *)(v4 + 48);
      if (v3 == v9)
        *v2 = *(_QWORD *)(v3 + 48);
      if (v11 == v9)
      {
        v12 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(a2 + 64) = v12;
        if (!v12)
          goto LABEL_27;
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 40);
        if (!v12)
        {
LABEL_27:
          v13 = *(_QWORD *)(v9 + 48);
          if (v13)
            *(_QWORD *)(v13 + 40) = v12;
          *(_QWORD *)(v9 + 40) = 0;
          *(_QWORD *)(v9 + 48) = 0;
          *(_DWORD *)(a2 + 80) = v8 - 1;
          goto LABEL_30;
        }
      }
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(v9 + 48);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t uselect_CascadingFlatSearch(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  int FirstContextPhone;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[16];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 888);
  v6 = *(_QWORD *)(a1 + 40);
  v40 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  DWORD2(v36) = -1;
  *(_QWORD *)((char *)&v38 + 4) = -1;
  BYTE12(v36) = a3;
  v7 = *(unsigned __int8 *)(a1 + 908);
  v8 = *(_QWORD *)(a1 + 864);
  if (*(_BYTE *)(a1 + 908))
  {
    v9 = 0;
    v10 = v8 + 56;
    do
    {
      if (v9)
        *(_QWORD *)(v10 - 16) = v8 + 56 * (v9 - 1);
      else
        *(_QWORD *)(v8 + 40) = 0;
      if (++v9 >= v7)
        v11 = 0;
      else
        v11 = v10;
      *(_QWORD *)(v10 - 8) = v11;
      *(_DWORD *)(v10 - 40) = -1;
      v10 += 56;
    }
    while (v7 != v9);
  }
  *(_QWORD *)&v37 = 0;
  *((_QWORD *)&v37 + 1) = v8 + 56 * v7 - 56;
  *(_QWORD *)(a1 + 880) = 0;
  v31 = v6;
  if (*(_DWORD *)(v6 + 2684))
    LODWORD(v7) = v7 >> (*(_DWORD *)(v6 + 2688) != 0);
  BYTE13(v36) = v7;
  v12 = *(_DWORD *)(v5 + 24);
  if (v12 != -1)
  {
    uselect_splitGID(a1, v12 & 0x7FFFFFFF, (_QWORD *)&v33 + 1, &v33);
    if (v33 >= *(_DWORD *)(*((_QWORD *)&v33 + 1) + 108))
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19028, "%s%d", v13, v14, v15, v16, "ID");
      *(_DWORD *)(v5 + 24) = -1;
    }
    else
    {
      BYTE4(v34) = 0;
      presearch_CalculateUnitCost(a1, (unsigned int *)&v33);
      presearch_RetainCandidate(a1, (uint64_t)&v33);
      if ((*(_DWORD *)(v5 + 24) & 0x80000000) == 0)
        return v38;
    }
  }
  v39 = 0;
  if (a3 != 1)
  {
    memset(v41, 0, sizeof(v41));
    if (a2 <= 3)
    {
      v17 = v38;
      v18 = BYTE13(v36);
      if ((int)v38 < BYTE13(v36))
      {
        v19 = a2;
        do
        {
          BYTE4(v34) = v19;
          FirstContextPhone = tmp_GetFirstContextPhone((_QWORD *)a1, v19, &v39);
          v21 = v39;
          if (FirstContextPhone)
          {
            do
            {
              v22 = FirstContextPhone;
              if (!*((_BYTE *)v41 + FirstContextPhone))
              {
                *((_BYTE *)v41 + FirstContextPhone) = 1;
                *((_QWORD *)&v33 + 1) = **(_QWORD **)(a1 + 56);
                presearch_GetIdRange(a1, *((uint64_t *)&v33 + 1), FirstContextPhone, &v40, (_DWORD *)&v40 + 1);
                v23 = HIDWORD(v40);
                if (HIDWORD(v40))
                {
                  v24 = v40;
                  do
                  {
                    LODWORD(v33) = v24;
                    presearch_CalculateUnitCost(a1, (unsigned int *)&v33);
                    if (v34 < DWORD2(v36))
                      presearch_RetainCandidate(a1, (uint64_t)&v33);
                    ++v24;
                    --v23;
                  }
                  while (v23);
                }
              }
              if (v19 == 3)
              {
                if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2497) <= v22)
                  break;
                LOBYTE(FirstContextPhone) = v22 + 1;
              }
              else
              {
                if (!v19)
                  break;
                v25 = *(_BYTE *)++v21;
                LOBYTE(FirstContextPhone) = v25;
              }
            }
            while ((_BYTE)FirstContextPhone);
            v17 = v38;
            v18 = BYTE13(v36);
          }
          v39 = v21;
          if (v19 > 2u)
            break;
          ++v19;
        }
        while (v17 < v18);
      }
    }
  }
  if (!a2 && presearch_IsCarryingRequired(a1, a3, v38))
  {
    BYTE4(v34) = 4;
    if (a3 == 2)
    {
      v27 = *(_QWORD *)(a1 + 832);
      v28 = *(unsigned __int8 *)(a1 + 849);
    }
    else
    {
      if (a3 != 1)
        return v38;
      v27 = *(_QWORD *)(a1 + 840);
      v28 = *(unsigned __int8 *)(a1 + 850);
      v29 = *(_DWORD *)(v31 + 2568);
      if (v29 != -1)
        DWORD1(v38) = **(_DWORD **)(a1 + 832) + v29;
    }
    if (v27)
    {
      BYTE13(v36) = *(_BYTE *)(a1 + 908);
      DWORD2(v36) = DWORD1(v38);
      if (v28)
      {
        v30 = v28;
        do
        {
          *((_QWORD *)&v33 + 1) = *(_QWORD *)(v27 + 40);
          LODWORD(v33) = presearch_GetCarryCandidate(a1, v27, a3);
          presearch_CalculateUnitCost(a1, (unsigned int *)&v33);
          if (v34 < DWORD2(v36))
            presearch_RetainCandidate(a1, (uint64_t)&v33);
          v27 += 112;
          --v30;
        }
        while (v30);
      }
    }
  }
  return v38;
}

uint64_t uselect_CartLookup(_QWORD *a1, unsigned __int16 **a2, int a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, _BYTE *a9)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  char v29;

  v9 = a4[4];
  if (*(_BYTE *)(v9 + a5) == 35)
    v10 = 1;
  else
    v10 = 2 * *(_BYTE *)(a4[24] + a5);
  v11 = *a4;
  if (a5 < 1)
    v12 = (unsigned __int8 *)(v11 + 2179);
  else
    v12 = (unsigned __int8 *)(v11 + *(unsigned __int8 *)(v9 + (a5 - 1)) + 2144);
  v13 = *v12;
  if (*((__int16 *)a4 + 5) - 2 <= a5)
    v14 = (unsigned __int8 *)(v11 + 2179);
  else
    v14 = (unsigned __int8 *)(v11 + *(unsigned __int8 *)(a5 + v9 + 1) + 2144);
  v15 = 0;
  v16 = *v14;
  if (a9)
    v17 = a8 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = 2;
  do
  {
    v19 = **a2;
    if (v19 == 0xFFFF)
    {
      v20 = *a2;
    }
    else
    {
      v20 = *a2;
      do
      {
        v21 = v20[2];
        v22 = v10;
        switch(*(_BYTE *)(*a1 + v21))
        {
          case 0xFA:
            v22 = v15;
            break;
          case 0xFB:
            break;
          case 0xFD:
            v22 = v13;
            break;
          case 0xFE:
            v22 = v16;
            break;
          default:
            v22 = *(_BYTE *)(a4[*(unsigned __int8 *)(*a1 + v21) + 2] + a5);
            break;
        }
        v23 = (unsigned __int16 *)(a1[1] + 2 * v21);
        v24 = *v23;
        v25 = v23[1];
        if (v24 >= v25)
        {
LABEL_28:
          v19 = v20[1];
        }
        else
        {
          v26 = (unsigned __int8 *)(a1[2] + v24);
          v27 = v25 - v24;
          while (1)
          {
            v28 = *v26++;
            if (v28 == v22)
              break;
            if (!--v27)
              goto LABEL_28;
          }
        }
        v20 = &(*a2)[3 * v19];
        v19 = *v20;
      }
      while (v19 != 0xFFFF);
    }
    if (a3)
    {
      v29 = *((_BYTE *)v20 + 5);
      if (v15)
      {
        *a9 = v29;
        LODWORD(v20) = *((unsigned __int8 *)v20 + 4)
                     + *(_DWORD *)(*a4 + 2584) * *((unsigned __int8 *)v20 + 5) / 0x64;
LABEL_35:
        *a8 = (_BYTE)v20;
        goto LABEL_38;
      }
      *a7 = v29;
      *a6 = *((_BYTE *)v20 + 4) + *(_DWORD *)(*a4 + 2584) * *((unsigned __int8 *)v20 + 5) / 0x64;
    }
    else
    {
      if (v15)
      {
        *a9 = *((_BYTE *)v20 + 5);
        LOBYTE(v20) = *((_BYTE *)v20 + 4);
        goto LABEL_35;
      }
      *a6 = *((_BYTE *)v20 + 4);
      *a7 = *((_BYTE *)v20 + 5);
    }
LABEL_38:
    ++v15;
  }
  while (v15 != v18);
  return 0;
}

uint64_t featextract_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 415, 104) & 0x80000000) != 0)
    return 2364547080;
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
  return featextract_loadVoice((_WORD **)a1);
}

uint64_t featextract_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((safeh_HandleCheck(a1, a2, 415, 104) & 0x80000000) != 0)
    return 2364547080;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v7 + 64);
  v9 = (*(uint64_t (**)(void))(v7 + 152))();
  v10 = v8(a3, a4, 207, "application/x-realspeak-markers-pp;version=4.0", v9, 1, a1 + 56);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = v10;
LABEL_7:
    featextract_closeStreams(*(_QWORD *)(a1 + 48), a1 + 56);
    return v11;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 64))(a3, a4, 207, "application/x-realspeak-feat-vector", 0, 1, a1 + 72);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_7;
  return v11;
}

uint64_t featextract_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  int v22;
  int v24;
  int Layers;
  int v28;
  int v29;

  v29 = 0;
  v9 = -1930420218;
  result = safeh_HandleCheck((uint64_t)a1, a2, 415, 104);
  if ((result & 0x80000000) != 0)
    return 2364547080;
  *a5 = 1;
  if (a1[7])
  {
    v11 = (uint64_t *)a1[12];
    bzero(v11, 0xE48uLL);
    v17 = a1[4];
    *v11 = v17;
    if (v17)
    {
      v9 = usextract_ProcessStart(a1[2], (uint64_t)"FEATEXTRACT", a1[5], a3, a4, (uint64_t)v11, &v29);
      if ((v9 & 0x80000000) == 0)
      {
        if (*((__int16 *)v11 + 5) > 1)
        {
          Layers = usextract_allocateLayers(a1[2], (uint64_t)"FEATEXTRACT", v11, *((unsigned __int16 *)v11 + 5) + 4 * *((__int16 *)v11 + 7));
          if (Layers < 0)
          {
            v9 = Layers;
            v18 = 0;
            v19 = 1;
          }
          else
          {
            v28 = usextract_Process(a1[2], (uint64_t)"FEATEXTRACT", a1[5], a3, a4, (uint64_t)v11, v15, v16);
            if ((v28 & 0x80000000) == 0)
            {
              v28 = featextract_logFeatures(a1[2], (uint64_t)v11);
              if ((v28 & 0x80000000) == 0)
              {
                featextract_adjustSilAudioOrder((uint64_t)v11);
                v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1[6] + 104))(a1[7], a1[8], v11[439], (32 * *((_DWORD *)v11 + 880)));
                if ((v28 & 0x80000000) == 0)
                  v28 = featextract_writeFeatures(a1[2], a1[6], (uint64_t)(a1 + 7), a1[4], (uint64_t)v11);
              }
            }
            v9 = v28;
            v19 = 0;
            v18 = 0;
          }
        }
        else
        {
          if (!v29)
          {
            *a5 = 0;
LABEL_28:
            v24 = usextract_ProcessEnd(a1[2], (uint64_t)"FEATEXTRACT", (uint64_t)v11);
            if (v9 > -1 && v24 < 0)
              v9 = v24;
LABEL_33:
            LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[5] + 64))(a3, a4);
            if (v9 > -1 && (int)result < 0)
              return result;
            else
              return v9;
          }
          if (a1[7])
          {
            if (*((_DWORD *)v11 + 880))
            {
              v9 = (*(uint64_t (**)(void))(a1[6] + 104))();
              if (v9 < 0)
                log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"FEATEXTRACT", 55008, "%s%s%s%x", v13, v14, v15, v16, "contentType");
            }
          }
          v18 = 0;
          v19 = 1;
          *a5 = 1;
        }
LABEL_15:
        if (v29)
        {
          v20 = featextract_closeStreams(a1[6], (uint64_t)(a1 + 7));
          if (v9 > -1 && v20 < 0)
            v9 = v20;
        }
        if ((v19 & 1) == 0)
        {
          v22 = usextract_freeLayers(a1[2], (uint64_t)"FEATEXTRACT", v11, v12, v13, v14, v15, v16);
          if (v9 > -1 && v22 < 0)
            v9 = v22;
        }
        if ((v18 & 1) != 0)
          goto LABEL_33;
        goto LABEL_28;
      }
      log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"FEATEXTRACT", 55005, "%s%x", v13, v14, v15, v16, "lhError");
    }
    v19 = 1;
    v18 = 1;
    goto LABEL_15;
  }
  return result;
}

uint64_t featextract_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 415, 104) & 0x80000000) != 0)
    return 2364547080;
  else
    return featextract_closeStreams(*(_QWORD *)(a1 + 48), a1 + 56);
}

uint64_t featextract_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2364547073;
  result = 0;
  *a2 = &IFeatextract;
  return result;
}

uint64_t featextract_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2364547079;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 416;
  }
  return result;
}

uint64_t featextract_ClassClose()
{
  return 0;
}

uint64_t featextract_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Voice;
  uint64_t Object;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v25);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v25 + 8), 1, 104);
  if (!v10)
    goto LABEL_11;
  v15 = v10;
  *v10 = a3;
  v10[1] = a4;
  v16 = v25;
  v10[2] = v25;
  v10[3] = a1;
  v10[5] = 0;
  v10[6] = 0;
  v10[4] = 0;
  v17 = heap_Calloc(*(_QWORD **)(v16 + 8), 1, 3656);
  v15[12] = v17;
  if (!v17)
  {
LABEL_11:
    Object = 2364547082;
    log_OutPublic(*(_QWORD *)(v25 + 32), (uint64_t)"FEATEXTRACT", 31000, 0, v11, v12, v13, v14, v21);
    return Object;
  }
  paramc_ParamSetStr(*(_QWORD *)(v15[2] + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
  Voice = featextract_loadVoice((_WORD **)v15);
  if ((Voice & 0x80000000) != 0
    || (Voice = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"LINGDB", &v23), (Voice & 0x80000000) != 0))
  {
    Object = Voice;
    goto LABEL_14;
  }
  v15[5] = *(_QWORD *)(v23 + 8);
  Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v24);
  if ((Object & 0x80000000) != 0)
  {
LABEL_14:
    featextract_ObjClose(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return Object;
  }
  v15[6] = *(_QWORD *)(v24 + 8);
  *((_DWORD *)v15 + 22) = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(v25 + 40), (uint64_t)"usewordorthography", &v22) & 0x80000000) == 0 && v22 == 1)
    *((_DWORD *)v15 + 22) = 1;
  *(_QWORD *)a5 = v15;
  *(_DWORD *)(a5 + 8) = 415;
  return Object;
}

uint64_t featextract_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = safeh_HandleCheck((uint64_t)a1, a2, 415, 104);
  if ((result & 0x80000000) != 0)
    return 2364547080;
  if (a1)
  {
    if (a1[5])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"LINGDB");
    if (a1[6])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
    paramc_ParamSetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"uselectrawdataversion", &byte_1DEBD87CE);
    paramc_ParamSetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"uselectreductionversion", &byte_1DEBD87CE);
    v4 = a1[4];
    if (v4)
    {
      v5 = a1[3];
      if (!v5 || (v6 = *(_QWORD *)(v5 + 48)) == 0)
        v6 = *(_QWORD *)(a1[2] + 48);
      objc_ReleaseObject(v6, v4 + 152);
    }
    v7 = a1[12];
    if (v7)
      heap_Free(*(_QWORD **)(a1[2] + 8), v7);
    heap_Free(*(_QWORD **)(a1[2] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t featextract_loadVoice(_WORD **a1)
{
  uint64_t BrokerString;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t AddRefCountedObject;
  const char *v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char __s2[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LODWORD(v18) = 0;
  BrokerString = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = BrokerString;
      if (!strcmp(v3 + 152, __s2))
        goto LABEL_19;
    }
  }
  v5 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 1, 0);
  if ((v5 & 0x80000000) != 0)
  {
    __s2[0] = 0;
  }
  else
  {
    v4 = v5;
    v6 = (const char *)a1[4];
    if (!v6 || strcmp(v6 + 152, __s2))
    {
      AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v18);
      if (!(_DWORD)v18)
        __s2[0] = 0;
      if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A)
        return AddRefCountedObject;
    }
    if (__s2[0])
      goto LABEL_19;
  }
  AddRefCountedObject = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  v4 = AddRefCountedObject;
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v18);
  if (!(_DWORD)v18)
    __s2[0] = 0;
  if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A)
    return AddRefCountedObject;
  if (!__s2[0])
  {
    v4 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 1);
    if ((v4 & 0x80000000) != 0)
      return v4;
  }
LABEL_19:
  v8 = (const char *)a1[4];
  if (v8)
  {
    v9 = (uint64_t)(v8 + 152);
    if (!strcmp(v8 + 152, __s2))
      return v4;
    v10 = a1[3];
    if (!v10 || (v11 = *((_QWORD *)v10 + 6)) == 0)
      v11 = *((_QWORD *)a1[2] + 6);
    AddRefCountedObject = objc_ReleaseObject(v11, v9);
    a1[4] = 0;
    if ((AddRefCountedObject & 0x80000000) != 0)
      return AddRefCountedObject;
  }
  v18 = 0;
  v12 = a1[3];
  if (v12 && (v13 = *((_QWORD *)v12 + 6)) != 0)
  {
    v14 = (uint64_t)a1[2];
  }
  else
  {
    v14 = (uint64_t)a1[2];
    v13 = *(_QWORD *)(v14 + 48);
  }
  AddRefCountedObject = objc_GetAddRefCountedObject(v13, (uint64_t)__s2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))uselect_ObjcVoiceClose, v14, &v18);
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  v15 = *(_QWORD *)(v18 + 32);
  a1[4] = (_WORD *)v15;
  AddRefCountedObject = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectrawdataversion", (char *)(v15 + 64));
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  v16 = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectreductionversion", (char *)a1[4] + 140);
  v4 = v16;
  if ((v16 & 0x80000000) == 0)
  {
    if (a1[4][1789] == 2)
      return v16;
    else
      return 2364547087;
  }
  return v4;
}

uint64_t Downsample__Resize(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)(result + 32) == a2)
      return 1;
    LODWORD(v3) = *(_DWORD *)(result + 36);
    if (v3 >= a2)
    {
      *(_DWORD *)(result + 32) = a2;
      if ((v3 & 0x80000000) == 0)
      {
        v13 = 0;
        v14 = *(_QWORD *)(result + 16);
        do
        {
          *(_DWORD *)(v14 + 4 * v13) = ((int)v13 + 1) % (*(_DWORD *)(result + 32) + 1);
          v3 = *(int *)(result + 36);
          v7 = v13++ < v3;
        }
        while (v7);
      }
      if ((v3 & 0x40000000) == 0)
      {
        v15 = 0;
        v16 = *(_QWORD *)(result + 24);
        do
        {
          *(_DWORD *)(v16 + 4 * v15) = (int)v15 % (*(_DWORD *)(result + 32) + 1);
          v7 = v15++ < ((2 * *(_DWORD *)(result + 36)) | 1);
        }
        while (v7);
      }
      v12 = *(_DWORD *)(result + 32) + 1;
      goto LABEL_25;
    }
    *(_DWORD *)(result + 36) = a2;
    result = heap_Realloc(*(uint64_t **)(result + 48), *(_QWORD *)result, 2 * a2 + 2);
    if (result)
    {
      *(_QWORD *)v2 = result;
      result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 8), (4 * *(_DWORD *)(v2 + 36) + 4));
      if (result)
      {
        *(_QWORD *)(v2 + 8) = result;
        result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 16), (4 * *(_DWORD *)(v2 + 36) + 4));
        if (result)
        {
          *(_QWORD *)(v2 + 16) = result;
          result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 24), (8 * *(_DWORD *)(v2 + 36) + 8));
          if (result)
          {
            *(_QWORD *)(v2 + 24) = result;
            LODWORD(v4) = *(_DWORD *)(v2 + 36);
            if ((v4 & 0x80000000) == 0)
            {
              v5 = 0;
              v6 = *(_QWORD *)(v2 + 16);
              do
              {
                *(_DWORD *)(v6 + 4 * v5) = ((int)v5 + 1) % (*(_DWORD *)(v2 + 32) + 1);
                v4 = *(int *)(v2 + 36);
                v7 = v5++ < v4;
              }
              while (v7);
            }
            if ((v4 & 0x40000000) == 0)
            {
              v8 = 0;
              do
              {
                *(_DWORD *)(result + 4 * v8) = (int)v8 % (*(_DWORD *)(v2 + 32) + 1);
                LODWORD(v4) = *(_DWORD *)(v2 + 36);
                v7 = v8++ < (int)((2 * v4) | 1);
              }
              while (v7);
            }
            v9 = *(_DWORD *)(v2 + 32) + 1;
            if (v9 <= v4)
            {
              v10 = *(_QWORD *)v2;
              v11 = *(_QWORD *)(v2 + 8);
              do
              {
                *(_WORD *)(v10 + 2 * v9) = 0;
                *(_DWORD *)(v11 + 4 * v9++) = 0;
                LODWORD(v4) = *(_DWORD *)(v2 + 36);
              }
              while (v9 <= v4);
            }
            *(_DWORD *)(v2 + 32) = v4;
            v12 = v4 + 1;
LABEL_25:
            *(_DWORD *)(v2 + 44) = v12 >> 1;
            return 1;
          }
        }
      }
    }
    *(_DWORD *)(v2 + 32) = 0;
  }
  return result;
}

uint64_t *Downsample__Remove(uint64_t *result)
{
  uint64_t *v1;
  _QWORD *v2;

  if (result)
  {
    v1 = result;
    result = (uint64_t *)*result;
    if (result)
    {
      v2 = (_QWORD *)result[6];
      Downsample__Empty(result);
      result = heap_Free(v2, *v1);
      *v1 = 0;
    }
  }
  return result;
}

uint64_t *Downsample__Empty(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    if (*result)
      result = heap_Free((_QWORD *)result[6], *result);
    *v1 = 0;
    v2 = v1[1];
    if (v2)
      result = heap_Free((_QWORD *)v1[6], v2);
    v1[1] = 0;
    v3 = v1[2];
    if (v3)
      result = heap_Free((_QWORD *)v1[6], v3);
    v4 = v1[3];
    v1[2] = 0;
    if (v4)
      result = heap_Free((_QWORD *)v1[6], v4);
    v1[3] = 0;
    v1[4] = 0;
    v1[5] = 0;
  }
  return result;
}

uint64_t *Downsample__Generate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (a2 > 3)
    return 0;
  v4 = heap_Alloc(a1, 56);
  v5 = (uint64_t *)v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_QWORD *)(v4 + 48) = a1;
    v14 = v4;
    switch(a2)
    {
      case 0u:
        if (!Downsample__Resize(v4, 7u))
          goto LABEL_18;
        v6 = 0;
        v7 = *v5;
        do
        {
          *(_WORD *)(v7 + v6 * 2) = CoeffCorrFast2[v6];
          ++v6;
        }
        while (v6 != 8);
        break;
      case 1u:
        if (!Downsample__Resize(v4, 0x19u))
          goto LABEL_18;
        v8 = 0;
        v9 = *v5;
        do
        {
          *(_WORD *)(v9 + v8 * 2) = CoeffStage1Fast[v8];
          ++v8;
        }
        while (v8 != 26);
        break;
      case 2u:
        if (!Downsample__Resize(v4, 5u))
          goto LABEL_18;
        v10 = 0;
        v11 = *v5;
        do
        {
          *(_WORD *)(v11 + v10 * 2) = CoeffStage2[v10];
          ++v10;
        }
        while (v10 != 5);
        break;
      case 3u:
        if (!Downsample__Resize(v4, 3u))
        {
LABEL_18:
          Downsample__Remove(&v14);
          return 0;
        }
        v12 = *v5;
        *(_DWORD *)v12 = 1223358211;
        *(_WORD *)(v12 + 4) = 18666;
        break;
      default:
        return v5;
    }
  }
  return v5;
}

uint64_t Downsample__InterpolateBetweenTwoSamples(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * *(unsigned int *)(a1 + 40)) = a2;
  if (*(int *)(a1 + 44) < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    LODWORD(v4) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    v6 = 4 * (v5 + *(_DWORD *)(a1 + 32));
    do
    {
      v7 = fxd_S32MultIntS32FractS16(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(*(_QWORD *)(a1 + 24) + 4 * (v5 + (int)v3)))+ *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(*(_QWORD *)(a1 + 24) + v6)), *(__int16 *)(*(_QWORD *)a1 + 2 * v3));
      v4 = fxd_S32SatAddS32S32(v4, v7);
      ++v3;
      v6 -= 4;
    }
    while (v3 < *(int *)(a1 + 44));
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(unsigned int *)(a1 + 40));
  return v4;
}

uint64_t Downsample__PrepareToDownsample(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(result + 44);
  if (v3 >= 1)
  {
    v4 = a3 - 2 * v3 + 1;
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    v7 = (2 * v3) | 1;
    do
    {
      if ((v4 & 0x80000000) != 0)
        v8 = 0;
      else
        v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8 * v4);
      v4 += 2;
      *(_DWORD *)(v5 + 4 * *(unsigned int *)(result + 40)) = v8;
      *(_DWORD *)(result + 40) = *(_DWORD *)(v6 + 4 * *(unsigned int *)(result + 40));
      --v7;
    }
    while (v7 > 2);
  }
  return result;
}

uint64_t Downsample__VectorNC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int *v31;
  unsigned int v32;

  if (!a1 || !a2 || !a3 || a5 < a4)
    return 1;
  v9 = *(_DWORD *)(a2 + 8) - 1;
  if (v9 < a4 || v9 < a5)
    return 1;
  v12 = a5 - a4 + 1;
  if (*(_DWORD *)(*a3 + 8) < v12 >> 1)
    Vect__Resize(*a3, v12 >> 1);
  Downsample__PrepareToDownsample(a1, a2, a4);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (_QWORD *)(v13 + 8 * a4);
  v15 = *(_QWORD **)(*a3 + 16);
  v16 = *(_DWORD *)(a1 + 44);
  v17 = (int *)(v13 + 8 * (a4 + 2 * v16 - 1));
  v18 = *(_DWORD *)(*a3 + 8) - v16;
  if (v18 >= 1)
  {
    v19 = v18 + 1;
    while (1)
    {
      *v15 = *v14;
      v20 = *(_DWORD *)v15 + Downsample__InterpolateBetweenTwoSamples(a1, *v17);
      *(_DWORD *)v15 = v20;
      v21 = 65534;
      if (v20 > 65534)
        goto LABEL_17;
      if (v20 <= -65537)
        break;
LABEL_18:
      ++v15;
      v14 += 2;
      v17 += 4;
      if (--v19 <= 1)
      {
        v16 = *(_DWORD *)(a1 + 44);
        goto LABEL_20;
      }
    }
    v21 = -65536;
LABEL_17:
    *(_DWORD *)v15 = v21;
    goto LABEL_18;
  }
LABEL_20:
  v22 = *(_DWORD *)(a2 + 8);
  if (2 * v16 + a5 <= v22)
  {
    if (v16 >= 1)
    {
      v28 = v16 + 1;
      do
      {
        v29 = *v14;
        v14 += 2;
        *v15 = v29;
        LODWORD(v29) = *v17;
        v17 += 4;
        *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v29);
        --v28;
      }
      while (v28 > 1);
    }
  }
  else
  {
    if ((int)(v22 + ~a5) >= 1)
    {
      v23 = v22 - a5;
      do
      {
        v24 = *v14;
        v14 += 2;
        *v15 = v24;
        LODWORD(v24) = *v17;
        v17 += 4;
        *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v24);
        --v23;
      }
      while (v23 > 1);
      v16 = *(_DWORD *)(a1 + 44);
      v22 = *(_DWORD *)(a2 + 8);
    }
    v25 = v16 + a5 - v22;
    if (v25 >= 1)
    {
      v26 = v25 + 1;
      do
      {
        v27 = *v14;
        v14 += 2;
        *v15 = v27;
        *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, 0);
        --v26;
      }
      while (v26 > 1);
    }
  }
  v30 = *(_DWORD *)(*a3 + 8);
  if (v30 >= 1)
  {
    v31 = *(int **)(*a3 + 16);
    v32 = v30 + 1;
    do
    {
      *v31 /= 2;
      v31 += 2;
      --v32;
    }
    while (v32 > 1);
  }
  return 1;
}

uint64_t Vect__Clear(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    *(_DWORD *)(result + 8) = 0;
    if (*(_DWORD *)(result + 4))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(v1 + 16);
        result = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher();
        *(_QWORD *)(v3 + 8 * v2++) = result;
      }
      while (v2 < *(unsigned int *)(v1 + 4));
    }
  }
  return result;
}

uint64_t Vect__Reset(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 4))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(v1 + 16);
        result = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher();
        *(_QWORD *)(v3 + 8 * v2++) = result;
      }
      while (v2 < *(unsigned int *)(v1 + 4));
    }
  }
  return result;
}

uint64_t Vect__Create(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = heap_Alloc(a1, 32);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 4) = a2;
    *(_WORD *)v4 = 22050;
    *(_QWORD *)(v4 + 24) = a1;
    v6 = heap_Alloc(a1, 8 * a2);
    *(_QWORD *)(v5 + 16) = v6;
    if (v6)
    {
      *(_DWORD *)(v5 + 8) = 0;
      if (*(_DWORD *)(v5 + 4))
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(v5 + 16);
          *(_QWORD *)(v8 + 8 * v7++) = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher();
        }
        while (v7 < *(unsigned int *)(v5 + 4));
      }
    }
    else
    {
      heap_Free(*(_QWORD **)(v5 + 24), v5);
      return 0;
    }
  }
  return v5;
}

uint64_t *Vect__Remove(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (*result)
    {
      v3 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        heap_Free(*(_QWORD **)(v2 + 24), v3);
        v2 = *v1;
      }
      *(_QWORD *)(v2 + 16) = 0;
      result = heap_Free(v4, *v1);
      *v1 = 0;
    }
  }
  return result;
}

uint64_t Vect__Resize(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)(result + 4) >= a2)
    {
      return 1;
    }
    else
    {
      *(_DWORD *)(result + 4) = a2;
      v3 = heap_Realloc(*(uint64_t **)(result + 24), *(_QWORD *)(result + 16), 8 * a2);
      if (v3)
      {
        v4 = v3;
        result = 1;
      }
      else
      {
        *(_DWORD *)(v2 + 4) = 0;
        *(_DWORD *)(v2 + 8) = 0;
        v5 = *(_QWORD *)(v2 + 16);
        if (v5)
          heap_Free(*(_QWORD **)(v2 + 24), v5);
        v4 = 0;
        result = 0;
      }
      *(_QWORD *)(v2 + 16) = v4;
    }
  }
  return result;
}

uint64_t WSOLA__SetWindowOverlap(unsigned __int16 *a1, int a2)
{
  unint64_t v3;
  int v4;
  int v5;
  signed __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  a1[1] = a2;
  v3 = 274877907 * *a1 * a2;
  v4 = (v3 >> 63) + (SHIDWORD(v3) >> 6);
  a1[2] = v4;
  a1[8] = 2 * v4;
  a1[9] = v4;
  v5 = (__int16)a1[6];
  v6 = 2 * v5 - v4;
  if (v5 < (__int16)v4)
    v6 = a1[6];
  a1[16] = v6;
  v7 = 2 * (v5 + (__int16)(2 * v4)) - (__int16)v4 + v6;
  *((_DWORD *)a1 + 7) = v7;
  v8 = *((_QWORD *)a1 + 7);
  if (!v8
    || v7 <= *(_DWORD *)(v8 + 8)
    || (v9 = 2164269066, Vect__Resize(v8, v7) == 1)
    && Vect__Resize(*((_QWORD *)a1 + 8), *((_DWORD *)a1 + 7)) == 1
    && Vect__Resize(*((_QWORD *)a1 + 9), *((_DWORD *)a1 + 7) >> 1) == 1
    && Vect__Resize(*((_QWORD *)a1 + 10), *((_DWORD *)a1 + 7) >> 1) == 1
    && Vect__Resize(*((_QWORD *)a1 + 11), *((_DWORD *)a1 + 7) >> 2) == 1
    && Vect__Resize(*((_QWORD *)a1 + 12), *((_DWORD *)a1 + 7) >> 2) == 1)
  {
    v10 = *((_QWORD *)a1 + 5);
    if (v10)
    {
      v11 = (__int16)a1[2];
      v12 = 2 * v11;
      v13 = heap_Realloc(*((uint64_t **)a1 + 41), v10, (2 * v11));
      if (!v13)
        return 2164269066;
      *((_QWORD *)a1 + 5) = v13;
      if (v11 >= 1)
      {
        v14 = 0;
        v15 = 0;
        if (v12 <= 1)
          v16 = 1;
        else
          v16 = v12;
        v17 = 205887 * v16;
        do
        {
          v18 = (int)(0x10000 - fxd_S32CosS32((int)v15 / (__int16)a1[2])) >> 1;
          if (v18 >= 0xFFFF)
            LOWORD(v18) = -1;
          *(_WORD *)(*((_QWORD *)a1 + 5) + v14) = v18;
          v15 += 205887;
          v14 += 2;
        }
        while (v17 != v15);
      }
    }
    return 0;
  }
  return v9;
}

_WORD *WSOLA__SetTimeScaleFactor(_WORD *result, int a2)
{
  int v2;
  int v3;

  if (a2 >= 1)
  {
    v2 = (__int16)result[9];
    v3 = v2 * (unsigned __int16)a2 / 100;
    result[10] = v3;
    result[7] = (__int16)v3 / v2;
    result[17] = result[14] - v3;
  }
  return result;
}

uint64_t WSOLA__Create(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  signed int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v26;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = heap_Calloc(v4, 336, 1);
  v6 = (unsigned __int16 *)v5;
  v26 = v5;
  if (v5)
  {
    *(_QWORD *)(v5 + 320) = a1;
    *(_QWORD *)(v5 + 328) = v4;
    *(_WORD *)v5 = a2;
    *(_DWORD *)(v5 + 312) = 0;
    if ((WSOLA__SetWindowOverlap((unsigned __int16 *)v5, 10) & 0x80000000) == 0)
    {
      *((_DWORD *)v6 + 2) = 4;
      v7 = 33555 * (*v6 >> 1);
      v8 = v7 >> 22;
      v6[6] = *v6 / 0xFAu;
      v9 = (__int16)v6[9];
      if ((int)(v7 >> 22) >= v9)
        LOWORD(v8) = 2 * (v7 >> 22) - v9;
      v6[16] = v8;
      v10 = 2 * ((__int16)v6[8] + (v7 >> 22)) - (__int16)v6[2] + (__int16)v8;
      *((_DWORD *)v6 + 7) = v10;
      v11 = *((_QWORD *)v6 + 7);
      if (v11 && v10 > *(_DWORD *)(v11 + 8))
      {
        if (Vect__Resize(v11, v10) != 1
          || Vect__Resize(*((_QWORD *)v6 + 8), *((_DWORD *)v6 + 7)) != 1
          || Vect__Resize(*((_QWORD *)v6 + 9), *((_DWORD *)v6 + 7) >> 1) != 1
          || Vect__Resize(*((_QWORD *)v6 + 10), *((_DWORD *)v6 + 7) >> 1) != 1
          || Vect__Resize(*((_QWORD *)v6 + 11), *((_DWORD *)v6 + 7) >> 2) != 1
          || Vect__Resize(*((_QWORD *)v6 + 12), *((_DWORD *)v6 + 7) >> 2) != 1)
        {
          goto LABEL_24;
        }
        v10 = *((_DWORD *)v6 + 7);
      }
      v12 = Vect__Create((uint64_t)v4, v10);
      *((_QWORD *)v6 + 7) = v12;
      if (v12)
      {
        v13 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7));
        *((_QWORD *)v6 + 8) = v13;
        if (v13)
        {
          v14 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
          *((_QWORD *)v6 + 9) = v14;
          if (v14)
          {
            v15 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
            *((_QWORD *)v6 + 10) = v15;
            if (v15)
            {
              v16 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
              *((_QWORD *)v6 + 11) = v16;
              if (v16)
              {
                v17 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
                *((_QWORD *)v6 + 12) = v17;
                if (v17)
                {
                  Vect__Clear(*((_QWORD *)v6 + 7));
                  Vect__Clear(*((_QWORD *)v6 + 8));
                  Vect__Clear(*((_QWORD *)v6 + 9));
                  Vect__Clear(*((_QWORD *)v6 + 10));
                  Vect__Clear(*((_QWORD *)v6 + 11));
                  Vect__Clear(*((_QWORD *)v6 + 12));
                  v18 = *((_DWORD *)v6 + 7);
                  v19 = *((_QWORD *)v6 + 8);
                  *(_DWORD *)(*((_QWORD *)v6 + 7) + 8) = v18;
                  *(_DWORD *)(v19 + 8) = v18;
                  v20 = *((_QWORD *)v6 + 10);
                  *(_DWORD *)(*((_QWORD *)v6 + 9) + 8) = v18 >> 1;
                  *(_DWORD *)(v20 + 8) = v18 >> 1;
                  v18 >>= 2;
                  v21 = *((_QWORD *)v6 + 12);
                  *(_DWORD *)(*((_QWORD *)v6 + 11) + 8) = v18;
                  *(_DWORD *)(v21 + 8) = v18;
                  v22 = Downsample__Generate((uint64_t)v4, 0);
                  *((_QWORD *)v6 + 15) = v22;
                  if (v22)
                  {
                    v23 = heap_Calloc(v4, 128, 4);
                    *((_QWORD *)v6 + 18) = v23;
                    if (v23)
                    {
                      if ((WSOLA__CreateOLAWindow((uint64_t)v6) & 0x80000000) == 0)
                      {
                        v24 = v6[9];
                        v6[10] = v24;
                        v6[7] = 1;
                        v6[17] = v6[14] - v24;
                        WSOLA__Initialise((uint64_t)v6);
                        return (uint64_t)v6;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_24:
    WSOLA__Remove(&v26);
    return v26;
  }
  return (uint64_t)v6;
}

_QWORD *WSOLA__Remove(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_QWORD **)(*a1 + 328);
  Vect__Remove((uint64_t *)(*a1 + 56));
  Vect__Remove((uint64_t *)(*a1 + 64));
  Vect__Remove((uint64_t *)(*a1 + 72));
  Vect__Remove((uint64_t *)(*a1 + 80));
  Vect__Remove((uint64_t *)(*a1 + 88));
  Vect__Remove((uint64_t *)(*a1 + 96));
  v3 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    heap_Free(v2, *(_QWORD *)(*a1 + 40));
    v3 = *a1;
  }
  if (*(_QWORD *)(v3 + 120))
  {
    Downsample__Remove((uint64_t *)(v3 + 120));
    v3 = *a1;
  }
  if (*(_QWORD *)(v3 + 144))
  {
    heap_Free(v2, *(_QWORD *)(v3 + 144));
    v3 = *a1;
  }
  result = heap_Free(v2, v3);
  *a1 = 0;
  return result;
}

uint64_t WSOLA__CreateOLAWindow(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v2 = *(__int16 *)(a1 + 4);
  v3 = 2 * v2;
  v4 = heap_Alloc(*(_QWORD *)(a1 + 328), 2 * (2 * v2));
  *(_QWORD *)(a1 + 40) = v4;
  if (!v4)
    return 2164269066;
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = 0;
    if (v3 <= 1)
      v7 = 1;
    else
      v7 = v3;
    v8 = 2 * v7;
    do
    {
      v9 = (int)(0x10000 - fxd_S32CosS32(v6 / *(__int16 *)(a1 + 4))) >> 1;
      if (v9 >= 0xFFFF)
        LOWORD(v9) = -1;
      *(_WORD *)(*(_QWORD *)(a1 + 40) + v5) = v9;
      v6 += 205887;
      v5 += 2;
    }
    while (v8 != v5);
  }
  return 0;
}

double WSOLA__Initialise(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  double result;

  v1 = a1;
  Vect__Reset(*(_QWORD *)(a1 + 56));
  Vect__Reset(*(_QWORD *)(v1 + 64));
  Vect__Reset(*(_QWORD *)(v1 + 72));
  Vect__Reset(*(_QWORD *)(v1 + 80));
  Vect__Reset(*(_QWORD *)(v1 + 88));
  Vect__Reset(*(_QWORD *)(v1 + 96));
  *(_QWORD *)(v1 + 304) = -1;
  *(_DWORD *)(v1 + 312) = 1;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 281) = 0;
  v2 = *(_OWORD **)(v1 + 144);
  result = 0.0;
  v2[30] = 0u;
  v2[31] = 0u;
  v2[28] = 0u;
  v2[29] = 0u;
  v2[26] = 0u;
  v2[27] = 0u;
  v2[24] = 0u;
  v2[25] = 0u;
  v2[22] = 0u;
  v2[23] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v1 += 152;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_DWORD *)(v1 - 130) = 0;
  *(_WORD *)(v1 - 100) = 0;
  return result;
}

uint64_t WSOLA__GetOutputLength(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;

  if ((a2 & 0x80) != 0)
    return 0;
  v3 = a1 + a2;
  v5 = *(unsigned __int8 *)(v3 + 152);
  v4 = (_BYTE *)(v3 + 152);
  *a3 = v5 == 2;
  if (v5 == 2)
    *v4 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * a2);
}

uint64_t WSOLA__TimeScaleInputBuffer(uint64_t a1, char a2, __int16 *a3, int a4, _WORD *a5, int *a6, int a7, char *a8, _BYTE *a9)
{
  _WORD *v9;
  int v10;
  __int16 *v11;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int *v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  int v74;
  unsigned __int16 v75;
  int v76;
  int v77;
  unsigned __int16 v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int *v88;
  int *v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned __int16 v95;
  int v96;
  int v97;
  unsigned __int16 v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int *v104;
  int *v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int *v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  signed int v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  unsigned __int8 *v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  int v167;
  char v168;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  char v174;
  __int16 v177;
  _WORD *v178;
  uint64_t *v179;
  int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v13 = *a8;
  v14 = *(_DWORD *)(a1 + 312);
  if (v14)
  {
    v11 = &a3[*(int *)(a1 + 108)];
    v9 = &a5[*(int *)(a1 + 112)];
  }
  v168 = v13 | 0x80;
  v179 = (uint64_t *)(a1 + 72);
  v180 = (int *)(a1 + 308);
  v172 = (uint64_t *)(a1 + 88);
  v173 = (uint64_t *)(a1 + 80);
  v171 = (uint64_t *)(a1 + 96);
  v167 = (unsigned __int16)(a7 + 100);
  v174 = *a8;
LABEL_4:
  while (2)
  {
    switch(v14)
    {
      case 0:
        WSOLA__Initialise(a1);
        *(_DWORD *)(a1 + 312) = 1;
        goto LABEL_6;
      case 1:
LABEL_6:
        if (*(unsigned __int16 *)(a1 + 128) == (unsigned __int16)a7)
        {
          v15 = *(_DWORD *)(a1 + 28);
          goto LABEL_28;
        }
        *(_WORD *)(a1 + 128) = a7;
        if (a7)
        {
          v15 = *(_DWORD *)(a1 + 28);
          if ((__int16)v167 < 1)
            goto LABEL_28;
          v26 = *(__int16 *)(a1 + 18);
          v27 = v26 * v167 / 100;
          *(_WORD *)(a1 + 20) = v27;
          *(_WORD *)(a1 + 14) = (__int16)v27 / v26;
          v28 = v15 - v27;
        }
        else
        {
          v29 = *(_WORD *)(a1 + 18);
          *(_WORD *)(a1 + 20) = v29;
          *(_WORD *)(a1 + 14) = 1;
          v15 = *(_DWORD *)(a1 + 28);
          v28 = v15 - v29;
        }
        *(_WORD *)(a1 + 34) = v28;
LABEL_28:
        v30 = *(__int16 *)(a1 + 52);
        *(_WORD *)(a1 + 52) = 1 - v30;
        *(_WORD *)(a1 + 48) = 1 - v30;
        *(_WORD *)(a1 + 50) = v30;
        *(_DWORD *)(a1 + 304) = 0;
        v31 = *(void **)(*(_QWORD *)(a1 + 56 + 8 * (__int16)(1 - v30)) + 16);
        *(_QWORD *)(a1 + 136) = v31;
        memmove(v31, (const void *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * v30) + 16) + 8 * (v15 - *(__int16 *)(a1 + 34))), 8 * *(__int16 *)(a1 + 34));
        *(_QWORD *)(a1 + 136) += 8 * *(__int16 *)(a1 + 34);
        *(_DWORD *)(a1 + 312) = 2;
LABEL_29:
        v32 = *v180;
        if (*v180 == -1)
          v32 = *(__int16 *)(a1 + 34);
        v33 = *(_DWORD *)(a1 + 108);
        v34 = *(_DWORD *)(a1 + 28);
        v35 = v34 + v33 - v32;
        if (v35 >= v10)
          v36 = v10;
        else
          v36 = v34 + v33 - v32;
        v37 = v36 - v33 + v32;
        *(_DWORD *)(a1 + 308) = v37;
        if (v36 - v33 >= 1)
        {
          v38 = *(_QWORD *)(a1 + 136);
          v39 = v36 - v33 + 1;
          do
          {
            *(_BYTE *)(v38 + 4) = v13;
            v40 = *v11++;
            *(_DWORD *)v38 = v40;
            v38 += 8;
            --v39;
          }
          while (v39 > 1);
          *(_QWORD *)(a1 + 136) = v38;
        }
        *(_DWORD *)(a1 + 108) = v36;
        if (v35 < v10)
          goto LABEL_44;
        if ((a2 & 1) != 0)
        {
          if (v37 < v34)
          {
            v41 = *(_QWORD *)(a1 + 136);
            v42 = v33 + v34 - v32 - v36;
            do
            {
              *(_BYTE *)(v41 + 4) = v168;
              *(_DWORD *)v41 = 0;
              v41 += 8;
              --v42;
            }
            while (v42);
            *(_QWORD *)(a1 + 136) = v41;
          }
LABEL_44:
          *(_BYTE *)(a1 + 280) = v13;
          *(_QWORD *)v180 = 0x3FFFFFFFFLL;
LABEL_45:
          if (*(_WORD *)(a1 + 128))
          {
            v178 = v9;
            v177 = *(_WORD *)(a1 + 32);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 56), v179, 0, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8) - 1);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 64), v173, 0, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) - 1);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 72), v172, 0, *(_DWORD *)(*(_QWORD *)(a1 + 72) + 8) - 1);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 80), v171, 0, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 8) - 1);
            v43 = *(__int16 *)(a1 + 32);
            v44 = *(__int16 *)(a1 + 12);
            v45 = __OFSUB__(v43, v44);
            v46 = v43 - v44;
            if (v46 < 0 != v45)
              v46 += 3;
            v47 = v46 >> 2;
            v48 = (__int16)(v46 >> 2) & ~((__int16)(v46 >> 2) >> 31);
            v49 = v48 + ((__int16)(v44 + ((unsigned __int16)(v44 & 0x8000) >> 15)) >> 1);
            v50 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 8);
            v51 = (__int16)v50;
            v52 = v50 - 1;
            if (v51 <= (__int16)v49)
              v53 = v52;
            else
              v53 = v49;
            v54 = *(__int16 *)(a1 + 18);
            if (v48 >= (__int16)v53)
            {
              v71 = *(_WORD *)(a1 + 50);
            }
            else
            {
              v55 = 0;
              v56 = 0;
              v57 = *(__int16 *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22);
              v45 = __OFADD__(v57, v54);
              v58 = v57 + v54;
              if (v58 < 0 != v45)
                v58 += 3;
              v181 = (uint64_t)v58 >> 2;
              v59 = (unsigned __int16)v48;
              v60 = v53;
              do
              {
                v61 = 0;
                v62 = 0;
                v184 = 0;
                v63 = *(__int16 *)(a1 + 16);
                if (v63 >= 4)
                {
                  v64 = (unsigned __int16)v63 >> 2;
                  v65 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88 + 8 * *(__int16 *)(a1 + 50)) + 16) + 8 * v181);
                  v66 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88 + 8 * *(__int16 *)(a1 + 48)) + 16) + 8 * v59);
                  do
                  {
                    v68 = *v66;
                    v66 += 2;
                    v67 = v68;
                    v69 = *v65;
                    v65 += 2;
                    fxd_S64SatAddS32S32((int *)&v184 + 1, (int *)&v184, v69 * v67);
                    v70 = (unsigned __int16)v64--;
                  }
                  while (v70 > 1);
                  v61 = v184;
                  v62 = HIDWORD(v184);
                }
                if (v62 > v56 || v62 == v56 && v61 > v55)
                {
                  v56 = v62;
                  v55 = v61;
                  LOWORD(v47) = v59;
                }
                ++v59;
              }
              while (v59 != v60);
              v71 = *(_WORD *)(a1 + 50);
              LOWORD(v54) = *(_WORD *)(a1 + 18);
            }
            v73 = 2 * v47;
            v74 = (__int16)(2 * v47 - 3) & ~((__int16)(2 * v47 - 3) >> 31);
            v75 = v73 + 3;
            v76 = *(_DWORD *)(*v179 + 8);
            v77 = (__int16)v76;
            v78 = v76 - 1;
            if (v77 <= (__int16)v75)
              v75 = v78;
            if (v74 < (__int16)v75)
            {
              v79 = 0;
              v80 = 0;
              v81 = *(__int16 *)(a1 + 2 * v71 + 22) + (__int16)v54;
              v182 = (uint64_t)(v81 + (v81 < 0)) >> 1;
              v82 = (unsigned __int16)v74;
              v83 = v75;
              do
              {
                v84 = 0;
                v85 = 0;
                v184 = 0;
                v86 = *(__int16 *)(a1 + 16);
                if (v86 >= 2)
                {
                  v87 = (unsigned __int16)v86 >> 1;
                  v88 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72 + 8 * *(__int16 *)(a1 + 50)) + 16) + 8 * v182);
                  v89 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72 + 8 * *(__int16 *)(a1 + 48)) + 16) + 8 * v82);
                  do
                  {
                    v91 = *v89;
                    v89 += 2;
                    v90 = v91;
                    v92 = *v88;
                    v88 += 2;
                    fxd_S64SatAddS32S32((int *)&v184 + 1, (int *)&v184, v92 * v90);
                    v93 = (unsigned __int16)v87--;
                  }
                  while (v93 > 1);
                  v84 = v184;
                  v85 = HIDWORD(v184);
                }
                if (v85 > v80 || v85 == v80 && v84 > v79)
                {
                  v80 = v85;
                  v79 = v84;
                  LOWORD(v74) = v82;
                }
                ++v82;
              }
              while (v82 != v83);
              v71 = *(_WORD *)(a1 + 50);
              LOWORD(v54) = *(_WORD *)(a1 + 18);
            }
            v94 = (__int16)(2 * v74 - 3) & ~((__int16)(2 * v74 - 3) >> 31);
            v95 = 2 * v74 + 3;
            v96 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v97 = (__int16)v96;
            v98 = v96 - 1;
            if (v97 <= (__int16)v95)
              v95 = v98;
            if (v94 < (__int16)v95)
            {
              v99 = 0;
              v100 = 0;
              v183 = *(__int16 *)(a1 + 2 * v71 + 22) + (uint64_t)(__int16)v54;
              v101 = (unsigned __int16)((2 * v74 - 3) & ~((__int16)(2 * v74 - 3) >> 15));
              v102 = v95;
              do
              {
                v184 = 0;
                v103 = *(__int16 *)(a1 + 16);
                if (v103 < 1)
                {
                  v110 = 0;
                  v111 = 0;
                }
                else
                {
                  v104 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 16) + 8 * v183);
                  v105 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 16) + 8 * v101);
                  do
                  {
                    v107 = *v105;
                    v105 += 2;
                    v106 = v107;
                    v108 = *v104;
                    v104 += 2;
                    fxd_S64SatAddS32S32((int *)&v184 + 1, (int *)&v184, v108 * v106);
                    v109 = (unsigned __int16)v103--;
                  }
                  while (v109 > 1);
                  v110 = v184;
                  v111 = HIDWORD(v184);
                }
                if (v111 > v100 || v111 == v100 && v110 > v99)
                {
                  v100 = v111;
                  v99 = v110;
                  LOWORD(v94) = v101;
                }
                ++v101;
              }
              while (v101 != v102);
            }
            v72 = v94 + v177 - *(_WORD *)(a1 + 32);
            v9 = v178;
            v13 = v174;
            v10 = a4;
          }
          else
          {
            v72 = *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22);
          }
          *(_WORD *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48)) = v72;
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 16)
              + 8 * (*(__int16 *)(a1 + 18) + (uint64_t)*(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 50)));
          *(_QWORD *)(a1 + 288) = v16;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 16)
                                + 8 * *(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48));
          if (*(_WORD *)(a1 + 128))
          {
            v14 = 5;
            *(_DWORD *)(a1 + 312) = 5;
          }
          else
          {
LABEL_98:
            v112 = *(_BYTE *)(v16 + 4);
            if (*(_DWORD *)(a1 + 304) == -1)
              *(_DWORD *)(a1 + 304) = 0;
            v113 = v112 & 0x7F;
            v114 = *(unsigned __int8 *)(a1 + 281);
            if ((_DWORD)v114 != (_DWORD)v113)
            {
              if ((_DWORD)v113 == 127)
                v115 = 0;
              else
                v115 = v112 & 0x7F;
              v116 = v115 + 1;
              v117 = v115 + 2;
              if (v116 == (_DWORD)v114 || v117 == (_DWORD)v114)
                goto LABEL_111;
              v119 = v113 - 126;
              if (v113 < 0x7E)
                v119 = v113 + 1;
              if (v119 + 1 == (_DWORD)v114)
              {
LABEL_111:
                *(_BYTE *)(v16 + 4) = v114 | v112 & 0x80;
                v113 = v114;
              }
              else
              {
                if (!*(_BYTE *)(a1 + (v112 & 0x7F) + 152))
                  *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v113) = 0;
                do
                {
                  *(_BYTE *)(a1 + (unsigned __int16)v114 + 152) = 2;
                  v120 = v114
                       - 127
                       * ((((unsigned __int16)(v114 - ((517 * (unsigned __int16)v114) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v114) >> 16)) >> 6);
                  LODWORD(v114) = v120 + 1;
                }
                while ((_DWORD)v113 != (unsigned __int16)(v120 + 1));
                *(_BYTE *)(a1 + 281) = v112 & 0x7F;
              }
              *(_BYTE *)(a1 + v113 + 152) = 1;
              v16 = *(_QWORD *)(a1 + 288);
              v112 = *(_BYTE *)(v16 + 4);
            }
            *(_DWORD *)(a1 + 312) = 1;
            if (v112 < 0)
            {
              *a9 = 2;
              *a6 = *(_DWORD *)(a1 + 112);
              v162 = *(unsigned __int8 *)(a1 + 281);
              if (v162 != *(unsigned __int8 *)(a1 + 280))
              {
                do
                {
                  *(_BYTE *)(a1 + (unsigned __int16)v162 + 152) = 2;
                  v162 = v162
                       - 127
                       * ((((unsigned __int16)(v162 - ((517 * (unsigned __int16)v162) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v162) >> 16)) >> 6)
                       + 1;
                }
                while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v162);
                v162 = *(unsigned __int8 *)(a1 + 280);
              }
              *(_BYTE *)(a1 + v162 + 152) = 2;
              *a8 = *(_BYTE *)(a1 + 281);
LABEL_185:
              *(_DWORD *)(a1 + 112) = 0;
              *(_DWORD *)(a1 + 312) = 0;
              return 0;
            }
            v121 = *(unsigned __int8 *)(a1 + 281);
            if (*(_BYTE *)(a1 + 281))
            {
              v122 = *a6;
              v123 = *(_DWORD *)(a1 + 112);
              v124 = *(_DWORD *)(a1 + 304);
              if (*a6 >= v123 + *(__int16 *)(a1 + 4) - v124)
                v122 = v123 + *(__int16 *)(a1 + 4) - v124;
              v125 = v122 - v123;
              if (v122 - v123 > 1
                && *(unsigned __int8 *)(v16 + 8 * (v122 - v123 - 1) + 4) != (_DWORD)v121)
              {
                v134 = (unsigned __int8 *)(v16 + 4);
                v135 = 1;
                while (v125 + v135 - 1 >= 1)
                {
                  v136 = *v134;
                  v134 += 8;
                  --v135;
                  if (v136 != (_DWORD)v121)
                  {
                    v126 = 0;
                    v122 = v123 - v135;
                    v14 = 4;
                    *(_DWORD *)(a1 + 312) = 4;
                    v125 = -v135;
                    goto LABEL_124;
                  }
                }
              }
              v126 = 1;
              v14 = 1;
LABEL_124:
              *(_DWORD *)(a1 + 304) = v125 + v124;
              *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v121) += v125;
              v127 = v122 - *(_DWORD *)(a1 + 112);
              if (v127 >= 1)
              {
                v128 = v127 + 1;
                do
                {
                  v129 = *(_DWORD *)v16;
                  v16 += 8;
                  *v9++ = v129;
                  --v128;
                }
                while (v128 > 1);
              }
              *(_QWORD *)(a1 + 288) = v16;
              if (v122 >= *a6)
              {
                *a9 = 1;
                *a6 = v122;
                *a8 = *(_BYTE *)(a1 + 281);
                *(_DWORD *)(a1 + 112) = 0;
                if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
                  goto LABEL_187;
                v163 = 4;
                goto LABEL_189;
              }
              *(_DWORD *)(a1 + 112) = v122;
              if (v126)
                goto LABEL_163;
            }
            else
            {
              v130 = *(__int16 *)(a1 + 4);
              v14 = 1;
              if (*(_WORD *)(a1 + 4))
              {
                v14 = 1;
                if (*(_BYTE *)(v16 + 8 * (v130 - 1) + 4))
                {
                  v131 = v16 - 8;
                  v132 = 1;
                  while (v130 + v132 - 1 >= 1)
                  {
                    v133 = *(unsigned __int8 *)(v131 + 12);
                    v131 += 8;
                    --v132;
                    if (v133)
                    {
                      v14 = 4;
                      *(_DWORD *)(a1 + 312) = 4;
                      *(_QWORD *)(a1 + 288) = v131;
                      *(_DWORD *)(a1 + 304) -= v132;
                      goto LABEL_4;
                    }
                  }
                  goto LABEL_164;
                }
              }
            }
          }
          continue;
        }
        *(_DWORD *)(a1 + 108) = 0;
        *a9 = 0;
        *(_BYTE *)(a1 + 280) = v13;
        return 0;
      case 2:
        goto LABEL_29;
      case 3:
        goto LABEL_45;
      case 4:
        v16 = *(_QWORD *)(a1 + 288);
        goto LABEL_98;
      case 5:
        v17 = *(_QWORD *)(a1 + 288);
        v18 = *(_BYTE *)(v17 + 4);
        if (*(_DWORD *)(a1 + 304) == -1)
          *(_DWORD *)(a1 + 304) = 0;
        v19 = v18 & 0x7F;
        v20 = *(unsigned __int8 *)(a1 + 281);
        if ((_DWORD)v20 != (_DWORD)v19)
        {
          if ((_DWORD)v19 == 127)
            v21 = 0;
          else
            v21 = v18 & 0x7F;
          v22 = v21 + 1;
          v23 = v21 + 2;
          if (v22 == (_DWORD)v20 || v23 == (_DWORD)v20)
            goto LABEL_22;
          v25 = v19 - 126;
          if (v19 < 0x7E)
            v25 = v19 + 1;
          if (v25 + 1 == (_DWORD)v20)
          {
LABEL_22:
            *(_BYTE *)(v17 + 4) = v20 | v18 & 0x80;
            v19 = v20;
          }
          else
          {
            if (!*(_BYTE *)(a1 + (v18 & 0x7F) + 152))
              *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v19) = 0;
            do
            {
              *(_BYTE *)(a1 + (unsigned __int16)v20 + 152) = 2;
              v137 = v20
                   - 127
                   * ((((unsigned __int16)(v20 - ((517 * (unsigned __int16)v20) >> 16)) >> 1)
                     + ((517 * (unsigned __int16)v20) >> 16)) >> 6);
              LODWORD(v20) = v137 + 1;
            }
            while ((_DWORD)v19 != (unsigned __int16)(v137 + 1));
            *(_BYTE *)(a1 + 281) = v18 & 0x7F;
          }
          *(_BYTE *)(a1 + v19 + 152) = 1;
          v17 = *(_QWORD *)(a1 + 288);
          v18 = *(_BYTE *)(v17 + 4);
        }
        *(_DWORD *)(a1 + 312) = 1;
        if (v18 < 0)
        {
          *a9 = 2;
          *a6 = *(_DWORD *)(a1 + 112);
          v164 = *(unsigned __int8 *)(a1 + 281);
          if (v164 != *(unsigned __int8 *)(a1 + 280))
          {
            do
            {
              *(_BYTE *)(a1 + (unsigned __int16)v164 + 152) = 2;
              v164 = v164
                   - 127
                   * ((((unsigned __int16)(v164 - ((517 * (unsigned __int16)v164) >> 16)) >> 1)
                     + ((517 * (unsigned __int16)v164) >> 16)) >> 6)
                   + 1;
            }
            while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v164);
            v164 = *(unsigned __int8 *)(a1 + 280);
          }
          *(_BYTE *)(a1 + v164 + 152) = 2;
          *a8 = *(_BYTE *)(a1 + 281);
          goto LABEL_185;
        }
        v138 = *(unsigned __int8 *)(a1 + 281);
        if (*(_BYTE *)(a1 + 281))
        {
          v139 = *(_DWORD *)(a1 + 304);
          if (*a6 - *(_DWORD *)(a1 + 112) >= *(__int16 *)(a1 + 4) - v139)
            v140 = *(__int16 *)(a1 + 4) - v139;
          else
            v140 = *a6 - *(_DWORD *)(a1 + 112);
          if (v140 >= 2 && *(unsigned __int8 *)(v17 + 8 * (v140 - 1) + 4) != (_DWORD)v138)
          {
            v159 = (unsigned __int8 *)(v17 + 4);
            v160 = 1;
            while (v140 + v160 - 1 >= 1)
            {
              v161 = *v159;
              v159 += 8;
              --v160;
              if (v161 != (_DWORD)v138)
              {
                v141 = 0;
                v140 = -v160;
                v14 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                goto LABEL_153;
              }
            }
          }
          v141 = 1;
          v14 = 1;
LABEL_153:
          *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v138) += v140;
          v142 = v140 + v139;
          v143 = *(int *)(a1 + 304);
          v144 = *(_DWORD *)(a1 + 112) + v142 - v143;
          *(_DWORD *)(a1 + 112) = v144;
          if (v142 > (int)v143)
          {
            v145 = *(_QWORD *)(a1 + 40);
            v146 = *(int **)(a1 + 296);
            do
            {
              v147 = *(unsigned __int16 *)(v145 + 2 * v143);
              v148 = *v146;
              v146 += 2;
              v149 = (unsigned __int16)v148 * v147;
              v150 = (v148 >> 16) * v147;
              v151 = *(unsigned __int16 *)(v145 + 2 * (v143 + *(__int16 *)(a1 + 4)));
              v152 = *(_DWORD *)v17;
              v17 += 8;
              v153 = v150 + HIWORD(v149) + (v152 >> 16) * v151 + (((unsigned __int16)v152 * v151) >> 16);
              if (v153 <= -32768)
                v153 = -32768;
              if (v153 >= 0x7FFF)
                LOWORD(v153) = 0x7FFF;
              *v9++ = v153;
              ++v143;
            }
            while (v142 != v143);
            *(_QWORD *)(a1 + 296) = v146;
          }
          *(_QWORD *)(a1 + 288) = v17;
          *(_DWORD *)(a1 + 304) = v142;
          if (v144 >= *a6)
          {
            *a9 = 1;
            *a6 = *(_DWORD *)(a1 + 112);
            *a8 = *(_BYTE *)(a1 + 281);
            *(_DWORD *)(a1 + 112) = 0;
            if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
            {
LABEL_187:
              *(_DWORD *)(a1 + 304) = 0;
              return 0;
            }
            v163 = 5;
LABEL_189:
            *(_DWORD *)(a1 + 312) = v163;
            return 0;
          }
          if (v141)
          {
LABEL_163:
            *(_DWORD *)(a1 + 304) = 0;
            goto LABEL_164;
          }
        }
        else
        {
          v154 = *(__int16 *)(a1 + 4);
          v14 = 1;
          if (*(_BYTE *)(v17 + 8 * (v154 - 1) + 4))
          {
            v155 = 0;
            v156 = 1;
            while (v154 + v156 - 1 >= 1)
            {
              v157 = *(unsigned __int8 *)(v17 + v155 + 4);
              v155 += 8;
              --v156;
              if (v157)
              {
                v14 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                v158 = *(_QWORD *)(a1 + 296) + v155 - 8;
                *(_QWORD *)(a1 + 288) = v17 + v155 - 8;
                *(_QWORD *)(a1 + 296) = v158;
                *(_DWORD *)(a1 + 304) -= v156;
                goto LABEL_4;
              }
            }
LABEL_164:
            v14 = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t WSOLA__rateChange_bet4_approach(uint64_t a1, char a2, __int16 a3, __int16 *a4, int a5, _WORD *a6, int *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v14 = 0;
  v26 = 0;
  v15 = *a7;
  v16 = (__int16)(a3 - 100);
  do
  {
    v17 = 1;
    v25 = 1;
    *a7 = v15;
    WSOLA__TimeScaleInputBuffer(a1, a2, a4, a5, a6, a7, v16, (char *)&v25, &v26);
    if (((char)v25 & 0x80000000) == 0)
    {
      v18 = a1 + v25;
      v20 = *(unsigned __int8 *)(v18 + 152);
      v19 = (_BYTE *)(v18 + 152);
      if (v20 == 2)
      {
        v17 = 0;
        *v19 = 0;
      }
    }
    if (v26 - 1 > 1)
      break;
    v14 += *a7;
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD))(a8 + 104))(a9, a10, a6, (2 * *a7));
  }
  while ((v17 & 1) != 0);
  *a7 = v14;
  return 0;
}

uint64_t fxd_S32MultIntS32FractS16(int a1, int a2)
{
  return ((int)fxd_S32ShMultRndS32S16(a1, a2, 16) >> 16);
}

int *fxd_S64SatAddS32S32(int *result, int *a2, int a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v4 = result;
  v5 = *a2;
  v6 = *a2 + a3;
  *a2 = v6;
  if (((v5 ^ a3) & 0x80000000) == 0 && (v6 ^ v5) < 0)
  {
    v7 = *result;
    if (v5 < 0)
    {
      result = (int *)fxd_S32SatAddS32S32(v7, -1);
      *v4 = (int)result;
      v8 = -*a2;
    }
    else
    {
      result = (int *)fxd_S32SatAddS32S32(v7, 1);
      *v4 = (int)result;
      v8 = *a2 & 0x7FFFFFFF;
    }
    goto LABEL_15;
  }
  v9 = *result;
  if (*result >= 1)
  {
    if ((v6 & 0x80000000) == 0)
      return result;
    --*result;
    goto LABEL_14;
  }
  if (v9)
    v10 = v6 < 1;
  else
    v10 = 1;
  if (!v10)
  {
    *result = v9 + 1;
LABEL_14:
    v8 = *a2 ^ 0x80000000;
LABEL_15:
    *a2 = v8;
  }
  return result;
}

uint64_t fxd_S32CosS32(int a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a1 >= 0)
    v1 = a1;
  else
    v1 = -a1;
  if (v1 >= 411774)
    v2 = 411774;
  else
    v2 = v1;
  v3 = v1 - 411774 * ((v1 + ~v2 + 411774) / 0x6487Eu);
  v4 = v3 - 102944;
  v5 = 411774 - v3;
  if (v3 <= 308830)
    v5 = v3;
  if ((v3 - 205888) >= 0x1921F)
  {
    v6 = 1;
  }
  else
  {
    v5 = v3 - 205887;
    v6 = -1;
  }
  v7 = 205887 - v3;
  if (v4 < 0x19220)
    v8 = v7;
  else
    v8 = v5;
  if (v4 < 0x19220)
    v9 = -1;
  else
    v9 = v6;
  v10 = fxd_S32Q1616MultS32S32(v8, v8);
  v11 = fxd_S32Q1616MultS32S32(2328, v10);
  return (fxd_S32Q1616MultS32S32((v11 - 32551), v10) + 0x10000) * v9;
}

uint64_t fxd_S32Q1616MultS32S32(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v6;
  int v7;

  v6 = 0;
  v7 = 0;
  fxd_DPFExtractS32S16S16(a1, (_WORD *)&v7 + 1, &v7);
  fxd_DPFExtractS32S16S16(a2, (_WORD *)&v6 + 1, &v6);
  v3 = fxd_S32SatAddS32S32((((__int16)v6 * (__int16)v7) >> 14) & 0x1FFFF, 2 * (__int16)v6 * SHIWORD(v7));
  v4 = fxd_S32SatAddS32S32(v3, 2 * (__int16)v7 * SHIWORD(v6));
  return fxd_S32SatAddS32S32(v4, (HIWORD(v7) * HIWORD(v6)) << 16);
}

uint64_t Wsola__updatepointers(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t Wsola__updateSubunits(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;

  v3 = *(_QWORD *)(result + 152);
  v4 = v3 + 56 * a2;
  v5 = *(unsigned __int16 *)(v4 + 46);
  if (!*(_WORD *)(v4 + 46))
    return result;
  v6 = *(_DWORD *)(result + 144);
  v7 = *(_QWORD *)(result + 160);
  v8 = *(unsigned __int16 *)(v3 + 56 * a2 + 44);
  v9 = v7 + 16 * v8;
  v11 = *(_DWORD *)(v9 + 4);
  v10 = (int *)(v9 + 4);
  v12 = v11 + a3;
  if (v11 + a3 < 0)
  {
    if (v5 >= 2)
    {
      v13 = 0;
      v14 = 0;
      v15 = (int *)(v7 + 16 * v8 + 4);
      while (1)
      {
        v17 = *v15;
        v15 += 4;
        v16 = v17;
        result = (v17 + v14);
        if ((int)result > 1 - a3 + (int)v13)
          break;
        ++v13;
        v14 = result;
        if (v5 == v13)
          goto LABEL_7;
      }
      if ((_DWORD)v13)
      {
        v21 = (_DWORD *)(v7 + 16 * v8 + 4);
        v22 = v13;
        do
        {
          *v21 = 1;
          v21 += 4;
          --v22;
        }
        while (v22);
        v23 = v13;
      }
      else
      {
        v23 = 0;
      }
      *(_DWORD *)(v7 + 16 * (v23 + v8) + 4) = a3 + v14 + v16 - v13;
      goto LABEL_9;
    }
LABEL_7:
    v12 = 1;
  }
  *v10 = v12;
LABEL_9:
  v18 = 0;
  if (v5 <= 1)
    v19 = 1;
  else
    v19 = v5;
  v20 = v7 + 16 * v8;
  do
  {
    if (v18)
      v6 += *(_DWORD *)(v20 + v18 - 12);
    *(_DWORD *)(v20 + v18) = v6;
    v18 += 16;
  }
  while (16 * v19 != v18);
  return result;
}

uint64_t Wsola__findNextEventInSubUnit(uint64_t a1, unsigned int a2, int *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t result;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(unsigned __int16 *)(v4 + 56 * a2 + 46);
  if (*a3 >= v5)
  {
LABEL_6:
    v3 = 0;
    result = 0;
  }
  else
  {
    v6 = (unsigned __int16 *)(*(_QWORD *)(a1 + 160)
                            + 16 * (v3 + (unint64_t)*(unsigned __int16 *)(v4 + 56 * a2 + 44))
                            + 10);
    while (1)
    {
      v7 = *v6;
      v6 += 8;
      if (v7)
        break;
      if (v5 == ++v3)
        goto LABEL_6;
    }
    result = 1;
  }
  *a3 = v3;
  return result;
}

uint64_t Wsola__Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t ClientBuffer;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = *(_QWORD *)(a1 + 1088);
  if (*(_BYTE *)(*(_QWORD *)(v9 + 160) + 12) != 35)
  {
    v14 = 0;
LABEL_9:
    v15 = *(unsigned __int16 *)(v9 + 168);
    if (v14 >= v15)
    {
LABEL_28:
      synth_ProcessMarkers(a1, a2, a3, a4, a5, a6, a7, a8);
      if (!*(_BYTE *)(a1 + 1144)
        || (v26 = (*(_DWORD *)(a1 + 1096) + *(_DWORD *)(a1 + 1048)), (int)v26 < 1)
        || (ClientBuffer = InOut__InsertSilence(a1, v26, *(unsigned __int16 *)(v9 + 168) - 1),
            (ClientBuffer & 0x80000000) == 0)
        && !InOut__IsEndState(a1))
      {
        *(_DWORD *)(a1 + 1076) = 1;
        *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a1 + 1028);
        ++*(_DWORD *)(v9 + 224);
        ClientBuffer = InOut__GetClientBuffer(a1, v26, v27, v28, v29, v30, v31, v32);
        if ((ClientBuffer & 0x80000000) == 0)
          InOut__IsEndState(a1);
      }
      return ClientBuffer;
    }
    v16 = v14 == v15 - 1;
    v17 = v14;
    v18 = 56 * v14;
    while (1)
    {
      ClientBuffer = Wsola__newunit(a1, *(_QWORD *)(v9 + 152) + v18);
      if ((ClientBuffer & 0x80000000) != 0 || InOut__IsEndState(a1))
        return ClientBuffer;
      v24 = v16;
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 0xF) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 2) != 0)
        {
          v25 = Wsola__matchpreviousunit_wsola(a1, v17, v24);
        }
        else if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 1) != 0)
        {
          v25 = Wsola__plosive_silence(a1, v17);
        }
        else
        {
          if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 4) == 0)
            goto LABEL_23;
          v25 = Wsola__plosive_rs(a1, v17);
        }
      }
      else
      {
        v25 = Wsola__Silence(a1, v17, v24);
      }
      ClientBuffer = v25;
      if ((v25 & 0x80000000) != 0 || InOut__IsEndState(a1))
        return ClientBuffer;
LABEL_23:
      v16 = v17 == *(unsigned __int16 *)(v9 + 168) - 1;
      ClientBuffer = Wsola__middle(a1, v17, v24, v19, v20, v21, v22, v23);
      if ((ClientBuffer & 0x80000000) != 0)
        return ClientBuffer;
      if (InOut__IsEndState(a1))
        return ClientBuffer;
      ClientBuffer = Wsola__tail(a1, v17);
      if ((ClientBuffer & 0x80000000) != 0 || InOut__IsEndState(a1))
        return ClientBuffer;
      ++v17;
      v18 += 56;
      if (v17 >= *(unsigned __int16 *)(v9 + 168))
        goto LABEL_28;
    }
  }
  ClientBuffer = Wsola__newunit(a1, *(_QWORD *)(v9 + 152));
  if ((ClientBuffer & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    v11 = *(_QWORD *)(a1 + 1088);
    Wsola__updateSubunits(v11, 0, 0);
    v12 = *(_QWORD *)(v11 + 152);
    if (*(_WORD *)(v12 + 46))
    {
      v13 = *(_DWORD *)(v12 + 40);
      if (v13)
      {
        ClientBuffer = InOut__InsertSilence(a1, v13, 0);
        if ((ClientBuffer & 0x80000000) != 0)
          return ClientBuffer;
        InOut__IsEndState(a1);
      }
      else
      {
        ClientBuffer = 0;
      }
    }
    else
    {
      ClientBuffer = 0;
      *(_DWORD *)(v12 + 40) = 0;
    }
    if (!InOut__IsEndState(a1))
    {
      ClientBuffer = Wsola__middle(a1, 0, v33, v34, v35, v36, v37, v38);
      if ((ClientBuffer & 0x80000000) == 0 && !InOut__IsEndState(a1))
      {
        ClientBuffer = Wsola__tail(a1, 0);
        if ((ClientBuffer & 0x80000000) == 0 && !InOut__IsEndState(a1))
        {
          v14 = 1;
          goto LABEL_9;
        }
      }
    }
  }
  return ClientBuffer;
}

uint64_t Wsola__newunit(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t result;
  int v12;

  v3 = *(_QWORD *)(a1 + 1088);
  v4 = *(_DWORD *)(a2 + 28);
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(v3 + 28) = v5;
  v6 = *(unsigned __int8 *)(a2 + 48);
  if ((v6 & 0xF) == 0)
  {
    v7 = *(_DWORD *)(v3 + 4);
LABEL_7:
    v8 = v4 >= v7;
    v9 = v4 - v7;
    if (v4 >= v7)
      v5 += v7;
    else
      v5 += v4;
    if (v4 < v7)
      v7 = v4;
    if (v8)
      v4 = v9;
    else
      v4 = 0;
    *(_DWORD *)(v3 + 28) = v5;
    *(_DWORD *)(v3 + 32) = v7;
    goto LABEL_16;
  }
  if ((v6 & 2) != 0)
  {
    v7 = *(_DWORD *)v3;
    goto LABEL_7;
  }
  if ((v6 & 5) == 0)
    goto LABEL_17;
  v7 = 0;
LABEL_16:
  *(_DWORD *)(a2 + 36) = v7;
LABEL_17:
  *(_DWORD *)(v3 + 36) = v5;
  if (v6 > 0xF)
  {
    if ((v6 & 0x20) != 0)
    {
      v10 = (_DWORD *)(v3 + 8);
    }
    else
    {
      if ((v6 & 0x10) == 0)
        goto LABEL_24;
      v10 = (_DWORD *)(v3 + 180);
    }
  }
  else
  {
    v10 = (_DWORD *)(v3 + 4);
  }
  v5 += *v10;
  *(_DWORD *)(v3 + 28) = v5;
LABEL_24:
  result = Lookup_Init(**(_QWORD **)(a2 + 8), v4, v5);
  if ((result & 0x80000000) == 0)
  {
    v12 = *(unsigned __int16 *)(a2 + 46);
    *(_DWORD *)(v3 + 20) = 0;
    *(_DWORD *)(v3 + 24) = v12;
  }
  return result;
}

uint64_t Wsola__middle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;

  v9 = *(_QWORD *)(a1 + 1088);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 56 * (int)a2 + 48);
  if (v10 <= 0xF || (v10 & 0x20) != 0)
  {
    v12 = (_DWORD *)(v9 + 4);
LABEL_7:
    v13 = (_DWORD *)(v9 + 20);
    goto LABEL_8;
  }
  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 0x40) == 0)
    {
      v11 = 0;
      goto LABEL_9;
    }
    v12 = (_DWORD *)(v9 + 208);
    goto LABEL_7;
  }
  v12 = (_DWORD *)(v9 + 20);
  v13 = (_DWORD *)(v9 + 180);
LABEL_8:
  v14 = *(_DWORD *)(v9 + 36);
  v15 = *v12 + *v13;
  v11 = (v14 - v15);
  if (v14 - v15 < 0)
    return 0;
LABEL_9:
  v16 = InOut__AudioWriteToClientWithMarkers(a1, a2, v11, 2, a5, a6, a7, a8);
  if ((v16 & 0x80000000) == 0 && !InOut__IsEndState(a1))
    *(_DWORD *)(v9 + 20) += v11;
  return v16;
}

uint64_t Wsola__tail(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 1088);
  v3 = **(uint64_t ***)(*(_QWORD *)(v2 + 152) + 56 * a2 + 8);
  v4 = *(_DWORD *)(v2 + 28);
  v5 = *(_DWORD *)(v2 + 20);
  v6 = v4 - v5;
  if (v4 - v5 < 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8);
    v11 = *(_DWORD *)(v2 + 12);
    v12 = 0;
  }
  else
  {
    v7 = *(_DWORD *)(v2 + 12);
    v8 = *(_QWORD *)(v2 + 48);
    v9 = **(_QWORD **)(*(_QWORD *)(v2 + 152) + 56 * a2 + 8);
    if (v6 >= v7)
    {
      InOut__DecodeToVector(a1, v9, v7, v8);
      return Lookup_DeInit(v3);
    }
    InOut__DecodeToVector(a1, v9, v4 - v5, v8);
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8);
    v11 = *(_DWORD *)(v2 + 12) - v6;
    v12 = v6;
  }
  Wsola__zero(v10, v12, v11);
  return Lookup_DeInit(v3);
}

uint64_t Wsola__matchpreviousunit_wsola(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  int v51;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = **(_QWORD **)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 8);
  v8 = *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20);
  v9 = *(_DWORD *)(v6 + 12);
  v10 = *(_QWORD *)(v6 + 64);
  if (v8 >= v9)
  {
    *(_DWORD *)(v10 + 4) = v9;
    v11 = InOut__DecodeToVector(a1, v7, v9, v10);
    if ((v11 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v11;
  }
  else
  {
    *(_DWORD *)(v10 + 4) = v8;
    v11 = InOut__DecodeToVector(a1, v7, v8, v10);
    if ((v11 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v11;
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 8), *(_DWORD *)(*(_QWORD *)(v6 + 64) + 4), *(_DWORD *)(v6 + 12) - *(_DWORD *)(*(_QWORD *)(v6 + 64) + 4));
  }
  v12 = *(_QWORD *)(v6 + 48);
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(unsigned int *)(v6 + 8);
  v17 = *(_DWORD *)(v6 + 16);
  if ((int)v16 < 1)
  {
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v19 += (*(_DWORD *)(v14 + 4 * v18) * *(_DWORD *)(v15 + 4 * v18)) >> 3;
      v18 += v17;
    }
    while (v18 < v16);
  }
  if (v17 <= *(_DWORD *)v6)
  {
    v20 = 0;
    v21 = *(_DWORD *)(v6 + 16);
    v22 = v15 + 4 * v17;
    do
    {
      if ((int)v16 < 1)
      {
        v24 = 0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v24 += (*(_DWORD *)(v14 + 4 * v23) * *(_DWORD *)(v22 + 4 * v23)) >> 3;
          v23 += v17;
        }
        while (v23 < (int)v16);
      }
      if (v24 > v19)
      {
        v20 = v21;
        v19 = v24;
      }
      v21 += v17;
      v22 += 4 * v17;
    }
    while (v21 <= *(_DWORD *)v6);
  }
  else
  {
    v20 = 0;
  }
  v25 = *(_DWORD *)(v6 + 4) + v20;
  *(_DWORD *)(v6 + 32) = v25;
  v26 = *(_QWORD *)(v6 + 152) + 56 * (int)a2;
  *(_DWORD *)(v26 + 36) -= v25;
  Wsola__WindowsOverlap_wsola((int *)v6, v12, v13, 0, v20);
  v27 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v6 + 160) + 10))
    {
      v50 = 0;
      if (Wsola__findNextEventInSubUnit(v6, 0, &v50))
      {
        v35 = *(_QWORD *)(v6 + 152);
        v36 = *(unsigned __int16 *)(v35 + 46);
        if (v50 < (int)v36)
        {
          v37 = *(unsigned __int16 *)(v35 + 44);
          v38 = *(_DWORD *)(v6 + 144);
          v39 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v50 + v37));
          v40 = v36 - v50;
          do
          {
            if (*v39 > v38)
              *v39 = v38;
            v39 += 4;
            --v40;
          }
          while (v40);
        }
      }
    }
  }
  else
  {
    v51 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v6, (int)a2 - 1, &v51))
      {
        v28 = *(_QWORD *)(v6 + 152);
        v29 = *(unsigned __int16 *)(v28 + 56 * v27 + 46);
        if (v51 < (int)v29)
        {
          v30 = *(_DWORD *)(v6 + 4);
          if (v30 >= *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4))
            v30 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4);
          if (a3 == 1)
            v30 = 0;
          v31 = *(unsigned __int16 *)(v28 + 56 * v27 + 44);
          v32 = *(_DWORD *)(v6 + 144) + v30;
          v33 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v51 + v31));
          v34 = v29 - v51;
          do
          {
            if (*v33 > v32)
              *v33 = v32;
            v33 += 4;
            --v34;
          }
          while (v34);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 48), 0, *(unsigned int *)(v6 + 4));
  v11 = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), *(unsigned int *)(v6 + 4), 1, v41, v42, v43, v44);
  if ((v11 & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    Wsola__updateSubunits(v6, a2, *(_DWORD *)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 36));
    InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 48), *(_DWORD *)(v6 + 4), *(unsigned int *)(v6 + 4));
    v11 = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(v6 + 4), 0, v45, v46, v47, v48);
    if ((v11 & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 64), *(_DWORD *)v6 + v20, (*(_DWORD *)(*(_QWORD *)(v6 + 64) + 4) - (*(_DWORD *)v6 + v20)));
      Wsola__updatepointers(v6, *(_DWORD *)(v6 + 4) + *(_DWORD *)(v6 + 32));
    }
  }
  return v11;
}

uint64_t Wsola__Silence(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t inserted;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = **(_QWORD **)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 8);
  v8 = *(_DWORD *)(v6 + 4);
  v9 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20) >= v8)
  {
    *(_DWORD *)(v9 + 4) = v8;
    inserted = InOut__DecodeToVector(a1, v7, v8, v9);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
  }
  else
  {
    inserted = InOut__DecodeToVector(a1, v7, *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20), v9);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
    v11 = *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20);
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 8), v11, *(_DWORD *)(v6 + 4) - v11);
    *(_DWORD *)(*(_QWORD *)(v6 + 64) + 4) = *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20);
  }
  Wsola__fade_out(v6, *(_QWORD *)(v6 + 48), 0, *(_DWORD *)(v6 + 4));
  v12 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 32) = v12 >> 1;
  v13 = *(_QWORD *)(v6 + 152) + 56 * (int)a2;
  *(_DWORD *)(v13 + 36) -= v12 >> 1;
  v14 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v6 + 160) + 10))
    {
      v38 = 0;
      if (Wsola__findNextEventInSubUnit(v6, 0, &v38))
      {
        v22 = *(_QWORD *)(v6 + 152);
        v23 = *(unsigned __int16 *)(v22 + 46);
        if (v38 < (int)v23)
        {
          v24 = *(unsigned __int16 *)(v22 + 44);
          v25 = *(_DWORD *)(v6 + 144);
          v26 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v38 + v24));
          v27 = v23 - v38;
          do
          {
            if (*v26 > v25)
              *v26 = v25;
            v26 += 4;
            --v27;
          }
          while (v27);
        }
      }
    }
  }
  else
  {
    v39 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v6, (int)a2 - 1, &v39))
      {
        v15 = *(_QWORD *)(v6 + 152);
        v16 = *(unsigned __int16 *)(v15 + 56 * v14 + 46);
        if (v39 < (int)v16)
        {
          v17 = *(_DWORD *)(v6 + 4);
          if (v17 >= *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4))
            v17 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4);
          if (a3 == 1)
            v17 = 0;
          v18 = *(unsigned __int16 *)(v15 + 56 * v14 + 44);
          v19 = *(_DWORD *)(v6 + 144) + v17;
          v20 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v39 + v18));
          v21 = v16 - v39;
          do
          {
            if (*v20 > v19)
              *v20 = v19;
            v20 += 4;
            --v21;
          }
          while (v21);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 48), 0, *(unsigned int *)(v6 + 4));
  inserted = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), *(unsigned int *)(v6 + 4), 1, v28, v29, v30, v31);
  if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    v32 = *(_DWORD *)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 40);
    Wsola__updateSubunits(v6, a2, *(_DWORD *)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 36) + v32);
    inserted = InOut__InsertSilence(a1, v32, a2);
    if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      Wsola__fade_in(v6, *(_QWORD *)(v6 + 64), 0, *(_DWORD *)(v6 + 4));
      InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 64), 0, *(unsigned int *)(v6 + 4));
      inserted = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(v6 + 4), 0, v33, v34, v35, v36);
      if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
      {
        InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 64), *(_DWORD *)(v6 + 4), (*(_DWORD *)(*(_QWORD *)(v6 + 64) + 4) - *(_DWORD *)(v6 + 4)));
        Wsola__updatepointers(v6, *(_DWORD *)(v6 + 32) + (*(int *)(v6 + 4) >> 1));
      }
    }
  }
  return inserted;
}

void Wsola__zero(uint64_t a1, int a2, int a3)
{
  if (a3 >= 1)
    bzero((void *)(a1 + 4 * a2), 4 * a3);
}

int *Wsola__WindowsOverlap_wsola(int *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  LODWORD(v5) = *result;
  if (*result >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 8) + 4 * a4;
    v9 = *(_QWORD *)(a3 + 8) + 4 * a5;
    v10 = *(_QWORD *)(*((_QWORD *)result + 7) + 8);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = ((*(_DWORD *)(v9 + 4 * v7) * *(_DWORD *)(v10 + 4 * (v6 + (int)v5))) >> 15)
                               + ((*(_DWORD *)(v8 + 4 * v7) * *(_DWORD *)(v10 + 4 * v7)) >> 15);
      ++v7;
      v5 = *result;
      --v6;
    }
    while (v7 < v5);
  }
  return result;
}

uint64_t Wsola__fade_out(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
  do
  {
    if (2 * (a4 & ~(a4 >> 31)) == v4)
      break;
    *v7 = (*v7 * *(_DWORD *)(v6 + 4 * v4)) >> 15;
    ++v7;
    v4 += 2;
  }
  while (*(_DWORD *)(v5 + 4) > (int)v4);
  return result;
}

uint64_t Wsola__fade_in(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(result + 56);
  v5 = *(_DWORD *)(v4 + 4) - 1;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
  v8 = v5;
  v9 = a4 & ~(a4 >> 31);
  do
  {
    if (!v9)
      break;
    *v7 = (*v7 * *(_DWORD *)(v6 + 4 * v8)) >> 15;
    ++v7;
    --v9;
    v10 = v8 <= 1;
    v8 -= 2;
  }
  while (!v10);
  return result;
}

uint64_t Wsola__fade_out_closure(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 8) + 4 * a3;
  do
  {
    if ((a4 & ~(a4 >> 31)) == v4)
      break;
    *(_DWORD *)(v7 + 4 * v4) = (*(_DWORD *)(v7 + 4 * v4) * *(_DWORD *)(v6 + 4 * v4)) >> 15;
    ++v4;
  }
  while (v4 < *(int *)(v5 + 4));
  return result;
}

uint64_t Wsola__fade_in_burst(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(result + 56);
  v5 = *(_DWORD *)(v4 + 4) - 1;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
  v8 = *(_DWORD *)(result + 216);
  v9 = a4 & ~(a4 >> 31);
  do
  {
    if (!v9)
      break;
    *v7 = (*v7 * *(_DWORD *)(v6 + 4 * v5)) >> 15;
    ++v7;
    v5 -= v8;
    --v9;
  }
  while ((v5 & 0x80000000) == 0);
  return result;
}

uint64_t Wsola__OverlapWindow__Init(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (a2 > 15999)
  {
    if (a2 == 16000)
    {
      v2 = *(uint64_t **)(result + 56);
      v2[1] = (uint64_t)&smpOverlapWindow_16;
      v3 = 0xA1000000A1;
    }
    else
    {
      if (a2 != 22050)
        return result;
      v2 = *(uint64_t **)(result + 56);
      v2[1] = (uint64_t)&smpOverlapWindow_22;
      v3 = 0xDD000000DDLL;
    }
  }
  else if (a2 == 8000)
  {
    v2 = *(uint64_t **)(result + 56);
    v2[1] = (uint64_t)&smpOverlapWindow_8;
    v3 = 0x5100000051;
  }
  else
  {
    if (a2 != 11025)
      return result;
    v2 = *(uint64_t **)(result + 56);
    v2[1] = (uint64_t)&smpOverlapWindow_11;
    v3 = 0x7100000071;
  }
  *v2 = v3;
  return result;
}

uint64_t Wsola__plosive_rs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  int v33;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = **(_QWORD **)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 8);
  v6 = *(_DWORD *)(v4 + 212);
  v7 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20) >= v6)
  {
    *(_DWORD *)(v7 + 4) = v6;
    v8 = InOut__DecodeToVector(a1, v5, v6, v7);
    if ((v8 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v8;
  }
  else
  {
    v8 = InOut__DecodeToVector(a1, v5, *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20), v7);
    if ((v8 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v8;
    v9 = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 8), v9, *(_DWORD *)(v4 + 212) - v9);
    *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4) = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
  }
  Wsola__fade_out_closure(v4, *(_QWORD *)(v4 + 48), 0, *(_DWORD *)(v4 + 208));
  *(_DWORD *)(v4 + 32) = 0;
  v10 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v4 + 160) + 10))
    {
      v32 = 0;
      if (Wsola__findNextEventInSubUnit(v4, 0, &v32))
      {
        v17 = *(_QWORD *)(v4 + 152);
        v18 = *(unsigned __int16 *)(v17 + 46);
        if (v32 < (int)v18)
        {
          v19 = *(unsigned __int16 *)(v17 + 44);
          v20 = *(_DWORD *)(v4 + 144);
          v21 = (_DWORD *)(*(_QWORD *)(v4 + 160) + 16 * (v32 + v19));
          v22 = v18 - v32;
          do
          {
            if (*v21 > v20)
              *v21 = v20;
            v21 += 4;
            --v22;
          }
          while (v22);
        }
      }
    }
  }
  else
  {
    v33 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v4, (int)a2 - 1, &v33))
      {
        v11 = *(_QWORD *)(v4 + 152);
        v12 = *(unsigned __int16 *)(v11 + 56 * v10 + 46);
        if (v33 < (int)v12)
        {
          v13 = *(unsigned __int16 *)(v11 + 56 * v10 + 44);
          v14 = *(_DWORD *)(v4 + 144) + *(_DWORD *)(v4 + 208);
          v15 = (int *)(*(_QWORD *)(v4 + 160) + 16 * (v33 + v13));
          v16 = v12 - v33;
          do
          {
            if (*v15 > v14)
              *v15 = v14;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 48), 0, *(unsigned int *)(*(_QWORD *)(v4 + 48) + 4));
  v8 = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), *(unsigned int *)(*(_QWORD *)(v4 + 48) + 4), 1, v23, v24, v25, v26);
  if ((v8 & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    Wsola__fade_in_burst(v4, *(_QWORD *)(v4 + 64), 0, *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4));
    Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36));
    InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 64), 0, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4));
    v8 = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4), 0, v27, v28, v29, v30);
    if ((v8 & 0x80000000) == 0 && !InOut__IsEndState(a1))
      Wsola__updatepointers(v4, *(_DWORD *)(v4 + 212) + *(_DWORD *)(v4 + 32));
  }
  return v8;
}

uint64_t Wsola__plosive_silence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t inserted;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  int v34;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = **(_QWORD **)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 8);
  v6 = *(_DWORD *)(v4 + 180);
  v7 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20) >= v6)
  {
    *(_DWORD *)(v7 + 4) = v6;
    inserted = InOut__DecodeToVector(a1, v5, v6, v7);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
  }
  else
  {
    inserted = InOut__DecodeToVector(a1, v5, *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20), v7);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
    v9 = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 8), v9, *(_DWORD *)(v4 + 180) - v9);
    *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4) = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
  }
  *(_DWORD *)(v4 + 32) = 0;
  v10 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v4 + 160) + 10))
    {
      v33 = 0;
      if (Wsola__findNextEventInSubUnit(v4, 0, &v33))
      {
        v17 = *(_QWORD *)(v4 + 152);
        v18 = *(unsigned __int16 *)(v17 + 46);
        if (v33 < (int)v18)
        {
          v19 = *(unsigned __int16 *)(v17 + 44);
          v20 = *(_DWORD *)(v4 + 144);
          v21 = (_DWORD *)(*(_QWORD *)(v4 + 160) + 16 * (v33 + v19));
          v22 = v18 - v33;
          do
          {
            if (*v21 > v20)
              *v21 = v20;
            v21 += 4;
            --v22;
          }
          while (v22);
        }
      }
    }
  }
  else
  {
    v34 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v4, (int)a2 - 1, &v34))
      {
        v11 = *(_QWORD *)(v4 + 152);
        v12 = *(unsigned __int16 *)(v11 + 56 * v10 + 46);
        if (v34 < (int)v12)
        {
          v13 = *(unsigned __int16 *)(v11 + 56 * v10 + 44);
          v14 = *(_DWORD *)(v4 + 144);
          v15 = (_DWORD *)(*(_QWORD *)(v4 + 160) + 16 * (v34 + v13));
          v16 = v12 - v34;
          do
          {
            if (*v15 > v14)
              *v15 = v14;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 48), 0, *(unsigned int *)(v4 + 180));
  inserted = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), 1, 1, v23, v24, v25, v26);
  if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 40);
    Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36) + v27);
    inserted = InOut__InsertSilence(a1, v27, a2);
    if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36));
      InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 64), 0, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4));
      inserted = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4), 0, v28, v29, v30, v31);
      if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
        Wsola__updatepointers(v4, *(_DWORD *)(v4 + 180) + *(_DWORD *)(v4 + 32));
    }
  }
  return inserted;
}

uint64_t synthfx_ExtractFeaturesForSynth_Demi(int a1, uint64_t a2)
{
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned __int16 *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v64;
  char v65;
  int v66;
  __int16 v67;
  int v68;
  int v69;
  uint64_t UnitData;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int v81;
  uint64_t v82;
  __int16 v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;

  v3 = a1;
  v98 = *(_QWORD *)(a2 + 136);
  v99 = v98 != 0;
  v4 = *(_WORD *)(a2 + 32) - 2;
  *(_WORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 48) += 4;
  *(_WORD *)(a2 + 56) -= 4;
  if (!v4)
    goto LABEL_11;
  v5 = 0;
  v6 = v4;
  do
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v5) = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v5 + 4);
    *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v5) = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v5 + 8);
    ++v5;
  }
  while (v4 != v5);
  if (v4 < 2u)
  {
LABEL_11:
    *(_WORD *)(a2 + 32) = 0;
    v11 = *(_QWORD *)(a2 + 112);
    goto LABEL_12;
  }
  LOWORD(v7) = v4;
  if (!a1)
  {
    v102 = 0uLL;
    v101 = 0uLL;
    UnitData = Lookup_GetUnitData(***(_QWORD ****)(a2 + 40), **(_DWORD **)(a2 + 24), (uint64_t)&v102);
    if ((UnitData & 0x80000000) != 0)
      return UnitData;
    if (*(_WORD *)(a2 + 32))
    {
      v72 = v3;
      v73 = 0;
      v74 = 0;
      v7 = 1;
      v4 = 1;
      while (1)
      {
        v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * (v73 + 1)), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * (v73 + 1)), (uint64_t)&v101);
        if ((v8 & 0x80000000) != 0)
          return v8;
        LODWORD(v75) = *(unsigned __int16 *)(a2 + 32);
        if (v73 >= (int)v75)
        {
          ++v73;
        }
        else
        {
          v76 = v73;
          v77 = 8 * v73 + 16;
          do
          {
            v78 = *(_QWORD *)(a2 + 40);
            if (*(_QWORD *)(v78 + v77 - 16) != *(_QWORD *)(v78 + 8 * v76 + 8))
              break;
            v79 = *(_BYTE *)(*(_QWORD *)(a2 + 64) + v74) != 35 && *(_WORD *)(*(_QWORD *)(a2 + 96) + 2 * v74) == 0;
            if (!v79 || BYTE12(v102) != 0)
              break;
            v81 = DWORD1(v101) - (DWORD1(v102) + DWORD2(v102));
            if (v81 < 0)
              v81 = DWORD1(v102) + DWORD2(v102) - DWORD1(v101);
            if (v81 > 3)
              break;
            v82 = v76 + 1;
            ++v73;
            v74 = (v73 & 1) + (v73 >> 1);
            v102 = v101;
            ++v7;
            v8 = Lookup_GetUnitData(**(_QWORD ***)(v78 + v77), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v76 + 8), (uint64_t)&v101);
            v75 = *(unsigned __int16 *)(a2 + 32);
            v77 += 8;
            v76 = v82;
          }
          while (v82 < v75);
          if ((v8 & 0x80000000) != 0)
            return v8;
          ++v73;
        }
        v74 = (v73 & 1) + (v73 >> 1);
        v102 = v101;
        ++v7;
        ++v4;
        if (v73 >= (int)v75)
          goto LABEL_142;
      }
    }
    v72 = v3;
    v4 = 1;
    LOWORD(v7) = 1;
LABEL_142:
    v6 = v4;
    v3 = v72;
  }
  v8 = 2164269066;
  if (!v98)
    LOWORD(v7) = 1;
  v9 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a2 + 8), v6, 56);
  *(_QWORD *)(a2 + 128) = v9;
  if (v9)
  {
    *(_WORD *)(a2 + 120) = v4;
    v10 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a2 + 8), (unsigned __int16)v7, 16);
    *(_QWORD *)(a2 + 112) = v10;
    if (v10)
    {
      v11 = v10;
      *(_WORD *)(a2 + 106) = v7;
LABEL_12:
      v104 = 0;
      v12 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)&v102 = v12;
      *((_QWORD *)&v102 + 1) = v11;
      *(_DWORD *)(v12 + 44) = 0;
      if (v3)
      {
        v13 = *(unsigned __int16 *)(a2 + 32);
        if (*(_WORD *)(a2 + 32))
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = *(_QWORD *)(a2 + 24);
          v18 = *(_QWORD *)(a2 + 40);
          v19 = *(_QWORD *)(a2 + 64);
          v20 = (_BYTE *)(v11 + 12);
          v21 = (unsigned __int16 *)(*(_QWORD *)(a2 + 48) + 2);
          while (1)
          {
            v22 = (v15 >> 1) + (unint64_t)(v15 & 1);
            v23 = v12 + v14;
            *(_DWORD *)v23 = *(_DWORD *)(v17 + 4 * v15);
            *(_QWORD *)(v23 + 8) = *(_QWORD *)(v18 + 8 * v15);
            *(_DWORD *)(v23 + 16) = *(v21 - 1);
            *(_DWORD *)(v23 + 20) = *v21;
            *(_WORD *)(v23 + 44) = v15;
            if (v14)
            {
              if ((v15 & 1) == 0)
                break;
            }
            v27 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 2 * v22);
            *(_DWORD *)(v23 + 40) = v27;
            v26 = (_DWORD *)(v23 + 40);
            v24 = (_BYTE *)(v19 + v22);
            v28 = *(unsigned __int8 *)(v19 + v22);
            if (v28 == 35)
            {
              if (!v27)
                goto LABEL_22;
              LOBYTE(v28) = 35;
            }
LABEL_23:
            *v20 = v28;
            *((_WORD *)v20 - 2) = v16;
            if ((v15 & 1) != 0 || !(_DWORD)v22)
            {
LABEL_27:
              v29 = *(_WORD *)(*(_QWORD *)(a2 + 80) + 2 * v22);
              goto LABEL_28;
            }
LABEL_25:
            v29 = 0;
LABEL_28:
            v21 += 2;
            *((_WORD *)v20 - 1) = v29;
            v16 += v29;
            ++v15;
            v14 += 56;
            v20 += 16;
            if (56 * v13 == v14)
              goto LABEL_29;
          }
          *(_DWORD *)(v12 + v14 + 40) = 0;
          v24 = (_BYTE *)(v19 + v22);
          v25 = *(unsigned __int8 *)(v19 + v22);
          if (v25 != 35)
          {
            *v20 = v25;
            *((_WORD *)v20 - 2) = v16;
            if (!(_DWORD)v22)
              goto LABEL_27;
            goto LABEL_25;
          }
          v26 = (_DWORD *)(v12 + 56 * v15 + 40);
LABEL_22:
          *v26 = 1;
          LOBYTE(v28) = *v24;
          goto LABEL_23;
        }
LABEL_29:
        v8 = 0;
        *(_WORD *)(a2 + 120) = v13;
        *(_WORD *)(a2 + 106) = v13;
        goto LABEL_30;
      }
      v101 = 0uLL;
      v100 = 0uLL;
      v8 = Lookup_GetUnitData(***(_QWORD ****)(a2 + 40), **(_DWORD **)(a2 + 24), (uint64_t)&v101);
      if ((v8 & 0x80000000) != 0)
        return v8;
      if (**(_BYTE **)(a2 + 64) == 35)
      {
        v51 = DWORD2(v101);
        if (DWORD2(v101) >= 0x16)
          v51 = 22;
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v52 = v51;
        else
          v52 = 1;
        DWORD2(v101) = v52;
      }
      v103 = 1;
      FillUnit((_QWORD *)a2, v12, 0, 0, (uint64_t)&v101, 0, v99);
      FillSubunit(a2, (uint64_t)&v102, v12, 0, 0, (uint64_t)&v101, &v104, v99);
      v94 = v11;
      if (!*(_WORD *)(a2 + 32))
      {
        v54 = 0;
        LOWORD(v53) = 0;
        LOWORD(v13) = 1;
        goto LABEL_121;
      }
      v97 = 0;
      v53 = 0;
      v54 = 0;
      LODWORD(v55) = 0;
      LODWORD(v13) = 1;
      v95 = v12;
      while (1)
      {
        v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * ((int)v55 + 1)), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * ((int)v55 + 1)), (uint64_t)&v100);
        LODWORD(v56) = *(unsigned __int16 *)(a2 + 32);
        if ((int)v55 >= (int)v56)
          goto LABEL_86;
        v96 = v13;
        v57 = v12 + 56 * v97;
        v58 = (_BYTE *)(v57 + 48);
        v59 = (_WORD *)(v57 + 46);
        v60 = (int)v55;
        while (1)
        {
          v55 = v60;
          v61 = *(_QWORD *)(a2 + 96);
          v62 = *(_BYTE *)(*(_QWORD *)(a2 + 64) + v54) != 35 && *(_WORD *)(v61 + 2 * v54) == 0;
          if (!v62 || BYTE12(v101) != 0)
            break;
          v64 = DWORD1(v100) - (DWORD1(v101) + DWORD2(v101));
          if (v64 < 0)
            v64 = DWORD1(v101) + DWORD2(v101) - DWORD1(v100);
          if (v64 > 3)
            break;
          ++v60;
          if (v55 + 1 >= v56)
            goto LABEL_84;
          v54 = (v60 & 1) + ((int)v60 >> 1);
          v101 = v100;
          *(_DWORD *)(v57 + 32) += DWORD2(v100);
          if ((v60 & 1) == 0)
          {
            v65 = *v58 & 0xF | 0x20;
LABEL_80:
            *v58 = v65;
            goto LABEL_81;
          }
          v66 = *(unsigned __int16 *)(v61 + 2 * v54);
          v65 = *v58 & 0xF;
          *v58 = v65 | 0x20;
          if (v66)
            goto LABEL_80;
          if (*(_BYTE *)(*(_QWORD *)(a2 + 88) + v54) == 80)
          {
            v65 |= 0x40u;
            goto LABEL_80;
          }
LABEL_81:
          v67 = v98;
          if (v98)
            v67 = *v59 + 1;
          *v59 = v67;
          FillSubunit(a2, (uint64_t)&v102, v57, v55 + 1, (v60 & 1) + ((int)v60 >> 1), (uint64_t)&v101, &v104, v99);
          v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * v55 + 16), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v55 + 8), (uint64_t)&v100);
          v56 = *(unsigned __int16 *)(a2 + 32);
          ++v53;
          if (v60 >= v56)
          {
LABEL_84:
            LODWORD(v55) = v55 + 1;
            break;
          }
        }
        v12 = v95;
        LODWORD(v13) = v96;
LABEL_86:
        if ((v8 & 0x80000000) != 0)
          return v8;
        v68 = v55 + 1;
        if ((int)v55 + 1 < (int)v56)
        {
          v54 = (v68 & 1) + (v68 >> 1);
          v101 = v100;
          v69 = v56 - 2;
          if (*(_BYTE *)(*(_QWORD *)(a2 + 64) + v54) == 35 && (_DWORD)v55 == v69)
            DWORD2(v101) = 4;
          ++v53;
          ++v97;
          FillUnit((_QWORD *)a2, v12 + 56 * v97, v55 + 1, (v68 & 1) + (v68 >> 1), (uint64_t)&v101, v53, v99);
          LODWORD(v13) = v13 + 1;
          LOWORD(v103) = v13;
          FillSubunit(a2, (uint64_t)&v102, v12 + 56 * v97, v55 + 1, (v68 & 1) + (v68 >> 1), (uint64_t)&v101, &v104, v99);
          LODWORD(v55) = v55 + 1;
          if (v68 < *(unsigned __int16 *)(a2 + 32))
            continue;
        }
LABEL_121:
        if (v98)
          v83 = v53 + 1;
        else
          v83 = 0;
        *(_WORD *)(a2 + 120) = v13;
        *(_WORD *)(a2 + 106) = v83;
        v84 = *(_BYTE **)(a2 + 64);
        v3 = 0;
        if (*v84 == 35)
        {
          *(_BYTE *)(v12 + 48) = 68;
          *(_BYTE *)(v12 + 104) = *(_BYTE *)(v12 + 104) & 0xF0 | 4;
        }
        if (v84[v54] == 35)
        {
          v85 = v12 + 56 * (unsigned __int16)v13;
          *(_BYTE *)(v85 - 64) = *(_BYTE *)(v85 - 64) & 0xF | 0x40;
          *(_BYTE *)(v85 - 8) = 68;
        }
        if ((unsigned __int16)v13 < 3u)
        {
LABEL_30:
          if (!v3 && (v8 & 0x80000000) == 0 && v98)
          {
            v30 = *(_BYTE *)(a2 + 16);
            if ((v30 & 1) == 0)
            {
              v31 = *(_QWORD *)(a2 + 128);
              v32 = *(_QWORD *)(a2 + 112) + 16 * *(unsigned __int16 *)(v31 + 44);
              if (*(_BYTE *)(v32 + 12) == 35)
              {
                *(_BYTE *)(v31 + 48) = *(_BYTE *)(v31 + 48) & 0xF0 | 1;
                v33 = *(_DWORD *)(v31 + 40);
                v34 = *(_DWORD *)(v31 + 32);
                v37 = *(_DWORD *)(v32 + 4);
                v35 = (int *)(v32 + 4);
                v36 = v37;
                v38 = 10 * v33;
                v39 = v33 > 0;
                v40 = v37 > 50;
                v41 = v38 - v37;
                if (v38 >= v37)
                  v42 = v36;
                else
                  v42 = v38;
                if (v38 <= v36)
                  v41 = 15;
                v43 = !v39 || !v40;
                if (v39 && v40)
                  v44 = v42;
                else
                  v44 = v36;
                if (!v43)
                  v38 = v41;
                v45 = v38 / 10;
                v46 = v36 - v44;
                v47 = __OFSUB__(v34, v46);
                v48 = v34 - v46;
                if (v48 < 0 == v47)
                {
                  *v35 = v44;
                  *(_DWORD *)(v31 + 28) += v46;
                  *(_DWORD *)(v31 + 32) = v48;
                }
                *(_DWORD *)(v31 + 40) = v45;
              }
            }
            if ((v30 & 4) == 0)
            {
              v49 = *(_QWORD *)(a2 + 128);
              v50 = (unsigned __int16)v13 - 1;
              if (*(_BYTE *)(*(_QWORD *)(a2 + 112)
                            + 16
                            * (*(unsigned __int16 *)(v49 + 56 * v50 + 44)
                             + (unint64_t)*(unsigned __int16 *)(v49 + 56 * v50 + 46))
                            - 4) == 35)
                *(_BYTE *)(v49 + 56 * v50 + 48) = *(_BYTE *)(v49 + 56 * v50 + 48) & 0xF | 0x10;
            }
          }
          return v8;
        }
        v86 = (char *)(v12 + 104);
        v87 = 1;
        while (2)
        {
          v88 = *v86;
          if ((v88 & 0xF) == 0 && *((_WORD *)v86 - 1) == 1)
          {
            v89 = 65;
            v90 = 4;
            v91 = -16;
            v92 = 1;
            goto LABEL_136;
          }
          if (v88 <= 0xF && *((_WORD *)v86 - 1) == 1)
          {
            v89 = 20;
            v90 = 64;
            v91 = 15;
            v92 = -1;
LABEL_136:
            *((_DWORD *)v86 - 4) = 3;
            *(_DWORD *)(v94 + 16 * *((unsigned __int16 *)v86 - 2) + 4) = 3;
            *(_BYTE *)(v12 + 56 * (v87 + v92) + 48) = *(_BYTE *)(v12 + 56 * (v87 + v92) + 48) & v91 | v90;
            *v86 = v89;
          }
          ++v87;
          v86 += 56;
          if ((unsigned __int16)v13 - 1 == v87)
            goto LABEL_30;
          continue;
        }
      }
    }
  }
  return v8;
}

_QWORD *FillUnit(_QWORD *result, uint64_t a2, int a3, int a4, uint64_t a5, __int16 a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  char v10;

  *(_DWORD *)a2 = *(_DWORD *)a5;
  v7 = result[6];
  v8 = *(unsigned __int16 *)(v7 + 4 * a3);
  LODWORD(v7) = *(unsigned __int16 *)(v7 + 2 * ((2 * a3) | 1));
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[5] + 8 * a3);
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v7;
  *(_QWORD *)(a2 + 28) = *(_QWORD *)(a5 + 4);
  *(_DWORD *)(a2 + 36) = 0;
  v9 = *(unsigned __int16 *)(result[12] + 2 * a4);
  *(_BYTE *)(a2 + 48) = 34;
  if ((a3 & 1) != 0)
  {
    *(_DWORD *)(a2 + 40) = 0;
    if (v9)
    {
      v10 = 2;
    }
    else
    {
      if (*(_BYTE *)(result[11] + a4) != 80)
        goto LABEL_11;
      v10 = 66;
    }
  }
  else if (v9)
  {
    *(_DWORD *)(a2 + 40) = v9;
    v10 = 32;
  }
  else
  {
    *(_DWORD *)(a2 + 40) = 0;
    if (*(_BYTE *)(result[11] + a4) != 80)
      goto LABEL_11;
    v10 = 36;
  }
  *(_BYTE *)(a2 + 48) = v10;
LABEL_11:
  if (a7 != 1)
    a6 = 0;
  *(_WORD *)(a2 + 46) = a7 == 1;
  *(_WORD *)(a2 + 44) = a6;
  return result;
}

uint64_t FillSubunit(uint64_t result, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, _WORD *a7, int a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;

  if (!a8)
  {
    *(_DWORD *)(a3 + 44) = 0;
    return result;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned __int16 *)(a3 + 44) + (unint64_t)*(unsigned __int16 *)(a3 + 46) - 1;
  v10 = v8 + 16 * v9;
  *(_BYTE *)(v10 + 12) = *(_BYTE *)(*(_QWORD *)(result + 64) + a5);
  v11 = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(v10 + 4) = v11;
  if (*(_WORD *)(a2 + 16) == 1)
  {
    if ((a4 & 1) == 0)
    {
      v12 = *(unsigned __int16 *)(*(_QWORD *)a2 + 46);
      *(_DWORD *)v10 = 0;
      *(_WORD *)(v8 + 16 * v9 + 8) = *a7;
      if (!a5 && v12 == 1)
      {
        v13 = **(_WORD **)(result + 80);
        *(_WORD *)(v8 + 16 * v9 + 10) = v13;
LABEL_30:
        *a7 += v13;
        return result;
      }
LABEL_10:
      *(_WORD *)(v8 + 16 * v9 + 10) = 0;
      return result;
    }
  }
  else if ((a4 & 1) == 0)
  {
    *(_DWORD *)v10 = 0;
    *(_WORD *)(v8 + 16 * v9 + 8) = *a7;
    goto LABEL_10;
  }
  v14 = *(unsigned __int16 *)(result + 72) - 1;
  *(_DWORD *)v10 = 0;
  v15 = v8 + 16 * v9;
  *(_WORD *)(v15 + 8) = *a7;
  if (v14 != a5)
  {
    v13 = *(_WORD *)(*(_QWORD *)(result + 80) + 2 * a5);
    *(_WORD *)(v15 + 10) = v13;
    goto LABEL_30;
  }
  v16 = *(_BYTE *)(result + 16) & 4;
  v17 = *(_WORD *)(*(_QWORD *)(result + 80) + 2 * a5);
  *(_WORD *)(v15 + 10) = v17;
  *a7 += v17;
  v18 = *(unsigned __int16 *)(*(_QWORD *)(result + 96) + 2 * a5);
  if (!*(_WORD *)(*(_QWORD *)(result + 96) + 2 * a5) || !*(_WORD *)(a3 + 46))
  {
    v28 = (v16 << 14) | 0x20000;
LABEL_33:
    *(_DWORD *)v10 = v28;
    return result;
  }
  if (v16)
  {
    v28 = v18 | 0x30000;
    goto LABEL_33;
  }
  v19 = 10 * v18;
  if (v19 >= v11)
    v20 = v11;
  else
    v20 = v19;
  if (v19 <= v11)
    v21 = 15;
  else
    v21 = v19 - v11;
  if (v11 <= 50)
    v22 = v11;
  else
    v22 = v20;
  if (v11 > 50)
    v19 = v21;
  v23 = v19 / 10;
  v24 = v11 - v22;
  v25 = *(_DWORD *)(a3 + 32);
  v26 = __OFSUB__(v25, v24);
  v27 = v25 - v24;
  if (v27 < 0 == v26)
  {
    *(_DWORD *)(v10 + 4) = v22;
    *(_DWORD *)(a3 + 32) = v27;
  }
  *(_DWORD *)v10 = 0x20000;
  *(_WORD *)(result + 104) = v23;
  return result;
}

uint64_t synth_Wsola__Wsola(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 1088);
  *(_DWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 36) = 0;
  *(_QWORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 44) = 0;
  v3 = *(_DWORD *)(a1 + 1040);
  if (v3 > 15999)
  {
    if (v3 == 16000)
    {
      v4 = 160;
    }
    else
    {
      if (v3 != 22050)
        goto LABEL_8;
      v4 = 220;
    }
    *(_DWORD *)v2 = v4;
    v5 = 4;
    goto LABEL_13;
  }
  if (v3 == 8000)
  {
    v4 = 80;
    goto LABEL_10;
  }
  if (v3 != 11025)
  {
LABEL_8:
    v4 = *(_DWORD *)v2;
    goto LABEL_14;
  }
  v4 = 112;
LABEL_10:
  *(_DWORD *)v2 = v4;
  v5 = 2;
LABEL_13:
  *(_DWORD *)(v2 + 16) = v5;
LABEL_14:
  *(_DWORD *)(v2 + 4) = v4 >> 1;
  *(_DWORD *)(v2 + 8) = 2 * v4;
  *(_DWORD *)(v2 + 12) = 3 * v4;
  *(_QWORD *)(v2 + 64) = v2 + 112;
  *(_QWORD *)(v2 + 72) = v2 + 128;
  *(_QWORD *)(v2 + 48) = v2 + 80;
  *(_QWORD *)(v2 + 56) = v2 + 96;
  Wsola__OverlapWindow__Init(v2, v3);
  v6 = *(_QWORD *)(a1 + 1088);
  v7 = *(_DWORD *)(a1 + 1040);
  if (v7 > 15999)
  {
    if (v7 == 16000)
    {
      v8 = 216;
      *(_DWORD *)(v6 + 184) = 216;
      *(_DWORD *)(v6 + 196) = 188;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x500000020;
      v9 = 6;
      goto LABEL_24;
    }
    if (v7 == 22050)
    {
      v8 = 298;
      *(_DWORD *)(v6 + 184) = 298;
      *(_DWORD *)(v6 + 196) = 260;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x50000002CLL;
      v9 = 8;
      goto LABEL_24;
    }
  }
  else
  {
    if (v7 == 8000)
    {
      v8 = 108;
      *(_DWORD *)(v6 + 184) = 108;
      *(_DWORD *)(v6 + 196) = 94;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x500000010;
      v9 = 2;
      goto LABEL_24;
    }
    if (v7 == 11025)
    {
      v8 = 149;
      *(_DWORD *)(v6 + 184) = 149;
      *(_DWORD *)(v6 + 196) = 130;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x500000016;
      v9 = 4;
LABEL_24:
      *(_DWORD *)(v6 + 220) = v9;
      goto LABEL_25;
    }
  }
  v8 = *(_DWORD *)(v6 + 184);
LABEL_25:
  *(_DWORD *)(v6 + 180) = 1;
  *(_DWORD *)(v6 + 188) = v8 >> 1;
  *(_DWORD *)(v6 + 192) = v8;
  v10 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 200) = v10;
  *(_DWORD *)(v6 + 204) = v10 >> 1;
  *(_DWORD *)(v2 + 224) = 0;
  return 0;
}

void synth_doWsolaSynthesis(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[100];
  _BYTE v24[100];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 1088);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  Psola_GetSynthMode(a1, (_DWORD *)&v22 + 1, v24, v23, &v22, (_DWORD *)&v21 + 1, &v21, &v20);
  Synth_LinkMsgLayers(a1);
  if ((v3 & 0x80000000) == 0 && (synthfx_ExtractFeaturesForSynth_Demi(SHIDWORD(v22) > 0, a1 + 512) & 0x80000000) == 0)
  {
    if ((Synth_Reset(a1) & 0x80000000) == 0
      && (Synth__InitForProcessing(a1) & 0x80000000) == 0
      && (InOut__GetClientBuffer(a1, v4, v5, v6, v7, v8, v9, v10) & 0x80000000) == 0
      && !InOut__IsEndState(a1)
      && *(_DWORD *)(a1 + 1024))
    {
      *(_DWORD *)(v2 + 144) = 0;
      if (SHIDWORD(v22) < 2)
      {
        if (HIDWORD(v22) == 1)
        {
          v17 = v22;
          if ((int)v22 >= 1)
          {
            v17 = 10 * v22;
            LODWORD(v22) = 10 * v22;
          }
          v18 = HIDWORD(v21);
          if (SHIDWORD(v21) >= 1)
          {
            v18 = 10 * HIDWORD(v21);
            HIDWORD(v21) *= 10;
          }
          v19 = v21;
          if ((int)v21 >= 1)
          {
            v19 = 10 * v21;
            LODWORD(v21) = 10 * v21;
          }
          Psola_Process(a1, v17, v18, v19);
        }
        else
        {
          Wsola__Process(a1, HIDWORD(v22), v11, v12, v13, v14, v15, v16);
        }
      }
      else
      {
        kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)a1);
      }
    }
    Synth_UnlinkMsgLayers((_QWORD *)a1);
  }
}

uint64_t Convert2Samples(uint64_t a1, unsigned int a2)
{
  return TenthOfMsToSamples(*(_DWORD *)(a1 + 1040), a2);
}

uint64_t Convert2SamplesX(uint64_t a1, int a2)
{
  return TenthOfMsToSamples(*(_DWORD *)(a1 + 1040), 10 * a2);
}

uint64_t synth_SetWaitPeriod(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 > 9)
    return 2164269071;
  result = 0;
  *(_WORD *)(a1 + 1044) = a2;
  v4 = 1717986919 * (int)(2 * a2 * *(_DWORD *)(a1 + 1040) + 5);
  *(_DWORD *)(a1 + 1048) = (v4 >> 34) + ((unint64_t)v4 >> 63);
  return result;
}

uint64_t synth_GetWaitPeriod(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 1044);
  return 0;
}

uint64_t synth_SetRate(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + 1052) = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1056), a2);
  return 0;
}

uint64_t synth_SetPitch(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + 1054) = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1060), a2);
  return 0;
}

uint64_t synth_SetRateBaseline(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;

  if (a2 <= 0x32)
    v2 = 50;
  else
    v2 = a2;
  if (v2 >= 0x190)
    v3 = 400;
  else
    v3 = v2;
  *(_DWORD *)(a1 + 1056) = v3;
  *(_WORD *)(a1 + 1052) = MapProsodyValue_Scaling(50, 100, 400, v3, 100);
  return 0;
}

uint64_t synth_SetPitchBaseline(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;

  if (a2 >= 0xC8)
    v2 = 200;
  else
    v2 = a2;
  if (v2 <= 0x32)
    v3 = 50;
  else
    v3 = v2;
  *(_DWORD *)(a1 + 1060) = v3;
  *(_WORD *)(a1 + 1054) = MapProsodyValue_Scaling(50, 100, 200, v3, 100);
  return 0;
}

uint64_t CheckForVFStateTriggers(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  char *__s;

  if (*a2 != 25)
    return 0;
  __s = 0;
  v8 = 0;
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", &__s);
  paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v8);
  result = 0;
  if (v8 != 1)
  {
    if ((paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", a2[6]) & 0x80000000) != 0)
    {
      v5 = strlen(__s);
      paramc_ParamRipple(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", __s, (v5 + 1));
    }
    paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
    v6 = a2[6];
    if ((unsigned __int16)v6 <= 9u)
    {
      result = 0;
      *(_WORD *)(a1 + 1044) = v6;
      v7 = 1717986919 * (*(_DWORD *)(a1 + 1040) * 2 * (unsigned __int16)v6 + 5);
      *(_DWORD *)(a1 + 1048) = (v7 >> 34) + ((unint64_t)v7 >> 63);
    }
    else
    {
      return 2164269071;
    }
  }
  return result;
}

uint64_t synth_ProcessMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;

  v8 = *(unsigned __int16 *)(a1 + 1082);
  if (v8 < *(unsigned __int16 *)(a1 + 1080))
  {
    v10 = 32 * v8;
    do
    {
      if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 648);
        v12 = *(_DWORD *)(v11 + v10);
        if (v12 == 16)
        {
          if (*(_DWORD *)(v11 + v10 + 24) != 100)
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45002, "%s%u", a5, a6, a7, a8, "pitch");
        }
        else if (v12 == 13)
        {
          result = synth_ResetParams(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
      result = CheckForVFStateTriggers(a1, (_DWORD *)(*(_QWORD *)(a1 + 648) + v10));
      if ((result & 0x80000000) != 0)
        return result;
      ++v8;
      v10 += 32;
    }
    while (v8 < *(unsigned __int16 *)(a1 + 1080));
  }
  return 0;
}

uint64_t synth_splitGID(uint64_t a1, unsigned int a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v4 = 0;
  v5 = *(_DWORD *)(a1 + 928);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(_DWORD *)(a1 + 928);
  v7 = (v6 - 1);
  v8 = 64;
  while (v7 != v4)
  {
    ++v4;
    v9 = *(_QWORD *)(a1 + 936);
    v10 = *(_DWORD *)(v9 + v8);
    v8 += 40;
    if (v10 > a2)
    {
      v7 = v4 - 1;
LABEL_10:
      v11 = 5 * v7;
      *a3 = v9 + 8 * v11;
      v12 = a2 - *(_DWORD *)(*(_QWORD *)(a1 + 936) + 8 * v11 + 24);
      goto LABEL_12;
    }
  }
  if (v5)
  {
    v9 = *(_QWORD *)(a1 + 936);
    goto LABEL_10;
  }
  v12 = 0;
  *a3 = 0;
LABEL_12:
  *a4 = v12;
  return 0;
}

uint64_t InOut__ResetOutputState(uint64_t a1)
{
  *(_DWORD *)(a1 + 1072) = 0;
  return 0;
}

BOOL InOut__IsEndState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1072) == 2;
}

uint64_t InOut__PutVectorInBuffer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int v8;

  if ((int)a4 < 1)
  {
    a4 = 0;
    v4 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 72);
    v5 = *(_DWORD **)(v4 + 8);
    v6 = a4;
    v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
    do
    {
      v8 = *v7++;
      *v5++ = v8;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v4 + 4) = a4;
  return a4;
}

uint64_t InOut__GetClientBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(_QWORD *)(a1 + 1008);
  if (v8)
  {
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 1000) + 56);
  }
  else
  {
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 984) + 56);
    v8 = *(_QWORD *)(a1 + 992);
  }
  return InOut__PutOutput(a1, v9, v8, *(_DWORD *)(a1 + 1076) == 0, a5, a6, a7, a8);
}

uint64_t InOut__PutOutput(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  _QWORD *v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;

  v11 = *(_DWORD *)(a1 + 1072);
  if (v11 == 1)
  {
    v15 = a4;
    result = synth_ProcessMarkers(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if ((result & 0x80000000) != 0)
      return result;
    v16 = *(unsigned __int16 *)(a1 + 1080);
    v17 = *(unsigned __int16 *)(a1 + 1082);
    v18 = (v16 - v17);
    if (v16 == (_DWORD)v17)
      v19 = 0;
    else
      v19 = *(_QWORD *)(a1 + 648) + 32 * v17;
    *(_WORD *)(a1 + 1082) = v16;
    if (v15)
      v20 = 2;
    else
      v20 = 3;
    *(_BYTE *)(a1 + 1032) = v20;
    v21 = *(_DWORD *)(a1 + 1024);
    v22 = v21 != 0;
    v23 = v21 - 1;
    if (!v22)
      v23 = 0;
    if (v16 != (_DWORD)v17)
    {
      v24 = (unsigned int *)(v19 + 12);
      v25 = v18;
      do
      {
        if (*v24 > v23)
          *v24 = v23;
        v24 += 8;
        --v25;
      }
      while (v25);
    }
    result = a2(a3, v20, a1 + 1016, a1 + 1024, v19, v18);
    if ((result & 0x80000000) == 0 && *(_QWORD *)(a1 + 1016) && v15 && *(_DWORD *)(a1 + 1024))
    {
      *(_DWORD *)(a1 + 1084) += *(_DWORD *)(a1 + 1036);
      *(_DWORD *)(a1 + 1036) = 0;
      *(_DWORD *)(a1 + 1028) = 0;
      return result;
    }
    goto LABEL_27;
  }
  if (v11)
    return 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1036) = 0;
  v12 = (_QWORD *)(a1 + 1016);
  result = a2(a3, *(unsigned __int8 *)(a1 + 1032), a1 + 1016, a1 + 1024, 0, 0);
  if ((result & 0x80000000) != 0 || !*(_DWORD *)(a1 + 1024) || !*v12)
  {
LABEL_27:
    v14 = 2;
    goto LABEL_28;
  }
  v14 = 1;
LABEL_28:
  *(_DWORD *)(a1 + 1072) = v14;
  return result;
}

uint64_t InOut__DecodeToVector(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  __int16 *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;

  v5 = a3;
  if (a3 < 1)
  {
    result = 0;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(a1 + 1088);
  v15 = a3;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 72) + 4);
  if (v8 < 1)
  {
    v9 = 0;
    if (v8)
      goto LABEL_4;
LABEL_7:
    result = Lookup_Decode(a2, &v15, *(_QWORD *)(v7 + 40) + 2 * v9);
    v5 = v15 + v9;
    if (v15 + v9 < 1)
      goto LABEL_10;
    goto LABEL_8;
  }
  purgeBufferToVector(v7, &v15, *(_WORD **)(v7 + 40));
  v9 = v15;
  v15 = v5 - v15;
  if (!*(_DWORD *)(*(_QWORD *)(v7 + 72) + 4))
    goto LABEL_7;
LABEL_4:
  result = 0;
LABEL_8:
  v11 = *(__int16 **)(v7 + 40);
  v12 = *(_DWORD **)(a4 + 8);
  v13 = v5;
  do
  {
    v14 = *v11++;
    *v12++ = v14;
    --v13;
  }
  while (v13);
LABEL_10:
  *(_DWORD *)(a4 + 4) = v5;
  return result;
}

uint64_t purgeBufferToVector(uint64_t result, _DWORD *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  LODWORD(v3) = *a2;
  if ((int)*a2 < 1 || (v4 = *(_QWORD *)(result + 72), v5 = *(_DWORD *)(v4 + 4), v5 < 1))
  {
    LODWORD(v3) = 0;
  }
  else
  {
    if (v3 >= v5)
      v3 = v5;
    else
      v3 = v3;
    v6 = *(int **)(v4 + 8);
    v7 = v3;
    do
    {
      v8 = *v6++;
      *a3++ = v8;
      --v7;
    }
    while (v7);
    if ((int)v3 >= v5)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v9 = 0;
      v10 = *(_QWORD *)(v4 + 8);
      do
      {
        *(_DWORD *)(v10 + 4 * v9) = *(__int16 *)(v10 + 4 * v3 + 4 * v9);
        ++v9;
      }
      while (*(_DWORD *)(v4 + 4) > (int)v3 + (int)v9);
    }
    *(_DWORD *)(v4 + 4) = v9;
  }
  *a2 = v3;
  return result;
}

uint64_t InOut__AudioWriteToClient__No_Subunits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;

  if ((int)a3 < 1)
    return 0;
  v8 = a3;
  v11 = *(_QWORD *)(a1 + 1088);
  do
  {
    v12 = *(_DWORD *)(a1 + 1028);
    v13 = *(_DWORD *)(a1 + 1024);
    if (v12 >= v13)
    {
      result = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
      if ((result & 0x80000000) != 0 || *(_DWORD *)(a1 + 1072) == 2)
        return result;
      v13 = *(_DWORD *)(a1 + 1024);
      v12 = *(_DWORD *)(a1 + 1028);
    }
    v15 = v13 - v12;
    if (v8 >= (int)v15)
      v16 = v15;
    else
      v16 = v8;
    *(_DWORD *)(v11 + 144) += v16;
    result = synthDecodeToClient(a1, a2, v16, a4, a5, a6, a7, a8);
    if ((result & 0x80000000) != 0)
      break;
    v8 -= v16;
  }
  while (*(_DWORD *)(a1 + 1072) != 2 && v8 > 0);
  return result;
}

uint64_t synthDecodeToClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 1088);
  v12 = *(_DWORD *)(a1 + 1028);
  v13 = *(_DWORD *)(a1 + 1024);
  if (v12 < v13)
  {
    result = 0;
    goto LABEL_7;
  }
  result = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0 && *(_DWORD *)(a1 + 1072) != 2)
  {
    v13 = *(_DWORD *)(a1 + 1024);
    v12 = *(_DWORD *)(a1 + 1028);
LABEL_7:
    v15 = v13 - v12;
    if (v15 >= v8)
      v16 = v8;
    else
      v16 = v15;
    v24 = v16;
    v17 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
    if (v17 >= 1)
    {
      purgeBufferToVector(v11, &v24, (_WORD *)(*(_QWORD *)(a1 + 1016) + 2 * v12));
      result = 0;
      v18 = v24;
      v12 = *(_DWORD *)(a1 + 1028) + v24;
      *(_DWORD *)(a1 + 1028) = v12;
      v24 = v16 - v18;
      v17 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
    }
    if (v17)
    {
      do
      {
LABEL_15:
        *(_DWORD *)(a1 + 1036) += v16;
        v8 -= v16;
        if (!v8)
          return result;
        result = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
        if ((result & 0x80000000) != 0 || *(_DWORD *)(a1 + 1072) == 2)
          return result;
        v20 = *(unsigned int *)(a1 + 1028);
        if (*(_DWORD *)(a1 + 1024) - (int)v20 >= v8)
          v16 = v8;
        else
          v16 = *(_DWORD *)(a1 + 1024) - v20;
        v23 = v16;
        v21 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
        if (v21 >= 1)
        {
          purgeBufferToVector(v11, &v23, (_WORD *)(*(_QWORD *)(a1 + 1016) + 2 * v20));
          result = 0;
          v22 = v23;
          LODWORD(v20) = *(_DWORD *)(a1 + 1028) + v23;
          *(_DWORD *)(a1 + 1028) = v20;
          v23 = v16 - v22;
          v21 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
        }
      }
      while (v21);
      result = Lookup_Decode(a2, &v23, *(_QWORD *)(a1 + 1016) + 2 * v20);
      v19 = v23;
    }
    else
    {
      result = Lookup_Decode(a2, &v24, *(_QWORD *)(a1 + 1016) + 2 * v12);
      v19 = v24;
    }
    *(_DWORD *)(a1 + 1028) += v19;
    goto LABEL_15;
  }
  return result;
}

uint64_t InOut__AudioWriteToClientWithMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ClientBuffer;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v46;
  int v47;

  if ((int)a3 < 1)
  {
    return 0;
  }
  else
  {
    v8 = a4;
    v9 = a3;
    v10 = a2;
    v12 = *(_QWORD *)(a1 + 1088);
    if ((a2 & 0x80000000) != 0)
    {
      if (*(_WORD *)(a1 + 618))
      {
        v46 = 0;
        v47 = 0;
        goto LABEL_20;
      }
      v13 = 0;
    }
    else
    {
      v13 = **(_QWORD **)(*(_QWORD *)(v12 + 152) + 56 * a2 + 8);
      if (*(_WORD *)(a1 + 618))
      {
        v47 = 0;
        v46 = v13;
        if (Wsola__findNextEventInSubUnit(v12, a2, &v47)
          && *(_DWORD *)(*(_QWORD *)(v12 + 160)
                       + 16 * (v47 + *(unsigned __int16 *)(*(_QWORD *)(v12 + 152) + 56 * v10 + 44))) < *(_DWORD *)(v12 + 144))
        {
          do
          {
            v14 = *(_QWORD *)(v12 + 152);
            if (v47 >= *(unsigned __int16 *)(v14 + 56 * v10 + 46))
              break;
            v15 = *(_QWORD *)(v12 + 160);
            v16 = v47 + *(unsigned __int16 *)(v14 + 56 * v10 + 44);
            if (*(_DWORD *)(v15 + 16 * v16) >= *(_DWORD *)(v12 + 144))
              break;
            v17 = v15 + 16 * v16;
            v18 = *(unsigned __int16 *)(v17 + 8);
            v19 = *(unsigned __int16 *)(v17 + 10);
            if (v19 + v18 > *(unsigned __int16 *)(a1 + 656))
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45000, "%s%u%s%u%s%u", a5, a6, a7, a8, "index");
              v20 = *(unsigned __int16 *)(a1 + 656);
              if (v18 >= v20)
                v18 = *(unsigned __int16 *)(a1 + 656);
              LOWORD(v19) = v20 - v18;
              v14 = *(_QWORD *)(v12 + 152);
              v15 = *(_QWORD *)(v12 + 160);
            }
            v21 = *(unsigned __int16 *)(v14 + 56 * v10 + 44);
            if ((_WORD)v19)
            {
              v22 = *(_DWORD *)(a1 + 1084);
              v23 = (unsigned __int16)v19;
              v24 = *(_QWORD *)(a1 + 648) + 32 * v18 + 16;
              do
              {
                *(_QWORD *)(v24 - 4) = (*(_DWORD *)(v15 + 16 * (v47 + v21)) - v22);
                v24 += 32;
                --v23;
              }
              while (v23);
            }
            *(_WORD *)(v15 + 16 * (v47 + v21) + 10) = 0;
            *(_WORD *)(a1 + 1080) = v19 + v18;
          }
          while (Wsola__findNextEventInSubUnit(v12, v10, &v47));
        }
        while (1)
        {
LABEL_20:
          v26 = *(_DWORD *)(a1 + 1028);
          v27 = *(_DWORD *)(a1 + 1024);
          if (v26 >= v27)
          {
            ClientBuffer = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
            if ((ClientBuffer & 0x80000000) != 0 || *(_DWORD *)(a1 + 1072) == 2)
              return ClientBuffer;
            v27 = *(_DWORD *)(a1 + 1024);
            v26 = *(_DWORD *)(a1 + 1028);
          }
          v28 = v27 - v26;
          if (v9 >= v28)
            v29 = v28;
          else
            v29 = v9;
          *(_DWORD *)(v12 + 144) += v29;
          if (v9 <= v28)
            v30 = 1;
          else
            v30 = 2;
          if (v8 == 2)
            v8 = v30;
          if ((v10 & 0x80000000) == 0)
          {
            v31 = v47;
            v32 = *(_QWORD *)(v12 + 152);
            if (v47 < *(unsigned __int16 *)(v32 + 56 * v10 + 46))
              break;
          }
LABEL_55:
          ClientBuffer = synthDecodeToClient(a1, v46, v29, a4, a5, a6, a7, a8);
          if ((ClientBuffer & 0x80000000) == 0 && *(_DWORD *)(a1 + 1072) != 2)
          {
            v9 -= v29;
            if ((v10 & 0x80000000) == 0 && v9 >= 1)
              Wsola__findNextEventInSubUnit(v12, v10, &v47);
            if (v9 > 0)
              continue;
          }
          return ClientBuffer;
        }
        v33 = *(_QWORD *)(v12 + 160);
        while (1)
        {
          v34 = *(unsigned __int16 *)(v32 + 56 * v10 + 44);
          if (v8 == 1)
          {
            v35 = v31 + (int)v34;
            v36 = *(unsigned __int16 *)(v33 + 16 * v35 + 10);
            v37 = *(_DWORD *)(v12 + 144);
            if (*(_WORD *)(v33 + 16 * v35 + 10))
            {
              v38 = *(_DWORD *)(v33 + 16 * v35);
              goto LABEL_42;
            }
          }
          else
          {
            v37 = *(_DWORD *)(v12 + 144);
            v35 = v34 + v31;
          }
          v38 = *(_DWORD *)(v33 + 16 * v35);
          if (v38 <= v37)
          {
            v36 = *(unsigned __int16 *)(v33 + 16 * v35 + 10);
            if (*(_WORD *)(v33 + 16 * v35 + 10))
            {
              if (v8 == 1)
              {
LABEL_42:
                if (v38 < v37)
                  v37 = v38;
                *(_DWORD *)(v33 + 16 * v35) = v37;
              }
              v39 = *(unsigned __int16 *)(v33 + 16 * v35 + 8);
              if (v36 + v39 <= *(unsigned __int16 *)(a1 + 656))
                goto LABEL_49;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45000, "%s%u%s%u%s%u", a5, a6, a7, a8, "index");
              v40 = *(unsigned __int16 *)(a1 + 656);
              if (v39 >= v40)
                v39 = *(unsigned __int16 *)(a1 + 656);
              LOWORD(v36) = v40 - v39;
              v32 = *(_QWORD *)(v12 + 152);
              v33 = *(_QWORD *)(v12 + 160);
              if ((_WORD)v36)
              {
LABEL_49:
                v41 = *(unsigned __int16 *)(v32 + 56 * v10 + 44) + (uint64_t)v31;
                v42 = *(_DWORD *)(v33 + 16 * v41) - *(_DWORD *)(a1 + 1084);
                v43 = (unsigned __int16)v36;
                v44 = (_DWORD *)(*(_QWORD *)(a1 + 648) + 32 * v39 + 16);
                do
                {
                  *(v44 - 1) = v42;
                  *v44 = 0;
                  v44 += 8;
                  --v43;
                }
                while (v43);
              }
              else
              {
                LOWORD(v36) = 0;
                v41 = *(unsigned __int16 *)(v32 + 56 * v10 + 44) + (uint64_t)v31;
              }
              *(_WORD *)(v33 + 16 * v41 + 10) = 0;
              *(_WORD *)(a1 + 1080) = v36 + v39;
            }
          }
          if (++v31 >= *(unsigned __int16 *)(v32 + 56 * v10 + 46))
            goto LABEL_55;
        }
      }
    }
    return InOut__AudioWriteToClient__No_Subunits(a1, v13, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t InOut__InsertSilence(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  BOOL v22;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = **(_DWORD **)(v6 + 72);
  v8 = *(_QWORD *)(v6 + 48);
  v9 = *(_DWORD *)v8;
  if (v7 >= *(_DWORD *)v8)
    v10 = *(_DWORD *)v8;
  else
    v10 = **(_DWORD **)(v6 + 72);
  Wsola__zero(*(_QWORD *)(v8 + 8), 0, v10);
  result = 0;
  if (a2 >= v10)
    v16 = v10;
  else
    v16 = a2;
  if (a2 >= 1 && (int)v16 >= 1)
  {
    do
    {
      if (v9 >= v7)
        LODWORD(v17) = v7;
      else
        LODWORD(v17) = v9;
      if ((int)v17 >= a2)
        v17 = a2;
      else
        v17 = v17;
      v18 = *(int **)(*(_QWORD *)(v6 + 48) + 8);
      v19 = *(_QWORD *)(v6 + 72);
      v20 = *(_DWORD **)(v19 + 8);
      do
      {
        v21 = *v18++;
        *v20++ = v21;
        --v17;
      }
      while (v17);
      *(_DWORD *)(v19 + 4) = v16;
      result = InOut__AudioWriteToClientWithMarkers(a1, a3, v16, 0, v11, v12, v13, v14);
      if ((result & 0x80000000) != 0)
        break;
      a2 -= v10;
      v16 = a2 >= v10 ? v10 : a2;
      v22 = *(_DWORD *)(a1 + 1072) == 2 || a2 < 1;
    }
    while (!v22 && (int)v16 > 0);
  }
  return result;
}

uint64_t Psola_OutputDataPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  unsigned int v12;
  unsigned int v13;
  uint64_t ClientBuffer;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 *v26;
  unsigned int v27;
  uint64_t v28;
  __int16 v29;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 1028);
  v13 = *(_DWORD *)(a1 + 1024);
  if (v12 >= v13)
  {
    ClientBuffer = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((ClientBuffer & 0x80000000) != 0)
      return ClientBuffer;
    if (InOut__IsEndState(a1))
    {
LABEL_24:
      InOut__IsEndState(a1);
      return ClientBuffer;
    }
    v13 = *(_DWORD *)(a1 + 1024);
    v12 = *(_DWORD *)(a1 + 1028);
  }
  else
  {
    ClientBuffer = 0;
  }
  LODWORD(v15) = v13 - v12;
  if (v15 >= v8)
    v15 = v8;
  else
    v15 = v15;
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)(a1 + 1016);
    v17 = (__int16 *)(a2 + 2 * v9);
    v18 = v12;
    v19 = v15;
    do
    {
      v20 = *v17++;
      *(_WORD *)(v16 + 2 * v18++) = v20;
      --v19;
    }
    while (v19);
  }
  *(_DWORD *)(a1 + 1028) = v15 + v12;
  *(_DWORD *)(a1 + 1036) += v15;
  v21 = v8 - v15;
  if (!v21)
  {
LABEL_23:
    if ((ClientBuffer & 0x80000000) != 0)
      return ClientBuffer;
    goto LABEL_24;
  }
  v22 = v15 + v9;
  while (1)
  {
    ClientBuffer = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((ClientBuffer & 0x80000000) != 0)
      return ClientBuffer;
    if (InOut__IsEndState(a1))
      goto LABEL_24;
    v23 = *(_DWORD *)(a1 + 1028);
    LODWORD(v24) = *(_DWORD *)(a1 + 1024) - v23;
    if (v24 >= v21)
      v24 = v21;
    else
      v24 = v24;
    if ((int)v24 >= 1)
    {
      v25 = *(_QWORD *)(a1 + 1016);
      v26 = (__int16 *)(a2 + 2 * v22);
      v27 = *(_DWORD *)(a1 + 1028);
      v28 = v24;
      do
      {
        v29 = *v26++;
        *(_WORD *)(v25 + 2 * v27++) = v29;
        --v28;
      }
      while (v28);
    }
    v22 += v24;
    *(_DWORD *)(a1 + 1028) = v24 + v23;
    *(_DWORD *)(a1 + 1036) += v24;
    v21 -= v24;
    if (!v21)
      goto LABEL_23;
  }
}

uint64_t Psola_GetDecodedUnitData_VE(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7, char *a8, unsigned int *a9, _DWORD *a10, _DWORD *a11)
{
  unsigned int v11;
  _QWORD *v17;
  uint64_t UnitData;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v11 = a7;
  v17 = (_QWORD *)*a2;
  if (*a2)
  {
    v32 = 0;
    v33 = 0;
    UnitData = Lookup_GetUnitData(v17, a3, (uint64_t)&v32);
    if ((UnitData & 0x80000000) == 0)
    {
      v19 = Convert2Samples(a1, HIDWORD(v32));
      if (a5 < 0)
        a5 = Convert2Samples(a1, v33);
      if (a6 + a4 + a5 > v11)
      {
        *a9 = 0;
        *a10 = 0;
        v20 = 2164269065;
        *a11 = 0;
        return v20;
      }
      if (v19 >= a4)
        v27 = a4;
      else
        v27 = v19;
      *a9 = v27;
      *a10 = a5;
      *a11 = a6;
      return Lookup_GetDecodedData(*a2, v19 - *a9, *a9 + a6 + *a10, a8);
    }
    return UnitData;
  }
  v21 = a2[1];
  if (!v21)
    return 0;
  LODWORD(v32) = a4;
  v30 = 0;
  v31 = a6 + 10;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *, unsigned int *, char *, uint64_t))(*(_QWORD *)(a1 + 952) + 48))(v21, a3, &v32, &v31, &v30, a8, a7);
  if ((v20 & 0x80000000) == 0)
  {
    v23 = v32;
    *a9 = v32;
    if (a5 < 0)
    {
      v26 = v31;
      *a10 = v30 - (v23 + v31);
    }
    else
    {
      if (a6 + a4 + a5 >= v11)
        v24 = v11;
      else
        v24 = a6 + a4 + a5;
      v25 = v30;
      if (v30 < v24)
      {
        bzero(&a8[2 * v30], 2 * (v24 + ~v30) + 2);
        v25 = v24;
      }
      *a10 = a5;
      v26 = v25 - a5 - v23;
    }
    *a11 = v26;
  }
  return v20;
}

uint64_t Psola_IsAdjacent(uint64_t a1, _QWORD **a2, signed int a3, _QWORD **a4, signed int a5, _DWORD *a6)
{
  BOOL v6;
  int v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  *a6 = 0;
  if (**(_QWORD **)(a1 + 936))
    v6 = a2 == a4;
  else
    v6 = 0;
  if (v6 && a3 >= 1 && a5 >= 1)
  {
    Lookup_GetUnitData(*a2, a3, (uint64_t)&v15);
    Lookup_GetUnitData(*a2, a5, (uint64_t)v14);
    v13 = HIDWORD(v14[0]) - (HIDWORD(v15) + v16);
    if (v13 < 0)
      v13 = HIDWORD(v15) + v16 - HIDWORD(v14[0]);
    if (v13 <= 3)
      *a6 = 1;
  }
  return 0;
}

uint64_t Psola_Process(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t ClientBuffer;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  __int16 *v22;
  uint64_t UnitModif;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  int v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  int v58;
  int v59;
  int v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int16 *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75[4];

  ClientBuffer = 2164269066;
  v9 = *(_QWORD *)(a1 + 1088);
  v74 = 0;
  *(_QWORD *)v75 = 0;
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v10 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4812);
  if (!v10)
    return ClientBuffer;
  v11 = (_DWORD *)v10;
  v12 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 48000);
  if (!v12)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
    v14 = 0;
    goto LABEL_50;
  }
  v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 48);
  v14 = (uint64_t *)v13;
  if (!v13)
    goto LABEL_48;
  *(_QWORD *)(v13 + 8) = 961;
  v15 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1922);
  *v14 = v15;
  if (!v15
    || (v14[3] = 961, v16 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1922), (v14[2] = v16) == 0)
    || (v14[5] = 961, v17 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1922), (v14[4] = v17) == 0))
  {
LABEL_48:
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
    goto LABEL_50;
  }
  v18 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60008);
  if (!v18)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    goto LABEL_50;
  }
  v58 = a2;
  v19 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60008);
  if (!v19)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    goto LABEL_50;
  }
  v56 = a3;
  v20 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60008);
  if (!v20)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    goto LABEL_50;
  }
  v59 = a4;
  v21 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60006);
  if (!v21 || (v68 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60006)) == 0)
  {
    v22 = 0;
    v68 = 0;
    goto LABEL_50;
  }
  v66 = v9;
  v22 = (__int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60006);
  if (!v22)
    goto LABEL_50;
  bzero(v11, 0x12CCuLL);
  *(_QWORD *)v18 = 0;
  *(_DWORD *)v21 = 0;
  v21[2] = 0;
  *(_QWORD *)v19 = 0;
  *(_DWORD *)v68 = 0;
  v68[2] = 0;
  UnitModif = Psola_SetUpCrossFading(a1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 100, 100, v21, v68, &v74, (int *)&v73 + 1);
  if ((UnitModif & 0x80000000) != 0)
  {
LABEL_77:
    ClientBuffer = UnitModif;
    goto LABEL_50;
  }
  v64 = 0;
  v24 = 0;
  v57 = 0;
  v75[0] = 0;
  LODWORD(v25) = *(unsigned __int16 *)(v66 + 168);
  v60 = 1;
  v26 = -1;
  v27 = -1;
  do
  {
    v62 = v26;
    v63 = v27;
    v67 = v24;
    if (v24 >= v25)
    {
      v61 = 0;
      v65 = -1;
    }
    else
    {
      v28 = *(_QWORD *)(v66 + 152) + v64;
      v65 = *(_DWORD *)v28;
      v61 = *(uint64_t **)(v28 + 8);
      Psola_checkMarker(a1, v66, v24);
      v24 = v67;
      LOWORD(v25) = *(_WORD *)(v66 + 168);
    }
    if (v24 < (unsigned __int16)v25 && (Psola_SilUnitLen(a1, *(_QWORD *)(v66 + 152) + v64, v59) & 0x80000000) != 0)
    {
      if (!v61)
      {
        ClientBuffer = 2164269062;
        goto LABEL_50;
      }
      UnitModif = Pmk_Lookup_UnitPeriInfo((_QWORD *)v61[2], v65, (uint64_t)v20);
      if ((UnitModif & 0x80000000) != 0)
        goto LABEL_77;
      Psola_AssignPeriRanges(v20);
      if (!v20[2])
      {
        v42 = v18;
        v43 = v21;
        v35 = v67;
        v26 = v62;
        v27 = v63;
        goto LABEL_41;
      }
      if (*(_DWORD *)(a1 + 1148) && (Psola_IsAdjacent(a1, (_QWORD **)v57, v63, (_QWORD **)v61, v65, &v70), v70))
      {
        Psola_SyncOverlappingPeriods(v19, v20);
        v41 = 1;
      }
      else
      {
        v41 = 100;
      }
      v55 = v41;
      UnitModif = Psola_CalculateModificationFactors(a1, *(_QWORD *)(v66 + 152) + v64, v58, v56, v59, (int *)&v72, (int *)&v71 + 1, &v71);
      if ((UnitModif & 0x80000000) != 0)
        goto LABEL_77;
      UnitModif = Psola_GetUnitModif (a1, v65, v20, v72, SHIDWORD(v71), v71, v22, v44);
      v29 = v55;
      if ((UnitModif & 0x80000000) != 0)
        goto LABEL_77;
    }
    else
    {
      *(_QWORD *)v20 = 0;
      *(_DWORD *)v22 = 0;
      v29 = 100;
      v22[2] = 0;
    }
    UnitModif = Psola_SetUpCrossFading(a1, v63, v65, v29, v29, v68, (unsigned __int16 *)v22, &v73, (int *)&v72 + 1);
    if ((UnitModif & 0x80000000) != 0)
      goto LABEL_77;
    v35 = v67;
    if (v67 && (v62 & 0x80000000) == 0)
    {
      v36 = Psola_SilUnitLen(a1, *(_QWORD *)(v66 + 152) + 56 * v62, v59);
      if (v36 < 0 && *v19 == 0)
        v40 = 0;
      else
        v40 = v36;
      if (v40 < 0)
      {
        UnitModif = Psola_LoadUnitData(a1, v57, v63, v19, v12, &v75[1], (_DWORD *)&v74 + 1);
        if ((UnitModif & 0x80000000) != 0)
          goto LABEL_77;
        UnitModif = Psola_DoPeriSynth(a1, v63, v62, v11, (uint64_t)v14, &v69, (uint64_t)v12, HIDWORD(v74), (uint64_t)v19, v68, v74, SHIDWORD(v73), v73, SHIDWORD(v72), v75);
        v35 = v67;
        if ((UnitModif & 0x80000000) != 0)
          goto LABEL_77;
      }
      else
      {
        Psola_SynthSilence(a1, v63, v62, v11, v40, v75, v37, v38);
        v35 = v67;
      }
    }
    v60 = 3 - v60;
    v26 = v35;
    v42 = v19;
    v19 = v20;
    v43 = v68;
    v68 = (unsigned __int16 *)v22;
    v27 = v65;
    v57 = v61;
    HIDWORD(v73) = HIDWORD(v72);
    LODWORD(v74) = v73;
    v22 = (__int16 *)v21;
    v20 = v18;
    v21 = v43;
    v18 = v42;
LABEL_41:
    v24 = v35 + 1;
    v25 = *(unsigned __int16 *)(v66 + 168);
    v64 += 56;
  }
  while (v35 < v25);
  v21 = v43;
  v18 = v42;
  if (*(_BYTE *)(a1 + 1144))
  {
    v31 = (*(_DWORD *)(a1 + 1096) + *(_DWORD *)(a1 + 1048));
    if ((int)v31 >= 1)
      Psola_SynthSilence(a1, 0xFFFFFFFFLL, v25 - 1, v11, v31, v75, v33, v34);
  }
  Psola_FlushOlaBufPart(a1, v11, v11[2] + *v11, v30, v31, v32, v33, v34);
  *(_DWORD *)(a1 + 1076) = 1;
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a1 + 1028);
  ++*(_DWORD *)(v66 + 224);
  ClientBuffer = InOut__GetClientBuffer(a1, v48, v49, v50, v51, v52, v53, v54);
  if ((ClientBuffer & 0x80000000) == 0)
    InOut__IsEndState(a1);
LABEL_50:
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v11);
  if (v12)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v12);
  if (v14)
  {
    if (*v14)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *v14);
    v45 = v14[2];
    if (v45)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v45);
    v46 = v14[4];
    if (v46)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v46);
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v14);
  }
  if (v18)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v18);
  if (v19)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
  if (v20)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v20);
  if (v21)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v21);
  if (v68)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v68);
  if (v22)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v22);
  return ClientBuffer;
}

uint64_t Psola_SetUpCrossFading(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int16 *a6, unsigned __int16 *a7, _DWORD *a8, int *a9)
{
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned __int16 *v38;

  v9 = *(_DWORD *)(a1 + 1040);
  v10 = v9 * a4;
  v11 = 274877907 * v9 * a4;
  v12 = (unint64_t)v11 >> 63;
  v13 = v11 >> 38;
  v14 = v9 * a5 / 1000;
  v15 = a6[1] + *a6;
  *a9 = 0;
  v16 = a6[2];
  if (a6[2])
  {
    v17 = 0;
    v18 = 0;
    while (v18 < (unint64_t)a7[1] >> 1 && v17 < v14)
    {
      v17 += (__int16)a7[v18 + 20003 + *a7];
      a6[v15 + 20003 + v18] = a7[v18 + 20003 + *a7];
      *a9 = v17;
      if (v16 == ++v18)
        goto LABEL_9;
    }
    LOWORD(v16) = v18;
  }
LABEL_9:
  v20 = v13 + v12;
  a6[2] = v16;
  LODWORD(v16) = *a7;
  if (*a7)
  {
    v21 = 0;
    if (a6[1] && v10 >= 1000)
    {
      v22 = 0;
      v21 = 0;
      v23 = (uint64_t)&a6[v15 + 20002];
      v24 = 1;
      do
      {
        v25 = v22;
        v26 = *(__int16 *)(v23 + 2 * v22);
        a7[v25 + 20002 + v16] = v26;
        v21 += v26;
        v16 = *a7;
        if (v24 >= v16)
          break;
        v22 = v25 - 1;
        v27 = v24++ >= ((unint64_t)a6[1] + 1) >> 1;
      }
      while (!v27 && v21 < v20);
      v29 = 1 - v25;
    }
    else
    {
      v29 = 0;
    }
    v30 = v16;
  }
  else
  {
    v21 = 0;
    v29 = 0;
    v30 = 0;
  }
  v31 = v30 - v29;
  if ((int)(v30 - v29) >= 1)
  {
    v32 = a7[1];
    v33 = a7[2];
    if (v31 < v30 + v32 + v33)
    {
      v34 = 0;
      v35 = -v29;
      v36 = &a7[(unint64_t)v30 - v29];
      v37 = v32 + v33 - v35;
      do
      {
        v38 = &a7[v34];
        v38[3] = v36[3];
        v38[10003] = v36[10003];
        v38[20003] = v36[20003];
        ++v34;
        ++v36;
        --v37;
      }
      while (v37);
      LOWORD(v16) = *a7;
    }
    *a7 = v16 - v31;
  }
  if (v21 < v20)
    v20 = v21;
  *a8 = v20;
  if (*a9 < v14)
    v14 = *a9;
  *a9 = v14;
  if ((*a8 + v14 < 0) ^ __OFADD__(*a8, v14) | (*a8 + v14 == 0) && a6[1] && a7[1])
    return 2164269071;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"crossfading lengths between unit %d and %d: %d+%d\n", (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a2);
  return 0;
}

uint64_t Psola_checkMarker(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  unsigned __int16 v15;
  unsigned __int16 v16;

  v3 = *(_QWORD *)(a2 + 160);
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 152) + 56 * a3 + 44);
  if (*(_WORD *)(v3 + 16 * v4 + 10))
  {
    v5 = result;
    if (!a3 || (a3 & 1) != 0)
    {
      v6 = *(unsigned __int16 *)(v3 + 16 * v4 + 8);
      v7 = v6 + *(unsigned __int16 *)(v3 + 16 * v4 + 10);
      v8 = 32 * v6;
      while (2)
      {
        v9 = *(_QWORD *)(v5 + 648);
        v10 = *(_DWORD *)(v9 + v8);
        switch(v10)
        {
          case 16:
            v11 = *(_DWORD *)(v9 + v8 + 24);
            v12 = v11;
            *(_WORD *)(v5 + 1054) = v11;
            v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 40);
            v14 = "pitch";
            goto LABEL_13;
          case 17:
            *(_WORD *)(v5 + 1064) = *(_DWORD *)(v9 + v8 + 24);
            goto LABEL_14;
          case 18:
            v15 = *(_DWORD *)(v9 + v8 + 24);
            v12 = v15;
            *(_WORD *)(v5 + 1052) = v15;
            v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 40);
            v14 = "rate";
            goto LABEL_13;
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
            goto LABEL_14;
          case 25:
            v16 = *(_DWORD *)(v9 + v8 + 24);
            v12 = v16;
            *(_WORD *)(v5 + 1044) = v16;
            v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 40);
            v14 = "waitfactor";
LABEL_13:
            result = paramc_ParamSetUInt(v13, (uint64_t)v14, v12);
            if ((result & 0x80000000) == 0)
              goto LABEL_14;
            return result;
          default:
            if (v10 == 13)
            {
              result = synth_ResetParams(v5);
              if ((result & 0x80000000) != 0)
                return result;
            }
LABEL_14:
            ++v6;
            v8 += 32;
            if (v6 >= v7)
              return result;
            continue;
        }
      }
    }
  }
  return result;
}

uint64_t Psola_SilUnitLen(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a2 + 40);
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    if (a3 < 0)
      v4 = 500 - *(_DWORD *)(a1 + 1040) * a3;
    else
      v4 = v3 * a3 + 500;
    v3 = v4 / 1000;
  }
  return Convert2Samples(a1, 10 * v3);
}

unsigned __int16 *Psola_AssignPeriRanges(unsigned __int16 *result)
{
  unsigned __int16 v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  __int16 *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v1 = result[3];
  v2 = (unsigned __int16)(result[2] + result[1] + v1);
  if (result[2] + result[1] + v1)
  {
    v3 = 0;
    v4 = result + 10004;
    result[1] = 0;
    v5 = (__int16 *)(result + 4);
    while (*v5 < 0)
    {
      result[1] = ++v3;
      ++v5;
      if (v2 == v3)
      {
        result[2] = 0;
LABEL_17:
        result[3] = v2 - v3;
        return result;
      }
    }
    result[2] = 0;
    if (v3 >= v2)
      goto LABEL_17;
    v6 = 0;
    v7 = v2 - v3;
    v8 = *result;
    do
    {
      v9 = *v5++;
      if (v9 >= v8)
        break;
      result[2] = ++v6;
      --v7;
    }
    while (v7);
    result[3] = v2 - (v3 + v6);
    if (!(_WORD)v3 && v6)
    {
      result[1] = 1;
      if (v6 == 1)
      {
        v10 = (v2 - 1);
        if ((_DWORD)v2 != 1)
        {
          v11 = v10 - 1;
          v12 = &result[v10];
          do
          {
            v13 = &result[v2];
            v13[4] = v12[4];
            v13[10004] = v12[10004];
            v13[20004] = v12[20004];
            LODWORD(v2) = v2 - 1;
            --v12;
          }
          while ((_DWORD)v11--);
        }
        v15 = (unsigned __int16)*v4;
        v16 = v15 + (v15 >> 15);
        result[10005] = (__int16)v16 >> 1;
        v17 = v15 - ((__int16)v16 >> 1);
        *v4 = v17;
        result[5] = result[4] + v17;
        *((_DWORD *)result + 10002) = 0;
      }
      else
      {
        result[2] = v6 - 1;
      }
    }
  }
  return result;
}

unsigned __int16 *Psola_SyncOverlappingPeriods(unsigned __int16 *result, _WORD *a2)
{
  unsigned __int16 v2;
  __int16 *v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  _WORD *v7;
  __int16 v8;
  __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  _WORD *v17;
  __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  int v35;
  BOOL v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;

  if (result[1] && a2[1])
  {
    v2 = result[1] + result[2] - 1;
    v3 = a2 + 3;
    v4 = (unsigned __int16)a2[2] + (unsigned __int16)a2[1] + (unsigned __int16)a2[3];
    v5 = (__int16)result[v2 + 10004] + (__int16)result[v2 + 4] - *result;
    v6 = v4 - 1;
    v7 = &a2[(v4 - 1)];
    v8 = v7[4];
    v9 = v7[10004];
    if (v4 <= 1)
    {
      v14 = 0;
      a2[4] = v5;
      v18 = a2 + 4;
    }
    else
    {
      v10 = 0;
      v11 = (unsigned __int16)(result[1] + result[2] - 1);
      if ((__int16)a2[5] - v5 >= 0)
        v12 = (__int16)a2[5] - v5;
      else
        v12 = v5 - (__int16)a2[5];
      do
      {
        if ((__int16)a2[++v10 + 5] - v5 >= 0)
          v13 = (__int16)a2[v10 + 5] - v5;
        else
          v13 = v5 - (__int16)a2[v10 + 5];
        v14 = v10;
        v15 = v10 + 1 >= v4 || v13 >= v12;
        v12 = v13;
      }
      while (!v15);
      v16 = v10;
      v17 = &a2[v10];
      v17[4] = v5;
      v18 = v17 + 4;
      if ((_DWORD)v16)
      {
        v19 = result + 10004;
        do
        {
          v20 = v19[v11];
          a2[v16 + 10003] = v20;
          v5 -= v20;
          v3[v16] = v5;
          if (v16 < 2)
            break;
          --v16;
        }
        while (v11-- > 0);
      }
      else
      {
        v14 = 0;
      }
    }
    v22 = v14 + 1;
    if (v14 + 1 >= v4)
    {
      v24 = 0;
      v6 = v14;
    }
    else
    {
      v23 = *v18 + 32;
      if (v23 <= (__int16)a2[v22 + 4])
      {
        v24 = 0;
        v6 = v14;
      }
      else
      {
        v24 = 0;
        v25 = v14;
        while (1)
        {
          ++v24;
          if (v25 + 2 >= v4)
            break;
          v26 = (__int16)a2[v25++ + 6];
          if (v23 <= v26)
          {
            v6 = v25;
            break;
          }
        }
      }
      v22 = v6 + 1;
    }
    if (v22 < v4)
    {
      v27 = v6;
      v28 = v14;
      v29 = a2[v14 + 4];
      v30 = v27 + 5;
      do
      {
        v31 = &a2[v28];
        v32 = a2[v30];
        a2[v28++ + 10004] = v32 - v29;
        v31[5] = v32;
        v33 = v30 - 3;
        ++v30;
        v29 = v32;
      }
      while (v33 < v4);
      v14 = v28;
    }
    v34 = v9 + v8;
    if (v14 >= 1)
    {
      v35 = v24 + v14;
      while (v34 - 32 < (__int16)a2[v14 + 4])
      {
        ++v24;
        v36 = __OFSUB__(v14--, 1);
        if ((v14 < 0) ^ v36 | (v14 == 0))
        {
          v14 = 0;
          goto LABEL_44;
        }
      }
    }
    v35 = v24;
LABEL_44:
    a2[v14 + 10004] = v34 - a2[v14 + 4];
    if ((_WORD)v35)
    {
      v37 = *v3;
      while (v37)
      {
        --v35;
        *v3 = --v37;
        if (!(_WORD)v35)
          return Psola_AssignPeriRanges(a2);
      }
      v38 = a2[2];
      while (v38)
      {
        --v35;
        a2[2] = --v38;
        if (!(_WORD)v35)
          return Psola_AssignPeriRanges(a2);
      }
      v39 = a2[1];
      do
      {
        if (!v39)
          break;
        --v35;
        a2[1] = --v39;
      }
      while ((_WORD)v35);
    }
    return Psola_AssignPeriRanges(a2);
  }
  return result;
}

uint64_t Psola_CalculateModificationFactors(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int *a6, int *a7, _DWORD *a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  if (a3 < 1)
  {
    if (!a3)
      a3 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    a3 = *(_DWORD *)(a2 + 16) * a3 / 1000;
  }
  *a6 = a3;
  if (a4 < 1)
  {
    if (!a4)
      a4 = *(_DWORD *)(a2 + 20);
  }
  else
  {
    a4 = *(_DWORD *)(a2 + 20) * a4 / 1000;
  }
  *a7 = a4;
  *a8 = a5;
  v8 = *(unsigned __int16 *)(a1 + 1052);
  if (v8 == 100)
  {
    v9 = 1000;
  }
  else
  {
    if (v8 - 50 > 0x15E)
      return 2164269071;
    v9 = ((v8 >> 1) + 100000) / v8;
  }
  v10 = 10 * *(unsigned __int16 *)(a1 + 1054);
  if (v10 && v10 != 1000)
  {
    v11 = 274877907 * (*a6 * v10 + 500);
    *a6 = (v11 >> 38) + ((unint64_t)v11 >> 63);
    v12 = 274877907 * (*a7 * v10 + 500);
    *a7 = (v12 >> 38) + ((unint64_t)v12 >> 63);
  }
  result = 0;
  if (v9 != 1000)
  {
    v14 = 274877907 * (int)(*a8 * v9 + 500);
    *a8 = (v14 >> 38) + ((unint64_t)v14 >> 63);
  }
  return result;
}

uint64_t Psola_GetUnitModif (uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5, uint64_t a6, __int16 *a7, uint64_t a8)
{
  __int16 *v8;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t i;
  uint64_t v23;
  unsigned __int16 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned __int16 v53;
  BOOL v55;
  uint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;

  v8 = a7;
  v10 = a3[1];
  v11 = a3[2] + v10;
  v12 = v11 - 1;
  if (v10 <= v12)
  {
    v13 = 0;
    v14 = a3[1];
    do
      v13 += (__int16)a3[(unsigned __int16)v14++ + 10004];
    while ((unsigned __int16)v14 <= v12);
  }
  else
  {
    v13 = 0;
  }
  v15 = a6;
  if ((a6 & 0x80000000) != 0)
  {
    v16 = *(_DWORD *)(a1 + 1040);
    if (v16 >= 0)
      v17 = *(_DWORD *)(a1 + 1040);
    else
      v17 = v16 + 1;
    v18 = (1000 * v13 + (v17 >> 1)) / v16;
    if (v18 >= 0)
      v19 = (1000 * v13 + (v17 >> 1)) / v16;
    else
      v19 = v18 + 1;
    v15 = (-1000 * (int)a6 + (v19 >> 1)) / v18;
  }
  v20 = v13;
  if (v15)
    v20 = (v15 * v13 + 500) / 1000;
  result = 2164269074;
  if (a4 >= 1 && a5 < 1 || a4 <= 0 && a5 > 0)
    return result;
  *a7 = 0;
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; *a7 = i)
    {
      a7[i + 3] = i;
      a7[i + 10003] = 0;
      a7[i + 20003] = a3[i + 10004];
      ++i;
    }
    LODWORD(v23) = v10;
  }
  else
  {
    LODWORD(v23) = 0;
  }
  a7[1] = 0;
  if (v10 <= v12)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v61 = a5 - a4;
    if (v20 >= 0)
      v39 = v20;
    else
      v39 = v20 + 1;
    v60 = v39 >> 1;
    if (v13 >= 0)
      v40 = v13;
    else
      v40 = v13 + 1;
    v59 = v40 >> 1;
    v58 = a2;
    v57 = v11;
    while (1)
    {
      a7 = (__int16 *)&a3[(unsigned __int16)v10 + 10004];
      v41 = (unsigned __int16)*a7;
      if (v15)
        v38 += (int)(v15 * v41 + 500) / 1000;
      else
        v38 = v37 + v41;
      v42 = v23 <= 0x2710 ? 10000 : v23;
      v43 = (unsigned __int16)v10 == v12 && v37 == 0;
      a8 = v43;
      if (v37 + (v41 >> 1) <= v38 || (_DWORD)a8 != 0)
        break;
LABEL_95:
      v36 += v41;
      LOWORD(v10) = v10 + 1;
      if ((unsigned __int16)v10 > v12)
        goto LABEL_25;
    }
    LODWORD(a8) = 0;
    v45 = &a3[(unsigned __int16)v10 + 20004];
    v46 = -(uint64_t)v23;
    v47 = (unsigned __int16 *)&v8[v23];
    v48 = -v42;
    while (1)
    {
      v49 = a4;
      if (v15)
      {
        if (!v20)
          goto LABEL_70;
        v50 = (int)(v60 + v37 * v61) / v20;
      }
      else
      {
        if (!v13)
          goto LABEL_70;
        v50 = (v59 + v36 * v61) / v13;
      }
      v49 = v50 + a4;
LABEL_70:
      v51 = v41;
      if (*v45 == 1)
      {
        if (v49 < 1)
        {
          v51 = v41;
          if ((v49 & 0x80000000) == 0)
            goto LABEL_75;
          v52 = *(_DWORD *)(a1 + 1040);
          v49 = -v49;
        }
        else
        {
          v52 = 1000 * *a7;
        }
        v51 = (int)(v52 + (v49 >> 1)) / v49;
      }
LABEL_75:
      if (v48 == v46)
        return 2164269065;
      if (v51 <= 0x10)
        v51 = 16;
      if (v51 >= 0x3C1)
        v51 = 961;
      v47[3] = v10;
      v47[20003] = v51;
      if (*v45)
        v53 = 0;
      else
        v53 = a8;
      a8 = (1 - a8);
      v37 += v51;
      if (!v15)
        v38 = v37;
      v47[10003] = v53;
      v8[1] = ++v35;
      v55 = (unsigned __int16)v10 == v12 && v37 == 0;
      --v46;
      ++v47;
      if (v37 + (v41 >> 1) > v38 && !v55)
      {
        v23 = -v46;
        a2 = v58;
        v11 = v57;
        goto LABEL_95;
      }
    }
  }
LABEL_25:
  v24 = a3[2] + a3[1] + a3[3];
  v8[2] = 0;
  if (v11 >= v24)
  {
LABEL_32:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"modified unit %d: f0Beg=%d, f0End=%d, dur=%d\n", a6, (uint64_t)a7, a8, a2);
    if (v8[1] + *v8 + v8[2])
    {
      v33 = 0;
      v34 = (unsigned __int16)(v8[1] + *v8 + v8[2]);
      do
      {
        if (v33 == (unsigned __int16)*v8)
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 100, 0, (uint64_t)"  --- start of nominal part\n", v30, v31, v32, v56);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 100, 0, (uint64_t)"  peri num: %d, type: %d, orig len: %d, new len: %d, rev: %d\n", v30, v31, v32, (unsigned __int16)v8[v33 + 3]);
        if ((_DWORD)v33 == (unsigned __int16)*v8 + (unsigned __int16)v8[1] - 1)
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 100, 0, (uint64_t)"  --- end of nominal part\n", v30, v31, v32, v56);
        ++v33;
      }
      while (v34 != v33);
    }
    return 0;
  }
  else
  {
    v25 = 0;
    v26 = v11;
    if (v23 <= 0x2710)
      v27 = 10000;
    else
      v27 = v23;
    v28 = v27 - v23;
    v29 = (unsigned __int16 *)&v8[v23];
    while (v28)
    {
      v29[3] = v26;
      v29[10003] = 0;
      v29[20003] = a3[v26 + 10004];
      v8[2] = ++v25;
      ++v26;
      --v28;
      ++v29;
      if (v26 >= v24)
        goto LABEL_32;
    }
    return 2164269065;
  }
}

void Psola_SynthSilence(uint64_t a1, uint64_t a2, int a3, int *a4, int a5, int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[2];

  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"PMK: %d 0 %d\n", (uint64_t)a6, a7, a8, a2);
  v17 = *(unsigned __int16 *)(a1 + 1052);
  if (v17 == 100)
  {
    v18 = 1000;
  }
  else if (v17 - 50 > 0x15E)
  {
    v18 = 0;
  }
  else
  {
    v18 = ((v17 >> 1) + 100000) / v17;
  }
  v33 = (int)(v18 * a5 + 500) / 1000;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"synthesizing silence for unit %d, len=%d\n", v14, v15, v16, a2);
  Psola_FlushOlaBufPart(a1, a4, *a6, v19, v20, v21, v22, v23);
  Psola_DepositMarkers(a1, a3, v24, v25, v26, v27, v28, v29);
  v32 = (*a6 + v33);
  *a6 = v32;
  if (*a4 <= (int)v32)
    Psola_AddToOlaBufAux(a1, a4, (uint64_t)v34, 0, 0, v32, v30, v31);
}

uint64_t Psola_LoadUnitData(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int16 *a4, char *a5, int *a6, _DWORD *a7)
{
  unsigned __int16 *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  int v18;
  int v19;
  unsigned int v20;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  *a6 = 0;
  *a7 = 0;
  v10 = a4 + 4;
  v11 = (__int16)a4[4];
  if (v11 <= 0)
    v12 = -v11;
  else
    v12 = 0;
  v13 = (__int16)a4[(unsigned __int16)(a4[1] + a4[2] + a4[3] - 1) + 10004]
      + (__int16)v10[(unsigned __int16)(a4[1] + a4[2] + a4[3] - 1)];
  result = Psola_GetDecodedUnitData_VE(a1, a2, a3, v12, *a4, (v13 - *a4) & ~((v13 - *a4) >> 31), 24000, a5, &v20, &v18, &v19);
  if ((result & 0x80000000) == 0)
  {
    v15 = v20;
    *a7 = v20;
    v16 = v18 + v15 + v19;
    *a6 = v16;
    if (*a7 + v13 > v16 || *a7 + (__int16)a4[4] < 0)
      return 2164269065;
    else
      return result;
  }
  return result;
}

uint64_t Psola_DoPeriSynth(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 *a10, int a11, int a12, int a13, int a14, int *a15)
{
  int v15;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  __int16 *v32;
  int v33;
  int v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t result;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 *v57;
  _WORD *v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 *v62;
  _WORD *v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v97;
  int v98;
  unsigned int v99;
  int v101;
  uint64_t v103;

  v15 = a8;
  v18 = a10;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"synthesizing unit %d\n", (uint64_t)a6, a7, a8, a2);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"PMK: %d", v19, v20, v21, a2);
  if (a10[1])
  {
    v25 = *a10;
    do
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)" %d %d", v22, v23, v24, *(__int16 *)(a9 + 2 * (__int16)a10[(unsigned __int16)v25++ + 3] + 40008));
    while (a10[1] + *a10 > (unsigned __int16)v25);
  }
  v26 = a15;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"\n", v22, v23, v24, v86);
  v27 = *a10;
  v28 = a10[1];
  v29 = v28 + v27;
  v30 = 0;
  if (*a10)
  {
    v31 = *a10;
    v32 = (__int16 *)(a10 + 20003);
    do
    {
      v33 = *v32++;
      v30 += v33;
      --v31;
    }
    while (v31);
  }
  v103 = a1;
  v34 = 0;
  if (a10[1])
  {
    v35 = &a10[*a10 + 20003];
    do
    {
      v36 = (__int16)*v35++;
      v34 += v36;
      LODWORD(v28) = v28 - 1;
    }
    while ((_DWORD)v28);
  }
  v37 = v29 + a10[2];
  v38 = a13;
  v39 = *a15;
  v98 = a12 + a11;
  if ((v98 < 0) ^ __OFADD__(a12, a11) | (v98 == 0))
  {
    v40 = a10[v27 + 20003];
    v98 = (int)((v40 + (v40 >> 15)) << 16) >> 17;
    v94 = *a15;
  }
  else
  {
    v94 = v39 - a11;
  }
  v97 = a14 + a13;
  if ((a14 + a13 < 0) ^ __OFADD__(a14, a13) | (a14 + a13 == 0))
  {
    v41 = a10[v29 + 20002];
    v38 = (__int16)(v41 + (v41 >> 15)) >> 1;
    v97 = v38;
  }
  v42 = v39 + v34;
  if ((_DWORD)v37)
  {
    v43 = 0;
    v44 = 0;
    v93 = v42 - v38;
    v45 = (v39 - v30);
    v89 = (uint64_t *)(a5 + 16);
    v90 = v37;
    v88 = (v37 - 1);
    v92 = (v37 + 1);
    v91 = v15;
    while (1)
    {
      v101 = v44;
      if (v43)
      {
        if (v43 == v90)
        {
          v46 = a9 + 2 * (__int16)a10[v88 + 3];
          LODWORD(v47) = *(__int16 *)(v46 + 20008);
          result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(v46 + 8) + v15, v47, (uint64_t *)a5);
          if ((result & 0x80000000) != 0)
            return result;
          LODWORD(v49) = 0;
          v50 = 0;
          v51 = v88;
        }
        else
        {
          v53 = &v18[v43];
          v54 = (__int16)v53[3];
          v55 = v54 - 1;
          if (v53[10003])
          {
            v47 = *(__int16 *)(a9 + 20008 + 2 * v54);
            v49 = *(__int16 *)(a9 + 20008 + 2 * v55);
            v56 = *(__int16 *)(a9 + 2 * v54 + 8);
            result = Psola_ReallocIfNeeded(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), (uint64_t *)a5, v47);
            if ((int)v47 >= 1 && (result & 0x80000000) == 0)
            {
              v57 = (__int16 *)(a7 + 2 * (v56 + v15));
              v58 = (_WORD *)(*(_QWORD *)a5 + 2 * v47 - 2);
              v59 = v47;
              do
              {
                v60 = *v57++;
                *v58-- = v60;
                --v59;
              }
              while (v59);
            }
            if ((result & 0x80000000) != 0)
              return result;
            v61 = *(__int16 *)(a9 + 2 * v55 + 8);
            result = Psola_ReallocIfNeeded(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), v89, v49);
            if ((int)v49 >= 1 && (result & 0x80000000) == 0)
            {
              v62 = (__int16 *)(a7 + 2 * (v61 + v15));
              v63 = (_WORD *)(*v89 + 2 * v49 - 2);
              v64 = v49;
              do
              {
                v65 = *v62++;
                *v63-- = v65;
                --v64;
              }
              while (v64);
            }
          }
          else
          {
            LODWORD(v47) = *(__int16 *)(a9 + 20008 + 2 * v55);
            LODWORD(v49) = *(__int16 *)(a9 + 20008 + 2 * v54);
            result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(a9 + 2 * v55 + 8) + v15, v47, (uint64_t *)a5);
            if ((result & 0x80000000) != 0)
              return result;
            result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(a9 + 2 * v54 + 8) + v15, v49, v89);
            v45 = v45;
          }
          if ((result & 0x80000000) != 0)
            return result;
          v51 = v43 - 1;
          v50 = (__int16)v18[v43 + 20003];
        }
        v66 = (__int16)v18[v51 + 20003];
        if ((int)v47 <= v66)
        {
          v99 = 0;
        }
        else
        {
          memmove(*(void **)a5, (const void *)(*(_QWORD *)a5 + 2 * ((int)v47 - v66)), 2 * v66);
          v99 = 0;
          LODWORD(v47) = v66;
        }
      }
      else
      {
        v52 = a9 + 2 * (__int16)v18[3];
        LODWORD(v49) = *(__int16 *)(v52 + 20008);
        v99 = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(v52 + 8) + v15, v49, v89);
        if ((v99 & 0x80000000) != 0)
          return v99;
        LODWORD(v47) = 0;
        v50 = (__int16)a10[20003];
      }
      if ((int)v49 >= v50)
        LODWORD(v49) = v50;
      Psola_ApplyHanning(*(__int16 **)(a5 + 32), a6, *(__int16 **)a5, v47, 1);
      Psola_ApplyHanning(*(__int16 **)(a5 + 32), a6, *(__int16 **)(a5 + 16), v49, 0);
      v67 = (v45 - v47);
      v68 = v45;
      Psola_ApplyFadingPart(*(__int16 **)a5, v47, v45 - v47, v94, v98, 1);
      Psola_ApplyFadingPart(*(__int16 **)(a5 + 16), v49, v45, v94, v98, 1);
      Psola_ApplyFadingPart(*(__int16 **)a5, v47, v67, v93, v97, 0);
      Psola_ApplyFadingPart(*(__int16 **)(a5 + 16), v49, v45, v93, v97, 0);
      Psola_AddToOlaBuf(v103, a4, *(_QWORD *)a5, v47, v67, v69, v70, v71);
      Psola_AddToOlaBuf(v103, a4, *(_QWORD *)(a5 + 16), v49, v45, v72, v73, v74);
      v45 = (v50 + v45);
      if (v101)
      {
        v15 = v91;
        v18 = a10;
        v44 = 1;
      }
      else
      {
        if ((int)v45 >= *a15 + 961 || v43 == v90)
        {
          Psola_FlushOlaBufPart(v103, a4, *a15, v75, v76, v77, v78, v79);
          v45 = (v50 + v68);
          Psola_DepositMarkers(v103, a3, v80, v81, v82, v83, v84, v85);
          v99 = 0;
          v44 = 1;
        }
        else
        {
          v44 = 0;
        }
        v15 = v91;
        v18 = a10;
      }
      if (++v43 == v92)
      {
        v26 = a15;
        v42 = *a15 + v34;
        result = v99;
        goto LABEL_54;
      }
    }
  }
  result = 0;
LABEL_54:
  *v26 = v42;
  return result;
}

void Psola_FlushOlaBufPart(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  _OWORD v21[12];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3 - *a2;
  if (v8 >= 1)
  {
    v11 = a2[1];
    v12 = a2[2];
    if (v8 >= v12)
      v13 = a2[2];
    else
      v13 = v8;
    if (v13 >= 2400 - (int)v11)
      v14 = (2400 - v11);
    else
      v14 = v13;
    v15 = v8 - v14;
    if (v8 >= v12)
      v16 = (v12 - v14);
    else
      v16 = v15;
    if ((int)v14 >= 1)
    {
      Psola_OutputDataPart(a1, (uint64_t)(a2 + 3), v11, v14, a5, a6, a7, a8);
      bzero((char *)a2 + 2 * a2[1] + 12, 2 * v14);
    }
    if ((int)v16 >= 1)
    {
      Psola_OutputDataPart(a1, (uint64_t)(a2 + 3), 0, v16, a5, a6, a7, a8);
      bzero(a2 + 3, 2 * v16);
    }
    v17 = v15 - v16;
    if (v17 >= 1)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      do
      {
        if (v17 >= 100)
          v18 = 100;
        else
          v18 = v17;
        Psola_OutputDataPart(a1, (uint64_t)v21, 0, v18, a5, a6, a7, a8);
        v19 = __OFSUB__(v17, (_DWORD)v18);
        v17 -= v18;
      }
      while (!((v17 < 0) ^ v19 | (v17 == 0)));
    }
    v20 = a2[1] + v8;
    *a2 += v8;
    a2[1] = v20 % 2400;
    a2[2] -= v16 + v14;
  }
}

uint64_t Psola_DepositMarkers(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;

  v8 = result;
  v9 = *(_QWORD *)(*(_QWORD *)(result + 1088) + 160)
     + 16 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(result + 1088) + 152) + 56 * a2 + 44);
  v11 = *(unsigned __int16 *)(v9 + 10);
  v10 = (_WORD *)(v9 + 10);
  v12 = v11 + (unsigned __int16)*(v10 - 1);
  if (v12 > *(unsigned __int16 *)(result + 656))
  {
    result = log_OutPublic(*(_QWORD *)(*(_QWORD *)(result + 16) + 32), (uint64_t)"PSOLA", 45000, "%s%u%s%u%s%u", a5, a6, a7, a8, "index");
    v12 = *(unsigned __int16 *)(v8 + 656);
  }
  v13 = *(unsigned __int16 *)(v8 + 1080);
  if (v12 > v13)
  {
    v14 = *(_DWORD *)(v8 + 1028);
    v15 = (_DWORD *)(*(_QWORD *)(v8 + 648) + 32 * v13 + 16);
    v16 = v12 - v13;
    do
    {
      *(v15 - 1) = v14;
      *v15 = 0;
      v15 += 8;
      --v16;
    }
    while (v16);
    *(_WORD *)(v8 + 1080) = v12;
    *v10 = 0;
  }
  return result;
}

void Psola_AddToOlaBuf(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v16[2];

  if (*a2 <= (int)a5)
  {
    v8 = a5;
    v9 = a4;
    if (a4 < 1)
    {
      Psola_AddToOlaBufAux(a1, a2, (uint64_t)v16, 0, 0, a5, a7, a8);
    }
    else
    {
      v13 = 0;
      do
      {
        if (v9 >= 2400)
          v14 = 2400;
        else
          v14 = v9;
        Psola_AddToOlaBufAux(a1, a2, a3, v13, v14, v8, a7, a8);
        v13 = (v14 + v13);
        v8 = (v8 + v14);
        v15 = __OFSUB__(v9, (_DWORD)v14);
        v9 -= v14;
      }
      while (!((v9 < 0) ^ v15 | (v9 == 0)));
    }
  }
}

void Psola_AddToOlaBufAux(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _WORD *v19;
  __int16 *v20;
  int v21;
  __int16 v22;
  int v23;
  _WORD *v24;
  __int16 *v25;
  __int16 v26;
  int v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v13 = a6 + a5;
  v14 = a6 + a5 - 2400;
  v15 = *a2;
  if (v14 > *a2)
  {
    Psola_FlushOlaBufPart(a1, a2, v14, a4, a5, a6, a7, a8);
    v15 = *a2;
  }
  v16 = (v8 - v15 + a2[1]) % 2400;
  if (2400 - v16 >= v9)
    v17 = v9;
  else
    v17 = 2400 - v16;
  v18 = v9 - v17;
  if (v17 >= 1)
  {
    v19 = (_WORD *)a2 + v16 + 6;
    v20 = (__int16 *)(a3 + 2 * v10);
    v21 = v17;
    do
    {
      v22 = *v20++;
      *v19++ += v22;
      --v21;
    }
    while (v21);
  }
  if (v18 >= 1)
  {
    v23 = v17 + v10;
    v24 = a2 + 3;
    v25 = (__int16 *)(a3 + 2 * v23);
    do
    {
      v26 = *v25++;
      *v24++ += v26;
      --v18;
    }
    while (v18);
  }
  v27 = v13 - v15;
  if (a2[2] > v27)
    v27 = a2[2];
  a2[2] = v27;
}

uint64_t Psola_CopyDataPart(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a4;
  v9 = Psola_ReallocIfNeeded(a1, a5, a4);
  if ((v9 & 0x80000000) == 0)
    memcpy((void *)*a5, (const void *)(a2 + 2 * a3), 2 * v8);
  return v9;
}

__int16 *Psola_ApplyHanning(__int16 *result, int *a2, __int16 *a3, int a4, int a5)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  if (*a2 != a4)
  {
    if (a4 >= 1)
    {
      v5 = 0;
      v6 = result;
      do
      {
        *v6++ = HanningTab[(int)v5 / a4]
              + (HanningTab[(int)v5 / a4 + 1] - HanningTab[(int)v5 / a4]) * ((int)v5 % a4) / a4;
        v5 += 200;
      }
      while (200 * a4 != v5);
    }
    *a2 = a4;
  }
  if (a5)
  {
    if (a4 >= 1)
    {
      v7 = a4;
      do
      {
        v8 = *result++;
        *a3 = v8 * *a3 / 0x8000;
        ++a3;
        --v7;
      }
      while (v7);
    }
  }
  else if (a4 >= 1)
  {
    v9 = a4;
    do
    {
      v10 = *result++;
      *a3 = (0x7FFF - v10) * *a3 / 0x8000;
      ++a3;
      --v9;
    }
    while (v9);
  }
  return result;
}

void Psola_ApplyFadingPart(__int16 *a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;

  if (a3 <= a4)
    v6 = a4;
  else
    v6 = a3;
  v7 = a3 + a2;
  v8 = a5 + a4;
  if (a3 + a2 >= a5 + a4)
    v9 = a5 + a4;
  else
    v9 = a3 + a2;
  v10 = v9 - v6;
  if (v10 >= 1)
  {
    v11 = v10 + v6 - a3;
    v12 = v6 - a3;
    if (a6)
    {
      v13 = v6 - a4;
      do
      {
        a1[v12] = v13 * a1[v12] / a5;
        ++v13;
        ++v12;
      }
      while (v12 < v11);
    }
    else
    {
      v14 = a5 + a4 - v6;
      do
      {
        a1[v12] = v14 * a1[v12] / a5;
        ++v12;
        --v14;
      }
      while (v12 < v11);
    }
  }
  if (a4 > a3 && a6)
  {
    if (a4 - a3 >= a2)
      v15 = a2;
    else
      v15 = a4 - a3;
    if (v15 <= 0)
      return;
LABEL_27:
    bzero(a1, 2 * v15);
    return;
  }
  if (!a6)
  {
    v16 = __OFSUB__(v7, v8);
    v15 = v7 - v8;
    if (!((v15 < 0) ^ v16 | (v15 == 0)))
    {
      if (v15 >= a2)
        v15 = a2;
      if (v15 >= 1)
      {
        a1 += a2 - v15;
        goto LABEL_27;
      }
    }
  }
}

uint64_t Psola_ReallocIfNeeded(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (a2[1] >= a3)
    return 0;
  v4 = (a3 & 0xFFFFFFFFFFFFFE00) + 512;
  v5 = heap_Realloc(a1, *a2, 2 * v4);
  if (!v5)
    return 2164269066;
  v6 = v5;
  result = 0;
  *a2 = v6;
  a2[1] = v4;
  return result;
}

uint64_t Psola_GetToolSynthMode(_DWORD *a1)
{
  *a1 = -1;
  return 0;
}

uint64_t Psola_GetSynthMode(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    *a2 = 1;
    *a7 = 100;
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

uint64_t Synth_RetrieveInputBlock(uint64_t a1, char *__s2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v3 = 2164269076;
  *a3 = 0;
  if (*(_WORD *)(a1 + 328))
  {
    v7 = 0;
    v8 = 0;
    v9 = 16 * *(unsigned __int16 *)(a1 + 328);
    while (1)
    {
      v10 = *(const char **)(a1 + v7 + 48);
      if (v10)
      {
        if (!*(_DWORD *)(a1 + v7 + 40) && !strcmp(v10, __s2))
          break;
      }
      v8 += 16;
      v7 += 32;
      if (v9 == v8)
        return v3;
    }
    if (*(_QWORD *)(a1 + v8 + 336))
    {
      v3 = 0;
LABEL_11:
      *a3 = a1 + v8 + 336;
      return v3;
    }
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + v7 + 56), *(_QWORD *)(a1 + v7 + 64), a1 + v8 + 336, a1 + v8 + 344);
    if ((v3 & 0x80000000) == 0)
      goto LABEL_11;
  }
  return v3;
}

uint64_t Synth_SetVoicePartsAndRelativeIds(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = 2164269066;
  v5 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 8 * *(unsigned __int16 *)(a1 + 544));
  *(_QWORD *)(a1 + 552) = v5;
  if (v5)
  {
    v6 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4 * *(unsigned __int16 *)(a1 + 544));
    *(_QWORD *)(a1 + 536) = v6;
    if (v6)
    {
      if (*(_WORD *)(a1 + 544))
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        do
        {
          synth_splitGID(a1, *(_DWORD *)(a2 + v8), (_QWORD *)(*(_QWORD *)(a1 + 552) + v7), (unsigned int *)(*(_QWORD *)(a1 + 536) + v8));
          ++v9;
          v8 += 4;
          v7 += 8;
        }
        while (v9 < *(unsigned __int16 *)(a1 + 544));
      }
      return 0;
    }
  }
  return v4;
}

void Synth_LinkMsgLayers(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  v14 = 0;
  v2 = *(_WORD *)(a1 + 616);
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 16);
  if ((Synth_RetrieveInputBlock(a1, "text/x-realspeak-usphonemes;charset=tts", &v14) & 0x80000000) == 0)
  {
    v3 = v14;
    v4 = *(_QWORD *)v14 + 1;
    *(_BYTE *)(a1 + 528) = **(_BYTE **)v14;
    *(_QWORD *)(a1 + 576) = v4;
    LOWORD(v3) = *(_WORD *)(v3 + 8) - 2;
    *(_WORD *)(a1 + 584) = v3;
    if (!*(_BYTE *)(v4 + (unsigned __int16)v3)
      && (Synth_RetrieveInputBlock(a1, "application/x-realspeak-usids;version=4.0", &v14) & 0x80000000) == 0)
    {
      v5 = *(_BYTE **)v14;
      v6 = *(_DWORD *)(v14 + 8);
      *(_WORD *)(a1 + 544) = v6 >> 2;
      if ((unsigned __int16)(v6 >> 2) == 2 * *(unsigned __int16 *)(a1 + 584)
        && (Synth_SetVoicePartsAndRelativeIds(a1, (uint64_t)v5) & 0x80000000) == 0
        && (Synth_RetrieveInputBlock(a1, "application/x-realspeak-targf0;version=4.0", &v14) & 0x80000000) == 0)
      {
        v7 = v14;
        *(_QWORD *)(a1 + 560) = *(_QWORD *)v14;
        LODWORD(v7) = *(_DWORD *)(v7 + 8);
        *(_WORD *)(a1 + 568) = v7 >> 1;
        if ((unsigned __int16)(v7 >> 1) == 4 * *(unsigned __int16 *)(a1 + 584)
          && (Synth_RetrieveInputBlock(a1, "application/x-realspeak-usmarkers-u16;version=4.0", &v14) & 0x80000000) == 0)
        {
          v8 = v14;
          v9 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
          *(_QWORD *)(a1 + 592) = v9;
          if (v9)
          {
            memcpy(v9, *(const void **)v8, *(unsigned int *)(v8 + 8));
            if ((Synth_RetrieveInputBlock(a1, "application/x-realspeak-usplosives;version=4.0", &v14) & 0x80000000) == 0)
            {
              *(_QWORD *)(a1 + 600) = *(_QWORD *)v14;
              if ((Synth_RetrieveInputBlock(a1, "application/x-realspeak-usdurs;version=4.0", &v14) & 0x80000000) == 0)
              {
                v10 = v14;
                v11 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
                *(_QWORD *)(a1 + 608) = v11;
                if (v11)
                {
                  memcpy(v11, *(const void **)v10, *(unsigned int *)(v10 + 8));
                  if ((*(_BYTE *)(a1 + 528) & 1) == 0)
                    **(_WORD **)(a1 + 608) = v2;
                  *(_QWORD *)(a1 + 664) = a1;
                  if ((Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v14) & 0x80000000) == 0)
                  {
                    v12 = a1 + 512;
                    v13 = (_DWORD *)(v14 + 8);
                    Synth_SetupMarkers(v12, *(int **)v14, *(_DWORD *)(v14 + 8) >> 5, (unsigned int *)(v14 + 8));
                    *v13 *= 32;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

__n128 Synth_SetupMarkers(uint64_t a1, int *a2, unsigned int a3, unsigned int *a4)
{
  unsigned __int16 v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  __n128 result;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  int *v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  _WORD *v34;

  v8 = *(_WORD *)(a1 + 72) + a3;
  *(_WORD *)(a1 + 144) = v8;
  if (a3)
  {
    v9 = a3;
    v10 = a2;
    do
    {
      v11 = *v10;
      v10 += 8;
      if (v11 == 8)
        *(_WORD *)(a1 + 144) = ++v8;
      --v9;
    }
    while (v9);
  }
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v8, 32);
  *(_QWORD *)(a1 + 136) = v12;
  if (v12)
  {
    LOWORD(v14) = *(_WORD *)(a1 + 72);
    if ((_WORD)v14)
    {
      v15 = 0;
      v16 = 0;
      v14 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v15);
        if (v16)
        {
          v19 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v14);
          *v19 = 8;
          v19[6] = 0;
          ++v14;
          ++*(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v15);
        }
        v16 = 0;
        if (v18)
          break;
LABEL_23:
        if (v15 || (*(_BYTE *)(a1 + 16) & 1) != 0)
        {
          v23 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v14);
          *v23 = 33;
          v23[6] = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + v15);
          ++v14;
          ++*(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v15);
        }
        ++v15;
        v24 = *(unsigned __int16 *)(a1 + 72);
        if (v15 >= v24)
          goto LABEL_30;
      }
      while (1)
      {
        if (v17 >= a3 || v14 >= *(unsigned __int16 *)(a1 + 144))
          goto LABEL_19;
        v20 = &a2[8 * v17];
        if (*v20 == 33)
        {
          if (v20[6] != 35)
            goto LABEL_18;
        }
        else if (*v20 != 8 || !a2[8 * v17 + 6])
        {
          goto LABEL_18;
        }
        v16 = 1;
LABEL_18:
        result = *(__n128 *)v20;
        v21 = *((_OWORD *)v20 + 1);
        v22 = *(_QWORD *)(a1 + 136) + 32 * v14;
        *(__n128 *)v22 = result;
        *(_OWORD *)(v22 + 16) = v21;
        ++v17;
        ++v14;
LABEL_19:
        if (!--v18)
          goto LABEL_23;
      }
    }
    v17 = 0;
    LODWORD(v24) = 0;
LABEL_30:
    *(_WORD *)(a1 + 144) = v14;
    *a4 = v17;
    if (**(_BYTE **)(a1 + 64) == 35)
    {
      v25 = *(_QWORD *)(a1 + 80);
      if (!*(_WORD *)v25)
      {
        v26 = *(unsigned __int16 *)(v25 + 2);
        if (v24 < 3)
        {
          *(_DWORD *)v25 = (unsigned __int16)v26;
        }
        else
        {
          if (v26 >= (unsigned __int16)v14)
            v26 = (unsigned __int16)v14;
          if (v26)
          {
            v27 = 0;
            v28 = *(_QWORD *)(a1 + 136);
            v29 = 32 * v26;
            while (*(_DWORD *)(v28 + v27) != 0x4000)
            {
              v27 += 32;
              if (v29 == v27)
                return result;
            }
            v30 = (__int128 *)(v28 + v27);
            result = *(__n128 *)(v28 + 16);
            v32 = *v30;
            v31 = v30[1];
            *v30 = *(_OWORD *)v28;
            v30[1] = (__int128)result;
            v33 = *(_OWORD **)(a1 + 136);
            *v33 = v32;
            v33[1] = v31;
            v34 = *(_WORD **)(a1 + 80);
            ++*v34;
            --v34[1];
          }
        }
      }
    }
  }
  return result;
}

uint64_t Synth_UnlinkMsgLayers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[69];
  if (v2)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v2);
    a1[69] = 0;
  }
  v3 = a1[67];
  if (v3)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v3);
    a1[67] = 0;
  }
  v4 = a1[76];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v4);
    a1[76] = 0;
  }
  v5 = a1[74];
  if (v5)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v5);
    a1[74] = 0;
  }
  v6 = a1[81];
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v6);
    a1[81] = 0;
  }
  v7 = a1[78];
  if (v7)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v7);
    a1[78] = 0;
  }
  v8 = a1[80];
  if (v8)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v8);
    a1[80] = 0;
  }
  return 0;
}

uint64_t Synth_Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 1084) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 72) + 4) = 0;
  *(_DWORD *)(a1 + 1068) = 3;
  InOut__ResetOutputState(a1);
  *(_DWORD *)(a1 + 1096) = 0;
  *(_DWORD *)(a1 + 1036) = 0;
  *(_QWORD *)(a1 + 1076) = 0;
  return 0;
}

uint64_t Synth__InitForProcessing(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;

  v2 = *(unsigned __int16 *)(a1 + 632);
  v3 = *(_QWORD *)(a1 + 1088);
  *(_WORD *)(v3 + 168) = v2;
  v4 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(v3 + 160) = v4;
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    *(_BYTE *)(a1 + 1144) = (*(_BYTE *)(a1 + 528) & 4) != 0;
  }
  else
  {
    *(_BYTE *)(a1 + 1144) = 1;
    if (v2)
    {
      v5 = 0;
      do
      {
        v6 = Convert2Samples(a1, *(_DWORD *)(*(_QWORD *)(v3 + 152) + 56 * v5 + 28));
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1088) + 152) + 56 * v5;
        *(_DWORD *)(v7 + 28) = v6;
        v8 = Convert2Samples(a1, *(_DWORD *)(v7 + 32));
        v3 = *(_QWORD *)(a1 + 1088);
        v9 = *(_QWORD *)(v3 + 152);
        *(_DWORD *)(v9 + 56 * v5 + 32) = v8;
        v10 = *(_DWORD *)(v9 + 56 * v5 + 40);
        if (v10 >= 1)
        {
          v11 = Convert2SamplesX(a1, v10);
          v3 = *(_QWORD *)(a1 + 1088);
          v9 = *(_QWORD *)(v3 + 152);
          *(_DWORD *)(v9 + 56 * v5 + 40) = v11;
        }
        v12 = v9 + 56 * v5;
        v13 = *(unsigned __int16 *)(v12 + 46);
        if (*(_WORD *)(v12 + 46))
        {
          v14 = 0;
          v15 = (unsigned int *)(*(_QWORD *)(v3 + 160) + 16 * *(unsigned __int16 *)(v12 + 44) + 4);
          do
          {
            if ((int)*v15 >= 1)
            {
              v16 = Convert2Samples(a1, *v15);
              *v15 = v16;
              v14 += v16;
            }
            v15 += 4;
            --v13;
          }
          while (v13);
          v3 = *(_QWORD *)(a1 + 1088);
          v17 = *(_QWORD *)(v3 + 152) + 56 * v5;
          v19 = *(_DWORD *)(v17 + 32);
          v18 = (_DWORD *)(v17 + 32);
          if (v14 > v19)
            *v18 = v14;
        }
        ++v5;
        v20 = *(unsigned __int16 *)(v3 + 168);
      }
      while (v5 < v20);
    }
    else
    {
      LOWORD(v20) = 0;
    }
    do
    {
      if ((unsigned __int16)v20 < 3u)
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 1;
      do
      {
        v25 = *(_QWORD *)(v3 + 152);
        if (!*(_DWORD *)(v25 + 56 * v24 + 32) && !*(_DWORD *)(v25 + 56 * v24 + 40))
        {
          v26 = v25 + 56 * v24;
          *(_WORD *)(v26 - 10) += *(_WORD *)(v26 + 46);
          *(_BYTE *)(v26 - 8) = *(_BYTE *)(v26 - 8) & 0xF | 0x40;
          *(_BYTE *)(v26 + 104) = *(_BYTE *)(v26 + 104) & 0xF0 | 4;
          if (v24 <= (unsigned __int16)v20 - 2)
          {
            v27 = v21;
            v28 = v22;
            do
            {
              v29 = *(_QWORD *)(v3 + 152) + v27;
              v30 = *(_OWORD *)(v29 + 128);
              *(_OWORD *)(v29 + 56) = *(_OWORD *)(v29 + 112);
              *(_OWORD *)(v29 + 72) = v30;
              *(_OWORD *)(v29 + 88) = *(_OWORD *)(v29 + 144);
              *(_QWORD *)(v29 + 104) = *(_QWORD *)(v29 + 160);
              v3 = *(_QWORD *)(a1 + 1088);
              ++v28;
              v27 += 56;
            }
            while (v28 < *(unsigned __int16 *)(v3 + 168) - 2);
            LOWORD(v20) = *(_WORD *)(v3 + 168);
          }
          *(_WORD *)(v3 + 168) = v20 - 1;
          ++v23;
        }
        ++v24;
        v20 = *(unsigned __int16 *)(v3 + 168);
        ++v22;
        v21 += 56;
      }
      while (v24 < (uint64_t)(v20 - 1));
    }
    while (v23 > 0);
    if (*(_WORD *)(a1 + 618))
    {
      v31 = 56 * (unsigned __int16)v20 - 56;
      v32 = *(_QWORD *)(v3 + 152) + v31;
      v33 = *(unsigned __int16 *)(v32 + 46) - 1;
      *(_DWORD *)(a1 + 1096) = Convert2SamplesX(a1, *(unsigned __int16 *)(*(_QWORD *)(v3 + 160)+ 16 * (v33 + *(unsigned __int16 *)(v32 + 44))));
      *(_BYTE *)(a1 + 1144) = 1;
      v34 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 160)
                     + 16 * (v33 + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 152) + v31 + 44)));
      if ((*v34 & 0x30000) == 0x20000)
        *(_BYTE *)(a1 + 1144) = 0;
      *v34 = 0;
    }
  }
  return 0;
}

uint64_t Synth__SetVectPointer(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    *(_QWORD *)(a2 + 8) = a1;
    *(_DWORD *)a2 = a3;
    *(_DWORD *)(a2 + 4) = a3;
  }
  return 0;
}

uint64_t synth_CreateBrokerString(uint64_t a1, char *a2, size_t a3, int a4, int a5)
{
  uint64_t Str;
  size_t v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  char v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  size_t v25;
  size_t v26;
  char *v27;
  const char *v29;
  int v30;
  char *__s;
  char *v32;
  char *v33;
  char *__s1;
  char v35[256];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  __s1 = 0;
  __s = 0;
  v32 = 0;
  v30 = 0;
  v29 = 0;
  *a2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceaddon", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (!__s || !*__s)
    goto LABEL_12;
  v11 = strlen(__s);
  v12 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v11 + 19);
  if (!v12)
    return 2164269066;
  v13 = (uint64_t)v12;
  strcpy(v12, "voiceaddonbaseuri.");
  strcat(v12, __s);
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), v13, &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  heap_Free(*(_QWORD **)(a1 + 8), v13);
  if (__s1 && *__s1)
  {
    Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    v14 = strlen(a2);
    if (!memchr("\\/", a2[v14 - 1], 3uLL))
    {
      Str = strhelper_SafeCat(a2, "/", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
    }
    v15 = 0;
    v16 = "_";
  }
  else
  {
LABEL_12:
    v16 = "/";
    v15 = 1;
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v32);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (__s && *__s)
  {
    Str = strhelper_SafeCat(a2, "synthvao", 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v32);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v32, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, __s, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, "vao", 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    v17 = 0;
  }
  else
  {
    Str = strhelper_SafeCat(a2, "synth", 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v32, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    v17 = 1;
  }
  Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (a4 == 1)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &__s1);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
  }
  if (v17)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"reduction", &__s1);
    if ((Str & 0x80000000) != 0)
      return Str;
    v18 = __s1;
    if (strstr(__s1, "dev") || strstr(v18, "DEV"))
    {
      v19 = "dev";
      v20 = a2;
    }
    else
    {
      v20 = a2;
      v19 = v18;
    }
    Str = strhelper_SafeCat(v20, v19, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"coder", &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
  if ((Str & 0x80000000) != 0)
    return Str;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"bitrate", &__s1) & 0x80000000) != 0
    || !*__s1
    || (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"overheadframes", &v33) & 0x80000000) != 0
    || !*v33)
  {
    v22 = &a2[strlen(a2)];
    while (v22 > a2)
    {
      v24 = *--v22;
      v23 = v24;
      if ((v24 - 48) >= 0xA)
      {
        if (v23 == 102)
        {
          v25 = strlen(v22);
          memmove(v22 + 1, v22, v25 + 1);
          *v22 = *v16;
          goto LABEL_61;
        }
        break;
      }
    }
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"frequencyhz", &v30);
    if ((Str & 0x80000000) != 0)
      return Str;
    v26 = strlen(a2);
    LH_itoa(v30 / 1000, &a2[v26], 0xAu);
  }
  else
  {
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v16, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v33, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
  }
LABEL_61:
  vf_MakeLower(a2);
  if ((v15 & 1) == 0)
  {
    v27 = ".dat";
    return strhelper_SafeCat(a2, v27, 0xFFFFFFFFFFFFFFFFLL, a3);
  }
  v21 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &__s1);
  if ((v21 & 0x80000000) != 0)
    return v21;
  if (!a5)
  {
    if (!__s1 || !*__s1)
      return v21;
    Str = brokeraux_ComposeBrokerString(a1, a2, 0, 0, 0, 0, 0, v35, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    *a2 = 0;
    v27 = v35;
    return strhelper_SafeCat(a2, v27, 0xFFFFFFFFFFFFFFFFLL, a3);
  }
  if (cupreader_IsCupInTheScope(a1, &v29))
    return cupreader_PrependCupName(a2, v29, a3);
  return v21;
}

uint64_t synth_ResetParams(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 984) + 48))(*(_QWORD *)(a1 + 992));
  if ((result & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(a1 + 1152) & 1) == 0
      || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 1000) + 48))(*(_QWORD *)(a1 + 1008)),
          (result & 0x80000000) == 0))
    {
      result = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", 2u);
      if ((result & 0x80000000) == 0 && (*(_BYTE *)(a1 + 1152) & 2) != 0)
      {
        result = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", 0x64u);
        if ((result & 0x80000000) == 0)
          return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch", 0x64u);
      }
    }
  }
  return result;
}

uint64_t synth_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ISynth;
  return result;
}

uint64_t synth_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2164269063;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 83214;
  }
  return result;
}

uint64_t synth_ClassClose()
{
  return 0;
}

uint64_t synth_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Object;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int, _QWORD *, int *, uint64_t, unsigned int);
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v5 = 2164269066;
  v33 = 0;
  v34 = 0;
  if (!a5)
    return 2164269063;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v36);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((safeh_HandleCheck(a1, a2, 83214, 408) & 0x80000000) != 0)
    return 2164269064;
  v12 = heap_Calloc(*(_QWORD **)(v36 + 8), 1, 1160);
  if (v12)
  {
    v13 = v12;
    *(_QWORD *)v12 = a3;
    *(_QWORD *)(v12 + 8) = a4;
    *(_OWORD *)(v12 + 1016) = 0u;
    *(_BYTE *)(v12 + 1032) = 2;
    v14 = v36;
    *(_QWORD *)(v12 + 16) = v36;
    *(_QWORD *)(v12 + 24) = a1;
    *(_DWORD *)(v12 + 1076) = 1;
    Object = objc_GetObject(*(_QWORD *)(v14 + 48), (uint64_t)"SYNTHSTREAM", &v35);
    if ((Object & 0x80000000) == 0)
    {
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v35 + 8);
      Object = objc_GetObject(*(_QWORD *)(v36 + 48), (uint64_t)"SYNTHOUTPUTSINK", &v35);
      if ((Object & 0x80000000) == 0)
      {
        v16 = v35;
        *(_QWORD *)(v13 + 488) = *(_QWORD *)(v35 + 8);
        *(_OWORD *)(v13 + 496) = *(_OWORD *)(v16 + 16);
        *(_QWORD *)(v13 + 960) = v13;
        *(_QWORD *)(v13 + 968) = synth_CheckChange;
        *(_QWORD *)(v13 + 976) = synth_LearnChange;
        *(_BYTE *)(v13 + 1144) = 1;
        v17 = heap_Calloc(*(_QWORD **)(v36 + 8), 1, 232);
        *(_QWORD *)(v13 + 1088) = v17;
        if (!v17)
          goto LABEL_24;
        v18 = (__int128 *)(v13 + 960);
        LODWORD(v30) = 0;
        if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", (int *)&v30) & 0x80000000) != 0)
        {
          *(_WORD *)(v13 + 1044) = 2;
          paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", 2u);
        }
        else
        {
          v32 = 0;
          paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"finalsentencefound", &v32);
          if (v32 != 1)
            *(_WORD *)(v13 + 1044) = v30;
        }
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"finalsentencefound", 0);
        v19 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
        v30 = *v18;
        v31 = *(_QWORD *)(v13 + 976);
        Object = paramc_ListenerAdd(v19, "waitfactor", &v30);
        if ((Object & 0x80000000) == 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
          v30 = *v18;
          v31 = *(_QWORD *)(v13 + 976);
          Object = paramc_ListenerAdd(v20, "finalsentencefound", &v30);
          if ((Object & 0x80000000) == 0)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
            v30 = *v18;
            v31 = *(_QWORD *)(v13 + 976);
            Object = paramc_ListenerAdd(v21, "pitch", &v30);
            if ((Object & 0x80000000) == 0)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
              v30 = *v18;
              v31 = *(_QWORD *)(v13 + 976);
              Object = paramc_ListenerAdd(v22, "pitch_baseline", &v30);
              if ((Object & 0x80000000) == 0)
              {
                Object = vol_GetInterface(1u, (_QWORD *)(v13 + 984));
                if ((Object & 0x80000000) == 0)
                {
                  v33 = v13;
                  v34 = PushOutput;
                  v23 = (*(uint64_t (**)(_WORD *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v13 + 984) + 32))(a3, a4, &v33, v13 + 992);
                  if ((v23 & 0x80000000) != 0)
                  {
                    v5 = v23;
                    *(_QWORD *)(v13 + 992) = 0;
                  }
                  else
                  {
                    *(_QWORD *)a5 = v13;
                    *(_DWORD *)(a5 + 8) = 83213;
                    v5 = synth_ObjReopen((_WORD **)v13, *(_QWORD *)(a5 + 8));
                    if ((v5 & 0x80000000) == 0)
                    {
                      log_OutEvent(*(uint64_t ***)(v36 + 32), 21, &byte_1DEBD87CE, v24, v25, v26, v27, v28, v30);
                      return v5;
                    }
                  }
LABEL_24:
                  synth_loc_ObjClose(v13, 0);
                  *(_QWORD *)a5 = 0;
                  *(_DWORD *)(a5 + 8) = 0;
                  return v5;
                }
              }
            }
          }
        }
      }
    }
    v5 = Object;
    goto LABEL_24;
  }
  return v5;
}

uint64_t synth_ObjClose(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  else
    return synth_loc_ObjClose(a1, 0);
}

uint64_t synth_ObjReopen(_WORD **a1, int a2)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t BrokerString;
  uint64_t v6;
  uint64_t v7;
  uint64_t Int;
  char v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  int v30;
  char *v31;
  int v32;
  char *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  __int128 v40;
  _WORD *v41;
  uint64_t v42;
  char *__s2;
  char *__s;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  char *__s1;
  _OWORD v53[16];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = 2164269066;
  memset(v53, 0, sizeof(v53));
  v51 = 0;
  __s1 = 0;
  v50 = 0;
  v48 = 0;
  v46 = 0;
  __s2 = 0;
  __s = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  v49 = 0;
  v47 = 0;
  v45 = 0;
  v4 = a1[2];
  paramc_ParamSetStr(*((_QWORD *)v4 + 5), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
  BrokerString = synth_CreateBrokerString((uint64_t)a1[2], (char *)v53, 0x100uLL, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    v6 = BrokerString;
    if (!LH_stricmp((char *)v53, (char *)a1 + 672))
      return v6;
  }
  v7 = synth_CreateBrokerString((uint64_t)a1[2], (char *)v53, 0x100uLL, 1, 0);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_13;
  v6 = v7;
  if (!LH_stricmp((char *)v53, (char *)a1 + 672))
    return v6;
  if ((Lookup_CheckForDataFile(*a1, (uint64_t)a1[1], (const char *)v53, &v48) & 0x80000000) != 0)
    LOBYTE(v53[0]) = 0;
  if (v48)
  {
    if (LOBYTE(v53[0]))
      goto LABEL_21;
    goto LABEL_14;
  }
LABEL_13:
  LOBYTE(v53[0]) = 0;
LABEL_14:
  Int = synth_CreateBrokerString((uint64_t)a1[2], (char *)v53, 0x100uLL, 0, 0);
  if ((Int & 0x80000000) != 0)
    return Int;
  Int = Lookup_CheckForDataFile(*a1, (uint64_t)a1[1], (const char *)v53, &v48);
  if ((Int & 0x80000000) != 0)
    return Int;
  if (v48)
  {
    if (LOBYTE(v53[0]))
      goto LABEL_21;
  }
  else
  {
    LOBYTE(v53[0]) = 0;
  }
  Int = synth_CreateBrokerString((uint64_t)a1[2], (char *)v53, 0x100uLL, 0, 1);
  if ((Int & 0x80000000) != 0)
    return Int;
LABEL_21:
  Int = synth_loc_ObjClose((uint64_t)a1, 1);
  if ((Int & 0x80000000) != 0)
    return Int;
  __strcpy_chk();
  Int = paramc_ParamGetInt(*((_QWORD *)a1[2] + 5), (uint64_t)"frequencyhz", (int *)a1 + 260);
  if ((Int & 0x80000000) != 0)
    return Int;
  Psola_GetToolSynthMode(&v49);
  if (v49 == 1)
  {
    v9 = 2;
    goto LABEL_29;
  }
  if (!v49)
  {
    v9 = 1;
LABEL_29:
    *((_BYTE *)a1 + 1152) = v9;
    goto LABEL_30;
  }
  if (v49 >= 2)
  {
    v9 = 6;
    goto LABEL_29;
  }
  *((_BYTE *)a1 + 1152) = 1;
  if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"typeofsynthesis", &__s1) & 0x80000000) == 0)
  {
    if (!strcmp(__s1, "psola"))
      *((_BYTE *)a1 + 1152) = 2;
    paramc_ParamRelease(*((_QWORD *)v4 + 5));
  }
LABEL_30:
  if (((_BYTE)a1[144] & 2) != 0)
  {
    v42 = 0;
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate_baseline", (unsigned int *)&v42 + 1) & 0x80000000) != 0)
    {
      *((_DWORD *)a1 + 264) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate_baseline", 0x64u);
    }
    else
    {
      *((_DWORD *)a1 + 264) = WORD2(v42);
    }
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate", (unsigned int *)&v42 + 1) & 0x80000000) != 0)
    {
      *((_WORD *)a1 + 526) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate", 0x64u);
      v11 = *((_WORD *)a1 + 526);
    }
    else
    {
      v11 = WORD2(v42);
      *((_WORD *)a1 + 526) = WORD2(v42);
    }
    *((_WORD *)a1 + 526) = MapProsodyValue_Scaling(50, 100, 400, *((_DWORD *)a1 + 264), v11);
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch_baseline", (unsigned int *)&v42) & 0x80000000) != 0)
    {
      *((_DWORD *)a1 + 265) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch_baseline", 0x64u);
    }
    else
    {
      *((_DWORD *)a1 + 265) = (unsigned __int16)v42;
    }
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch", (unsigned int *)&v42) & 0x80000000) != 0)
    {
      *((_WORD *)a1 + 527) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch", 0x64u);
      v12 = *((_WORD *)a1 + 527);
    }
    else
    {
      v12 = v42;
      *((_WORD *)a1 + 527) = v42;
    }
    *((_WORD *)a1 + 527) = MapProsodyValue_Scaling(50, 100, 200, *((_DWORD *)a1 + 265), v12);
    v13 = *((_QWORD *)a1[2] + 5);
    v40 = *((_OWORD *)a1 + 60);
    v41 = a1[122];
    Int = paramc_ListenerAdd(v13, "rate_baseline", &v40);
    if ((Int & 0x80000000) != 0)
      return Int;
    v14 = *((_QWORD *)a1[2] + 5);
    v40 = *((_OWORD *)a1 + 60);
    v41 = a1[122];
    Int = paramc_ListenerAdd(v14, "rate", &v40);
    if ((Int & 0x80000000) != 0)
      return Int;
    if (a1[126])
    {
      (*((void (**)(void))a1[125] + 5))();
      a1[126] = 0;
    }
  }
  else if (((_BYTE)a1[144] & 1) != 0 && !a1[126])
  {
    Int = tsm_GetInterface(1u, a1 + 125);
    if ((Int & 0x80000000) == 0)
    {
      v10 = *((_QWORD *)a1[123] + 7);
      *(_QWORD *)&v40 = a1[124];
      *((_QWORD *)&v40 + 1) = v10;
      Int = (*((uint64_t (**)(_QWORD, _WORD *, __int128 *, _WORD **))a1[125] + 4))(*a1, a1[1], &v40, a1 + 126);
      if ((Int & 0x80000000) != 0)
      {
        a1[126] = 0;
        return Int;
      }
      goto LABEL_52;
    }
    return Int;
  }
LABEL_52:
  synth_Wsola__Wsola((uint64_t)a1);
  v15 = a1[136];
  v16 = *((unsigned int *)v15 + 3);
  v17 = heap_Alloc(*((_QWORD *)v4 + 1), 4 * v16);
  a1[138] = (_WORD *)v17;
  if (v17)
  {
    Synth__SetVectPointer(v17, *((_QWORD *)v15 + 6), v16);
    v18 = *((unsigned int *)v15 + 3);
    v19 = heap_Alloc(*((_QWORD *)v4 + 1), 4 * v18);
    a1[139] = (_WORD *)v19;
    if (v19)
    {
      Synth__SetVectPointer(v19, *((_QWORD *)v15 + 8), v18);
      v20 = (*((_DWORD *)v15 + 2) + *((_DWORD *)v15 + 3));
      v21 = heap_Alloc(*((_QWORD *)v4 + 1), 4 * v20);
      a1[140] = (_WORD *)v21;
      if (v21)
      {
        Synth__SetVectPointer(v21, *((_QWORD *)v15 + 9), v20);
        v22 = heap_Alloc(*((_QWORD *)v4 + 1), 2 * *((unsigned int *)v15 + 3));
        a1[142] = (_WORD *)v22;
        if (v22)
        {
          *((_QWORD *)v15 + 5) = v22;
          synth_SetWaitPeriod((uint64_t)a1, *((unsigned __int16 *)a1 + 522));
          Int = synth_GetDataHandles(a1, (char *)v53, &v47, &v46, &v45);
          if ((Int & 0x80000000) != 0)
            return Int;
          *((_DWORD *)a1 + 232) = 1;
          v23 = heap_Calloc(*((_QWORD **)v4 + 1), 1, 40);
          a1[117] = (_WORD *)v23;
          if (v23)
          {
            v24 = v46;
            v25 = v23 + 40 * (*((_DWORD *)a1 + 232) - 1);
            *(_QWORD *)v25 = v47;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(v25 + 16) = v45;
            *(_DWORD *)(v25 + 24) = 0;
            v26 = heap_Calloc(*((_QWORD **)v4 + 1), 1, 1);
            *(_QWORD *)&a1[117][20 * (*((_DWORD *)a1 + 232) - 1) + 16] = v26;
            if (v26)
            {
              Int = paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"voice", &v51);
              if ((Int & 0x80000000) != 0)
                return Int;
              if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"voiceoperatingpoint", &__s) & 0x80000000) != 0)
                v27 = 0;
              else
                v27 = strlen(__s) + 1;
              if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"vopversion", &__s2) & 0x80000000) != 0
                || (v28 = __s2, !strcmp(__s2, "0.0.0")))
              {
                v29 = 0;
              }
              else
              {
                v29 = strlen(v28) + 1;
              }
              v30 = strlen(v51);
              v31 = (char *)heap_Calloc(*((_QWORD **)v4 + 1), 1, (v27 + v29 + v30 + 14));
              a1[118] = v31;
              if (v31)
              {
                strcpy(v31, "voiceaddons.");
                v32 = strlen((const char *)a1[118]);
                v33 = v51;
                if (*v51)
                {
                  v34 = v32;
                  v35 = 0;
                  v36 = 0;
                  do
                  {
                    *((_BYTE *)a1[118] + v34 + v36) = __tolower(v33[v35]);
                    v33 = v51;
                    v35 = ++v36;
                  }
                  while (strlen(v51) > v36);
                }
                if (v27)
                {
                  *(_WORD *)((char *)a1[118] + strlen((const char *)a1[118])) = 46;
                  strcat((char *)a1[118], __s);
                }
                if (v29)
                {
                  *(_WORD *)((char *)a1[118] + strlen((const char *)a1[118])) = 46;
                  strcat((char *)a1[118], __s2);
                }
                paramc_ParamRelease(*((_QWORD *)v4 + 5));
                if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)a1[118], &v50) & 0x80000000) == 0
                  || (Int = paramc_ParamSetStr(*((_QWORD *)v4 + 5), (uint64_t)a1[118], &byte_1DEBD87CE),
                      (Int & 0x80000000) == 0)
                  && (Int = paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)a1[118], &v50), (Int & 0x80000000) == 0))
                {
                  Int = synth_UpdateAddons((uint64_t)a1, v50);
                  if ((Int & 0x80000000) == 0)
                  {
                    paramc_ParamRelease(*((_QWORD *)v4 + 5));
                    v37 = *((_QWORD *)v4 + 5);
                    v38 = a1[118];
                    v40 = *((_OWORD *)a1 + 60);
                    v41 = a1[122];
                    return paramc_ListenerAdd(v37, v38, &v40);
                  }
                }
                return Int;
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t synth_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23[72];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = 2164269065;
  if ((safeh_HandleCheck(a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  *(_WORD *)(a1 + 328) = 0;
  v8 = "text/x-realspeak-usphonemes;charset=tts";
  v9 = 1u;
  do
  {
    v10 = *(unsigned __int16 *)(a1 + 328);
    if (v10 > 8)
      goto LABEL_17;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, v8, 0, 0, a1 + 32 * v10 + 56);
    if ((result & 0x80000000) != 0)
      goto LABEL_10;
    v12 = *(unsigned __int16 *)(a1 + 328);
    v13 = a1 + 32 * v12;
    *(_DWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = v8;
    *(_WORD *)(a1 + 328) = v12 + 1;
    v8 = synth_ProcessStart_szINPUT_STREAMS[v9++];
  }
  while (v9 != 7);
  v10 = *(unsigned __int16 *)(a1 + 328);
  if (v10 > 8)
    goto LABEL_17;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
             0,
             0,
             a1 + 32 * v10 + 56);
  if ((result & 0x80000000) == 0)
  {
    v14 = *(unsigned __int16 *)(a1 + 328);
    v15 = a1 + 40 + 32 * v14;
    *(_DWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = "application/x-realspeak-markers-pp;version=4.0";
    LOWORD(v14) = v14 + 1;
    *(_WORD *)(a1 + 328) = v14;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
               0,
               1,
               a1 + 40 + 32 * (unsigned __int16)v14 + 16);
    if ((result & 0x80000000) == 0)
    {
      v16 = *(unsigned __int16 *)(a1 + 328);
      v17 = a1 + 32 * v16;
      *(_DWORD *)(v17 + 40) = 1;
      *(_QWORD *)(v17 + 48) = "application/x-realspeak-markers-pp;version=4.0";
      *(_WORD *)(a1 + 480) = v16;
      *(_WORD *)(a1 + 328) = v16 + 1;
    }
  }
LABEL_10:
  LODWORD(v10) = *(unsigned __int16 *)(a1 + 328);
  if (v10 > 8)
  {
LABEL_17:
    v20 = 0;
    v21 = (_QWORD *)(a1 + 64);
    do
    {
      v22 = *(v21 - 1);
      if (v22)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v22, *v21);
        LOWORD(v10) = *(_WORD *)(a1 + 328);
      }
      ++v20;
      v21 += 4;
    }
    while (v20 < (unsigned __int16)v10);
    LOWORD(v10) = 0;
    result = v7;
    goto LABEL_22;
  }
  if ((result & 0x80000000) == 0)
  {
    strcpy(v23, "audio/L16;rate=");
    v18 = strlen(v23);
    LH_itoa(*(_DWORD *)(a1 + 1040), &v23[v18], 0xAu);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, v23, 0, 1, a1 + 32 * *(unsigned __int16 *)(a1 + 328) + 56);
    v10 = *(unsigned __int16 *)(a1 + 328);
    if ((result & 0x80000000) == 0)
    {
      v19 = a1 + 32 * v10;
      *(_DWORD *)(v19 + 40) = 1;
      *(_QWORD *)(v19 + 48) = 0;
      *(_WORD *)(a1 + 482) = v10;
      LOWORD(v10) = v10 + 1;
      goto LABEL_22;
    }
  }
  if ((_DWORD)v10)
  {
    v7 = result;
    goto LABEL_17;
  }
LABEL_22:
  *(_WORD *)(a1 + 328) = v10;
  return result;
}

uint64_t synth_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  uint64_t *v30;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = 0;
  if ((safeh_HandleCheck(a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  *a5 = 1;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (char *)&v39 + 4, &v39);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (HIDWORD(v39))
  {
    synth_doWsolaSynthesis(a1);
    v9 = v8;
    goto LABEL_5;
  }
  v40 = 0;
  v9 = Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v40);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_59;
  v13 = *(unsigned int *)(v40 + 8);
  if (v13 < 0x20)
    goto LABEL_59;
  v14 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v13);
  *(_QWORD *)(a1 + 648) = v14;
  if (!v14)
  {
    v9 = 2164269066;
    goto LABEL_59;
  }
  memcpy(v14, *(const void **)v40, *(unsigned int *)(v40 + 8));
  v15 = 0;
  v16 = 0;
  *(_WORD *)(a1 + 656) = *(_DWORD *)(v40 + 8) >> 5;
  v17 = (_QWORD *)(a1 + 1016);
  v18 = (unsigned int *)(a1 + 1024);
  v38 = a1 + 1000;
  while (1)
  {
    v19 = *(unsigned __int16 *)(a1 + 656);
    if (v15 >= v19)
      break;
    v20 = *(_QWORD *)(a1 + 648);
    v21 = (int *)(v20 + 32 * v15);
    v21[3] = 0;
    v21[4] = 0;
    v22 = *v21;
    if (*v21 == 8)
    {
      v24 = Convert2SamplesX(a1, v21[6]);
      if (v24)
      {
        v25 = v24;
        if (*v17)
          goto LABEL_34;
        *(_DWORD *)(a1 + 1024) = 0;
        *(_BYTE *)(a1 + 1032) = 0;
        if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
        {
          v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1000)
                                                                                           + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
          if ((v9 & 0x80000000) == 0 && *v17)
            goto LABEL_34;
        }
        else
        {
          if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
            v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 984)
                                                                                             + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
LABEL_34:
          while (1)
          {
            v26 = *v18;
            if (v25 >= *v18)
            {
              v25 -= v26;
            }
            else
            {
              *v18 = v25;
              v26 = v25;
              v25 = 0;
            }
            *(_BYTE *)(a1 + 1032) = 2;
            bzero(*(void **)(a1 + 1016), 2 * v26);
            if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
            {
              v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 1000)
                                                                                                + 56))(*(_QWORD *)(a1 + 1008), *(unsigned __int8 *)(a1 + 1032), a1 + 1016, a1 + 1024, *(_QWORD *)(a1 + 648) + 32 * v16, (_DWORD)v15 + 1 - v16);
              if ((v9 & 0x80000000) != 0 || !*v17)
                break;
            }
            v16 = v15 + 1;
            if (!v25)
            {
              v16 = v15 + 1;
              goto LABEL_30;
            }
          }
        }
        goto LABEL_56;
      }
      goto LABEL_30;
    }
    if (v22 == 25)
    {
      v23 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", *(_DWORD *)(v20 + 32 * v15 + 24));
      goto LABEL_29;
    }
    if (v22 == 13)
    {
      v23 = synth_ResetParams(a1);
LABEL_29:
      v9 = v23;
    }
LABEL_30:
    ++v15;
    if ((v9 & 0x80000000) != 0)
    {
      LODWORD(v19) = *(unsigned __int16 *)(a1 + 656);
      break;
    }
  }
  if (v16 >= v19)
    goto LABEL_56;
  if (!*v17)
  {
    *(_DWORD *)(a1 + 1024) = 0;
    *(_BYTE *)(a1 + 1032) = 0;
    if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
    {
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1000) + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
      if ((v9 & 0x80000000) != 0 || !*v17)
        goto LABEL_56;
    }
    else if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
    {
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 984) + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
    }
  }
  *(_DWORD *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1032) = 3;
  if ((*(_BYTE *)(a1 + 1152) & 1) != 0 || (v38 = a1 + 984, (*(_BYTE *)(a1 + 1152) & 2) != 0))
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 56))(*(_QWORD *)(a1 + 1008), 3, a1 + 1016, a1 + 1024, *(_QWORD *)(a1 + 648) + 32 * v16, *(unsigned __int16 *)(a1 + 656) - v16);
LABEL_56:
  v32 = *(_QWORD *)(a1 + 648);
  if (v32)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v32);
    *(_QWORD *)(a1 + 648) = 0;
  }
  *(_WORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
LABEL_59:
  if ((_DWORD)v39)
  {
    v33 = *(unsigned __int16 *)(a1 + 328);
    if (*(_WORD *)(a1 + 328))
    {
      v34 = 0;
      v35 = (_QWORD *)(a1 + 64);
      do
      {
        if (*(v35 - 1) && *((_DWORD *)v35 - 6) == 1)
        {
          v36 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
          if (v36 >= 0)
            v9 = v9;
          else
            v9 = v36;
          *(v35 - 1) = safeh_GetNullHandle();
          *v35 = v37;
          v33 = *(unsigned __int16 *)(a1 + 328);
        }
        ++v34;
        v35 += 4;
      }
      while (v34 < v33);
    }
  }
LABEL_5:
  if ((v9 & 0x80000000) != 0)
    goto LABEL_43;
  v10 = (_QWORD *)(a1 + 64);
  v11 = -1;
  v12 = 344;
  while (++v11 < (unint64_t)*(unsigned __int16 *)(a1 + 328))
  {
    if (!*((_DWORD *)v10 - 6))
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(v10 - 1), *v10, *(unsigned int *)(a1 + v12));
    v10 += 4;
    v12 += 16;
    if ((v9 & 0x80000000) != 0)
      goto LABEL_43;
  }
  if (InOut__IsEndState(a1))
  {
LABEL_43:
    v27 = *(unsigned int *)(a1 + 928);
    if ((_DWORD)v27)
    {
      v28 = 0;
      for (i = 0; i < v27; ++i)
      {
        v30 = *(uint64_t **)(*(_QWORD *)(a1 + 936) + v28);
        if (v30)
        {
          Lookup_DeInit(v30);
          v27 = *(unsigned int *)(a1 + 928);
        }
        v28 += 40;
      }
    }
    *(_DWORD *)(a1 + 1076) = 1;
  }
  return v9;
}

uint64_t synth_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = safeh_HandleCheck(a1, a2, 83213, 1160);
  if ((v3 & 0x80000000) != 0)
    return 2164269064;
  v4 = v3;
  v5 = *(unsigned __int16 *)(a1 + 328);
  if (*(_WORD *)(a1 + 328))
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 64);
    do
    {
      v8 = *(v7 - 1);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v8, *v7);
        if (v9 >= 0)
          v4 = v4;
        else
          v4 = v9;
        *(v7 - 1) = safeh_GetNullHandle();
        *v7 = v10;
        v5 = *(unsigned __int16 *)(a1 + 328);
      }
      ++v6;
      v7 += 4;
    }
    while (v6 < v5);
  }
  *(_WORD *)(a1 + 328) = 0;
  return v4;
}

uint64_t synth_CheckChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  char v8;
  uint64_t v9;

  *a4 = 1;
  if (!strcmp(__s1, "waitfactor"))
  {
    if (atoi(a3) < 0xA)
      return 0;
LABEL_19:
    v9 = 2164269071;
    goto LABEL_20;
  }
  if (!strcmp(__s1, *(const char **)(a1 + 944)) || !strcmp(__s1, "finalsentencefound"))
    return 0;
  v8 = *(_BYTE *)(a1 + 1152);
  if ((v8 & 2) == 0)
    goto LABEL_5;
  if (!strcmp(__s1, "rate"))
    goto LABEL_16;
  if (!strcmp(__s1, "pitch") || !strcmp(__s1, "pitch_baseline"))
  {
    if ((atoi(a3) - 50) < 0x97)
      return 0;
    goto LABEL_19;
  }
  if (!strcmp(__s1, "rate_baseline"))
  {
LABEL_16:
    if ((atoi(a3) - 50) < 0x15F)
      return 0;
    goto LABEL_19;
  }
LABEL_5:
  v9 = 2164269071;
  if ((v8 & 1) == 0)
  {
LABEL_9:
    v9 = 2164269063;
LABEL_20:
    *a4 = 0;
    return v9;
  }
  if (!strcmp(__s1, "pitch"))
  {
    if (atoi(a3) != 100)
    {
      v9 = 2164269057;
      goto LABEL_20;
    }
  }
  else
  {
    if (strcmp(__s1, "pitch_baseline"))
    {
      if (!*(_DWORD *)(a1 + 1076))
      {
        v9 = 2164269073;
        goto LABEL_20;
      }
      goto LABEL_9;
    }
    if ((atoi(a3) - 50) >= 0x97)
      goto LABEL_20;
  }
  return 0;
}

uint64_t synth_LearnChange(uint64_t a1, char *__s1, char *a3)
{
  uint64_t WaitPeriod;
  uint64_t v7;
  uint64_t updated;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  int v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;

  if (!strcmp(__s1, "waitfactor"))
  {
    v18 = 0;
    paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v18);
    if (v18 == 1)
      goto LABEL_8;
    v9 = (unsigned __int16)LH_atou(a3);
    updated = synth_SetWaitPeriod(a1, v9);
LABEL_11:
    v7 = updated;
    if ((updated & 0x80000000) != 0)
      return v7;
    goto LABEL_12;
  }
  if (!strcmp(__s1, *(const char **)(a1 + 944)))
  {
    updated = synth_UpdateAddons(a1, a3);
    goto LABEL_11;
  }
  if (!strcmp(__s1, "finalsentencefound"))
  {
    if ((unsigned __int16)LH_atou(a3) == 1)
    {
      v17 = 0;
      WaitPeriod = synth_GetWaitPeriod(a1, &v17);
      if ((WaitPeriod & 0x80000000) != 0)
        return WaitPeriod;
      paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", v17);
      v7 = synth_SetWaitPeriod(a1, 0);
    }
    else
    {
      v16 = 0;
      paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", &v16);
      v15 = synth_SetWaitPeriod(a1, (unsigned __int16)v16);
      v7 = v15 & (v15 >> 31);
      if (v15 < 0)
        return v7;
    }
    if ((v7 & 0x80000000) != 0)
      return v7;
    goto LABEL_12;
  }
LABEL_8:
  v7 = 2164269063;
LABEL_12:
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    if (strcmp(__s1, "pitch")
      || (v10 = (unsigned __int16)LH_atou(a3), v7 = synth_SetPitch(a1, v10), (v7 & 0x80000000) == 0))
    {
      if (!strcmp(__s1, "pitch_baseline"))
      {
        v12 = (unsigned __int16)LH_atoi(a3);
        return synth_SetPitchBaseline(a1, v12);
      }
      if (!strcmp(__s1, "rate"))
      {
        v13 = (unsigned __int16)LH_atou(a3);
        return synth_SetRate(a1, v13);
      }
      if (!strcmp(__s1, "rate_baseline"))
      {
        v11 = (unsigned __int16)LH_atou(a3);
        return synth_SetRateBaseline(a1, v11);
      }
    }
  }
  return v7;
}

uint64_t PushOutput(uint64_t a1, int a2, _QWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v23 = 0;
  v24 = a6;
  result = 2164269062;
  if (a1 && a3 && a4)
  {
    result = 0;
    if (a5)
    {
      v13 = 0;
      if (a6)
      {
        v14 = a1 + 32 * *(unsigned __int16 *)(a1 + 482);
        result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)(a1 + 32) + 136))(*(_QWORD *)(v14 + 56), *(_QWORD *)(v14 + 64), &v23);
        v15 = v23 >> 1;
        v23 >>= 1;
        if ((result & 0x80000000) != 0)
        {
          v13 = 0;
        }
        else
        {
          v16 = 0;
          do
          {
            *(_DWORD *)(a5 + v16 + 12) += v15;
            v16 += 32;
          }
          while (32 * a6 != v16);
          v17 = a1 + 32 * *(unsigned __int16 *)(a1 + 480);
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v17 + 56), *(_QWORD *)(v17 + 64), a5, 32 * a6);
          v13 = 1;
        }
      }
    }
    else
    {
      v13 = 0;
    }
    if (*a3 && *a4)
    {
      v18 = a1 + 32 * *(unsigned __int16 *)(a1 + 482);
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(v18 + 56), *(_QWORD *)(v18 + 64), (2 * *a4));
      *a3 = 0;
      v13 = 1;
    }
    if ((result & 0x80000000) != 0)
      goto LABEL_26;
    v19 = 2 * v13;
    v20 = a2 == 3 ? 1 : v19;
    result = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, int *, int *))(a1 + 488))(*(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 504), v20, a4, (int *)&v24);
    if ((result & 0x80000000) != 0)
      goto LABEL_26;
    v21 = *a4;
    if (a2 != 3 && v21)
    {
      v22 = a1 + 32 * *(unsigned __int16 *)(a1 + 482);
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(v22 + 56), *(_QWORD *)(v22 + 64), a3, (2 * v21));
      if ((result & 0x80000000) != 0)
      {
LABEL_26:
        *a3 = 0;
        *a4 = 0;
        return result;
      }
      v21 = *a4;
    }
    if (a2 == 3 || !v21)
      goto LABEL_26;
  }
  return result;
}

uint64_t synth_loc_ObjClose(uint64_t a1, int a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  int v28;
  uint64_t v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t v36;
  __int128 v38;
  uint64_t v39;

  *(_BYTE *)(a1 + 672) = 0;
  v4 = *(_BYTE **)(a1 + 944);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v6 = paramc_ListenerRemove(v5, v4, &v38);
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
    v7 = v6 & (v6 >> 31);
    v8 = *(_QWORD *)(a1 + 944);
    if (v8)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v8);
      *(_QWORD *)(a1 + 944) = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)(a1 + 928))
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 936);
    v12 = v11;
    do
    {
      if (v12)
      {
        if (*(_QWORD *)(v12 + v9))
        {
          v7 = Lookup_ObjClose((uint64_t *)(v12 + v9));
          v11 = *(_QWORD *)(a1 + 936);
        }
        if (*(_QWORD *)(v11 + v9 + 16))
        {
          v7 = Pmk_Lookup_ObjClose(v11 + v9 + 16);
          v11 = *(_QWORD *)(a1 + 936);
        }
        if (*(_QWORD *)(v11 + v9 + 32))
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v11 + v9 + 32));
          v11 = *(_QWORD *)(a1 + 936);
          *(_QWORD *)(v11 + v9 + 32) = 0;
        }
        v12 = v11;
      }
      ++v10;
      v9 += 40;
    }
    while (v10 < *(unsigned int *)(a1 + 928));
    if (v11)
      goto LABEL_17;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 936);
    if (v11)
    {
LABEL_17:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11);
      *(_QWORD *)(a1 + 936) = 0;
    }
  }
  *(_DWORD *)(a1 + 928) = 0;
  v13 = *(_QWORD *)(a1 + 1104);
  if (v13)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
    *(_QWORD *)(a1 + 1104) = 0;
  }
  v14 = *(_QWORD *)(a1 + 1112);
  if (v14)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
    *(_QWORD *)(a1 + 1112) = 0;
  }
  v15 = *(_QWORD *)(a1 + 1120);
  if (v15)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    *(_QWORD *)(a1 + 1120) = 0;
  }
  v16 = *(_QWORD *)(a1 + 1136);
  if (v16)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v16);
    *(_QWORD *)(a1 + 1136) = 0;
  }
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v18 = paramc_ListenerRemove(v17, "rate", &v38);
    if ((int)v7 > -1 && v18 < 0)
      LODWORD(v7) = v18;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v21 = paramc_ListenerRemove(v20, "rate_baseline", &v38);
    if ((int)v7 > -1 && v21 < 0)
      v7 = v21;
    else
      v7 = v7;
  }
  if (a2)
  {
    v23 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)(v23 + 224) = 0;
    *(_OWORD *)(v23 + 192) = 0u;
    *(_OWORD *)(v23 + 208) = 0u;
    *(_OWORD *)(v23 + 160) = 0u;
    *(_OWORD *)(v23 + 176) = 0u;
    *(_OWORD *)(v23 + 128) = 0u;
    *(_OWORD *)(v23 + 144) = 0u;
    *(_OWORD *)(v23 + 96) = 0u;
    *(_OWORD *)(v23 + 112) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    *(_OWORD *)(v23 + 80) = 0u;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)(v23 + 16) = 0u;
  }
  else
  {
    if (*(_QWORD *)(a1 + 1008))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 1000) + 40))();
      *(_QWORD *)(a1 + 1008) = 0;
    }
    if (*(_QWORD *)(a1 + 992))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 984) + 40))();
      *(_QWORD *)(a1 + 992) = 0;
    }
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v25 = paramc_ListenerRemove(v24, "waitfactor", &v38);
    if ((int)v7 > -1 && v25 < 0)
      LODWORD(v7) = v25;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v28 = paramc_ListenerRemove(v27, "finalsentencefound", &v38);
    if ((int)v7 > -1 && v28 < 0)
      LODWORD(v7) = v28;
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v31 = paramc_ListenerRemove(v30, "pitch", &v38);
    if ((int)v7 > -1 && v31 < 0)
      LODWORD(v7) = v31;
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v38 = *(_OWORD *)(a1 + 960);
    v39 = *(_QWORD *)(a1 + 976);
    v34 = paramc_ListenerRemove(v33, "pitch_baseline", &v38);
    if ((int)v7 > -1 && v34 < 0)
      v7 = v34;
    else
      v7 = v7;
    v36 = *(_QWORD *)(a1 + 1088);
    if (v36)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v36);
      *(_QWORD *)(a1 + 1088) = 0;
    }
    if (*(_QWORD *)(a1 + 488))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHOUTPUTSINK");
    if (*(_QWORD *)(a1 + 32))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
  }
  return v7;
}

uint64_t synth_UpdateAddons(uint64_t a1, char *__s)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  int v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[256];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = 2164269066;
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v6 = strlen(__s);
  v7 = (char *)heap_Calloc(v5, 1, (v6 + 1));
  if (v7)
  {
    v8 = v7;
    strcpy(v7, __s);
    if (*(_DWORD *)(a1 + 928) >= 2u)
    {
      v9 = 0;
      v10 = 1;
      v11 = 80;
      while (1)
      {
        v12 = strchr(v8, 59);
        if (!v12)
          goto LABEL_63;
        v13 = v12;
        v14 = v8;
        do
        {
          *v13 = 0;
          v15 = strcmp(v14, *(const char **)(*(_QWORD *)(a1 + 936) + 40 * v10 + 32));
          *v13 = 59;
          v14 = v13 + 1;
          v16 = strchr(v13 + 1, 59);
          v13 = v16;
          if (v15)
            v17 = v16 == 0;
          else
            v17 = 1;
        }
        while (!v17);
        if (v15)
        {
LABEL_63:
          v9 = 0;
          *(_DWORD *)v57 = 0;
          if (v10 < *(unsigned int *)(a1 + 928))
          {
            v18 = *(_QWORD *)(a1 + 936);
            v19 = *(_QWORD *)(v18 + 40 * v10);
            if (v19)
            {
              v20 = Lookup_NrUnits(v19, v57);
              if ((v20 & 0x80000000) != 0)
              {
                v9 = v20;
                goto LABEL_58;
              }
              v9 = Lookup_ObjClose((uint64_t *)(*(_QWORD *)(a1 + 936) + 40 * v10));
              if ((v9 & 0x80000000) != 0)
                goto LABEL_58;
              v18 = *(_QWORD *)(a1 + 936);
            }
            else
            {
              v9 = 0;
            }
            v21 = v18 + 40 * v10;
            v23 = *(_QWORD *)(v21 + 16);
            v22 = v21 + 16;
            if (v23)
            {
              v9 = Pmk_Lookup_ObjClose(v22);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_58;
              v18 = *(_QWORD *)(a1 + 936);
            }
            v24 = *(_QWORD *)(v18 + 40 * v10 + 32);
            if (v24)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
              v18 = *(_QWORD *)(a1 + 936);
              *(_QWORD *)(v18 + 40 * v10 + 32) = 0;
            }
            v25 = *(unsigned int *)(a1 + 928);
            if (v10 + 1 < v25)
            {
              v26 = v11;
              v27 = v10;
              do
              {
                v28 = v18 + 40 * v27;
                v29 = (__int128 *)(v18 + v26);
                v30 = *v29;
                v31 = v29[1];
                *(_QWORD *)(v28 + 32) = *((_QWORD *)v29 + 4);
                *(_OWORD *)v28 = v30;
                *(_OWORD *)(v28 + 16) = v31;
                v18 = *(_QWORD *)(a1 + 936);
                *(_DWORD *)(v18 + 40 * v27 + 24) -= *(_DWORD *)v57;
                v25 = *(unsigned int *)(a1 + 928);
                v32 = v27 + 2;
                ++v27;
                v26 += 40;
              }
              while (v32 < v25);
            }
            *(_DWORD *)(a1 + 928) = v25 - 1;
          }
        }
        ++v10;
        v11 += 40;
        if (v10 >= *(unsigned int *)(a1 + 928))
          goto LABEL_30;
      }
    }
    v9 = 0;
LABEL_30:
    v33 = strchr(v8, 59);
    if (!v33)
      goto LABEL_58;
    v34 = v33;
    v35 = v8;
    while (2)
    {
      v36 = 0;
      *v34 = 0;
      v37 = *(_DWORD *)(a1 + 928);
      if (v37 <= 1)
        v37 = 1;
      v38 = 40 * v37;
      while (1)
      {
        v39 = v36 + 40;
        if (v38 == v36 + 40)
          break;
        v40 = strcmp(v35, *(const char **)(*(_QWORD *)(a1 + 936) + v36 + 72));
        v36 = v39;
        if (!v40)
          goto LABEL_53;
      }
      v53 = 0;
      if (!*v35)
      {
        v9 = 0;
        goto LABEL_53;
      }
      v55 = 0;
      v56 = 0;
      v54 = 0;
      paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", v35);
      v9 = CheckAndGetData(a1, v57, 0, &v53, &v56, &v55, &v54);
      if ((v9 & 0x80000000) == 0)
      {
        if (!(_DWORD)v53)
        {
          v9 = CheckAndGetData(a1, v57, 1, &v53, &v56, &v55, &v54);
          if ((v9 & 0x80000000) != 0)
            break;
          if (!(_DWORD)v53)
          {
            v9 = 2164269076;
            break;
          }
        }
        v41 = *(_DWORD *)(a1 + 928) + 1;
        *(_DWORD *)(a1 + 928) = v41;
        v42 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 936), 40 * v41);
        if (!v42)
        {
LABEL_55:
          v9 = 2164269066;
          break;
        }
        *(_QWORD *)(a1 + 936) = v42;
        v43 = v55;
        v44 = *(_DWORD *)(a1 + 928);
        v45 = v44 - 1;
        v46 = (_QWORD *)(v42 + 40 * (v44 - 1));
        *v46 = v56;
        v46[1] = v43;
        v46[2] = v54;
        if (v44 <= 1)
        {
          *(_DWORD *)(v42 + 40 * v45 + 24) = 0;
          goto LABEL_51;
        }
        v47 = v44 - 2;
        v48 = *(_QWORD *)(v42 + 40 * (v44 - 2));
        if (!v48)
        {
LABEL_50:
          *(_DWORD *)(v42 + 40 * v45 + 24) = *(_DWORD *)(v42 + 40 * v47 + 24) + v48;
LABEL_51:
          v50 = strlen(v35);
          v51 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (v50 + 1), 1);
          *(_QWORD *)(*(_QWORD *)(a1 + 936) + 40 * (*(_DWORD *)(a1 + 928) - 1) + 32) = v51;
          if (v51)
          {
            strcpy(v51, v35);
LABEL_53:
            *v34 = 59;
            v35 = v34 + 1;
            v34 = strchr(v34 + 1, 59);
            if (v34)
              continue;
LABEL_58:
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v8);
            return v9;
          }
          goto LABEL_55;
        }
        v9 = Lookup_NrUnits(*(_QWORD *)(v42 + 40 * v47), (_DWORD *)&v53 + 1);
        if ((v9 & 0x80000000) == 0)
        {
          v42 = *(_QWORD *)(a1 + 936);
          v49 = *(_DWORD *)(a1 + 928);
          LODWORD(v48) = HIDWORD(v53);
          v47 = v49 - 2;
          v45 = v49 - 1;
          goto LABEL_50;
        }
      }
      break;
    }
    --*(_DWORD *)(a1 + 928);
    goto LABEL_58;
  }
  return v4;
}

uint64_t CheckAndGetData(uint64_t a1, char *a2, int a3, _DWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t BrokerString;
  uint64_t DataHandles;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;

  v20 = 0;
  BrokerString = synth_CreateBrokerString(*(_QWORD *)(a1 + 16), a2, 0x100uLL, 0, a3);
  if ((BrokerString & 0x80000000) != 0)
  {
    DataHandles = BrokerString;
  }
  else
  {
    DataHandles = Lookup_CheckForDataFile(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a2, &v20);
    if ((DataHandles & 0x80000000) == 0)
    {
      if (v20)
      {
        DataHandles = synth_GetDataHandles((_WORD **)a1, a2, a5, a6, a7);
        if ((DataHandles & 0x80000000) != 0)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45003, "%s%s", v15, v16, v17, v18, "brokerStr");
      }
    }
  }
  *a4 = v20;
  return DataHandles;
}

uint64_t synth_GetDataHandles(_WORD **a1, char *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  _WORD *v9;
  uint64_t Str;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  char v15;
  char v16;
  uint64_t v17;
  char v19;
  signed int Int;
  int v21;
  char *__s1;
  char *v23;
  char __s2[256];
  char v25[256];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = a1[2];
  __s1 = 0;
  v23 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  Str = paramc_ParamGetStr(*((_QWORD *)v9 + 5), (uint64_t)"coder", &__s1);
  if ((Str & 0x80000000) != 0)
    goto LABEL_26;
  if (!strcmp(__s1, "1175mrf22"))
  {
    v11 = 2164269057;
    goto LABEL_27;
  }
  v11 = Lookup_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[3], (uint64_t)a2, a3);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_29;
  if (((_BYTE)a1[144] & 2) == 0)
    return v11;
  if (!a2)
  {
    v11 = 2164269063;
    goto LABEL_27;
  }
  v12 = strlen(a2);
  v25[0] = 0;
  if (v12 >= 5 && (v13 = v12, !strcmp(&a2[v12 - 4], ".dat")))
  {
    Str = strhelper_SafeCat(v25, a2, v13 - 4, 0x100uLL);
    if ((Str & 0x80000000) != 0)
      goto LABEL_26;
    v15 = 0;
    v14 = "_";
  }
  else
  {
    Str = strhelper_SafeCat(v25, a2, 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
    if ((Str & 0x80000000) != 0)
    {
LABEL_26:
      v11 = Str;
      goto LABEL_27;
    }
    v14 = "/";
    v15 = 1;
  }
  Str = strhelper_SafeCat(v25, v14, 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
  if ((Str & 0x80000000) != 0)
    goto LABEL_26;
  v11 = strhelper_SafeCat(v25, "pmk", 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
  if ((int)v11 < 0)
    v16 = 1;
  else
    v16 = v15;
  if ((v16 & 1) == 0)
    v11 = strhelper_SafeCat(v25, ".dat", 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_27;
  v17 = Pmk_Lookup_ObjOpen(*a1, (int)a1[1], (uint64_t)a1[3], (uint64_t)v25, a5);
  if ((v17 & 0x80000000) != 0)
  {
    v11 = v17;
    v19 = *((_BYTE *)a1 + 1152);
    *a5 = 0;
    if ((v19 & 4) != 0)
      return 0;
    goto LABEL_27;
  }
  v11 = Pmk_Lookup_Fingerprint(*a5, &v23);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_27:
    if (!*a3)
      goto LABEL_30;
    Lookup_ObjClose(a3);
LABEL_29:
    *a3 = 0;
LABEL_30:
    if (*a5)
    {
      Pmk_Lookup_ObjClose((uint64_t)a5);
      *a5 = 0;
    }
    return v11;
  }
  if (*a3)
  {
    v11 = Lookup_Fingerprint(*a3, __s2, 0x100u);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_27;
  }
  else
  {
    __s2[0] = 0;
  }
  if (!strcmp(v23, __s2))
    v11 = v11;
  else
    v11 = 2164269081;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_27;
  v21 = 0;
  Int = paramc_ParamGetInt(*((_QWORD *)v9 + 5), (uint64_t)"pmksync", &v21);
  if (Int >= 0 && v21 != 0)
    v11 = Int;
  else
    v11 = 0;
  *((_DWORD *)a1 + 287) = Int >= 0 && v21 != 0;
  return v11;
}

uint64_t TenthOfMsToSamples(int a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  result = 0;
  if (a1 > 15999)
  {
    if (a1 == 16000)
    {
      v4 = HIWORD(a2);
      v5 = 62676 * HIWORD(a2)
         + 19779 * (unsigned __int16)a2
         + ((62676 * (unsigned __int16)a2 + 0x8000) >> 16)
         + 0x4000;
      v6 = 39558;
      goto LABEL_11;
    }
    if (a1 == 22050)
    {
      v5 = 28836 * HIWORD(a2)
         + 6717 * (unsigned __int16)a2
         + ((28836 * (unsigned __int16)a2 + 0x8000) >> 16)
         + 0x4000;
      v7 = 13434 * HIWORD(a2) + 2 * a2;
      return v7 + (v5 >> 15);
    }
  }
  else if (a1 == 8000)
  {
    return 2
         * (26272 * HIWORD(a2)
          + ((64821 * HIWORD(a2)
            + 13136 * (unsigned __int16)a2
            + ((64821 * (unsigned __int16)a2 + 0x8000) >> 16)
            + 0x4000) >> 15));
  }
  else if (a1 == 11025)
  {
    v4 = HIWORD(a2);
    v5 = 47186 * HIWORD(a2)
       + 3358 * (unsigned __int16)a2
       + ((47186 * (unsigned __int16)a2 + 0x8000) >> 16)
       + 0x4000;
    v6 = 6716;
LABEL_11:
    v7 = a2 + v4 * v6;
    return v7 + (v5 >> 15);
  }
  return result;
}

uint64_t vf_MakeLower(const char *a1)
{
  uint64_t v2;
  unsigned int v3;

  if (!a1)
    return 2164269063;
  if (*a1)
  {
    v2 = 0;
    v3 = 1;
    do
    {
      a1[v2] = __tolower(a1[v2]);
      v2 = v3;
    }
    while (strlen(a1) > v3++);
  }
  return 0;
}

uint64_t tsm_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ITsm;
  return result;
}

uint64_t tsm_ObjOpen(_WORD *a1, uint64_t a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t UInt;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t (*v21)(uint64_t, const char *, const char *);
  unsigned int v22;
  uint64_t v23;

  v23 = 0;
  v22 = 0;
  v4 = 2164269066;
  if (!a4)
    return 2164269062;
  *a4 = 0;
  inited = InitRsrcFunction(a1, a2, &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (!a3)
    return 2164269063;
  v10 = heap_Calloc(*(_QWORD **)(v23 + 8), 1, 744);
  if (v10)
  {
    v11 = v10;
    *(_QWORD *)v10 = v23;
    *(_QWORD *)(v10 + 8) = a1;
    *(_QWORD *)(v10 + 16) = a2;
    v12 = v23;
    *(_QWORD *)(v10 + 48) = *(_QWORD *)(v23 + 40);
    *(_OWORD *)(v10 + 24) = *a3;
    UInt = critsec_ObjOpen(*(_QWORD *)(v12 + 16), *(_QWORD **)(v12 + 8), (uint64_t *)(v10 + 728));
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    UInt = critsec_ObjOpen(*(_QWORD *)(v23 + 16), *(_QWORD **)(v23 + 8), (uint64_t *)(v11 + 736));
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    *(_WORD *)(v11 + 80) = 100;
    *(_DWORD *)(v11 + 40) = 1;
    *(_DWORD *)(v11 + 720) = 0;
    UInt = paramc_ParamSetStr(*(_QWORD *)(v11 + 48), (uint64_t)"pausestatus", "0");
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    *(_DWORD *)(v11 + 684) = 0;
    SetRateLevelBeforePause(v11, 100);
    UInt = paramc_ParamGetUInt(*(_QWORD *)(v23 + 40), (uint64_t)"frequencyhz", &v22);
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    *(_WORD *)(v11 + 712) = v22;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v23 + 40), (uint64_t)"wordspermin", &v22) & 0x80000000) != 0)
    {
      v22 = 200;
      paramc_ParamSetUInt(*(_QWORD *)(v23 + 40), (uint64_t)"wordspermin", 0xC8u);
    }
    *(_DWORD *)(v11 + 716) = v22;
    v14 = WSOLA__Create(*(_QWORD *)v11, *(_WORD *)(v11 + 712));
    *(_QWORD *)(v11 + 704) = v14;
    if (!v14)
      goto LABEL_28;
    UInt = paramc_ParamSetStr(*(_QWORD *)(v11 + 48), (uint64_t)"pausestatus", "0");
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"rate", &v22) & 0x80000000) != 0)
    {
      v22 = 100;
      SetRate(v11, 0x64u);
      UInt = paramc_ParamSetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"rate", v22);
      if ((UInt & 0x80000000) != 0)
        goto LABEL_27;
    }
    else
    {
      SetRate(v11, (unsigned __int16)v22);
    }
    v15 = v22;
    if (v22 <= 0x32)
      v15 = 50;
    if (v15 >= 0x190)
      v15 = 400;
    paramc_ParamSetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"ratewpm", (v15 * *(_DWORD *)(v11 + 716) + 50) / 0x64);
    *(_QWORD *)(v11 + 56) = v11;
    *(_QWORD *)(v11 + 64) = acceptor_TsmCheckRange;
    *(_QWORD *)(v11 + 72) = acceptor_TsmLearnChange;
    v16 = *(_QWORD *)(v11 + 48);
    v20 = *(_OWORD *)(v11 + 56);
    v21 = acceptor_TsmLearnChange;
    UInt = paramc_ListenerAdd(v16, "wordspermin", &v20);
    if ((UInt & 0x80000000) == 0)
    {
      v17 = *(_QWORD *)(v11 + 48);
      v20 = *(_OWORD *)(v11 + 56);
      v21 = *(uint64_t (**)(uint64_t, const char *, const char *))(v11 + 72);
      UInt = paramc_ListenerAdd(v17, "rate", &v20);
      if ((UInt & 0x80000000) == 0)
      {
        v18 = *(_QWORD *)(v11 + 48);
        v20 = *(_OWORD *)(v11 + 56);
        v21 = *(uint64_t (**)(uint64_t, const char *, const char *))(v11 + 72);
        v4 = paramc_ListenerAdd(v18, "ratewpm", &v20);
        if ((v4 & 0x80000000) == 0)
        {
LABEL_29:
          *a4 = v11;
          return v4;
        }
LABEL_28:
        tsm_ObjClose(v11);
        v11 = 0;
        goto LABEL_29;
      }
    }
LABEL_27:
    v4 = UInt;
    goto LABEL_28;
  }
  return v4;
}

uint64_t tsm_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  if (!a1)
    return 2164269062;
  if (*(_DWORD *)(a1 + 40) != 1)
    FreeTask((_QWORD *)a1);
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v2);
  *(_QWORD *)(a1 + 136) = 0;
  if (*(_QWORD *)(a1 + 704))
    WSOLA__Remove((uint64_t *)(a1 + 704));
  v3 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  paramc_ListenerRemove(v3, "wordspermin", &v9);
  v4 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  paramc_ListenerRemove(v4, "rate", &v9);
  v5 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  paramc_ListenerRemove(v5, "ratewpm", &v9);
  v6 = *(_QWORD *)(a1 + 728);
  if (v6)
    critsec_ObjClose(v6);
  v7 = *(_QWORD *)(a1 + 736);
  if (v7)
    critsec_ObjClose(v7);
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return 0;
}

uint64_t tsm_ResetParams(uint64_t a1)
{
  if (a1)
    return paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"rate", 0x64u);
  else
    return 2164269062;
}

uint64_t tsm_Process(uint64_t a1, int a2, uint64_t *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  int v13;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t Rate;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  int OutputLength;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  _QWORD *v89;
  _DWORD *v90;
  double v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v106;
  int v107;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  __int16 *v113;
  _QWORD *v114;
  int *v115;
  int v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 v120[9];

  v8 = 2164269066;
  v9 = 2164269062;
  if (!a1)
    return v9;
  v10 = a3;
  if (!a3)
    return v9;
  v11 = a4;
  if (!a4)
    return v9;
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == -1)
    return 2164269073;
  v15 = *a3;
  if (!(a5 | *a3))
  {
    if (v13 == 1)
    {
      v15 = 0;
    }
    else
    {
      FreeTask((_QWORD *)a1);
      v15 = *v10;
    }
    *(_DWORD *)(a1 + 40) = 1;
LABEL_189:
    if (a5 | v15)
      return 2164269073;
    *(_DWORD *)(a1 + 40) = 3;
    *(_DWORD *)(a1 + 696) = 0;
    *(_BYTE *)(a1 + 148) = 1;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_OWORD *)(a1 + 472) = 0u;
    *(_OWORD *)(a1 + 488) = 0u;
    *(_OWORD *)(a1 + 504) = 0u;
    *(_OWORD *)(a1 + 520) = 0u;
    *(_OWORD *)(a1 + 536) = 0u;
    *(_OWORD *)(a1 + 552) = 0u;
    *(_OWORD *)(a1 + 568) = 0u;
    *(_OWORD *)(a1 + 584) = 0u;
    *(_OWORD *)(a1 + 600) = 0u;
    *(_OWORD *)(a1 + 616) = 0u;
    *(_OWORD *)(a1 + 632) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    v89 = (_QWORD *)(a1 + 88);
    *(_BYTE *)(a1 + 664) = 1;
    v90 = (_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 668) = 0u;
    if (*(_DWORD *)(a1 + 684))
      SetRate(a1, *(unsigned __int16 *)(a1 + 692));
    paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "0");
    *(_QWORD *)(a1 + 684) = 0;
    SetRateLevelBeforePause(a1, 100);
    v91 = WSOLA__Initialise(*(_QWORD *)(a1 + 704));
    *(_DWORD *)(a1 + 96) = 0;
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, double))(a1 + 32))(*(_QWORD *)(a1 + 24), 0, a1 + 88, a1 + 96, 0, 0, v91);
    *(_DWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    if ((v9 & 0x80000000) != 0)
    {
      *v89 = 0;
      *v90 = 0;
    }
    else if (*v89 && *v90)
    {
LABEL_203:
      if (!*(_QWORD *)(a1 + 112) && *v89 && *v90)
      {
        v93 = (*v90 >> 7) & 0x1FFFFF8;
        if (v93)
          v94 = v93;
        else
          v94 = 8;
        *(_DWORD *)(a1 + 120) = v94;
        v95 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v94, 32);
        *(_QWORD *)(a1 + 112) = v95;
        if (!v95)
        {
          FreeTask((_QWORD *)a1);
          goto LABEL_232;
        }
      }
      else
      {
        *v90 = 0;
        *v89 = 0;
      }
      if ((v9 & 0x80000000) != 0)
      {
        v8 = v9;
        goto LABEL_232;
      }
      if (*(_DWORD *)(a1 + 40) != 1)
      {
        v96 = *(_DWORD *)(a1 + 96);
        if (v96 <= ((8589935 * (unint64_t)(*(unsigned __int16 *)(a1 + 712) << 7)) >> 32) >> 1)
          v96 = ((8589935 * (unint64_t)(*(unsigned __int16 *)(a1 + 712) << 7)) >> 32) >> 1;
        *(_DWORD *)(a1 + 144) = v96;
        *v11 = v96;
        v97 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 2 * v96);
        *(_QWORD *)(a1 + 136) = v97;
        *v10 = v97;
        if (!v97)
          goto LABEL_232;
        return v9;
      }
LABEL_207:
      v8 = v9;
      if ((v9 & 0x1FFF) == 0x807)
        goto LABEL_232;
      return v9;
    }
    FreeTask((_QWORD *)a1);
    goto LABEL_203;
  }
  if (v13 == 1)
    goto LABEL_189;
  LOBYTE(v16) = a2;
  v17 = *a4;
  v120[0] = 0;
  v119 = 0;
  v118 = -1;
  v114 = (_QWORD *)(a1 + 88);
  if (!*(_QWORD *)(a1 + 88) || !*(_DWORD *)(a1 + 96))
  {
    FreeTask((_QWORD *)a1);
    v9 = 0;
LABEL_198:
    v92 = *(_DWORD *)(a1 + 40);
    if (v92 == 1 || v92 == -1)
    {
      *v10 = 0;
    }
    else if ((v16 & 1) != 0)
    {
      v98 = *(_QWORD *)(a1 + 136);
      if (v98)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v98);
        *(_QWORD *)(a1 + 136) = 0;
      }
      *v10 = 0;
      if ((v16 & 2) != 0)
      {
        FreeTask((_QWORD *)a1);
        v99 = 1;
      }
      else
      {
        v99 = 4;
      }
      *(_DWORD *)(a1 + 40) = v99;
    }
    else
    {
      if ((v16 & 2) != 0)
        *v11 = *(_DWORD *)(a1 + 144);
      else
        *v11 = 0;
      *v10 = *(_QWORD *)(a1 + 136);
    }
    goto LABEL_207;
  }
  v18 = a6;
  v106 = v15;
  if (v15)
    v19 = v17;
  else
    v19 = 0;
  if (v19)
    *(_DWORD *)(a1 + 696) = 1;
  LODWORD(v20) = 0;
  v21 = 0;
  v22 = 0;
  v107 = 0;
  v115 = (int *)(a1 + 100);
  v111 = a2 & 2;
  v101 = a5 + 24;
  v102 = a6;
LABEL_18:
  v109 = v20;
  v112 = v22;
  if (v22 == v21)
  {
    while (1)
    {
      while (1)
      {
        HIDWORD(v119) = 0;
        v23 = SearchNextMarker(a5, v18, TSM_MARKER_INTEREST, 3u, &v119, &v118, (int *)&v119 + 1);
        v24 = v19;
        if (v119 < v18)
        {
          v24 = *(_DWORD *)(a5 + 32 * v119 + 12);
          if (v24 >= v19)
          {
            if (v24 | v19)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&ModuleInfoTsm, 3, 0, (uint64_t)"ERROR: Mrk[%d] (tot:%d) with posCur %lu > %lu", a6, a7, a8, v119);
              *(_DWORD *)(a5 + 32 * v119 + 12) = (__PAIR64__(v19, v21) - v19) >> 32;
              v24 = (__PAIR64__(v19, v21) - v19) >> 32;
            }
            else
            {
              v24 = 0;
            }
          }
        }
        if (HIDWORD(v119))
          break;
LABEL_43:
        v107 = v23;
        if (v24 < v19 && !*(_DWORD *)(a1 + 684) && *(_DWORD *)(a5 + 32 * v118) != 8)
        {
          LOWORD(v116) = 0;
          Rate = GetRate(a1, &v116);
          if ((Rate & 0x80000000) != 0)
            goto LABEL_224;
          v28 = *(_DWORD *)(a5 + 32 * v118);
          if (v28 == 19)
          {
            v29 = (100 * *(_DWORD *)(a5 + 32 * v118 + 24)) / *(_DWORD *)(a1 + 716);
            if (v29 <= 0x32)
              v29 = 50;
            if (v29 >= 0x190)
              v29 = 400;
          }
          else
          {
            v29 = v28 == 18 ? *(unsigned __int16 *)(a5 + 32 * v118 + 24) : (unsigned __int16)v116;
          }
          if (v29 == (unsigned __int16)v116)
            continue;
        }
        goto LABEL_85;
      }
      if ((v23 - 16) < 4)
        goto LABEL_26;
      if (v23 != 8)
        break;
      if (!*(_DWORD *)(a1 + 684))
      {
        LOWORD(v116) = 0;
        v30 = *(_DWORD *)(a5 + 32 * v118 + 24);
        if (v30)
        {
          *(_DWORD *)(a1 + 688) = v30 * ((8389 * (*(unsigned __int16 *)(a1 + 712) >> 3)) >> 20);
          GetRate(a1, &v116);
          LOWORD(v31) = v116;
          v32 = (v119 + 1);
          if (v32 < v18)
          {
            v33 = (unsigned int *)(v101 + 32 * v32);
            v34 = v102 - v32;
            do
            {
              if (*(v33 - 3) != v24)
                break;
              v35 = *(v33 - 6);
              if (v35 == 19)
              {
                v31 = 100 * *v33 / *(_DWORD *)(a1 + 716);
                if (v31 <= 0x32)
                  v31 = 50;
                if (v31 >= 0x190)
                  LOWORD(v31) = 400;
              }
              else if (v35 == 18)
              {
                v31 = *v33;
              }
              v33 += 8;
              --v34;
            }
            while (v34);
          }
          SetRateLevelBeforePause(a1, v31);
          SetRate(a1, 0x64u);
          paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "1");
          *(_DWORD *)(a1 + 684) = 1;
          if (!*(_DWORD *)(a5 + 32 * v118 + 24))
          {
            v36 = (v119 + 1);
            if (v36 >= v18)
            {
LABEL_83:
              SetRate(a1, *(unsigned __int16 *)(a1 + 692));
              paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "0");
              *(_DWORD *)(a1 + 684) = 0;
              v23 = 8;
              goto LABEL_38;
            }
            v37 = (unsigned int *)(v101 + 32 * v36);
            v38 = v102 - v36;
            while (2)
            {
              if (*(v37 - 3) != v24)
                goto LABEL_83;
              v39 = *(v37 - 6);
              if (v39 == 19)
              {
                v40 = 100 * *v37 / *(_DWORD *)(a1 + 716);
                if (v40 <= 0x32)
                  v40 = 50;
                if (v40 >= 0x190)
                  LOWORD(v40) = 400;
LABEL_81:
                SetRateLevelBeforePause(a1, v40);
              }
              else if (v39 == 18)
              {
                v40 = *v37;
                goto LABEL_81;
              }
              v37 += 8;
              if (!--v38)
                goto LABEL_83;
              continue;
            }
          }
        }
      }
LABEL_38:
      v118 = v119;
      if (v24 != v21)
      {
        if (v119 < v18)
          LODWORD(v119) = v119 + 1;
        goto LABEL_43;
      }
      if (v119 < v18)
        LODWORD(v119) = v119 + 1;
    }
    if (v23 != 24)
      goto LABEL_38;
LABEL_26:
    v25 = *(_DWORD *)(a5 + 32 * v118);
    if (v25 == 19)
    {
      v26 = (100 * *(_DWORD *)(a5 + 32 * v118 + 24)) / *(_DWORD *)(a1 + 716);
      if (v26 <= 0x32)
        v26 = 50;
      if (v26 >= 0x190)
        LOWORD(v26) = 400;
    }
    else if (v25 == 18)
    {
      LOWORD(v26) = *(_WORD *)(a5 + 32 * v118 + 24);
    }
    else
    {
      LOWORD(v26) = 0;
    }
    paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"rate", (unsigned __int16)v26);
    goto LABEL_38;
  }
  v24 = v21;
LABEL_85:
  v41 = v112;
  v20 = v20;
  while (v20 < v18)
  {
    v42 = a5 + 32 * v20;
    v44 = *(_DWORD *)(v42 + 12);
    v43 = (_DWORD *)(v42 + 12);
    v22 = v44;
    if (v44 >= v19)
    {
      if (v22 | v19)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&ModuleInfoTsm, 3, 0, (uint64_t)"ERROR: Mrk %d/%d with posCur %lu > %lu", a6, a7, a8, v20);
        v41 = v112;
        *v43 = (__PAIR64__(v19, v112) - v19) >> 32;
        v22 = (__PAIR64__(v19, v112) - v19) >> 32;
      }
      else
      {
        v22 = 0;
      }
    }
    if (v22 > v41)
      v20 = v20;
    else
      v20 = (v20 + 1);
    if (v22 > v41)
      goto LABEL_97;
  }
  v22 = v19;
LABEL_97:
  v45 = *(_DWORD *)(a1 + 684);
  if ((v16 & 1) != 0)
  {
    if (v45)
    {
      v46 = *(_DWORD *)(a1 + 688);
      if (v46)
      {
        if (v119 >= v18 && (v107 - 16) >= 4)
        {
          v41 = v112;
          if (v107 != 24)
          {
            v24 = v46 + v112;
            if (v46 + v112 >= v19)
            {
              if (v19 < v22)
                v22 = v19;
              v24 = v19;
            }
            else if (v24 < v22)
            {
              v22 = v46 + v112;
            }
          }
        }
        else
        {
          v41 = v112;
        }
      }
      goto LABEL_105;
    }
  }
  else if (v45)
  {
    v46 = *(_DWORD *)(a1 + 688);
LABEL_105:
    v47 = v22 - v41;
    v48 = v46 >= v47;
    v49 = v46 - v47;
    if (!v48)
      v49 = 0;
    *(_DWORD *)(a1 + 688) = v49;
  }
  v103 = v24;
  v50 = *(_QWORD *)(a1 + 112);
  if (v50)
  {
    v51 = v20 - v109;
    if (v20 > v109)
    {
      v52 = *(_DWORD *)(a1 + 128);
      v53 = a5 + 32 * v109;
      do
      {
        v54 = *(_DWORD *)(v53 + 12);
        v55 = *(_DWORD *)(a1 + 668);
        if (v52 >= *(_DWORD *)(a1 + 120))
        {
          v56 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v50, 32 * (v52 + 8));
          if (!v56)
          {
            v9 = 2164269066;
            goto LABEL_231;
          }
          v50 = v56;
          *(_QWORD *)(a1 + 112) = v56;
          v52 = *(_DWORD *)(a1 + 128);
          *(_DWORD *)(a1 + 120) = v52 + 8;
        }
        v57 = *(_OWORD *)v53;
        v58 = *(_OWORD *)(v53 + 16);
        v53 += 32;
        v59 = (_OWORD *)(v50 + 32 * v52);
        *v59 = v57;
        v59[1] = v58;
        v50 = *(_QWORD *)(a1 + 112);
        v60 = *(unsigned int *)(a1 + 128);
        *(_DWORD *)(v50 + 32 * v60 + 12) = v55 + v54;
        v52 = v60 + 1;
        *(_DWORD *)(a1 + 128) = v52;
        --v51;
      }
      while (v51);
    }
  }
  v110 = v22 - v112;
  v16 = a2;
  if (v22 == v19)
    v61 = a2;
  else
    v61 = 0;
  v113 = (__int16 *)(v106 + 2 * v112);
  v62 = v120[0];
  while (1)
  {
    v63 = *(unsigned __int8 *)(a1 + 148);
    v117 = *(_BYTE *)(a1 + 148);
    if (!v62)
      *(_DWORD *)(a1 + 4 * v63 + 152) += v110;
    if (*(_DWORD *)(a1 + 696))
    {
      v120[0] = 0;
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 96);
      Rate = critsec_Enter(*(_QWORD **)(a1 + 728));
      if ((Rate & 0x80000000) != 0
        || (v64 = *(_WORD *)(a1 + 80), Rate = critsec_Leave(*(_QWORD **)(a1 + 728)), (Rate & 0x80000000) != 0))
      {
LABEL_224:
        v9 = Rate;
        goto LABEL_231;
      }
      v9 = WSOLA__TimeScaleInputBuffer(*(_QWORD *)(a1 + 704), v61, v113, v110, *(_WORD **)(a1 + 88), v115, (__int16)(v64 - 100), &v117, v120);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_231;
      v62 = v120[0];
      if (v120[0] - 1 > 1)
      {
        if (v120[0])
          goto LABEL_170;
        v88 = (*(_BYTE *)(a1 + 148)
                              - 127
                              * ((((*(_BYTE *)(a1 + 148)
                                                   - ((unsigned __int16)(3 * *(unsigned __int8 *)(a1 + 148)) >> 8)) >> 1)
                                + ((3 * *(unsigned __int8 *)(a1 + 148)) >> 8)) >> 6)
                              + 1);
        *(_BYTE *)(a1 + 148) = v88;
        *(_DWORD *)(a1 + 4 * v88 + 152) = 0;
LABEL_178:
        if (*(_DWORD *)(a1 + 684))
        {
          v21 = v103;
          if (!*(_DWORD *)(a1 + 688))
          {
            SetRate(a1, *(unsigned __int16 *)(a1 + 692));
            v9 = paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "0");
            *(_DWORD *)(a1 + 684) = 0;
            if ((v9 & 0x80000000) != 0)
              goto LABEL_231;
          }
        }
        else
        {
          v21 = v103;
        }
        if (v22 >= v19)
        {
          *(_DWORD *)(a1 + 668) += v19;
          goto LABEL_239;
        }
        goto LABEL_18;
      }
      v65 = *(_DWORD *)(a1 + 696);
    }
    else
    {
      v65 = 0;
      if ((v16 & 1) != 0)
        v120[0] = 2;
      else
        v120[0] = 1;
    }
    v116 = 0;
    if (!v65)
    {
      OutputLength = 0;
      v116 = 1;
      goto LABEL_135;
    }
    while (1)
    {
      OutputLength = WSOLA__GetOutputLength(*(_QWORD *)(a1 + 704), *(unsigned __int8 *)(a1 + 664), &v116);
LABEL_135:
      v67 = *(_QWORD *)(a1 + 112);
      if (v67)
      {
        v69 = *(unsigned int *)(a1 + 124);
        v68 = *(unsigned int *)(a1 + 128);
        if (v69 < v68)
        {
          v70 = *(_DWORD *)(a1 + 672);
          v71 = (unsigned int *)(v67 + 32 * v69 + 12);
          do
          {
            if (*v71 > v70)
              break;
            *v71 = *(_DWORD *)(a1 + 680) - *(_DWORD *)(a1 + 676);
            v71 += 8;
            *(_DWORD *)(a1 + 124) = ++v69;
          }
          while (v68 != v69);
        }
      }
      if (!v116 || !*(_DWORD *)(a1 + 696))
        break;
      *(_DWORD *)(a1 + 680) += OutputLength;
      v72 = *(unsigned __int8 *)(a1 + 664);
      *(_DWORD *)(a1 + 672) += *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 664) + 152);
      *(_BYTE *)(a1 + 664) = v72
                           - 127
                           * ((((v72 - ((unsigned __int16)(3 * v72) >> 8)) >> 1)
                             + ((3 * v72) >> 8)) >> 6)
                           + 1;
    }
    v73 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 676) += v73;
    v74 = v120[0];
    v75 = *(unsigned int *)(a1 + 124);
    if (v67)
    {
      if (v111)
      {
        v76 = *(unsigned int *)(a1 + 128);
        if ((_DWORD)v76 != (_DWORD)v75 && v120[0] == 2)
        {
          if (v75 < v76)
          {
            v77 = v73 - 1;
            if (!v73)
              v77 = 0;
            v78 = v76 - v75;
            v79 = (_DWORD *)(v67 + 32 * v75 + 12);
            do
            {
              *v79 = v77;
              v79 += 8;
              --v78;
            }
            while (v78);
          }
          *(_DWORD *)(a1 + 124) = v76;
          LODWORD(v75) = v76;
        }
      }
    }
    v80 = v74 == 2 ? v16 : 0;
    v81 = v80 | v111;
    v82 = v80 & 0xFFFFFFFD;
    v83 = (_DWORD)v75 ? v82 : v81;
    *(_DWORD *)(a1 + 104) += v73;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, int *))(a1 + 32))(*(_QWORD *)(a1 + 24), v83, v114, v115);
    if ((v9 & 0x80000000) != 0)
      break;
    v84 = *(char **)(a1 + 112);
    v85 = *(unsigned int *)(a1 + 124);
    v86 = *(_DWORD *)(a1 + 128);
    if (v84 && v86 > v85)
    {
      memmove(v84, &v84[32 * v85], 32 * (v86 - v85));
      LODWORD(v85) = *(_DWORD *)(a1 + 124);
      v86 = *(_DWORD *)(a1 + 128);
    }
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = v86 - v85;
    if ((v83 & 1) != 0)
    {
      v87 = 0;
      *v114 = 0;
    }
    else
    {
      v87 = *v115;
    }
    *(_DWORD *)(a1 + 96) = v87;
    *(_DWORD *)(a1 + 100) = 0;
    v62 = v120[0];
    v16 = a2;
    if (v120[0] != 2 && (!*v114 || !v87))
    {
      FreeTask((_QWORD *)a1);
LABEL_239:
      v10 = a3;
      v11 = a4;
      goto LABEL_198;
    }
    *(_DWORD *)(a1 + 104) = 0;
LABEL_170:
    if ((v62 & 0xFFFFFFFD) == 0 || !*(_DWORD *)(a1 + 696))
      goto LABEL_178;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
LABEL_231:
  v8 = v9;
  v10 = a3;
  v11 = a4;
LABEL_232:
  FreeTask((_QWORD *)a1);
  *(_DWORD *)(a1 + 40) = 1;
  *v10 = 0;
  *v11 = 0;
  return v8;
}

uint64_t tsm_Break(uint64_t a1, int a2)
{
  uint64_t result;

  result = 2164269062;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      return 2164269073;
    }
    else
    {
      result = 0;
      if (a2)
        *(_DWORD *)(a1 + 720) = 1;
    }
  }
  return result;
}

uint64_t SetRateLevelBeforePause(uint64_t a1, __int16 a2)
{
  uint64_t v4;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 736));
  if ((v4 & 0x80000000) == 0)
  {
    *(_WORD *)(a1 + 692) = a2;
    critsec_Leave(*(_QWORD **)(a1 + 736));
  }
  return v4;
}

uint64_t SetRate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v3 = result;
    result = critsec_Enter(*(_QWORD **)(result + 736));
    if ((result & 0x80000000) == 0)
    {
      if ((critsec_Enter(*(_QWORD **)(v3 + 728)) & 0x80000000) == 0)
      {
        *(_DWORD *)(v3 + 720) = 0;
        if (a2 <= 0x32)
          v4 = 50;
        else
          v4 = a2;
        if (v4 >= 0x190)
          LOWORD(v4) = 400;
        *(_WORD *)(v3 + 80) = v4;
        critsec_Leave(*(_QWORD **)(v3 + 728));
      }
      return critsec_Leave(*(_QWORD **)(v3 + 736));
    }
  }
  return result;
}

uint64_t acceptor_TsmCheckRange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;

  *a4 = 1;
  if (!strcmp(__s1, "wordspermin"))
    return 0;
  v8 = 2164269071;
  if (!strcmp(__s1, "rate"))
  {
    if (((atoi(a3) << 16) - 26279936) <= 0xFEA00000)
      goto LABEL_5;
    return 0;
  }
  v8 = 2164269063;
LABEL_5:
  if (!strcmp(__s1, "ratewpm"))
  {
    v9 = LH_atou(a3);
    v10 = *(_DWORD *)(a1 + 716);
    v11 = (50 * v10 + 50) / 0x64u;
    v12 = (400 * v10 + 50) / 0x64u;
    v13 = v11 > v9 || v9 > v12;
    v8 = 2164269071;
    if (!v13)
      return 0;
  }
  *a4 = 0;
  return v8;
}

uint64_t acceptor_TsmLearnChange(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  char *__s2;
  char __s[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  __s2 = 0;
  v6 = paramc_ParamGet(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", &__s2, 0);
  if ((v6 & 0x80000000) == 0)
  {
    if (!strcmp(a2, "wordspermin"))
    {
      v6 = 0;
      *(_DWORD *)(a1 + 716) = LH_atou(a3);
    }
    if (!strcmp(a2, "rate"))
    {
      v7 = (unsigned __int16)LH_atou(a3);
      if (!strcmp("0", __s2))
        v8 = SetRateLevel(a1, v7);
      else
        v8 = SetRateLevelBeforePause(a1, v7);
      v6 = v8;
    }
    if (!strcmp(a2, "ratewpm"))
    {
      v9 = 100 * LH_atou(a3) / *(_DWORD *)(a1 + 716);
      if (v9 <= 0x32)
        v9 = 50;
      if (v9 >= 0x190)
        v10 = 400;
      else
        v10 = v9;
      if (!strcmp("0", __s2))
        SetRateLevel(a1, (unsigned __int16)v10);
      else
        SetRateLevelBeforePause(a1, v10);
      LH_utoa(v10, __s, 0xAu);
      v11 = strlen(__s);
      return paramc_ParamRipple(*(_QWORD *)(a1 + 48), (uint64_t)"rate", __s, (v11 + 1));
    }
  }
  return v6;
}

uint64_t SetRateLevel(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 736));
  if ((v4 & 0x80000000) == 0)
  {
    if (a2 <= 0x32)
      v5 = 50;
    else
      v5 = a2;
    if (v5 >= 0x190)
      LOWORD(v5) = 400;
    *(_WORD *)(a1 + 80) = v5;
    critsec_Leave(*(_QWORD **)(a1 + 736));
  }
  return v4;
}

_QWORD *FreeTask(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  *((_DWORD *)result + 10) = 1;
  v2 = result[17];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v2);
    v1[17] = 0;
  }
  v3 = v1[11];
  *((_DWORD *)v1 + 36) = 0;
  if (v3 || v1[14])
  {
    *((_DWORD *)v1 + 25) = 0;
    result = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))v1[4])(v1[3], 3, v1 + 11, (uint64_t)v1 + 100, 0, 0);
    v4 = v1[14];
    v1[11] = 0;
    v1[12] = 0;
    if (v4)
      result = heap_Free(*(_QWORD **)(*v1 + 8), v4);
    v1[14] = 0;
    v1[15] = 0;
    *((_DWORD *)v1 + 32) = 0;
  }
  return result;
}

uint64_t GetRate(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = critsec_Enter(*(_QWORD **)(a1 + 728));
  if ((result & 0x80000000) == 0)
  {
    *a2 = *(_WORD *)(a1 + 80);
    return critsec_Leave(*(_QWORD **)(a1 + 728));
  }
  return result;
}

uint64_t vol_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &IVol;
  return result;
}

uint64_t vol_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t UInt;
  uint64_t v15;
  int v16;
  void *v18;
  __int16 v19;
  void *v20;
  __int128 v21;
  uint64_t (*v22)(uint64_t, char *, const char *);
  unsigned int v23;
  uint64_t v24;

  v24 = 0;
  v23 = 0;
  v4 = 2164269063;
  if (!a4)
    return 2164269062;
  *a4 = 0;
  inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (a3 && *(_QWORD *)(a3 + 8))
  {
    v10 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 128);
    if (v10)
    {
      v11 = v10;
      *(_DWORD *)(v10 + 112) = 0;
      *(_QWORD *)(v10 + 40) = 0x100000001;
      *(_WORD *)(v10 + 82) = 0;
      *(_WORD *)(v10 + 92) = 0x7FFF;
      *(_DWORD *)(v10 + 86) = 5275647;
      *(_QWORD *)(v10 + 96) = 0;
      v12 = (_QWORD *)(v10 + 96);
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = v24;
      *(_QWORD *)(v10 + 8) = a1;
      *(_QWORD *)(v10 + 16) = a2;
      v13 = v24;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v24 + 40);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
      UInt = critsec_ObjOpen(*(_QWORD *)(v13 + 16), *(_QWORD **)(v13 + 8), (uint64_t *)(v10 + 120));
      if ((UInt & 0x80000000) == 0)
      {
        if ((paramc_ParamGetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"volume", &v23) & 0x80000000) != 0)
        {
          SetVolume(v11, 0x50u);
          UInt = paramc_ParamSetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"volume", 0x50u);
          if ((UInt & 0x80000000) != 0)
            goto LABEL_18;
        }
        else
        {
          SetVolume(v11, (unsigned __int16)v23);
        }
        *(_QWORD *)(v11 + 56) = v11;
        *(_QWORD *)(v11 + 64) = acceptor_VolCheckRange;
        *(_QWORD *)(v11 + 72) = acceptor_VolLearnChange;
        v15 = *(_QWORD *)(v11 + 48);
        v21 = *(_OWORD *)(v11 + 56);
        v22 = acceptor_VolLearnChange;
        UInt = paramc_ListenerAdd(v15, "volume", &v21);
        if ((UInt & 0x80000000) == 0)
        {
          UInt = paramc_ParamGetUInt(*(_QWORD *)(v24 + 40), (uint64_t)"frequencyhz", &v23);
          if ((UInt & 0x80000000) == 0)
          {
            v16 = (unsigned __int16)v23;
            if (*(unsigned __int16 *)(v11 + 80) == (unsigned __int16)v23 && *v12)
            {
              v4 = 0;
LABEL_20:
              *a4 = v11;
              return v4;
            }
            *(_WORD *)(v11 + 80) = v23;
            v4 = 2164269071;
            if (v16 > 15999)
            {
              if (v16 == 16000)
              {
                v18 = &as16FadeOut_16;
                v19 = 495;
                v20 = &as16FadeIn_16;
                goto LABEL_31;
              }
              if (v16 == 22050)
              {
                v18 = &as16FadeOut_22;
                v19 = 676;
                v20 = &as16FadeIn_22;
                goto LABEL_31;
              }
            }
            else
            {
              if (v16 == 8000)
              {
                v18 = &as16FadeOut_8;
                v19 = 255;
                v20 = &as16FadeIn_8;
                goto LABEL_31;
              }
              if (v16 == 11025)
              {
                v18 = &as16FadeOut_11;
                v19 = 345;
                v20 = &as16FadeIn_11;
LABEL_31:
                v4 = 0;
                *(_WORD *)(v11 + 84) = v19;
                *(_QWORD *)(v11 + 96) = v20;
                *(_QWORD *)(v11 + 104) = v18;
                goto LABEL_20;
              }
            }
LABEL_19:
            vol_ObjClose(v11);
            v11 = 0;
            goto LABEL_20;
          }
        }
      }
LABEL_18:
      v4 = UInt;
      goto LABEL_19;
    }
    return 2164269066;
  }
  return v4;
}

uint64_t vol_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (!a1)
    return 2164269062;
  v2 = *(_QWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v3 = paramc_ListenerRemove(v2, "volume", &v6);
  v4 = *(_QWORD *)(a1 + 120);
  if (v4)
    critsec_ObjClose(v4);
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return v3;
}

uint64_t vol_ResetParams(uint64_t a1)
{
  if (a1)
    return paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"volume", 0x50u);
  else
    return 2164269062;
}

uint64_t vol_Process(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  int v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  int v39;
  unsigned int v40;
  __int16 v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  char __s[8];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  result = 2164269062;
  if (!a1 || !a3 || !a4)
    return result;
  v10 = a5;
  v48 = *a3;
  if (!(a5 | *a3))
  {
    *(_DWORD *)(a1 + 40) = 1;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) == 1)
  {
LABEL_7:
    if (*(_DWORD *)(a1 + 112))
    {
      *(_DWORD *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 44) = 1;
      *(_WORD *)(a1 + 82) = 0;
      result = paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"volume", 0x50u);
      if ((result & 0x80000000) != 0)
        return result;
    }
    *(_DWORD *)(a1 + 40) = 3;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, _DWORD *, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24), a2, a3, a4, 0, 0);
    goto LABEL_10;
  }
  v13 = *a4;
  v52 = 0;
  result = critsec_Enter(*(_QWORD **)(a1 + 120));
  if ((result & 0x80000000) != 0)
    return result;
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    *(_DWORD *)(a1 + 44) = 1;
    *(_WORD *)(a1 + 82) = 0;
    LOWORD(v14) = *(_WORD *)(a1 + 86);
    *(_WORD *)(a1 + 90) = v14;
  }
  else
  {
    LOWORD(v14) = *(_WORD *)(a1 + 92);
  }
  v46 = a2;
  v51 = 0;
  v49 = a6;
  v50 = -1;
  v15 = 0;
  if ((_DWORD)v13)
  {
    v16 = 0;
    v17 = 0;
    v47 = v10;
    v18 = v48;
    do
    {
      if ((_DWORD)v17 == v16)
      {
        v19 = v13;
        SearchNextMarkerOfRTCSubType(v10, v49, &VOL_RTC_INTEREST, 1u, &v51, &v50, &v52);
        v15 = v51;
        if (v51 >= v49)
          v20 = -1;
        else
          v20 = *(_DWORD *)(v10 + 32 * v51 + 12);
        if (v52)
        {
          if (*(_DWORD *)(v10 + 32 * v50) == 24)
          {
            v21 = *(unsigned __int16 *)(v10 + 32 * v50 + 24);
            *(_WORD *)(a1 + 88) = v21;
          }
          else
          {
            v21 = *(unsigned __int16 *)(a1 + 88);
          }
          LH_itoa(v21, __s, 0xAu);
          v22 = strlen(__s);
          paramc_ParamSet(*(_QWORD *)(a1 + 48), (uint64_t)"volume", __s, (v22 + 1));
          v23 = *(unsigned __int16 *)(a1 + 88);
          if (v23 >= 0x64)
            v23 = 100;
          v24 = aVolPar2Amplif[v23];
          *(_WORD *)(a1 + 86) = v24;
          if (v16 || *(_DWORD *)(a1 + 40) != 3)
          {
            v25 = v24 == (unsigned __int16)v14;
            if (v24 > (unsigned __int16)v14)
              v26 = 2;
            else
              v26 = 3;
            *(_DWORD *)(a1 + 44) = v26;
            *(_WORD *)(a1 + 90) = v14;
            if (v25)
            {
              *(_DWORD *)(a1 + 44) = 1;
              *(_WORD *)(a1 + 82) = 0;
            }
            else
            {
              *(_WORD *)(a1 + 82) = *(_WORD *)(a1 + 84);
            }
          }
          else
          {
            *(_WORD *)(a1 + 82) = 0;
            *(_DWORD *)(a1 + 44) = 1;
            LOWORD(v14) = v24;
          }
          v10 = v47;
          v15 = v51;
          v50 = v51;
          if (v51 < v49)
            v15 = ++v51;
        }
        v16 = v20;
        v13 = v19;
        v18 = v48;
      }
      v27 = *(unsigned __int16 *)(a1 + 82);
      if (*(_WORD *)(a1 + 82))
      {
        if (*(unsigned __int16 *)(a1 + 84) >= v27)
        {
          v35 = 104;
          if (*(_DWORD *)(a1 + 44) == 2)
            v35 = 96;
          v28 = *(_WORD *)(*(_QWORD *)(a1 + v35) + 2 * v27);
        }
        else
        {
          v28 = 0;
        }
        v14 = *(unsigned __int16 *)(a1 + 86);
        v36 = *(unsigned __int16 *)(a1 + 90) + (((v14 - *(unsigned __int16 *)(a1 + 90)) * v28) >> 15);
        v37 = v27 - 1;
        *(_WORD *)(a1 + 82) = v27 - 1;
        v38 = *(__int16 *)(v18 + 2 * v17);
        if (v37)
          LOWORD(v14) = v36;
        else
          *(_DWORD *)(a1 + 44) = 1;
        v39 = (unsigned __int16)v36 * v38;
        v40 = v39 >> 15;
        if (v39 < -1073709056)
          LOWORD(v40) = -32767;
        if (v39 <= 0x3FFFFFFF)
          v41 = v40;
        else
          v41 = 0x7FFF;
        *(_WORD *)(v18 + 2 * v17) = v41;
        v29 = (v17 + 1);
      }
      else
      {
        if (v16 >= v13)
          v29 = v13;
        else
          v29 = v16;
        if (*(_WORD *)(a1 + 88) != 80)
        {
          if (v17 >= v29)
          {
            v29 = v17;
          }
          else
          {
            v30 = v29 - v17;
            v31 = (__int16 *)(v18 + 2 * v17);
            do
            {
              v32 = *v31 * (unsigned __int16)v14;
              v33 = v32 >> 15;
              if (v32 < -1073709056)
                LOWORD(v33) = -32767;
              if (v32 <= 0x3FFFFFFF)
                v34 = v33;
              else
                v34 = 0x7FFF;
              *v31++ = v34;
              --v30;
            }
            while (v30);
          }
        }
      }
      v17 = v29;
    }
    while (v29 < v13);
  }
  if (v49)
  {
    v42 = v46;
    if (!(_DWORD)v13)
    {
      if (v15 < v49)
      {
        do
          SearchNextMarkerOfRTCSubType(v10, v49, &VOL_RTC_INTEREST, 1u, &v51, &v50, &v52);
        while (v51 < v49);
      }
      if (v52)
      {
        if (*(_DWORD *)(v10 + 32 * v50) == 24)
        {
          v43 = *(_DWORD *)(v10 + 32 * v50 + 24);
          *(_WORD *)(a1 + 88) = v43;
        }
        else
        {
          LOWORD(v43) = *(_WORD *)(a1 + 88);
        }
        v43 = (unsigned __int16)v43;
        if ((unsigned __int16)v43 >= 0x64u)
          v43 = 100;
        LOWORD(v14) = aVolPar2Amplif[v43];
        *(_WORD *)(a1 + 86) = v14;
        *(_WORD *)(a1 + 90) = *(_WORD *)(a1 + 92);
      }
    }
  }
  else
  {
    v42 = v46;
  }
  *(_WORD *)(a1 + 92) = v14;
  critsec_Leave(*(_QWORD **)(a1 + 120));
  if ((v42 & 2) != 0)
    v44 = 1;
  else
    v44 = 5;
  if ((v42 & 1) == 0)
    v44 = 4;
  *(_DWORD *)(a1 + 40) = v44;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, _DWORD *, uint64_t, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24), v42, a3, a4, v10, v49);
  v45 = *(_DWORD *)(a1 + 40);
  if (v45 == 5)
    goto LABEL_92;
  if (v45 == 4)
  {
LABEL_10:
    if (!*a3 || !*a4)
LABEL_92:
      *(_DWORD *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t vol_Break(uint64_t a1, int a2)
{
  uint64_t result;

  result = 2164269062;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      return 2164269073;
    }
    else
    {
      result = 0;
      if (a2)
        *(_DWORD *)(a1 + 112) = 1;
    }
  }
  return result;
}

uint64_t SetVolume(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  __int16 v10;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 120));
  if ((v4 & 0x80000000) == 0)
  {
    if (a2 >= 0x64)
      v5 = 100;
    else
      v5 = a2;
    *(_DWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 88) = v5;
    v6 = aVolPar2Amplif[v5];
    *(_WORD *)(a1 + 86) = v6;
    v7 = *(unsigned __int16 *)(a1 + 92);
    *(_WORD *)(a1 + 90) = v7;
    v8 = v6 == v7;
    if (v6 > v7)
      v9 = 2;
    else
      v9 = 3;
    *(_DWORD *)(a1 + 44) = v9;
    if (v8)
    {
      v10 = 0;
      *(_DWORD *)(a1 + 44) = 1;
    }
    else
    {
      v10 = *(_WORD *)(a1 + 84);
    }
    *(_WORD *)(a1 + 82) = v10;
    critsec_Leave(*(_QWORD **)(a1 + 120));
  }
  return v4;
}

uint64_t acceptor_VolCheckRange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t v6;

  v6 = 2164269063;
  *a4 = 1;
  if (!strcmp(__s1, "volume"))
  {
    if (atoi(a3) < 0x65)
      return 0;
    v6 = 2164269071;
  }
  *a4 = 0;
  return v6;
}

uint64_t acceptor_VolLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v5;
  unsigned int v6;

  v5 = 2164269063;
  if (!strcmp(__s1, "volume"))
  {
    v6 = atoi(a3);
    if (v6 <= 0x64)
      return SetVolume(a1, (unsigned __int16)v6);
    return 2164269071;
  }
  return v5;
}

uint64_t psi_lookup_ReadStream(unsigned __int8 *a1, int a2, _DWORD *a3, int a4, _WORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  unsigned int v8;
  uint32x4_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v16[400];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = 2164269056;
  if (a1 && a2 <= 50)
  {
    if (a2 >= 1)
    {
      v6 = a2;
      v7 = (int8x8_t *)v16;
      do
      {
        v8 = *a1++;
        v9 = (uint32x4_t)vdupq_n_s32(v8);
        *v7++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v9, (uint32x4_t)xmmword_1DECCFFD0), (int16x8_t)vshlq_u32(v9, (uint32x4_t)xmmword_1DECCFFC0))), (int8x8_t)0x101010101010101);
        --v6;
      }
      while (v6);
    }
    if (a4 >= 1)
    {
      v10 = 0;
      v11 = v16;
      do
      {
        v12 = (unsigned __int16)*a5;
        if (*a5)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            v14 += v11[v13] << v13;
            ++v13;
          }
          while ((_DWORD)v12 != (_DWORD)v13);
          v11 += v12;
        }
        else
        {
          v14 = 0;
        }
        *a3++ = v14;
        ++a5;
        ++v10;
      }
      while (v10 != a4);
    }
    return 0;
  }
  return v5;
}

uint64_t chi_DecodePolyphone__Create(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, __int128 *a5)
{
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  uint64_t Stream;
  char v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int16 *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int16 v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD v33[3];
  int v34;
  int v35;
  int v36;
  _BYTE v37[28];
  uint64_t v38;

  v8 = 0;
  v9 = 0;
  v38 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 80) = 0;
  v10 = a1 + 80;
  *(_DWORD *)(a1 + 336) = 5;
  *(_OWORD *)v37 = xmmword_1DECCFFE0;
  *(_OWORD *)&v37[12] = *(__int128 *)((char *)&xmmword_1DECCFFE0 + 12);
  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 138) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v11 = *a5;
  *(_OWORD *)(a1 + 252) = a5[1];
  *(_QWORD *)(a1 + 352) = a2;
  *(_OWORD *)(a1 + 236) = v11;
  do
  {
    v9 += *(_WORD *)&v37[v8];
    v8 += 2;
  }
  while (v8 != 12);
  if ((v9 & 7) != 0)
    v12 = (v9 >> 3) + 1;
  else
    v12 = v9 >> 3;
  Stream = psi_lookup_ReadStream(a4, v12, v33, 6, v37);
  if (!(_DWORD)Stream)
  {
    v14 = v35;
    *(_WORD *)(a1 + 32) = v34;
    v15 = v36;
    *(_DWORD *)(a1 + 28) = v36;
    Stream = psi_lookup_ReadStream(&a4[v12], v12, v33, v15, (_WORD *)((unint64_t)v37 | 0xC));
    if (!(_DWORD)Stream)
    {
      v16 = *(unsigned int *)(a1 + 28);
      if ((int)v16 >= 1)
      {
        memcpy((void *)(a1 + 56), v33, 4 * v16);
        v17 = 0;
        v18 = (__int16 *)((unint64_t)v37 | 0xC);
        v19 = v16;
        do
        {
          v20 = *v18++;
          v17 += v20;
          --v19;
        }
        while (v19);
        v21 = 0;
        v22 = (v17 & 7) == 0;
        LODWORD(v23) = v12 + ((unsigned __int16)(v17 & 0xFFF8) >> 3);
        if (v22)
          v23 = v23;
        else
          v23 = (v23 + 1);
        v24 = &a4[v23];
        v25 = a1 + 56;
        do
        {
          *(_QWORD *)(v25 + 8 * v21 - 16) = &v24[(int)v19];
          LODWORD(v19) = *(_DWORD *)(v25 + 4 * v21++) + v19;
        }
        while (v16 != v21);
      }
      v26 = *(_WORD *)(a1 + 32);
      *(_WORD *)(a1 + 348) = v26;
      Stream = 2164269056;
      if (!smc1175mrf22spi_GetInfo(v26, v14, 0, a1 + 96))
      {
        v28 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 126), 1);
        *(_QWORD *)(a1 + 64) = v28;
        if (v28)
        {
          if (!smc1175mrf22spi_DecoderOpen(*(_WORD *)(a1 + 348), v14, &a4[v12 - 4], v28, v10))
          {
            v29 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 116), 1);
            *(_QWORD *)a1 = v29;
            if (v29
              && (v30 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 120), 1),
                  (*(_QWORD *)(a1 + 8) = v30) != 0)
              && (v31 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 120), 1),
                  (*(_QWORD *)(a1 + 16) = v31) != 0))
            {
              v32 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 128), 1);
              *(_QWORD *)(a1 + 72) = v32;
              Stream = 2164269066;
              if (v32)
              {
                *(_DWORD *)(a1 + 232) = 1;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 104);
                *(_WORD *)(a1 + 132) = 0;
                *(_WORD *)(a1 + 134) = *(_WORD *)(a1 + 120);
                Stream = vect_s_t__createVect(*(_QWORD **)(a3 + 8), a1 + 200, *(_DWORD *)(a1 + 236));
                if (!(_DWORD)Stream)
                {
                  Stream = vect_s_t__createVect(*(_QWORD **)(a3 + 8), a1 + 176, *(_DWORD *)(a1 + 236));
                  if (!(_DWORD)Stream)
                  {
                    Stream = vect_s_t__createVect(*(_QWORD **)(a3 + 8), a1 + 152, *(_DWORD *)(a1 + 236));
                    if (!(_DWORD)Stream)
                    {
                      Stream = vect_i_t__createVect(*(_QWORD **)(a3 + 8), a1 + 288, 0x1Eu);
                      if (!(_DWORD)Stream)
                        return vect_i_t__createVect(*(_QWORD **)(a3 + 8), a1 + 312, 0x1Eu);
                    }
                  }
                }
              }
            }
            else
            {
              return 2164269066;
            }
          }
        }
      }
    }
  }
  return Stream;
}

uint64_t chi_DecodePolyphone__Delete(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v4 = a1[9];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v4);
    a1[9] = 0;
  }
  v5 = a1[8];
  if (v5)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v5);
    a1[8] = 0;
  }
  v6 = a1[1];
  if (v6)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v6);
    a1[1] = 0;
  }
  v7 = a1[2];
  if (v7)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v7);
    a1[2] = 0;
  }
  if (*a1)
  {
    heap_Free(*(_QWORD **)(a2 + 8), *a1);
    *a1 = 0;
  }
  vect_i_t__deleteVect((uint64_t)(a1 + 36));
  vect_i_t__deleteVect((uint64_t)(a1 + 39));
  vect_i_t__deleteVect((uint64_t)(a1 + 25));
  vect_i_t__deleteVect((uint64_t)(a1 + 22));
  vect_i_t__deleteVect((uint64_t)(a1 + 19));
  v8 = a1[10];
  if (v8)
    return smc1175mrf22spi_DecoderClose(v8, a1[11]);
  else
    return 0;
}

uint64_t chi_DecodePolyphone__DeinitPoly(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 2164269056;
  v3 = a1[10];
  if (v3 && !smc1175mrf22spi_DecoderResetMemory(v3, a1[11]))
  {
    v2 = 0;
    a1[28] = 0;
  }
  return v2;
}

uint64_t chi_DecodePolyphone__InitPoly(uint64_t a1)
{
  *(_WORD *)(a1 + 146) = 2 * *(_WORD *)(a1 + 236);
  *(_DWORD *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  return 0;
}

uint64_t chi_DecodePolyphone__OneFrame(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  char v15;
  unsigned __int16 v16;
  int v17;
  _BYTE *v18;
  unsigned __int16 v19;
  _DWORD *v20;
  unsigned __int8 *v21;
  char *v22;
  _WORD *v23;
  _DWORD *v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  _WORD *v30;
  __int16 *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 v35;
  __int16 v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v4 = *(unsigned __int16 *)(a1 + 146);
  v38 = *(unsigned __int16 *)(a1 + 134);
  v39 = v4;
  if (*(_DWORD *)(a1 + 268) >= *(_DWORD *)(a1 + 272))
    return 2164269056;
  v37 = 0;
  if (*(_DWORD *)(a2 + 124) == *(_DWORD *)(a2 + 56))
  {
    v9 = *(unsigned __int8 *)(a2 + 120);
    switch(v9)
    {
      case 3:
        v10 = 480;
        break;
      case 2:
        v10 = 320;
        break;
      case 1:
        v10 = 160;
        break;
      default:
        v10 = 640;
        break;
    }
    v39 = v10;
    v37 = v9;
  }
  v12 = *(unsigned __int8 *)(a2 + 144);
  smc1175mrf22spi_getDecoderBufferSize(*(unsigned __int16 **)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 112), &v38, &v39, *(_DWORD *)(a1 + 232), &v37);
  if (*(_DWORD *)(a1 + 268) + v38 + 5 > *(_DWORD *)(a1 + 272)
    || (v13 = *(_DWORD *)(a2 + 124), v14 = *(_DWORD *)(a2 + 56), v13 == v14) && v12 == 1
    || v13 >= v14 && !*(_DWORD *)(a1 + 232))
  {
    v_equ_i_t(*(_DWORD **)(a1 + 320), *(int **)(a1 + 296), *(_DWORD *)(a1 + 336));
    *(_DWORD *)(a1 + 340) = *(_DWORD *)(a1 + 344);
  }
  else
  {
    result = smc1175mrf22spi_getSpectrum(*(unsigned __int16 **)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)(*(_QWORD *)(a2 + 112) + v38), *(_DWORD **)(a1 + 320), (_DWORD *)(a1 + 340));
    if ((_DWORD)result)
      return result;
  }
  v15 = v38;
  if (v38)
  {
    v16 = 0;
    v17 = *(_DWORD *)(a1 + 268);
    while (v17 < *(_DWORD *)(a1 + 272))
    {
      v18 = *(_BYTE **)(a2 + 112);
      *(_QWORD *)(a2 + 112) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(unsigned __int16 *)(a1 + 132) + (unint64_t)v16++) = *v18;
      v17 = *(_DWORD *)(a1 + 268) + 1;
      *(_DWORD *)(a1 + 268) = v17;
      if (v38 <= v16)
      {
        v15 = 0;
        goto LABEL_25;
      }
    }
    memcpy(*(void **)(a1 + 8), *(const void **)(a1 + 16), *(unsigned __int16 *)(a1 + 142));
    v15 = 1;
  }
  else
  {
    v16 = 0;
  }
LABEL_25:
  v19 = *(_WORD *)(a1 + 132) + v16;
  *(_WORD *)(a1 + 140) = v19;
  *(_WORD *)(a1 + 136) = v16;
  *(_WORD *)(a1 + 134) = v16;
  *(_DWORD *)(a1 + 276) += v16;
  *(_WORD *)(a1 + 138) = v19;
  if ((v15 & 1) == 0)
  {
    memcpy(*(void **)(a1 + 16), *(const void **)(a1 + 8), v19);
    *(_WORD *)(a1 + 142) = *(_WORD *)(a1 + 140);
  }
  v20 = *(_DWORD **)(a1 + 72);
  v22 = *(char **)a1;
  v21 = *(unsigned __int8 **)(a1 + 8);
  v23 = (_WORD *)(a1 + 144);
  v24 = *(_DWORD **)(a1 + 320);
  if (*(_DWORD *)(a1 + 232))
  {
    result = smc1175mrf22spi_DecoderProcess_F1(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v21, (_WORD *)(a1 + 140), v20, v22, v23, v24, *(_DWORD *)(a1 + 340), a3);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 232) = 0;
  }
  else
  {
    result = smc1175mrf22spi_DecoderProcess(*(unsigned __int16 **)(a1 + 80), *(_QWORD *)(a1 + 88), v21, (_WORD *)(a1 + 140), v20, v22, v23, v24, *(_DWORD *)(a1 + 340), v37, a3, a4);
    if ((_DWORD)result)
      return result;
  }
  v25 = *(unsigned __int16 *)(a1 + 146);
  v26 = v39;
  if (v39 != v25)
  {
    *(_WORD *)(a1 + 146) = v39;
    LOWORD(v25) = v26;
  }
  v27 = (unsigned __int16)v25 >> 1;
  *(_DWORD *)(a2 + 8) += v27;
  v28 = *(unsigned int *)(a1 + 24);
  v29 = *(unsigned __int16 *)(a1 + 144);
  if (v28 <= v29 >> 1)
  {
    v30 = *(_WORD **)(a1 + 160);
    v31 = *(__int16 **)a1;
    if ((_DWORD)v28)
    {
      v_equ_s_t(v30, &v31[v28], (int)((unsigned __int16)v25 - ((2 * v28) & 0xFFFE)) >> 1);
      v32 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 168) = (*(unsigned __int16 *)(a1 + 146) - 2 * (v32 & 0x7FFF)) >> 1;
      *(_DWORD *)(a2 + 8) -= v32;
      *(_DWORD *)(a1 + 24) = 0;
    }
    else
    {
      v_equ_s_t(v30, v31, v27);
      *(_DWORD *)(a1 + 168) = *(unsigned __int16 *)(a1 + 146) >> 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) = v28 - (v29 >> 1);
    *(_DWORD *)(a1 + 168) = 0;
  }
  v33 = *(unsigned __int16 *)(a1 + 140);
  v34 = *(unsigned __int16 *)(a1 + 138);
  if (v34 <= v33)
  {
    *(_WORD *)(a1 + 132) = 0;
    v36 = *(_WORD *)(a1 + 120);
  }
  else
  {
    v35 = v34 - v33;
    *(_WORD *)(a1 + 132) = v35;
    memmove(*(void **)(a1 + 8), (const void *)(*(_QWORD *)(a1 + 8) + v33), v35);
    v36 = *(_WORD *)(a1 + 120) - *(_WORD *)(a1 + 132);
  }
  *(_WORD *)(a1 + 134) = v36;
  v_equ_i_t(*(_DWORD **)(a1 + 296), *(int **)(a1 + 320), *(_DWORD *)(a1 + 336));
  result = 0;
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 340);
  return result;
}

uint64_t chi_DecodePolyphone__SmpRequested(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v4 = *a3;
  if (*a3 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_DWORD *)(a1 + 236);
  if (v4 < v11)
    v11 = *a3;
  v18 = v11;
  v12 = a1 + 176;
  do
  {
    if (v10 >= v4)
      break;
    result = chi_DecodePolyphone__OneFrameX(a1, a2, &v18, v12);
    if ((_DWORD)result)
      return result;
    v14 = *(_DWORD *)(a1 + 192);
    v10 += v14;
    v15 = v4 - v10;
    if (v4 - v10 >= *(_DWORD *)(a1 + 236))
      v15 = *(_DWORD *)(a1 + 236);
    v18 = v15;
    v_equ_s_t((_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v9), *(__int16 **)(a1 + 184), v14);
    v16 = *(_DWORD *)(a1 + 192);
    v17 = *(_DWORD *)(a1 + 280) + v16;
    *(_DWORD *)(a1 + 280) = v17;
    if (v17 >= a2[32])
      break;
    v9 += v16;
  }
  while (*(_DWORD *)(a1 + 276) < *(_DWORD *)(a1 + 272));
  result = 0;
  *a3 = v10;
  return result;
}

uint64_t chi_DecodePolyphone__OneFrameX(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  _WORD *v11;
  __int16 *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  __int16 *v28;
  int v29;

  result = 2164269056;
  *(_DWORD *)(a4 + 16) = 0;
  v8 = *(_DWORD *)(a1 + 236);
  v9 = a2[31];
  if (*a3 <= v8)
  {
    v10 = *(_DWORD *)(a1 + 228);
    if (v10 >= 1)
    {
      v11 = *(_WORD **)(a4 + 8);
      v12 = (__int16 *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224));
      if (v10 >= *a3)
      {
        v_equ_s_t(v11, v12, *a3);
        v19 = *a3;
        *(_DWORD *)(a4 + 16) = *a3;
        v20 = *(_DWORD *)(a1 + 228);
        *(_DWORD *)(a1 + 224) += *a3;
        *(_DWORD *)(a1 + 228) = v20 - *a3;
        *a3 = v19;
        if (*(_DWORD *)(a1 + 228))
          return 0;
      }
      else
      {
        v_equ_s_t(v11, v12, *(_DWORD *)(a1 + 228));
        result = 0;
        v14 = *(_DWORD *)(a1 + 224);
        v13 = *(_DWORD *)(a1 + 228);
        *(_DWORD *)(a4 + 16) = v13;
        *(_QWORD *)(a1 + 224) = (v14 + v13);
        *a3 = v13;
        if (*(_DWORD *)(a1 + 228))
          return result;
      }
      result = 0;
      *(_DWORD *)(a1 + 224) = 0;
      return result;
    }
    if (v9 <= a2[14])
    {
      result = chi_DecodePolyphone__OneFrame(a1, (uint64_t)a2, v9 >= a2[13] - 3, v9 >= a2[13] - 18);
      if (!(_DWORD)result)
      {
        v16 = a2[31];
        v17 = a2[13];
        v18 = v16 == v17;
        if (v16 < v17)
        {
          result = 0;
LABEL_30:
          a2[31] = v16 + 1;
          return result;
        }
        v21 = a2[14];
        if (!v18)
        {
          if (v16 == v21)
          {
            v24 = a2[12];
            v8 = v24 + 1;
            v25 = *a3;
            if (*a3 <= v24)
            {
              v26 = v8 - v25;
              v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a1 + 160), v25);
              *(_DWORD *)(a4 + 16) += *a3;
              v27 = (_WORD *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224));
              v28 = (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * *a3);
LABEL_24:
              v_equ_s_t(v27, v28, v26);
              result = 0;
              *(_DWORD *)(a1 + 228) = v26;
LABEL_29:
              v16 = a2[31];
              goto LABEL_30;
            }
          }
          else
          {
            v29 = v8 - *a3;
            if (v8 > *a3)
            {
              v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a1 + 160), *a3);
              *(_DWORD *)(a4 + 16) += *a3;
              v_equ_s_t((_WORD *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224)), (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * *a3), v29);
              result = 0;
              *(_DWORD *)(a1 + 228) = v29;
              goto LABEL_29;
            }
          }
          v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a1 + 160), v8);
          result = 0;
          *(_DWORD *)(a4 + 16) += v8;
          *a3 = v8;
          goto LABEL_29;
        }
        if (v16 == v21)
        {
          v22 = a2[11];
          v23 = a2[12] - v22 + 1;
        }
        else
        {
          v22 = a2[11];
          v23 = v8 - v22;
        }
        v26 = v23 - *a3;
        if (v23 <= *a3)
        {
          v_equ_s_t(*(_WORD **)(a4 + 8), (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * v22), v23);
          result = 0;
          *(_DWORD *)(a4 + 16) += v23;
          *a3 = v23;
          goto LABEL_29;
        }
        v_equ_s_t(*(_WORD **)(a4 + 8), (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * v22), *a3);
        *(_DWORD *)(a4 + 16) += *a3;
        v27 = (_WORD *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224));
        v28 = (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * (a2[11] + *a3));
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t xi_figureOutSomething(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v2 = *(_DWORD *)(a1 + 132);
  v3 = *(_DWORD *)(a1 + 92);
  v4 = *(_DWORD *)(a1 + 100);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)a1 + v3;
  v7 = v6 + *(_DWORD *)(a1 + 96);
  v8 = v5 + v7;
  v9 = *(_DWORD *)(a1 + 104) + v4;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v9 + v5 + v7;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v5;
  v10 = v5 + v7 - 1;
  if ((v5 + v7 < 0) ^ __OFADD__(v5, v7) | (v5 + v7 == 0))
    v10 = 0;
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 80) = v5;
  *(_DWORD *)(a1 + 84) = 0;
  if ((a2 & 0xF) != 0)
  {
    if ((a2 & 4) != 0)
    {
      v11 = 0;
      *(_DWORD *)(a1 + 60) = v7;
    }
    else
    {
      *(_DWORD *)(a1 + 60) = v6;
      v11 = *(_DWORD *)(a1 + 156);
      v5 += v11;
      *(_DWORD *)(a1 + 80) = v5;
      *(_DWORD *)(a1 + 84) = v11;
      v7 = v6;
    }
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 152);
    v7 -= v11;
    *(_DWORD *)(a1 + 60) = v7;
    v5 += v11;
    *(_DWORD *)(a1 + 80) = v5;
    *(_DWORD *)(a1 + 84) = v11;
  }
  *(_DWORD *)(a1 + 72) = v11;
  *(_DWORD *)(a1 + 88) = v5;
  if (a2 <= 0xF)
  {
    v12 = *(_DWORD *)(a1 + 152);
    v10 += v12;
    *(_DWORD *)(a1 + 64) = v10;
  }
  else
  {
    if ((a2 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 64) = v10;
      goto LABEL_15;
    }
    v10 = v9 + v8 - 1;
    *(_DWORD *)(a1 + 64) = v10;
    v12 = *(_DWORD *)(a1 + 160);
  }
  *(_DWORD *)(a1 + 80) = v12 + v5;
LABEL_15:
  *(_DWORD *)(a1 + 68) = v10 - v7 + 1;
  v13 = v7 - v3;
  v14 = v10 + v4;
  *(_DWORD *)(a1 + 32) = v7 - v3;
  *(_DWORD *)(a1 + 36) = v14;
  v15 = 4;
  if (a2 >= 0x10 && (a2 & 0x40) == 0)
  {
    v16 = v14 % v2;
    if (v14 % v2 <= 239)
    {
      if (v16 <= 159)
      {
        if (v16 <= 79)
        {
          if (v16 < 0)
            goto LABEL_26;
          v15 = 1;
        }
        else
        {
          v15 = 2;
        }
      }
      else
      {
        v15 = 3;
      }
    }
    else
    {
      v15 = 4;
    }
  }
  *(_BYTE *)(a1 + 120) = v15;
LABEL_26:
  if (v7 != v3)
  {
    v13 = v13 / v2 * v2;
    *(_DWORD *)(a1 + 32) = v13;
  }
  if (v14 <= v13)
  {
    v19 = v14;
  }
  else
  {
    v17 = v2 + ~(v14 % v2);
    v18 = v14 == v14 / v2 * v2 || v17 == 0;
    v19 = v14;
    if (!v18)
    {
      v19 = v17 + v14;
      *(_DWORD *)(a1 + 36) = v17 + v14;
    }
  }
  v20 = v7 / v2;
  v21 = v10 / v2;
  *(_DWORD *)(a1 + 52) = v7 / v2;
  *(_DWORD *)(a1 + 56) = v10 / v2;
  v22 = v7 % v2;
  *(_DWORD *)(a1 + 40) = v19 - v13 + 1;
  *(_DWORD *)(a1 + 44) = v22;
  v23 = v10 % v2;
  *(_DWORD *)(a1 + 48) = v23;
  v24 = v21 - v20;
  v25 = v23 - v22;
  v26 = v2 - v22 + v23;
  v27 = v26 + 1;
  if (v24 != 1)
    v27 = v25 + 1;
  v28 = v26 + (v24 - 1) * v2;
  if (v24 >= 2)
    v29 = v28 + 1;
  else
    v29 = v27;
  *(_DWORD *)(a1 + 128) = v29;
  v30 = v19 - v14;
  if (v19 - v14 < 0)
    v30 = v14 - v19;
  if (v30 >= v2)
    return 2164269056;
  v31 = 0;
  *(_DWORD *)(a1 + 76) = 0;
  return v31;
}

uint64_t xi_Segment__InitPoly_withDur(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  char v6;
  unsigned int v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 148) = a4;
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = a3;
  if (!a6)
    v8 = 0;
  *(_QWORD *)(a1 + 112) = a5 + v8;
  *(_DWORD *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 144) = (v6 & 0x10) != 0;
  xi_figureOutSomething(a1, v7);
  return 0;
}

uint64_t xi_Segment__DeinitPoly(_QWORD *a1)
{
  *a1 = 0;
  a1[14] = 0;
  return 0;
}

uint64_t xi_Segment__Init_for_psola(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 132) = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 168) = a2;
  return 0;
}

uint64_t xi_Segment__Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;

  *(_QWORD *)(a1 + 132) = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a3 + 8);
  v3 = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 156) = v3;
  v4 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 160) = v4;
  *(_DWORD *)(a1 + 92) = 640;
  *(_QWORD *)(a1 + 96) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 168) = a2;
  return 0;
}

uint64_t rho_Concat__findbestmatch_fixed(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  __int16 *v22;
  __int16 *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  __int16 *v49;

  v3 = a1[4];
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(__int16 **)(a3 + 8);
  v7 = (int)a1[2];
  v8 = a1[2];
  if ((int)v7 < 1)
  {
    LOBYTE(v10) = 0;
    v16 = 0;
    v15 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v6[v9] >> v10;
      v13 = v11 + v12 * v12;
      if (v13 < 0x1FFFFFF)
      {
        v11 = v13;
      }
      else
      {
        do
        {
          if ((v10 + 1) > 1)
            ++v10;
          else
            v10 = 1;
          v11 = v13 >> 2;
          v31 = v13 <= 134217723;
          v13 >>= 2;
        }
        while (!v31);
      }
      v9 += v3;
    }
    while (v9 < v8);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = v6[v14] >> v10;
      v15 += v17 * v17;
      v16 += (*(__int16 *)(v5 + 2 * v14) >> v10) * v17;
      v14 += v3;
    }
    while (v14 < v8);
  }
  v18 = a1[1];
  if (v3 <= v18)
  {
    v45 = a1[1];
    if (v15 <= 125 << (2 * v10))
      v20 = 125 << (2 * v10);
    else
      v20 = v15;
    v46 = v3;
    v47 = v8;
    v21 = rho_Concat__sqrt(v20);
    LODWORD(v19) = 0;
    v22 = &v6[v4];
    v23 = v6;
    LODWORD(v8) = v47;
    v24 = v46;
    v25 = v16 / v21;
    do
    {
      v49 = v6;
      v48 = v19;
      if ((int)v8 < 1)
      {
        v27 = 0;
      }
      else
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v27 += (*(__int16 *)(v5 + 2 * v26) >> v10) * (v22[v26] >> v10);
          v26 += v4;
        }
        while (v26 < v7);
      }
      v28 = v23[v7] >> v10;
      v15 = v15 - (*v23 >> v10) * (*v23 >> v10) + v28 * v28;
      v23 += v4;
      if (v15 <= 125 << (2 * v10))
        v29 = 125 << (2 * v10);
      else
        v29 = v15;
      v30 = v27 / (int)rho_Concat__sqrt(v29);
      v31 = v30 <= v25;
      if (v30 <= v25)
        v19 = v48;
      else
        v19 = v24;
      if (v30 > v25)
        v25 = v30;
      v6 = v49;
      if (!v31)
        v6 = v23;
      v3 = v46;
      v8 = v47;
      v24 += v46;
      v22 += v4;
      v18 = v45;
    }
    while ((int)v24 <= v45);
  }
  else
  {
    v19 = 0;
  }
  v32 = v3 - 1;
  v33 = v19 + v3 - 1;
  v34 = v19 - (v3 - 1);
  v35 = v18 - 1;
  v36 = v34 & ~(v34 >> 31);
  if (v33 < v18)
    v35 = v19 + v3 - 1;
  else
    v36 = v19 - (v3 - 1);
  if (v36 <= v35)
  {
    v37 = 0;
    if (v34 < 0 && v33 < v18)
      v32 = v19;
    v39 = &v6[-v32];
    v40 = 2 * v8;
    do
    {
      if ((int)v7 < 1)
      {
        v42 = 0;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        do
        {
          v42 += (*(__int16 *)(v5 + v41) >> v10) * (v39[v41 / 2] >> v10);
          v41 += 2;
        }
        while (v40 != v41);
      }
      if (v42 <= v37)
        v19 = v19;
      else
        v19 = v36;
      if (v42 > v37)
        v37 = v42;
      ++v39;
    }
    while (v36++ != v35);
  }
  return v19;
}

uint64_t rho_Concat__sqrt(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  result = 1;
  if (a1 >= 2)
  {
    v3 = a1 >> 30;
    if (a1 >> 30)
      a1 -= 0x40000000;
    v4 = v3 != 0;
    v5 = v4 << 15;
    v6 = (v4 << 30) | 0x10000000;
    v7 = ((v4 & 1) << 15) | 0x4000;
    if (a1 >= v6)
      v8 = (v4 << 30) | 0x10000000;
    else
      v8 = 0;
    if (a1 >= v6)
      v5 = v7;
    v9 = a1 - v8;
    v10 = ((unsigned __int16)v5 >> 14 << 28) | 0x4000000;
    v11 = v5 | 0x2000;
    if (v9 < v10)
    {
      v10 = 0;
      v11 = v5;
    }
    v12 = v9 - v10;
    v13 = ((v11 >> 13) << 26) | 0x1000000;
    if (v12 >= v13)
      v11 |= 0x1000u;
    else
      v13 = 0;
    v14 = v12 - v13;
    v15 = (v11 << 12) + 0x400000;
    if (v14 >= v15)
      v11 += 2048;
    else
      v15 = 0;
    v16 = v14 - v15;
    v17 = (v11 << 11) + 0x100000;
    if (v16 >= v17)
      v11 += 1024;
    else
      v17 = 0;
    v18 = v16 - v17;
    v19 = (v11 << 10) + 0x40000;
    if (v18 >= v19)
      v11 += 512;
    else
      v19 = 0;
    v20 = v18 - v19;
    v21 = (v11 << 9) + 0x10000;
    if (v20 >= v21)
      v11 += 256;
    else
      v21 = 0;
    v22 = v20 - v21;
    v23 = (v11 << 8) + 0x4000;
    if (v22 >= v23)
      v11 += 128;
    else
      v23 = 0;
    v24 = v22 - v23;
    v25 = (v11 << 7) + 4096;
    if (v24 >= v25)
      v11 += 64;
    else
      v25 = 0;
    v26 = v24 - v25;
    v27 = (v11 << 6) + 1024;
    if (v26 >= v27)
      v11 += 32;
    else
      v27 = 0;
    v28 = v26 - v27;
    v29 = 32 * v11 + 256;
    if (v28 >= v29)
      v11 += 16;
    else
      v29 = 0;
    v30 = v28 - v29;
    v31 = 16 * v11 + 64;
    if (v30 >= v31)
      v11 += 8;
    else
      v31 = 0;
    v32 = v30 - v31;
    v33 = 8 * v11 + 16;
    if (v32 >= v33)
      v11 += 4;
    else
      v33 = 0;
    v34 = v32 - v33;
    v35 = 4 * v11 + 4;
    if (v34 >= v35)
      v11 += 2;
    else
      v35 = 0;
    if (v34 - v35 < ((2 * v11) | 1))
      return v11;
    else
      return v11 + 1;
  }
  return result;
}

uint64_t mu_Reset(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return 0;
}

uint64_t psi_Lookup_AvgSpeed(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 72);
  if (*(_WORD *)(a1 + 72))
    return 0;
  else
    return 2164269057;
}

uint64_t psi_VFDat__unloadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return v4;
  if (*(_BYTE *)(a2 + 44) == 1)
  {
    vect_i_t__deleteVect(a2);
    v4 = 0;
LABEL_11:
    if (*(_BYTE *)(a3 + 44) == 1)
    {
      vect_i_t__deleteVect(a3);
    }
    else
    {
      v18 = *(_QWORD **)(a3 + 24);
      if (v18)
      {
        v4 = ssftriff_reader_ReleaseChunkData(v18, v9, v10, v11, v12, v13, v14, v15);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    if (*(_BYTE *)(a4 + 44) == 1)
    {
      vect_i_t__deleteVect(a4);
      return v4;
    }
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
        return brk_DataClose(v20, *(_QWORD *)(a4 + 32));
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (!v16)
    return 0;
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
    return 0;
  v4 = brk_DataClose(v17, *(_QWORD *)(a2 + 32));
  if ((v4 & 0x80000000) == 0)
  {
    *(_QWORD *)(a2 + 32) = 0;
    goto LABEL_11;
  }
  return v4;
}

uint64_t psi_VFDat__loadData(uint64_t a1, _WORD *a2, uint64_t a3, const char *a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  uint64_t inited;
  uint64_t ChunkData;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v35;
  int v36;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43[2];
  int v44;
  unsigned __int8 v45;
  int v46[2];
  uint64_t v47;
  char v48[8];
  __int16 v49;
  uint64_t __dst;
  unsigned __int8 v51;
  char v52[72];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v46 = 0;
  v47 = 0;
  v45 = 0;
  v44 = 0;
  *(_QWORD *)v43 = 0;
  v42 = 0;
  memset(v52, 0, 64);
  inited = InitRsrcFunction(a2, a3, &v47);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)(a1 + 64) = v47;
  ChunkData = ssftriff_reader_ObjOpen(a2, a3, 0, a4, "VFNT", 131333, (uint64_t *)v46);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_60;
  v27 = ssftriff_reader_OpenChunk(*(uint64_t *)v46, &v44, (unsigned int *)&v42, 0, v23, v24, v25, v26);
  if ((v27 & 0x80000000) != 0)
  {
LABEL_56:
    v28 = v27;
    if ((v27 & 0x1FFF) != 0x14)
      goto LABEL_61;
    v28 = ssftriff_reader_ObjClose(*(_QWORD **)v46, v20, v21, v22, v23, v24, v25, v26);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_61;
    return v28;
  }
  v28 = 2164269066;
  v39 = (_QWORD *)(a7 + 8);
  v40 = a7;
  v38 = (uint64_t *)(a7 + 24);
  v29 = a9;
  while (v44 ^ 0x464E4956 | v45)
  {
    if (!(v44 ^ 0x52444F43 | v45))
    {
      *(_QWORD *)(a1 + 56) = v29;
      if (!a10)
      {
        *(_BYTE *)(v29 + 44) = 0;
        goto LABEL_54;
      }
      *(_BYTE *)(v29 + 44) = 1;
      ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v46, v42, v43, v22, v23, v24, v25, v26);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_60;
      if ((vect_uc_t__createVect(*(_QWORD **)(*(_QWORD *)(a1 + 64) + 8), v29, v42) & 0x80000000) != 0)
        goto LABEL_61;
      v35 = *(_BYTE **)(v29 + 8);
      goto LABEL_44;
    }
    if (v44 ^ 0x4E555443 | v45)
    {
      if (v44 ^ 0x54494E55 | v45)
      {
        if (v44 ^ 0x48435053 | v45)
        {
          log_OutText(*(_QWORD *)(v47 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"Unknown data: %s for %s", v24, v25, v26, (uint64_t)&v44);
        }
        else
        {
          *(_QWORD *)(a1 + 40) = a5;
          if (a6)
          {
            *(_BYTE *)(a5 + 44) = 1;
            ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v46, v42, v43, v22, v23, v24, v25, v26);
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_60;
            if ((vect_uc_t__createVect(*(_QWORD **)(*(_QWORD *)(a1 + 64) + 8), a5, v42) & 0x80000000) != 0)
              goto LABEL_61;
            *(_DWORD *)(a5 + 40) = 0;
            v_equ_uc_t(*(_BYTE **)(a5 + 8), *(char **)v43, v42);
            *(_QWORD *)(a5 + 32) = 0;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a5 + 8) + *(unsigned int *)(a5 + 40);
          }
          else
          {
            *(_BYTE *)(a5 + 44) = 0;
            *(_QWORD *)(a5 + 8) = 0;
            v36 = v42;
            *(_DWORD *)(v29 + 16) = v42;
            *(_DWORD *)(a5 + 20) = v36;
            *(_DWORD *)(a5 + 40) = ssftriff_reader_GetPosition(*(uint64_t *)v46);
            ChunkData = brk_DataOpen(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24));
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_60;
            *(_QWORD *)(a1 + 24) = 0;
          }
        }
        goto LABEL_54;
      }
      *(_QWORD *)(a1 + 48) = v40;
      if (!a8)
      {
        *(_BYTE *)(v40 + 44) = 0;
        ChunkData = ssftriff_reader_DetachChunkData(*(uint64_t *)v46, v38, v39, v22, v23, v24, v25, v26);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_60;
        goto LABEL_54;
      }
      *(_BYTE *)(v40 + 44) = 1;
      ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v46, v42, v43, v22, v23, v24, v25, v26);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_60;
      if ((vect_uc_t__createVect(*(_QWORD **)(*(_QWORD *)(a1 + 64) + 8), v40, v42) & 0x80000000) != 0)
        goto LABEL_61;
      v35 = (_BYTE *)*v39;
LABEL_44:
      v_equ_uc_t(v35, *(char **)v43, v42);
    }
LABEL_54:
    ChunkData = ssftriff_reader_CloseChunk(*(uint64_t *)v46);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_60;
    v27 = ssftriff_reader_OpenChunk(*(uint64_t *)v46, &v44, (unsigned int *)&v42, 0, v23, v24, v25, v26);
    if ((v27 & 0x80000000) != 0)
      goto LABEL_56;
  }
  v41 = 0;
  ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v46, v42, v43, v22, v23, v24, v25, v26);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_60;
  v30 = v42;
  if (!v42)
  {
LABEL_35:
    v29 = a9;
    goto LABEL_54;
  }
  v31 = 0;
  while (1)
  {
    v48[0] = 0;
    LOBYTE(__dst) = 0;
    v41 = 64;
    ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v46, *(uint64_t *)v43, v30, v31, &__dst, &v41);
    if ((ChunkData & 0x80000000) == 0)
    {
      v21 = v42;
      if (v31 < v42)
      {
        v31 += v41;
        v41 = 64;
        ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v46, *(uint64_t *)v43, v42, v31, v48, &v41);
      }
    }
    if ((ChunkData & 0x80000000) != 0)
      break;
    v32 = v41;
    if (__dst ^ 0x71657246 | BYTE4(__dst))
    {
      if (__dst ^ 0x6465657053677641 | v51)
      {
        if ((_DWORD)__dst == 1701080899 && WORD2(__dst) == 114)
        {
          if (v48[0])
          {
            if (*(_QWORD *)v48 != 0x3266726D35373131 || v49 != 50)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"SYNTH", 0, 0, (uint64_t)"Incompatible encoding of %s: %s", v24, v25, v26, (uint64_t)a4);
              ChunkData = 2164269081;
              break;
            }
          }
          strcpy(v52, "decoder/");
          __strcat_chk();
        }
      }
      else
      {
        *(_WORD *)(a1 + 72) = atoi(v48);
      }
    }
    else
    {
      *(_WORD *)(a1 + 74) = atoi(v48);
    }
    v31 += v32;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"VF attribute %s=%s", v24, v25, v26, (uint64_t)&__dst);
    v30 = v42;
    if (v31 >= v42)
      goto LABEL_35;
  }
LABEL_60:
  v28 = ChunkData;
LABEL_61:
  if (*(_QWORD *)v46)
    ssftriff_reader_ObjClose(*(_QWORD **)v46, v20, v21, v22, v23, v24, v25, v26);
  return v28;
}

uint64_t psi_mapCodedData(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v4;

  v4 = *a4;
  if ((_DWORD)v4)
    return brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_QWORD *)(a2 + 32), (*(_DWORD *)(a2 + 40) + a3), v4, a1 + 24);
  else
    return 0;
}

uint64_t psi_unMapCodedData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 16785425;
  result = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_QWORD *)(a2 + 32), v2);
  if ((result & 0x80000000) == 0)
    *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t psi_DataMapSegment__InitPoly(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v3 + 44))
    return 0;
  v5 = *a3;
  if (!(_DWORD)v5)
    return 0;
  else
    return brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_QWORD *)(v3 + 32), (*(_DWORD *)(v3 + 40) + *a2), v5, a1 + 24);
}

uint64_t psi_DataMapSegment__DeinitPoly(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v1 + 44))
    return 0;
  else
    return psi_unMapCodedData(a1, v1);
}

uint64_t convertFromMsecToTp(int a1)
{
  if (a1 < 1)
    return 0;
  else
    return 22 * a1
         + 3276 * HIWORD(a1)
         + ((26214 * HIWORD(a1)
           + 1638 * (unsigned __int16)a1
           + ((26214 * (unsigned __int16)a1 + 0x8000) >> 16)
           + 0x4000) >> 15);
}

uint64_t vu__UnitVector_t__Delete(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  if (!a1)
    return 2164269066;
  if (*(_QWORD *)a1)
  {
    heap_Free(*(_QWORD **)(a2 + 8), *(_QWORD *)a1);
    *(_QWORD *)a1 = 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v4);
    *(_QWORD *)(a1 + 8) = 0;
  }
  result = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t vu__fillUnitAndSubUnit__Init(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 2164269066;
  if (a1)
  {
    v4 = heap_Calloc(*(_QWORD **)(a2 + 8), 1, 40);
    *a1 = v4;
    if (v4)
    {
      v2 = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
    }
  }
  return v2;
}

uint64_t vu__fillUnitAndSubUnit__Denit(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 2164269066;
  if (a1)
  {
    v4 = *a1;
    if (*a1)
    {
      if (!vu__UnitVector_t__Delete(*a1, a2))
      {
        heap_Free(*(_QWORD **)(a2 + 8), v4);
        v2 = 0;
        *a1 = 0;
      }
    }
  }
  return v2;
}

uint64_t vu__fillUnitAndSubUnit__Begin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  char v9;
  uint64_t Vect;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _OWORD *v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  BOOL *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];

  v5 = *(_DWORD *)(a4 + 32);
  if (!v5)
    return 0;
  v9 = *(_BYTE *)(a4 + 8);
  v103 = 0;
  v104[0] = 0;
  v101 = 0;
  v102 = 0;
  v99 = 0;
  v100 = 0;
  v97 = 0;
  v98 = 0;
  v95 = 0;
  v96 = 0;
  v93 = 0;
  v94 = 0;
  v91 = 0;
  v92 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v84 = 0;
  v83 = 0;
  Vect = vect_c_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v88, v5);
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_c_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v85, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v97, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v100, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v94, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v91, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  v11 = *(_DWORD *)(a4 + 32);
  if (v11 < 1)
    goto LABEL_20;
  v12 = 0;
  for (i = 0; i < v11; i += 2)
  {
    v14 = *(_QWORD *)(a4 + 48);
    if (*(_BYTE *)(v14 + v12) == 35 && *(_BYTE *)(v14 + v12 + 1) == 35)
    {
      *(_BYTE *)(*(_QWORD *)(a4 + 96) + v12) = 80;
      *(_BYTE *)(*(_QWORD *)(a4 + 96) + v12 + 1) = 80;
      v11 = *(_DWORD *)(a4 + 32);
    }
    ++v12;
  }
  if (v11 < 2)
  {
LABEL_20:
    *v89 = 0;
    psi_Lookup__getPreviousDemiID(a3, **(_DWORD **)(a4 + 24), &v83, (_BYTE *)&v84 + 1, (_DWORD *)v104 + 1, v104, (int *)&v103 + 1, &v84, (unsigned int *)&v103);
    *v98 = v104[0];
    *v101 = HIDWORD(v104[0]);
    *v95 = HIDWORD(v103);
    *v92 = v103;
    *v86 = HIBYTE(v84) != 0;
    if (**(_BYTE **)(a4 + 48) != 35)
    {
      *v86 = 0;
      if (*(int *)(a4 + 32) >= 2)
        v89[1] = 0;
    }
    v18 = *(_DWORD *)(a4 + 32);
    if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + (v18 >> 1) - 1) != 35)
    {
      v89[v18 - 1] = 0;
      v19 = *(int *)(a4 + 32);
      if ((int)v19 < 1)
        goto LABEL_32;
      v86[v19 - 2] = 0;
      v18 = *(_DWORD *)(a4 + 32);
    }
    if (v18 >= 1)
    {
      v20 = 0;
      v21 = 0;
      v22 = -1;
      do
      {
        if (!v89[v20])
          ++v22;
        v21 += (v20++ & 1) == 0;
      }
      while (v18 != v20);
      goto LABEL_33;
    }
LABEL_32:
    v21 = 0;
    v22 = -1;
LABEL_33:
    Vect = 2164269056;
    v73 = (v22 + 1);
    v23 = heap_Calloc(*(_QWORD **)(a2 + 8), v73, 28);
    if (!v23)
      return 2164269066;
    v24 = v23;
    v25 = heap_Calloc(*(_QWORD **)(a2 + 8), v21, 16);
    if (!v25)
      return 2164269066;
    v72 = v22;
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v25;
    v74 = v25;
    *(_WORD *)(a1 + 16) = v73;
    *(_WORD *)(a1 + 18) = v21;
    v78 = (_OWORD *)v24;
    if (*(int *)(a4 + 32) >= 1)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v79 = 0;
      v77 = 0;
      v75 = a4 + 112;
      v76 = a4 + 88;
      v32 = 0xFFFFFFFFLL;
      while (1)
      {
        v33 = v101[v29];
        HIDWORD(v104[0]) = v33;
        v34 = v89;
        if (!v89[v29])
          v31 = 0;
        v35 = v29 >> 1;
        if (!*(_WORD *)(*(_QWORD *)(a4 + 120) + 2 * v35))
          break;
        if (v33 >= 206)
          goto LABEL_44;
        v36 = 1;
LABEL_45:
        if ((v29 & 1) == 0)
        {
          if (v29 > 1)
          {
            v37 = v77;
          }
          else
          {
            v37 = v77;
            if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + v35) != 35)
            {
              v38 = *(_QWORD *)(a4 + 72);
              v37 = v77 + *(unsigned __int8 *)(v38 + v35);
              *(_BYTE *)(v38 + v35) = 0;
              v34 = v89;
            }
          }
          v39 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 72) + v35);
          v40 = v74 + 16 * v79;
          *(_BYTE *)(v40 + 14) = v39;
          *(_WORD *)(v40 + 12) = v37;
          *(_DWORD *)v40 = v31;
          *(_DWORD *)(v40 + 4) = HIDWORD(v104[0]) + v30;
          v77 = v37 + v39;
          v33 = HIDWORD(v104[0]);
          v30 = 0;
        }
        v81 = v33;
        v82 = v30;
        v80 = v33 + v31;
        if (v34[v29])
        {
          v41 = v24 + 28 * (int)v32;
          v42 = v24;
          v43 = v32;
          vu__PadUnit(v76, v75, v41, v29);
          v32 = v43;
          v24 = v42;
          *(_DWORD *)(v41 + 4) += HIDWORD(v104[0]);
        }
        else
        {
          LODWORD(v104[0]) = v98[v29];
          v44 = (int)v32 + 1;
          HIDWORD(v103) = v95[v29];
          LODWORD(v103) = v92[v29];
          v45 = (_DWORD *)(v24 + 28 * v44);
          *v45 = HIDWORD(v103);
          v45[1] = HIDWORD(v104[0]);
          if ((v36 & 1) == 0)
          {
            *v45 = v33 + v31;
            v45[1] = HIDWORD(v104[0]);
          }
          v46 = (uint64_t)v78 + 28 * v44;
          *(_WORD *)(v46 + 16) = v79;
          *(_WORD *)(v46 + 18) = 0;
          *(_BYTE *)(v46 + 24) = 0;
          vu__FillUnit(a4 + 40, v76, v75, (uint64_t)v45, v29, *(_DWORD *)(a4 + 32), v9);
          *(_DWORD *)(v46 + 12) = v104[0];
          *(_DWORD *)(v46 + 20) = v103;
          v24 = (uint64_t)v78;
          v32 = v44;
        }
        v47 = v24 + 28 * (int)v32;
        if (v86[v29])
          *(_BYTE *)(v47 + 25) |= 0x10u;
        if (v29 == *(_DWORD *)(a4 + 32) - 1)
        {
          *(_BYTE *)(v47 + 25) |= (v9 & 4) >> 1;
          if ((v9 & 4) != 0)
          {
            v48 = v32;
            log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"Last phrase in sentence reached\n", v26, v27, v28, v71);
            v32 = v48;
          }
        }
        if ((v29 & 1) == 0)
        {
          ++*(_WORD *)(v47 + 18);
          ++v79;
        }
        v30 = v81 + v82;
        ++v29;
        v31 = v80;
        if ((uint64_t)v29 >= *(int *)(a4 + 32))
          goto LABEL_69;
      }
      v36 = 1;
      if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + v35) != 35 || v33 <= 205)
        goto LABEL_45;
LABEL_44:
      v36 = 0;
      v31 = (v33 - 5) >> 1;
      v33 = 5;
      HIDWORD(v104[0]) = 5;
      goto LABEL_45;
    }
    LODWORD(v32) = -1;
LABEL_69:
    if ((_DWORD)v32 != v72)
    {
      log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"error in synth_fx. Number of Units do not match!", v26, v27, v28, v71);
      return Vect;
    }
    v49 = v73;
    if ((v72 & 0x80000000) == 0)
    {
      v50 = 0;
      do
      {
        v51 = v24 + 28 * v50;
        v52 = *(_DWORD *)(v51 + 4);
        HIDWORD(v104[0]) = v52;
        v53 = *(unsigned __int16 *)(v51 + 18);
        if (*(_WORD *)(v51 + 18))
        {
          v54 = *(unsigned __int16 *)(v24 + 28 * v50 + 16);
          v55 = v53 + v54;
          v56 = (int *)(v74 + 4 + 16 * (v55 - 1));
          do
          {
            v57 = (v52 - *(v56 - 1)) & ~((v52 - *(v56 - 1)) >> 31);
            *v56 = v57;
            v56 -= 4;
            v52 = HIDWORD(v104[0]) - v57;
            HIDWORD(v104[0]) = v52;
            --v55;
          }
          while (v55 > v54);
        }
        ++v50;
      }
      while (v50 != v73);
    }
    vect_i_t__deleteVect((uint64_t)&v88);
    vect_i_t__deleteVect((uint64_t)&v85);
    *(_WORD *)(a1 + 20) = 0;
    if ((v72 & 0x80000000) == 0)
    {
      v61 = 0;
      v62 = v78;
      do
      {
        if (v61 && !*((_DWORD *)v78 + 7 * v61 + 1))
        {
          v63 = v49;
          v64 = (v49 - 1);
          if (v61 < (int)v64)
          {
            v65 = *((_BYTE *)v78 + 28 * v61 + 24);
            if ((v65 & 0xF) != 4 && (v65 & 0xF0) != 0x40)
            {
              log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"synth_fx: reducing number of fx units !", v58, v59, v60, v71);
              v66 = *((unsigned __int16 *)v78 + 14 * (v61 - 1) + 8);
              v67 = *((unsigned __int16 *)v78 + 14 * v61 + 8);
              if ((_DWORD)v67 != (_DWORD)v66)
              {
                *(_BYTE *)(v74 + 16 * v66 + 14) += *(_BYTE *)(v74 + 16 * v67 + 14);
                v68 = v64;
                v69 = v62;
                do
                {
                  *v69 = *(_OWORD *)((char *)v69 + 28);
                  *(_OWORD *)((char *)v69 + 12) = *(_OWORD *)((char *)v69 + 40);
                  v69 = (_OWORD *)((char *)v69 + 28);
                  --v68;
                }
                while (v61 != v68);
                *(_WORD *)(a1 + 16) = v64;
                v63 = v64;
              }
            }
          }
        }
        else
        {
          v63 = v49;
        }
        ++v61;
        v62 = (_OWORD *)((char *)v62 + 28);
        v49 = v63;
      }
      while (v61 < (int)v63);
    }
    vect_i_t__deleteVect((uint64_t)&v97);
    vect_i_t__deleteVect((uint64_t)&v100);
    vect_i_t__deleteVect((uint64_t)&v94);
    vect_i_t__deleteVect((uint64_t)&v91);
    return 0;
  }
  v15 = v11;
  while (1)
  {
    v16 = v15 - 1;
    if (psi_Lookup__getPreviousDemiID(a3, *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * (v15 - 1)), &v83, (_BYTE *)&v84 + 1, (_DWORD *)v104 + 1, v104, (int *)&v103 + 1, &v84, (unsigned int *)&v103))return 2164269056;
    v17 = (v15 - 1);
    v98[v17] = v104[0];
    v101[v17] = HIDWORD(v104[0]);
    v95[v17] = HIDWORD(v103);
    v92[v17] = v103;
    v89[v17] = *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * (v15 - 2)) == v83;
    v86[v17] = HIBYTE(v84) != 0;
    if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + (v16 >> 1)) == 35)
    {
      v89[v17] = 0;
      v86[v17] = 1;
    }
    --v15;
    if ((unint64_t)(v16 + 1) <= 2)
      goto LABEL_20;
  }
}

uint64_t vu__FillUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  uint64_t v9;
  uint64_t result;
  char v11;
  unsigned int v14;

  v9 = (uint64_t)a5 >> 1;
  result = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 2 * (a5 >> 1));
  *(_BYTE *)(a4 + 24) = 34;
  if ((a5 & 1) == 0)
  {
    *(_DWORD *)(a4 + 8) = 0;
    if ((_DWORD)result)
    {
      v11 = 2;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + v9) != 80)
        return result;
      v11 = 66;
    }
LABEL_18:
    *(_BYTE *)(a4 + 24) = v11;
    return result;
  }
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a4 + 8) = 0;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + v9) != 80)
      return result;
    v11 = 36;
    goto LABEL_18;
  }
  result = convertFromMsecToTp(result);
  if ((int)result <= 10)
    v14 = 10;
  else
    v14 = result;
  *(_DWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 24) = 32;
  if (a6 >= 6
    && *(_BYTE *)(*(_QWORD *)(a1 + 8) + v9) == 35
    && (!(a7 & 1 | v9) || (a6 >> 1) - 1 == (_DWORD)v9 && (a7 & 4) == 0))
  {
    *(_DWORD *)(a4 + 8) = v14 >> 1;
  }
  return result;
}

uint64_t vu__PadUnit(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  char v6;

  if ((a4 & 1) != 0)
  {
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(a3 + 24) & 0xF | 0x20;
  }
  else
  {
    v4 = (uint64_t)a4 >> 1;
    v5 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v4);
    v6 = *(_BYTE *)(a3 + 24) & 0xF;
    *(_BYTE *)(a3 + 24) = v6 | 0x20;
    if (!v5)
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 8) + v4) != 80)
        return result;
      v6 |= 0x40u;
    }
    *(_BYTE *)(a3 + 24) = v6;
  }
  return result;
}

uint64_t vu__fillUnitAndSubUnit__End(uint64_t a1, uint64_t a2)
{
  if (vu__UnitVector_t__Delete(a1, a2))
    return 2164269066;
  else
    return 0;
}

uint64_t rho_InOut__PutVectorInBuffer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _WORD *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 v7;

  if ((int)a4 < 1)
  {
    a4 = 0;
  }
  else
  {
    v4 = *(_WORD **)(a1 + 88);
    v5 = a4;
    v6 = (__int16 *)(*(_QWORD *)(a2 + 8) + 2 * a3);
    do
    {
      v7 = *v6++;
      *v4++ = v7;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 96) = a4;
  return a4;
}

uint64_t rho_purgeBufferToVector(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  __int16 *v5;
  _WORD *v6;
  uint64_t v7;
  __int16 v8;
  BOOL v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;

  LODWORD(v3) = *a2;
  if ((int)*a2 < 1 || (v4 = *(_DWORD *)(a1 + 96), v4 < 1))
  {
    LODWORD(v3) = 0;
  }
  else
  {
    if (v3 >= v4)
      v3 = v4;
    else
      v3 = v3;
    v5 = *(__int16 **)(a1 + 88);
    v6 = *(_WORD **)(a3 + 8);
    v7 = v3;
    do
    {
      v8 = *v5++;
      *v6++ = v8;
      --v7;
    }
    while (v7);
    v9 = __OFSUB__(v4, (_DWORD)v3);
    v10 = (v4 - v3);
    if (((int)v10 < 0) ^ v9 | ((_DWORD)v10 == 0))
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v11 = *(_WORD **)(a1 + 88);
      v12 = v10;
      do
      {
        *v11 = v11[v3];
        ++v11;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(a1 + 96) = v10;
  }
  *a2 = v3;
  return 0;
}

uint64_t rho_InOut__DecodeToVector(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5)
{
  int v10;
  int v11;
  __int16 *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  __int16 *v18;
  _WORD *v19;
  uint64_t v20;
  __int16 v21;
  unsigned int v23;

  *(_DWORD *)(a5 + 16) = 0;
  if (a4 < 1)
    return 0;
  v23 = a4;
  v10 = *(_DWORD *)(a1 + 96);
  if (v10 < 1)
  {
    v16 = 0;
    if (v10)
      return 0;
    goto LABEL_9;
  }
  rho_purgeBufferToVector(a1, &v23, a1 + 104);
  v11 = v23;
  if ((int)v23 >= 1)
  {
    v12 = *(__int16 **)(a1 + 112);
    v13 = *(_WORD **)(a5 + 8);
    v14 = v23;
    do
    {
      v15 = *v12++;
      *v13++ = v15;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(a5 + 16) += v11;
  v23 = a4 - v11;
  v16 = v11;
  if (!*(_DWORD *)(a1 + 96))
  {
LABEL_9:
    chi_DecodePolyphone__SmpRequested(a2, a3, (int *)&v23, a1 + 104);
    v17 = v23;
    if ((int)v23 >= 1)
    {
      v18 = *(__int16 **)(a1 + 112);
      v19 = (_WORD *)(*(_QWORD *)(a5 + 8) + 2 * v16);
      v20 = v23;
      do
      {
        v21 = *v18++;
        *v19++ = v21;
        --v20;
      }
      while (v20);
    }
    *(_DWORD *)(a5 + 16) += v17;
  }
  return 0;
}

uint64_t rho_synthDecodeToClient(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t result;
  BOOL v18;
  int v19;
  int v20;
  int v21;

  v12 = *(_QWORD *)(a2 + 352);
  v13 = *(_DWORD *)(a1 + 96);
  if (v13 >= 1)
  {
    v14 = (int *)(a4 + 16);
    while (1)
    {
      v15 = *v14;
      if (*v14 >= a5)
        v15 = a5;
      v21 = v15;
      rho_purgeBufferToVector(a1, &v21, a6);
      v16 = v21;
      if (!v21)
        break;
      *(_DWORD *)(a4 + 16) = v21;
      v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a6 + 8), v16);
      result = rho_InOut__ApplyVolume(v12, a1, a4);
      if ((_DWORD)result)
        return result;
      result = eta_PushSamplesOut(v12, 2, (__int16 **)(a4 + 8), (unsigned int *)(a4 + 16));
      if ((_DWORD)result)
        return result;
      a5 -= v16;
      v13 = *(_DWORD *)(a1 + 96);
      if (v13 <= 0)
        goto LABEL_11;
    }
    v13 = *(_DWORD *)(a1 + 96);
  }
LABEL_11:
  if (v13)
    v18 = 1;
  else
    v18 = a5 == 0;
  if (!v18)
  {
    do
    {
      v19 = *(_DWORD *)(a4 + 16);
      if (v19 >= a5)
        v19 = a5;
      v21 = v19;
      chi_DecodePolyphone__SmpRequested(a2, a3, &v21, a6);
      v20 = v21;
      if (!v21)
        break;
      *(_DWORD *)(a4 + 16) = v21;
      v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a6 + 8), v20);
      result = rho_InOut__ApplyVolume(v12, a1, a4);
      if ((_DWORD)result)
        return result;
      result = eta_PushSamplesOut(v12, 2, (__int16 **)(a4 + 8), (unsigned int *)(a4 + 16));
      if ((_DWORD)result)
        return result;
      a5 -= v21;
    }
    while (a5);
  }
  return 0;
}

uint64_t rho_InOut__AudioWriteToClient__No_Subunits(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _BOOL4 IsEndState;
  BOOL v15;

  if (a5 < 1)
    return 0;
  v5 = a5;
  v10 = a1 + 104;
  v11 = a4 + 8;
  do
  {
    if (v5 >= *(_DWORD *)(a1 + 120))
      v12 = *(_DWORD *)(a1 + 120);
    else
      v12 = v5;
    *(_DWORD *)(a4 + 36) += v12;
    result = rho_synthDecodeToClient(a1, a2, a3, a4, v12, v10);
    if ((_DWORD)result)
      break;
    IsEndState = eta_InOut__IsEndState(v11);
    result = 0;
    if (IsEndState)
      break;
    v15 = __OFSUB__(v5, v12);
    v5 -= v12;
  }
  while (!((v5 < 0) ^ v15 | (v5 == 0)));
  return result;
}

uint64_t rho_InOut__AudioWriteToClientWithMarkers(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int *v39;
  uint64_t v40;
  int v41;
  uint64_t result;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v48;
  int v49;
  int v51;
  int v52;
  unsigned __int16 v53;

  v44 = a8;
  v8 = *(_QWORD *)(a2 + 352);
  v53 = 0;
  if ((int)a6 < 1)
    return 0;
  if (*(_WORD *)(*(_QWORD *)a4 + 18))
  {
    v10 = a7;
    v48 = 0;
    v45 = a1 + 104;
    v11 = a5;
    v43 = a4 + 8;
    v51 = a7;
    while (1)
    {
      v12 = *(_DWORD *)(a1 + 120);
      if ((int)a6 >= v12)
        v13 = *(_DWORD *)(a1 + 120);
      else
        v13 = a6;
      v49 = a6;
      if (v44 && (int)a6 <= v12 && *(_DWORD *)(v8 + 2036))
      {
        v14 = v48;
        if (*(_DWORD *)(v8 + 2040))
          v14 = 1;
        v48 = v14;
      }
      v15 = *(uint64_t **)a4;
      v16 = **(_QWORD **)a4;
      if (*(_WORD *)(v16 + 28 * v11 + 18))
        break;
LABEL_45:
      if (*(_DWORD *)(v8 + 2020))
      {
        if (v13 >= *(_DWORD *)(v8 + 2028) - *(_DWORD *)(a4 + 36))
          v41 = *(_DWORD *)(v8 + 2028) - *(_DWORD *)(a4 + 36);
        else
          v41 = v13;
      }
      else
      {
        v41 = v13;
      }
      if (v48)
      {
        *(_BYTE *)(v8 + 2016) = 1;
        result = rho_synthDecodeToClient(a1, a2, a3, a4, v41, v45);
        if ((_DWORD)result)
          return result;
        *(_BYTE *)(v8 + 2016) = 0;
      }
      else
      {
        result = rho_synthDecodeToClient(a1, a2, a3, a4, v41, v45);
        if ((_DWORD)result)
          return result;
      }
      if (*(_DWORD *)(v8 + 2020))
      {
        *(_DWORD *)(v8 + 2020) = 0;
        if (v13 != v41)
        {
          result = rho_synthDecodeToClient(a1, a2, a3, a4, v13 - v41, v45);
          if ((_DWORD)result)
            return result;
        }
      }
      if (!eta_InOut__IsEndState(v43))
      {
        *(_DWORD *)(a4 + 36) += v13;
        a6 = (v49 - v13);
        if (v49 > v13)
          continue;
      }
      return 0;
    }
    v17 = 0;
    v52 = v13;
    while (1)
    {
      v18 = v15[1];
      v19 = *(unsigned __int16 *)(v16 + 28 * v11 + 16);
      if (v10 == 1)
      {
        v20 = (v17 + v19);
        v21 = *(unsigned __int8 *)(v18 + 16 * v20 + 14);
        v22 = *(_DWORD *)(a4 + 36);
        if (*(_BYTE *)(v18 + 16 * v20 + 14))
        {
          v23 = v22 + v13;
          goto LABEL_22;
        }
      }
      else
      {
        v22 = *(_DWORD *)(a4 + 36);
        v20 = (v17 + v19);
      }
      v23 = v22 + v13;
      if (*(_DWORD *)(v18 + 16 * v20) <= v23)
      {
        v24 = v18 + 16 * v20;
        v21 = *(unsigned __int8 *)(v24 + 14);
        if (*(_BYTE *)(v24 + 14))
        {
          if (v10 == 1)
LABEL_22:
            *(_DWORD *)(v18 + 16 * v20) = v23;
          v25 = *(unsigned __int16 *)(v18 + 16 * v20 + 12);
          if (v21 + v25 > *(_DWORD *)(v8 + 608))
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 32), (uint64_t)"SYNTH", 45000, "%s%u%s%u%s%u", a5, a6, a7, a8, "index");
            v26 = *(_DWORD *)(v8 + 608);
            if (v26 <= v25)
              LOWORD(v25) = v26 - 1;
            LOWORD(v21) = v26 - v25;
          }
          eta_synth_GetRate(v8, &v53);
          if (*(_DWORD *)(v8 + 2032) == 1)
          {
            *(_DWORD *)(v8 + 2032) = 0;
            v53 = 100;
          }
          v27 = (unsigned __int16)v21;
          if ((_WORD)v21)
          {
            v28 = 32 * (unsigned __int16)v25;
            v29 = (_DWORD *)(*(_QWORD *)(v8 + 600) + v28);
            v30 = (unsigned __int16)v21;
            v31 = v29;
            do
            {
              v33 = *v31;
              v31 += 8;
              v32 = v33;
              if (v33 == 8)
              {
                if (v29[6])
                {
                  *(_DWORD *)(v8 + 2020) = 1;
                  *(_DWORD *)(v8 + 2032) = 1;
                }
              }
              else if (v32 == 18)
              {
                *(_DWORD *)(v8 + 2020) = 1;
              }
              v29 = v31;
              --v30;
            }
            while (v30);
            do
            {
              v34 = *(_DWORD **)(*(_QWORD *)a4 + 8);
              v35 = *(unsigned __int16 *)(**(_QWORD **)a4 + 28 * v11 + 16) + (uint64_t)v17;
              if ((_DWORD)v35)
              {
                v36 = v35;
                v37 = v34[4 * v35 - 2] + 100 * (v34[4 * v35] - v34[4 * v35 - 4]) / v53;
              }
              else
              {
                v36 = 0;
                v37 = 100 * *v34 / v53;
              }
              v34[4 * v36 + 2] = v37;
              v38 = *(_DWORD *)(v8 + 1968);
              v39 = (int *)(*(_QWORD *)(v8 + 600) + v28);
              v39[4] = 0;
              if (*(_DWORD *)(v8 + 2020))
                *(_DWORD *)(v8 + 2028) = v34[4 * v35];
              eta_synth_ProcessThisMarker(v8, v39, v38 + v37);
              v40 = v8 + 32 * *(unsigned __int16 *)(v8 + 432);
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 32) + 104))(*(_QWORD *)(v40 + 56), *(_QWORD *)(v40 + 64), *(_QWORD *)(v8 + 600) + v28, 32);
              v28 += 32;
              --v27;
            }
            while (v27);
          }
          v15 = *(uint64_t **)a4;
          v16 = **(_QWORD **)a4;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 8)
                   + 16 * (v17 + *(unsigned __int16 *)(v16 + 28 * v11 + 16))
                   + 14) = 0;
          *(_WORD *)(v8 + 1956) = v25 + v21;
          *(_WORD *)(v8 + 1958) = v25 + v21;
          v10 = v51;
          v13 = v52;
        }
      }
      if (++v17 >= *(unsigned __int16 *)(v16 + 28 * v11 + 18))
        goto LABEL_45;
    }
  }
  return rho_InOut__AudioWriteToClient__No_Subunits(a1, a2, a3, a4, a6);
}

uint64_t rho_InOut__InsertSilence(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int16 *v20;
  _WORD *v21;
  __int16 v22;
  unsigned __int16 v25;

  v11 = *(_QWORD *)(a2 + 352);
  v25 = 0;
  v12 = *(_DWORD *)(a1 + 100);
  v13 = *(_DWORD *)(a1 + 52);
  if (v12 >= v13)
    v14 = *(_DWORD *)(a1 + 52);
  else
    v14 = *(_DWORD *)(a1 + 100);
  v_zap_s_t(*(void **)(a1 + 40), v14);
  eta_synth_GetRate(v11, &v25);
  if (*(_DWORD *)(v11 + 2032))
    eta_synth_SetRate(v11, 0x64u);
  if (a6 < 1)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = a6;
      if (v13 >= v12)
        LODWORD(v17) = v12;
      else
        LODWORD(v17) = v13;
      if ((int)v17 >= a6)
        v17 = a6;
      else
        v17 = v17;
      v18 = __OFSUB__(a6, v14);
      a6 -= v14;
      if (a6 < 0 != v18)
        v19 = v16;
      else
        v19 = v14;
      if ((a6 < 0) ^ v18 | (a6 == 0))
        *(_BYTE *)(v11 + 2016) = 1;
      if ((int)v19 < 1)
        break;
      v20 = *(__int16 **)(a1 + 40);
      v21 = *(_WORD **)(a1 + 88);
      do
      {
        v22 = *v20++;
        *v21++ = v22;
        --v17;
      }
      while (v17);
      *(_DWORD *)(a1 + 96) = v19;
      v15 = rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, a4, a5, v19, 0, 0);
      if (*(_BYTE *)(v11 + 2016) == 1)
      {
        *(_WORD *)(v11 + 2044) = 0;
        *(_BYTE *)(v11 + 2016) = 0;
      }
    }
    while (a6 > 0);
  }
  eta_synth_SetRate(v11, v25);
  return v15;
}

uint64_t rho_InOut__ApplyVolume(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int16 *v6;
  int v7;
  unsigned int v8;
  __int16 v9;
  unsigned __int16 v11;

  v11 = 0;
  eta_synth_GetVolume(a1, &v11);
  if (v11 != 80)
  {
    v4 = *(unsigned int *)(a3 + 16);
    if ((int)v4 >= 1)
    {
      v5 = aVolPar2Amplif_0[v11];
      v6 = *(__int16 **)(a3 + 8);
      do
      {
        v7 = *v6 * v5;
        v8 = v7 >> 15;
        if (v7 < -1073709056)
          LOWORD(v8) = -32767;
        if (v7 <= 0x3FFFFFFF)
          v9 = v8;
        else
          v9 = 0x7FFF;
        *v6++ = v9;
        --v4;
      }
      while (v4);
    }
  }
  return 0;
}

uint64_t __psi_Lookup__getOffsetAndByteLength(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _BYTE *a6, unsigned int *a7)
{
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t Stream;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25[20];
  int v26;
  int v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v13 = *(_DWORD *)(a1 + 160);
  v14 = 6 * a2;
  v15 = 5 * a2;
  v16 = v13 * a2;
  if (v13 == 4)
    v16 = 4 * a2;
  if (v13 != 5)
    v15 = v16;
  if (v13 != 6)
    v14 = v15;
  Stream = psi_lookup_ReadStream((unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v14), v13, &v26, *(_DWORD *)(a1 + 80), (_WORD *)(a1 + 136));
  if (!(_DWORD)Stream)
  {
    Stream = 2164269056;
    v19 = v26;
    *a6 = v27;
    v20 = v28;
    *a5 = v28;
    if (v19)
    {
      v21 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v21 + 44) == 1)
      {
        v22 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v20);
      }
      else
      {
        v25[0] = *(_DWORD *)(a1 + 156);
        psi_mapCodedData(a1, v21, v20 & 0x7FFFFFFF, v25);
        v22 = *(unsigned __int8 **)(a1 + 24);
        if (!v22)
          return Stream;
      }
      Stream = psi_lookup_ReadStream(v22, *(_DWORD *)(a1 + 156), v25, *(_DWORD *)(a1 + 84), (_WORD *)(a1 + 96));
      if (!(_DWORD)Stream)
      {
        *a3 = -1;
        v23 = v25[1];
        *a4 = v25[0];
        *a7 = v23;
        v24 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(v24 + 44) == 1)
          return 0;
        else
          return psi_unMapCodedData(a1, v24);
      }
    }
  }
  return Stream;
}

uint64_t __psi_Lookup__getPrevDemiIDAndSmpDur(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _BYTE *a5, _BYTE *a6)
{
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t result;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 160);
  v11 = 6 * a2;
  v12 = 5 * a2;
  v13 = v10 * a2;
  if (v10 == 4)
    v13 = 4 * a2;
  if (v10 != 5)
    v12 = v13;
  if (v10 != 6)
    v11 = v12;
  result = psi_lookup_ReadStream((unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v11), v10, &v17, *(_DWORD *)(a1 + 76), (_WORD *)(a1 + 116));
  if (!(_DWORD)result)
  {
    v15 = v18;
    *a5 = v17;
    *a6 = v15;
    v16 = v20;
    *a4 = v19;
    *a3 = v16;
  }
  return result;
}

uint64_t psi_Lookup__getPreviousDemiID(uint64_t a1, int a2, _DWORD *a3, _BYTE *a4, _DWORD *a5, _DWORD *a6, int *a7, _BYTE *a8, unsigned int *a9)
{
  uint64_t result;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  unsigned __int8 v30;

  v30 = 0;
  v29 = 0;
  __psi_Lookup__getPrevDemiIDAndSmpDur(a1, a2, a3, a5, &v30, a4);
  if (v30)
  {
    __psi_Lookup__getOffsetAndByteLength(a1, a2, a3, a5, &v29, a4, a9);
    result = 0;
    *a6 = *(_DWORD *)(a1 + 156) + v29;
    *a7 = 0;
    *a8 = 1;
  }
  else
  {
    v24 = a6;
    v26 = 0;
    v27 = 0;
    *a8 = 1;
    __psi_Lookup__getPrevDemiIDAndSmpDur(a1, a2, &v27, a5, &v30, &v25);
    v18 = 0;
    v19 = 0;
    v20 = v30;
    while (!v20)
    {
      *a8 = 0;
      v21 = v27;
      __psi_Lookup__getPrevDemiIDAndSmpDur(a1, v27, &v27, a7, &v30, &v28);
      if (v18)
        v22 = v26;
      else
        v22 = 0;
      v20 = v30;
      if (v30)
        __psi_Lookup__getOffsetAndByteLength(a1, v21, &v27, &v26, &v29, &v28, a9);
      else
        v26 = *a7;
      v19 += v22;
      if (--v18 == -10001)
        return 2164269056;
    }
    result = 0;
    v23 = v26;
    if (!v18)
      v23 = 0;
    *v24 = *(_DWORD *)(a1 + 156) + v29;
    *a7 = v23 + v19;
  }
  return result;
}

uint64_t psi_Lookup__InitFromDatFiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  int *v25;
  _WORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  int v35;
  _DWORD v36[2];
  int32x2_t v37;
  _DWORD v38[36];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = 2164269056;
  v7 = *(unsigned __int8 **)(a3 + 8);
  if (!v7)
    return 2164269062;
  if (!*(_QWORD *)(a4 + 8))
    return 2164269062;
  *(_OWORD *)(a1 + 76) = xmmword_1DECD00D0;
  *(_DWORD *)(a1 + 92) = 13;
  result = psi_lookup_ReadStream(v7, 19, v36, 13, bitHeaderAlloca);
  if (!(_DWORD)result)
  {
    v16 = v36[0];
    v17 = v36[1];
    *(_DWORD *)a1 = v36[0];
    *(_DWORD *)(a1 + 4) = v17;
    *(int32x2_t *)(a1 + 156) = vrev64_s32(v37);
    v18 = *(unsigned int *)(a1 + 76);
    if ((int)v18 < 1)
    {
      LODWORD(v18) = 0;
      LODWORD(i) = 4;
    }
    else
    {
      for (i = 0; i != v18; ++i)
        *(_WORD *)(a1 + 116 + 2 * i) = v38[i];
      LODWORD(i) = i + 4;
    }
    *(_WORD *)(a1 + 116 + 2 * (v18 + 2)) = 0;
    *(_WORD *)(a1 + 116 + 2 * (v18 + 1)) = 0;
    *(_WORD *)(a1 + 116 + 2 * v18) = 0;
    v20 = *(_DWORD *)(a1 + 80);
    if (v20 < 1)
    {
      v20 = 0;
    }
    else
    {
      v21 = (_WORD *)(a1 + 136);
      v22 = *(unsigned int *)(a1 + 80);
      i = i;
      do
      {
        v23 = v36[i++];
        *v21++ = v23;
        --v22;
      }
      while (v22);
    }
    *(_WORD *)(a1 + 136 + 2 * (v20 + 2)) = 0;
    *(_WORD *)(a1 + 136 + 2 * (v20 + 1)) = 0;
    *(_WORD *)(a1 + 136 + 2 * v20) = 0;
    v24 = *(_DWORD *)(a1 + 84);
    if (v24 < 1)
    {
      v24 = 0;
    }
    else
    {
      v25 = &v36[i];
      v26 = (_WORD *)(a1 + 96);
      v27 = *(unsigned int *)(a1 + 84);
      do
      {
        v28 = *v25++;
        *v26++ = v28;
        --v27;
      }
      while (v27);
    }
    *(_WORD *)(a1 + 96 + 2 * (v24 + 2)) = 0;
    *(_WORD *)(a1 + 96 + 2 * (v24 + 1)) = 0;
    *(_WORD *)(a1 + 96 + 2 * v24) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8) + 19;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(a2 + 44) == 1)
      *(_DWORD *)(a2 + 40) = 0;
    if (a5)
    {
      v29 = 0;
      if (v17)
      {
        v30 = 0;
        while (1)
        {
          v33 = 0;
          if (__psi_Lookup__getPrevDemiIDAndSmpDur(a1, v30, &v35, &v34, &v33, &v32))
            break;
          if (v33)
            ++v29;
          if (v17 == ++v30)
          {
            v16 = *(_DWORD *)a1;
            goto LABEL_31;
          }
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"Fatal Error: Number of counted polyphones don't match. Wrong speechbase? ", v13, v14, v15, v31);
        return 2164269056;
      }
      else
      {
LABEL_31:
        if (v29 == v16)
          return 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"Fatal Error: Number of counted polyphones don't match. Wrong speechbase? ", v13, v14, v15, v31);
        return v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t rho_Concat__Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;

  v3 = 2164269066;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a3 + 12) != 22050)
    return 2164269074;
  *(_DWORD *)(a1 + 24) = 44;
  *(_OWORD *)a1 = xmmword_1DECD0180;
  *(_QWORD *)(a1 + 16) = 0xDC00000004;
  *(_OWORD *)(a3 + 16) = xmmword_1DECD0180;
  if (!vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 32, 0x294u)
    && !vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 56, *(_DWORD *)(a1 + 12))
    && !vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 80, *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 12)))
  {
    *(_DWORD *)(a1 + 96) = 0;
    if (*(_DWORD *)a3 <= *(_DWORD *)(a1 + 12))
      v7 = *(_DWORD *)(a1 + 12);
    else
      v7 = *(_DWORD *)a3;
    if (!vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 104, v7))
    {
      if (rho_Concat__OverlapWindow__Init(a1, *(_DWORD *)(a3 + 12)))
        return 2164269066;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t rho_Concat__Delete(uint64_t a1)
{
  uint64_t result;

  result = vect_i_t__deleteVect(a1 + 32);
  if (!(_DWORD)result)
  {
    result = vect_i_t__deleteVect(a1 + 56);
    if (!(_DWORD)result)
    {
      result = vect_i_t__deleteVect(a1 + 80);
      if (!(_DWORD)result)
      {
        result = vect_i_t__deleteVect(a1 + 104);
        if (!(_DWORD)result)
          return rho_Concat__OverlapWindow__Denit(a1);
      }
    }
  }
  return result;
}

_DWORD *rho__updateSubunits(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t **a4, int a5, int a6, int a7)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;

  v7 = *a4;
  v8 = **a4;
  v9 = *(unsigned __int16 *)(v8 + 28 * a5 + 18);
  if (*(_WORD *)(v8 + 28 * a5 + 18))
  {
    if (a6 < 1)
    {
      if (a6 < 0)
      {
        v13 = 0;
        v14 = 0;
        v15 = (int *)(v7[1] + 16 * *(unsigned __int16 *)(v8 + 28 * a5 + 16));
        do
        {
          if (v13 * 4)
          {
            v16 = v15[v13] + a6;
            if (v16 <= v14)
              v16 = v14;
          }
          else
          {
            v16 = *v15;
            v14 = *v15;
          }
          v15[v13] = v16;
          v13 += 4;
        }
        while (4 * v9 != v13);
      }
    }
    else
    {
      v10 = 0;
      v11 = (int *)(v7[1] + 16 * *(unsigned __int16 *)(v8 + 28 * a5 + 16));
      do
      {
        if (v10 * 4)
          v12 = v11[v10] + a6;
        else
          v12 = *v11;
        v11[v10] = v12;
        v10 += 4;
      }
      while (4 * v9 != v10);
    }
    v17 = 0;
    v18 = v8 + 28 * a5;
    v19 = *(_DWORD *)(v18 + 4);
    v20 = (unsigned __int16 *)(v18 + 16);
    if (v9 <= 1)
      v21 = 1;
    else
      v21 = v9;
    do
    {
      if (v19 >= 1)
      {
        v22 = (int *)(v7[1] + 16 * (v17 + *v20));
        if (*v22 > v19)
          *v22 = v19;
      }
      if (a7 == 1 && (_DWORD)v9 - 1 == (_DWORD)v17)
      {
        v23 = *v20;
        v24 = (v9 + v23 - 1);
        v25 = v7[1];
        if (*(_DWORD *)(v25 + 16 * v24 + 4) < result[1])
          *(_DWORD *)(v25 + 16 * v24) = (*(_DWORD *)(v25 + 16 * v24) - *result) & ~((*(_DWORD *)(v25 + 16 * v24)
                                                                                   - *result) >> 31);
        *(_DWORD *)(v25 + 16 * (v9 - 1 + v23)) += *((_DWORD *)a4 + 9);
        v26 = (_DWORD *)(v25 + 16 * v24);
        v27 = *(_DWORD *)(v25 + 16 * ((int)v9 + v23 - 2));
        if (*v26 < v27)
          *v26 = v27 + 1;
      }
      else
      {
        *(_DWORD *)(v7[1] + 16 * (v17 + *v20)) += *((_DWORD *)a4 + 9);
      }
      ++v17;
    }
    while (v21 != (_DWORD)v17);
  }
  return result;
}

uint64_t rho_Concat__match(unsigned int *a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5, int a6)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v12 = 2164269056;
  v13 = a3[20] - a3[19];
  v14 = a1[3];
  v15 = (uint64_t)(a1 + 14);
  if (v13 >= v14)
  {
    a1[18] = v14;
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, v14, (uint64_t)(a1 + 14)))
      return v12;
  }
  else
  {
    a1[18] = v13;
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, v13, (uint64_t)(a1 + 14)))
      return v12;
    v_zap_s_t((void *)(*((_QWORD *)a1 + 8) + 2 * (int)a1[18]), a1[3] - a1[18]);
  }
  v16 = rho_Concat__findbestmatch_fixed(a1, (uint64_t)(a1 + 8), v15);
  v17 = *a1 + v16;
  a3[21] = v17;
  a3[18] -= v17;
  rho_Concat__WindowsOverlap_wsola((uint64_t)a1, (uint64_t)(a1 + 8), v15, 0, v16);
  rho_InOut__PutVectorInBuffer((uint64_t)a1, (uint64_t)(a1 + 8), 0, *a1);
  if (!rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, (a5 - 1), *a1, 1, 0))
  {
    if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    {
      rho__updateSubunits(a1, v18, v19, a4, a5, a3[18], a6);
      rho_InOut__PutVectorInBuffer((uint64_t)a1, (uint64_t)(a1 + 8), *a1, *a1);
      if (rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, a5, *a1, 0, 0))
        return v12;
      if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
      {
        rho_InOut__PutVectorInBuffer((uint64_t)a1, v15, a1[1] + v16, a1[18] - (a1[1] + v16));
        v12 = 0;
        a3[19] = *a1 + a3[21];
        return v12;
      }
    }
    return 0;
  }
  return v12;
}

uint64_t rho_Concat__plosive(uint64_t a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v10 = 2164269056;
  v11 = a1 + 56;
  v_zap_s_t(*(void **)(a1 + 64), *(_DWORD *)(a1 + 72));
  v12 = *(_DWORD *)(a1 + 24);
  if (a3[20] - a3[19] >= v12)
  {
    *(_DWORD *)(a1 + 72) = v12;
    if (rho_InOut__DecodeToVector(a1, a2, a3, v12, v11))
      return v10;
  }
  else
  {
    if (rho_InOut__DecodeToVector(a1, a2, a3, a3[20] - a3[19], v11))
      return v10;
    *(_DWORD *)(a1 + 72) = a3[20] - a3[19];
  }
  rho_Concat__fade_out_closure(a1, a1 + 32, 0, *(_DWORD *)(a1 + 20));
  a3[21] = 0;
  rho_InOut__PutVectorInBuffer(a1, a1 + 32, 0, *(unsigned int *)(a1 + 48));
  if (!rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, (uint64_t)a4, (a5 - 1), *(unsigned int *)(a1 + 48), 1, 0))
  {
    if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    {
      rho_Concat__fade_in_burst(a1, v11, 0, *(_DWORD *)(a1 + 72));
      rho__updateSubunits((_DWORD *)a1, v13, v14, a4, a5, a3[18], 0);
      rho_InOut__PutVectorInBuffer(a1, v11, 0, *(unsigned int *)(a1 + 72));
      if (rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, (uint64_t)a4, a5, *(unsigned int *)(a1 + 72), 0, 0))return v10;
      if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
      {
        v10 = 0;
        a3[19] = *(_DWORD *)(a1 + 24) + a3[21];
        return v10;
      }
    }
    return 0;
  }
  return v10;
}

uint64_t rho_Concat__silence(unsigned int *a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t inserted;

  v10 = 2164269056;
  v11 = (uint64_t)(a1 + 14);
  v_zap_s_t(*((void **)a1 + 8), *a1);
  v12 = *a1;
  if (a3[20] - a3[19] >= (int)*a1)
  {
    a1[18] = v12;
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, v12, v11))
      return v10;
  }
  else
  {
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, a3[20] - a3[19], v11))
      return v10;
    a1[18] = a3[20] - a3[19];
  }
  v_zap_s_t(*((void **)a1 + 5), *a1);
  v13 = *a1;
  a3[21] = (int)v13 >> 1;
  a3[18] -= (int)v13 >> 1;
  rho_InOut__PutVectorInBuffer((uint64_t)a1, (uint64_t)(a1 + 8), 0, v13);
  if (!rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, (a5 - 1), *a1, 1, 0))
  {
    if (eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    {
      return 0;
    }
    else
    {
      v16 = *(_DWORD *)(**a4 + 28 * (int)a5 + 8);
      rho__updateSubunits(a1, v14, v15, a4, a5, a3[18] + v16, 0);
      inserted = rho_InOut__InsertSilence((uint64_t)a1, a2, a3, (uint64_t)a4, a5, v16);
      v_zap_s_t(*((void **)a1 + 8), *a1);
      rho_InOut__PutVectorInBuffer((uint64_t)a1, v11, 0, *a1);
      if (!rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, a5, *a1, 0, 0))
      {
        if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
        {
          rho_InOut__PutVectorInBuffer((uint64_t)a1, v11, *a1, a1[18] - *a1);
          a3[19] = a3[21] + ((int)*a1 >> 1);
        }
        return inserted;
      }
    }
  }
  return v10;
}

uint64_t rho_Concat__middle(int *a1, uint64_t a2, int *a3, _QWORD **a4, uint64_t a5)
{
  unsigned int v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;

  v6 = *(unsigned __int8 *)(**a4 + 28 * (int)a5 + 24);
  if (v6 > 0xF)
  {
    v11 = a3[22];
    if ((v6 & 0x40) != 0)
      v12 = a1[5];
    else
      v12 = *a1;
    v7 = a3 + 19;
    v13 = v12 + a3[19];
    v10 = (v11 - v13);
    if (v11 - v13 < 0)
      return 0;
  }
  else
  {
    v7 = a3 + 19;
    v8 = a3[22];
    v9 = *a1 + a3[19];
    v10 = (v8 - v9);
    if (v8 - v9 < 0)
      return 0;
  }
  if (rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, a5, v10, 0, 1))
    return 2164269056;
  if (eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    return 0;
  result = 0;
  *v7 += v10;
  return result;
}

uint64_t rho_Concat__tail(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  int v8;

  v6 = a3[20] - a3[19];
  v_zap_s_t(*(void **)(a1 + 40), *(_DWORD *)(a1 + 12));
  if (v6 < 1)
    return 0;
  v7 = 2164269056;
  v8 = *(_DWORD *)(a1 + 12);
  if (v6 < v8)
    v8 = v6;
  if (!rho_InOut__DecodeToVector(a1, a2, a3, v8, a1 + 32))
    return 0;
  return v7;
}

uint64_t rho_concatenate(unsigned int *a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;

  v11 = *((unsigned __int16 *)*a4 + 10);
  v12 = **a4;
  v13 = v12 + 28 * v11;
  v14 = (unsigned int *)(v13 + 12);
  v15 = (int *)(v13 + 20);
  inited = psi_DataMapSegment__InitPoly(a5, (_DWORD *)(v13 + 12), (unsigned int *)(v13 + 20));
  if (!(_DWORD)inited)
  {
    inited = xi_Segment__InitPoly_withDur((uint64_t)a3, v12 + 28 * v11, *v14, *v15, *(_QWORD *)(a5 + 24), *(unsigned __int8 *)(*(_QWORD *)(a5 + 40) + 44));
    if (!(_DWORD)inited)
    {
      inited = chi_DecodePolyphone__InitPoly(a2);
      if (!(_DWORD)inited)
      {
        *(_DWORD *)(a2 + 272) = *(_DWORD *)(**a4 + 28 * v11 + 20);
        if ((_DWORD)v11)
        {
          if ((*(_BYTE *)(v12 + 28 * v11 + 24) & 0xF) != 0)
          {
            if ((*(_BYTE *)(v12 + 28 * v11 + 24) & 3) != 0)
            {
              rho_Concat__match(a1, a2, a3, a4, v11, a6);
            }
            else if ((*(_BYTE *)(v12 + 28 * v11 + 24) & 4) != 0)
            {
              rho_Concat__plosive((uint64_t)a1, a2, a3, a4, v11);
            }
          }
          else
          {
            rho_Concat__silence(a1, a2, a3, a4, v11);
          }
        }
        else
        {
          rho__updateSubunits(a1, v17, v18, a4, 0, 0, 0);
        }
        if (*(unsigned __int8 *)(v12 + 28 * v11 + 24) >= 0x10u)
        {
          rho_Concat__middle((int *)a1, a2, a3, a4, v11);
          rho_Concat__tail((uint64_t)a1, a2, a3);
        }
        if ((*(_BYTE *)(v12 + 28 * v11 + 25) & 2) != 0)
          inited = rho_InOut__InsertSilence((uint64_t)a1, a2, a3, (uint64_t)a4, v11, *(_DWORD *)(*(_QWORD *)(a2 + 352) + 644));
        else
          inited = 0;
        chi_DecodePolyphone__DeinitPoly((_QWORD *)a2);
        psi_DataMapSegment__DeinitPoly(a5);
        xi_Segment__DeinitPoly(a3);
        ++*((_WORD *)*a4 + 10);
      }
    }
  }
  return inited;
}

uint64_t eta_synth_GetVolume(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 648);
  return 0;
}

uint64_t eta_synth_SetRate(uint64_t a1, unsigned int a2)
{
  __int16 v2;

  if (a2 >= 0x190)
    v2 = 400;
  else
    v2 = a2;
  *(_WORD *)(a1 + 652) = *(_WORD *)(a1 + 650);
  *(_WORD *)(a1 + 650) = v2;
  return 0;
}

uint64_t eta_synth_GetRate(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 650);
  return 0;
}

uint64_t eta_synth_ResetParams(uint64_t a1)
{
  uint64_t result;

  result = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", 2u);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"volume", 0x50u);
    if ((result & 0x80000000) == 0)
      return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", 0x64u);
  }
  return result;
}

uint64_t eta_synth_ProcessThisMarker(uint64_t a1, int *a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *__s;

  v5 = 0;
  a2[3] = a3;
  v6 = *a2;
  if (*a2 <= 23)
  {
    if (v6 == 13)
      return eta_synth_ResetParams(a1);
    if (v6 == 18)
      return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", a2[6]);
    return v5;
  }
  if (v6 != 24)
  {
    if (v6 == 25)
    {
      __s = 0;
      paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", &__s);
      v5 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", a2[6]);
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 + 40);
      if ((v5 & 0x80000000) != 0)
      {
        v11 = strlen(__s);
        paramc_ParamRipple(v9, (uint64_t)"waitfactor", __s, (v11 + 1));
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      }
      else
      {
        v10 = *(_QWORD *)(v8 + 40);
      }
      paramc_ParamRelease(v10);
    }
    return v5;
  }
  return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"volume", a2[6]);
}

uint64_t eta_PrepareNewBuffers(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6;

  if (!a1)
    return 2164269062;
  *(_DWORD *)(a1 + 1944) = 0;
  v6 = 0;
  if (((**(uint64_t (***)(_QWORD, _QWORD, _QWORD, uint64_t, int *))(a1 + 440))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), 0, a1 + 2064, &v6) & 0x80000000) == 0&& *(_DWORD *)(a1 + 2064))
  {
    *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a1 + 2056);
    *(_DWORD *)(a1 + 1944) = 1024;
  }
  v5 = 0;
  v2 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
  result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)(a1 + 32) + 136))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), &v5);
  *(_DWORD *)(a1 + 1968) = v5 >> 1;
  if ((result & 0x80000000) != 0 || !*(_DWORD *)(a1 + 1944))
  {
    v4 = 2;
  }
  else if (*(_QWORD *)(a1 + 1936))
  {
    v4 = 1;
  }
  else
  {
    v4 = 2;
  }
  *(_DWORD *)(a1 + 1952) = v4;
  return result;
}

uint64_t eta_PushSamplesOut(uint64_t a1, int a2, __int16 **a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  __int16 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int16 *v23;
  __int16 v24;
  uint64_t v25;
  _BOOL4 v26;
  int v28;
  int v29;

  v28 = 1024;
  v4 = 2164269062;
  if (a1 && a3 && a4)
  {
    v9 = 0;
    v29 = 0;
    v10 = *(_DWORD *)(a1 + 2064);
    v11 = *(_DWORD *)(a1 + 2068);
    v12 = *a4 + v11;
    v13 = v10 >= v11;
    v14 = v10 - v11;
    if (v14 != 0 && v13)
    {
      if (v10 <= v12)
        v9 = v14;
      else
        v9 = *a4;
      v15 = (__int16 *)(a1 + 650);
      v16 = *(_DWORD *)(a1 + 2020);
      v17 = *(_QWORD *)(a1 + 2008);
      v18 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
      v20 = *(_QWORD *)(v18 + 56);
      v19 = *(_QWORD *)(v18 + 64);
      if (v16)
        v15 = (__int16 *)(a1 + 652);
      WSOLA__rateChange_bet4_approach(v17, *(_BYTE *)(a1 + 2016), *v15, *a3, v9, *(_WORD **)(a1 + 2048), &v28, *(_QWORD *)(a1 + 32), v20, v19);
      *(_DWORD *)(a1 + 2068) += v28;
    }
    if (v10 <= v12)
    {
      if (a2 == 3)
        v21 = 1;
      else
        v21 = 2 * (*a4 != 0);
      v4 = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, int *))(a1 + 440))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), v21, a1 + 2064, &v29);
      if ((v4 & 0x80000000) != 0)
        goto LABEL_27;
      *(_DWORD *)(a1 + 2068) = 0;
      v22 = *a4 - v9;
      if (*a4 > v9)
      {
        v23 = (__int16 *)(a1 + 650);
        if (*(_DWORD *)(a1 + 2020))
          v23 = (__int16 *)(a1 + 652);
        v24 = *v23;
        v28 = 1024;
        v25 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
        WSOLA__rateChange_bet4_approach(*(_QWORD *)(a1 + 2008), *(_BYTE *)(a1 + 2016), v24, &(*a3)[v9], v22, *(_WORD **)(a1 + 2048), &v28, *(_QWORD *)(a1 + 32), *(_QWORD *)(v25 + 56), *(_QWORD *)(v25 + 64));
        *(_DWORD *)(a1 + 2068) = v28;
      }
    }
    else
    {
      v4 = 0;
    }
    if (a2 == 3)
    {
      v26 = *a4 == 0;
    }
    else
    {
      v26 = 0;
      *a3 = *(__int16 **)(a1 + 2056);
      *a4 = 1024;
    }
    if (a2 == 1 || v26)
    {
LABEL_27:
      *a3 = 0;
      *a4 = 0;
      *(_DWORD *)(a1 + 1952) = 2;
    }
  }
  return v4;
}

uint64_t eta_synth_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Str;
  char *v6;
  uint64_t Int;
  char *v8;
  int v9;
  int v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *__s1[2];
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  int v27;
  _BYTE *v28;
  char __s[256];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = 2164269056;
  v26 = 0;
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  v4 = *(_QWORD *)(a1 + 16);
  __s1[0] = 0;
  v28 = 0;
  v27 = 0;
  strcpy(__s, "synth/");
  Str = paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"voice", __s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  __strcat_chk();
  paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  __strcat_chk();
  Str = paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"reduction", __s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  v6 = __s1[0];
  if (!strstr(__s1[0], "dev"))
    strstr(v6, "DEV");
  __strcat_chk();
  paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  __strcat_chk();
  Int = paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"coder", __s1);
  if ((Int & 0x80000000) != 0)
    return Int;
  __strcat_chk();
  paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  if ((paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"bitrate", __s1) & 0x80000000) != 0
    || !*__s1[0]
    || (paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"overheadframes", &v28) & 0x80000000) != 0
    || !*v28)
  {
    v8 = &__s[strlen(__s)];
    while (v8 > __s)
    {
      v10 = *--v8;
      v9 = v10;
      if ((v10 - 48) >= 0xA)
      {
        if (v9 == 102)
        {
          v11 = strlen(v8);
          memmove(v8 + 1, v8, v11 + 1);
          *v8 = 47;
          goto LABEL_20;
        }
        break;
      }
    }
    __strcat_chk();
    Int = paramc_ParamGetInt(*(_QWORD *)(v4 + 40), (uint64_t)"frequencyhz", &v27);
    if ((Int & 0x80000000) != 0)
      return Int;
    v12 = strlen(__s);
    LH_itoa(v27 / 1000, &__s[v12], 0xAu);
  }
  else
  {
    __strcat_chk();
    __strcat_chk();
    paramc_ParamRelease(*(_QWORD *)(v4 + 40));
    __strcat_chk();
    __strcat_chk();
    paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  }
LABEL_20:
  if (__s[0])
  {
    v13 = 0;
    v14 = 1;
    do
    {
      __s[v13] = __tolower(__s[v13]);
      v13 = v14;
    }
    while (strlen(__s) > v14++);
  }
  if ((Int & 0x80000000) != 0 || !LH_stricmp(__s, (char *)(a1 + 656)))
    return Int;
  Str = eta_synth_loc_ObjClose(a1, 1);
  if ((Str & 0x80000000) != 0)
    return Str;
  __strcpy_chk();
  Str = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"frequencyhz", (int *)(a1 + 1988));
  if ((Str & 0x80000000) != 0)
    return Str;
  v16 = *(unsigned __int16 *)(a1 + 640);
  if (v16 <= 9)
  {
    v17 = *(_DWORD *)(a1 + 1988) * v16;
    if ((v17 + 6) < 9)
      v18 = 1;
    else
      v18 = (v17 + 2) / 5;
    *(_DWORD *)(a1 + 644) = v18;
  }
  v24 = 0;
  v25 = 0;
  *(_OWORD *)__s1 = xmmword_1DECD01A0;
  if (!psi_VFDat__loadData(a1 + 1064, *(_WORD **)a1, *(_QWORD *)(a1 + 8), (const char *)(a1 + 656), a1 + 920, 0, a1 + 968, 0, a1 + 1016, 1))
  {
    v19 = WSOLA__Create(*(_QWORD *)(a1 + 16), 22050);
    *(_QWORD *)(a1 + 2008) = v19;
    if (v19
      && (WSOLA__Initialise(v19),
          WSOLA__SetTimeScaleFactor(*(_WORD **)(a1 + 2008), 100),
          v20 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 2008) + 328), 2048),
          (*(_QWORD *)(a1 + 2048) = v20) != 0))
    {
      if (!psi_Synthesis__Init(a1, a1 + 920, a1 + 968, a1 + 1016, (uint64_t)__s1))
      {
        if ((psi_Lookup_AvgSpeed(a1 + 1064, &v26) & 0x80000000) != 0)
        {
          v21 = 200;
          v26 = 200;
        }
        else
        {
          v21 = v26;
        }
        Str = paramc_ParamSetUInt(*(_QWORD *)(v4 + 40), (uint64_t)"wordspermin", v21);
        if ((Str & 0x80000000) == 0)
          return vu__fillUnitAndSubUnit__Init((uint64_t *)(a1 + 1928), *(_QWORD *)(a1 + 16));
        return Str;
      }
    }
    else
    {
      return 2164269066;
    }
  }
  return v3;
}

uint64_t eta_synth_loc_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  _QWORD *v26;
  __int128 v28;
  uint64_t v29;

  v2 = 2164269056;
  if (a1 && *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    v5 = *(_QWORD *)(a1 + 2008);
    if (v5)
    {
      heap_Free(*(_QWORD **)(v5 + 328), *(_QWORD *)(a1 + 2048));
      WSOLA__Remove((uint64_t *)(a1 + 2008));
      *(_QWORD *)(a1 + 2008) = 0;
    }
    *(_BYTE *)(a1 + 656) = 0;
    v6 = psi_Synthesis__Denit(a1, a1 + 920, a1 + 968, a1 + 1016);
    if (v6)
      v7 = 2164269056;
    else
      v7 = 0;
    if (a2)
    {
      return v7;
    }
    else
    {
      v8 = v6;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v10 = (__int128 *)(a1 + 616);
      v28 = *(_OWORD *)(a1 + 616);
      v29 = *(_QWORD *)(a1 + 632);
      v11 = paramc_ListenerRemove(v9, "waitfactor", &v28);
      if (v8)
        LODWORD(v2) = -2130698240;
      else
        LODWORD(v2) = v11 & (v11 >> 31);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v28 = *v10;
      v29 = *(_QWORD *)(a1 + 632);
      v13 = paramc_ListenerRemove(v12, "pitch", &v28);
      if (v13 < 0 && (int)v2 > -1)
        LODWORD(v2) = v13;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v28 = *v10;
      v29 = *(_QWORD *)(a1 + 632);
      v16 = paramc_ListenerRemove(v15, "volume", &v28);
      if (v16 < 0 && (int)v2 > -1)
        LODWORD(v2) = v16;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v28 = *v10;
      v29 = *(_QWORD *)(a1 + 632);
      v19 = paramc_ListenerRemove(v18, "rate", &v28);
      if (v19 >= 0 || (int)v2 <= -1)
        v2 = v2;
      else
        v2 = v19;
      v21 = *(_BYTE **)(a1 + 912);
      if (v21)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
        v28 = *v10;
        v29 = *(_QWORD *)(a1 + 632);
        v23 = paramc_ListenerRemove(v22, v21, &v28);
        if (v23 >= 0 || (int)v2 <= -1)
          v2 = v2;
        else
          v2 = v23;
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 912));
        *(_QWORD *)(a1 + 912) = 0;
      }
      if (*(_QWORD *)(a1 + 440))
        objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHOUTPUTSINK");
      if (*(_QWORD *)(a1 + 32))
        objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
      vu__fillUnitAndSubUnit__Denit((uint64_t *)(a1 + 1928), *(_QWORD *)(a1 + 16));
      v25 = *(_QWORD *)(a1 + 2056);
      if (v25)
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v25);
      v26 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
      if (v26)
        heap_Free(v26, a1);
    }
  }
  return v2;
}

uint64_t eta_synth_doWsolaSynthesis(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  int v12;

  v2 = eta_Synth_Reset(a1);
  if ((v2 & 0x80000000) != 0)
    return v2;
  eta_Synth_LinkMsgLayers(a1);
  v4 = v3;
  if ((v3 & 0x80000000) == 0)
  {
    if (!vu__fillUnitAndSubUnit__Begin(*(_QWORD *)(a1 + 1928), *(_QWORD *)(a1 + 16), a1 + 1064, a1 + 464))
    {
      psi_Synthesis__FeedAllUnits(a1, *(_QWORD *)(a1 + 1928));
      xi_Segment__Init(a1 + 1752, *(_QWORD *)(a1 + 16), a1 + 1976);
      LODWORD(v4) = eta_PrepareNewBuffers(a1);
      if ((v4 & 0x80000000) == 0 && !eta_InOut__IsEndState(a1 + 1936) && *(_DWORD *)(a1 + 1944))
      {
        v8 = 0;
        *(_DWORD *)(a1 + 1964) = 0;
        v9 = *(_QWORD *)(a1 + 1928);
        v10 = *(unsigned __int16 *)(v9 + 16);
        *(_QWORD *)(a1 + 2036) = 0;
        v11 = *(_BYTE **)(a1 + 512);
        if (*v11 != 35)
        {
          ++*(_WORD *)(v9 + 20);
          v8 = 1;
        }
        if (v11[*(int *)(a1 + 520) - 1] != 35)
        {
          --v10;
          *(_DWORD *)(a1 + 2036) = 1;
        }
        v12 = v10 - v8;
        if (v10 > v8)
        {
          do
          {
            if (v12 == 1)
              *(_DWORD *)(a1 + 2040) = 1;
            psi_Synthesis__ProcessOnePolyphone(a1, --v12 == 0);
          }
          while (v12);
          v9 = *(_QWORD *)(a1 + 1928);
        }
        vu__fillUnitAndSubUnit__End(v9, *(_QWORD *)(a1 + 16));
      }
    }
    v5 = eta_Synth_UnlinkMsgLayers((_QWORD *)a1);
    if (v5)
      v6 = (_DWORD)v4 == 0;
    else
      v6 = 0;
    if (v6)
      return v5;
    else
      return v4;
  }
  return v4;
}

uint64_t synth_bet1b_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ISynth_bet1b;
  return result;
}

uint64_t eta_synth_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2164269063;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 83214;
  }
  return result;
}

uint64_t eta_synth_ClassClose()
{
  return 0;
}

uint64_t eta_synth_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Object;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v5 = 2164269066;
  if (!a5)
    return 2164269063;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v30);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((safeh_HandleCheck(a1, a2, 83214, 408) & 0x80000000) != 0)
    return 2164269064;
  v12 = heap_Calloc(*(_QWORD **)(v30 + 8), 1, 2072);
  if (v12)
  {
    v13 = v12;
    *(_WORD *)(v12 + 296) = 0;
    *(_DWORD *)(v12 + 432) = 0;
    *(_WORD *)(v12 + 640) = 0;
    *(_QWORD *)(v12 + 644) = 0;
    *(_QWORD *)v12 = a3;
    *(_QWORD *)(v12 + 8) = a4;
    v14 = v30;
    *(_QWORD *)(v12 + 16) = v30;
    *(_QWORD *)(v12 + 24) = a1;
    *(_WORD *)(v12 + 2044) = 257;
    Object = objc_GetObject(*(_QWORD *)(v14 + 48), (uint64_t)"SYNTHSTREAM", &v29);
    if ((Object & 0x80000000) != 0)
      goto LABEL_30;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v29 + 8);
    Object = objc_GetObject(*(_QWORD *)(v30 + 48), (uint64_t)"SYNTHOUTPUTSINK", &v29);
    if ((Object & 0x80000000) != 0)
      goto LABEL_30;
    v16 = v29;
    *(_QWORD *)(v13 + 440) = *(_QWORD *)(v29 + 8);
    *(_OWORD *)(v13 + 448) = *(_OWORD *)(v16 + 16);
    v17 = heap_Alloc(*(_QWORD *)(v30 + 8), 2048);
    *(_QWORD *)(v13 + 2056) = v17;
    if (!v17)
    {
LABEL_31:
      eta_synth_loc_ObjClose(v13, 0);
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return v5;
    }
    *(_QWORD *)(v13 + 616) = v13;
    *(_QWORD *)(v13 + 624) = eta_synth_CheckChange;
    *(_QWORD *)(v13 + 632) = eta_synth_LearnChange;
    LODWORD(v26) = 0;
    if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", (int *)&v26) & 0x80000000) != 0)
    {
      *(_WORD *)(v13 + 640) = 2;
      paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", 2u);
    }
    else
    {
      *(_WORD *)(v13 + 640) = v26;
    }
    LODWORD(v26) = 0;
    v28 = 0;
    if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"volume", (unsigned int *)&v26) & 0x80000000) != 0)
    {
      *(_WORD *)(v13 + 648) = 80;
      Object = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"volume", 0x50u);
      if ((Object & 0x80000000) != 0)
        goto LABEL_30;
    }
    else
    {
      v18 = v26;
      if ((unsigned __int16)v26 >= 0x64u)
        v18 = 100;
      *(_WORD *)(v13 + 648) = v18;
    }
    if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"rate", &v28) & 0x80000000) == 0)
    {
      v19 = v28;
      if ((unsigned __int16)v28 >= 0x190u)
        v19 = 400;
      *(_WORD *)(v13 + 652) = v19;
      *(_WORD *)(v13 + 650) = v19;
LABEL_23:
      v20 = (__int128 *)(v13 + 616);
      v21 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
      v26 = *(_OWORD *)(v13 + 616);
      v27 = *(_QWORD *)(v13 + 632);
      Object = paramc_ListenerAdd(v21, "waitfactor", &v26);
      if ((Object & 0x80000000) == 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
        v26 = *v20;
        v27 = *(_QWORD *)(v13 + 632);
        Object = paramc_ListenerAdd(v22, "pitch", &v26);
        if ((Object & 0x80000000) == 0)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
          v26 = *v20;
          v27 = *(_QWORD *)(v13 + 632);
          Object = paramc_ListenerAdd(v23, "volume", &v26);
          if ((Object & 0x80000000) == 0)
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
            v26 = *v20;
            v27 = *(_QWORD *)(v13 + 632);
            Object = paramc_ListenerAdd(v24, "rate", &v26);
            if ((Object & 0x80000000) == 0)
            {
              Object = eta_synth_InterceptUnsupportedAddonLoading(v13);
              if ((Object & 0x80000000) == 0)
              {
                *(_QWORD *)a5 = v13;
                *(_DWORD *)(a5 + 8) = 83213;
                return eta_synth_ObjReopen(v13, *(_QWORD *)(a5 + 8));
              }
            }
          }
        }
      }
      goto LABEL_30;
    }
    *(_DWORD *)(v13 + 650) = 6553700;
    Object = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"rate", 0x64u);
    if ((Object & 0x80000000) == 0)
      goto LABEL_23;
LABEL_30:
    v5 = Object;
    goto LABEL_31;
  }
  return v5;
}

uint64_t eta_synth_ObjClose(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  else
    return eta_synth_loc_ObjClose(a1, 0);
}

uint64_t eta_synth_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int16 v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  char __s[72];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = 2164269065;
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  v24 = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 2068) = 0;
  WSOLA__Initialise(*(_QWORD *)(a1 + 2008));
  *(_DWORD *)(a1 + 650) = 6553700;
  if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", &v24) & 0x80000000) != 0)
  {
    result = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", 0x64u);
    if ((result & 0x80000000) != 0)
      return result;
  }
  else
  {
    v8 = v24;
    if ((unsigned __int16)v24 >= 0x190u)
      v8 = 400;
    *(_WORD *)(a1 + 652) = v8;
    *(_WORD *)(a1 + 650) = v8;
  }
  *(_BYTE *)(a1 + 2016) = 0;
  *(_WORD *)(a1 + 2044) = 0;
  v10 = "text/x-realspeak-usphonemes;charset=tts";
  v11 = 1u;
  do
  {
    v12 = *(unsigned __int16 *)(a1 + 296);
    if (v12 > 7)
      goto LABEL_22;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, v10, 0, 0, a1 + 32 * v12 + 56);
    if ((result & 0x80000000) != 0)
      goto LABEL_16;
    v13 = *(unsigned __int16 *)(a1 + 296);
    v14 = a1 + 32 * v13;
    *(_DWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = v10;
    *(_WORD *)(a1 + 296) = v13 + 1;
    v10 = eta_synth_ProcessStart_szINPUT_STREAMS[v11++];
  }
  while (v11 != 6);
  v12 = *(unsigned __int16 *)(a1 + 296);
  if (v12 > 7)
    goto LABEL_22;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
             0,
             0,
             a1 + 32 * v12 + 56);
  if ((result & 0x80000000) == 0)
  {
    v15 = *(unsigned __int16 *)(a1 + 296);
    v16 = a1 + 40 + 32 * v15;
    *(_DWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = "application/x-realspeak-markers-pp;version=4.0";
    LOWORD(v15) = v15 + 1;
    *(_WORD *)(a1 + 296) = v15;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
               0,
               1,
               a1 + 40 + 32 * (unsigned __int16)v15 + 16);
    if ((result & 0x80000000) == 0)
    {
      v17 = *(unsigned __int16 *)(a1 + 296);
      v18 = a1 + 32 * v17;
      *(_DWORD *)(v18 + 40) = 1;
      *(_QWORD *)(v18 + 48) = "application/x-realspeak-markers-pp;version=4.0";
      *(_WORD *)(a1 + 432) = v17;
      *(_WORD *)(a1 + 296) = v17 + 1;
    }
  }
LABEL_16:
  LODWORD(v12) = *(unsigned __int16 *)(a1 + 296);
  if (v12 > 7)
  {
LABEL_22:
    v21 = 0;
    v22 = (_QWORD *)(a1 + 64);
    do
    {
      v23 = *(v22 - 1);
      if (v23)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v23, *v22);
        LOWORD(v12) = *(_WORD *)(a1 + 296);
      }
      ++v21;
      v22 += 4;
    }
    while (v21 < (unsigned __int16)v12);
    LOWORD(v12) = 0;
    result = v7;
    goto LABEL_27;
  }
  if ((result & 0x80000000) == 0)
  {
    strcpy(__s, "audio/L16;rate=");
    v19 = strlen(__s);
    LH_itoa(*(_DWORD *)(a1 + 1988), &__s[v19], 0xAu);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, __s, 0, 1, a1 + 32 * *(unsigned __int16 *)(a1 + 296) + 56);
    v12 = *(unsigned __int16 *)(a1 + 296);
    if ((result & 0x80000000) == 0)
    {
      v20 = a1 + 32 * v12;
      *(_DWORD *)(v20 + 40) = 1;
      *(_QWORD *)(v20 + 48) = 0;
      *(_WORD *)(a1 + 434) = v12;
      LOWORD(v12) = v12 + 1;
      goto LABEL_27;
    }
  }
  if ((_DWORD)v12)
  {
    v7 = result;
    goto LABEL_22;
  }
LABEL_27:
  *(_WORD *)(a1 + 296) = v12;
  return result;
}

uint64_t eta_synth_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void **v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = 0;
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  *a5 = 1;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (char *)&v34 + 4, &v34);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (HIDWORD(v34))
  {
    v8 = eta_synth_doWsolaSynthesis(a1);
    goto LABEL_5;
  }
  v35 = 0;
  v8 = eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v35);
  if ((v8 & 0x80000000) != 0)
    goto LABEL_53;
  v12 = *(unsigned int *)(v35 + 8);
  if (v12 < 0x20)
    goto LABEL_53;
  v13 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v12);
  *(_QWORD *)(a1 + 600) = v13;
  if (!v13)
  {
    v8 = 2164269066;
    goto LABEL_53;
  }
  memcpy(v13, *(const void **)v35, *(unsigned int *)(v35 + 8));
  v14 = 0;
  v15 = 0;
  *(_DWORD *)(a1 + 608) = (unsigned __int16)(*(_DWORD *)(v35 + 8) >> 5);
  v16 = (void **)(a1 + 1936);
  v17 = (int *)(a1 + 1944);
  while (1)
  {
    v18 = *(int *)(a1 + 608);
    if (v14 >= v18)
      goto LABEL_40;
    v19 = *(_QWORD *)(a1 + 600);
    v20 = (int *)(v19 + 32 * v14);
    v20[3] = 0;
    v20[4] = 0;
    v21 = *v20;
    if (*v20 == 8)
      break;
    if (v21 == 25)
    {
      v22 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", *(_DWORD *)(v19 + 32 * v14 + 24));
      goto LABEL_37;
    }
    if (v21 == 13)
    {
      v22 = eta_synth_ResetParams(a1);
LABEL_37:
      v8 = v22;
    }
LABEL_38:
    ++v14;
    if ((v8 & 0x80000000) != 0)
    {
      LODWORD(v18) = *(_DWORD *)(a1 + 608);
LABEL_40:
      if (v15 >= (int)v18)
        goto LABEL_46;
      if (!*v16)
      {
        *(_DWORD *)(a1 + 1944) = 0;
        *(_BYTE *)(a1 + 1948) = 0;
        v8 = eta_PushSamplesAndMarkersOut(a1, 0, (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), 0, 0);
        if ((v8 & 0x80000000) != 0 || !*v16)
          goto LABEL_46;
        LODWORD(v18) = *(_DWORD *)(a1 + 608);
      }
      *(_DWORD *)(a1 + 1944) = 0;
      *(_BYTE *)(a1 + 1948) = 3;
      v8 = eta_PushSamplesAndMarkersOut(a1, 3, (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), *(_QWORD *)(a1 + 600) + 32 * v15, (int)v18 - v15);
      goto LABEL_46;
    }
  }
  v23 = v20[6];
  if (v23 < 1)
    goto LABEL_38;
  v24 = fxd_S32ShMultRndS32S32(v20[6], 107374182, 31) + 22 * v23;
  if (!v24)
    goto LABEL_38;
  v25 = *v16;
  if (!*v16)
  {
    *(_DWORD *)(a1 + 1944) = 0;
    *(_BYTE *)(a1 + 1948) = 0;
    v8 = eta_PushSamplesAndMarkersOut(a1, 0, (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), 0, 0);
    if ((v8 & 0x80000000) != 0)
      goto LABEL_46;
    v25 = *v16;
    if (!*v16)
      goto LABEL_46;
  }
  if (v24 < 1)
    goto LABEL_38;
  while (1)
  {
    v26 = *v17;
    if (v24 >= *v17)
    {
      v24 -= v26;
    }
    else
    {
      *v17 = v24;
      v26 = v24;
      v24 = 0;
    }
    *(_BYTE *)(a1 + 1948) = 2;
    bzero(v25, 2 * v26);
    v8 = eta_PushSamplesAndMarkersOut(a1, *(unsigned __int8 *)(a1 + 1948), (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), *(_QWORD *)(a1 + 600) + 32 * v15, (int)v14 + 1 - v15);
    if ((v8 & 0x80000000) != 0)
      break;
    v25 = *v16;
    if (!*v16)
      break;
    v15 = v14 + 1;
    if (v24 < 1)
    {
      v15 = v14 + 1;
      goto LABEL_38;
    }
  }
LABEL_46:
  v27 = *(_QWORD *)(a1 + 600);
  if (v27)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v27);
    *(_QWORD *)(a1 + 600) = 0;
  }
  *(_DWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1936) = 0;
LABEL_53:
  if ((_DWORD)v34)
  {
    v29 = *(unsigned __int16 *)(a1 + 296);
    if (*(_WORD *)(a1 + 296))
    {
      v30 = 0;
      v31 = (_QWORD *)(a1 + 64);
      do
      {
        if (*(v31 - 1) && *((_DWORD *)v31 - 6) == 1)
        {
          v32 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
          if (v32 >= 0)
            v8 = v8;
          else
            v8 = v32;
          *(v31 - 1) = safeh_GetNullHandle();
          *v31 = v33;
          v29 = *(unsigned __int16 *)(a1 + 296);
        }
        ++v30;
        v31 += 4;
      }
      while (v30 < v29);
    }
  }
LABEL_5:
  if ((v8 & 0x80000000) != 0)
    goto LABEL_50;
  v9 = (_QWORD *)(a1 + 64);
  v10 = (unsigned int *)(a1 + 312);
  v11 = -1;
  while (++v11 < (unint64_t)*(unsigned __int16 *)(a1 + 296))
  {
    if (!*((_DWORD *)v9 - 6))
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(v9 - 1), *v9, *v10);
    v9 += 4;
    v10 += 4;
    if ((v8 & 0x80000000) != 0)
      goto LABEL_50;
  }
  if (eta_InOut__IsEndState(a1 + 1936))
  {
LABEL_50:
    *(_DWORD *)(a1 + 1960) = 7;
    chi_DecodePolyphone__DeinitPoly((_QWORD *)(a1 + 1232));
    psi_DataMapSegment__DeinitPoly(a1 + 1064);
    xi_Segment__DeinitPoly((_QWORD *)(a1 + 1752));
  }
  return v8;
}

uint64_t eta_synth_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = safeh_HandleCheck(a1, a2, 83213, 2072);
  if ((v3 & 0x80000000) != 0)
    return 2164269064;
  v4 = v3;
  v5 = *(unsigned __int16 *)(a1 + 296);
  if (*(_WORD *)(a1 + 296))
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 64);
    do
    {
      v8 = *(v7 - 1);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v8, *v7);
        if (v9 >= 0)
          v4 = v4;
        else
          v4 = v9;
        *(v7 - 1) = safeh_GetNullHandle();
        *v7 = v10;
        v5 = *(unsigned __int16 *)(a1 + 296);
      }
      ++v6;
      v7 += 4;
    }
    while (v6 < v5);
  }
  *(_WORD *)(a1 + 296) = 0;
  return v4;
}

uint64_t eta_synth_CheckChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  int v8;
  uint64_t result;

  *a4 = 1;
  if (!strcmp(__s1, "waitfactor"))
  {
    if (LH_atou(a3) >= 0xA)
      goto LABEL_16;
    return 0;
  }
  if (!strcmp(__s1, "pitch"))
  {
    if (atoi(a3) != 50)
      goto LABEL_12;
    return 0;
  }
  if (!strcmp(__s1, "rate"))
  {
    if ((atoi(a3) - 50) >= 0x15F)
    {
LABEL_16:
      result = 2164269071;
      *a4 = 0;
      return result;
    }
    return 0;
  }
  if (!strcmp(__s1, "volume"))
  {
    if (atoi(a3) >= 0x65)
      goto LABEL_16;
    return 0;
  }
  if (!strcmp(__s1, *(const char **)(a1 + 912)))
  {
LABEL_12:
    *a4 = 0;
    return 2164269057;
  }
  v8 = *(_DWORD *)(a1 + 1960);
  *a4 = 0;
  if (v8 == 7)
    return 2164269073;
  else
    return 2164269063;
}

uint64_t eta_synth_LearnChange(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;

  if (strcmp(__s1, "waitfactor"))
  {
    if (strcmp(__s1, "volume"))
    {
      v6 = 2164269071;
      if (strcmp(__s1, "rate"))
        return 2164269063;
      v11 = atoi(a3);
      if ((v11 - 50) <= 0x15E)
      {
        v6 = 0;
        *(_WORD *)(a1 + 652) = *(_WORD *)(a1 + 650);
        *(_WORD *)(a1 + 650) = v11;
      }
      return v6;
    }
    v10 = atoi(a3);
    if (v10 <= 0x64)
    {
      v6 = 0;
      *(_WORD *)(a1 + 648) = v10;
      return v6;
    }
    return 2164269071;
  }
  v7 = atoi(a3);
  if (v7 > 9u)
    return 2164269071;
  v6 = 0;
  *(_WORD *)(a1 + 640) = v7;
  v8 = *(_DWORD *)(a1 + 1988) * v7;
  if ((v8 + 6) < 9)
    v9 = 1;
  else
    v9 = (v8 + 2) / 5;
  *(_DWORD *)(a1 + 644) = v9;
  return v6;
}

uint64_t eta_synth_InterceptUnsupportedAddonLoading(uint64_t a1)
{
  uint64_t result;
  int v3;
  char *v4;
  int v5;
  char *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *__s;

  v14 = 0;
  __s = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voice", &__s);
  if ((result & 0x80000000) == 0)
  {
    v3 = strlen(__s);
    v4 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v3 + 13));
    *(_QWORD *)(a1 + 912) = v4;
    if (v4)
    {
      strcpy(v4, "voiceaddons.");
      v5 = strlen(*(const char **)(a1 + 912));
      v6 = __s;
      if (*__s)
      {
        v7 = v5;
        v8 = 0;
        v9 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 912) + v7 + v9) = __tolower(v6[v8]);
          v6 = __s;
          v8 = ++v9;
        }
        while (strlen(__s) > v9);
      }
      paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
      if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 912), &v14) & 0x80000000) == 0
        || (result = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 912), &byte_1DEBD87CE), (result & 0x80000000) == 0)&& (result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 912), &v14), (result & 0x80000000) == 0))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
        v11 = *(_BYTE **)(a1 + 912);
        v12 = *(_OWORD *)(a1 + 616);
        v13 = *(_QWORD *)(a1 + 632);
        return paramc_ListenerAdd(v10, v11, &v12);
      }
    }
    else
    {
      return 2164269066;
    }
  }
  return result;
}

uint64_t eta_PushSamplesAndMarkersOut(uint64_t a1, int a2, _QWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;

  v25 = 0;
  v26 = a6;
  result = 2164269062;
  if (a1 && a3 && a4)
  {
    if (a5)
    {
      if (a6)
      {
        v13 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
        result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)(a1 + 32) + 136))(*(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), &v25);
        if ((result & 0x80000000) != 0)
          goto LABEL_29;
        v14 = 0;
        v15 = v25 >> 1;
        v25 >>= 1;
        do
        {
          *(_DWORD *)(a5 + v14 + 12) += v15;
          v14 += 32;
        }
        while (32 * a6 != v14);
        v16 = a1 + 32 * *(unsigned __int16 *)(a1 + 432);
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v16 + 56), *(_QWORD *)(v16 + 64), a5, 32 * a6);
        if ((result & 0x80000000) != 0)
          goto LABEL_29;
      }
    }
    v17 = *(_DWORD *)(a1 + 2064);
    v18 = *(_DWORD *)(a1 + 2068);
    if (v17 <= v18)
    {
      v19 = 0;
    }
    else
    {
      if (v17 <= *a4 + v18)
        v19 = v17 - v18;
      else
        v19 = *a4;
      if (*a3 && v19)
      {
        v20 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v20 + 56), *(_QWORD *)(v20 + 64));
        if ((result & 0x80000000) != 0)
          goto LABEL_29;
        *(_DWORD *)(a1 + 2068) += v19;
      }
    }
    if (a2 == 3)
    {
      v21 = 1;
    }
    else if (a6)
    {
      v21 = 2;
    }
    else
    {
      v21 = 2 * (*a4 != 0);
    }
    result = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, int *))(a1 + 440))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), v21, a1 + 2064, (int *)&v26);
    if ((result & 0x80000000) != 0)
      goto LABEL_29;
    *(_DWORD *)(a1 + 2068) = 0;
    if (*a4 > v19)
    {
      v22 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v22 + 56), *(_QWORD *)(v22 + 64), *(_QWORD *)(a1 + 2056) + 2 * v19, 2 * (*a4 - v19));
      if ((result & 0x80000000) != 0)
        goto LABEL_29;
      *(_DWORD *)(a1 + 2068) = *a4 - v19;
    }
    if (a2 != 3)
    {
      v23 = *(_QWORD *)(a1 + 2056);
      v24 = 1024;
      goto LABEL_30;
    }
LABEL_29:
    v23 = 0;
    v24 = 0;
LABEL_30:
    *a3 = v23;
    *a4 = v24;
  }
  return result;
}

uint64_t Rhelp2_Lookup_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t **a5)
{
  uint64_t inited;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t Data;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0;
  v18 = 0uLL;
  inited = InitRsrcFunction(a1, a2, &v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a5 = 0;
  v11 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 968);
  if (v11)
  {
    v12 = v11;
    *v11 = v19;
    v11[1] = a3;
    __strcpy_chk();
    v17 = xmmword_1DECD01A0;
    Data = psi_VFDat__loadData((uint64_t)(v12 + 29), a1, a2, a4, (uint64_t)(v12 + 11), 0, (uint64_t)(v12 + 17), 0, (uint64_t)(v12 + 23), 1);
    if ((Data & 0x80000000) != 0
      || (Data = psi_Lookup__InitFromDatFiles((uint64_t)(v12 + 29), (uint64_t)(v12 + 11), (uint64_t)(v12 + 17), (uint64_t)(v12 + 23), 0), (Data & 0x80000000) != 0))
    {
      v14 = Data;
    }
    else
    {
      v14 = chi_DecodePolyphone__Create((uint64_t)(v12 + 50), 0, v19, (unsigned __int8 *)v12[24], &v17);
      if ((v14 & 0x80000000) == 0)
      {
        v15 = v18;
        *(_OWORD *)(v12 + 117) = v17;
        *(_OWORD *)(v12 + 119) = v15;
LABEL_11:
        *a5 = v12;
        return v14;
      }
    }
    *a5 = v12;
    Rhelp2_Lookup_ObjClose(a5);
    v12 = 0;
    goto LABEL_11;
  }
  return 2164269066;
}

uint64_t Rhelp2_Lookup_ObjClose(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = chi_DecodePolyphone__Delete(v2 + 50, *v2);
    if ((v3 & 0x80000000) == 0)
      v3 = psi_VFDat__unloadData((uint64_t)(v2 + 29), (uint64_t)(v2 + 11), (uint64_t)(v2 + 17), (uint64_t)(v2 + 23));
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  heap_Free(*(_QWORD **)(*v2 + 8), (uint64_t)v2);
  *a1 = 0;
  return v4;
}

uint64_t Rhelp2_LoadUnitData(uint64_t a1, int a2, int *a3, unsigned int *a4, _DWORD *a5, _WORD *a6, unsigned int a7)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t PreviousDemiID;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t Vect;
  uint64_t inited;
  int v34;
  uint64_t v35;
  __int16 *v37;
  __int16 v38;
  _WORD *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v57 = 0;
  v58 = 0;
  v56 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v48 = 0;
  v49 = 0;
  v51 = 0;
  v11 = *a3;
  v12 = 860 - *a3;
  v50 = 0;
  if (v11 <= 0x35B)
    v13 = v12;
  else
    v13 = 0;
  v14 = a1 + 232;
  v15 = *a4;
  PreviousDemiID = psi_Lookup__getPreviousDemiID(a1 + 232, a2, &v55, (_BYTE *)&v56 + 1, (_DWORD *)&v58 + 1, &v58, (int *)&v57 + 1, &v56, (unsigned int *)&v57);
  if ((PreviousDemiID & 0x80000000) != 0)
    goto LABEL_47;
  v17 = HIDWORD(v57);
  v18 = v11 - 860;
  v42 = v14;
  v41 = a7;
  v40 = a5;
  v43 = v57;
  v44 = v58;
  if (v11 < 0x35C)
  {
    v19 = HIDWORD(v58) + 860;
    v23 = v11;
  }
  else
  {
    v19 = HIDWORD(v58) + 860;
    if (v11 == 860)
    {
      v23 = 860;
    }
    else
    {
      if (HIDWORD(v57))
        v20 = HIDWORD(v57) + 860;
      else
        v20 = 860;
      if (HIDWORD(v57))
        v19 += HIDWORD(v57);
      v21 = HIDWORD(v57) >= v18;
      v22 = HIDWORD(v57) - v18;
      if (v21)
        v23 = v11;
      else
        v23 = v20;
      if (v21)
        v19 = HIDWORD(v58) + v11;
      if (v21)
        v17 = v22;
      else
        v17 = 0;
    }
  }
  v24 = v19 + 440;
  v25 = v19 + 1300;
  v26 = v19 + v15;
  if (v15 - 440 <= 0x35C)
    v27 = v15;
  else
    v27 = 1300;
  if (v15 - 440 > 0x35C)
    v26 = v25;
  if (v15 == 440)
    v28 = 440;
  else
    v28 = v27;
  if (v15 == 440)
    v26 = v24;
  if (HIBYTE(v56))
  {
    v28 = 440;
    v26 = v24;
  }
  if (v15 >= 0x1B8)
    v29 = v28;
  else
    v29 = v15;
  if (v15 >= 0x1B8)
    v30 = v26;
  else
    v30 = v24;
  v31 = HIBYTE(v56) != 0;
  xi_Segment__Init_for_psola(a1 + 760, *(_QWORD *)a1, a1 + 936);
  *a3 = v23;
  *a4 = v29;
  v48 = __PAIR64__(v30, v17);
  LODWORD(v49) = 0;
  HIDWORD(v49) = v44;
  LODWORD(v50) = 0x10000;
  HIDWORD(v50) = v43;
  LOBYTE(v51) = 68;
  BYTE1(v51) = 16 * v31;
  Vect = vect_s_t__createVect(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)&v52, v17 + v30 + 2160);
  if ((Vect & 0x80000000) != 0)
  {
    inited = Vect;
    v14 = v42;
    goto LABEL_49;
  }
  LODWORD(v54) = HIDWORD(v54);
  v14 = v42;
  PreviousDemiID = psi_DataMapSegment__InitPoly(v42, (_DWORD *)&v49 + 1, (unsigned int *)&v50 + 1);
  if ((PreviousDemiID & 0x80000000) != 0
    || (PreviousDemiID = xi_Segment__InitPoly_withDur(a1 + 760, (uint64_t)&v48, HIDWORD(v49), SHIDWORD(v50), *(_QWORD *)(a1 + 256), *(unsigned __int8 *)(*(_QWORD *)(a1 + 272) + 44)), (PreviousDemiID & 0x80000000) != 0))
  {
LABEL_47:
    inited = PreviousDemiID;
  }
  else
  {
    inited = chi_DecodePolyphone__InitPoly(a1 + 400);
    if ((inited & 0x80000000) == 0)
    {
      v34 = HIDWORD(v48);
      *(_DWORD *)(a1 + 672) = HIDWORD(v50);
      v47 = v34;
      chi_DecodePolyphone__SmpRequested(a1 + 400, (int *)(a1 + 760), &v47, (uint64_t)&v52);
      v35 = *a3 + HIDWORD(v58) + *a4;
      *v40 = v35;
      if (v35 <= v41)
      {
        if (v11 <= 0x35B)
        {
          if ((_DWORD)v35)
          {
            v39 = v53;
            do
            {
              *a6++ = v39[v13++];
              --v35;
            }
            while (v35);
          }
        }
        else if ((_DWORD)v35)
        {
          v37 = v53;
          do
          {
            v38 = *v37++;
            *a6++ = v38;
            --v35;
          }
          while (v35);
        }
      }
      else
      {
        inited = 2164269065;
      }
    }
  }
LABEL_49:
  vect_i_t__deleteVect((uint64_t)&v52);
  chi_DecodePolyphone__DeinitPoly((_QWORD *)(a1 + 400));
  psi_DataMapSegment__DeinitPoly(v14);
  xi_Segment__DeinitPoly((_QWORD *)(a1 + 760));
  return inited;
}

uint64_t Rhelp2_Lookup_Deinit(uint64_t a1)
{
  chi_DecodePolyphone__DeinitPoly((_QWORD *)(a1 + 400));
  psi_DataMapSegment__DeinitPoly(a1 + 232);
  xi_Segment__DeinitPoly((_QWORD *)(a1 + 760));
  return 0;
}

uint64_t Rhelp2_Lookup_NrUnits(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 236);
  if (*(_DWORD *)(a1 + 236))
    return 0;
  else
    return 2164269057;
}

uint64_t Rhelp2_Lookup_Fingerprint(uint64_t a1, char *__dst, size_t __n)
{
  unsigned int v3;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  _BOOL4 v11;
  BOOL v12;

  v3 = __n;
  v5 = *(const char **)(a1 + 80);
  if (v5)
  {
    if (strlen(*(const char **)(a1 + 80)) >= __n)
      v6 = 2164269057;
    else
      v6 = 0;
    strncpy(__dst, v5, v3);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 236);
    v8 = __n;
    v9 = strncpy(__dst, (const char *)(a1 + 16), __n);
    LODWORD(v10) = strlen(v9);
    v11 = v10 < v3;
    if (v10 < v3 && v7)
    {
      v10 = v10;
      do
      {
        __dst[v10++] = (v7 % 0xA) | 0x30;
        v11 = v10 < v3;
        if (v10 >= v8)
          break;
        v12 = v7 > 9;
        v7 /= 0xAu;
      }
      while (v12);
    }
    if (v11)
    {
      v6 = 0;
      __dst[v10] = 0;
    }
    else
    {
      return 2164269057;
    }
  }
  return v6;
}

uint64_t rhelp2_lookup_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ILookup;
  return result;
}

uint64_t psi_Synthesis__Denit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  v4 = 2164269056;
  if (!a1)
    return 2164269062;
  if (chi_DecodePolyphone__Delete((uint64_t *)(a1 + 1232), *(_QWORD *)(a1 + 16)))
  {
    v12 = "error in chi_DecodePolyphone__Delete";
  }
  else if (rho_Concat__Delete(a1 + 1592))
  {
    v12 = "error in rho_Concat__Delete";
  }
  else
  {
    if (!psi_VFDat__unloadData(a1 + 1064, a2, a3, a4))
      return 0;
    v12 = "error in psi_VFDat__unloadData";
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)v12, v9, v10, v11, v14);
  return v4;
}

uint64_t psi_Synthesis__Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  __int128 v15;
  uint64_t v16;

  v5 = 2164269056;
  if (a1)
  {
    *(_QWORD *)(a1 + 1928) = 0;
    if (*(_DWORD *)(a5 + 12) == 22050)
    {
      if (psi_Lookup__InitFromDatFiles(a1 + 1064, a2, a3, a4, 0))
      {
        v12 = a1 + 16;
        v13 = "error in psi_Lookup__InitFromDatFiles";
      }
      else
      {
        v12 = a1 + 16;
        if (chi_DecodePolyphone__Create(a1 + 1232, a1, *(_QWORD *)(a1 + 16), *(unsigned __int8 **)(a4 + 8), (__int128 *)a5))
        {
          v13 = "error in chi_DecodePolyphone__Create";
        }
        else
        {
          if (!rho_Concat__Create(a1 + 1592, *(_QWORD *)(a1 + 16), a5))
          {
            v5 = 0;
            v15 = *(_OWORD *)(a5 + 16);
            *(_OWORD *)(a1 + 1976) = *(_OWORD *)a5;
            *(_OWORD *)(a1 + 1992) = v15;
            return v5;
          }
          v13 = "error in rho_Concat__Create";
        }
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)v12 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)v13, v9, v10, v11, v16);
    }
    psi_Synthesis__Denit(a1, a1 + 920, a1 + 968, a1 + 1016);
  }
  return v5;
}

uint64_t psi_Synthesis__FeedAllUnits(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 2164269056;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *(_QWORD *)(a1 + 1928) = a2;
      *(_WORD *)(a2 + 20) = 0;
      *(_DWORD *)(a1 + 1960) = 3;
    }
  }
  return result;
}

uint64_t psi_Synthesis__ProcessOnePolyphone(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  result = 0;
  v4 = *(_DWORD *)(a1 + 1960);
  if (v4 == 7)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if (v4 != 5)
  {
    if (v4 != 3)
      return result;
    *(_DWORD *)(a1 + 1960) = 5;
  }
  result = rho_concatenate((unsigned int *)(a1 + 1592), a1 + 1232, (int *)(a1 + 1752), (uint64_t **)(a1 + 1928), a1 + 1064, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 1928) + 20) != *(unsigned __int16 *)(*(_QWORD *)(a1 + 1928) + 16))
      return v5;
    LODWORD(result) = 7;
LABEL_9:
    *(_DWORD *)(a1 + 1960) = result;
    return v5;
  }
  return result;
}

_DWORD *v_equ_i_t(_DWORD *result, int *a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

_WORD *v_equ_s_t(_WORD *result, __int16 *a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  __int16 v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap_s_t(void *a1, int a2)
{
  if (a2 >= 1)
    bzero(a1, 2 * a2);
  return a1;
}

_BYTE *v_equ_uc_t(_BYTE *result, char *a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;
  char v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t vect_i_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  void *v6;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = a1;
    v6 = (void *)heap_Calloc(a1, 4, a3);
    *(_QWORD *)(a2 + 8) = v6;
    if (v6)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      bzero(v6, 4 * a3);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_i_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t vect_s_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = a3;
    *(_QWORD *)a2 = a1;
    v7 = (void *)heap_Calloc(a1, 2, a3);
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      bzero(v7, 2 * v6);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_c_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  size_t v6;
  void *v7;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = a3;
    *(_QWORD *)a2 = a1;
    v7 = (void *)heap_Calloc(a1, 1, a3);
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      bzero(v7, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_uc_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  size_t v5;
  void *v6;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = a3;
  *(_QWORD *)a2 = a1;
  v6 = (void *)heap_Calloc(a1, 1, a3);
  *(_QWORD *)(a2 + 8) = v6;
  if (!v6)
    return 2164269066;
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  bzero(v6, v5);
  return 0;
}

uint64_t rho_Concat__OverlapWindow__Init(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  void *v4;

  v2 = 2164269056;
  if (a2 > 15999)
  {
    if (a2 == 16000)
    {
      v3 = 161;
      v4 = &smpOverlapWindow_16_0;
      goto LABEL_10;
    }
    if (a2 == 22050)
    {
      v3 = 221;
      v4 = &smpOverlapWindow_22_0;
      goto LABEL_10;
    }
  }
  else
  {
    if (a2 == 8000)
    {
      v3 = 81;
      v4 = &smpOverlapWindow_8_0;
      goto LABEL_10;
    }
    if (a2 == 11025)
    {
      v3 = 113;
      v4 = &smpOverlapWindow_11_0;
LABEL_10:
      v2 = 0;
      *(_QWORD *)(a1 + 136) = v4;
      *(_DWORD *)(a1 + 144) = v3;
      *(_DWORD *)(a1 + 148) = v3;
    }
  }
  return v2;
}

uint64_t rho_Concat__OverlapWindow__Denit(uint64_t a1)
{
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return 0;
}

uint64_t rho_Concat__WindowsOverlap_wsola(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  v5 = *(unsigned int *)(a1 + 4);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8) + 2 * a4;
    v8 = *(_QWORD *)(a3 + 8) + 2 * a5;
    v9 = *(_QWORD *)(a1 + 136);
    v10 = 4 * v5;
    do
    {
      v11 = *(unsigned __int16 *)(v7 + 2 * v6);
      v12 = (unsigned __int16)*(_DWORD *)(v9 + 4 * v6);
      v13 = *(int *)(v9 + 4 * v6) >> 16;
      v14 = (__int16)v11 >> 16;
      v15 = (v11 * v13 + v14 * v12 + ((v11 * v12 + 0x8000) >> 16) + 0x2000) >> 14;
      LOWORD(v13) = v14 * v13;
      v16 = *(unsigned __int16 *)(v8 + 2 * v6);
      *(_WORD *)(v7 + 2 * v6++) = v15
                                + 4 * (v13 + ((__int16)v16 >> 15) * HIWORD(*(_DWORD *)(v9 + v10)))
                                + ((v16 * (*(int *)(v9 + v10) >> 16)
                                  + ((__int16)v16 >> 16) * (unsigned __int16)*(_DWORD *)(v9 + v10)
                                  + ((v16 * (unsigned __int16)*(_DWORD *)(v9 + v10) + 0x8000) >> 16)
                                  + 0x2000) >> 14);
      v10 -= 4;
    }
    while (v10);
  }
  return 0;
}

uint64_t rho_Concat__fade_out_closure(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a2 + 8) + 2 * a3;
  do
  {
    if ((a4 & ~(a4 >> 31)) == v4)
      break;
    v7 = *(unsigned __int16 *)(v6 + 2 * v4);
    v8 = (unsigned __int16)*(_DWORD *)(v5 + 4 * v4);
    *(_WORD *)(v6 + 2 * v4) = ((v7 * (*(int *)(v5 + 4 * v4) >> 16)
                              + ((__int16)v7 >> 16) * v8
                              + ((v7 * v8 + 0x8000) >> 16)
                              + 0x2000) >> 14)
                            + 4 * HIWORD(*(_DWORD *)(v5 + 4 * v4)) * ((__int16)v7 >> 15);
    ++v4;
  }
  while (v4 < *(int *)(a1 + 144));
  return 0;
}

uint64_t rho_Concat__fade_in_burst(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = (__int16 *)(*(_QWORD *)(a2 + 8) + 2 * a3);
  v6 = *(_DWORD *)(a1 + 144) - 1;
  v7 = a4 & ~(a4 >> 31);
  do
  {
    if (!v7)
      break;
    v8 = (unsigned __int16)*(_DWORD *)(v4 + 4 * v6);
    *v5 = (((unsigned __int16)*v5 * (*(int *)(v4 + 4 * v6) >> 16)
          + (*v5 >> 16) * v8
          + (((unsigned __int16)*v5 * v8 + 0x8000) >> 16)
          + 0x2000) >> 14)
        + 4 * HIWORD(*(_DWORD *)(v4 + 4 * v6)) * (*v5 >> 15);
    ++v5;
    --v7;
    v9 = v6 <= 4;
    v6 -= 5;
  }
  while (!v9);
  return 0;
}

uint64_t eta_Synth_RetrieveInputBlock(uint64_t a1, char *__s2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v3 = 2164269076;
  *a3 = 0;
  if (*(_WORD *)(a1 + 296))
  {
    v7 = 0;
    v8 = 0;
    v9 = 16 * *(unsigned __int16 *)(a1 + 296);
    while (1)
    {
      v10 = *(const char **)(a1 + v7 + 48);
      if (v10)
      {
        if (!*(_DWORD *)(a1 + v7 + 40) && !strcmp(v10, __s2))
          break;
      }
      v8 += 16;
      v7 += 32;
      if (v9 == v8)
        return v3;
    }
    if (*(_QWORD *)(a1 + v8 + 304))
    {
      v3 = 0;
LABEL_11:
      *a3 = a1 + v8 + 304;
      return v3;
    }
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + v7 + 56), *(_QWORD *)(a1 + v7 + 64), a1 + v8 + 304, a1 + v8 + 312);
    if ((v3 & 0x80000000) == 0)
      goto LABEL_11;
  }
  return v3;
}

void eta_Synth_LinkMsgLayers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  v14 = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 16);
  if ((eta_Synth_RetrieveInputBlock(a1, "text/x-realspeak-usphonemes;charset=tts", &v14) & 0x80000000) == 0)
  {
    v2 = v14;
    v3 = *(_QWORD *)v14 + 1;
    *(_BYTE *)(a1 + 472) = **(_BYTE **)v14;
    *(_QWORD *)(a1 + 512) = v3;
    v4 = (unsigned __int16)(*(_DWORD *)(v2 + 8) - 2);
    *(_DWORD *)(a1 + 520) = v4;
    if (!*(_BYTE *)(v3 + v4)
      && (eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usids;version=4.0", &v14) & 0x80000000) == 0)
    {
      v5 = v14;
      *(_QWORD *)(a1 + 488) = *(_QWORD *)v14;
      LODWORD(v5) = *(_DWORD *)(v5 + 8) >> 2;
      *(_DWORD *)(a1 + 496) = v5;
      if ((_DWORD)v5 == 2 * *(_DWORD *)(a1 + 520)
        && (eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usmarkers-u16;version=4.0", &v14) & 0x80000000) == 0)
      {
        v6 = v14;
        v7 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
        *(_QWORD *)(a1 + 536) = v7;
        if (v7)
        {
          memcpy(v7, *(const void **)v6, *(unsigned int *)(v6 + 8));
          if ((eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usplosives;version=4.0", &v14) & 0x80000000) == 0)
          {
            v8 = v14;
            v9 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
            *(_QWORD *)(a1 + 560) = v9;
            if (v9)
            {
              memcpy(v9, *(const void **)v8, *(unsigned int *)(v8 + 8));
              if ((eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usdurs;version=4.0", &v14) & 0x80000000) == 0)
              {
                v10 = v14;
                v11 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
                *(_QWORD *)(a1 + 584) = v11;
                if (v11)
                {
                  memcpy(v11, *(const void **)v10, *(unsigned int *)(v10 + 8));
                  if ((eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v14) & 0x80000000) == 0)
                  {
                    v12 = a1 + 464;
                    v13 = (_DWORD *)(v14 + 8);
                    eta_Synth_SetupMarkers(v12, *(int **)v14, *(_DWORD *)(v14 + 8) >> 5, (int *)(v14 + 8));
                    *v13 *= 32;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

__n128 eta_Synth_SetupMarkers(uint64_t a1, int *a2, int a3, int *a4)
{
  unsigned int v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  int *v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  __n128 v32;
  __n128 *v33;

  v8 = (unsigned __int16)(*(_DWORD *)(a1 + 56) + a3);
  *(_DWORD *)(a1 + 144) = v8;
  if (a3 >= 1)
  {
    v9 = a3;
    v10 = a2;
    do
    {
      v11 = *v10;
      v10 += 8;
      if (v11 == 8)
        *(_DWORD *)(a1 + 144) = ++v8;
      --v9;
    }
    while (v9);
  }
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v8, 32);
  *(_QWORD *)(a1 + 136) = v12;
  if (v12)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + v14);
        if (v15)
        {
          v19 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v16);
          *v19 = 8;
          v19[6] = 0;
          ++v16;
          ++*(_BYTE *)(*(_QWORD *)(a1 + 72) + v14);
        }
        v15 = 0;
        if (v18)
          break;
LABEL_23:
        v23 = *(_BYTE **)(a1 + 48);
        if (v14 || *v23 != 35 || (*(_BYTE *)(a1 + 8) & 1) != 0)
        {
          v24 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v16);
          *v24 = 33;
          v24[6] = v23[v14];
          ++v16;
          ++*(_BYTE *)(*(_QWORD *)(a1 + 72) + v14);
        }
        if (++v14 >= *(int *)(a1 + 56))
          goto LABEL_31;
      }
      while (1)
      {
        if (v17 >= a3 || v16 >= *(_DWORD *)(a1 + 144))
          goto LABEL_19;
        v20 = &a2[8 * v17];
        if (*v20 == 33)
        {
          if (v20[6] != 35)
            goto LABEL_18;
        }
        else if (*v20 != 8 || !a2[8 * v17 + 6])
        {
          goto LABEL_18;
        }
        v15 = 1;
LABEL_18:
        result = *(__n128 *)v20;
        v21 = *((_OWORD *)v20 + 1);
        v22 = *(_QWORD *)(a1 + 136) + 32 * v16;
        *(__n128 *)v22 = result;
        *(_OWORD *)(v22 + 16) = v21;
        ++v17;
        ++v16;
LABEL_19:
        if (!--v18)
          goto LABEL_23;
      }
    }
    v17 = 0;
    LOWORD(v16) = 0;
LABEL_31:
    *(_DWORD *)(a1 + 144) = (unsigned __int16)v16;
    *a4 = v17;
    if (**(_BYTE **)(a1 + 48) == 35)
    {
      v25 = *(_BYTE **)(a1 + 72);
      if (!*v25)
      {
        v26 = v25[1];
        if (*(int *)(a1 + 56) < 3)
        {
          *v25 = v26;
          *(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) = 0;
        }
        else if (v25[1])
        {
          v27 = 0;
          v28 = 32 * v26;
          while (32 * (*(_DWORD *)(a1 + 144) & ~(*(int *)(a1 + 144) >> 31)) != v27)
          {
            v29 = *(__n128 **)(a1 + 136);
            if (v29[v27 / 0x10].n128_u32[0] == 0x4000)
            {
              v30 = &v29[v27 / 0x10];
              v31 = *v30;
              result = v30[1];
              v32 = v29[1];
              *v30 = *v29;
              v30[1] = v32;
              v33 = *(__n128 **)(a1 + 136);
              *v33 = v31;
              v33[1] = result;
              ++**(_BYTE **)(a1 + 72);
              --*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1);
              return result;
            }
            v27 += 32;
            if (v28 == v27)
              return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t eta_Synth_UnlinkMsgLayers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a1)
    return 2164269062;
  v2 = a1[73];
  if (v2)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v2);
    a1[73] = 0;
  }
  v3 = a1[67];
  if (v3)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v3);
    a1[67] = 0;
  }
  v4 = a1[70];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v4);
    a1[70] = 0;
  }
  v5 = a1[75];
  if (!v5)
    return 0;
  heap_Free(*(_QWORD **)(a1[2] + 8), v5);
  result = 0;
  a1[75] = 0;
  return result;
}

BOOL eta_InOut__IsEndState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 2;
}

uint64_t eta_Synth_Reset(uint64_t a1)
{
  mu_Reset(a1 + 1936);
  *(_DWORD *)(a1 + 1688) = 0;
  return 0;
}

uint64_t smc1175mrf22spi_DecoderProcess_F1(uint64_t a1, int a2, unsigned __int8 *a3, _WORD *a4, _DWORD *a5, char *a6, _WORD *a7, _DWORD *a8, int a9, int a10)
{
  char *v14;
  uint64_t result;
  unsigned __int16 *v17;
  int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int16 *v24;
  _OWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  unsigned __int16 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  _WORD *v39;
  _WORD *v40;
  void *__src;
  unsigned __int16 *v42;
  int __dst[17];
  int v44[5];
  _QWORD v45[4];

  v45[2] = *MEMORY[0x1E0C80C00];
  if (a7 && a4 && a3 && a5 && (v14 = a6) != 0)
  {
    if (*a4)
    {
      v42 = 0;
      *a7 = 0;
      result = SecurelyRetrievePointer(a1, a2, (uint64_t *)&v42);
      if ((result & 0x80000000) == 0)
      {
        v17 = v42;
        v18 = (int *)(v42 + 4);
        v19 = *((_DWORD *)v42 + 2);
        if (v19 <= (unsigned __int16)*a4)
        {
          v39 = a5 + 96;
          v20 = a5 + 152;
          *((_DWORD *)v42 + 1) = 19;
          ReadStream_CheckWhatModeFirst((uint64_t)(v17 + 76), (int *)v17 + 65, (uint64_t)a3, *v17, (unsigned __int16)v19, (int *)v17 + 1, v45, (unint64_t)(v17 + 1070), (_DWORD *)v17 + 3, v18, (_DWORD *)v17 + 6, 1, *((_BYTE *)v17 + 2506), 4);
          smc1175mrf22_ReadStream(a3, v42[4], a5 + 152, v42[6], v42 + 1070);
          v21 = (uint64_t)v42;
          *a4 = *((_DWORD *)v42 + 2);
          fxd_MultiStageVectorDecodeLsp__32BIT(a8, *(_DWORD *)(v21 + 4 * a9 + 152), (_DWORD *)(v21 + 32 * a9 + 164), *(_QWORD *)(v21 + 8 * a9 + 360), 16, v21 + 40 * a9 + 32, a5 + 335);
          fxd_OrderCheckLsp__S32(a5 + 335, 16);
          __src = a5 + 335;
          LH_S32ToLH_S32(a5 + 335, v42 + 1036, 0x10u);
          v22 = 0;
          v23 = 0;
          v38 = a5 + 136;
          v40 = a7;
          do
          {
            v24 = v42;
            v42[995] = 0;
            v25 = (_OWORD *)(*((_QWORD *)v24 + 49) + 160 * v23);
            v25[8] = 0u;
            v25[9] = 0u;
            v25[6] = 0u;
            v25[7] = 0u;
            v25[4] = 0u;
            v25[5] = 0u;
            v25[2] = 0u;
            v25[3] = 0u;
            *v25 = 0u;
            v25[1] = 0u;
            if (*((_DWORD *)v24 + 1) == 19 && v23 < *v24)
            {
              LOBYTE(v26) = 0;
              v27 = 0;
            }
            else
            {
              v26 = *v20;
              v27 = v20[1];
              v20 += 2;
            }
            smc1175mrf22_fxd_DecodWFSet1_5p(a5, v44, 80, v26, v27);
            v28 = 0;
            v29 = v42;
            do
            {
              v30 = *(__int16 *)((char *)a5 + v28);
              v31 = 2 * v30 * (__int16)v29[996];
              v32 = (v31 + 0x4000) >> 15;
              if (v32 <= -32768)
                LOWORD(v32) = 0x8000;
              if (v31 <= 1073725439)
                v33 = v32;
              else
                v33 = 0x7FFF;
              *(_WORD *)((char *)a5 + v28) = v33 + v30;
              v28 += 2;
            }
            while (v28 != 160);
            if (*((_DWORD *)v29 + 1) == 19 && v23 < *v29)
            {
              v34 = 0;
            }
            else
            {
              v35 = *v20++;
              v34 = smc1175mrf22_fxd_DecodeCodeGain(v35, (__int16 *)a5, 0, (uint64_t)(v29 + 917), 80);
              v29 = v42;
            }
            v36 = 0;
            v29[982] = v34;
            v29[969] = v34;
            v37 = *((_QWORD *)v29 + 49);
            do
            {
              *(_WORD *)(v37 + v22 + v36) += (2 * *(__int16 *)((char *)a5 + v36) * (__int16)v29[969]
                                                          + 0x8000) >> 16;
              v36 += 2;
            }
            while (v36 != 160);
            v29[996] = v29[995];
            LH_S32ToLH_S32(__src, v29 + 1036, 0x10u);
            LH_S32ToLH_S32(__src, __dst, 0x10u);
            if (a10)
            {
              fxd_LspToCosLsp__32BITX(__dst, __dst, 16);
              fxd_HighPrecisionCosLspToAi__32BIT((unint64_t)__dst, v38, 16);
              FillZeroLH_S32(a5, 0x60u);
              LH_S32ToLH_S32(v42 + 1004, a5, 0x10u);
              fxd_HighPrecisionFastSynthesisFilter(v37 + 160 * v23, v39, 80, 0, v38, 0x10u, 28, (uint64_t)a5, 14);
              LH_S32ToLH_S32(a5 + 80, v42 + 1004, 0x10u);
            }
            LH_S16ToLH_S16(v39, v14, 0x50u);
            v14 += 160;
            *v40 += 160;
            ++v23;
            v22 += 160;
          }
          while (v23 != 4);
          LH_S32ToLH_S32(__src, v42 + 1036, 0x10u);
          LH_S16ToLH_S16(v42 + 520, v42 + 200, *((_DWORD *)v42 + 5));
          FillZeroLH_S16(&v42[*((int *)v42 + 5) + 200], 0x140u);
          result = 0;
          ++*((_DWORD *)v42 + 534);
        }
        else
        {
          *a4 = 0;
          *a7 = 0;
          return 2353012745;
        }
      }
      return result;
    }
  }
  else if (!a4)
  {
    goto LABEL_12;
  }
  *a4 = 0;
LABEL_12:
  result = 2353012742;
  if (a7)
    *a7 = 0;
  return result;
}

unsigned __int8 *smc1175mrf22_ReadStream(unsigned __int8 *result, unsigned int a2, _DWORD *a3, int a4, _WORD *a5)
{
  uint64_t v5;
  int8x8_t *v6;
  unsigned int v7;
  uint32x4_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[214];

  v14[213] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = a2;
    v6 = (int8x8_t *)v14;
    do
    {
      v7 = *result++;
      v8 = (uint32x4_t)vdupq_n_s32(v7);
      *v6++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_1DECCFFD0), (int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_1DECCFFC0))), (int8x8_t)0x101010101010101);
      --v5;
    }
    while (v5);
  }
  if (a4)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = (unsigned __int16)*a5;
      if (*a5)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v13 += *((unsigned __int8 *)v10 + v12) << v12;
          ++v12;
        }
        while ((_DWORD)v11 != (_DWORD)v12);
        v10 = (_QWORD *)((char *)v10 + v11);
      }
      else
      {
        v13 = 0;
      }
      *a3++ = v13;
      ++a5;
      ++v9;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t ReadStream_CheckWhatModeFirst(uint64_t result, int *a2, uint64_t a3, int a4, uint64_t a5, int *a6, _QWORD *a7, unint64_t a8, _DWORD *a9, int *a10, _DWORD *a11, int a12, char a13, int a14)
{
  uint64_t v14;
  uint32x4_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  __int16 *v31;
  __int16 v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int32x4_t v58;
  int32x4_t v59;
  _DWORD v60[4];
  _BYTE v61[20];
  int v62;
  _BYTE v63[1705];
  uint64_t v64;

  v14 = 0;
  v64 = *MEMORY[0x1E0C80C00];
  *a7 = -1;
  a7[1] = -1;
  do
  {
    v16 = (uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(a3 + v14));
    *(int8x8_t *)&v63[8 * v14++] = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v16, (uint32x4_t)xmmword_1DECCFFD0), (int16x8_t)vshlq_u32(v16, (uint32x4_t)xmmword_1DECCFFC0))), (int8x8_t)0x101010101010101);
  }
  while (v14 != 5);
  if (a13)
  {
    if (!a12)
    {
      switch(a13)
      {
        case 3:
          LODWORD(v17) = 0;
          *a6 = 22;
          *a10 = 49;
          *(_QWORD *)&v44 = 0x300000003;
          *((_QWORD *)&v44 + 1) = 0x300000003;
          *(_OWORD *)a7 = v44;
          *a11 = 3;
          *a9 = 44;
          *(_OWORD *)(a8 + 32) = xmmword_1DECD0D02;
          *(_OWORD *)(a8 + 48) = unk_1DECD0D12;
          *(_OWORD *)(a8 + 64) = xmmword_1DECD0D22;
          *(_OWORD *)a8 = au16BitAllocatiobMod22;
          *(_OWORD *)(a8 + 16) = unk_1DECD0CF2;
          *(_QWORD *)(a8 + 80) = 17;
          goto LABEL_11;
        case 2:
          LODWORD(v17) = 0;
          *a6 = 21;
          *a10 = 39;
          *(_QWORD *)&v45 = 0x200000002;
          *((_QWORD *)&v45 + 1) = 0x200000002;
          *(_OWORD *)a7 = v45;
          *a11 = 2;
          *a9 = 36;
          *(_OWORD *)a8 = *(_OWORD *)au16BitAllocatiobMod21;
          *(_OWORD *)(a8 + 16) = unk_1DECD0C74;
          *(_OWORD *)(a8 + 32) = xmmword_1DECD0C84;
          *(_OWORD *)(a8 + 48) = unk_1DECD0C94;
          *(_QWORD *)(a8 + 64) = 17;
          goto LABEL_11;
        case 1:
          LODWORD(v17) = 0;
          *a6 = 20;
          *a10 = 28;
          *(_QWORD *)&v18 = 0x100000001;
          *((_QWORD *)&v18 + 1) = 0x100000001;
          *(_OWORD *)a7 = v18;
          *a11 = 1;
          *a9 = 28;
          *(_OWORD *)a8 = au16BitAllocatiobMod20;
          *(_OWORD *)(a8 + 16) = unk_1DECD0C06;
          *(_OWORD *)(a8 + 32) = xmmword_1DECD0C16;
          *(_QWORD *)(a8 + 48) = 6;
          goto LABEL_11;
      }
      goto LABEL_62;
    }
LABEL_10:
    LODWORD(v17) = 0;
    *a6 = 19;
    *a10 = 16;
    *(_QWORD *)&v19 = 0x100000001;
    *((_QWORD *)&v19 + 1) = 0x100000001;
    *(_OWORD *)a7 = v19;
    *a11 = 1;
    *a9 = 15;
    *(_OWORD *)a8 = au16BitAllocatiobMod19;
    *(_OWORD *)(a8 + 14) = *(__int128 *)((char *)&au16BitAllocatiobMod19 + 14);
    a14 = 4 - a4;
    goto LABEL_11;
  }
  if (a12)
    goto LABEL_10;
  if (v63[0] != 1)
  {
    if (!v63[0])
    {
      *a6 = 15;
      *a10 = 28;
      *(_QWORD *)&v43 = 0x100000001;
      *((_QWORD *)&v43 + 1) = 0x100000001;
      *(_OWORD *)a7 = v43;
      LODWORD(v17) = 1;
      *a11 = 1;
      *a9 = 29;
      *(_OWORD *)a8 = au16BitAllocatiobMod15;
      *(_OWORD *)(a8 + 16) = unk_1DECD0AE0;
      *(_OWORD *)(a8 + 32) = xmmword_1DECD0AF0;
      *(_OWORD *)(a8 + 42) = *(__int128 *)((char *)&xmmword_1DECD0AF0 + 10);
      *(_WORD *)a8 = 1;
      goto LABEL_11;
    }
    goto LABEL_62;
  }
  if (!v63[1])
  {
    *a6 = 16;
    *a10 = 39;
    *(_QWORD *)&v46 = 0x200000002;
    *((_QWORD *)&v46 + 1) = 0x200000002;
    *(_OWORD *)a7 = v46;
    LODWORD(v17) = 2;
    *a11 = 2;
    *a9 = 37;
    *(_OWORD *)a8 = au16BitAllocatiobMod16;
    *(_OWORD *)(a8 + 16) = unk_1DECD0B20;
    *(_OWORD *)(a8 + 32) = xmmword_1DECD0B30;
    *(_OWORD *)(a8 + 48) = unk_1DECD0B40;
    *(_OWORD *)(a8 + 58) = unk_1DECD0B4A;
LABEL_65:
    *(_DWORD *)a8 = 65537;
    goto LABEL_11;
  }
  if (!v63[2])
  {
    *a6 = 17;
    *a10 = 50;
    *(_QWORD *)&v47 = 0x300000003;
    *((_QWORD *)&v47 + 1) = 0x300000003;
    *(_OWORD *)a7 = v47;
    LODWORD(v17) = 3;
    *a11 = 3;
    *a9 = 46;
    *(_OWORD *)(a8 + 32) = xmmword_1DECD0B82;
    *(_OWORD *)(a8 + 48) = unk_1DECD0B92;
    *(_OWORD *)(a8 + 64) = xmmword_1DECD0BA2;
    *(_OWORD *)(a8 + 76) = *(__int128 *)((char *)&xmmword_1DECD0BA2 + 12);
    *(_OWORD *)a8 = au16BitAllocatiobMod17;
    *(_OWORD *)(a8 + 16) = unk_1DECD0B72;
    *(_WORD *)(a8 + 4) = 1;
    goto LABEL_65;
  }
  if (v63[3])
  {
    if (v63[4])
    {
LABEL_62:
      LODWORD(v17) = 0;
      goto LABEL_11;
    }
    v53 = 0;
    v54 = v63;
    while (v53 != 9)
    {
      v55 = 0;
      v56 = 0;
      v57 = word_1DECD0D84[v53];
      do
      {
        v56 += v54[v55] << v55;
        ++v55;
      }
      while ((_DWORD)v57 != (_DWORD)v55);
      v54 += v57;
      v60[v53++] = v56;
      if (v53 == 10)
        goto LABEL_81;
    }
    v62 = 0;
LABEL_81:
    v59.i64[0] = 0x400000004;
    v59.i64[1] = 0x400000004;
    *(int32x4_t *)a7 = vaddq_s32(*(int32x4_t *)&v61[4], v59);
    *a6 = 23;
    *(_WORD *)(a8 + 16) = 3;
    *(_OWORD *)a8 = xmmword_1DECD0AB0;
    LODWORD(v17) = 9;
  }
  else
  {
    v48 = 0;
    v49 = v63;
    while (v48 != 8)
    {
      v50 = 0;
      v51 = 0;
      v52 = word_1DECD0D70[v48];
      do
      {
        v51 += v49[v50] << v50;
        ++v50;
      }
      while ((_DWORD)v52 != (_DWORD)v50);
      v49 += v52;
      v60[v48++] = v51;
      if (v48 == 9)
        goto LABEL_79;
    }
    *(_DWORD *)&v61[16] = 0;
LABEL_79:
    v58.i64[0] = 0x100000001;
    v58.i64[1] = 0x100000001;
    *(int32x4_t *)a7 = vaddq_s32(*(int32x4_t *)v61, v58);
    *a6 = 18;
    *(_OWORD *)a8 = xmmword_1DECD0AC0;
    LODWORD(v17) = 8;
  }
LABEL_11:
  v20 = *a6;
  if ((*a6 - 20) >= 3)
  {
    if (v20 != 19)
    {
      if (v20 == 15)
      {
        v23 = *(unsigned int *)(result + 4);
        if ((int)v23 >= 1)
        {
          v24 = v17;
          v25 = a2 + 8;
          do
          {
            v26 = *v25++;
            *(_WORD *)(a8 + 2 * v24++) = v26;
            --v23;
          }
          while (v23);
          LODWORD(v17) = v24;
        }
      }
      else
      {
        v27 = *(unsigned int *)result;
        if ((int)v27 >= 1)
        {
          v17 = v17;
          do
          {
            v28 = *a2++;
            *(_WORD *)(a8 + 2 * v17++) = v28;
            --v27;
          }
          while (v27);
        }
      }
    }
  }
  else
  {
    v21 = *(unsigned int *)result;
    if ((int)v21 >= 1)
    {
      v17 = v17;
      do
      {
        v22 = *a2++;
        *(_WORD *)(a8 + 2 * v17++) = v22;
        --v21;
      }
      while (v21);
    }
  }
  if (a14 >= 1)
  {
    v29 = 0;
    if (v20 == 23)
      v30 = 7;
    else
      v30 = 5;
    result = 4;
    while (1)
    {
      if (v20 != 19)
      {
        v31 = (__int16 *)(a8 + 2 * (int)v17);
        if ((v29 & 1) != 0)
          v32 = v30;
        else
          v32 = 9;
        *v31 = v32;
        LODWORD(v17) = v17 + 2;
        v31[1] = 8;
      }
      v33 = *((_DWORD *)a7 + v29);
      if (v33 >= 1)
        break;
LABEL_45:
      if (++v29 == a14)
        goto LABEL_46;
    }
    v34 = 0;
    while (1)
    {
      v35 = (int)v17;
      v17 = (int)v17 + 2;
      if (v34)
      {
        v36 = v35 + 1;
        if (v34 > 2)
        {
          *(_WORD *)(a8 + 2 * v35) = 5;
          *(_WORD *)(a8 + 2 * v36) = 20;
        }
        else
        {
          *(_WORD *)(a8 + 2 * v35) = 4;
          *(_WORD *)(a8 + 2 * v36) = 17;
        }
        if (v20 != 23)
          goto LABEL_44;
      }
      else
      {
        *(_DWORD *)(a8 + 2 * v35) = 1310725;
      }
      *(_WORD *)(a8 + 2 * v17) = 6;
      LODWORD(v17) = v35 + 3;
LABEL_44:
      if (v33 == ++v34)
        goto LABEL_45;
    }
  }
LABEL_46:
  v37 = 0;
  v38 = a8 + 2 * (int)v17;
  *(_QWORD *)v38 = 0;
  *(_WORD *)(v38 + 8) = 0;
  v39 = (unsigned __int16 *)(v38 + 8);
  if ((int)v17 >= -4)
  {
    v37 = 0;
    do
    {
      v40 = *v39--;
      v37 += v40;
    }
    while ((unint64_t)v39 >= a8);
  }
  v41 = v17 + 3;
  if ((v37 & 7) != 0)
    v42 = (v37 >> 3) + 1;
  else
    v42 = v37 >> 3;
  *a10 = v42;
  *a9 = v41;
  return result;
}

uint64_t smc1175mrf22spi_GetInfo(__int16 a1, char a2, int a3, uint64_t a4)
{
  uint64_t v4;

  if (!a4)
    return 2353012742;
  *(_DWORD *)(a4 + 8) = 40;
  *(int32x2_t *)a4 = vdup_n_s32(0x53FCu);
  *(_WORD *)(a4 + 28) = 1704;
  *(_WORD *)(a4 + 16) = 4007;
  *(_QWORD *)(a4 + 20) = 0x34000D500680280;
  v4 = 0;
  if (a3 == 1)
  {
    *(_DWORD *)(a4 + 30) = 0;
  }
  else
  {
    *(_DWORD *)(a4 + 30) = 92015056;
    *(_DWORD *)(a4 + 12) = 4;
    *(_WORD *)(a4 + 18) = a1;
    *(_BYTE *)(a4 + 34) = a2;
  }
  return v4;
}

uint64_t SecurelyRetrievePointer(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t result;

  *a3 = 0;
  result = safeh_HandleCheck(a1, a2, 65732, 2512);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
      *a3 = a1;
    else
      return 2353012744;
  }
  return result;
}

uint64_t smc1175mrf22spi_DecoderOpen(__int16 a1, char a2, unsigned __int8 *a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  int v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  _WORD *v24;
  uint64_t v25;
  _WORD *v26;
  unsigned int v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  _WORD *v38;
  unsigned int v39;
  int v40;
  unsigned __int16 *v41;
  int v42;
  int v43;
  unsigned __int16 v44;
  int v45;
  unsigned __int16 v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _WORD *v50;
  uint64_t v51;
  int v52;
  unsigned __int16 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int16 *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned __int16 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  __int16 v72;
  uint64_t *v73;
  char v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  char *v79;
  int v80;
  _DWORD __src[100];
  __int16 v82;
  _WORD v83[99];
  _DWORD v84[3];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v5 = 2353012742;
  if (a4)
  {
    v7 = a4;
    bzero(a4, 0x9D0uLL);
    if (a5)
    {
      *(_QWORD *)a5 = v7;
      *(_DWORD *)(a5 + 8) = 65732;
      if (a3)
      {
        v73 = (uint64_t *)a5;
        v82 = 32;
        smc1175mrf22_ReadStream(a3, 4u, __src, 1, &v82);
        v11 = __src[0];
        *((_WORD *)v7 + 192) = __src[0];
        v74 = a2;
        v72 = a1;
        if (v11 << 16 <= 0)
        {
          LODWORD(v12) = 0;
          v13 = 0;
          v14 = 1;
        }
        else
        {
          if ((unsigned __int16)v11 <= 1u)
            v12 = 1;
          else
            v12 = (unsigned __int16)v11;
          memset_pattern16(v83, asc_1DECD0DD0, (2 * v12));
          v13 = 0;
          v14 = v12 + 1;
          v15 = v83;
          v16 = v12;
          do
          {
            v17 = *v15++;
            v13 += v17;
            --v16;
          }
          while (v16);
        }
        if ((v13 & 7) != 0)
          v18 = (v13 >> 3) + 1;
        else
          v18 = v13 >> 3;
        v19 = v18;
        smc1175mrf22_ReadStream(a3 + 4, v18, v84, v12, v83);
        if (*((__int16 *)v7 + 192) >= 1)
        {
          v20 = 0;
          v21 = v19 + 4;
          v22 = (int *)(v7 + 164);
          v75 = v7;
          do
          {
            v23 = v14 + 1;
            v24 = &v83[v14 - 1];
            *v24 = 32;
            v79 = &v7[4 * v20 + 152];
            smc1175mrf22_ReadStream(&a3[v21], 4u, v79, 1, v24);
            v25 = *(unsigned int *)v79;
            if ((int)v25 <= 0)
            {
              v27 = 0;
              v26 = &v83[v23 - 1];
              v28 = v14 + 1;
            }
            else
            {
              v26 = &v83[v23 - 1];
              memset_pattern16(v26, asc_1DECD0DD0, 2 * v25);
              v27 = 0;
              v28 = v14 + v25 + 1;
              v29 = v26;
              do
              {
                v30 = *v29++;
                v27 += v30;
                --v25;
              }
              while (v25);
            }
            v78 = v21;
            v31 = v21 + 4;
            if ((v27 & 7) != 0)
              v32 = (v27 >> 3) + 1;
            else
              v32 = v27 >> 3;
            v77 = v32;
            smc1175mrf22_ReadStream(&a3[v31], v32, &v7[32 * v20 + 164], (unsigned __int16)(v28 - v23), v26);
            v33 = *(unsigned int *)v79;
            v34 = 12 * v33 + 24;
            if ((int)v33 < 1)
            {
              if (v34 != v84[v20])
                return 2353012745;
              v39 = 0;
              v38 = &v83[v28 - 1];
              v40 = v28;
            }
            else
            {
              v35 = *(unsigned int *)v79;
              v36 = v22;
              do
              {
                v37 = *v36++;
                v34 += 32 * v37;
                --v35;
              }
              while (v35);
              if (v34 != v84[v20])
                return 2353012745;
              v38 = &v83[v28 - 1];
              memset_pattern16(v38, asc_1DECD0DD0, 2 * v33);
              v39 = 0;
              v40 = v28 + v33;
              v41 = v38;
              do
              {
                v42 = *v41++;
                v39 += v42;
                --v33;
              }
              while (v33);
            }
            v43 = v31 + v32;
            if ((v39 & 7) != 0)
              v44 = (v39 >> 3) + 1;
            else
              v44 = v39 >> 3;
            v45 = v44;
            v46 = v40 - v28;
            v47 = (unsigned __int16)(v40 - v28);
            smc1175mrf22_ReadStream(&a3[v43], v44, __src, v47, v38);
            if (v47)
              memcpy(&v7[32 * v20 + 260], __src, 4 * v46);
            v48 = 0;
            v49 = 0;
            v50 = &v83[v40 - 1];
            *(_DWORD *)v50 = 2097184;
            v50[2] = 32;
            *(_DWORD *)(v50 + 3) = 2097184;
            do
              v49 += (unsigned __int16)v50[v48++];
            while (v48 != 5);
            v51 = (v43 + v45);
            v52 = v40 + 5;
            if ((v49 & 7) != 0)
              v53 = (v49 >> 3) + 1;
            else
              v53 = v49 >> 3;
            v76 = v45;
            smc1175mrf22_ReadStream(&a3[v51], v53, __src, 5, v50);
            *((_DWORD *)v7 + 7) = __src[1];
            v54 = *(unsigned int *)v79;
            if ((int)v54 < 1)
            {
              v14 = v40 + 5;
            }
            else
            {
              memset_pattern16(&v83[v52 - 1], asc_1DECD0DD0, 2 * v54);
              v14 = v40 + v54 + 5;
            }
            v7 = v75;
            v55 = 0;
            if (v14 - v52 < 1)
            {
              v58 = v78;
            }
            else
            {
              v56 = &v83[v52 - 1];
              v57 = (v14 - v52);
              v58 = v78;
              do
              {
                v59 = *v56++;
                v55 += v59;
                --v57;
              }
              while (v57);
            }
            v60 = v51 + v53;
            if ((v55 & 7) != 0)
              v61 = (v55 >> 3) + 1;
            else
              v61 = v55 >> 3;
            smc1175mrf22_ReadStream(&a3[v60], v61, &v75[40 * v20 + 32], (unsigned __int16)(v14 - v52), &v83[v52 - 1]);
            v62 = v60 + v61;
            v80 = 16;
            v63 = &v75[8 * v20];
            *((_QWORD *)v63 + 45) = &a3[v62];
            v64 = *(unsigned int *)v79;
            if ((int)v64 >= 1)
            {
              v65 = 0;
              v66 = 0;
              v67 = v63 + 360;
              do
                v66 += 32 * v22[v65++];
              while (v64 != v65);
              if (v66)
              {
                v68 = 0;
                v69 = v66 >> 1;
                if (v66 >> 1 <= 1)
                  v69 = 1;
                v70 = 2 * v69;
                do
                {
                  smc1175mrf22_ReadStream(&a3[v58 + 4 + v61 + v77 + v76 + v53 + v68], 2u, __src, 1, &v80);
                  *(_WORD *)(*v67 + v68) = __src[0];
                  v68 += 2;
                }
                while (v70 != v68);
                LODWORD(v62) = v58 + v61 + v77 + v76 + v53 + v68 + 4;
                v7 = v75;
              }
            }
            ++v20;
            v22 += 8;
            v21 = v62;
          }
          while (v20 < *((__int16 *)v7 + 192));
        }
        *(_WORD *)v7 = v72;
        *((_DWORD *)v7 + 6) = 1;
        *(_OWORD *)(v7 + 8) = xmmword_1DECD0DB0;
        *((_QWORD *)v7 + 49) = v7 + 1194;
        smc1175mrf22spi_DecoderResetMemory(*v73, v73[1]);
        v5 = 0;
        *((_DWORD *)v7 + 534) = 0;
        v7[2506] = v74;
      }
    }
    else
    {
      return 2353012744;
    }
  }
  return v5;
}

uint64_t smc1175mrf22spi_DecoderResetMemory(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  int32x4_t *v7;
  int16x8_t v8;
  _WORD v9[16];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = safeh_HandleCheck(a1, a2, 65732, 2512);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      bzero((void *)(a1 + 400), 0x59AuLL);
      *(_OWORD *)(a1 + 2040) = 0u;
      *(_OWORD *)(a1 + 2056) = 0u;
      *(_OWORD *)(a1 + 2008) = 0u;
      *(_OWORD *)(a1 + 2024) = 0u;
      *(_WORD *)(a1 + 1998) = 0;
      *(_DWORD *)(a1 + 2000) = 0;
      *(_WORD *)(a1 + 2004) = 0;
      *(_QWORD *)(a1 + 1990) = 214695936;
      memset_pattern16((void *)(a1 + 1834), &unk_1DECD0DC0, 0x68uLL);
      for (i = 0; i != 26; i += 2)
      {
        v5 = a1 + i;
        *(_WORD *)(v5 + 1938) = 0;
        *(_WORD *)(v5 + 1964) = 0;
      }
      fxd_LinSpace(v9, 0, 25736, 16);
      v6 = 0;
      v7 = (int32x4_t *)(a1 + 2072);
      do
      {
        v8 = *(int16x8_t *)&v9[v6];
        *v7 = vshll_n_s16(*(int16x4_t *)v8.i8, 0xAuLL);
        v7[1] = vshll_high_n_s16(v8, 0xAuLL);
        v7 += 2;
        v6 += 8;
      }
      while (v6 != 16);
      result = 0;
      *(_DWORD *)(a1 + 2136) = 0;
    }
    else
    {
      return 2353012744;
    }
  }
  return result;
}

uint64_t smc1175mrf22spi_getDecoderBufferSize(unsigned __int16 *a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, int a6, int *a7)
{
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v13 = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((v13 & 0x80000000) == 0)
  {
    if (a1)
    {
      v14 = *a5;
      if (*a5)
      {
        if (v14 < 0x280)
        {
          *a5 = v14 & 0xFFFFFFFE;
          if (v14 <= 0xA1)
            v16 = v14 > 1;
          else
            v16 = 2;
          if (v14 <= 0x141)
            v17 = v16;
          else
            v17 = 3;
          if (v14 <= 0x1E1)
            v15 = v17;
          else
            v15 = 4;
        }
        else
        {
          *a5 = 640;
          v15 = 4;
        }
        *a7 = v15;
        ReadStream_CheckWhatModeFirst((uint64_t)(a1 + 76), (int *)a1 + 65, a3, *a1, a1[4], (int *)a1 + 1, v19, (unint64_t)(a1 + 1070), (_DWORD *)a1 + 3, (int *)a1 + 2, (_DWORD *)a1 + 6, a6, *((_BYTE *)a1 + 2506), v15);
        v14 = *((_DWORD *)a1 + 2);
      }
      else
      {
        *((_QWORD *)a1 + 1) = 0;
        *((_DWORD *)a1 + 6) = 0;
        *a5 = 0;
      }
      *a4 = v14;
    }
    else
    {
      return 2353012744;
    }
  }
  return v13;
}

uint64_t smc1175mrf22spi_getSpectrum(unsigned __int16 *a1, int a2, unsigned __int8 *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD v18[183];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9 = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((v9 & 0x80000000) == 0)
  {
    if (a1)
    {
      v15 = 0;
      v16 = 0;
      ReadStream_CheckWhatModeFirst((uint64_t)(a1 + 76), (int *)a1 + 65, (uint64_t)a3, *a1, a1[4], (int *)&v15, &v17, (unint64_t)v18, &v16, (int *)&v16 + 1, (_DWORD *)&v15 + 1, 0, *((_BYTE *)a1 + 2506), 0);
      smc1175mrf22_ReadStream(a3, WORD2(v16), a4, (unsigned __int16)v16, v18);
      v10 = v15 - 15;
      *a5 = v15 == 15;
      v11 = 0;
      switch(v10)
      {
        case 0:
          v11 = 1;
          break;
        case 1:
          v11 = 2;
          break;
        case 2:
          v11 = 3;
          break;
        case 3:
          v11 = 8;
          break;
        case 4:
          break;
        case 5:
        case 6:
        case 7:
          v11 = 0;
          *a5 = 0;
          break;
        case 8:
          v11 = 9;
          break;
        default:
          v11 = 4;
          break;
      }
      v12 = 0;
      v13 = &a4[v11];
      do
      {
        a4[v12] = v13[v12];
        ++v12;
      }
      while (v12 != 5);
    }
    else
    {
      return 2353012744;
    }
  }
  return v9;
}

uint64_t smc1175mrf22spi_DecoderProcess(unsigned __int16 *a1, int a2, unsigned __int8 *a3, _WORD *a4, _DWORD *a5, char *a6, _WORD *a7, _DWORD *a8, int a9, int a10, int a11, int a12)
{
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int16 v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  unsigned __int16 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BOOL8 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int16 *v52;
  int v53;
  int v54;
  __int16 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unsigned __int16 *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  __int16 *v67;
  int v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned __int16 *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int16 *v81;
  int v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  unsigned __int16 *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  __int16 *v96;
  int v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  void *__src;
  int *v108;
  uint64_t v109;
  _WORD *v110;
  _WORD *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  char *__dst;
  int *v116;
  unsigned int *v117;
  int v118;
  int v119;
  _QWORD v120[2];
  int v121[17];
  _OWORD v122[4];
  _DWORD v123[5];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v119 = 0;
  if (!a7 || !a4 || !a3 || !a5 || !a6)
  {
    if (!a4)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!*a4)
  {
LABEL_12:
    *a4 = 0;
LABEL_13:
    result = 2353012742;
    if (a7)
      *a7 = 0;
    return result;
  }
  *a7 = 0;
  memset(v122, 0, sizeof(v122));
  result = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      if (*((_DWORD *)a1 + 2) > (int)(unsigned __int16)*a4)
      {
        *a4 = 0;
        *a7 = 0;
        return 2353012745;
      }
      v20 = a5 + 152;
      ReadStream_CheckWhatModeFirst((uint64_t)(a1 + 76), (int *)a1 + 65, (uint64_t)a3, *a1, (unsigned __int16)*((_DWORD *)a1 + 2), (int *)a1 + 1, v120, (unint64_t)(a1 + 1070), (_DWORD *)a1 + 3, (int *)a1 + 2, (_DWORD *)a1 + 6, 0, *((_BYTE *)a1 + 2506), a10);
      smc1175mrf22_ReadStream(a3, a1[4], a5 + 152, a1[6], a1 + 1070);
      v21 = 0;
      *a4 = *((_DWORD *)a1 + 2);
      v111 = a7;
      __dst = a6;
      switch(*((_DWORD *)a1 + 1))
      {
        case 0xF:
          v20 = a5 + 153;
          v21 = 1;
          break;
        case 0x10:
          v21 = 0;
          v20 = a5 + 154;
          break;
        case 0x11:
          v21 = 0;
          v20 = a5 + 155;
          break;
        case 0x12:
          v21 = 0;
          v20 = a5 + 160;
          break;
        case 0x17:
          v21 = 0;
          v20 = a5 + 161;
          break;
        default:
          break;
      }
      if (a11)
      {
        fxd_MultiStageVectorDecodeLsp__32BIT(a8, *(_DWORD *)&a1[2 * a9 + 76], &a1[16 * a9 + 82], *(_QWORD *)&a1[4 * a9 + 180], 16, (uint64_t)&a1[20 * a9 + 16], (int *)v122);
        fxd_OrderCheckLsp__S32((int *)v122, 16);
        fxd_MultiStageVectorDecodeLsp__32BIT(v20, *(_DWORD *)&a1[2 * v21 + 76], &a1[16 * v21 + 82], *(_QWORD *)&a1[4 * v21 + 180], 16, (uint64_t)&a1[20 * v21 + 16], a5 + 335);
        fxd_OrderCheckLsp__S32(a5 + 335, 16);
      }
      v22 = *(int *)&a1[2 * v21 + 76];
      v118 = 0;
      v23 = (int *)(a1 + 2);
      if (a10 >= 1)
      {
        v24 = 0;
        v25 = 0;
        v110 = a5 + 96;
        v26 = &v20[v22];
        v108 = a5 + 136;
        v109 = (uint64_t)(a1 + 917);
        __src = a1 + 1004;
        do
        {
          v27 = 80 * v25;
          v113 = v25;
          v114 = v24;
          if (a12)
          {
            v28 = v26;
            smc1175mrf22_DecodeLag_11_22(*v26, v25, *((_DWORD *)a1 + 1), &v119, &v118);
            smc1175mrf22_fxd_ExcitWFSet0_Decod_11_22((_WORD *)(*((_QWORD *)a1 + 49) + 2 * v27), (__int16)v119, 80);
            v29 = 0;
            a1[995] = smc1175mrf22_fxd_qgp[v28[1]];
            v112 = 2 * v24;
            v30 = *((_QWORD *)a1 + 49) + v112;
            do
            {
              v31 = 2 * *(__int16 *)(v30 + v29) * (__int16)a1[995];
              v32 = (v31 + 0x4000) >> 15;
              if (v32 <= -32768)
                LOWORD(v32) = 0x8000;
              if (v31 <= 1073725439)
                v33 = v32;
              else
                v33 = 0x7FFF;
              *(_WORD *)(v30 + v29) = v33;
              v29 += 2;
            }
            while (v29 != 160);
            smc1175mrf22_fxd_DecodWFSet1_5p(a5, v123, 80, v28[2], v28[3]);
            v34 = v119;
            if (v119 > 79)
            {
              v44 = smc1175mrf22_fxd_DecodeCodeGain(v28[4], (__int16 *)a5, 5, v109, 80);
              v45 = 0;
              a1[982] = v44;
              a1[969] = v44;
              v46 = *((_QWORD *)a1 + 49);
              v23 = (int *)(a1 + 2);
              do
              {
                *(_WORD *)(v46 + 2 * (int)(v123[v45] + v27)) += (2
                                                                               * *((__int16 *)a5 + (int)v123[v45])
                                                                               * (__int16)a1[969]
                                                                               + 0x8000) >> 16;
                ++v45;
              }
              while (v45 != 5);
            }
            else
            {
              v35 = 0;
              v23 = (int *)(a1 + 2);
              do
              {
                v36 = 2 * *(__int16 *)((char *)a5 + v35) * (__int16)a1[996];
                v37 = (v36 + 0x4000) >> 15;
                if (v37 <= -32768)
                  LOWORD(v37) = 0x8000;
                if (v36 <= 1073725439)
                  v38 = v37;
                else
                  v38 = 0x7FFF;
                *((_WORD *)a5 + v34++) += v38;
                v35 += 2;
              }
              while ((_DWORD)v34 != 80);
              v39 = smc1175mrf22_fxd_DecodeCodeGain(v28[4], (__int16 *)a5, 0, v109, 80);
              v40 = 0;
              a1[982] = v39;
              a1[969] = v39;
              v41 = *((_QWORD *)a1 + 49) + v112;
              do
              {
                *(_WORD *)(v41 + v40) += (2 * *(__int16 *)((char *)a5 + v40) * (__int16)a1[969] + 0x8000) >> 16;
                v40 += 2;
              }
              while (v40 != 160);
            }
            v116 = (int *)v120 + v25;
            if (*v116 > 1)
            {
              v47 = *v23;
              smc1175mrf22_fxd_DecodWFSet1_4p(a5, v123, 80, v28[5], v28[6]);
              if (*v23 < 23)
              {
                v43 = v28 + 7;
                v48 = v47 > 22;
                v49 = (43690 * (__int16)a1[v48 + 982] + 0x8000) >> 16;
              }
              else
              {
                v48 = v47 > 22;
                LOWORD(v49) = smc1175mrf22_fxd_DecodeCodeGain(v28[7], (__int16 *)a5, 4, (uint64_t)&a1[4 * v48 + 917], 80);
                a1[v48 + 982] = v49;
                v43 = v28 + 8;
              }
              a1[v48 + 969] = v49;
              v50 = v119;
              if (v119 > 79)
              {
                v59 = 0;
                v60 = *((_QWORD *)a1 + 49);
                do
                {
                  *(_WORD *)(v60 + 2 * (int)(v123[v59] + v27)) += (2
                                                                                 * *((__int16 *)a5 + (int)v123[v59])
                                                                                 * (__int16)a1[(v47 > 22) + 969]
                                                                                 + 0x8000) >> 16;
                  ++v59;
                }
                while (v59 != 4);
              }
              else
              {
                v51 = v119 + 1;
                v52 = (__int16 *)a5;
                do
                {
                  v53 = 2 * *v52 * (__int16)a1[996];
                  v54 = (v53 + 0x4000) >> 15;
                  if (v54 <= -32768)
                    LOWORD(v54) = 0x8000;
                  if (v53 <= 1073725439)
                    v55 = v54;
                  else
                    v55 = 0x7FFF;
                  v52[v50] += v55;
                  ++v52;
                  v56 = (_DWORD)v51++ == 80;
                }
                while (!v56);
                v57 = 0;
                v58 = *((_QWORD *)a1 + 49) + v112;
                do
                {
                  *(_WORD *)(v58 + v57) += (2
                                                        * *(__int16 *)((char *)a5 + v57)
                                                        * (__int16)a1[(v47 > 22) + 969]
                                                        + 0x8000) >> 16;
                  v57 += 2;
                }
                while (v57 != 160);
              }
              if (*v116 <= 2)
                goto LABEL_138;
              v61 = 2 * (*v23 > 22);
              v62 = v43;
              smc1175mrf22_fxd_DecodWFSet1_4p(a5, v123, 80, *v43, v43[1]);
              v63 = &a1[v61];
              if (*v23 < 23)
              {
                v43 = v62 + 2;
                v64 = (((__int16)v63[982] << 15) + 0x8000) >> 16;
              }
              else
              {
                LOWORD(v64) = smc1175mrf22_fxd_DecodeCodeGain(v62[2], (__int16 *)a5, 4, (uint64_t)&a1[4 * v61 + 917], 80);
                v63[982] = v64;
                v43 = v62 + 3;
              }
              a1[v61 + 969] = v64;
              v65 = v119;
              if (v119 > 79)
              {
                v73 = 0;
                v74 = *((_QWORD *)a1 + 49);
                do
                {
                  *(_WORD *)(v74 + 2 * (int)(v123[v73] + v27)) += (2
                                                                                 * *((__int16 *)a5 + (int)v123[v73])
                                                                                 * (__int16)v63[969]
                                                                                 + 0x8000) >> 16;
                  ++v73;
                }
                while (v73 != 4);
              }
              else
              {
                v66 = v119 + 1;
                v67 = (__int16 *)a5;
                do
                {
                  v68 = 2 * *v67 * (__int16)a1[996];
                  v69 = (v68 + 0x4000) >> 15;
                  if (v69 <= -32768)
                    LOWORD(v69) = 0x8000;
                  if (v68 <= 1073725439)
                    v70 = v69;
                  else
                    v70 = 0x7FFF;
                  v67[v65] += v70;
                  ++v67;
                  v56 = (_DWORD)v66++ == 80;
                }
                while (!v56);
                v71 = 0;
                v72 = *((_QWORD *)a1 + 49) + v112;
                do
                {
                  *(_WORD *)(v72 + v71) += (2 * *(__int16 *)((char *)a5 + v71) * (__int16)v63[969] + 0x8000) >> 16;
                  v71 += 2;
                }
                while (v71 != 160);
              }
              if (*v116 <= 3)
                goto LABEL_138;
              if (*v23 <= 22)
                v75 = 0;
              else
                v75 = 3;
              v76 = v43;
              smc1175mrf22_fxd_DecodWFSet1_5p(a5, v123, 80, *v43, v43[1]);
              v77 = &a1[v75];
              if (*v23 < 23)
              {
                v43 = v76 + 2;
                v78 = (26214 * (__int16)v77[982] + 0x8000) >> 16;
              }
              else
              {
                LOWORD(v78) = smc1175mrf22_fxd_DecodeCodeGain(v76[2], (__int16 *)a5, 5, (uint64_t)&a1[4 * v75 + 917], 80);
                v77[982] = v78;
                v43 = v76 + 3;
              }
              a1[v75 + 969] = v78;
              v79 = v119;
              if (v119 > 79)
              {
                v87 = 0;
                v88 = *((_QWORD *)a1 + 49);
                do
                {
                  *(_WORD *)(v88 + 2 * (int)(v123[v87] + v27)) += (2
                                                                                 * *((__int16 *)a5 + (int)v123[v87])
                                                                                 * (__int16)v77[969]
                                                                                 + 0x8000) >> 16;
                  ++v87;
                }
                while (v87 != 5);
              }
              else
              {
                v80 = v119 + 1;
                v81 = (__int16 *)a5;
                do
                {
                  v82 = 2 * *v81 * (__int16)a1[996];
                  v83 = (v82 + 0x4000) >> 15;
                  if (v83 <= -32768)
                    LOWORD(v83) = 0x8000;
                  if (v82 <= 1073725439)
                    v84 = v83;
                  else
                    v84 = 0x7FFF;
                  v81[v79] += v84;
                  ++v81;
                  v56 = (_DWORD)v80++ == 80;
                }
                while (!v56);
                v85 = 0;
                v86 = *((_QWORD *)a1 + 49) + v112;
                do
                {
                  *(_WORD *)(v86 + v85) += (2 * *(__int16 *)((char *)a5 + v85) * (__int16)v77[969] + 0x8000) >> 16;
                  v85 += 2;
                }
                while (v85 != 160);
              }
              goto LABEL_113;
            }
            v43 = v28 + 5;
          }
          else
          {
            v116 = (int *)v120 + v25;
            v42 = *v116;
            if (*v116 <= 1)
            {
              v43 = v26 + 5;
            }
            else if (v42 == 2)
            {
              v43 = v26 + 8;
            }
            else
            {
              if (v42 != 3)
              {
                v112 = 2 * v24;
                v43 = v26 + 14;
LABEL_113:
                if (*v116 >= 5)
                {
                  v89 = 4;
                  do
                  {
                    if (*v23 <= 22)
                      v90 = 0;
                    else
                      v90 = v89;
                    if (a12)
                    {
                      v91 = v43;
                      smc1175mrf22_fxd_DecodWFSet1_5p(a5, v123, 80, *v43, v43[1]);
                      v92 = &a1[v90];
                      if (*v23 < 23)
                      {
                        v43 = v91 + 2;
                        v93 = (21846 * (__int16)v92[982] + 0x8000) >> 16;
                      }
                      else
                      {
                        LOWORD(v93) = smc1175mrf22_fxd_DecodeCodeGain(v91[2], (__int16 *)a5, 5, (uint64_t)&a1[4 * v90 + 917], 80);
                        v92[982] = v93;
                        v43 = v91 + 3;
                        v23 = (int *)(a1 + 2);
                      }
                      a1[v90 + 969] = v93;
                      v94 = v119;
                      if (v119 > 79)
                      {
                        v102 = 0;
                        v103 = *((_QWORD *)a1 + 49);
                        do
                        {
                          *(_WORD *)(v103 + 2 * (int)(v123[v102] + v27)) += (2
                                                                                           * *((__int16 *)a5
                                                                                             + (int)v123[v102])
                                                                                           * (__int16)v92[969]
                                                                                           + 0x8000) >> 16;
                          ++v102;
                        }
                        while (v102 != 5);
                      }
                      else
                      {
                        v95 = v119 + 1;
                        v96 = (__int16 *)a5;
                        do
                        {
                          v97 = 2 * *v96 * (__int16)a1[996];
                          v98 = (v97 + 0x4000) >> 15;
                          if (v98 <= -32768)
                            LOWORD(v98) = 0x8000;
                          if (v97 <= 1073725439)
                            v99 = v98;
                          else
                            v99 = 0x7FFF;
                          v96[v94] += v99;
                          ++v96;
                          v56 = (_DWORD)v95++ == 80;
                        }
                        while (!v56);
                        v100 = 0;
                        v101 = *((_QWORD *)a1 + 49) + v112;
                        do
                        {
                          *(_WORD *)(v101 + v100) += (2
                                                                  * *(__int16 *)((char *)a5 + v100)
                                                                  * (__int16)v92[969]
                                                                  + 0x8000) >> 16;
                          v100 += 2;
                        }
                        while (v100 != 160);
                      }
                    }
                    else
                    {
                      v43 += 3;
                    }
                    ++v89;
                  }
                  while (v89 < *v116);
                }
                goto LABEL_138;
              }
              v43 = v26 + 11;
            }
          }
LABEL_138:
          v117 = v43;
          a1[996] = a1[995];
          v104 = *((_QWORD *)a1 + 49);
          if (v113 > 1)
          {
            v106 = (int *)v122;
            v105 = (uint64_t)(a5 + 335);
          }
          else
          {
            v105 = (uint64_t)(a1 + 1036);
            v106 = a5 + 335;
          }
          fxd_InterpolateVectors_32BIT(v105, v106, v121, s32prev[v113], 16);
          if (a11)
          {
            fxd_LspToCosLsp__32BITX(v121, v121, 16);
            fxd_HighPrecisionCosLspToAi__32BIT((unint64_t)v121, v108, 16);
            fxd_HighPrecisionExpandLpcBandwidth((uint64_t)v108, v108, 32505, 16, 0);
            FillZeroLH_S32(a5, 0x60u);
            LH_S32ToLH_S32(__src, a5, 0x10u);
            fxd_HighPrecisionFastSynthesisFilter(v104 + 2 * v27, v110, 80, 0, v108, 0x10u, 28, (uint64_t)a5, 14);
            LH_S32ToLH_S32(a5 + 80, __src, 0x10u);
          }
          LH_S16ToLH_S16(v110, __dst, 0x50u);
          __dst += 160;
          *v111 += 160;
          v25 = v113 + 1;
          v24 = v114 + 80;
          v23 = (int *)(a1 + 2);
          v26 = v117;
        }
        while (v113 + 1 != a10);
      }
      LH_S32ToLH_S32(a5 + 335, a1 + 1036, 0x10u);
      LH_S16ToLH_S16(a1 + 520, a1 + 200, *((_DWORD *)a1 + 5));
      FillZeroLH_S16(&a1[*((int *)a1 + 5) + 200], 0x140u);
      result = 0;
      ++*((_DWORD *)a1 + 534);
    }
    else
    {
      return 2353012744;
    }
  }
  return result;
}

uint64_t smc1175mrf22spi_DecoderClose(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v4;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 65732, 2512);
  if (a1)
    v4 = result;
  else
    v4 = -1941954552;
  if ((int)result >= 0)
    return v4;
  else
    return result;
}

void smc1175mrf22_fxd_DecodWFSet1_5p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;

  FillZeroLH_S16(a1, a3);
  v10 = dword_1DECD0E04[a5 & 0xF];
  if ((a4 & 1) != 0)
    v11 = 0x2000;
  else
    v11 = -8192;
  *((_WORD *)a1 + v10) = v11;
  *a2 = v10;
  v12 = (dword_1DECD0EC4[a5 >> 4] + (int)v10) % a3;
  if ((a4 & 2) != 0)
    v13 = 0x2000;
  else
    v13 = -8192;
  *((_WORD *)a1 + v12) = v13;
  a2[1] = v12;
  v14 = (dword_1DECD0EC4[(a5 >> 8) & 0xF] + v12) % a3;
  if ((a4 & 4) != 0)
    v15 = 0x2000;
  else
    v15 = -8192;
  *((_WORD *)a1 + v14) = v15;
  a2[2] = v14;
  v16 = (dword_1DECD0EC4[(unsigned __int16)a5 >> 12] + v14) % a3;
  if ((a4 & 8) != 0)
    v17 = 0x2000;
  else
    v17 = -8192;
  *((_WORD *)a1 + v16) = v17;
  a2[3] = v16;
  v18 = (dword_1DECD0EC4[HIWORD(a5) & 0xF] + v16) % a3;
  if ((a4 & 0x10) != 0)
    v19 = 0x2000;
  else
    v19 = -8192;
  *((_WORD *)a1 + v18) = v19;
  a2[4] = v18;
}

void smc1175mrf22_fxd_DecodWFSet1_4p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;

  FillZeroLH_S16(a1, a3);
  v10 = dword_1DECD0E44[a5 & 0x1F];
  if ((a4 & 1) != 0)
    v11 = 0x2000;
  else
    v11 = -8192;
  *((_WORD *)a1 + v10) = v11;
  *a2 = v10;
  v12 = (dword_1DECD0EC4[(a5 >> 5) & 0xF] + (int)v10) % a3;
  if ((a4 & 2) != 0)
    v13 = 0x2000;
  else
    v13 = -8192;
  *((_WORD *)a1 + v12) = v13;
  a2[1] = v12;
  v14 = (dword_1DECD0EC4[(a5 >> 9) & 0xF] + v12) % a3;
  if ((a4 & 4) != 0)
    v15 = 0x2000;
  else
    v15 = -8192;
  *((_WORD *)a1 + v14) = v15;
  a2[2] = v14;
  v16 = (dword_1DECD0EC4[(a5 >> 13) & 0xF] + v14) % a3;
  if ((a4 & 8) != 0)
    v17 = 0x2000;
  else
    v17 = -8192;
  *((_WORD *)a1 + v16) = v17;
  a2[3] = v16;
}

uint64_t smc1175mrf22_fxd_gain_predict(int16x4_t *a1, __int16 *a2, int a3, _WORD *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t result;

  if (a3 < 1)
  {
    v6 = 20971;
  }
  else
  {
    v5 = a3;
    v6 = 20971;
    do
    {
      v7 = *a2++;
      v6 += (v7 * v7) >> 5;
      --v5;
    }
    while (v5);
  }
  v8 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_1DECD0F10), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)((v6 / (__int16)((_WORD)a3 << 8)) >> 1), (uint64_t)&s16LogTable)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v8 >> 36) + (v8 >> 63)) >> 1), (uint64_t)&u16PowTable);
  *a4 = 2 * result;
  return result;
}

uint64_t smc1175mrf22_fxd_gain_predict_pulses(int16x4_t *a1, int a2, __int16 a3, _WORD *a4)
{
  unint64_t v5;
  uint64_t result;

  v5 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_1DECD0F10), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)(((((a2 << 11) | 0x14) << 16 >> 6) / (__int16)(a3 << 8)) >> 1), (uint64_t)&s16LogTable)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v5 >> 36) + (v5 >> 63)) >> 1), (uint64_t)&u16PowTable);
  *a4 = 2 * result;
  return result;
}

uint64_t smc1175mrf22_fxd_DecodeCodeGain(unsigned int a1, __int16 *a2, int a3, uint64_t a4, __int16 a5)
{
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 v14;

  v14 = 0;
  if (a3)
    smc1175mrf22_fxd_gain_predict_pulses((int16x4_t *)a4, a3, a5, &v14);
  else
    smc1175mrf22_fxd_gain_predict((int16x4_t *)a4, a2, a5, &v14);
  if ((int)a1 > 58)
  {
    if (a1 > 0x3C)
    {
      v9 = 2 * v14 * smc1175mrf22_fxd_qgc[a1];
      v10 = (v9 + 512) >> 10;
      v11 = (v9 + 2048) >> 12;
      if (a1 <= 0x3E)
        LOWORD(v8) = v11;
      else
        LOWORD(v8) = v10;
      if (a1 <= 0x3E)
        v7 = 1541;
      else
        v7 = 3082;
    }
    else
    {
      v8 = (2 * v14 * smc1175mrf22_fxd_qgc[a1] + 4096) >> 13;
      v7 = 770;
    }
  }
  else
  {
    v7 = 0;
    v8 = (2 * v14 * smc1175mrf22_fxd_qgc[a1] + 0x2000) >> 14;
  }
  v12 = (__int16)smc1175mrf22_fxd_qgc[a1];
  *(_WORD *)(a4 + 6) = *(_WORD *)(a4 + 4);
  *(_DWORD *)(a4 + 2) = *(_DWORD *)a4;
  *(_WORD *)a4 = 4 * (fxd_S16Lookup10Log10S16S16(v12, (uint64_t)&s16LogTable) + v7);
  return (unsigned __int16)v8;
}

_WORD *smc1175mrf22_fxd_ExcitWFSet0_Decod_11_22(_WORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  int64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    v5 = 0xFFFFFFFF00000000 * a2;
    do
    {
      *v4++ = *(_WORD *)((char *)result + (v5 >> 31));
      v5 += 0x100000000;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t smc1175mrf22_DecodeLag_11_22(uint64_t result, char a2, unsigned int a3, int *a4, _DWORD *a5)
{
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  if ((a2 & 1) != 0)
  {
    if (a3 >= 0x17)
      v6 = 6;
    else
      v6 = 4;
    if (a3 <= 0x1D)
      v7 = v6;
    else
      v7 = 4;
    if (a3 >= 0xF)
      v8 = v7;
    else
      v8 = 2;
    if (a3 >= 0xC)
      v9 = v8;
    else
      v9 = 4;
    if ((int)a3 >= 9)
      v10 = v9;
    else
      v10 = 3;
    v5 = result + (-1 << v10) + *a5 + 1;
  }
  else if ((int)a3 > 5)
  {
    if (a3 > 0xB)
    {
      if (a3 >= 0x1E)
      {
        v5 = *a4;
        goto LABEL_21;
      }
      v5 = result + 54;
    }
    else
    {
      v5 = result + 40;
    }
  }
  else
  {
    v5 = result + 30;
  }
  *a4 = v5;
LABEL_21:
  *a5 = v5;
  return result;
}

uint64_t SearchNextMarkerOfRTCSubType(uint64_t result, unsigned int a2, int *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, _DWORD *a7)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v18;
  int v19;

  v7 = *a5;
  v8 = *a6;
  if (*a5 >= a2)
  {
    v16 = 0;
  }
  else
  {
    do
    {
      v9 = v7;
      if (a4)
      {
        v10 = *(_DWORD *)(result + 32 * v7);
        v11 = a3;
        v12 = a4;
        while (1)
        {
          v13 = *v11++;
          if (v13 == v10)
            break;
          if (!--v12)
            goto LABEL_6;
        }
        v15 = *(_DWORD *)(result + 32 * v9 + 12);
        if (v8 == -1)
          v14 = v15 != 0;
        else
          v14 = v15 > *(_DWORD *)(result + 32 * v8 + 12);
        if (!v14)
          v8 = v9;
      }
      else
      {
LABEL_6:
        v14 = 0;
      }
      v7 = v9 + !v14;
      v16 = v7 < a2;
    }
    while (v7 < a2 && !v14);
  }
  *a7 = 0;
  if (v8 < a2 && a4)
  {
    v18 = a4;
    while (1)
    {
      v19 = *a3++;
      if (v19 == *(_DWORD *)(result + 32 * v8))
        break;
      if (!--v18)
        goto LABEL_25;
    }
    *a7 = 1;
  }
LABEL_25:
  *a5 = v7;
  if (v16 && *a7 == 0)
    v8 = v7;
  *a6 = v8;
  return result;
}

uint64_t SearchNextMarker(uint64_t a1, unsigned int a2, int *a3, unsigned int a4, _DWORD *a5, _DWORD *a6, int *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;

  v7 = 0;
  if (a2 && a4)
  {
    v8 = *a5;
    LODWORD(v9) = *a6;
    if (v8 >= a2)
    {
      v10 = 1;
    }
    else
    {
      v10 = 0;
      v11 = *a6;
      while (2)
      {
        v9 = v11;
        v12 = *(_DWORD *)(a1 + 32 * v8);
        v13 = a3;
        v14 = a4;
        while (1)
        {
          v15 = *v13++;
          if (v15 == v12)
            break;
          if (!--v14)
          {
            v11 = v9;
            goto LABEL_15;
          }
        }
        v16 = *(_DWORD *)(a1 + 32 * v8 + 12);
        if ((_DWORD)v9 == -1)
        {
          if (v16)
          {
            v19 = 0;
            LODWORD(v9) = -1;
            goto LABEL_24;
          }
          v11 = v8;
        }
        else
        {
          if (v16 >= *(_DWORD *)(a1 + 32 * v9 + 12))
            goto LABEL_18;
          v11 = v8;
          if (v12 != *(_DWORD *)(a1 + 32 * v9))
            goto LABEL_18;
        }
LABEL_15:
        v10 = ++v8 >= (unint64_t)a2;
        if (v8 != a2)
          continue;
        break;
      }
      LODWORD(v8) = a2;
      LODWORD(v9) = v11;
    }
LABEL_18:
    *a7 = 0;
    if (v9 < a2)
    {
      v17 = a4;
      while (1)
      {
        v18 = *a3++;
        if (v18 == *(_DWORD *)(a1 + 32 * v9))
          break;
        if (!--v17)
          goto LABEL_25;
      }
      v19 = 1;
LABEL_24:
      *a7 = v19;
    }
LABEL_25:
    *a5 = v8;
    if (v10 || *a7 != 0)
      LODWORD(v8) = v9;
    *a6 = v8;
    v7 = *a7;
    if ((_DWORD)v7)
      return *(unsigned int *)(a1 + 32 * v9);
  }
  return v7;
}

uint64_t Lookup_CheckForDataFile(_WORD *a1, uint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t inited;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *a4 = 0;
  inited = InitRsrcFunction(a1, a2, &v22);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = ssftriff_reader_ObjOpen(a1, a2, 2, a3, "VFNT", 1031, (uint64_t *)&v21);
  if ((v9 & 0x1FFF) > 0x14 || ((1 << v9) & 0x102010) == 0)
    v18 = v9;
  else
    v18 = 0;
  v19 = v21;
  if ((v18 & 0x80000000) == 0 && v21)
  {
    *a4 = 1;
LABEL_13:
    ssftriff_reader_ObjClose(v19, v10, v11, v12, v13, v14, v15, v16);
    return v18;
  }
  if (v21)
    goto LABEL_13;
  return v18;
}

uint64_t Lookup_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AddRefCountedObject;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  inited = InitRsrcFunction(a1, a2, &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  v11 = 2164269066;
  *a5 = 0;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 128);
  if (v12)
  {
    v13 = v12;
    v14 = v21;
    *v12 = v21;
    v12[1] = a3;
    if (!a3 || (v15 = *(_QWORD *)(a3 + 48)) == 0)
      v15 = *(_QWORD *)(v14 + 48);
    AddRefCountedObject = objc_GetAddRefCountedObject(v15, a4, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))Lookup_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))Lookup_ObjcVoiceClose, v14, &v20);
    if ((AddRefCountedObject & 0x80000000) != 0
      || (v13[2] = *(_QWORD *)(v20 + 32),
          AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)),
          (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_InterfaceQuery(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0))
    {
      v11 = AddRefCountedObject;
    }
    else
    {
      v17 = (*(uint64_t (**)(_WORD *, uint64_t, _QWORD, _QWORD, _QWORD *))(v13[5] + 32))(a1, a2, *(_QWORD *)(v13[2] + 336), *(unsigned int *)(v13[2] + 344), v13 + 3);
      v18 = heap_Alloc(*(_QWORD *)(*v13 + 8), 44100);
      v13[9] = v18;
      if (v18)
      {
        v13[10] = 22050;
        *((_DWORD *)v13 + 22) = 0;
        v11 = v17;
        if ((v17 & 0x80000000) == 0)
        {
          v11 = v17;
LABEL_18:
          *a5 = (uint64_t)v13;
          return v11;
        }
      }
    }
    *a5 = (uint64_t)v13;
    Lookup_ObjClose(a5);
    v13 = 0;
    goto LABEL_18;
  }
  return v11;
}

uint64_t Lookup_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ChunkData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v25;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  unsigned int __n[3];
  int v38;
  unsigned __int8 v39;
  int v40[2];
  uint64_t v41;
  char __src[256];
  unint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v40 = 0;
  v41 = 0;
  v39 = 0;
  v38 = 0;
  memset(__n, 0, sizeof(__n));
  inited = InitRsrcFunction(a1, a2, &v41);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = 2164269066;
  v10 = heap_Calloc(*(_QWORD **)(v41 + 8), 1, 592);
  if (v10)
  {
    v11 = v10;
    __strcpy_chk();
    *(_QWORD *)(v11 + 352) = 0;
    *(_BYTE *)(v11 + 528) = 0;
    *(_QWORD *)(v11 + 440) = 0x2800000014;
    *(_DWORD *)(v11 + 448) = 40;
    ChunkData = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "VFNT", 1031, (uint64_t *)v40);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_81;
    for (i = ssftriff_reader_OpenChunk(*(uint64_t *)v40, &v38, __n, 0, v16, v17, v18, v19);
          (i & 0x80000000) == 0;
          i = ssftriff_reader_OpenChunk(*(uint64_t *)v40, &v38, __n, 0, v16, v17, v18, v19))
    {
      if (v38 ^ 0x464E4956 | v39)
      {
        if (v38 ^ 0x50464656 | v39)
        {
          if (!(v38 ^ 0x52444F43 | v39))
          {
            ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v40, __n[0], &__n[1], v15, v16, v17, v18, v19);
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_81;
            v28 = (void *)heap_Alloc(*(_QWORD *)(v41 + 8), __n[0]);
            *(_QWORD *)(v11 + 336) = v28;
            if (!v28)
              goto LABEL_82;
            memcpy(v28, *(const void **)&__n[1], __n[0]);
            *(_DWORD *)(v11 + 344) = __n[0];
            goto LABEL_74;
          }
          if (v38 ^ 0x4E555443 | v39)
          {
            if (!(v38 ^ 0x54494E55 | v39))
            {
              v29 = *(_QWORD *)v40;
              v31 = (_QWORD *)(v11 + 368);
              v30 = (uint64_t *)(v11 + 360);
              goto LABEL_59;
            }
            if (v38 ^ 0x31504F55 | v39)
            {
              if (!(v38 ^ 0x32504F55 | v39))
              {
                v43 = 0;
                ChunkData = ssftriff_reader_DetachChunkData(*(uint64_t *)v40, (uint64_t *)(v11 + 392), &v43, v15, v16, v17, v18, v19);
                if ((ChunkData & 0x80000000) != 0)
                  goto LABEL_81;
                v32 = v43;
                *(_DWORD *)(v11 + 400) = *(_DWORD *)v43;
                v33 = *(unsigned int *)(v32 + 4);
                *(_DWORD *)(v11 + 404) = v33;
                v32 += 8;
                *(_QWORD *)(v11 + 408) = v32;
                *(_QWORD *)(v11 + 416) = v32 + 4 * v33;
                goto LABEL_74;
              }
              if (v38 ^ 0x33504F55 | v39)
              {
                if (!(v38 ^ 0x52415057 | v39))
                {
                  ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v40, __n[0], &__n[1], v15, v16, v17, v18, v19);
                  if ((ChunkData & 0x80000000) != 0)
                    goto LABEL_81;
                  *(_DWORD *)(v11 + 440) = **(_DWORD **)&__n[1];
                  goto LABEL_74;
                }
                if (!(v38 ^ 0x52415050 | v39))
                {
                  ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v40, __n[0], &__n[1], v15, v16, v17, v18, v19);
                  if ((ChunkData & 0x80000000) != 0)
                    goto LABEL_81;
                  v34 = *(_QWORD *)&__n[1];
                  *(_DWORD *)(v11 + 444) = **(_DWORD **)&__n[1];
                  *(_DWORD *)(v11 + 448) = *(_DWORD *)(v34 + 4);
                  goto LABEL_74;
                }
                if (!(v38 ^ 0x50504D50 | v39))
                {
                  v29 = *(_QWORD *)v40;
                  v31 = (_QWORD *)(v11 + 464);
                  v30 = (uint64_t *)(v11 + 456);
                  goto LABEL_59;
                }
                if (!(v38 ^ 0x4F424D50 | v39))
                {
                  v29 = *(_QWORD *)v40;
                  v31 = (_QWORD *)(v11 + 480);
                  v30 = (uint64_t *)(v11 + 472);
LABEL_59:
                  ChunkData = ssftriff_reader_DetachChunkData(v29, v30, v31, v15, v16, v17, v18, v19);
                  if ((ChunkData & 0x80000000) != 0)
                    goto LABEL_81;
                  goto LABEL_74;
                }
                if (v38 ^ 0x4F554D50 | v39)
                {
                  if (v38 ^ 0x44554D50 | v39)
                  {
                    if (v38 ^ 0x48435053 | v39)
                    {
                      log_OutText(*(_QWORD *)(v41 + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"Unknown data: %s for %s", v17, v18, v19, (uint64_t)&v38);
                    }
                    else
                    {
                      *(_DWORD *)(v11 + 520) = ssftriff_reader_GetPosition(*(uint64_t *)v40);
                      *(_DWORD *)(v11 + 524) = __n[0];
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v11 + 516) = ssftriff_reader_GetPosition(*(uint64_t *)v40);
                  }
                }
                else
                {
                  *(_DWORD *)(v11 + 512) = ssftriff_reader_GetPosition(*(uint64_t *)v40);
                }
              }
              else
              {
                *(_DWORD *)(v11 + 508) = ssftriff_reader_GetPosition(*(uint64_t *)v40);
                *(_QWORD *)(v11 + 432) = 1;
              }
            }
            else
            {
              *(_DWORD *)(v11 + 504) = ssftriff_reader_GetPosition(*(uint64_t *)v40);
              *(_QWORD *)(v11 + 384) = 1;
            }
          }
          else
          {
            ssftriff_reader_GetChunkData(*(uint64_t *)v40, __n[0], &__n[1], v15, v16, v17, v18, v19);
            *(_DWORD *)(v11 + 328) = **(_DWORD **)&__n[1];
          }
        }
        else
        {
          ssftriff_reader_GetChunkData(*(uint64_t *)v40, __n[0], &__n[1], v15, v16, v17, v18, v19);
          v27 = (_BYTE *)heap_Alloc(*(_QWORD *)(v41 + 8), __n[0]);
          *(_QWORD *)(v11 + 352) = v27;
          if (!v27)
            goto LABEL_82;
          ssftriff_reader_ReadStringZ(*(uint64_t *)v40, *(uint64_t *)&__n[1], __n[0], 0, v27, __n);
        }
      }
      else
      {
        v36 = 0;
        ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v40, __n[0], &__n[1], v15, v16, v17, v18, v19);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_81;
        v21 = __n[0];
        if (__n[0])
        {
          v22 = 0;
          while (1)
          {
            __src[0] = 0;
            LOBYTE(v43) = 0;
            v36 = 256;
            ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v40, *(uint64_t *)&__n[1], v21, v22, &v43, &v36);
            if ((ChunkData & 0x80000000) == 0)
            {
              v14 = __n[0];
              if (v22 < __n[0])
              {
                v22 += v36;
                v36 = 256;
                ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v40, *(uint64_t *)&__n[1], __n[0], v22, __src, &v36);
              }
            }
            if ((ChunkData & 0x80000000) != 0)
              break;
            v23 = v36;
            if (v43 ^ 0x71657246 | BYTE4(v43))
            {
              if (v43 ^ 0x6465657053677641 | v44)
              {
                if (v43 == 0x42657A6953727544 && v44 == 7566441)
                {
                  *(_WORD *)(v11 + 324) = (unsigned __int16)LH_atou(__src);
                }
                else if (!(v43 ^ 0x44495547 | BYTE4(v43))
                       || (v43 == 0x6E656E6F706D6F43 ? (v25 = v44 == 4475252) : (v25 = 0), v25))
                {
                  strcpy((char *)(v11 + 528), __src);
                }
                else if ((_DWORD)v43 == 1701080899 && WORD2(v43) == 114)
                {
                  if (!__src[0])
                  {
                    log_OutText(*(_QWORD *)(v41 + 32), (uint64_t)"LOOKUP", 1, 0, (uint64_t)"undefined coder for (Genius) synth data %s: %s", v17, v18, v19, (uint64_t)a3);
                    ChunkData = 2164269081;
                    break;
                  }
                  strcpy((char *)(v11 + 256), "decoder/");
                  __strcat_chk();
                }
              }
              else
              {
                *(_WORD *)(v11 + 322) = (unsigned __int16)LH_atou(__src);
              }
            }
            else
            {
              *(_WORD *)(v11 + 320) = (unsigned __int16)LH_atou(__src);
            }
            v22 += v23;
            log_OutText(*(_QWORD *)(v41 + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"VF attribute %s=%s", v17, v18, v19, (uint64_t)&v43);
            v21 = __n[0];
            if (v22 >= __n[0])
              goto LABEL_74;
          }
LABEL_81:
          v9 = ChunkData;
LABEL_82:
          if (*(_QWORD *)v40)
            ssftriff_reader_ObjClose(*(_QWORD **)v40, v13, v14, v15, v16, v17, v18, v19);
          goto LABEL_84;
        }
      }
LABEL_74:
      ChunkData = ssftriff_reader_CloseChunk(*(uint64_t *)v40);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_81;
    }
    v9 = i;
    if ((i & 0x1FFF) != 0x14)
      goto LABEL_82;
    v9 = ssftriff_reader_ObjClose(*(_QWORD **)v40, v13, v14, v15, v16, v17, v18, v19);
    *(_QWORD *)v40 = 0;
    if ((v9 & 0x80000000) != 0)
    {
LABEL_84:
      *(_QWORD *)(a4 + 32) = v11;
      Lookup_ObjcVoiceClose(a1, a2, a4);
      *(_QWORD *)(a4 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v11;
    }
  }
  return v9;
}

uint64_t Lookup_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;

  v3 = *(_QWORD **)(a3 + 32);
  v22 = 0;
  inited = InitRsrcFunction(a1, a2, &v22);
  if ((inited & 0x80000000) == 0)
  {
    v11 = v3[42];
    if (v11)
    {
      heap_Free(*(_QWORD **)(v22 + 8), v11);
      v3[42] = 0;
    }
    v12 = v3[44];
    if (v12)
    {
      heap_Free(*(_QWORD **)(v22 + 8), v12);
      v3[44] = 0;
    }
    v13 = (_QWORD *)v3[45];
    if (v13)
      inited = ssftriff_reader_ReleaseChunkData(v13, v12, v4, v5, v6, v7, v8, v9);
    v14 = (_QWORD *)v3[47];
    if (v14)
      inited = ssftriff_reader_ReleaseChunkData(v14, v12, v4, v5, v6, v7, v8, v9);
    v15 = (_QWORD *)v3[49];
    if (v15)
      inited = ssftriff_reader_ReleaseChunkData(v15, v12, v4, v5, v6, v7, v8, v9);
    v16 = (_QWORD *)v3[53];
    if (v16)
      inited = ssftriff_reader_ReleaseChunkData(v16, v12, v4, v5, v6, v7, v8, v9);
    v17 = (_QWORD *)v3[57];
    if (v17)
      inited = ssftriff_reader_ReleaseChunkData(v17, v12, v4, v5, v6, v7, v8, v9);
    v18 = (_QWORD *)v3[59];
    if (v18)
      inited = ssftriff_reader_ReleaseChunkData(v18, v12, v4, v5, v6, v7, v8, v9);
    v19 = (_QWORD *)v3[61];
    if (v19)
      inited = ssftriff_reader_ReleaseChunkData(v19, v12, v4, v5, v6, v7, v8, v9);
    v20 = (_QWORD *)v3[62];
    if (v20)
      inited = ssftriff_reader_ReleaseChunkData(v20, v12, v4, v5, v6, v7, v8, v9);
    heap_Free(*(_QWORD **)(v22 + 8), (uint64_t)v3);
  }
  return inited;
}

uint64_t Lookup_ObjClose(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if (v3)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)v2 + 8), v3);
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
  }
  v4 = *(_QWORD *)(v2 + 40);
  if (v4 && (v5 = *(_QWORD *)(v2 + 24)) != 0)
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 40))(v5, *(_QWORD *)(v2 + 32));
    if ((v6 & 0x80000000) != 0)
      return v6;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v2 + 8);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 48)) == 0)
      v9 = *(_QWORD *)(*(_QWORD *)v2 + 48);
    objc_ReleaseObject(v9, v7);
  }
  v10 = *(_QWORD *)(v2 + 48);
  if (!v10 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v10), (v6 & 0x80000000) == 0))
  {
    v11 = *(_QWORD *)(v2 + 96);
    if (!v11 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v11), (v6 & 0x80000000) == 0))
    {
      v12 = *(_QWORD *)(v2 + 104);
      if (!v12 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v12), (v6 & 0x80000000) == 0))
      {
        v13 = *(_QWORD *)(v2 + 112);
        if (!v13 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v13), (v6 & 0x80000000) == 0))
        {
          v14 = *(_QWORD *)(v2 + 120);
          if (!v14 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v14), (v6 & 0x80000000) == 0))
          {
            v15 = *(_QWORD *)(v2 + 40);
            if (!v15 || (v6 = brk_InterfaceRelease(*(_QWORD *)(*(_QWORD *)v2 + 24), v15), (v6 & 0x80000000) == 0))
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)v2 + 8), v2);
              *a1 = 0;
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t Lookup_Init(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  v9 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, int *, int *, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 40)
                                                                                              + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v11, &v10, 0, (char *)&v9 + 4, &v9);
  if ((result & 0x80000000) == 0)
  {
    v5 = v9;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_DWORD *)(v6 + 524);
    if ((int)v9 + HIDWORD(v9) > v7)
    {
      v5 = v7 - HIDWORD(v9);
      LODWORD(v9) = v7 - HIDWORD(v9);
    }
    result = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 48), (*(_DWORD *)(v6 + 520) + HIDWORD(v9)), v5, a1 + 56);
    if ((result & 0x80000000) == 0)
    {
      v8 = v9;
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 68) = v8;
    }
  }
  return result;
}

uint64_t Lookup_Init_II(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 40)
                                                                                                  + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a2, a3, 0, (char *)&v6 + 4, &v6);
  if ((result & 0x80000000) == 0)
  {
    if ((_DWORD)v6)
    {
      result = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 48), (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 520) + HIDWORD(v6)), v6, a1 + 56);
      if ((result & 0x80000000) != 0)
        return result;
      v5 = v6;
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 68) = v5;
  }
  return result;
}

uint64_t Lookup_DeInit(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1[7];
  if (!v1)
    return 0;
  result = brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[6], v1);
  a1[7] = 0;
  return result;
}

uint64_t Lookup_Decode(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  if (!*a2)
    return 0;
  result = 2164269063;
  v5 = *(_QWORD *)(a1 + 56);
  if (!v5)
    return 2164269073;
  if (!(*a2 >> 30))
  {
    v8 = *(unsigned int *)(a1 + 64);
    v7 = *(_DWORD *)(a1 + 68);
    v10 = *a2;
    v11 = v7;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *, uint64_t, int *))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v5 + v8, &v11, a3, &v10);
    *a2 = v10;
    v9 = *(_DWORD *)(a1 + 68) - v11;
    *(_DWORD *)(a1 + 64) += v11;
    *(_DWORD *)(a1 + 68) = v9;
  }
  return result;
}

uint64_t Lookup_GetDecodedData(uint64_t a1, unsigned int a2, unsigned int a3, void *__dst)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v21;

  v8 = *(_DWORD *)(a1 + 84);
  if (v8 <= a2
    && (v9 = *(_DWORD *)(a1 + 88), v10 = v9 + v8, v9 + v8 >= a2)
    && (v11 = a3 + a2, *(_DWORD *)(a1 + 80) + v8 >= a3 + a2)
    && *(_QWORD *)(a1 + 56))
  {
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 56);
    if (v13)
    {
      v14 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 48), v13);
      *(_QWORD *)(a1 + 56) = 0;
      if ((v14 & 0x80000000) != 0)
        return v14;
    }
    v15 = *(_DWORD *)(a1 + 80);
    if (v15 < a3)
    {
      v16 = *(_QWORD *)(a1 + 72);
      if (v16)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v16);
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 80) = 0;
      }
      v17 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 2 * a3);
      *(_QWORD *)(a1 + 72) = v17;
      if (!v17)
        return 2164269066;
      *(_DWORD *)(a1 + 80) = a3;
      v15 = a3;
    }
    *(_DWORD *)(a1 + 84) = a2;
    *(_DWORD *)(a1 + 88) = 0;
    v12 = Lookup_Init(a1, a2, v15);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v8 = *(_DWORD *)(a1 + 84);
    v9 = *(_DWORD *)(a1 + 88);
    v11 = a3 + a2;
    v10 = v9 + v8;
  }
  v18 = v11 >= v10;
  v19 = v11 - v10;
  if (v19 == 0 || !v18)
    goto LABEL_19;
  v21 = v19;
  v12 = Lookup_Decode(a1, &v21, *(_QWORD *)(a1 + 72) + 2 * v9);
  if ((v12 & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 88) += v21;
LABEL_19:
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 72) + 2 * (a2 - v8)), 2 * a3);
  }
  return v12;
}

uint64_t Lookup_GetUnitData(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)a3 = a2;
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 368);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8 * a2);
    *(_DWORD *)(a3 + 4) = v6 & 0x7FFFFFFF;
    if (*(_WORD *)(v4 + 324) == 32)
    {
      v7 = *(_DWORD *)(v5 + 8 * a2 + 4);
    }
    else
    {
      *(_DWORD *)(a3 + 8) = 0;
      v12 = v5 + 8 * a2;
      v13 = *(unsigned __int8 *)(v12 + 5) >> 4;
      *(_DWORD *)(a3 + 8) = v13;
      v7 = v13 | (16 * *(unsigned __int8 *)(v12 + 4));
    }
    *(_DWORD *)(a3 + 8) = v7;
    result = 0;
    *(_BYTE *)(a3 + 12) = v6 < 0;
    return result;
  }
  if (*(_QWORD *)(v4 + 384))
  {
    v19 = 0;
    result = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[12], *(_DWORD *)(v4 + 504) + 6 * a2, 6, (uint64_t)&v19);
    if ((result & 0x80000000) == 0 && v19)
    {
      v10 = *(_DWORD *)v19;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)v19;
      *(_BYTE *)(a3 + 12) = v10 < 0;
      *(_DWORD *)(a3 + 4) = v10 & 0x7FFFFFFF;
      v11 = v19;
      *(_DWORD *)(a3 + 8) = *(unsigned __int16 *)(v19 + 4);
      return brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[12], v11);
    }
    return result;
  }
  v14 = *(_QWORD *)(v4 + 408);
  if (v14)
  {
    result = 0;
    v15 = *(_DWORD *)(v4 + 400);
    v16 = *(_QWORD *)(v4 + 416);
    v17 = *(_DWORD *)(v14 + 4 * (a2 / v15)) + *(unsigned __int16 *)(v16 + 2 * a2);
    *(_DWORD *)(a3 + 4) = v17;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v14 + 4 * ((a2 + 1) / v15)) - v17 + *(unsigned __int16 *)(v16 + 2 * (a2 + 1));
LABEL_13:
    *(_BYTE *)(a3 + 12) = 0;
    return result;
  }
  if (!*(_QWORD *)(v4 + 432))
    return 0;
  v19 = 0;
  result = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[13], *(_DWORD *)(v4 + 508) + 4 * a2, 4, (uint64_t)&v19);
  if ((result & 0x80000000) == 0)
  {
    v18 = v19;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)v19;
    result = brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[13], v18);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a3 + 8) = 0;
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t Lookup_Freq(uint64_t a1, _WORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = *(_WORD *)(v2 + 320);
  if (*(_WORD *)(v2 + 320))
    return 0;
  else
    return 2164269057;
}

uint64_t Lookup_AvgSpeed(uint64_t a1, _WORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = *(_WORD *)(v2 + 322);
  if (*(_WORD *)(v2 + 322))
    return 0;
  else
    return 2164269057;
}

uint64_t Lookup_NrUnits(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = *(_DWORD *)(v2 + 328);
  if (*(_DWORD *)(v2 + 328))
    return 0;
  else
    return 2164269057;
}

uint64_t Lookup_Fingerprint(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int v9;
  char *i;
  char *v11;
  const char *v12;
  unint64_t v13;
  _BOOL4 v14;
  BOOL v15;

  v5 = 2164269057;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(const char **)(v6 + 352);
  if (v7)
  {
    if (strlen(*(const char **)(v6 + 352)) >= a3)
      v5 = 2164269057;
    else
      v5 = 0;
    strncpy(a2, v7, a3);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 328);
    if (IsThisUrlOrRealPath(*(char **)(a1 + 16), 0))
    {
      if (SplitpathOrUrl(v6, 0, 0, 0, a2, 0))
      {
        for (i = a2; ; ++i)
        {
          if (*i == 95)
          {
            *i = 47;
          }
          else if (!*i)
          {
            goto LABEL_19;
          }
        }
      }
      return 2164269063;
    }
    else
    {
      v11 = strchr((char *)v6, 58);
      if (v11)
        v12 = v11 + 1;
      else
        v12 = (const char *)v6;
      strncpy(a2, v12, a3);
LABEL_19:
      LODWORD(v13) = strlen(a2);
      v14 = v13 < a3;
      if (v13 < a3 && v9)
      {
        v13 = v13;
        do
        {
          a2[v13++] = (v9 % 0xA) | 0x30;
          v14 = v13 < a3;
          if (v13 >= a3)
            break;
          v15 = v9 > 9;
          v9 /= 0xAu;
        }
        while (v15);
      }
      if (v14)
      {
        v5 = 0;
        a2[v13] = 0;
      }
    }
  }
  return v5;
}

uint64_t Lookup_GetComponentID(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 2164269074;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 16) + 528;
  return result;
}

uint64_t Lookup_HasSupportForWsola(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 440);
  if (!v2)
    return 0;
  *a2 = v2;
  return 1;
}

uint64_t Lookup_HasSupportForPsola(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = *(_QWORD *)(result + 16);
    if (v3 && *(_QWORD *)(v3 + 464))
    {
      *a2 = *(_DWORD *)(v3 + 444);
      *a3 = *(_DWORD *)(v3 + 448);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Lookup_UnitPeriInfo(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  unsigned int v21;
  unsigned __int16 v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!*(_QWORD *)(a1[2] + 464))
    return 2164269076;
  v30 = 0;
  v29 = 0;
  *(_QWORD *)a3 = 0;
  v6 = a3 + 8;
  writeToPeriVec(a3 + 8, 0, 0);
  v7 = a1[2];
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 464) + 52);
  if (v8)
  {
    v31 = v8 * (a2 >> 10);
    unpackU32(&v30, *(_QWORD *)(v7 + 480), &v31, v8);
  }
  else
  {
    v30 = 0;
  }
  if ((a2 & 0x3FF) != 0)
  {
    v10 = a1[2];
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 464) + 56);
    v31 = v11 * (a2 - 1);
    v12 = unpackU32_Offline((int *)&v29 + 1, *(_DWORD *)(v10 + 512), *(_QWORD *)(*a1 + 24), a1[14], (unsigned int *)&v31, v11);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v13 = a1[2];
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 464) + 56);
  }
  else
  {
    HIDWORD(v29) = 0;
    v13 = a1[2];
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 464) + 56);
    v31 = v14 * a2;
  }
  v9 = unpackU32_Offline((int *)&v29, *(_DWORD *)(v13 + 512), *(_QWORD *)(*a1 + 24), a1[14], (unsigned int *)&v31, v14);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v15 = v29 - HIDWORD(v29);
  if ((_DWORD)v29 == HIDWORD(v29))
    return v9;
  v28 = 0;
  v12 = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[15], (*(_DWORD *)(a1[2] + 516) + HIDWORD(v29) + v30), (v29 - HIDWORD(v29)), (uint64_t)&v28);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v16 = v28;
  v17 = *(_DWORD **)(a1[2] + 464);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  LODWORD(v26) = 0;
  unpackU32((int *)&v32, v28, &v26, v17[5]);
  writeToPeriVec(v6, 0, v17[4] + v32);
  v18 = v17[7];
  if (v18)
  {
    unpackU32((int *)&v32, v16, &v26, v18);
    v19 = v17[6] + v32;
  }
  else
  {
    LOWORD(v19) = 0;
  }
  v25 = a2;
  *(_WORD *)a3 = v19;
  v21 = v17[12];
  if (v15 <= (v26 + v21 + v17[11] - 1) >> 3)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    do
    {
      unpackU32((int *)&v33 + 1, v16, &v26, v21);
      unpackU32((int *)&v34 + 1, v16, &v26, v17[11]);
      for (; HIDWORD(v33); --HIDWORD(v33))
      {
        writeToPeriVec(a3 + 56, v22, SWORD2(v34));
        if (v22)
          writeToPeriVec(v6, v22, *(_WORD *)(*(_QWORD *)(a3 + 16) + 2 * (v22 - 1)) + v23);
        unpackU32((int *)&v34, v16, &v26, 1u);
        if ((_DWORD)v34)
        {
          if (v17[10] && (unpackU32((int *)&v34, v16, &v26, 1u), !(_DWORD)v34))
          {
            unpackS32((int *)&v32 + 1, v16, &v26, v17[10]);
            LOWORD(v24) = v23 + WORD2(v32);
          }
          else
          {
            unpackU32((int *)&v33, v16, &v26, v17[9]);
            v24 = v17[8] + v33;
          }
          writeToPeriVec(a3 + 32, v22, v24);
          v23 = *(_WORD *)(*(_QWORD *)(a3 + 40) + 2 * v22);
        }
        else
        {
          writeToPeriVec(a3 + 32, v22, v23);
        }
        ++v22;
      }
      v21 = v17[12];
    }
    while (v15 > (v26 + v21 + v17[11] - 1) >> 3);
  }
  *(_WORD *)(a3 + 2) = v22;
  v9 = brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[15], v28);
  if ((v9 & 0x80000000) == 0 && !*(_DWORD *)(*(_QWORD *)(a1[2] + 464) + 28))
  {
    v26 = 0;
    v27 = 0;
    Lookup_GetUnitData(a1, v25, (uint64_t)&v26);
    *(_WORD *)a3 = v27;
  }
  return v9;
}

uint64_t writeToPeriVec(uint64_t a1, unsigned int a2, __int16 a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(unsigned int *)(a1 + 16);
  if (v6 <= a2)
  {
    result = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 8), 2 * v6 + 300);
    if (!result)
      return result;
    *(_QWORD *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 16) += 150;
  }
  else
  {
    result = *(_QWORD *)(a1 + 8);
  }
  *(_WORD *)(result + 2 * a2) = a3;
  return result;
}

uint64_t lookup_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ILookup_0;
  return result;
}

uint64_t Pmk_Lookup_ObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t inited;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AddRefCountedObject;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a5 = 0;
  v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(v17 + 8), 1, 40);
  if (v9)
  {
    v10 = v9;
    v11 = v17;
    *v9 = v17;
    v9[1] = a3;
    if (!a3 || (v12 = *(_QWORD *)(a3 + 48)) == 0)
      v12 = *(_QWORD *)(v11 + 48);
    AddRefCountedObject = objc_GetAddRefCountedObject(v12, a4, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))Pmk_Lookup_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))Pmk_Lookup_ObjcVoiceClose, v11, &v16);
    if ((AddRefCountedObject & 0x80000000) != 0
      || (v10[2] = *(_QWORD *)(v16 + 32),
          AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v17 + 24)),
          (AddRefCountedObject & 0x80000000) != 0))
    {
      v14 = AddRefCountedObject;
    }
    else
    {
      v14 = brk_DataOpen(*(_QWORD *)(v17 + 24));
      if ((v14 & 0x80000000) == 0)
      {
LABEL_14:
        *a5 = v10;
        return v14;
      }
    }
    *a5 = v10;
    Pmk_Lookup_ObjClose((uint64_t)a5);
    v10 = 0;
    goto LABEL_14;
  }
  return 2164269066;
}

uint64_t Pmk_Lookup_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t ChunkData;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  int v36[2];
  int v37;
  unsigned __int8 v38;
  int v39[2];
  uint64_t v40;

  *(_QWORD *)v39 = 0;
  v40 = 0;
  v38 = 0;
  v37 = 0;
  *(_QWORD *)v36 = 0;
  v35 = 0;
  inited = InitRsrcFunction(a1, a2, &v40);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = heap_Calloc(*(_QWORD **)(v40 + 8), 1, 336);
  if (!v9)
    return 2164269066;
  v10 = v9;
  if (strlen(a3) > 0xFF)
    return 2164269065;
  strncpy((char *)v10, a3, 0xFFuLL);
  *(_QWORD *)(v10 + 264) = 0;
  *(_QWORD *)(v10 + 312) = 0;
  *(_QWORD *)(v10 + 320) = 0;
  *(_QWORD *)(v10 + 304) = 0;
  *(_WORD *)(v10 + 328) = -1;
  *(_BYTE *)(v10 + 330) = -1;
  v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "PIMK", 1031, (uint64_t *)v39);
  v19 = *(_QWORD **)v39;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_52;
  for (i = ssftriff_reader_OpenChunk(*(uint64_t *)v39, &v37, (unsigned int *)&v35, 0, v15, v16, v17, v18);
        (i & 0x80000000) == 0;
        i = ssftriff_reader_OpenChunk(*(uint64_t *)v39, &v37, (unsigned int *)&v35, 0, v15, v16, v17, v18))
  {
    if (v37 ^ 0x484B4D50 | v38)
    {
      if (!(v37 ^ 0x464B4D50 | v38))
      {
        ssftriff_reader_GetChunkData(*(uint64_t *)v39, v35, v36, v14, v15, v16, v17, v18);
        v23 = (_BYTE *)heap_Alloc(*(_QWORD *)(v40 + 8), v35);
        *(_QWORD *)(v10 + 320) = v23;
        if (!v23)
          return 2164269066;
LABEL_22:
        ssftriff_reader_ReadStringZ(*(uint64_t *)v39, *(uint64_t *)v36, v35, 0, v23, (unsigned int *)&v35);
        goto LABEL_23;
      }
      if (!(v37 ^ 0x504B4D50 | v38))
      {
        ssftriff_reader_GetChunkData(*(uint64_t *)v39, v35, v36, v14, v15, v16, v17, v18);
        v23 = (_BYTE *)heap_Alloc(*(_QWORD *)(v40 + 8), v35);
        *(_QWORD *)(v10 + 312) = v23;
        if (!v23)
          return 2164269066;
        goto LABEL_22;
      }
      if (v37 ^ 0x44464D50 | v38)
      {
        if (v37 ^ 0x50504D50 | v38)
        {
          if (v37 ^ 0x4F424D50 | v38)
          {
            if (v37 ^ 0x4F554D50 | v38)
            {
              if (!(v37 ^ 0x44554D50 | v38))
                *(_DWORD *)(v10 + 296) = ssftriff_reader_GetPosition(*(uint64_t *)v39);
            }
            else
            {
              *(_DWORD *)(v10 + 300) = ssftriff_reader_GetPosition(*(uint64_t *)v39);
            }
          }
          else
          {
            ChunkData = ssftriff_reader_DetachChunkData(*(uint64_t *)v39, (uint64_t *)(v10 + 272), (_QWORD *)(v10 + 280), v14, v15, v16, v17, v18);
            if ((ChunkData & 0x80000000) != 0)
            {
LABEL_50:
              v11 = ChunkData;
              goto LABEL_51;
            }
          }
        }
        else
        {
          ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v39, v35, v36, v14, v15, v16, v17, v18);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_50;
          v27 = (_DWORD *)heap_Alloc(*(_QWORD *)(v40 + 8), 60);
          *(_QWORD *)(v10 + 264) = v27;
          if (!v27)
            return 2164269066;
          v28 = *(unsigned __int8 *)(v10 + 328);
          if (v28 > 3)
          {
            v11 = 2164269081;
LABEL_51:
            v19 = *(_QWORD **)v39;
LABEL_52:
            if (v19)
              ssftriff_reader_ObjClose(v19, v12, v13, v14, v15, v16, v17, v18);
LABEL_54:
            *(_QWORD *)(a4 + 32) = v10;
            Pmk_Lookup_ObjcVoiceClose(a1, a2, a4);
            *(_QWORD *)(a4 + 32) = 0;
            return v11;
          }
          v29 = *(_DWORD **)v36;
          v30 = (_DWORD *)(*(_QWORD *)v36 + 4);
          *(_DWORD *)(v10 + 260) = **(_DWORD **)v36;
          if (v28 == 1 && !*(_BYTE *)(v10 + 329) && !*(_BYTE *)(v10 + 330))
          {
            v27[1] = v29[1];
            *v27 = v29[2];
            v27[3] = v29[3];
            v27[2] = v29[4];
            v30 = v29 + 5;
          }
          v27[5] = *v30;
          v27[4] = v30[1];
          v27[7] = v30[2];
          v27[6] = v30[3];
          v27[9] = v30[4];
          v27[8] = v30[5];
          v27[10] = v30[6];
          v27[11] = v30[7];
          v27[12] = v30[8];
          v27[13] = v30[9];
          v27[14] = v30[10];
        }
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v39, v35, v36, v14, v15, v16, v17, v18);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_50;
        v24 = heap_Calloc(*(_QWORD **)(v40 + 8), 9, 2);
        *(_QWORD *)(v10 + 304) = v24;
        if (!v24)
          return 2164269066;
        v25 = 0;
        v26 = *(_QWORD *)v36;
        do
        {
          *(_WORD *)(v24 + v25) = *(_WORD *)(v26 + v25);
          v25 += 2;
        }
        while (v25 != 18);
      }
    }
    else
    {
      ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v39, v35, v36, v14, v15, v16, v17, v18);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_50;
      v22 = *(_BYTE **)v36;
      *(_BYTE *)(v10 + 328) = **(_BYTE **)v36;
      *(_BYTE *)(v10 + 329) = v22[1];
      *(_BYTE *)(v10 + 330) = v22[2];
      *(_BYTE *)(v10 + 256) = v22[3];
      *(_BYTE *)(v10 + 257) = v22[4];
      *(_BYTE *)(v10 + 258) = v22[5];
      *(_BYTE *)(v10 + 259) = v22[6];
    }
LABEL_23:
    ChunkData = ssftriff_reader_CloseChunk(*(uint64_t *)v39);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_50;
  }
  v11 = i;
  v31 = i & 0x1FFF;
  v19 = *(_QWORD **)v39;
  if (v31 != 20)
    goto LABEL_52;
  v32 = ssftriff_reader_ObjClose(*(_QWORD **)v39, v12, v13, v14, v15, v16, v17, v18);
  v11 = v32;
  *(_QWORD *)v39 = 0;
  if ((v32 & 0x80000000) != 0)
    goto LABEL_54;
  if (*(_QWORD *)(v10 + 264))
    v33 = v32;
  else
    v33 = 2164269081;
  if ((v33 & 0x80000000) != 0)
  {
    v11 = v33;
    goto LABEL_54;
  }
  *(_QWORD *)(a4 + 32) = v10;
  return v11;
}

uint64_t Pmk_Lookup_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = *(_QWORD **)(a3 + 32);
  v19 = 0;
  inited = InitRsrcFunction(a1, a2, &v19);
  if ((inited & 0x80000000) == 0)
  {
    v12 = (_QWORD *)v3[34];
    if (v12)
      inited = ssftriff_reader_ReleaseChunkData(v12, v4, v5, v6, v7, v8, v9, v10);
    v13 = (_QWORD *)v3[36];
    if (v13)
      inited = ssftriff_reader_ReleaseChunkData(v13, v4, v5, v6, v7, v8, v9, v10);
    v14 = v3[40];
    if (v14)
      heap_Free(*(_QWORD **)(v19 + 8), v14);
    v15 = v3[39];
    if (v15)
      heap_Free(*(_QWORD **)(v19 + 8), v15);
    v16 = v3[38];
    if (v16)
      heap_Free(*(_QWORD **)(v19 + 8), v16);
    v17 = v3[33];
    if (v17)
      heap_Free(*(_QWORD **)(v19 + 8), v17);
    heap_Free(*(_QWORD **)(v19 + 8), (uint64_t)v3);
  }
  return inited;
}

uint64_t Pmk_Lookup_ObjClose(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v4 = v2[1];
    if (!v4 || (v5 = *(_QWORD *)(v4 + 48)) == 0)
      v5 = *(_QWORD *)(*v2 + 48);
    objc_ReleaseObject(v5, v3);
  }
  v6 = v2[3];
  if (v6)
  {
    v7 = brk_DataClose(*(_QWORD *)(*v2 + 24), v6);
    if ((v7 & 0x80000000) != 0)
      return v7;
  }
  else
  {
    v7 = 0;
  }
  v8 = v2[4];
  if (!v8 || (v7 = brk_DataClose(*(_QWORD *)(*v2 + 24), v8), (v7 & 0x80000000) == 0))
  {
    heap_Free(*(_QWORD **)(*v2 + 8), (uint64_t)v2);
    *(_QWORD *)a1 = 0;
  }
  return v7;
}

uint64_t Pmk_Lookup_UnitPeriInfo(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = 0;
  v21 = 0;
  *(_WORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  v5 = a1[2];
  if (*(_DWORD *)(v5 + 256) > a2)
  {
    v19 = 0;
    v18 = 0;
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 52);
    if (v8)
    {
      v20 = a2 / *(_DWORD *)(v5 + 260) * v8;
      unpackU32(&v19, *(_QWORD *)(v5 + 280), &v20, v8);
      v5 = a1[2];
    }
    else
    {
      v19 = 0;
    }
    if (a2 % *(_DWORD *)(v5 + 260))
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 56);
      v20 = v9 * (a2 - 1);
      result = unpackU32_Offline((int *)&v18 + 1, *(_DWORD *)(v5 + 300), *(_QWORD *)(*a1 + 24), a1[4], (unsigned int *)&v20, v9);
      if ((result & 0x80000000) != 0)
        return result;
      v5 = a1[2];
      v10 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 56);
    }
    else
    {
      HIDWORD(v18) = 0;
      v10 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 56);
      v20 = v10 * a2;
    }
    result = unpackU32_Offline((int *)&v18, *(_DWORD *)(v5 + 300), *(_QWORD *)(*a1 + 24), a1[4], (unsigned int *)&v20, v10);
    if ((result & 0x80000000) == 0)
    {
      v11 = v18 - HIDWORD(v18);
      if ((_DWORD)v18 != HIDWORD(v18))
      {
        result = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[3], (*(_DWORD *)(a1[2] + 296) + HIDWORD(v18) + v19), (v18 - HIDWORD(v18)), (uint64_t)&v21);
        if ((result & 0x80000000) == 0)
        {
          v12 = v21;
          v13 = a1[2];
          v24 = 0;
          v25 = 0;
          v23 = 0;
          v22 = 0;
          v14 = *(_DWORD **)(v13 + 264);
          if (*(_BYTE *)(v13 + 328) == 1 && !*(_BYTE *)(v13 + 329) && !*(_BYTE *)(v13 + 330))
          {
            unpackU32(&v22, v21, (_DWORD *)&v25 + 1, v14[1]);
            unpackU32(&v22, v12, (_DWORD *)&v25 + 1, v14[3]);
          }
          unpackU32(&v22, v12, (_DWORD *)&v25 + 1, v14[5]);
          *(_WORD *)(a3 + 8) = v14[4] + v22;
          unpackU32(&v22, v12, (_DWORD *)&v25 + 1, v14[7]);
          *(_WORD *)a3 = v14[6] + v22;
          v15 = v14[12];
          if (v11 <= (HIDWORD(v25) + v15 + v14[11] - 1) >> 3)
          {
            v16 = 0;
          }
          else
          {
            v16 = 0;
            LOWORD(v17) = 0;
            do
            {
              unpackU32((int *)&v24, v12, (_DWORD *)&v25 + 1, v15);
              unpackU32((int *)&v25, v12, (_DWORD *)&v25 + 1, v14[11]);
              for (; (_DWORD)v24; LODWORD(v24) = v24 - 1)
              {
                *(_WORD *)(a3 + 2 * v16 + 40008) = v25;
                if (v16)
                  *(_WORD *)(a3 + 8 + 2 * v16) = *(_WORD *)(a3 + 8 + 2 * (v16 - 1)) + v17;
                unpackU32((int *)&v24 + 1, v12, (_DWORD *)&v25 + 1, 1u);
                if (HIDWORD(v24))
                {
                  if (v14[10] && (unpackU32((int *)&v24 + 1, v12, (_DWORD *)&v25 + 1, 1u), !HIDWORD(v24)))
                  {
                    unpackS32((int *)&v23, v12, (_DWORD *)&v25 + 1, v14[10]);
                    LOWORD(v17) = v17 + v23;
                  }
                  else
                  {
                    unpackU32((int *)&v23 + 1, v12, (_DWORD *)&v25 + 1, v14[9]);
                    v17 = v14[8] + HIDWORD(v23);
                  }
                }
                *(_WORD *)(a3 + 2 * v16++ + 20008) = v17;
              }
              v15 = v14[12];
            }
            while (v11 > (HIDWORD(v25) + v15 + v14[11] - 1) >> 3);
          }
          *(_WORD *)(a3 + 2) = v16;
          return brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[3], v21);
        }
      }
    }
  }
  return result;
}

uint64_t Pmk_Lookup_Fingerprint(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 320);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 320))
    return 0;
  else
    return 2164269057;
}

uint64_t pmk_lookup_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &IPmkLookup;
  return result;
}

uint64_t unpackU32_Offline(int *a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6)
{
  unsigned int v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 *v23;

  v23 = 0;
  if (a6)
  {
    v10 = *a5;
    *a5 += a6;
    result = brk_DataMap(a3, a4, a2 + (v10 >> 3), 4, (uint64_t)&v23);
    if (!(_DWORD)result)
    {
      v12 = 8 - (v10 & 7);
      if (v12 >= a6)
        v13 = a6;
      else
        v13 = 8 - (v10 & 7);
      v14 = (uint64_t)v23;
      v15 = (*v23 >> (v12 - v13)) & ~(-1 << v13);
      *a1 = v15;
      v16 = a6 - v13;
      v17 = a6 - v13 - 8;
      if (a6 - v13 < 8)
      {
        v18 = 1;
        if (!v16)
          return brk_DataUnmap(a3, a4, v14);
      }
      else
      {
        v18 = (v17 >> 3) + 2;
        v19 = (unsigned __int8 *)(v14 + 1);
        v20 = (v17 >> 3) + 1;
        do
        {
          *a1 = v15 << 8;
          v21 = *v19++;
          v15 = v21 | (v15 << 8);
          *a1 = v15;
          v16 -= 8;
          --v20;
        }
        while (v20);
        if (!v16)
          return brk_DataUnmap(a3, a4, v14);
      }
      v22 = v15 << v16;
      *a1 = v22;
      *a1 = (*(unsigned __int8 *)(v14 + v18) >> (8 - v16)) + v22;
      return brk_DataUnmap(a3, a4, v14);
    }
  }
  else
  {
    result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t unpackU32(int *a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;

  if (!a4)
  {
    v12 = 0;
    goto LABEL_10;
  }
  v4 = *a3;
  v5 = v4 >> 3;
  v6 = 8 - (*a3 & 7);
  if (v6 >= a4)
    v7 = a4;
  else
    v7 = 8 - (*a3 & 7);
  *a3 = v4 + a4;
  v8 = (*(unsigned __int8 *)(a2 + v5) >> (v6 - v7)) & ~(-1 << v7);
  *a1 = v8;
  v9 = a4 - v7;
  v10 = (v5 + 1);
  if (a4 - v7 >= 8)
  {
    do
    {
      *a1 = v8 << 8;
      v8 = *(unsigned __int8 *)(a2 + v10) | (v8 << 8);
      *a1 = v8;
      v9 -= 8;
      ++v10;
    }
    while (v9 > 7);
  }
  if (v9)
  {
    v11 = v8 << v9;
    *a1 = v11;
    v12 = (*(unsigned __int8 *)(a2 + v10) >> (8 - v9)) + v11;
LABEL_10:
    *a1 = v12;
  }
  return 0;
}

uint64_t unpackS32(int *a1, uint64_t a2, _DWORD *a3, int a4)
{
  int v8;
  uint64_t v10;

  v10 = 0;
  *a1 = 0;
  unpackU32((int *)&v10 + 1, a2, a3, 1u);
  unpackU32((int *)&v10, a2, a3, a4 - 1);
  if (HIDWORD(v10))
    v8 = -(int)v10;
  else
    v8 = v10;
  *a1 = v8;
  return 0;
}

uint64_t smcadpcmf5spi_GenDecOpen(_WORD *a1, int a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  int inited;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int Info;
  uint64_t v17;
  uint64_t NullHandle;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;

  v6 = 2328911882;
  v26 = 0;
  result = 2328911878;
  if (!a3 || !a5)
    return result;
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  inited = InitRsrcFunction(a1, a2, &v26);
  if (inited < 0)
    return inited & 0xFDFFF | 0x8AD02000;
  v12 = heap_Calloc(*(_QWORD **)(v26 + 8), 1, 88);
  if (!v12)
    return 2328911882;
  v13 = v12;
  *(_QWORD *)(v12 + 80) = v26;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v14 = *a3;
  v15 = a3[1];
  *(_WORD *)(v12 + 4) = v15;
  if (a4 == 4)
  {
    *(_DWORD *)(v12 + 56) = 0;
    Info = smcadpcmf5spi_GetInfo(8450, v14, v15, 0, 0, (uint64_t)&v27);
    if (Info < 0)
    {
      v21 = Info & 0x1FFFFF;
    }
    else
    {
      *(_QWORD *)(v13 + 40) = heap_Calloc(*(_QWORD **)(v26 + 8), 1, HIWORD(v28));
      if ((_WORD)v29)
        *(_QWORD *)(v13 + 48) = heap_Calloc(*(_QWORD **)(v26 + 8), 1, (unsigned __int16)v29);
      v17 = heap_Calloc(*(_QWORD **)(v26 + 8), *(unsigned __int16 *)(v13 + 4), 2);
      *(_QWORD *)(v13 + 16) = v17;
      if (!*(_QWORD *)(v13 + 40) || (_WORD)v29 && !*(_QWORD *)(v13 + 48) || !v17)
        goto LABEL_21;
      NullHandle = safeh_GetNullHandle();
      v20 = smcadpcmf5spi_DecoderOpen(8450, v15, NullHandle, v19, 0, 0, *(_QWORD *)(v13 + 40), v13 + 64);
      v6 = v20;
      if ((v20 & 0x80000000) == 0)
      {
        *(_WORD *)(v13 + 2) = WORD3(v28);
        *(_WORD *)(v13 + 4) = WORD2(v28) >> 1;
        *(_WORD *)(v13 + 6) = WORD4(v27);
        *(_WORD *)v13 = 4;
        *(_WORD *)(v13 + 8) = 0;
        if (!(_DWORD)v20)
        {
          result = 0;
          *(_QWORD *)a5 = v13;
          *(_DWORD *)(a5 + 8) = 173;
          return result;
        }
        goto LABEL_21;
      }
      v21 = v20 & 0x1FFFFF;
    }
    v6 = v21 | 0x8AD02000;
  }
  else
  {
    v6 = 2328911881;
  }
LABEL_21:
  v22 = *(_QWORD *)(v13 + 40);
  v23 = v26;
  if (v22)
  {
    heap_Free(*(_QWORD **)(v26 + 8), v22);
    v23 = v26;
  }
  v24 = *(_QWORD *)(v13 + 48);
  if (v24)
  {
    heap_Free(*(_QWORD **)(v23 + 8), v24);
    v23 = v26;
  }
  v25 = *(_QWORD *)(v13 + 16);
  if (v25)
  {
    heap_Free(*(_QWORD **)(v23 + 8), v25);
    v23 = v26;
  }
  heap_Free(*(_QWORD **)(v23 + 8), v13);
  return v6;
}

uint64_t smcadpcmf5spi_GenDecGetInfo(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  result = safeh_HandleCheck(a1, a2, 173, 88);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      v13 = *a3 + *(unsigned __int16 *)(a1 + 6);
      v14 = *(unsigned __int16 *)(a1 + 4);
      v15 = (*a4 + v13 - 1) / v14;
      v16 = *(unsigned __int16 *)(a1 + 8);
      v17 = v13 / v14 - v16;
      if (v13 / v14 < v16)
        v17 = 0;
      v18 = *(unsigned __int16 *)(a1 + 2);
      *a6 = v17 * v18;
      *a7 = (unsigned __int16)(v15 - v17 + 1) * v18;
      *(_DWORD *)(a1 + 28) = *a4;
      *(_DWORD *)(a1 + 32) = v13 - v17 * v14;
      *(_WORD *)(a1 + 24) = 0;
      if (!(_DWORD)result)
      {
        smcadpcmf5spi_DecoderResetMemory(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
        return 0;
      }
    }
    else
    {
      return 2328911880;
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_GenDecClose(uint64_t *a1, int a2)
{
  uint64_t NullHandle;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v5))
    return 0;
  v8 = safeh_HandleCheck((uint64_t)a1, a2, 173, 88);
  if ((v8 & 0x80000000) != 0)
    return v8;
  if (!a1)
    return 2328911880;
  v6 = smcadpcmf5spi_DecoderClose(a1[8], a1[9]);
  heap_Free(*(_QWORD **)(a1[10] + 8), a1[5]);
  v9 = a1[6];
  if (v9)
    heap_Free(*(_QWORD **)(a1[10] + 8), v9);
  heap_Free(*(_QWORD **)(a1[10] + 8), a1[2]);
  heap_Free(*(_QWORD **)(a1[10] + 8), (uint64_t)a1);
  return v6;
}

uint64_t smcadpcmf5spi_GenDecProcess(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, char *a5, unsigned int *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  _WORD v32[320];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v11 = safeh_HandleCheck(a1, a2, 173, 88);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (!a1)
    return 2328911880;
  if (*a6 >= *(_DWORD *)(a1 + 28))
    v12 = *(_DWORD *)(a1 + 28);
  else
    v12 = *a6;
  v28 = a4;
  v29 = a6;
  if (!v12)
    goto LABEL_12;
  v13 = *(unsigned __int16 *)(a1 + 24);
  if (v12 <= v13)
  {
    memcpy(a5, *(const void **)(a1 + 16), 2 * v12);
    memmove(*(void **)(a1 + 16), (const void *)(*(_QWORD *)(a1 + 16) + 2 * v12), 2 * (*(unsigned __int16 *)(a1 + 24) - v12));
    v17 = &a5[2 * v12];
    *(_WORD *)(a1 + 24) -= v12;
    *(_DWORD *)(a1 + 28) -= v12;
    goto LABEL_14;
  }
  v14 = *a4;
  v15 = *(unsigned __int16 *)(a1 + 2);
  if (v14 < v15)
  {
    if (*(_WORD *)(a1 + 24))
    {
      memcpy(a5, *(const void **)(a1 + 16), 2 * v13);
      v16 = *(unsigned __int16 *)(a1 + 24);
      v17 = &a5[2 * v16];
      *(_DWORD *)(a1 + 28) -= v16;
      *(_WORD *)(a1 + 24) = 0;
LABEL_14:
      LODWORD(v18) = a3;
      goto LABEL_15;
    }
LABEL_12:
    v17 = a5;
    goto LABEL_14;
  }
  v18 = a3;
  v17 = a5;
  while (1)
  {
    v20 = *(_DWORD *)(a1 + 32);
    v21 = *(unsigned __int16 *)(a1 + 4);
    v31 = v15;
    v30 = 2 * v21;
    *(_DWORD *)(a1 + 56) = 0;
    v11 = smcadpcmf5spi_DecoderProcess(*(unsigned __int16 **)(a1 + 64), *(_QWORD *)(a1 + 72), 0, v18, &v31, *(_QWORD *)(a1 + 48), v32, &v30);
    v22 = v30 >> 1;
    v30 >>= 1;
    if (v20 >= v21)
    {
      *(_DWORD *)(a1 + 32) -= v22;
      goto LABEL_31;
    }
    v23 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v23)
    {
      LOWORD(v22) = v22 - v23;
      v24 = &v32[v23];
      *(_DWORD *)(a1 + 32) = 0;
      if (*(_DWORD *)(a1 + 28) < (unsigned __int16)v22)
        LOWORD(v22) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      if (*(_WORD *)(a1 + 24))
      {
        memcpy(v17, *(const void **)(a1 + 16), 2 * *(unsigned __int16 *)(a1 + 24));
        v25 = *(unsigned __int16 *)(a1 + 24);
        v17 += 2 * v25;
        v22 = *(_DWORD *)(a1 + 28) - v25;
        *(_DWORD *)(a1 + 28) = v22;
        v12 -= v25;
        *(_WORD *)(a1 + 24) = 0;
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 28);
      }
      v24 = v32;
      if (v22 > *(unsigned __int16 *)(a1 + 4))
        LOWORD(v22) = v30;
    }
    v26 = (unsigned __int16)v22;
    if (v12 < (unsigned __int16)v22)
      break;
    memcpy(v17, v24, 2 * (unsigned __int16)v22);
    *(_DWORD *)(a1 + 28) -= v26;
    v17 += 2 * v26;
    v12 -= v26;
LABEL_31:
    v18 += v31;
    if (v12)
    {
      v14 -= v31;
      v15 = *(unsigned __int16 *)(a1 + 2);
      if (v14 >= v15)
        continue;
    }
    goto LABEL_15;
  }
  v27 = (unsigned __int16)v22 - v12;
  memcpy(*(void **)(a1 + 16), &v24[v12], 2 * v27);
  *(_WORD *)(a1 + 24) = v27;
  memcpy(v17, v24, 2 * v12);
  *(_DWORD *)(a1 + 28) -= v12;
  v17 += 2 * v12;
  LODWORD(v18) = v18 + v31;
LABEL_15:
  *v28 = v18 - a3;
  *v29 = (unint64_t)(v17 - a5) >> 1;
  return v11;
}

uint64_t gsmc_vssq5_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2328911873;
  result = 0;
  *a2 = &dec_I;
  return result;
}

unsigned __int8 *adpcm_decoder(unsigned __int8 *result, _WORD *a2, int a3, __int16 *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int i;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;

  if (a3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v8 = (char)*result++;
    v7 = v8;
    v9 = *((char *)a4 + 2);
    v10 = stepsizeTable[*((char *)a4 + 2)];
    v11 = *a4;
    for (i = a3 + 1; i > 1; --i)
    {
      if (v4 == 8)
      {
        v14 = (char)*result++;
        v7 = v14;
        v4 = 1;
        if (!v5)
        {
LABEL_7:
          v15 = *result++;
          v13 = v15;
          LODWORD(v6) = v15 >> 4;
          goto LABEL_8;
        }
      }
      else
      {
        ++v4;
        if (!v5)
          goto LABEL_7;
      }
      v13 = v6;
LABEL_8:
      v5 ^= 1u;
      v16 = indexTable[v6 & 0xF];
      v9 = (v16 + v9) & ~((int)(v16 + v9) >> 31);
      if (v9 >= 0x58)
        v9 = 88;
      v17 = (int)((_DWORD)v6 << 30) >> 31;
      v18 = (((int)((_DWORD)v6 << 29) >> 31) & (v10 >> 1)) + (v10 >> 4) + (v17 & (v10 >> 2));
      if ((v6 & 1) != 0)
        v18 += v10 >> 3;
      v19 = v10 + (v10 >> 3) + (v17 & (v10 >> 1));
      if ((v6 & 1) != 0)
        v19 += v10 >> 2;
      v20 = (v10 >> 2) + 2 * v10 + (v10 & ((int)((_DWORD)v6 << 30) >> 31));
      v21 = v20 + (v10 >> 1);
      if ((v6 & 1) == 0)
        v21 = v20;
      if ((v6 & 4) == 0)
        v21 = v19;
      if ((v6 & 8) == 0)
        v21 = v18;
      v22 = (v7 & 1) == 0;
      v7 >>= 1;
      if (!v22)
        v21 = -v21;
      v11 += v21;
      if (v11 <= -8192)
        v11 = -8192;
      if (v11 >= 0x1FFF)
        v11 = 0x1FFF;
      v10 = stepsizeTable[v9];
      *a4 = v11;
      *((_BYTE *)a4 + 2) = v9;
      *a2++ = 4 * v11;
      v6 = v13;
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_GetInfo(int a1, int a2, unsigned __int16 a3, int a4, int a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v8;

  if (a5 == 1)
  {
    if ((a1 & 0xFE00FFFF) != 0x2102)
      return 2327847168;
  }
  else
  {
    result = 2327847168;
    if (a2 != 10000 || (a1 & 0xFE00FFFF) != 0x2102)
      return result;
  }
  if (!a6)
    return 2327846918;
  *(_DWORD *)(a6 + 32) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_DWORD *)(a6 + 8) = 0;
  if (!a3 || (a3 & 7) != 0)
    return 2327846919;
  result = 2327846919;
  if (!(a3 >> 13))
  {
    v8 = ((5 * a3) >> 3) + 3;
    *(_WORD *)(a6 + 22) = v8;
    *(_WORD *)(a6 + 24) = v8;
    LOWORD(v8) = 8 * v8;
    *(_WORD *)(a6 + 26) = v8;
    *(_WORD *)(a6 + 28) = v8;
    if (a4)
    {
      return 2327846913;
    }
    else
    {
      *(_WORD *)(a6 + 16) = 10000;
      *(_WORD *)(a6 + 20) = 2 * a3;
      result = 0;
      if (a5 == 1)
      {
        *(_DWORD *)(a6 + 30) = 0;
      }
      else
      {
        *(_DWORD *)(a6 + 30) = 4;
        *(_DWORD *)(a6 + 12) = 0;
        *(_WORD *)(a6 + 18) = 0;
      }
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_DecoderOpen(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = 2327846918;
  if ((a1 & 0xFE00FFFF) != 0x2102)
    return 2327847168;
  if (!a8)
    return 2327846920;
  if (a7)
  {
    *(_DWORD *)a7 = 0;
    *(_QWORD *)a8 = a7;
    *(_DWORD *)(a8 + 8) = 65708;
    if (HIWORD(a2))
    {
      return 2327846919;
    }
    else
    {
      result = 0;
      *(_WORD *)a7 = a2;
      *(_WORD *)(a7 + 2) = ((5 * a2) >> 3) + 3;
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_DecoderProcess(unsigned __int16 *a1, int a2, int a3, uint64_t a4, _WORD *a5, uint64_t a6, _WORD *a7, _WORD *a8)
{
  uint64_t result;
  int v14;

  if (a8 && a5 && a4 && a7)
  {
    if (*a5)
    {
      *a8 = 0;
      if (a3)
      {
        *a5 = 0;
        return 2327846913;
      }
      else
      {
        result = safeh_HandleCheck((uint64_t)a1, a2, 65708, 4);
        if ((result & 0x80000000) == 0)
        {
          if ((unsigned __int16)*a5 == a1[1])
          {
            v14 = 0;
            BYTE2(v14) = *(_BYTE *)a4;
            LOWORD(v14) = *(_WORD *)(a4 + 1);
            adpcm_decoder((unsigned __int8 *)(a4 + 3), a7, *a1, (__int16 *)&v14);
            result = 0;
            *a8 = 2 * *a1;
          }
          else
          {
            *a5 = 0;
            *a8 = 0;
            return 2327846921;
          }
        }
      }
      return result;
    }
  }
  else if (!a5)
  {
    goto LABEL_10;
  }
  *a5 = 0;
LABEL_10:
  result = 2327846918;
  if (a8)
    *a8 = 0;
  return result;
}

uint64_t smcadpcmf5spi_DecoderClose(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 65708, 4);
}

uint64_t smcadpcmf5spi_DecoderResetMemory(uint64_t a1, int a2)
{
  int v2;

  v2 = safeh_HandleCheck(a1, a2, 65708, 4);
  return v2 & (v2 >> 31);
}

uint64_t smc155mrf22spi_GenDecOpen(_WORD *a1, int a2, int *a3, int a4, uint64_t a5)
{
  unsigned int v6;
  uint64_t result;
  int inited;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int16 v15;
  unsigned int v16;
  int Info;
  uint64_t v18;
  BOOL v19;
  int NullHandle;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v6 = -2043650038;
  result = 2251317254;
  if (a3 && a5)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v24 = 0;
    inited = InitRsrcFunction(a1, a2, &v24);
    if (inited < 0)
    {
      return inited & 0xFDFFF | 0x86302000;
    }
    else
    {
      v12 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 712);
      if (v12)
      {
        v13 = v12;
        *(_QWORD *)(v12 + 704) = v24;
        *(_QWORD *)a5 = v12;
        *(_DWORD *)(a5 + 8) = 99;
        v14 = *(unsigned __int16 *)a3;
        v15 = *((_WORD *)a3 + 2);
        v16 = *((_WORD *)a3 + 1) & 3;
        *(_DWORD *)(v12 + 680) = 0;
        Info = smc155mrf22spi_GetInfo(1057026, v14, v16, 0, 0, (uint64_t)&v25);
        if (Info < 0)
        {
          v6 = Info & 0xFDFFF | 0x86302000;
        }
        else
        {
          *(_QWORD *)(v13 + 664) = heap_Calloc(*(_QWORD **)(v24 + 8), 1, HIWORD(v26));
          v18 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, (unsigned __int16)v27);
          *(_QWORD *)(v13 + 672) = v18;
          if (*(_QWORD *)(v13 + 664))
            v19 = v18 == 0;
          else
            v19 = 1;
          if (!v19)
          {
            NullHandle = safeh_GetNullHandle();
            result = smc155mrf22spi_DecoderOpen(1057026, v16, NullHandle, v21, a3 + 2, a4 - 8, *(char **)(v13 + 664), v13 + 688);
            if ((result & 0x80000000) == 0)
            {
              *(_WORD *)(v13 + 2) = WORD3(v26);
              *(_WORD *)(v13 + 4) = WORD2(v26) >> 1;
              *(_WORD *)(v13 + 6) = WORD4(v25);
              *(_WORD *)v13 = 8;
              *(_WORD *)(v13 + 8) = v15;
              return result;
            }
            v6 = result;
          }
        }
        v22 = *(_QWORD *)(v13 + 664);
        if (v22)
        {
          heap_Free(*(_QWORD **)(v24 + 8), v22);
          *(_QWORD *)(v13 + 664) = 0;
        }
        v23 = *(_QWORD *)(v13 + 672);
        if (v23)
        {
          heap_Free(*(_QWORD **)(v24 + 8), v23);
          *(_QWORD *)(v13 + 672) = 0;
        }
        return v6 & 0xFDFFF | 0x86302000;
      }
      else
      {
        return 2251317258;
      }
    }
  }
  return result;
}

uint64_t smc155mrf22spi_GenDecGetInfo(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;

  v12 = safeh_HandleCheck(a1, a2, 99, 712);
  if ((v12 & 0x80000000) == 0)
  {
    if (a1)
    {
      v13 = *a3 + *(unsigned __int16 *)(a1 + 6);
      v14 = *(unsigned __int16 *)(a1 + 4);
      v15 = (*a4 + v13 - 1) / v14;
      v16 = *(unsigned __int16 *)(a1 + 8);
      v17 = v13 / v14 - v16;
      if (v13 / v14 < v16)
        v17 = 0;
      v18 = *(unsigned __int16 *)(a1 + 2);
      *a6 = v17 * v18;
      *a7 = v18 + v18 * (v15 - v17);
      *(_DWORD *)(a1 + 652) = *a4;
      *(_DWORD *)(a1 + 656) = v13 - v17 * v14;
      *(_WORD *)(a1 + 650) = 0;
      bzero((void *)(a1 + 10), 2 * v14);
      smc155mrf22spi_DecoderResetMemory(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696));
    }
    else
    {
      return 2251317256;
    }
  }
  return v12;
}

uint64_t smc155mrf22spi_GenDecClose(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 99, 712);
  if ((v3 & 0x80000000) != 0)
    return v3;
  if (!a1)
    return 2251317256;
  v4 = smc155mrf22spi_DecoderClose(a1[86], a1[87]);
  v5 = a1[83];
  if (v5)
  {
    heap_Free(*(_QWORD **)(a1[88] + 8), v5);
    a1[83] = 0;
  }
  v6 = a1[84];
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1[88] + 8), v6);
    a1[84] = 0;
  }
  heap_Free(*(_QWORD **)(a1[88] + 8), (uint64_t)a1);
  return v4;
}

uint64_t smc155mrf22spi_GenDecProcess(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int *a4, char *a5, unsigned int *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *__src;
  int v30;
  unsigned int *v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  char v34[640];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v11 = safeh_HandleCheck(a1, a2, 99, 712);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (!a1)
    return 2251317256;
  if (*a6 >= *(_DWORD *)(a1 + 652))
    v12 = *(_DWORD *)(a1 + 652);
  else
    v12 = *a6;
  v31 = a4;
  v30 = (int)a3;
  if (!v12)
  {
LABEL_12:
    v17 = a5;
    goto LABEL_14;
  }
  v13 = *(unsigned __int16 *)(a1 + 650);
  if (v12 <= v13)
  {
    memcpy(a5, (const void *)(a1 + 10), 2 * v12);
    memmove((void *)(a1 + 10), (const void *)(a1 + 10 + 2 * v12), 2 * (*(unsigned __int16 *)(a1 + 650) - v12));
    v17 = &a5[2 * v12];
    *(_WORD *)(a1 + 650) -= v12;
    *(_DWORD *)(a1 + 652) -= v12;
    goto LABEL_14;
  }
  v14 = *a4;
  v15 = *(unsigned __int16 *)(a1 + 2);
  if (*a4 < v15)
  {
    if (*(_WORD *)(a1 + 650))
    {
      memcpy(a5, (const void *)(a1 + 10), 2 * v13);
      v16 = *(unsigned __int16 *)(a1 + 650);
      v17 = &a5[2 * v16];
      *(_DWORD *)(a1 + 652) -= v16;
      *(_WORD *)(a1 + 650) = 0;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  __src = (void *)(a1 + 10);
  v17 = a5;
  while (1)
  {
    v19 = *(_DWORD *)(a1 + 656);
    v20 = *(unsigned __int16 *)(a1 + 4);
    v33 = v15;
    v32 = 2 * v20;
    if (v19 >= v20)
    {
      v26 = v19 >= 3 * v20;
      *(_DWORD *)(a1 + 680) = v26;
      v11 = smc155mrf22spi_DecoderProcess(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696), v26, a3, &v33, *(_QWORD *)(a1 + 672), v34, &v32, 0, 0);
      v27 = v32;
      v32 >>= 1;
      *(_DWORD *)(a1 + 656) -= v27 >> 1;
      goto LABEL_31;
    }
    *(_DWORD *)(a1 + 680) = 0;
    v11 = smc155mrf22spi_DecoderProcess(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696), 0, a3, &v33, *(_QWORD *)(a1 + 672), v34, &v32, 0, 0);
    v21 = v32 >> 1;
    v32 >>= 1;
    v22 = *(unsigned int *)(a1 + 656);
    if ((_DWORD)v22)
    {
      v23 = v21 - v22;
      v24 = &v34[2 * v22];
      *(_DWORD *)(a1 + 656) = 0;
      v25 = v23 >= *(_DWORD *)(a1 + 652) ? *(_DWORD *)(a1 + 652) : v23;
    }
    else
    {
      if (*(_WORD *)(a1 + 650))
      {
        memcpy(v17, __src, 2 * *(unsigned __int16 *)(a1 + 650));
        v28 = *(unsigned __int16 *)(a1 + 650);
        v17 += 2 * v28;
        v25 = *(_DWORD *)(a1 + 652) - v28;
        *(_DWORD *)(a1 + 652) = v25;
        v12 -= v28;
        *(_WORD *)(a1 + 650) = 0;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 652);
      }
      if (v25 > *(unsigned __int16 *)(a1 + 4))
        v25 = v32;
      v24 = v34;
    }
    if (v25 > v12)
      break;
    LH_S16ToLH_S16(v24, v17, v25);
    *(_DWORD *)(a1 + 652) -= v25;
    v17 += 2 * v25;
    v12 -= v25;
LABEL_31:
    a3 += v33;
    if (v12)
    {
      v14 -= v33;
      v15 = *(unsigned __int16 *)(a1 + 2);
      if (v14 >= v15)
        continue;
    }
    goto LABEL_14;
  }
  LH_S16ToLH_S16(&v24[2 * v12], __src, v25 - v12);
  *(_WORD *)(a1 + 650) = v25 - v12;
  LH_S16ToLH_S16(v24, v17, v12);
  *(_DWORD *)(a1 + 652) -= v12;
  v17 += 2 * v12;
  LODWORD(a3) = (_DWORD)a3 + v33;
LABEL_14:
  *v31 = (_DWORD)a3 - v30;
  *a6 = (unint64_t)(v17 - a5) >> 1;
  return v11;
}

uint64_t gsmc_155mrf22_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2251317249;
  result = 0;
  *a2 = &dec_I_0;
  return result;
}

uint64_t smc155mrf22_fxd_gain_predict(int16x4_t *a1, __int16 *a2, int a3, _WORD *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t result;

  if (a3 < 1)
  {
    v6 = 20971;
  }
  else
  {
    v5 = a3;
    v6 = 20971;
    do
    {
      v7 = *a2++;
      v6 += (v7 * v7) >> 5;
      --v5;
    }
    while (v5);
  }
  v8 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_1DECD0F10), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)((v6 / (__int16)((_WORD)a3 << 8)) >> 1), (uint64_t)&s16LogTable_0)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v8 >> 36) + (v8 >> 63)) >> 1), (uint64_t)&u16PowTable_0);
  *a4 = 2 * result;
  return result;
}

uint64_t smc155mrf22_fxd_gain_predict_pulses(int16x4_t *a1, int a2, __int16 a3, _WORD *a4)
{
  unint64_t v5;
  uint64_t result;

  v5 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_1DECD0F10), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)(((((a2 << 11) | 0x14) << 16 >> 6) / (__int16)(a3 << 8)) >> 1), (uint64_t)&s16LogTable_0)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v5 >> 36) + (v5 >> 63)) >> 1), (uint64_t)&u16PowTable_0);
  *a4 = 2 * result;
  return result;
}

uint64_t smc155mrf22_fxd_DecodeCodeGain(unsigned int a1, __int16 *a2, int a3, uint64_t a4, __int16 a5)
{
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 v14;

  v14 = 0;
  if (a3)
    smc155mrf22_fxd_gain_predict_pulses((int16x4_t *)a4, a3, a5, &v14);
  else
    smc155mrf22_fxd_gain_predict((int16x4_t *)a4, a2, a5, &v14);
  if ((int)a1 > 58)
  {
    if (a1 > 0x3C)
    {
      v9 = 2 * v14 * smc155mrf22_fxd_qgc[a1];
      v10 = (v9 + 512) >> 10;
      v11 = (v9 + 2048) >> 12;
      if (a1 <= 0x3E)
        LOWORD(v8) = v11;
      else
        LOWORD(v8) = v10;
      if (a1 <= 0x3E)
        v7 = 1541;
      else
        v7 = 3082;
    }
    else
    {
      v8 = (2 * v14 * smc155mrf22_fxd_qgc[a1] + 4096) >> 13;
      v7 = 770;
    }
  }
  else
  {
    v7 = 0;
    v8 = (2 * v14 * smc155mrf22_fxd_qgc[a1] + 0x2000) >> 14;
  }
  v12 = (__int16)smc155mrf22_fxd_qgc[a1];
  *(_WORD *)(a4 + 6) = *(_WORD *)(a4 + 4);
  *(_DWORD *)(a4 + 2) = *(_DWORD *)a4;
  *(_WORD *)a4 = 4 * (fxd_S16Lookup10Log10S16S16(v12, (uint64_t)&s16LogTable_0) + v7);
  return (unsigned __int16)v8;
}

unsigned __int8 *smc155mrf22_ReadStream(unsigned __int8 *result, unsigned int a2, _DWORD *a3, int a4, _WORD *a5)
{
  uint64_t v5;
  int8x8_t *v6;
  unsigned int v7;
  uint32x4_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[50];

  v14[49] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = a2;
    v6 = (int8x8_t *)v14;
    do
    {
      v7 = *result++;
      v8 = (uint32x4_t)vdupq_n_s32(v7);
      *v6++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_1DECCFFD0), (int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_1DECCFFC0))), (int8x8_t)0x101010101010101);
      --v5;
    }
    while (v5);
  }
  if (a4)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = (unsigned __int16)*a5;
      if (*a5)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v13 += *((unsigned __int8 *)v10 + v12) << v12;
          ++v12;
        }
        while ((_DWORD)v11 != (_DWORD)v12);
        v10 = (_QWORD *)((char *)v10 + v11);
      }
      else
      {
        v13 = 0;
      }
      *a3++ = v13;
      ++a5;
      ++v9;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t smc155mrf22spi_GetInfo(int a1, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t result;
  signed int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;

  if (a5 == 1)
  {
    if (a1 != 1057026)
      return 2250252544;
  }
  else
  {
    result = 2250252544;
    if (a1 != 1057026 || a2 != 4005)
      return result;
  }
  if (!a6)
    return 2250252294;
  *(_DWORD *)(a6 + 32) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_DWORD *)(a6 + 8) = 40;
  if (a3 > 3)
    return 2250252295;
  v8 = a3 - 1;
  if (a3 - 1 > 2)
  {
    LOWORD(v11) = 296;
    v10 = 20400;
    LOWORD(v9) = 37;
  }
  else
  {
    v9 = 0x310025001CuLL >> (16 * v8);
    v10 = dword_1DECD37B4[v8];
    v11 = 0x188012800E0uLL >> (16 * v8);
  }
  *(_WORD *)(a6 + 22) = v9;
  *(_WORD *)(a6 + 24) = v9;
  *(_DWORD *)a6 = v10;
  *(_DWORD *)(a6 + 4) = v10;
  *(_WORD *)(a6 + 26) = v11;
  *(_WORD *)(a6 + 28) = v11;
  result = 2250252289;
  if (a5 == 1)
  {
    if (!a4)
    {
      result = 0;
      *(_WORD *)(a6 + 16) = 4005;
      *(_WORD *)(a6 + 20) = 640;
      *(_DWORD *)(a6 + 30) = 0;
    }
  }
  else if (a4 < 2)
  {
    result = 0;
    *(_WORD *)(a6 + 20) = 640;
    *(_DWORD *)(a6 + 30) = 56624768;
    *(_QWORD *)(a6 + 12) = 0xFA500000004;
  }
  return result;
}

uint64_t smc155mrf22spi_DecoderOpen(int a1, unsigned int a2, int a3, int a4, int *a5, int a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;

  v8 = 2250252294;
  if (a1 != 1057026)
    return 2250252544;
  if (a7)
  {
    bzero(a7, 0x680uLL);
    if (a8)
    {
      *(_QWORD *)a8 = a7;
      *(_DWORD *)(a8 + 8) = 65634;
      if (a2 > 3)
      {
        return 2250252295;
      }
      else if (a5)
      {
        v16 = *a5;
        v15 = a5 + 1;
        v14 = v16;
        *((_DWORD *)a7 + 11) = v16;
        *((_QWORD *)a7 + 6) = v15;
        v17 = 8 * v16 + 24;
        if ((int)v16 >= 1)
        {
          v18 = v14;
          v19 = v15;
          do
          {
            v20 = *v19++;
            v17 += 32 * v20;
            --v18;
          }
          while (v18);
        }
        if (v17 == a6)
        {
          v21 = &v15[v14];
          *((_QWORD *)a7 + 7) = v21;
          v22 = &v21[v14];
          *((_DWORD *)a7 + 10) = v22[1];
          *((_QWORD *)a7 + 191) = v22 + 5;
          v23 = a2 & 3;
          if (v23 == 1)
          {
            v24 = 0x1C0000001CLL;
            v25 = 15;
          }
          else if (v23 == 3)
          {
            v24 = 0x2C00000031;
            v23 = 3;
            v25 = 17;
          }
          else
          {
            v24 = 0x2400000025;
            v23 = 2;
            v25 = 16;
          }
          *(_QWORD *)(a7 + 28) = 0x18D00000036;
          *((_DWORD *)a7 + 9) = v23;
          *(_QWORD *)(a7 + 12) = v24;
          *((_DWORD *)a7 + 5) = 22050;
          *((_DWORD *)a7 + 1) = v25;
          *((_DWORD *)a7 + 2) = 0;
          ClearLongTermMemory((uint64_t)a7);
          *((_QWORD *)a7 + 8) = a7 + 866;
          *(_OWORD *)(a7 + 1506) = xmmword_1DECD37E0;
          fxd_LinSpace((_WORD *)a7 + 812, 0, 25736, 16);
          v8 = 0;
          *((_DWORD *)a7 + 414) = 0;
        }
        else
        {
          return 2250252297;
        }
      }
    }
    else
    {
      return 2250252296;
    }
  }
  return v8;
}

uint64_t smc155mrf22spi_DecoderProcess(uint64_t a1, int a2, unsigned int a3, unsigned __int8 *a4, _WORD *a5, uint64_t a6, char *a7, _WORD *a8, _DWORD *a9, _WORD *a10)
{
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 *v43;
  int v44;
  int v45;
  __int16 v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 *v52;
  int v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 *v62;
  void *__src;
  void *v64;
  _DWORD *v65;
  uint64_t v66;
  _WORD *__dst;
  _WORD *v68;
  char *v69;
  uint64_t v70;
  _DWORD v71[5];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a8 && a5 && a4 && a6 && a7)
  {
    if (*a5)
    {
      *a8 = 0;
      if (a3 >= 2)
      {
        *a5 = 0;
        return 2250252289;
      }
      else
      {
        result = safeh_HandleCheck(a1, a2, 65634, 1664);
        if ((result & 0x80000000) == 0)
        {
          if (a1)
          {
            if (*(_DWORD *)(a1 + 12) <= (int)(unsigned __int16)*a5)
            {
              __dst = (_WORD *)(a6 + 384);
              smc155mrf22_ReadStream(a4, (unsigned __int16)*(_DWORD *)(a1 + 12), (_DWORD *)(a6 + 608), *(unsigned __int16 *)(a1 + 16), &au16BitAllocationTable[56 * *(_DWORD *)(a1 + 4) - 840]);
              *a5 = *(_DWORD *)(a1 + 12);
              v69 = a7;
              if (a3)
              {
                fxd_LinSpace((_WORD *)(a6 + 832), 0, 25736, 16);
              }
              else
              {
                fxd_MultiStageVectorDecodeLsp((_DWORD *)(a6 + 608), *(_DWORD *)(a1 + 44), *(_DWORD **)(a1 + 48), *(_QWORD *)(a1 + 1528), 16, (__int16 *)(a6 + 832));
                fxd_OrderCheckLsp((__int16 *)(a6 + 832), 16, *(_DWORD *)(a1 + 40));
              }
              v18 = 0;
              v19 = 0;
              v70 = 0;
              v20 = (unsigned int *)(a6 + 608 + 4 * *(int *)(a1 + 44));
              v65 = (_DWORD *)(a6 + 544);
              v66 = a1 + 1506;
              __src = (void *)(a1 + 1560);
              v64 = (void *)(a6 + 832);
              v62 = (__int16 *)(a1 + 1624);
              v68 = a8;
              do
              {
                v21 = 80 * v19;
                smc1175mrf22_DecodeLag_11_22(*v20, v19, *(_DWORD *)(a1 + 4), (int *)&v70 + 1, &v70);
                smc1175mrf22_fxd_ExcitWFSet0_Decod_11_22((_WORD *)(*(_QWORD *)(a1 + 64) + 160 * v19), SWORD2(v70), 80);
                v22 = 0;
                *(_WORD *)(a1 + 1518) = smc155mrf22_fxd_qgp[v20[1]];
                v23 = *(_QWORD *)(a1 + 64) + v18;
                do
                {
                  v24 = 2 * *(__int16 *)(v23 + v22) * *(__int16 *)(a1 + 1518);
                  v25 = (v24 + 0x4000) >> 15;
                  if (v25 <= -32768)
                    LOWORD(v25) = 0x8000;
                  if (v24 <= 1073725439)
                    v26 = v25;
                  else
                    v26 = 0x7FFF;
                  *(_WORD *)(v23 + v22) = v26;
                  v22 += 2;
                }
                while (v22 != 160);
                v27 = v20[2];
                v28 = v20[3];
                if (*(_DWORD *)(a1 + 4) == 16)
                  smc155mrf22_fxd_DecodWFSet1_4p((void *)a6, v71, 80, v27, v28);
                else
                  smc155mrf22_fxd_DecodWFSet1_5p((void *)a6, v71, 80, v27, v28);
                v29 = SHIDWORD(v70);
                if (SHIDWORD(v70) > 79)
                {
                  if (*(_DWORD *)(a1 + 4) == 16)
                    v37 = 4;
                  else
                    v37 = 5;
                  v38 = smc155mrf22_fxd_DecodeCodeGain(v20[4], (__int16 *)a6, v37, v66, 80);
                  *(_WORD *)(a1 + 1516) = v38;
                  *(_WORD *)(a1 + 1514) = v38;
                  v36 = *(_QWORD *)(a1 + 64);
                  v39 = v71;
                  do
                  {
                    v40 = *v39++;
                    *(_WORD *)(v36 + 2 * ((int)v40 + v21)) += (2
                                                                             * *(__int16 *)(a6 + 2 * v40)
                                                                             * *(__int16 *)(a1 + 1514)
                                                                             + 0x8000) >> 16;
                    --v37;
                  }
                  while (v37);
                }
                else
                {
                  v30 = 0;
                  do
                  {
                    v31 = 2 * *(__int16 *)(a6 + v30) * *(__int16 *)(a1 + 1520);
                    v32 = (v31 + 0x4000) >> 15;
                    if (v32 <= -32768)
                      LOWORD(v32) = 0x8000;
                    if (v31 <= 1073725439)
                      v33 = v32;
                    else
                      v33 = 0x7FFF;
                    *(_WORD *)(a6 + 2 * v29++) += v33;
                    v30 += 2;
                  }
                  while ((_DWORD)v29 != 80);
                  v34 = smc155mrf22_fxd_DecodeCodeGain(v20[4], (__int16 *)a6, 0, v66, 80);
                  v35 = 0;
                  *(_WORD *)(a1 + 1516) = v34;
                  *(_WORD *)(a1 + 1514) = v34;
                  v36 = *(_QWORD *)(a1 + 64);
                  do
                  {
                    *(_WORD *)(v36 + v18 + v35) += (2 * *(__int16 *)(a6 + v35) * *(__int16 *)(a1 + 1514)
                                                                + 0x8000) >> 16;
                    v35 += 2;
                  }
                  while (v35 != 160);
                }
                if (*(int *)(a1 + 36) < 2)
                {
                  v20 += 5;
                }
                else
                {
                  smc155mrf22_fxd_DecodWFSet1_4p((void *)a6, v71, 80, v20[5], v20[6]);
                  *(_WORD *)(a1 + 1514) = (43690 * *(__int16 *)(a1 + 1516) + 0x8000) >> 16;
                  v41 = SHIDWORD(v70);
                  if (SHIDWORD(v70) > 79)
                  {
                    v49 = 0;
                    v36 = *(_QWORD *)(a1 + 64);
                    do
                    {
                      *(_WORD *)(v36 + 2 * (v71[v49] + v21)) += (2
                                                                               * *(__int16 *)(a6 + 2 * (int)v71[v49])
                                                                               * *(__int16 *)(a1 + 1514)
                                                                               + 0x8000) >> 16;
                      ++v49;
                    }
                    while (v49 != 4);
                  }
                  else
                  {
                    v42 = SHIDWORD(v70) + 1;
                    v43 = (__int16 *)a6;
                    do
                    {
                      v44 = 2 * *v43 * *(__int16 *)(a1 + 1520);
                      v45 = (v44 + 0x4000) >> 15;
                      if (v45 <= -32768)
                        LOWORD(v45) = 0x8000;
                      if (v44 <= 1073725439)
                        v46 = v45;
                      else
                        v46 = 0x7FFF;
                      v43[v41] += v46;
                      ++v43;
                      v47 = (_DWORD)v42++ == 80;
                    }
                    while (!v47);
                    v48 = 0;
                    v36 = *(_QWORD *)(a1 + 64);
                    do
                    {
                      *(_WORD *)(v36 + v18 + v48) += (2 * *(__int16 *)(a6 + v48) * *(__int16 *)(a1 + 1514)
                                                                  + 0x8000) >> 16;
                      v48 += 2;
                    }
                    while (v48 != 160);
                  }
                  if (*(_DWORD *)(a1 + 36) == 3)
                  {
                    smc155mrf22_fxd_DecodWFSet1_4p((void *)a6, v71, 80, v20[7], v20[8]);
                    *(_WORD *)(a1 + 1514) = ((*(__int16 *)(a1 + 1516) << 15) + 0x8000) >> 16;
                    v50 = SHIDWORD(v70);
                    if (SHIDWORD(v70) > 79)
                    {
                      v57 = 0;
                      v36 = *(_QWORD *)(a1 + 64);
                      do
                      {
                        *(_WORD *)(v36 + 2 * (v71[v57] + v21)) += (2
                                                                                 * *(__int16 *)(a6 + 2 * (int)v71[v57])
                                                                                 * *(__int16 *)(a1 + 1514)
                                                                                 + 0x8000) >> 16;
                        ++v57;
                      }
                      while (v57 != 4);
                    }
                    else
                    {
                      v51 = SHIDWORD(v70) + 1;
                      v52 = (__int16 *)a6;
                      do
                      {
                        v53 = 2 * *v52 * *(__int16 *)(a1 + 1520);
                        v54 = (v53 + 0x4000) >> 15;
                        if (v54 <= -32768)
                          LOWORD(v54) = 0x8000;
                        if (v53 <= 1073725439)
                          v55 = v54;
                        else
                          v55 = 0x7FFF;
                        v52[v50] += v55;
                        ++v52;
                        v47 = (_DWORD)v51++ == 80;
                      }
                      while (!v47);
                      v56 = 0;
                      v36 = *(_QWORD *)(a1 + 64);
                      do
                      {
                        *(_WORD *)(v36 + v18 + v56) += (2
                                                                    * *(__int16 *)(a6 + v56)
                                                                    * *(__int16 *)(a1 + 1514)
                                                                    + 0x8000) >> 16;
                        v56 += 2;
                      }
                      while (v56 != 160);
                    }
                    v20 += 9;
                  }
                  else
                  {
                    v20 += 7;
                  }
                }
                *(_WORD *)(a1 + 1520) = *(_WORD *)(a1 + 1518);
                v58 = v36 + 160 * v19;
                if (a3)
                {
                  v59 = (void *)(a6 + 384);
                  LH_S16ToLH_S16((void *)(v36 + 160 * v19), __dst, 0x50u);
                  v60 = v68;
                }
                else
                {
                  v60 = v68;
                  if (v19 > 2)
                    LH_S16ToLH_S16(v64, v65, 0x10u);
                  else
                    fxd_InterpolateVectors(v62, (__int16 *)v64, v65, word_1DED1ECBC[v19], 16);
                  fxd_LspToCosLsp((__int16 *)v65, v65, 16);
                  fxd_HighPrecisionCosLspToAi((unint64_t)v65, v65, 16);
                  fxd_HighPrecisionExpandLpcBandwidth((uint64_t)v65, v65, 32505, 16, 0);
                  FillZeroLH_S32((void *)a6, 0x60u);
                  LH_S32ToLH_S32(__src, (void *)a6, 0x10u);
                  v61 = v58;
                  v59 = (void *)(a6 + 384);
                  fxd_HighPrecisionFastSynthesisFilter(v61, __dst, 80, 0, v65, 0x10u, 28, a6, 14);
                  LH_S32ToLH_S32((void *)(a6 + 320), __src, 0x10u);
                }
                LH_S16ToLH_S16(v59, v69, 0x50u);
                v69 += 160;
                *v60 += 160;
                ++v19;
                v18 += 160;
              }
              while (v19 != 4);
              if (a9)
              {
                *a10 = 4;
                *a9 = *(_DWORD *)a1;
              }
              LH_S16ToLH_S16(v64, v62, 0x10u);
              LH_S16ToLH_S16((void *)(a1 + 712), (void *)(a1 + 72), *(_DWORD *)(a1 + 32));
              FillZeroLH_S16((void *)(a1 + 72 + 2 * *(int *)(a1 + 32)), 0x140u);
              result = 0;
              ++*(_DWORD *)(a1 + 1656);
            }
            else
            {
              *a5 = 0;
              *a8 = 0;
              return 2250252297;
            }
          }
          else
          {
            return 2250252296;
          }
        }
      }
      return result;
    }
  }
  else if (!a5)
  {
    goto LABEL_14;
  }
  *a5 = 0;
LABEL_14:
  result = 2250252294;
  if (a8)
    *a8 = 0;
  return result;
}

uint64_t smc155mrf22spi_DecoderClose(uint64_t a1, int a2)
{
  uint64_t NullHandle;
  int v5;
  uint64_t result;
  unsigned int v7;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual(a1, a2, NullHandle, v5))
    return 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 65634, 1664);
  if (a1)
    v7 = result;
  else
    v7 = -2044715000;
  if ((int)result >= 0)
    return v7;
  else
    return result;
}

uint64_t smc155mrf22spi_DecoderResetMemory(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 65634, 1664);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      ClearLongTermMemory(a1);
      *(_OWORD *)(a1 + 1506) = xmmword_1DECD37E0;
      fxd_LinSpace((_WORD *)(a1 + 1624), 0, 25736, 16);
      return 0;
    }
    else
    {
      return 2250252296;
    }
  }
  return result;
}

double ClearLongTermMemory(uint64_t a1)
{
  double result;

  bzero((void *)(a1 + 72), 0x59AuLL);
  result = 0.0;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1548) = 0;
  *(_DWORD *)(a1 + 1556) = 0;
  return result;
}

void smc155mrf22_fxd_DecodWFSet1_5p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;

  FillZeroLH_S16(a1, a3);
  v10 = dword_1DECD37F0[a5 & 0xF];
  if ((a4 & 1) != 0)
    v11 = 0x2000;
  else
    v11 = -8192;
  *((_WORD *)a1 + v10) = v11;
  *a2 = v10;
  v12 = (dword_1DECD38B0[a5 >> 4] + (int)v10) % a3;
  if ((a4 & 2) != 0)
    v13 = 0x2000;
  else
    v13 = -8192;
  *((_WORD *)a1 + v12) = v13;
  a2[1] = v12;
  v14 = (dword_1DECD38B0[(a5 >> 8) & 0xF] + v12) % a3;
  if ((a4 & 4) != 0)
    v15 = 0x2000;
  else
    v15 = -8192;
  *((_WORD *)a1 + v14) = v15;
  a2[2] = v14;
  v16 = (dword_1DECD38B0[(unsigned __int16)a5 >> 12] + v14) % a3;
  if ((a4 & 8) != 0)
    v17 = 0x2000;
  else
    v17 = -8192;
  *((_WORD *)a1 + v16) = v17;
  a2[3] = v16;
  v18 = (dword_1DECD38B0[HIWORD(a5) & 0xF] + v16) % a3;
  if ((a4 & 0x10) != 0)
    v19 = 0x2000;
  else
    v19 = -8192;
  *((_WORD *)a1 + v18) = v19;
  a2[4] = v18;
}

void smc155mrf22_fxd_DecodWFSet1_4p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;

  FillZeroLH_S16(a1, a3);
  v10 = dword_1DECD3830[a5 & 0x1F];
  if ((a4 & 1) != 0)
    v11 = 0x2000;
  else
    v11 = -8192;
  *((_WORD *)a1 + v10) = v11;
  *a2 = v10;
  v12 = (dword_1DECD38B0[(a5 >> 5) & 0xF] + (int)v10) % a3;
  if ((a4 & 2) != 0)
    v13 = 0x2000;
  else
    v13 = -8192;
  *((_WORD *)a1 + v12) = v13;
  a2[1] = v12;
  v14 = (dword_1DECD38B0[(a5 >> 9) & 0xF] + v12) % a3;
  if ((a4 & 4) != 0)
    v15 = 0x2000;
  else
    v15 = -8192;
  *((_WORD *)a1 + v14) = v15;
  a2[2] = v14;
  v16 = (dword_1DECD38B0[(a5 >> 13) & 0xF] + v14) % a3;
  if ((a4 & 8) != 0)
    v17 = 0x2000;
  else
    v17 = -8192;
  *((_WORD *)a1 + v16) = v17;
  a2[3] = v16;
}

uint64_t smcsch1spi_GenDecOpen(_WORD *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  int inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Int;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v28 = 0;
  v27 = 0;
  v5 = 2617270278;
  if (a3 && a5)
  {
    inited = InitRsrcFunction(a1, a2, &v27);
    if (inited < 0)
      return inited & 0xFDFFF | 0x9C002000;
    v10 = heap_Calloc(*(_QWORD **)(v27 + 8), 1, 144);
    if (!v10)
      return 2617270282;
    v11 = v10;
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    v12 = v27;
    *(_QWORD *)(v10 + 136) = v27;
    v5 = 2617270281;
    if (a4 < 8)
      goto LABEL_13;
    if (*(_WORD *)a3 != 11000)
      goto LABEL_12;
    *(_DWORD *)(v10 + 40) = 100 * *(unsigned __int16 *)(a3 + 2);
    Int = paramc_ParamGetInt(*(_QWORD *)(v12 + 40), (uint64_t)"decoderoverheadframes", &v28);
    v17 = v28;
    if (!v28)
      v17 = 2;
    if (Int < 0)
      v17 = 2;
    *(_WORD *)(v11 + 80) = v17;
    if (*(_WORD *)(a3 + 6))
      goto LABEL_12;
    if (a4 - 8 < 0x18)
      goto LABEL_13;
    v19 = *(unsigned int *)(a3 + 8);
    *(_DWORD *)(v11 + 100) = v19;
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v11 + 136) + 32);
      v21 = "incompatible coded speech base format version (%d > (expected) %d)";
      v26 = v19;
LABEL_20:
      log_OutText(v20, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)v21, v14, v15, v16, v26);
LABEL_12:
      v5 = 2617270297;
LABEL_13:
      smcsch1spi_GenDecDestroyLowLevelDecoder((uint64_t *)v11);
      heap_Free(*(_QWORD **)(v27 + 8), v11);
      return v5;
    }
    *(_DWORD *)(v11 + 52) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(v11 + 48) = *(_DWORD *)(a3 + 16);
    v22 = *(_DWORD *)(a3 + 20);
    *(_DWORD *)(v11 + 44) = v22;
    if (v22 <= 15999)
    {
      if (v22 != 8000)
      {
        v23 = 12000;
LABEL_27:
        if (v22 != v23)
          goto LABEL_12;
      }
    }
    else if (v22 != 16000 && v22 != 48000)
    {
      v23 = 24000;
      goto LABEL_27;
    }
    *(_DWORD *)(v11 + 76) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(v11 + 72) = *(_DWORD *)(a3 + 28);
    if ((a4 & 0xFFFFFFFC) == 0x20)
      goto LABEL_13;
    v24 = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(v11 + 96) = v24;
    if (!v24)
      goto LABEL_12;
    if (8 * v24 + 44 != a4)
      goto LABEL_13;
    *(_QWORD *)(v11 + 88) = a3 + 36;
    if (*(_DWORD *)(v11 + 48) == v22)
    {
      v25 = 20 * ((unsigned __int16)v22 / 0x3E8u);
      *(_DWORD *)(v11 + 56) = v25;
      *(_DWORD *)(v11 + 60) = v25;
      v5 = smcsch1spi_GenDecInitializeLowLevelDecoder(v11);
      if (!(_DWORD)v5)
      {
        *(_QWORD *)a5 = v11;
        *(_DWORD *)(a5 + 8) = 448;
        return v5;
      }
      goto LABEL_13;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v11 + 136) + 32);
    v21 = "incompatible coded speech base: the speech base was encoded using internal resampling, but it's being decoded without it";
    goto LABEL_20;
  }
  return v5;
}

uint64_t smcsch1spi_GenDecInitializeLowLevelDecoder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int size;
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v2 = 2617270282;
  smcsch1spi_GenDecDestroyLowLevelDecoder((uint64_t *)a1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  size = opus_decoder_get_size(1);
  v5 = (_DWORD *)heap_Alloc(v3, size);
  *(_QWORD *)a1 = v5;
  if (!v5)
    goto LABEL_4;
  if (opus_decoder_init(v5, *(_DWORD *)(a1 + 44), 1u))
  {
    v2 = 2617270272;
LABEL_4:
    smcsch1spi_GenDecDestroyLowLevelDecoder((uint64_t *)a1);
    return v2;
  }
  *(_DWORD *)(a1 + 64) = 5760;
  v7 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 11520);
  *(_QWORD *)(a1 + 8) = v7;
  if (!v7)
    goto LABEL_4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 68) = 0;
  v8 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 2 * *(unsigned int *)(a1 + 60));
  result = 0;
  *(_QWORD *)(a1 + 24) = v8;
  if (!v8)
    goto LABEL_4;
  return result;
}

uint64_t *smcsch1spi_GenDecDestroyLowLevelDecoder(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  if (*result)
  {
    result = heap_Free(*(_QWORD **)(result[17] + 8), *result);
    *v1 = 0;
  }
  v2 = v1[2];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(v1[17] + 8), v2);
    v1[2] = 0;
  }
  v3 = v1[1];
  if (v3)
  {
    result = heap_Free(*(_QWORD **)(v1[17] + 8), v3);
    v1[1] = 0;
  }
  v4 = v1[3];
  if (v4)
  {
    result = heap_Free(*(_QWORD **)(v1[17] + 8), v4);
    v1[3] = 0;
  }
  return result;
}

uint64_t smcsch1spi_GenDecGetInfo(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int *v35;
  _DWORD v36[2];

  v12 = safeh_HandleCheck(a1, a2, 448, 144);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v13 = 2617270272;
  if (!a1)
    return 2617270280;
  v14 = *a3;
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(unsigned int *)(a1 + 96);
  v17 = *(_DWORD *)(v15 + 8 * v16);
  if (*a3 > v17)
  {
    *a3 = v17;
    v16 = *(unsigned int *)(a1 + 96);
    v14 = v17;
  }
  v36[0] = v14;
  v36[1] = 0;
  v18 = (int *)ssft_bsearch((uint64_t)v36, v15, v16, 8, (uint64_t (*)(uint64_t, unint64_t))smcsch1spi_CompareChunkIndexCells);
  *(_QWORD *)(a1 + 104) = v18;
  if (v18)
  {
    v25 = *v18;
    if (*a3 >= *v18 && (v26 = v18[2], *a3 < v26) && v18[1] <= v18[3])
    {
      v28 = *a3 - *v18 + *(_DWORD *)(a1 + 76);
      v29 = *a4 + v28 - 1;
      if (v29 + v25 >= v26)
      {
        v30 = v26 - v25;
        v29 = v30 - 1;
        *a4 = v30 - v28;
      }
      v31 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)(a1 + 112) = v28 / v31;
      *(_DWORD *)(a1 + 116) = v29 / v31;
      v32 = *(unsigned __int16 *)(a1 + 80);
      v33 = v28 / v31 - v32;
      if (v28 / v31 <= v32)
      {
        *(_DWORD *)(a1 + 120) = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 120) = v33;
        if (v28 / v31 != v32)
        {
          v34 = *(_DWORD *)(a1 + 76);
          do
          {
            if (v28 >= v34 + v33 * v31)
              break;
            *(_DWORD *)(a1 + 120) = --v33;
          }
          while (v33);
        }
      }
      *a6 = v18[1];
      *a7 = v18[3] - v18[1];
      *(_DWORD *)(a1 + 128) = *a4;
      *(_DWORD *)(a1 + 132) = v28;
      *(_DWORD *)(a1 + 124) = 0;
      *(_WORD *)(a1 + 82) = 0;
      if (*(_QWORD *)a1)
      {
        if (opus_decoder_ctl(*(int **)a1, 4028, v19, v20, v21, v22, v23, v24, v35))
          return 2617270272;
        else
          return 0;
      }
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 32), (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"inconsistent chunk index (sample and Byte offsets are not monotonically increasing)", v22, v23, v24, (uint64_t)v35);
    }
  }
  else
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 32), (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"requested start of speech segment (sample %d) missing from speech base", v22, v23, v24, *a3);
    return 2617270281;
  }
  return v13;
}

uint64_t smcsch1spi_CompareChunkIndexCells(unsigned int *a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;

  result = 0;
  if (a1 && a2)
  {
    v4 = *a1;
    if (v4 >= *a2)
      return v4 >= a2[2];
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t smcsch1spi_GenDecClose(uint64_t *a1, int a2)
{
  uint64_t NullHandle;
  int v5;
  uint64_t v6;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v5))
    return 0;
  v6 = safeh_HandleCheck((uint64_t)a1, a2, 448, 144);
  if ((v6 & 0x80000000) == 0)
  {
    if (a1)
    {
      smcsch1spi_GenDecDestroyLowLevelDecoder(a1);
      heap_Free(*(_QWORD **)(a1[17] + 8), (uint64_t)a1);
    }
    else
    {
      return 2617270280;
    }
  }
  return v6;
}

uint64_t smcsch1spi_GenDecProcess(uint64_t a1, int a2, char *a3, _DWORD *a4, char *a5, unsigned int *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  char *v41;
  size_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  unsigned int *v51;
  _DWORD *v52;

  v14 = safeh_HandleCheck(a1, a2, 448, 144);
  if ((v14 & 0x80000000) != 0)
    return v14;
  if (!a1)
    return 2617270280;
  v15 = *(_DWORD *)(a1 + 128);
  if (*a6 >= v15)
    v16 = v15;
  else
    v16 = *a6;
  v51 = a6;
  v52 = a4;
  if (!(_DWORD)v16)
    goto LABEL_41;
  v17 = *(unsigned __int16 *)(a1 + 82);
  if (v16 <= v17)
  {
    memcpy(a5, *(const void **)(a1 + 24), 2 * v16);
    memmove(*(void **)(a1 + 24), (const void *)(*(_QWORD *)(a1 + 24) + 2 * v16), 2 * (*(unsigned __int16 *)(a1 + 82) - v16));
    v21 = &a5[2 * v16];
    *(_WORD *)(a1 + 82) -= v16;
    *(_DWORD *)(a1 + 128) -= v16;
    goto LABEL_42;
  }
  v18 = *a4;
  if (*a4 > 1u)
  {
    v19 = *(_DWORD *)(a1 + 124);
    v20 = a3;
    v21 = a5;
    v22 = v16;
    v50 = (int)a3;
    while (1)
    {
      v23 = *(_DWORD *)(a1 + 120);
      v24 = v19 >= v23 && v19 < *(_DWORD *)(a1 + 112);
      v27 = *(unsigned __int16 *)v20;
      v25 = v20 + 2;
      v26 = v27;
      if (!v27)
        break;
      if (v26 >= 0x2D01)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
        v48 = "inconsistent packet payload size declared in frame header (%d Bytes > (expected) %d Bytes)";
        v49 = v26;
        goto LABEL_47;
      }
      v28 = v18 - 2;
      v18 = v28 - v26;
      if (v28 < v26)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 32), (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"missing required packet payload Bytes for decoding one frame (%d Bytes < (expected) %d Bytes)", v11, v12, v13, v28);
        return 2617270281;
      }
      v29 = *(_DWORD *)(a1 + 60);
      if (v19 >= v23)
      {
        v30 = v22;
        v31 = smcsch1spi_GenDecProcessOneFrameWithLowLevelDecoder(a1, v25, v26);
        v14 = v31;
        if (v24)
        {
          if ((v31 & 0x80000000) != 0)
            return v14;
          v22 = v30;
          v14 = 0;
          *(_DWORD *)(a1 + 132) -= (unsigned __int16)v29;
        }
        else
        {
          if ((v31 & 0x80000000) != 0)
            return v14;
          v32 = v21;
          v33 = v30;
          v34 = *(unsigned int *)(a1 + 132);
          if ((_DWORD)v34)
          {
            v35 = v29 - v34;
            v36 = (char *)(*(_QWORD *)(a1 + 32) + 2 * v34);
            *(_DWORD *)(a1 + 132) = 0;
            v37 = *(_DWORD *)(a1 + 128);
            if (v37 >= v35)
              LOWORD(v37) = v35;
          }
          else
          {
            if (*(_WORD *)(a1 + 82))
            {
              memcpy(v21, *(const void **)(a1 + 24), 2 * *(unsigned __int16 *)(a1 + 82));
              v38 = *(unsigned __int16 *)(a1 + 82);
              v32 = &v21[2 * v38];
              v37 = *(_DWORD *)(a1 + 128) - v38;
              *(_DWORD *)(a1 + 128) = v37;
              v33 = v30 - v38;
              *(_WORD *)(a1 + 82) = 0;
            }
            else
            {
              v37 = *(_DWORD *)(a1 + 128);
            }
            v36 = *(char **)(a1 + 32);
            if (v37 > *(_DWORD *)(a1 + 60))
              LOWORD(v37) = v29;
          }
          v39 = (unsigned __int16)v37;
          v40 = v37 - v33;
          v41 = v32;
          if ((unsigned __int16)v37 <= v33)
          {
            v44 = v33;
            memcpy(v32, v36, 2 * (unsigned __int16)v37);
            v14 = 0;
            *(_DWORD *)(a1 + 128) -= v39;
            v21 = &v41[2 * v39];
            v22 = v44 - v39;
          }
          else
          {
            v42 = 2 * v33;
            v43 = v33;
            memcpy(*(void **)(a1 + 24), &v36[v42], 2 * ((unsigned __int16)v37 - v33));
            *(_WORD *)(a1 + 82) = v40;
            memcpy(v41, v36, v42);
            v14 = 0;
            *(_DWORD *)(a1 + 128) -= v43;
            v21 = &v41[2 * v43];
            v22 = 0;
          }
        }
        LODWORD(a3) = v50;
      }
      else
      {
        *(_DWORD *)(a1 + 132) -= (unsigned __int16)v29;
      }
      v20 = &v25[v26];
      v19 = *(_DWORD *)(a1 + 124) + 1;
      *(_DWORD *)(a1 + 124) = v19;
      if (!(_DWORD)v22 || v18 <= 1)
        goto LABEL_43;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
    v48 = "null packet payload size declared in frame header";
LABEL_47:
    log_OutText(v47, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)v48, v11, v12, v13, v49);
    return 2617270272;
  }
  if (*(_WORD *)(a1 + 82))
  {
    memcpy(a5, *(const void **)(a1 + 24), 2 * v17);
    v45 = *(unsigned __int16 *)(a1 + 82);
    v21 = &a5[2 * v45];
    *(_DWORD *)(a1 + 128) -= v45;
    *(_WORD *)(a1 + 82) = 0;
  }
  else
  {
LABEL_41:
    v21 = a5;
  }
LABEL_42:
  LODWORD(v20) = (_DWORD)a3;
LABEL_43:
  *v52 = (_DWORD)v20 - (_DWORD)a3;
  *v51 = (unint64_t)(v21 - a5) >> 1;
  return v14;
}

uint64_t smcsch1spi_GenDecProcessOneFrameWithLowLevelDecoder(uint64_t a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = opus_decode(*(int **)a1, a2, a3, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 64), 0);
  if ((v4 & 0x80000000) != 0)
  {
    v8 = 2617270272;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
    v12 = opus_strerror(v4);
    log_OutText(v11, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"error during decoding: %s", v13, v14, v15, (uint64_t)v12);
  }
  else
  {
    if (v4 >= 0x1681)
    {
      v8 = 2617270272;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
      v10 = "inconsistent number of decoded samples (%d samples > (expected) %d samples)";
LABEL_8:
      log_OutText(v9, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)v10, v5, v6, v7, v4);
      return v8;
    }
    if ((_DWORD)v4 != *(_DWORD *)(a1 + 56))
    {
      v8 = 2617270272;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
      v10 = "inconsistent number of decoded samples (%d samples != (expected) %d samples)";
      goto LABEL_8;
    }
    return 0;
  }
  return v8;
}

uint64_t gsmc_sch1_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2617270273;
  result = 0;
  *a2 = &dec_I_1;
  return result;
}

uint64_t opus_decoder_get_size(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int Decoder_Size;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 - 3) < 0xFFFFFFFE)
    return 0;
  v7 = v1;
  v8 = v2;
  v6 = 0;
  Decoder_Size = silk_Get_Decoder_Size(&v6);
  result = 0;
  if (!Decoder_Size)
  {
    v6 = (v6 + 7) & 0xFFFFFFF8;
    return celt_decoder_get_size(a1) + v6 + 80;
  }
  return result;
}

uint64_t opus_decoder_init(_DWORD *a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  int size;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;

  result = 0xFFFFFFFFLL;
  if (a2 <= 15999)
  {
    if (a2 != 8000)
    {
      v7 = 12000;
LABEL_7:
      if (a2 != v7)
        return result;
    }
  }
  else if (a2 != 16000 && a2 != 48000)
  {
    v7 = 24000;
    goto LABEL_7;
  }
  if (a3 - 3 >= 0xFFFFFFFE)
  {
    v18 = 0;
    size = opus_decoder_get_size(a3);
    bzero(a1, size);
    if (silk_Get_Decoder_Size(&v18))
      return 4294967293;
    v9 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v18 + 7) & 0xFFFFFFF8;
    v10 = v9 + 80;
    *a1 = v9 + 80;
    a1[1] = 80;
    a1[11] = a3;
    a1[2] = a3;
    a1[3] = a2;
    a1[6] = a2;
    a1[4] = a3;
    if (silk_InitDecoder((uint64_t)(a1 + 20)))
      return 4294967293;
    v11 = (_DWORD *)((char *)a1 + v10);
    if (celt_decoder_init(v11, a2, a3))
    {
      return 4294967293;
    }
    else
    {
      opus_custom_decoder_ctl(v11, 10016, v12, v13, v14, v15, v16, v17, 0);
      result = 0;
      a1[14] = 0;
      a1[15] = (unsigned __int16)a2 / 0x190u;
    }
  }
  return result;
}

uint64_t opus_decode_native(int *a1, char *a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, _DWORD *a8, int a9)
{
  int v10;
  int v17;
  int v18;
  int v19;
  unint64_t samples_per_frame;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int bandwidth;
  char v36;
  int v37;
  __int16 v38[48];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a6 > 1)
    return 0xFFFFFFFFLL;
  v10 = a7;
  if (!a2 || !a3 || a6)
  {
    if ((int)a5 % (a1[3] / 400))
      return 0xFFFFFFFFLL;
  }
  if (!a2 || !a3)
  {
    LODWORD(v24) = 0;
    while (1)
    {
      v26 = opus_decode_frame(a1, 0, 0, (__int16 *)(a4 + 2 * a1[2] * (int)v24), (a5 - v24), 0, a7, (uint64_t)a8);
      if ((v26 & 0x80000000) != 0)
        return v26;
      v24 = (v26 + v24);
      if ((int)v24 >= (int)a5)
        goto LABEL_26;
    }
  }
  if (a3 < 0)
    return 0xFFFFFFFFLL;
  v37 = 0;
  v36 = 0;
  v17 = *a2;
  v18 = (char)v17;
  if ((~v17 & 0x60) != 0)
    v19 = 1000;
  else
    v19 = 1001;
  if (v18 < 0)
    v19 = 1002;
  v34 = v19;
  bandwidth = opus_packet_get_bandwidth(a2);
  samples_per_frame = opus_packet_get_samples_per_frame(a2, a1[3]);
  HIDWORD(v33) = opus_packet_get_nb_channels(a2);
  v21 = opus_packet_parse_impl(a2, a3, v10, &v36, 0, v38, &v37, a8);
  v24 = v21;
  if ((v21 & 0x80000000) == 0)
  {
    v25 = (unsigned __int8 *)&a2[v37];
    if (a6)
    {
      if ((int)a5 < (int)samples_per_frame || v18 < 0 || a1[13] == 1002)
      {
        LODWORD(v33) = a9;
        return opus_decode_native(a1, 0, 0, a4, a5, 0, 0, 0, v33);
      }
      else
      {
        if ((_DWORD)a5 != (_DWORD)samples_per_frame)
        {
          v31 = a1[17];
          LODWORD(v33) = a9;
          v32 = opus_decode_native(a1, 0, 0, a4, (a5 - samples_per_frame), 0, 0, 0, v33);
          if ((v32 & 0x80000000) != 0)
          {
            v24 = v32;
            a1[17] = v31;
            return v24;
          }
        }
        a1[15] = samples_per_frame;
        a1[12] = bandwidth;
        a1[13] = v34;
        a1[11] = HIDWORD(v33);
        v26 = opus_decode_frame(a1, v25, v38[0], (__int16 *)(a4 + 2 * a1[2] * ((int)a5 - (int)samples_per_frame)), samples_per_frame, 1, v22, v23);
        if ((v26 & 0x80000000) == 0)
        {
          a1[17] = a5;
          return a5;
        }
      }
    }
    else
    {
      if ((int)v21 * (int)samples_per_frame > (int)a5)
        return 4294967294;
      a1[15] = samples_per_frame;
      a1[12] = bandwidth;
      a1[13] = v34;
      a1[11] = HIDWORD(v33);
      if (!(_DWORD)v21)
      {
LABEL_26:
        a1[17] = v24;
        return v24;
      }
      v28 = v21;
      v29 = v38;
      LODWORD(v24) = 0;
      while (1)
      {
        v26 = opus_decode_frame(a1, v25, *v29, (__int16 *)(a4 + 2 * a1[2] * (int)v24), (a5 - v24), 0, v22, v23);
        if ((v26 & 0x80000000) != 0)
          break;
        v30 = *v29++;
        v25 += v30;
        v24 = (v26 + v24);
        if (!--v28)
          goto LABEL_26;
      }
    }
    return v26;
  }
  return v24;
}

uint64_t opus_decode_frame(int *a1, unsigned __int8 *a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 *v12;
  signed int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  _BOOL4 v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  int32x2_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  char *v89;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  uint64_t v109;
  __int16 *v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 *v119;
  char v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  char *v148;
  uint64_t v149;
  __int16 *v150;
  _WORD *v151;
  __int16 v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int *v165;
  uint64_t v166;
  signed int v167;
  _BYTE v168[12];
  int v169;
  int v170;
  char *v171;
  int v172;
  int v173;
  _BOOL4 v174;
  unsigned __int8 *v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v181 = 0;
  v8 = a1[3];
  v9 = (int)v8 / 50;
  v10 = ((int)v8 / 50) >> 3;
  if (v10 > (int)a5)
    return 4294967294;
  v12 = a4;
  v13 = a3;
  v14 = a1;
  v15 = *a1;
  v16 = a1[1];
  v17 = v9 >> 1;
  v18 = v9 >> 2;
  v186 = 0;
  v184 = 0u;
  v185 = 0u;
  v183 = 0u;
  v182 = 0;
  v179 = v8;
  v19 = 3 * ((int)v8 / 25);
  if (v19 >= (int)a5)
    v11 = a5;
  else
    v11 = v19;
  if ((int)a3 > 1)
  {
    if (!a2)
      goto LABEL_16;
    v174 = a6;
    v21 = v15;
    v177 = (int)v8 / 50;
    v178 = v9 >> 2;
    v22 = a1[15];
    v23 = a1[13];
    v175 = a2;
    a1 = (int *)ec_dec_init((uint64_t *)&v183, a2, a3);
    v24 = v14[14];
    if (v24 < 1)
    {
      v172 = 0;
      v171 = 0;
      v30 = 1;
      v15 = v21;
      v25 = 0;
      goto LABEL_46;
    }
    if (v23 != 1002 || v24 == 1002)
    {
      v15 = v21;
      if (v23 == 1002 || v24 != 1002)
      {
        v25 = 0;
        v172 = 0;
        v171 = 0;
        goto LABEL_45;
      }
      v171 = 0;
      v172 = v14[2] * v178;
    }
    else
    {
      if (v14[16])
      {
        v15 = v21;
        v25 = 0;
        v172 = 0;
        v171 = 0;
        v23 = 1002;
LABEL_45:
        v30 = 1;
        goto LABEL_46;
      }
      v31 = v178;
      MEMORY[0x1E0C80A78](a1);
      v176 = v16;
      v33 = (char *)&v165 - v32;
      bzero((char *)&v165 - v32, v34);
      if (v31 >= v22)
        v35 = v22;
      else
        v35 = v31;
      v171 = v33;
      v36 = v33;
      v16 = v176;
      a1 = (int *)opus_decode_frame(v14, 0, 0, v36, v35, 0);
      v15 = v21;
      v172 = 0;
      v23 = 1002;
    }
    v25 = 1;
    goto LABEL_45;
  }
  v20 = a1[15];
  if ((int)v11 >= v20)
    v11 = v20;
  else
    v11 = v11;
LABEL_16:
  v23 = a1[14];
  if (!v23)
  {
    if (a1[2] * (int)v11 >= 1)
      bzero(a4, 2 * (a1[2] * v11));
    return v11;
  }
  if ((int)v11 <= v9)
  {
    v174 = a6;
    if ((int)v11 >= v9)
    {
      v178 = v9 >> 2;
      v171 = 0;
      v175 = 0;
      v30 = 0;
      v172 = 0;
      v25 = 0;
LABEL_48:
      v169 = v10;
      if (v23 == 1002)
      {
        v177 = v9;
        v170 = 0;
        v37 = 0;
        LODWORD(v176) = 0;
        *(_DWORD *)&v168[8] = 0;
        *(_QWORD *)v168 = !v174;
        v38 = &v187;
        v173 = 1002;
        goto LABEL_104;
      }
      LODWORD(v176) = v30;
      HIDWORD(v165) = v25;
      v166 = v15;
      v18 = v178;
LABEL_51:
      v177 = v9;
      v178 = v18;
      v39 = (uint64_t)v14 + v16;
      MEMORY[0x1E0C80A78](a1);
      v38 = (char *)&v165 - v40;
      bzero((char *)&v165 - v40, v41);
      if (v14[14] == 1002)
        silk_InitDecoder((uint64_t)v14 + v16);
      v167 = v13;
      v42 = 1000 * (int)v11 / v14[3];
      if (v42 <= 10)
        v42 = 10;
      v14[8] = v42;
      if ((_DWORD)v176)
      {
        v14[5] = v14[11];
        if (v23 == 1000 && (v43 = v14[12] - 1101, v43 <= 2))
          v44 = 4000 * v43 + 8000;
        else
          v44 = 16000;
        v14[7] = v44;
      }
      v173 = v23;
      v45 = 0;
      if (v175)
        v46 = 2 * v174;
      else
        v46 = 1;
      v47 = v38;
      do
      {
        if (silk_Decode(v39, v14 + 4, v46, v45 == 0, (uint64_t)&v183, v47, &v182))
        {
          if (!v46)
            return 4294967293;
          v182 = v11;
          v48 = v14[2] * v11;
          if (v48 >= 1)
            bzero(v47, 2 * (v14[2] * v11));
          v49 = v11;
        }
        else
        {
          v49 = v182;
          v48 = v14[2] * v182;
        }
        v47 += 2 * v48;
        v45 += v49;
      }
      while (v45 < (int)v11);
      v50 = v176;
      if (v174)
        v50 = 0;
      if (v50 != 1)
      {
        *(_DWORD *)v168 = !v174;
        LODWORD(v176) = 0;
        *(_QWORD *)&v168[4] = 0;
        v37 = 17;
        v170 = 1;
        v13 = v167;
        v15 = v166;
        goto LABEL_103;
      }
      v51 = __clz(v185);
      if (v14[13] == 1001)
        v52 = 20;
      else
        v52 = 0;
      v13 = v167;
      v15 = v166;
      if ((int)(DWORD2(v184) + v51 + v52 - 15) > 8 * v167)
      {
        LODWORD(v176) = 0;
        *(_QWORD *)&v168[4] = 0;
        v37 = 17;
        v170 = 1;
        *(_DWORD *)v168 = 1;
LABEL_103:
        v25 = HIDWORD(v165);
LABEL_104:
        v65 = (int32x2_t *)((char *)v14 + v15);
        v66 = v14[12] - 1101;
        if (v66 > 3)
          v67 = 21;
        else
          v67 = dword_1DECD3940[v66];
        opus_custom_decoder_ctl((int *)((char *)v14 + v15), 10012, a3, (uint64_t)a4, a5, a6, a7, a8, (int *)v67);
        v74 = opus_custom_decoder_ctl(v65, 10008, v68, v69, v70, v71, v72, v73, (int *)v14[11]);
        v75 = v176;
        if ((_DWORD)v176)
          v25 = 0;
        MEMORY[0x1E0C80A78](v74);
        v77 = (char *)&v165 - v76;
        bzero((char *)&v165 - v76, v78);
        v172 = v25;
        if ((v170 & v25) == 1)
        {
          if (v178 >= (int)v11)
            v86 = v11;
          else
            v86 = v178;
          opus_decode_frame(v14, 0, 0, v77, v86, 0);
          v171 = v77;
        }
        else if (v75)
        {
          v87 = v178;
          MEMORY[0x1E0C80A78](v79);
          v89 = (char *)&v165 - v88;
          bzero((char *)&v165 - v88, v90);
          if (*(_DWORD *)&v168[8])
          {
            opus_custom_decoder_ctl(v65, 10010, v80, v81, v82, v83, v84, v85, 0);
            celt_decode_with_ec(v65, &v175[v13], *(unsigned int *)&v168[4], v89, v87, 0);
            opus_custom_decoder_ctl(v65, 4031, v91, v92, v93, v94, v95, v96, &v181);
            v97 = 1;
            v174 = 1;
          }
          else
          {
            v97 = 0;
            v174 = 0;
          }
LABEL_118:
          opus_custom_decoder_ctl(v65, 10010, v80, v81, v82, v83, v84, v85, (int *)v37);
          if (v173 == 1000)
          {
            LOWORD(v180) = -1;
            if (v14[2] * (int)v11 >= 1)
              bzero(v12, 2 * (v14[2] * v11));
            if (v14[14] == 1001 && (!v97 || !v14[16]))
            {
              opus_custom_decoder_ctl(v65, 10010, v98, v99, v100, v101, v102, v103, 0);
              celt_decode_with_ec(v65, (unsigned __int8 *)&v180, 2u, v12, v169, 0);
            }
            v104 = v97;
            v105 = 0;
          }
          else
          {
            v104 = v97;
            if (v177 >= (int)v11)
              v106 = v11;
            else
              v106 = v177;
            v107 = v14[14];
            if (v173 != v107 && v107 >= 1 && !v14[16])
              opus_custom_decoder_ctl(v65, 4028, v98, v99, v100, v101, v102, v103, v165);
            if (*(_DWORD *)v168)
              v108 = v175;
            else
              v108 = 0;
            v105 = celt_decode_with_ec(v65, v108, v13, v12, v106, (uint64_t *)&v183);
            if (!v170)
              goto LABEL_144;
          }
          v109 = (v14[2] * v11);
          if ((int)v109 >= 1)
          {
            v110 = v12;
            do
            {
              v111 = *(__int16 *)v38;
              v38 += 2;
              v112 = *v110 + v111;
              if (v112 >= 0x7FFF)
                v112 = 0x7FFF;
              if (v112 <= -32768)
                LOWORD(v112) = 0x8000;
              *v110++ = v112;
              --v109;
            }
            while (v109);
          }
LABEL_144:
          v180 = 0;
          opus_custom_decoder_ctl(v65, 10015, v98, v99, v100, v101, v102, v103, (int *)&v180);
          v119 = *(__int16 **)(v180 + 64);
          v120 = v174;
          if (!(_DWORD)v176)
            v120 = 1;
          v121 = v169;
          if ((v120 & 1) == 0)
          {
            opus_custom_decoder_ctl(v65, 4028, v113, v114, v115, v116, v117, v118, v165);
            opus_custom_decoder_ctl(v65, 10010, v122, v123, v124, v125, v126, v127, 0);
            celt_decode_with_ec(v65, &v175[v13], *(unsigned int *)&v168[4], v89, v178, 0);
            opus_custom_decoder_ctl(v65, 4031, v128, v129, v130, v131, v132, v133, &v181);
            smooth_fade((uint64_t)&v12[v14[2] * ((int)v11 - v121)], (uint64_t)&v89[2 * v14[2] * v121], (uint64_t)&v12[v14[2] * ((int)v11 - v121)], v121, v14[2], v119, v14[3]);
          }
          v134 = v178;
          if (v104)
          {
            v135 = v14[2];
            if ((int)v135 >= 1)
            {
              v136 = 0;
              if (v121 <= 1)
                v137 = 1;
              else
                v137 = v121;
              v138 = v12;
              v139 = v89;
              do
              {
                if ((int)v179 >= 400)
                {
                  v140 = 0;
                  v141 = v137;
                  do
                  {
                    v138[v140] = *(_WORD *)&v139[v140 * 2];
                    v140 += v135;
                    --v141;
                  }
                  while (v141);
                }
                ++v136;
                v139 += 2;
                ++v138;
              }
              while (v136 != v135);
            }
            smooth_fade((uint64_t)&v89[2 * (int)v135 * v121], (uint64_t)&v12[(int)v135 * v121], (uint64_t)&v12[(int)v135 * v121], v121, v135, v119, v14[3]);
          }
          if (v172)
          {
            v142 = v14[2];
            if ((int)v11 >= v134)
            {
              v147 = v142 * v121;
              v148 = v171;
              if (v142 * v121 >= 1)
              {
                v149 = (v142 * v121);
                v150 = (__int16 *)v171;
                v151 = v12;
                do
                {
                  v152 = *v150++;
                  *v151++ = v152;
                  --v149;
                }
                while (v149);
              }
              v144 = (uint64_t)&v148[2 * v147];
              v143 = v14[3];
              v145 = (uint64_t)&v12[v147];
              v146 = v145;
            }
            else
            {
              v143 = v14[3];
              v144 = (uint64_t)v171;
              v145 = (uint64_t)v12;
              v146 = (uint64_t)v12;
            }
            smooth_fade(v144, v145, v146, v121, v142, v119, v143);
          }
          v153 = v14[10];
          v154 = v173;
          if (v153)
          {
            v155 = 21771 * (__int16)v153 + 0x4000;
            if ((__int16)(v155 >> 15) <= 15359)
            {
              v157 = v155 >> 15;
              if ((__int16)v157 >= -15360)
              {
                v158 = ((((((326528 * (v157 & 0x3FF)) >> 16) + 14819) * 32 * (v157 & 0x3FF) + 1494482944) >> 16)
                      * 32
                      * (v157 & 0x3FF)
                      + 1073676288) >> 16;
                v156 = (__int16)v157 > -2049
                     ? v158 << (((__int16)v157 >> 10) + 2)
                     : v158 >> (-2 - ((__int16)v157 >> 10));
              }
              else
              {
                v156 = 0;
              }
            }
            else
            {
              v156 = 2130706432;
            }
            v159 = (v14[2] * v11);
            if ((int)v159 >= 1)
            {
              do
              {
                v160 = (v156 >> 16) * *v12 + (((unsigned __int16)v156 * *v12 + 0x8000) >> 16);
                if (v160 <= -32767)
                  v160 = -32767;
                if (v160 >= 0x7FFF)
                  LOWORD(v160) = 0x7FFF;
                *v12++ = v160;
                --v159;
              }
              while (v159);
            }
          }
          v161 = v181 ^ v185;
          if (v13 < 2)
            v161 = 0;
          v162 = v176;
          v14[18] = v161;
          v14[14] = v154;
          v163 = !v174;
          if (!v162)
            v163 = 0;
          v14[16] = v163;
          if (v105 >= 0)
            return v11;
          else
            return v105;
        }
        v97 = 0;
        v174 = *(_DWORD *)&v168[8] != 0;
        v89 = &v187;
        goto LABEL_118;
      }
      v53 = v166;
      if (v173 == 1001)
      {
        v54 = ec_dec_bit_logp((uint64_t)&v183, 12);
        if (!v54)
        {
          LODWORD(v176) = 0;
          *(_QWORD *)&v168[4] = 0;
          v37 = 17;
          v173 = 1001;
LABEL_102:
          v170 = 1;
          *(_DWORD *)v168 = 1;
          v15 = v53;
          goto LABEL_103;
        }
        v55 = v54;
        *(_DWORD *)&v168[8] = ec_dec_bit_logp((uint64_t)&v183, 1);
        v56 = ec_dec_uint((uint64_t)&v183, 0x100u) + 2;
        v57 = DWORD2(v184);
        v58 = __clz(v185);
      }
      else
      {
        v55 = 1;
        *(_DWORD *)&v168[8] = ec_dec_bit_logp((uint64_t)&v183, 1);
        v57 = DWORD2(v184);
        v58 = __clz(v185);
        v56 = v13 - ((int)(DWORD2(v184) + v58 - 25) >> 3);
      }
      v60 = 8 * (v13 - v56);
      v61 = v57 + v58 - 32;
      v62 = v60 < v61;
      if (v60 >= v61)
        v13 -= v56;
      else
        v13 = 0;
      if (v60 >= v61)
        v63 = v55;
      else
        v63 = 0;
      LODWORD(v176) = v63;
      if (v62)
        v64 = 0;
      else
        v64 = v56;
      *(_DWORD *)&v168[4] = v64;
      DWORD2(v183) -= v64;
      v37 = 17;
      goto LABEL_102;
    }
    if ((int)v11 <= v17)
    {
      if (v23 == 1000)
      {
        v166 = v15;
        v169 = ((int)v8 / 50) >> 3;
        HIDWORD(v165) = 0;
        v172 = 0;
        LODWORD(v176) = 0;
        v175 = 0;
        v171 = 0;
        goto LABEL_51;
      }
      v177 = (int)v8 / 50;
      v178 = v9 >> 2;
      v25 = 0;
      v172 = 0;
      v30 = 0;
      v175 = 0;
      v171 = 0;
      v59 = (int)v11 >= v17 || (int)v11 <= v18;
      if (v59)
        v22 = v11;
      else
        v22 = v9 >> 2;
    }
    else
    {
      v177 = (int)v8 / 50;
      v178 = v9 >> 2;
      v25 = 0;
      v172 = 0;
      v30 = 0;
      v175 = 0;
      v171 = 0;
      v22 = v9 >> 1;
    }
LABEL_46:
    v59 = v22 <= (int)v11;
    LODWORD(v11) = v22;
    v9 = v177;
    if (!v59)
      return 0xFFFFFFFFLL;
    goto LABEL_48;
  }
  v26 = v11;
  while (1)
  {
    v27 = v26 >= v9 ? v9 : v26;
    v28 = opus_decode_frame(v14, 0, 0, v12, v27, 0);
    if ((v28 & 0x80000000) != 0)
      break;
    v12 += v14[2] * (int)v28;
    v29 = __OFSUB__(v26, (_DWORD)v28);
    v26 -= v28;
    if ((v26 < 0) ^ v29 | (v26 == 0))
      return v11;
  }
  return v28;
}

uint64_t opus_decode(int *a1, char *a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if ((int)a5 < 1)
    return 0xFFFFFFFFLL;
  else
    return opus_decode_native(a1, a2, a3, a4, a5, a6, 0, 0, 0);
}

uint64_t opus_decoder_ctl(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int *v18;

  v10 = *a1;
  v11 = a1[1];
  result = 4294967291;
  v13 = (int *)((char *)a1 + v10);
  switch(a2)
  {
    case 4028:
      v14 = (uint64_t)a1 + v11;
      *(_OWORD *)(a1 + 15) = 0u;
      *(_OWORD *)(a1 + 11) = 0u;
      opus_custom_decoder_ctl(v13, 4028, a3, a4, a5, a6, a7, a8, v18);
      silk_InitDecoder(v14);
      result = 0;
      v15 = a1[3];
      a1[11] = a1[2];
      a1[15] = v15 / 400;
      return result;
    case 4029:
      v16 = a9;
      if (!a9)
        return 0xFFFFFFFFLL;
      result = 0;
      v17 = a1[3];
      goto LABEL_20;
    case 4030:
    case 4032:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
      return result;
    case 4031:
      v16 = a9;
      if (!a9)
        return 0xFFFFFFFFLL;
      result = 0;
      v17 = a1[18];
      goto LABEL_20;
    case 4033:
      if (!a9)
        return 0xFFFFFFFFLL;
      if (a1[14] == 1002)
      {
        opus_custom_decoder_ctl(v13, 4033, a3, a4, a5, a6, a7, a8, a9);
        return 0;
      }
      else
      {
        result = 0;
        *a9 = a1[9];
      }
      return result;
    case 4034:
      if ((_DWORD)a9 != (__int16)a9)
        return 0xFFFFFFFFLL;
      result = 0;
      a1[10] = (int)a9;
      return result;
    case 4039:
      v16 = a9;
      if (!a9)
        return 0xFFFFFFFFLL;
      result = 0;
      v17 = a1[17];
      goto LABEL_20;
    default:
      if (a2 == 4045)
      {
        v16 = a9;
        if (a9)
        {
          result = 0;
          v17 = a1[10];
          goto LABEL_20;
        }
      }
      else
      {
        if (a2 != 4009)
          return result;
        v16 = a9;
        if (a9)
        {
          result = 0;
          v17 = a1[12];
LABEL_20:
          *v16 = v17;
          return result;
        }
      }
      return 0xFFFFFFFFLL;
  }
}

uint64_t smooth_fade(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, __int16 *a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int v11;

  if (a5 >= 1)
  {
    v7 = 0;
    do
    {
      if (a4 >= 1)
      {
        v8 = 0;
        v9 = a4;
        v10 = a6;
        do
        {
          v11 = *v10 * *v10;
          *(_WORD *)(a3 + v8) = ((__int16)(v11 >> 15) * *(__int16 *)(a2 + v8)
                                             + ((int)((2 * v11) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                             * *(__int16 *)(result + v8)) >> 15;
          v8 += 2 * a5;
          v10 += 48000 / a7;
          --v9;
        }
        while (v9);
      }
      ++v7;
      a2 += 2;
      result += 2;
      a3 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t opus_packet_parse_impl(char *a1, int a2, int a3, _BYTE *a4, char **a5, __int16 *a6, _DWORD *a7, _DWORD *a8)
{
  __int16 *v10;
  int samples_per_frame;
  char v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t result;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _WORD *v49;

  if (!a6)
    return 0xFFFFFFFFLL;
  v10 = a6;
  samples_per_frame = opus_packet_get_samples_per_frame(a1, 48000);
  v18 = a1 + 1;
  v17 = *a1;
  v19 = a2 - 1;
  v20 = *a1 & 3;
  if ((*a1 & 3) == 0)
  {
    v22 = 0;
    v21 = 1;
    v23 = a2 - 1;
    goto LABEL_9;
  }
  if (v20 == 2)
  {
    if (a2 >= 2)
    {
      v28 = *v18;
      if (v28 < 0xFC)
      {
        v29 = 1;
LABEL_63:
        *v10 = v28;
        v19 -= v29;
        v23 = v19 - v28;
        if (v19 < (int)v28)
          return 4294967292;
        v22 = 0;
        v20 = 0;
        v21 = 2;
        v18 += v29;
        goto LABEL_9;
      }
      if (a2 >= 3)
      {
        v28 += 4 * a1[2];
        v29 = 2;
        goto LABEL_63;
      }
    }
    *v10 = -1;
    return 4294967292;
  }
  if (v20 == 1)
  {
    if (a3)
    {
      v20 = 0;
      v21 = 2;
      v22 = 1;
      v23 = a2 - 1;
      if (v23 < 1)
        goto LABEL_30;
LABEL_10:
      v26 = *v18;
      if (v26 < 0xFC)
      {
        v27 = 1;
        goto LABEL_41;
      }
      if (v23 >= 2)
      {
        LOWORD(v26) = v26 + 4 * v18[1];
        v27 = 2;
      }
      else
      {
LABEL_30:
        v27 = -1;
        LOWORD(v26) = -1;
      }
LABEL_41:
      v10[v21 - 1] = v26;
      v36 = (v21 - 1);
      v37 = v10[v36];
      result = 4294967292;
      if (v37 < 0)
        return result;
      v38 = v23 - v27;
      if (v38 < v37)
        return result;
      v18 += v27;
      if (v22)
      {
        if ((int)v21 * v37 > v38)
          return result;
        if ((int)v21 >= 2)
        {
          v39 = (v21 - 1);
          v40 = v10;
          do
          {
            *v40++ = v10[v36];
            --v39;
          }
          while (v39);
        }
      }
      else if (v27 + v37 > v19)
      {
        return result;
      }
      goto LABEL_50;
    }
    if ((v19 & 1) == 0)
    {
      v20 = 0;
      if (v19 >= 0)
        v35 = a2 - 1;
      else
        v35 = a2;
      v25 = v35 >> 1;
      *v10 = v35 >> 1;
      v21 = 2;
      goto LABEL_36;
    }
    return 4294967292;
  }
  v23 = a2 - 2;
  if (a2 < 2)
    return 4294967292;
  v30 = samples_per_frame;
  v31 = *v18;
  result = 4294967292;
  v21 = *v18 & 0x3F;
  if ((*v18 & 0x3F) == 0 || (int)v21 * v30 > 5760)
    return result;
  v18 = a1 + 2;
  v20 = 0;
  if ((v31 & 0x40) != 0)
  {
    while (v23 >= 1)
    {
      v33 = *v18++;
      v32 = v33;
      if (v33 >= 0xFE)
        v34 = 254;
      else
        v34 = v32;
      v23 += ~v34;
      v20 += v34;
      if (v32 != 255)
      {
        if (v23 < 0)
          return 4294967292;
        goto LABEL_26;
      }
    }
    return 4294967292;
  }
LABEL_26:
  if (v31 < 0)
  {
    if (v21 < 2)
    {
      v22 = 0;
      v19 = v23;
    }
    else
    {
      v44 = (v21 - 1);
      v45 = v10;
      v19 = v23;
      do
      {
        if (v19 < 1)
        {
LABEL_84:
          *v45 = -1;
          return 4294967292;
        }
        v46 = *v18;
        if (v46 >= 0xFC)
        {
          if (v19 < 2)
            goto LABEL_84;
          v46 += 4 * v18[1];
          v47 = 2;
        }
        else
        {
          v47 = 1;
        }
        *v45 = v46;
        v19 -= v47;
        if (v19 < (int)v46)
          return 4294967292;
        v18 += v47;
        v23 = v23 - v47 - v46;
        ++v45;
        --v44;
      }
      while (v44);
      if (v23 < 0)
        return 4294967292;
      v22 = 0;
    }
  }
  else
  {
    if (a3)
    {
      v22 = 1;
      goto LABEL_10;
    }
    v25 = v23 / v21;
    if (v23 / v21 * (_DWORD)v21 != v23)
      return 4294967292;
    if (v21 < 2)
      goto LABEL_36;
    v48 = (v21 - 1);
    v49 = v10;
    v22 = 1;
    do
    {
      *v49++ = v25;
      --v48;
    }
    while (v48);
    v19 = v23;
    v23 /= v21;
  }
LABEL_9:
  v25 = v23;
  v23 = v19;
  v19 = v25;
  if (a3)
    goto LABEL_10;
LABEL_36:
  if (v25 > 1275)
    return 4294967292;
  v10[(v21 - 1)] = v25;
LABEL_50:
  if (a7)
    *a7 = (_DWORD)v18 - (_DWORD)a1;
  if ((_DWORD)v21)
  {
    v41 = v21;
    v42 = a5;
    do
    {
      if (a5)
        *v42 = v18;
      v43 = *v10++;
      v18 += v43;
      ++v42;
      --v41;
    }
    while (v41);
  }
  if (a8)
    *a8 = v20 + (_DWORD)v18 - (_DWORD)a1;
  if (a4)
    *a4 = v17;
  return v21;
}

unint64_t opus_packet_get_samples_per_frame(_BYTE *a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v2 = *a1;
  if ((char)*a1 < 0)
  {
    v8 = 1374389535 * (a2 << ((*a1 >> 3) & 3));
    return (v8 >> 39) + ((unint64_t)v8 >> 63);
  }
  else
  {
    v3 = 1374389535 * (a2 << ((*a1 >> 3) & 3));
    v4 = (v3 >> 37) + ((unint64_t)v3 >> 63);
    if (((v2 >> 3) & 3) == 3)
      v5 = 60 * a2 / 1000;
    else
      v5 = v4;
    v6 = a2 / 50;
    if ((v2 & 8) == 0)
      v6 = a2 / 100;
    if ((~v2 & 0x60) != 0)
      return v5;
    else
      return v6;
  }
}

uint64_t opus_packet_get_bandwidth(char *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  unsigned int v6;

  v1 = *a1;
  if ((v1 & 0x10) != 0)
    v2 = 1105;
  else
    v2 = 1104;
  if ((~v1 & 0x60) != 0)
    v3 = ((v1 >> 5) & 3) + 1101;
  else
    v3 = v2;
  v5 = (v1 >> 5) & 3;
  v4 = v5 == 0;
  v6 = v5 + 1102;
  if (v4)
    v6 = 1101;
  if (*a1 < 0)
    return v6;
  else
    return v3;
}

uint64_t opus_packet_get_nb_channels(_BYTE *a1)
{
  if ((*a1 & 4) != 0)
    return 2;
  else
    return 1;
}

int *opus_ifft(int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  __int16 *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  __int16 *v45;
  __int16 *v46;
  int *v47;
  int v48;
  int v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  __int16 *v83;
  __int16 *v84;
  __int16 *v85;
  int v86;
  int v87;
  _DWORD *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  _DWORD *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  _DWORD *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int16 *v125;
  uint64_t v126;
  int v127;
  __int16 *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  __int16 *v140;
  int v141;
  int v142;
  int v143;
  int *v144;
  int *v145;
  int *v146;
  _DWORD *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int *v193;
  int v194;
  int *v195;
  uint64_t v196;
  int v197;
  __int16 *v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  _DWORD *v218;
  int *v219;
  __int16 *v220;
  _DWORD v221[8];
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v3 = result[1];
  if (*result >= 1)
  {
    v4 = 0;
    do
    {
      *(_QWORD *)(a3 + 8 * *(__int16 *)(*((_QWORD *)result + 5) + 2 * v4)) = *(_QWORD *)(a2 + 8 * v4);
      ++v4;
    }
    while (v4 < *result);
  }
  v194 = v3 & ~(v3 >> 31);
  v5 = 1;
  v221[0] = 1;
  v6 = (unsigned __int16 *)result + 5;
  v7 = -1;
  v8 = 1;
  do
  {
    v8 *= (__int16)*(v6 - 1);
    v221[v5] = v8;
    v9 = *v6;
    v6 += 2;
    ++v5;
    v7 += 2;
  }
  while (v9 != 1);
  v197 = *((__int16 *)result + v7 + 4);
  v193 = (int *)(a3 + 4);
  v10 = v5 - 2;
  v195 = result;
  do
  {
    v11 = v197;
    v196 = v10;
    if (v10)
    {
      v12 = v10;
      v197 = SHIWORD(result[(int)v10 + 1]);
      v13 = v10;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v197 = 1;
    }
    v203 = v11;
    switch(LOWORD(result[v12 + 2]))
    {
      case 2:
        v14 = v221[v13];
        if ((int)v14 >= 1)
        {
          v15 = 0;
          v16 = *((_QWORD *)v195 + 6) + 2;
          v17 = 2 * v11;
          v18 = v193;
          do
          {
            if (v11 >= 1)
            {
              v19 = (__int16 *)v16;
              v20 = v18;
              v21 = v11;
              do
              {
                v22 = &v20[v17];
                v23 = *(v19 - 1);
                v24 = v20[v17 - 1] >> 16;
                v25 = (unsigned __int16)v20[v17 - 1];
                v26 = *v19;
                v27 = v20[2 * v11] >> 16;
                v28 = (unsigned __int16)v20[2 * v11];
                v29 = ((v28 * v26) >> 15) + ((v25 * v23) >> 15) + 2 * (v24 * v23 + v27 * v26);
                v30 = ((v28 * v23) >> 15) - ((v25 * v26) >> 15) + 2 * (v27 * v23 - v24 * v26);
                v31 = *(v20 - 1);
                *(v22 - 1) = v31 - v29;
                v32 = *v20;
                *v22 = *v20 - v30;
                *(v20 - 1) = v29 + v31;
                *v20 = v30 + v32;
                v20 += 2;
                v19 += 2 * ((_DWORD)v14 << v194);
                --v21;
              }
              while (v21);
            }
            ++v15;
            v18 += 2 * v197;
          }
          while (v15 != v14);
        }
        break;
      case 3:
        v33 = v221[v13];
        if ((int)v33 >= 1)
        {
          v34 = 0;
          v35 = (int)((_DWORD)v33 << v194);
          v36 = *((_QWORD *)v195 + 6);
          v37 = (__int16)-*(_WORD *)(v36 + 4 * (int)v35 * (uint64_t)v11 + 2);
          v38 = (-65536 * *(unsigned __int16 *)(v36 + 4 * (int)v35 * (uint64_t)v11 + 2)) >> 15;
          v39 = 2 * v11;
          v40 = (__int16 *)(v36 + 2);
          v41 = 8 * v35;
          v42 = 4 * v11;
          v43 = 4 * v35;
          v44 = v193;
          do
          {
            v45 = v40;
            v46 = v40;
            v47 = v44;
            v48 = v11;
            do
            {
              v49 = *(v45 - 1);
              v50 = &v47[v39];
              v51 = v47[v39 - 1] >> 16;
              v52 = (unsigned __int16)v47[v39 - 1];
              v53 = *v45;
              v54 = v47[2 * v11] >> 16;
              v55 = (unsigned __int16)v47[2 * v11];
              v56 = ((v55 * v53) >> 15) + ((v52 * v49) >> 15) + 2 * (v51 * v49 + v54 * v53);
              v57 = ((v55 * v49) >> 15) - ((v52 * v53) >> 15) + 2 * (v54 * v49 - v51 * v53);
              v58 = *(v46 - 1);
              v59 = &v47[v42];
              v60 = v47[v42 - 1] >> 16;
              v61 = (unsigned __int16)v47[v42 - 1];
              v62 = *v46;
              v63 = v47[4 * v11] >> 16;
              v64 = (unsigned __int16)v47[4 * v11];
              v65 = ((v64 * v62) >> 15) + ((v61 * v58) >> 15) + 2 * (v60 * v58 + v63 * v62);
              v66 = ((v64 * v58) >> 15) - ((v61 * v62) >> 15) + 2 * (v63 * v58 - v60 * v62);
              v67 = v66 + v57;
              v68 = v57 - v66;
              *(v50 - 1) = *(v47 - 1) - ((v65 + v56) >> 1);
              *v50 = *v47 - (v67 >> 1);
              v69 = ((v56 - v65) >> 16) * v38 + (((unsigned __int16)(v56 - v65) * v37) >> 15);
              v70 = (v68 >> 16) * v38 + (((unsigned __int16)v68 * v37) >> 15);
              *(v47 - 1) += v65 + v56;
              *v47 += v67;
              v47 += 2;
              *(v59 - 1) = v70 + *(v50 - 1);
              *v59 = *v50 - v69;
              v71 = *v50 + v69;
              *(v50 - 1) -= v70;
              *v50 = v71;
              v46 = (__int16 *)((char *)v46 + v41);
              v45 = (__int16 *)((char *)v45 + v43);
              --v48;
            }
            while (v48);
            ++v34;
            v44 += 2 * v197;
          }
          while (v34 != v33);
        }
        break;
      case 4:
        v72 = v221[v13];
        if ((int)v72 >= 1)
        {
          v73 = 0;
          v74 = (int)((_DWORD)v72 << v194);
          v75 = *((_QWORD *)v195 + 6) + 2;
          v76 = 12 * v74;
          v77 = 8 * v74;
          v78 = 6 * v11;
          v79 = 4 * v74;
          v80 = 4 * v11;
          v81 = 2 * v11;
          do
          {
            if (v11 >= 1)
            {
              v82 = (_DWORD *)(a3 + 8 * v73 * v197);
              v83 = (__int16 *)v75;
              v84 = (__int16 *)v75;
              v85 = (__int16 *)v75;
              v86 = v203;
              do
              {
                v87 = *(v83 - 1);
                v88 = &v82[v81];
                v89 = (int)v82[v81] >> 16;
                v90 = (unsigned __int16)v82[v81];
                v91 = *v83;
                v92 = (int)v82[v81 + 1] >> 16;
                v93 = (unsigned __int16)v82[v81 + 1];
                v94 = ((v93 * v91) >> 15) + ((v90 * v87) >> 15) + 2 * (v89 * v87 + v92 * v91);
                v95 = ((v93 * v87) >> 15) - ((v90 * v91) >> 15) + 2 * (v92 * v87 - v89 * v91);
                v96 = *(v84 - 1);
                v97 = &v82[v80];
                v98 = (int)v82[v80] >> 16;
                v99 = (unsigned __int16)v82[v80];
                v100 = *v84;
                v101 = (int)v82[v80 + 1] >> 16;
                v102 = (unsigned __int16)v82[v80 + 1];
                v103 = ((v102 * v100) >> 15) + ((v99 * v96) >> 15) + 2 * (v98 * v96 + v101 * v100);
                v104 = ((v102 * v96) >> 15) - ((v99 * v100) >> 15) + 2 * (v101 * v96 - v98 * v100);
                v105 = *(v85 - 1);
                v106 = &v82[v78];
                v107 = (int)v82[v78] >> 16;
                v108 = (unsigned __int16)v82[v78];
                v109 = *v85;
                v110 = (int)v82[v78 + 1] >> 16;
                v111 = (unsigned __int16)v82[v78 + 1];
                v112 = ((v111 * v109) >> 15) + ((v108 * v105) >> 15) + 2 * (v107 * v105 + v110 * v109);
                v113 = ((v111 * v105) >> 15) - ((v108 * v109) >> 15) + 2 * (v110 * v105 - v107 * v109);
                v114 = v82[1];
                v115 = *v82 - v103;
                v116 = v114 - v104;
                v117 = *v82 + v103;
                v118 = v114 + v104;
                v119 = v112 + v94;
                v120 = v94 - v112;
                *v97 = v117 - v119;
                v97[1] = v118 - (v113 + v95);
                *v82 = v119 + v117;
                v82[1] = v113 + v95 + v118;
                v82 += 2;
                *v88 = v115 - (v95 - v113);
                v88[1] = v120 + v116;
                *v106 = v95 - v113 + v115;
                v106[1] = v116 - v120;
                v85 = (__int16 *)((char *)v85 + v76);
                v84 = (__int16 *)((char *)v84 + v77);
                v83 = (__int16 *)((char *)v83 + v79);
                --v86;
              }
              while (v86);
            }
            ++v73;
            v11 = v203;
          }
          while (v73 != v72);
        }
        break;
      case 5:
        v201 = v221[v13];
        if ((int)v201 >= 1)
        {
          v121 = 0;
          v122 = (int)((_DWORD)v201 << v194);
          v123 = *((_QWORD *)v195 + 6);
          v124 = (int)v122 * (uint64_t)v11;
          v125 = (__int16 *)(v123 + 8 * v124);
          v126 = v125[1];
          v127 = *v125;
          v128 = (__int16 *)(v123 + 4 * v124);
          v129 = v128[1];
          v130 = a3 + 32 * v11;
          v200 = 8 * v197;
          v198 = (__int16 *)(v123 + 2);
          v131 = a3 + 24 * v11;
          v132 = a3 + 16 * v11;
          v133 = *v128;
          v134 = a3;
          v135 = a3 + 8 * v11;
          v209 = -2 * v126;
          v207 = 16 * v122;
          v208 = 8 * v11;
          v205 = 4 * v122;
          v206 = 12 * v122;
          v204 = 4 * v122;
          do
          {
            v202 = v121;
            if (v11 >= 1)
            {
              v136 = 0;
              v137 = v198;
              v138 = v198;
              v139 = v198;
              v140 = v198;
              v213 = v131;
              v214 = v130;
              v211 = v134;
              v212 = v132;
              v210 = v135;
              do
              {
                v220 = v139;
                v218 = (_DWORD *)(v135 + v136);
                v141 = *(v138 - 1);
                v142 = *(_DWORD *)(v135 + v136);
                v143 = *(_DWORD *)(v135 + v136 + 4);
                v144 = (int *)(v130 + v136);
                v145 = (int *)(v131 + v136);
                v146 = (int *)(v132 + v136);
                v147 = (_DWORD *)(v134 + v136);
                v148 = *v138;
                v149 = (unsigned __int16)v143;
                v150 = v143 >> 16;
                v151 = (((unsigned __int16)v143 * v148) >> 15)
                     + (((unsigned __int16)v142 * v141) >> 15)
                     + 2 * ((v142 >> 16) * v141 + (v143 >> 16) * v148);
                v152 = ((v149 * v141) >> 15)
                     - (((unsigned __int16)v142 * v148) >> 15)
                     + 2 * (v150 * v141 - (v142 >> 16) * v148);
                v153 = *(v139 - 1);
                v219 = v146;
                v154 = *v146 >> 16;
                v155 = (unsigned __int16)*v146;
                v156 = *v139;
                v157 = v146[1] >> 16;
                v158 = (unsigned __int16)v146[1];
                v159 = ((v158 * v156) >> 15) + ((v155 * v153) >> 15) + 2 * (v154 * v153 + v157 * v156);
                v160 = ((v158 * v153) >> 15) - ((v155 * v156) >> 15) + 2 * (v157 * v153 - v154 * v156);
                v161 = *(v140 - 1);
                v162 = *v145 >> 16;
                v163 = (unsigned __int16)*v145;
                v164 = *v140;
                v165 = v145[1] >> 16;
                v166 = (unsigned __int16)v145[1];
                v167 = ((v166 * v164) >> 15) + ((v163 * v161) >> 15) + 2 * (v162 * v161 + v165 * v164);
                v168 = ((v166 * v161) >> 15) - ((v163 * v164) >> 15) + 2 * (v165 * v161 - v162 * v164);
                v169 = *(v137 - 1);
                v170 = *v144 >> 16;
                v171 = (unsigned __int16)*v144;
                v172 = *v137;
                v173 = v144[1] >> 16;
                v174 = (unsigned __int16)v144[1];
                v175 = ((v174 * v172) >> 15) + ((v171 * v169) >> 15) + 2 * (v170 * v169 + v173 * v172);
                v176 = ((v174 * v169) >> 15) - ((v171 * v172) >> 15) + 2 * (v173 * v169 - v170 * v172);
                v177 = v175 + v151;
                v178 = v176 + v152;
                v179 = v151 - v175;
                v180 = v152 - v176;
                v181 = v167 + v159;
                v182 = v168 + v160;
                v183 = v159 - v167;
                v184 = v160 - v168;
                v215 = *(_DWORD *)(v134 + v136 + 4);
                v216 = *(_DWORD *)(v134 + v136);
                *v147 = v181 + v216 + v177;
                v147[1] = v182 + v215 + v178;
                v185 = v177 >> 16;
                v217 = (unsigned __int16)v177;
                v186 = v216
                     + (((unsigned __int16)v181 * v127) >> 15)
                     + (((unsigned __int16)v177 * v133) >> 15)
                     + 2 * ((v181 >> 16) * v127 + (v177 >> 16) * v133);
                v187 = v215
                     + (((unsigned __int16)v182 * v127) >> 15)
                     + (((unsigned __int16)v178 * v133) >> 15)
                     + 2 * ((v182 >> 16) * v127 + (v178 >> 16) * v133);
                v188 = (((unsigned __int16)v180 * v129) >> 15)
                     + (((unsigned __int16)v184 * (int)v126) >> 15)
                     + 2 * ((v184 >> 16) * v126 + (v180 >> 16) * v129);
                v189 = v126;
                v190 = (((unsigned __int16)v179 * v129) >> 15)
                     + (((unsigned __int16)v183 * (int)v126) >> 15)
                     + 2 * ((v183 >> 16) * v126 + (v179 >> 16) * v129);
                *v218 = v186 + v188;
                v218[1] = v187 - v190;
                *v144 = v186 - v188;
                v144[1] = v187 + v190;
                LODWORD(v144) = (v181 >> 16) * v133 + v185 * v127;
                v130 = v214;
                v132 = v212;
                v131 = v213;
                LODWORD(v144) = v216
                              + (((unsigned __int16)v181 * v133) >> 15)
                              + ((v217 * v127) >> 15)
                              + 2 * (_DWORD)v144;
                v191 = v215
                     + (((unsigned __int16)v182 * v133) >> 15)
                     + (((unsigned __int16)v178 * v127) >> 15)
                     + 2 * ((v182 >> 16) * v133 + (v178 >> 16) * v127);
                v192 = (((unsigned __int16)v180 * (int)v189) >> 15)
                     - (((unsigned __int16)v184 * v129) >> 15)
                     + 2 * ((v180 >> 16) * v189 - (v184 >> 16) * v129);
                v126 = v189;
                v134 = v211;
                LODWORD(v146) = 2 * v129 * (v183 >> 16)
                              + (((unsigned __int16)v183 * v129) >> 15)
                              + v209 * (v179 >> 16)
                              - (((unsigned __int16)v179 * (int)v126) >> 15);
                *v219 = (_DWORD)v144 + v192;
                v219[1] = v191 + (_DWORD)v146;
                *v145 = (_DWORD)v144 - v192;
                v145[1] = v191 - (_DWORD)v146;
                v135 = v210;
                v136 += 8;
                v137 = (__int16 *)((char *)v137 + v207);
                v140 = (__int16 *)((char *)v140 + v206);
                v139 = &v220[v205];
                v138 = (__int16 *)((char *)v138 + v204);
              }
              while (v208 != v136);
            }
            v11 = v203;
            v121 = v202 + 1;
            v130 += v200;
            v131 += v200;
            v132 += v200;
            v135 += v200;
            v134 += v200;
          }
          while (v202 + 1 != v201);
        }
        break;
      default:
        break;
    }
    result = v195;
    v10 = v196 - 1;
  }
  while (v196 > 0);
  return result;
}

uint64_t compute_allocation(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int *a7, int *a8, int a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t *a16, _BOOL4 a17, int a18, unsigned int a19)
{
  _BYTE *v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  size_t v29;
  unint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  __int16 v39;
  __int16 v40;
  int *v41;
  _BYTE *v42;
  _DWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  _BYTE *v55;
  int v56;
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  int v62;
  _BYTE *v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  __int16 *v75;
  __int16 v76;
  _WORD *v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  _BYTE *v97;
  _BYTE *v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  char v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int *v130;
  int *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  char v138;
  _BOOL4 v139;
  int v140;
  uint64_t v141;
  __int16 v142;
  int v143;
  int v144;
  int v145;
  _DWORD *v146;
  uint64_t v147;
  __int16 *v148;
  uint64_t v149;
  __int16 v150;
  int v151;
  _DWORD *v152;
  __int16 *v153;
  __int16 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  __int16 v160;
  unsigned int v161;
  char v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  _BOOL4 v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  _DWORD *v187;
  int *v188;
  int *v189;
  int v190;
  _BYTE v192[4];
  int v193;
  _BOOL4 v194;
  int v195;
  int *v196;
  int v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  _BYTE *v207;
  uint64_t v208;
  int v209;
  _BOOL4 v210;
  uint64_t *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  _BYTE *v216;
  uint64_t v217;

  v196 = a8;
  v206 = a7;
  v203 = a5;
  v21 = a2;
  v213 = a1;
  v217 = *MEMORY[0x1E0C80C00];
  v22 = a9 & ~(a9 >> 31);
  v215 = (char *)*(int *)(a1 + 8);
  v210 = v22 > 7;
  v23 = v22 - 8 * v210;
  v205 = a4;
  if (a14 == 2)
  {
    v24 = LOG2_FRAC_TABLE[(int)a3 - (int)a2];
    v25 = 8 * (v23 - v24 > 7);
    v26 = v23 - v24 - v25;
    v27 = v23 < v24;
    if (v23 < v24)
      v24 = 0;
    v197 = v24;
    if (v27)
      v28 = 0;
    else
      v28 = v25;
    v195 = v28;
    if (!v27)
      v23 = v26;
  }
  else
  {
    v197 = 0;
    v195 = 0;
  }
  v211 = a16;
  v199 = a13;
  v200 = a12;
  v214 = a11;
  v198 = a10;
  v29 = 4 * (_QWORD)v215;
  MEMORY[0x1E0C80A78]();
  v30 = (4 * (_QWORD)v215 + 15) & 0xFFFFFFFFFFFFFFF0;
  v216 = &v192[-v30];
  bzero(&v192[-v30], 4 * (_QWORD)v215);
  MEMORY[0x1E0C80A78]();
  v208 = (uint64_t)&v192[-v30];
  bzero(&v192[-v30], v29);
  MEMORY[0x1E0C80A78]();
  v31 = &v192[-v30];
  bzero(&v192[-v30], v29);
  MEMORY[0x1E0C80A78]();
  v207 = &v192[-v30];
  bzero(&v192[-v30], v29);
  v32 = 8 * a14;
  v212 = &v192[-v30];
  if ((int)v21 >= (int)a3)
  {
    v36 = (int)a3;
    v35 = (int)v21;
    v47 = v203;
    v33 = v213;
    v55 = v216;
    v48 = v205;
    v42 = v207;
  }
  else
  {
    v33 = v213;
    v34 = a6 - a15 - 5;
    v35 = (int)v21;
    v36 = (int)a3;
    v37 = (__int16 *)(*(_QWORD *)(v213 + 24) + 2 * (int)v21);
    v40 = *v37;
    v38 = v37 + 1;
    v39 = v40;
    v41 = (int *)&v31[4 * (int)v21];
    v42 = v207;
    v43 = &v207[4 * (int)v21];
    v44 = a14 * v34;
    v45 = v44 * (~(_DWORD)v21 + a3);
    v46 = (int)a3 - (uint64_t)(int)v21;
    v47 = v203;
    v48 = v205;
    do
    {
      v49 = *v38++;
      v50 = v49 - v39;
      v51 = v49;
      v52 = (8 * ((3 * v50) << a15)) >> 4;
      if (v32 > v52)
        v52 = 8 * a14;
      *v41++ = v52;
      v53 = (v45 * v50) << (a15 + 3) >> 6;
      if (v50 << a15 == 1)
        v54 = 8 * a14;
      else
        v54 = 0;
      *v43++ = v53 - v54;
      v45 -= v44;
      v39 = v51;
      --v46;
    }
    while (v46);
    v55 = v216;
  }
  v204 = a19;
  v193 = 8 * v210;
  v56 = *(_DWORD *)(v33 + 44);
  v57 = v56 - 1;
  v58 = v42 - 4;
  LODWORD(v207) = a18;
  v210 = a17;
  v59 = v212 - 4;
  v60 = v47 - 4;
  v61 = 1;
  v202 = v36;
  v216 = v21;
  do
  {
    while (1)
    {
      v62 = (v57 + v61) >> 1;
      if ((int)v21 < (int)a3)
        break;
      if (v23 < 0)
        v57 = v62 - 1;
      else
        v61 = v62 + 1;
      if (v61 > v57)
      {
        v87 = (int)v21;
        goto LABEL_57;
      }
    }
    v63 = v42;
    v64 = 0;
    v65 = 0;
    v66 = *(_QWORD *)(v33 + 24);
    LOWORD(v67) = *(_WORD *)(v66 + 2 * v36);
    v68 = v66 - 2;
    v69 = v36;
    do
    {
      v70 = (__int16)v67;
      v67 = *(__int16 *)(v68 + 2 * v69);
      v71 = ((v70 - v67) * a14 * *(unsigned __int8 *)(*(_QWORD *)(v33 + 48) + (int)v215 * (uint64_t)v62 - 1 + v69)) << a15;
      v72 = v71 >> 2;
      if (v71 >= 4)
        v72 = (*(_DWORD *)&v58[4 * v69] + v72) & ~((*(_DWORD *)&v58[4 * v69] + v72) >> 31);
      v73 = *(_DWORD *)(v48 - 4 + 4 * v69) + v72;
      if (v65 || v73 >= *(_DWORD *)&v59[4 * v69])
      {
        if (v73 >= *(_DWORD *)(v60 + 4 * v69))
          v73 = *(_DWORD *)(v60 + 4 * v69);
        v65 = 1;
      }
      else
      {
        v65 = 0;
        if (v73 >= v32)
          v73 = 8 * a14;
        else
          v73 = 0;
      }
      --v69;
      v64 += v73;
    }
    while (v69 > v35);
    if (v64 > v23)
      v57 = v62 - 1;
    else
      v61 = v62 + 1;
    v42 = v63;
  }
  while (v61 <= v57);
  v74 = 0;
  v75 = (__int16 *)(*(_QWORD *)(v33 + 24) + 2 * v35);
  v78 = *v75;
  v77 = v75 + 1;
  v76 = v78;
  v79 = *(_QWORD *)(v33 + 48) + v35;
  v80 = v79 + (int)v215 * (uint64_t)v61;
  v81 = v47 + 4 * v35;
  v82 = v79 + (v61 - 1) * (_QWORD)v215;
  v83 = &v63[4 * v35];
  v84 = v48 + 4 * v35;
  v85 = (_BYTE *)(v208 + 4 * v35);
  v86 = v35 - v36;
  v87 = (int)v21;
  do
  {
    v88 = ((__int16)v77[v74] - v76) * a14;
    if (v61 >= v56)
      v89 = *(_DWORD *)(v81 + 4 * v74);
    else
      v89 = (v88 * *(unsigned __int8 *)(v80 + v74)) << a15 >> 2;
    v90 = (v88 * *(unsigned __int8 *)(v82 + v74)) << a15;
    v91 = v90 >> 2;
    if (v90 >= 4)
      v91 = (*(_DWORD *)&v83[4 * v74] + v91) & ~((*(_DWORD *)&v83[4 * v74] + v91) >> 31);
    if (v89 >= 1)
      v89 = (*(_DWORD *)&v83[4 * v74] + v89) & ~((*(_DWORD *)&v83[4 * v74] + v89) >> 31);
    v76 = v77[v74];
    v92 = *(_DWORD *)(v84 + 4 * v74);
    if (v61 <= 1)
      v93 = 0;
    else
      v93 = *(_DWORD *)(v84 + 4 * v74);
    v94 = v91 + v93;
    if (v92 > 0)
      v87 = v35 + v74;
    *(_DWORD *)&v55[4 * v35 + 4 * v74] = v94;
    *(_DWORD *)&v85[4 * v74++] = (v89 - v94 + v92) & ~((v89 - v94 + v92) >> 31);
    LODWORD(v21) = (_DWORD)v216;
  }
  while (v86 + v74);
LABEL_57:
  v95 = 0;
  v96 = 0;
  v194 = a14 > 1;
  v97 = (_BYTE *)(v208 - 4);
  v98 = v55 - 4;
  v99 = 64;
  v100 = v214;
  do
  {
    while ((int)v21 >= (int)a3)
    {
      if (v23 < 0)
        v99 = (v96 + v99) >> 1;
      else
        v96 = (v96 + v99) >> 1;
      if (++v95 == 6)
      {
        v106 = 0;
        goto LABEL_87;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = v202;
    do
    {
      v104 = *(_DWORD *)&v98[4 * v103] + ((*(_DWORD *)&v97[4 * v103] * ((v96 + v99) >> 1)) >> 6);
      if (v101 || v104 >= *(_DWORD *)&v59[4 * v103])
      {
        if (v104 >= *(_DWORD *)(v60 + 4 * v103))
          v104 = *(_DWORD *)(v60 + 4 * v103);
        v101 = 1;
      }
      else
      {
        v101 = 0;
        if (v104 >= v32)
          v104 = 8 * a14;
        else
          v104 = 0;
      }
      --v103;
      v102 += v104;
    }
    while (v103 > v35);
    if (v102 > v23)
      v99 = (v96 + v99) >> 1;
    else
      v96 = (v96 + v99) >> 1;
    ++v95;
  }
  while (v95 != 6);
  v105 = 0;
  v106 = 0;
  v107 = v202;
  do
  {
    v108 = *(_DWORD *)&v98[4 * v107] + ((*(_DWORD *)&v97[4 * v107] * v96) >> 6);
    v105 |= v108 >= *(_DWORD *)&v59[4 * v107];
    if (v108 >= v32)
      v109 = 8 * a14;
    else
      v109 = 0;
    if ((v105 & 1) == 0)
      v108 = v109;
    if (v108 >= *(_DWORD *)(v60 + 4 * v107))
      v108 = *(_DWORD *)(v60 + 4 * v107);
    *(_DWORD *)(v100 - 4 + 4 * v107) = v108;
    v106 += v108;
    --v107;
  }
  while (v107 > v35);
LABEL_87:
  v201 = a3;
  if ((int)a3 - 1 <= v87)
  {
    v127 = v197;
    v110 = a3;
LABEL_111:
    v129 = v23 + v193;
LABEL_112:
    v130 = v196;
    if (v127 > 0)
    {
      if (!v210)
        goto LABEL_119;
      v131 = v206;
      v132 = *v206;
      if (*v206 >= (int)v110)
        v132 = v110;
      *v206 = v132;
      v133 = (int)v216;
      ec_enc_uint(v211, v132 - (_DWORD)v216, v110 - (_DWORD)v216 + 1);
      v33 = v213;
      v100 = v214;
      v134 = *v131;
LABEL_127:
      if (v134 <= v133)
        v137 = v195;
      else
        v137 = 0;
      if (v195 && v134 > v133)
      {
        v138 = v194;
        if (!v210)
          goto LABEL_134;
        ec_enc_bit_logp(v211, *v130, 1);
        v33 = v213;
        v100 = v214;
        goto LABEL_138;
      }
LABEL_136:
      v138 = v194;
      goto LABEL_137;
    }
LABEL_126:
    v134 = 0;
    *v206 = 0;
    v133 = (int)v216;
    goto LABEL_127;
  }
  LODWORD(v205) = (_DWORD)v21 + 2;
  v110 = a3;
  v111 = (int)a3 - 1;
  v204 = (int)v204;
  v112 = v87;
  v215 = (char *)&LOG2_FRAC_TABLE[-v35];
  v113 = v197;
  v114 = v212;
  v208 = v87;
  v209 = v23;
  while (1)
  {
    v115 = *(_QWORD *)(v33 + 24);
    v116 = *(__int16 *)(v115 + 2 * (int)v110);
    v117 = *(__int16 *)(v115 + 2 * v35);
    v118 = (v23 - v106) / (v116 - v117);
    LODWORD(v115) = *(__int16 *)(v115 + 2 * v111);
    v119 = v23 - v106 + v117 - (v115 + (v116 - v117) * v118);
    v120 = v119 & ~(v119 >> 31);
    v121 = v116 - v115;
    v122 = *(_DWORD *)(v100 + 4 * v111);
    v123 = v122 + v121 * v118 + v120;
    v124 = *(_DWORD *)&v114[4 * v111];
    if (v124 <= v32 + 8)
      v124 = v32 + 8;
    if (v123 < v124)
      goto LABEL_102;
    if (v210)
    {
      v125 = v113;
      if ((int)v110 <= (int)v205
        || ((int)v110 <= (int)v207 ? (v126 = 7) : (v126 = 9), v111 <= v204 && v123 > (8 * ((v121 * v126) << a15)) >> 4))
      {
        ec_enc_bit_logp(v211, 1, 1);
        v33 = v213;
        v100 = v214;
        v127 = v125;
        v129 = v209;
        goto LABEL_112;
      }
      ec_enc_bit_logp(v211, 0, 1);
      goto LABEL_101;
    }
    v125 = v113;
    if (ec_dec_bit_logp((uint64_t)v211, 1))
      break;
LABEL_101:
    v106 += 8;
    v123 -= 8;
    v33 = v213;
    v100 = v214;
    v122 = *(_DWORD *)(v214 + 4 * v111);
    v113 = v125;
    v23 = v209;
    v114 = v212;
    v112 = v208;
LABEL_102:
    if (v113)
      v127 = v215[v111];
    else
      v127 = 0;
    if (v123 >= v32)
      v128 = 8 * a14;
    else
      v128 = 0;
    v106 = v106 - v122 - v113 + v127 + v128;
    *(_DWORD *)(v100 + 4 * v111--) = v128;
    v110 = (v110 - 1);
    v113 = v127;
    if (v111 <= v112)
      goto LABEL_111;
  }
  v27 = v125 <= 0;
  v130 = v196;
  v33 = v213;
  v100 = v214;
  v129 = v209;
  if (v27)
    goto LABEL_126;
LABEL_119:
  v135 = (int)v216;
  v136 = ec_dec_uint((uint64_t)v211, (int)v110 - (int)v216 + 1);
  *v206 = v136 + v135;
  if (v136 + v135 <= v135)
    v137 = v195;
  else
    v137 = 0;
  if (!v195)
  {
    v33 = v213;
    v100 = v214;
    goto LABEL_136;
  }
  v27 = v136 + v135 <= v135;
  v33 = v213;
  v100 = v214;
  v138 = v194;
  if (!v27)
  {
LABEL_134:
    v139 = ec_dec_bit_logp((uint64_t)v211, 1);
    v33 = v213;
    v100 = v214;
    *v130 = v139;
    goto LABEL_138;
  }
LABEL_137:
  *v130 = 0;
LABEL_138:
  if ((int)v110 > (int)v216)
  {
    v140 = v129 - v106 + v137;
    v141 = *(_QWORD *)(v33 + 24);
    v142 = *(_WORD *)(v141 + 2 * v35);
    v143 = *(__int16 *)(v141 + 2 * (int)v110) - v142;
    v144 = v140 / v143;
    v145 = v140 % v143;
    v146 = (_DWORD *)(v100 + 4 * v35);
    v147 = (int)v110 - v35;
    v148 = (__int16 *)(v141 + 2 * v35 + 2);
    v149 = v147;
    v150 = v142;
    do
    {
      v151 = *v148++;
      *v146++ += (v151 - v150) * v144;
      v150 = v151;
      --v149;
    }
    while (v149);
    v152 = (_DWORD *)(v100 + 4 * v35);
    v153 = (__int16 *)(v141 + 2 * v35 + 2);
    v154 = v142;
    v155 = v203;
    v157 = v199;
    v156 = v200;
    do
    {
      v158 = *v153++;
      v159 = v158 - v154;
      v160 = v158;
      if (v145 < v159)
        v159 = v145;
      *v152++ += v159;
      v145 -= v159;
      v154 = v160;
      --v147;
    }
    while (v147);
    v161 = 0;
    if (a14 <= 1)
      v162 = 3;
    else
      v162 = 4;
    v163 = v141 + 2;
    while (1)
    {
      v164 = *(__int16 *)(v163 + 2 * v35);
      v165 = (v164 - v142) << a15;
      v166 = *(_DWORD *)(v100 + 4 * v35) + v161;
      if (v165 < 2)
      {
        v170 = (v166 - v32) & ~((v166 - v32) >> 31);
        if (v166 >= v32)
          v166 = 8 * a14;
        *(_DWORD *)(v100 + 4 * v35) = v166;
        *(_DWORD *)(v156 + 4 * v35) = 0;
        *(_DWORD *)(v157 + 4 * v35) = 1;
        if (v170)
        {
LABEL_159:
          v171 = v170 >> v162;
          v172 = *(_DWORD *)(v156 + 4 * v35);
          if ((int)(v170 >> v162) >= 8 - v172)
            v171 = 8 - v172;
          *(_DWORD *)(v156 + 4 * v35) = v171 + v172;
          v173 = v171 * v32;
          *(_DWORD *)(v157 + 4 * v35) = v173 >= (int)(v170 - v161);
          v161 = v170 - v173;
          goto LABEL_176;
        }
      }
      else
      {
        v167 = 0;
        v168 = *(_DWORD *)(v155 + 4 * v35);
        v169 = v166 - v168;
        if (v166 >= v168)
          v166 = *(_DWORD *)(v155 + 4 * v35);
        *(_DWORD *)(v100 + 4 * v35) = v166;
        if (a14 == 2 && v165 != 2)
        {
          if (*v130)
            v167 = 0;
          else
            v167 = v35 < *v206;
        }
        v174 = v165 * a14 + v167;
        v175 = (8 * a15 + *(__int16 *)(*(_QWORD *)(v33 + 56) + 2 * v35)) * v174;
        v176 = 8 * v174;
        if (v165 == 2)
          v177 = (8 * v174) >> 2;
        else
          v177 = 0;
        v178 = v177 - 21 * v174 + (v175 >> 1);
        v179 = v178 + v166;
        v180 = v178 + (v175 >> 3);
        if (v178 + v166 >= 24 * v174)
          v180 = v178;
        v181 = v178 + (v175 >> 2);
        if (v179 >= 16 * v174)
          v181 = v180;
        v182 = ((v166 + 4 * v174 + v181) / v176) & ~(((v166 + 4 * v174 + v181) / v176) >> 31);
        *(_DWORD *)(v156 + 4 * v35) = v182;
        v100 = v214;
        v183 = *(_DWORD *)(v214 + 4 * v35);
        if (v182 * a14 > v183 >> 3)
          v182 = v183 >> v138 >> 3;
        if (v182 >= 8)
          v182 = 8;
        *(_DWORD *)(v156 + 4 * v35) = v182;
        *(_DWORD *)(v157 + 4 * v35) = v182 * v176 >= *(_DWORD *)(v100 + 4 * v35) + v181;
        v170 = v169 & ~(v169 >> 31);
        *(_DWORD *)(v100 + 4 * v35) -= *(_DWORD *)(v156 + 4 * v35) * v32;
        if (v170)
          goto LABEL_159;
      }
      v161 = 0;
LABEL_176:
      ++v35;
      v142 = v164;
      if ((int)v110 == v35)
      {
        v184 = v110;
        goto LABEL_179;
      }
    }
  }
  v161 = 0;
  v157 = v199;
  v156 = v200;
  v184 = (int)v216;
LABEL_179:
  v185 = v201;
  *v198 = v161;
  if (v184 < v185)
  {
    v186 = v202 - v184;
    v187 = (_DWORD *)(v157 + 4 * v184);
    v188 = (int *)(v156 + 4 * v184);
    v189 = (int *)(v100 + 4 * v184);
    do
    {
      *v188 = *v189 >> v138 >> 3;
      *v189++ = 0;
      v190 = *v188++;
      *v187++ = v190 < 1;
      --v186;
    }
    while (v186);
  }
  return v110;
}

int *clt_mdct_backward(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  int *result;
  int v44;
  uint64_t v45;
  int v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v74 = a5;
  v75 = *MEMORY[0x1E0C80C00];
  v13 = *a1 >> a6;
  v14 = v13 >> 2;
  v73 = (uint64_t)v13 >> 1;
  MEMORY[0x1E0C80A78]();
  v16 = (char *)&v72 - v15;
  bzero((char *)&v72 - v15, v17);
  v18 = a1;
  v19 = ((v13 >> 1) + 25736) / v13;
  v20 = (__int16)v19;
  v21 = 2 * (__int16)v19;
  if (v13 >= 4)
  {
    v22 = 0;
    v23 = &a2[((int)v73 - 1) * a7];
    v24 = v19 << 16;
    v25 = *((_QWORD *)v18 + 5);
    v26 = -(v24 >> 15);
    v27 = 2 * a7;
    if (v14 <= 1)
      v28 = 1;
    else
      v28 = v13 >> 2;
    v29 = 4 * v27;
    v30 = -4 * v27;
    v31 = v13 >> 2;
    v32 = v16;
    do
    {
      v33 = *(__int16 *)(v25 + 2 * (v22 << a6));
      v34 = *v23 >> 16;
      v35 = (unsigned __int16)*v23;
      v36 = *(__int16 *)(v25 + 2 * (v31 << a6));
      v37 = *a2 >> 16;
      v38 = (unsigned __int16)*a2;
      v39 = 2 * v36 * v37 - (2 * v34 * v33 + ((v35 * v33) >> 15)) + ((v38 * v36) >> 15);
      v40 = ((v38 * v33) >> 15) + ((v35 * v36) >> 15) + 2 * (v34 * v36 + v37 * v33);
      ++v22;
      --v31;
      *v32 = v39 + v26 * (-v40 >> 16) - (((unsigned __int16)-(__int16)v40 * v20) >> 15);
      v32[1] = v21 * (v39 >> 16) - v40 + (((unsigned __int16)v39 * v20) >> 15);
      v32 += 2;
      a2 = (int *)((char *)a2 + v29);
      v23 = (int *)((char *)v23 + v30);
    }
    while (v28 != v22);
  }
  v41 = v74;
  v42 = (int *)(a3 + 4 * ((int)v74 >> 1));
  result = opus_ifft(*(int **)&v18[2 * a6 + 2], (uint64_t)v16, (uint64_t)v42);
  if (v13 >= 4)
  {
    v44 = 0;
    v45 = *((_QWORD *)v18 + 5);
    v46 = (v14 + 1) >> 1;
    if (v46 <= 1)
      v46 = 1;
    v47 = (int *)(4 * v73 + 4 * ((uint64_t)v41 >> 1) + a3 - 4);
    do
    {
      v48 = *(__int16 *)(v45 + 2 * (v44 << a6));
      v49 = *(__int16 *)(v45 + 2 * (v14 << a6));
      v50 = *v42 >> 16;
      v51 = (unsigned __int16)*v42;
      v52 = v42[1] >> 16;
      v53 = (unsigned __int16)v42[1];
      v54 = ((v51 * v48) >> 15) - ((v53 * v49) >> 15) + 2 * (v50 * v48 - v52 * v49);
      v55 = ((v51 * v49) >> 15) + ((v53 * v48) >> 15) + 2 * (v52 * v48 + v50 * v49);
      v56 = *(v47 - 1);
      v57 = *v47;
      *v42 = v21 * (v55 >> 16) - v54 + (((unsigned __int16)v55 * v20) >> 15);
      v58 = *(__int16 *)(v45 + 2 * (--v14 << a6));
      v59 = *(__int16 *)(v45 + 2 * (++v44 << a6));
      *v47 = v55 + v21 * (v54 >> 16) + (((unsigned __int16)v54 * v20) >> 15);
      v60 = (((unsigned __int16)v56 * v58) >> 15)
          - (((unsigned __int16)v57 * v59) >> 15)
          + 2 * ((v56 >> 16) * v58 - (v57 >> 16) * v59);
      result = (int *)((v57 >> 16) * v58);
      v61 = (((unsigned __int16)v56 * v59) >> 15)
          + (((unsigned __int16)v57 * v58) >> 15)
          + 2 * ((_DWORD)result + (v56 >> 16) * v59);
      *(v47 - 1) = v21 * (v61 >> 16) - v60 + (((unsigned __int16)v61 * v20) >> 15);
      v42[1] = v61 + v21 * (v60 >> 16) + (((unsigned __int16)v60 * v20) >> 15);
      v47 -= 2;
      v42 += 2;
    }
    while (v46 != v44);
  }
  if (v41 >= 0)
    v62 = v41;
  else
    v62 = v41 + 1;
  if (v41 >= 2)
  {
    v63 = 0;
    v64 = v62 >> 1;
    v65 = v41 - 1;
    do
    {
      v66 = *(__int16 *)(a4 + 2 * v65);
      v67 = *(int *)(a3 + 4 * v63) >> 16;
      v68 = (unsigned __int16)*(_DWORD *)(a3 + 4 * v63);
      v69 = *(__int16 *)(a4 + 2 * v63);
      v70 = *(int *)(a3 + 4 * v65) >> 16;
      v71 = (unsigned __int16)*(_DWORD *)(a3 + 4 * v65);
      result = (int *)(v71 * v69);
      *(_DWORD *)(a3 + 4 * v63) = ((v68 * v66) >> 15) - ((int)result >> 15) + 2 * (v67 * v66 - v70 * v69);
      *(_DWORD *)(a3 + 4 * v65) = ((v68 * v69) >> 15) + ((v71 * v66) >> 15) + 2 * (v70 * v66 + v67 * v69);
      ++v63;
      --v65;
    }
    while (v64 != (_DWORD)v63);
  }
  return result;
}

uint64_t *encode_pulses(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;

  v4 = *(_DWORD *)(a1 + 4 * (a2 - 1));
  v5 = v4 >> 31;
  if (v4 >= 0)
    v6 = *(_DWORD *)(a1 + 4 * (a2 - 1));
  else
    v6 = -v4;
  v7 = a2;
  v8 = 2;
  do
  {
    if ((int)v8 >= v6)
      v9 = v6;
    else
      v9 = v8;
    v10 = (uint64_t)*(&CELT_PVQ_U_ROW + v9);
    if ((int)v8 <= v6)
      v11 = v6;
    else
      v11 = v8;
    v5 += *(_DWORD *)(v10 + 4 * v11);
    v12 = *(_DWORD *)(a1 - 8 + 4 * v7);
    if (v12 >= 0)
      v13 = *(_DWORD *)(a1 - 8 + 4 * v7);
    else
      v13 = -v12;
    v6 += v13;
    if (v12 < 0)
    {
      if (v8 > v6)
        v14 = v6 + 1;
      else
        v14 = v8;
      v15 = (uint64_t)*(&CELT_PVQ_U_ROW + v14);
      if ((int)v8 <= v6 + 1)
        v16 = v6 + 1;
      else
        v16 = v8;
      v5 += *(_DWORD *)(v15 + 4 * v16);
    }
    --v7;
    ++v8;
  }
  while (v7 > 1);
  if (a2 >= a3)
    v17 = a3;
  else
    v17 = a2;
  v18 = (uint64_t)*(&CELT_PVQ_U_ROW + v17);
  if (a2 <= a3)
    v19 = a3;
  else
    v19 = a2;
  v20 = *(_DWORD *)(v18 + 4 * v19);
  if (a3 + 1 < a2)
    v21 = a3 + 1;
  else
    v21 = a2;
  v22 = (uint64_t)*(&CELT_PVQ_U_ROW + v21);
  if (a3 + 1 > a2)
    v23 = a3 + 1;
  else
    v23 = a2;
  return ec_enc_uint(a4, v5, *(_DWORD *)(v22 + 4 * v23) + v20);
}

uint64_t decode_pulses(int *a1, int a2, int a3, uint64_t a4)
{
  unsigned int v4;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  _UNKNOWN **v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _UNKNOWN **v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _UNKNOWN **v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;

  v4 = a3;
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  v8 = (uint64_t)*(&CELT_PVQ_U_ROW + v7);
  if (a2 <= a3)
    v9 = a3;
  else
    v9 = a2;
  v10 = *(_DWORD *)(v8 + 4 * v9);
  if (a3 + 1 < a2)
    v11 = a3 + 1;
  else
    v11 = a2;
  v12 = (uint64_t)*(&CELT_PVQ_U_ROW + v11);
  if (a3 + 1 > a2)
    v13 = a3 + 1;
  else
    v13 = a2;
  result = ec_dec_uint(a4, *(_DWORD *)(v12 + 4 * v13) + v10);
  if (a2 >= 3)
  {
    v15 = a2;
    do
    {
      if (v15 <= (int)v4)
      {
        v26 = (uint64_t)*(&CELT_PVQ_U_ROW + v15);
        v27 = *(_DWORD *)(v26 + 4 * (int)v4 + 4);
        if (result >= v27)
          v28 = *(_DWORD *)(v26 + 4 * (int)v4 + 4);
        else
          v28 = 0;
        v29 = result - v28;
        if (*(_DWORD *)(v26 + 4 * v15) <= v29)
        {
          v34 = v4;
          v30 = (int)v4 + 1;
          do
          {
            v32 = *(_DWORD *)(v26 + 4 * v34);
            v34 = v30 - 2;
            --v30;
          }
          while (v32 > v29);
        }
        else
        {
          v30 = v15;
          do
          {
            v31 = &CELT_PVQ_U_ROW + v30--;
            v32 = *((_DWORD *)*(v31 - 1) + v15);
          }
          while (v32 > v29);
        }
        v19 = result >= v27;
        result = v29 - v32;
        v33 = v4 - v30;
        if (v19)
          v33 = v30 - v4;
        v4 = v30;
      }
      else
      {
        v16 = &CELT_PVQ_U_ROW + (int)v4;
        v17 = *((_DWORD *)*v16 + v15);
        v18 = *((_DWORD *)v16[1] + v15);
        v19 = result < v17 || result >= v18;
        if (v19)
        {
          v20 = 0;
          if (result >= v18)
            v21 = *((_DWORD *)v16[1] + v15);
          else
            v21 = 0;
          v22 = result - v21;
          v23 = v16 - 1;
          do
          {
            v24 = *((_DWORD *)v23[v20--] + v15);
            v19 = v22 >= v24;
            v25 = v22 - v24;
          }
          while (!v19);
          v4 += v20;
          if (result >= v18)
            v33 = v20;
          else
            v33 = -(int)v20;
          result = v25;
        }
        else
        {
          v33 = 0;
          result = result - v17;
        }
      }
      *a1++ = v33;
    }
    while (v15-- > 3);
  }
  v36 = (2 * v4) | 1;
  if (result >= v36)
    v37 = (2 * v4) | 1;
  else
    v37 = 0;
  v38 = result - v37;
  v39 = v38 + 1;
  v40 = v4 - ((v38 + 1) >> 1);
  if (result >= v36)
    v40 = ((v38 + 1) >> 1) - v4;
  v41 = ((v38 + 1) & 0xFFFFFFFE) - 1;
  v19 = v39 >= 2;
  v42 = v39 >> 1;
  if (!v19)
    v41 = 0;
  *a1 = v40;
  a1[1] = (v42 - (v38 - v41)) ^ (v41 - v38);
  return result;
}

void *opus_custom_mode_create(int a1, int a2, int *a3)
{
  int v3;
  void *result;
  int v5;

  v3 = 0;
  while (a1 != 48000 || a2 << v3 != 960)
  {
    if (++v3 == 4)
    {
      result = 0;
      if (!a3)
        return result;
      v5 = -1;
      goto LABEL_9;
    }
  }
  result = &mode48000_960_120;
  if (!a3)
    return result;
  v5 = 0;
LABEL_9:
  *a3 = v5;
  return result;
}

uint64_t celt_decoder_get_size(int a1)
{
  _DWORD *v2;

  v2 = opus_custom_mode_create(48000, 960, 0);
  return ((4 * v2[1] + 8240) * a1 + 16 * v2[2] + 84);
}

uint64_t celt_decoder_init(_QWORD *a1, int a2, unsigned int a3)
{
  _DWORD *v6;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = opus_custom_mode_create(48000, 960, 0);
  if (a3 > 2)
    return 0xFFFFFFFFLL;
  if (!a1)
    return 4294967289;
  v8 = v6;
  bzero(a1, (int)((4 * v6[1] + 8240) * a3 + 16 * v6[2] + 84));
  *a1 = v8;
  *((_DWORD *)a1 + 2) = v8[1];
  *((_DWORD *)a1 + 3) = a3;
  *((_DWORD *)a1 + 4) = a3;
  *(_QWORD *)((char *)a1 + 20) = 1;
  *((_DWORD *)a1 + 7) = v8[3];
  a1[4] = 1;
  *((_DWORD *)a1 + 13) = 0;
  opus_custom_decoder_ctl(a1, 4028, v9, v10, v11, v12, v13, v14, v16);
  v15 = resampling_factor(a2);
  *((_DWORD *)a1 + 5) = v15;
  if (v15)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t celt_decode_with_ec(int32x2_t *a1, unsigned __int8 *a2, unsigned int a3, _WORD *a4, int a5, uint64_t *a6)
{
  uint64_t *v6;
  int32x2_t *v8;
  uint64_t v9;
  int v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  int v28;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  __int32 v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  _BOOL8 v43;
  signed int v44;
  _BOOL4 v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  char *v65;
  int v66;
  _BOOL4 v67;
  int32x2_t *v68;
  uint64_t v69;
  signed int v70;
  int v71;
  uint64_t v72;
  int *v73;
  uint64_t *v74;
  uint64_t v75;
  size_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t inited;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t *v95;
  _BOOL4 v96;
  int v97;
  int v98;
  int v99;
  size_t v100;
  uint64_t *v101;
  int v102;
  __int16 *v103;
  uint64_t v104;
  _BOOL4 v105;
  int v106;
  int v107;
  int v108;
  size_t v109;
  char *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  size_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  char *v140;
  size_t v141;
  int v142;
  uint64_t v143;
  int v144;
  size_t v145;
  void **v146;
  char *v147;
  int v148;
  int v149;
  __int32 v150;
  int v151;
  uint64_t v152;
  int v153;
  _DWORD *v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  __int16 *v159;
  int v160;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  int *v164;
  unint64_t v165;
  int v166;
  int32x2_t v167;
  char *v168;
  __int32 v169;
  __int32 v170;
  int v171;
  __int16 v172;
  int v173;
  _WORD *v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  int v182;
  uint64_t v183;
  char *v184;
  int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  char *v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  unint64_t v213;
  unsigned int v214;
  _BOOL4 v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _WORD *v220;
  int v221;
  int v222;
  char *v223;
  char *v224;
  int v225;
  int v226;
  char *v227;
  unsigned int v228;
  int v229;
  uint64_t v230;
  char *v231;
  __int16 *v232;
  _BOOL8 v233;
  int v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int32x2_t *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t *v246;
  _DWORD *v247;
  int v248;
  uint64_t v249;
  _OWORD v250[3];
  uint64_t v251;
  _QWORD v252[2];
  _QWORD v253[3];

  v6 = a6;
  v8 = a1;
  v9 = 0;
  v253[2] = *MEMORY[0x1E0C80C00];
  v251 = 0;
  memset(v250, 0, sizeof(v250));
  v253[0] = 0;
  v253[1] = 0;
  v252[0] = 0;
  v252[1] = 0;
  v249 = 0;
  v10 = a1[1].i32[1];
  v244 = a1[2].i32[0];
  v11 = (__int16 *)*a1;
  v12 = *(int *)(*(_QWORD *)a1 + 8);
  v13 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v241 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v16 = v241 + 2048;
  if (v10 <= 1)
    v17 = 1;
  else
    v17 = v10;
  v18 = a1[2].i32[1];
  v19 = (_DWORD *)&a1[10] + 1;
  do
  {
    v253[v9++] = v19;
    v19 += v16;
  }
  while (v17 != v9);
  v20 = *((_DWORD *)v11 + 8);
  if (v20 < 0)
    return 0xFFFFFFFFLL;
  v238 = v17;
  v21 = 0;
  v22 = 0;
  v23 = (v18 * a5);
  v15 = (_DWORD *)&a1[10] + 1;
  v24 = (char *)&a1[6 * v10 + 10] + 4 * v16 * v10 + 4;
  v25 = 2 * (int)v13;
  v26 = v20 + 1;
  while (*((_DWORD *)v11 + 10) << v22 != (_DWORD)v23)
  {
    ++v22;
    v21 += 8;
    if (v26 == v22)
      return 0xFFFFFFFFLL;
  }
  result = 0xFFFFFFFFLL;
  if (a3 <= 0x4FB && a4)
  {
    v28 = v8[3].i32[1];
    if (v28 >= *((_DWORD *)v11 + 3))
      v28 = *((_DWORD *)v11 + 3);
    if (!a2 || a3 <= 1)
    {
      celt_decode_lost(v8, a4, v23, v22);
      return ((int)v23 / v8[2].i32[1]);
    }
    v221 = v28;
    v217 = 24 * v10;
    v218 = v16 * v10;
    v248 = 0;
    v216 = 2 * (int)v13;
    v235 = (char *)&v15[v218 + v217 / 2];
    v224 = &v24[2 * v25];
    v223 = &v224[2 * v25];
    v237 = v14;
    LODWORD(v239) = a3;
    if (!a6)
    {
      v6 = (uint64_t *)v250;
      ec_dec_init((uint64_t *)v250, a2, v239);
      a3 = v239;
      v24 = v235;
    }
    v30 = v244 == 1 && (int)v13 > 0;
    v215 = v30;
    if (v30)
    {
      v31 = 0;
      do
      {
        v32 = *(__int16 *)&v24[v31];
        if (v32 <= *(__int16 *)&v24[2 * v13 + v31])
          LOWORD(v32) = *(_WORD *)&v24[2 * v13 + v31];
        *(_WORD *)&v24[v31] = v32;
        v31 += 2;
      }
      while (2 * v13 != v31);
    }
    v33 = 8 * a3;
    v34 = __clz(*((_DWORD *)v6 + 8));
    v35 = *((_DWORD *)v6 + 6) + v34 - 32;
    v234 = 8 * a3;
    v220 = a4;
    if (v35 < (int)(8 * a3))
    {
      if (v35 != 1)
      {
        v211 = 1;
        goto LABEL_39;
      }
      if (!ec_dec_bit_logp((uint64_t)v6, 15))
      {
        v35 = 1;
        v211 = 1;
        v33 = v234;
        goto LABEL_39;
      }
      v34 = __clz(*((_DWORD *)v6 + 8));
      v33 = v234;
    }
    v211 = 0;
    *((_DWORD *)v6 + 6) = v33 - v34 + 32;
    v35 = v33;
LABEL_39:
    v36 = 0;
    v37 = v8[3].i32[0];
    v246 = v6;
    v219 = v13;
    if (v37)
    {
      v38 = 0;
      v39 = 0;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      if (v35 + 16 <= v33)
      {
        v39 = ec_dec_bit_logp((uint64_t)v6, 1);
        if (v39)
        {
          v40 = v12;
          v41 = ec_dec_uint((uint64_t)v6, 6u);
          v6 = v246;
          v36 = ec_dec_bits(v246, v41 + 4) + (16 << v41) - 1;
          v42 = ec_dec_bits(v246, 3u);
          v33 = v234;
          if ((int)(*((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 30) <= v234)
          {
            v39 = ec_dec_icdf((uint64_t)v246, tapset_icdf, 2);
            v33 = v234;
          }
          else
          {
            v39 = 0;
          }
          v38 = 3072 * v42 + 3072;
          v12 = v40;
        }
        else
        {
          v36 = 0;
          v38 = 0;
          v33 = v234;
        }
        v35 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 32;
      }
    }
    v229 = v38;
    v242 = v39;
    v243 = v36;
    v43 = 0;
    v44 = v35 + 3;
    if (v22 && v44 <= v33)
    {
      v43 = ec_dec_bit_logp((uint64_t)v6, 3);
      v33 = v234;
      v44 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 29;
    }
    v45 = 0;
    v233 = v43;
    if (v43)
      v46 = 1 << v22;
    else
      v46 = 0;
    v228 = v46;
    if (v44 <= v33)
      v45 = ec_dec_bit_logp((uint64_t)v6, 3);
    v222 = 1 << v22;
    v245 = v23;
    v225 = v10;
    v47 = v8[3].i32[0];
    v48 = v8[3].i32[1];
    v232 = v11;
    v49 = unquant_coarse_energy((uint64_t)v11, v47, v48, (uint64_t)v235, v45, (uint64_t)v6, v244, v22);
    v230 = v12;
    MEMORY[0x1E0C80A78](v49);
    v51 = (char *)&v209 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    v231 = (char *)v50;
    bzero(v51, v50);
    v54 = v8[3].i32[0];
    v53 = v8[3].i32[1];
    v240 = v8;
    v55 = 8 * *((_DWORD *)v6 + 2);
    v56 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 32;
    if (v233)
      v57 = 2;
    else
      v57 = 4;
    if (v22)
      v58 = v56 + v57 + 1 > v55;
    else
      v58 = 1;
    v59 = !v58;
    v227 = v51;
    v236 = v53;
    LODWORD(v247) = v59;
    v60 = 0;
    if ((int)v54 < (int)v53)
    {
      v61 = 0;
      v62 = v55 - v59;
      if (v233)
        v63 = 4;
      else
        v63 = 5;
      v64 = v53 - v54;
      v65 = &v51[4 * v54];
      do
      {
        if (v57 + v56 <= v62)
        {
          v52 = ec_dec_bit_logp((uint64_t)v6, v57);
          v61 ^= v52;
          v56 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 32;
          v60 |= v61;
        }
        *(_DWORD *)v65 = v61;
        v65 += 4;
        v57 = v63;
        --v64;
      }
      while (v64);
    }
    v66 = (int)v247;
    if ((_DWORD)v247)
    {
      v67 = v233;
      v68 = v240;
      v69 = (uint64_t)v227;
      if (tf_select_table[v60 + (uint64_t)(4 * (int)v233) + v21] == tf_select_table[4 * v233 + 2 + v60 + v21])
      {
        v66 = 0;
      }
      else
      {
        v52 = ec_dec_bit_logp((uint64_t)v246, 1);
        v67 = v233;
        v66 = 2 * v52;
      }
      v70 = v234;
    }
    else
    {
      v68 = v240;
      v70 = v234;
      v67 = v233;
      v69 = (uint64_t)v227;
    }
    if ((int)v54 < (int)v236)
    {
      v71 = v66 + 4 * v67;
      v72 = v236 - v54;
      v73 = (int *)(v69 + 4 * v54);
      do
      {
        *v73 = tf_select_table[*v73 + (uint64_t)v71 + v21];
        ++v73;
        --v72;
      }
      while (v72);
    }
    v74 = v246;
    if ((int)(*((_DWORD *)v246 + 6) + __clz(*((_DWORD *)v246 + 8)) - 28) <= v70)
    {
      v52 = ec_dec_icdf((uint64_t)v246, spread_icdf, 5);
      v214 = v52;
    }
    else
    {
      v214 = 2;
    }
    v75 = (uint64_t)v232;
    v76 = (size_t)v231;
    MEMORY[0x1E0C80A78](v52);
    v77 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
    bzero((char *)&v209 - v77, v76);
    v78 = v75;
    v247 = (_DWORD *)((char *)&v209 - v77);
    v79 = v244;
    inited = init_caps(v78, (uint64_t)&v209 - v77, v22, v244);
    MEMORY[0x1E0C80A78](inited);
    v213 = v77;
    v236 = (uint64_t)&v209 - v77;
    bzero((char *)&v209 - v77, v76);
    v81 = (_DWORD)v239 << 6;
    v82 = ec_tell_frac((uint64_t)v74);
    v83 = v82;
    v84 = v68[3].i32[1];
    v85 = v68[3].i32[0];
    v226 = v81;
    if ((int)v85 < v84)
    {
      v86 = 6;
      v87 = v237;
      v88 = v236;
      do
      {
        v89 = v85 + 1;
        v90 = ((*(__int16 *)(v87 + 2 * (v85 + 1)) - *(__int16 *)(v87 + 2 * v85)) * v79) << v22;
        v91 = 8 * v90;
        if (v90 <= 48)
          v90 = 48;
        if (v91 >= v90)
          v92 = v90;
        else
          v92 = v91;
        if (v83 + 8 * v86 >= v81)
        {
          *(_DWORD *)(v88 + 4 * v85) = 0;
        }
        else
        {
          if ((int)v247[v85] < 1)
          {
            v94 = 0;
          }
          else
          {
            v93 = 0;
            LODWORD(v239) = v86;
            while (1)
            {
              v94 = v93;
              v95 = v246;
              v96 = ec_dec_bit_logp((uint64_t)v246, v86);
              v82 = ec_tell_frac((uint64_t)v95);
              v83 = v82;
              if (!v96)
                break;
              v97 = v81 - v92;
              if ((int)v82 + 8 < v81 - v92)
              {
                v93 = v94 + v92;
                LOBYTE(v86) = 1;
                v81 -= v92;
                if (v94 + v92 < v247[v85])
                  continue;
              }
              v94 += v92;
              v81 = v97;
              break;
            }
            v79 = v244;
            v87 = v237;
            v88 = v236;
            v86 = v239;
          }
          *(_DWORD *)(v88 + 4 * v85) = v94;
          v84 = v240[3].i32[1];
          if (v86 <= 3)
            v98 = 3;
          else
            v98 = v86;
          v99 = v98 - 1;
          if (v94 > 0)
            v86 = v99;
        }
        ++v85;
      }
      while (v89 < v84);
    }
    MEMORY[0x1E0C80A78](v82);
    v239 = (uint64_t)&v209 - v213;
    bzero((char *)&v209 - v213, v100);
    v101 = v246;
    if (v83 + 48 <= v81)
      v102 = ec_dec_icdf((uint64_t)v246, trim_icdf, 7);
    else
      v102 = 5;
    v103 = v232;
    v104 = ec_tell_frac((uint64_t)v101);
    v105 = 0;
    v106 = v226 + ~(_DWORD)v104;
    v8 = v240;
    v107 = 0;
    if (v22 >= 2 && v233)
    {
      v105 = v106 >= (int)v21 + 16;
      if (v106 < (int)v21 + 16)
        v107 = 0;
      else
        v107 = 8;
    }
    v212 = v107;
    LODWORD(v213) = v105;
    v108 = v106 - v107;
    v109 = (size_t)v231;
    MEMORY[0x1E0C80A78](v104);
    v110 = (char *)&v209 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v110, v109);
    MEMORY[0x1E0C80A78](v111);
    bzero(v110, v109);
    v112 = (_BYTE *)v8[3].u32[0];
    v113 = v8[3].u32[1];
    v231 = v110;
    v114 = v239;
    v208 = v108;
    v115 = v246;
    v116 = v79;
    v117 = compute_allocation((uint64_t)v103, v112, v113, v236, (uint64_t)v247, v102, (int *)&v249 + 1, (int *)&v249, v208, (unsigned int *)&v248, (uint64_t)v110, v239, (uint64_t)v110, v79, v22, v246, 0, 0, 0);
    v118 = unquant_fine_energy((uint64_t)v103, v8[3].i32[0], v8[3].i32[1], (uint64_t)v235, v114, v115, v116);
    v236 = (v230 * v116);
    MEMORY[0x1E0C80A78](v118);
    v120 = (char *)&v209 - v119;
    bzero((char *)&v209 - v119, v121);
    v122 = v245;
    v210 = (v245 * v116);
    MEMORY[0x1E0C80A78](v123);
    v125 = (char *)&v209 - v124;
    bzero((char *)&v209 - v124, v126);
    v127 = v8[3].i32[0];
    v128 = v8[3].u32[1];
    if (v116 == 2)
      v129 = (uint64_t)&v125[2 * v122];
    else
      v129 = 0;
    v247 = v110;
    quant_all_bands(0, (uint64_t)v103, v127, v128, (uint64_t)v125, v129, (uint64_t)v120, 0, (uint64_t)v110, v228, v214, v249, HIDWORD(v249), (uint64_t)v227, v226 - v212, v248, (uint64_t)v115, v22, v117,
      &v8[5]);
    v130 = 0;
    if ((v213 & 1) != 0)
      v130 = ec_dec_bits(v115, 1u);
    v131 = v244;
    v132 = (uint64_t)v235;
    v133 = unquant_energy_finalise((uint64_t)v103, v8[3].i32[0], v8[3].i32[1], (uint64_t)v235, v239, (uint64_t)v231, v234 - *((_DWORD *)v115 + 6) - __clz(*((_DWORD *)v115 + 8)) + 32, v115, v244);
    v134 = v245;
    v135 = v241;
    if (v130)
      v133 = (uint64_t)anti_collapse(v103, (uint64_t)v125, (uint64_t)v120, v22, v131, v245, v8[3].i32[0], v8[3].i32[1], v132, (uint64_t)v224, (uint64_t)v223, (uint64_t)v247, v8[5].i32[0]);
    v136 = v131;
    v137 = v134;
    v138 = v225;
    MEMORY[0x1E0C80A78](v133);
    v140 = (char *)&v209 - v139;
    bzero((char *)&v209 - v139, v141);
    v247 = v140;
    if ((v211 & 1) != 0)
    {
      denormalise_bands((uint64_t)v103, (uint64_t)v125, (uint64_t)v140, (uint64_t)v235, v8[3].i32[0], v221, v136, v222);
      v142 = v245;
      v143 = v238;
    }
    else
    {
      v143 = v238;
      if ((int)v236 >= 1)
        memset_pattern16(v235, &unk_1DECD64F0, 2 * v236);
      v142 = v245;
      if ((int)v210 >= 1)
        bzero(v247, 4 * v210);
    }
    if (v135 >= 0)
      v144 = v135;
    else
      v144 = v135 + 1;
    v145 = 4 * ((v144 >> 1) - v142 + 2048);
    v146 = (void **)v253;
    do
    {
      v147 = (char *)*v146++;
      memmove(v147, &v147[4 * v137], v145);
      --v143;
    }
    while (v143);
    v148 = 0;
    v149 = *(__int16 *)(v237 + 2 * v221) << v22;
    v150 = v8[2].i32[1];
    if (v244 <= 1)
      v151 = 1;
    else
      v151 = v244;
    v152 = v245;
    v153 = (int)v245 / v150;
    v154 = v247;
    do
    {
      v155 = v149;
      if (v150 != 1)
      {
        if (v149 >= v153)
          v155 = v153;
        else
          v155 = v149;
      }
      if (v155 < (int)v152)
      {
        bzero(&v154[v155 + v148], 4 * (v152 + ~v155) + 4);
        v154 = v247;
      }
      v148 += v152;
      --v151;
    }
    while (v151);
    v156 = 0;
    v157 = 8 * v238;
    do
    {
      v252[v156 / 8] = v253[v156 / 8] - 4 * v137 + 0x2000;
      v156 += 8;
    }
    while (v157 != v156);
    v158 = v246;
    v159 = v232;
    v160 = v241;
    if (v138 == 2 && v244 == 1 && (int)v152 >= 1)
    {
      v161 = v152;
      v162 = v154;
      do
      {
        v162[v137] = *v162;
        ++v162;
        --v161;
      }
      while (v161);
    }
    if (v138 == 1 && v244 == 2 && (int)v152 >= 1)
    {
      v163 = v152;
      v164 = v154;
      do
      {
        *v164 = (v164[v137] + *v164) >> 1;
        ++v164;
        --v163;
      }
      while (v163);
    }
    compute_inv_mdcts((unsigned int *)v159, v228, (uint64_t)v154, (uint64_t)v252, v138, v22);
    v165 = 0;
    v166 = (__int16)v229;
    do
    {
      v167 = vmax_s32(v8[7], (int32x2_t)0xF0000000FLL);
      v8[7] = v167;
      v168 = (char *)v252[v165 / 8];
      comb_filter(v168, v168, v167.i32[1], v167.i32[0], *((_DWORD *)v159 + 10), v8[8].i16[1], v8[8].i16[0], v8[9].i32[0], v8[8].i32[1], *((__int16 **)v159 + 8), v160);
      if (v22)
        comb_filter(&v168[4 * *((int *)v159 + 10)], &v168[4 * *((int *)v159 + 10)], v8[7].i32[0], v243, v245 - *((_DWORD *)v159 + 10), v8[8].i16[0], v166, v8[8].i32[1], v242, *((__int16 **)v159 + 8), v160);
      v165 += 8;
    }
    while (v157 != v165);
    v169 = v8[7].i32[0];
    v8[8].i16[1] = v8[8].i16[0];
    v170 = v8[8].i32[1];
    v171 = v243;
    v8[7].i32[0] = v243;
    v8[7].i32[1] = v169;
    v172 = v229;
    v8[8].i16[0] = v229;
    v173 = v242;
    v8[8].i32[1] = v242;
    v8[9].i32[0] = v170;
    if (v22)
    {
      v8[7].i32[1] = v171;
      v8[8].i16[1] = v172;
      v8[9].i32[0] = v173;
    }
    v174 = v220;
    LODWORD(v23) = v245;
    v175 = v230;
    v176 = v219;
    v177 = v217;
    v178 = v216;
    v179 = v235;
    v180 = v224;
    v181 = v223;
    v182 = v222;
    if (v215)
    {
      v183 = v219;
      v184 = v235;
      do
      {
        *(_WORD *)&v184[2 * v175] = *(_WORD *)v184;
        v184 += 2;
        --v183;
      }
      while (v183);
    }
    if (v233)
    {
      v185 = v225;
      if ((int)v175 >= 1)
      {
        if ((int)v178 <= 1)
          v186 = 1;
        else
          v186 = v178;
        do
        {
          v187 = *(__int16 *)&v179[2 * v178];
          if (v187 >= *(__int16 *)v179)
            LOWORD(v187) = *(_WORD *)v179;
          *(_WORD *)&v179[2 * v178] = v187;
          v179 += 2;
          --v186;
        }
        while (v186);
      }
    }
    else
    {
      v185 = v225;
      if (v176 >= 1)
      {
        if ((int)v178 <= 1)
          v188 = 1;
        else
          v188 = v178;
        v189 = v188;
        do
        {
          v190 = *(_WORD *)v180;
          v180 += 2;
          *(_WORD *)v181 = v190;
          v181 += 2;
          --v189;
        }
        while (v189);
        v191 = v188;
        v192 = v179;
        do
        {
          *(_WORD *)&v192[2 * v178] = *(_WORD *)v192;
          v192 += 2;
          --v191;
        }
        while (v191);
        do
        {
          v193 = v182 + *(__int16 *)&v179[6 * v178];
          if (v193 >= *(__int16 *)v179)
            LOWORD(v193) = *(_WORD *)v179;
          *(_WORD *)&v179[6 * v178] = v193;
          v179 += 2;
          --v188;
        }
        while (v188);
      }
    }
    v194 = 0;
    v195 = (uint64_t)&v8[10] + 4 * v218 + 2 * v177 + 4;
    v196 = v195 + 4 * v178;
    v197 = v195 + 2 * v178;
    v198 = v8[3].u32[0];
    v199 = v8[3].i32[1];
    v200 = 1;
    do
    {
      v201 = v200;
      if ((int)v198 >= 1)
      {
        v202 = 0;
        do
        {
          *(_WORD *)(v195 + 2 * v194 * (int)v175 + v202) = 0;
          *(_WORD *)(v196 + 2 * v194 * (int)v175 + v202) = -28672;
          *(_WORD *)(v197 + 2 * v194 * (int)v175 + v202) = -28672;
          v202 += 2;
        }
        while (2 * v198 != v202);
      }
      if ((int)v199 < v176)
      {
        v203 = 0;
        v204 = v199 + v194 * v176;
        v205 = v195 + 2 * v204;
        v206 = v196 + 2 * v204;
        v207 = v197 + 2 * v204;
        do
        {
          *(_WORD *)(v205 + 2 * v203) = 0;
          *(_WORD *)(v206 + 2 * v203) = -28672;
          *(_WORD *)(v207 + 2 * v203++) = -28672;
        }
        while (v175 - v199 != v203);
      }
      v200 = 0;
      v194 = 1;
    }
    while ((v201 & 1) != 0);
    v8[5].i32[0] = *((_DWORD *)v158 + 8);
    deemphasis((uint64_t)v252, v174, v23, v185, v8[2].i32[1], v159 + 8, (uint64_t)&v8[9] + 4, v247);
    v8[6].i32[1] = 0;
    if ((int)(*((_DWORD *)v158 + 6) + __clz(*((_DWORD *)v158 + 8)) - 32) > v234)
      return 4294967293;
    if (*((_DWORD *)v158 + 12))
      v8[5].i32[1] = 1;
    return ((int)v23 / v8[2].i32[1]);
  }
  return result;
}

uint64_t celt_decode_lost(_DWORD *a1, _WORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  _DWORD *v47;
  char v48;
  _DWORD *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  size_t v58;
  void **v59;
  uint64_t v60;
  char *v61;
  unsigned int *v62;
  int v63;
  size_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int8x16_t v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int64x2_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  __int16 v94;
  unsigned __int16 v95;
  int v96;
  __int16 *v97;
  uint64_t v98;
  __int16 *v99;
  uint64_t v100;
  int v101;
  int v102;
  char v103;
  unsigned int v104;
  __int16 v105;
  unsigned __int16 v106;
  int v107;
  int v108;
  unsigned int v109;
  __int16 v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  __int16 *v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  __int16 v140;
  int v141;
  uint64_t v142;
  __int16 *v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  __int16 *v150;
  int *v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t result;
  uint64_t v159;
  _DWORD *v160;
  int v161;
  _WORD *v162;
  int v163;
  unsigned int *v164;
  __int128 v165;
  __int128 v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  size_t v172;
  __int16 *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  signed int v186[7];
  _QWORD v187[2];
  int *v188[3];

  LODWORD(v184) = a4;
  v4 = a3;
  v162 = a2;
  v6 = 0;
  v188[2] = *(int **)MEMORY[0x1E0C80C00];
  v188[0] = 0;
  v188[1] = 0;
  v7 = *(_QWORD *)a1;
  v181 = *(int *)(*(_QWORD *)a1 + 8);
  v8 = *(int *)(v7 + 4);
  v179 = *(unsigned int *)(v7 + 4);
  v9 = a1[3];
  v187[0] = 0;
  v187[1] = 0;
  v180 = v8;
  v10 = v8 + 2048;
  v177 = (int)a3;
  v174 = -(uint64_t)(int)a3;
  if (v9 <= 1)
    v11 = 1;
  else
    v11 = v9;
  LODWORD(v172) = v11;
  v164 = (unsigned int *)v7;
  v183 = *(_QWORD *)(v7 + 24);
  v12 = a1;
  do
  {
    v188[v6] = v12 + 21;
    v187[v6++] = (char *)v12 + 8276 - 4 * (int)a3;
    v12 += v10;
  }
  while (v11 != v6);
  v169 = (v10 * v9);
  v13 = (uint64_t)&a1[(int)v169 + 21];
  v14 = a1[13];
  v15 = (int)a1[6];
  v161 = a1[5];
  v17 = v14 > 4 || v15 != 0;
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v159 - v18;
  bzero((char *)&v159 - v18, v20);
  v178 = a1;
  v182 = v4;
  v170 = v9;
  v175 = v14;
  v176 = v11;
  v160 = v19;
  if (!v17)
  {
    v184 = v13;
    v185 = 0;
    if (v14)
    {
      v29 = a1[12];
      v30 = 26214;
    }
    else
    {
      MEMORY[0x1E0C80A78](v21);
      bzero(&v159 - 256, 0x800uLL);
      pitch_downsample(v188, (char *)&v159 - 2048, 2048, v9);
      v21 = pitch_search((__int16 *)&v159 - 664, (__int16 *)&v159 - 1024, 1328, 620, &v185);
      v29 = 720 - v185;
      a1[12] = 720 - v185;
      v30 = 0x7FFF;
    }
    LODWORD(v169) = v30;
    v185 = v29;
    v63 = v180;
    MEMORY[0x1E0C80A78](v21);
    v65 = (char *)&v159 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v65, v64);
    MEMORY[0x1E0C80A78](v66);
    v173 = (__int16 *)&v159;
    v67 = &v159 - 256;
    bzero(&v159 - 256, 0x800uLL);
    v68 = 0;
    v69 = *((_QWORD *)v164 + 8);
    v181 = (2048 - v182);
    v172 = 4 * (int)v181;
    if ((int)v179 >= 0)
      v70 = v179;
    else
      v70 = v179 + 1;
    v168 = (v70 >> 1);
    v183 = (v179 + v182);
    v71 = (int)v179 + (int)v182;
    LODWORD(v171) = 2047 - v182;
    v163 = v63 - v182 + 2048;
    v167 = v63 - 1;
    v166 = xmmword_1DECD64D0;
    v165 = xmmword_1DECD64E0;
    v72 = v184;
    while (1)
    {
      v73 = 0;
      v74 = (char *)v188[v68];
      v75 = 4096;
      do
      {
        *(int16x8_t *)&v67[v73] = vrshrn_high_n_s32(vrshrn_n_s32(*(int32x4_t *)&v74[v75], 0xCuLL), *(int32x4_t *)&v74[v75 + 16], 0xCuLL);
        v75 += 32;
        v73 += 2;
      }
      while (v73 != 256);
      if (!v14)
      {
        _celt_autocorr((char *)&v159 - 2048, (unsigned int *)v186, v69, v180, 24, 1024);
        v76.i64[0] = 0xFFFF0000FFFFLL;
        v76.i64[1] = 0xFFFF0000FFFFLL;
        v186[0] += v186[0] >> 13;
        v77 = 1;
        v78 = (int64x2_t)v165;
        v79 = (int64x2_t)v166;
        do
        {
          v80.i64[0] = (v78.i32[0] * v78.i32[0]);
          v80.i64[1] = (v78.i32[2] * v78.i32[2]);
          v81.i64[0] = (v79.i32[0] * v79.i32[0]);
          v81.i64[1] = (v79.i32[2] * v79.i32[2]);
          v82 = *(int32x4_t *)&v186[v77];
          v83 = vuzp1q_s32(v80, v81);
          v84 = vaddq_s32(v83, v83);
          v85 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v82, v76), v84), 0xFuLL);
          v86 = vmulq_s32(v84, vshrq_n_s32(v82, 0x10uLL));
          *(int32x4_t *)&v186[v77] = vsubq_s32(vsubq_s32(v82, vaddq_s32(v86, v86)), v85);
          v87 = vdupq_n_s64(4uLL);
          v79 = vaddq_s64(v79, v87);
          v78 = vaddq_s64(v78, v87);
          v77 += 4;
        }
        while (v77 != 25);
        _celt_lpc((_WORD *)(v72 + 2 * (24 * v68)), v186, 24);
      }
      v88 = 0;
      v89 = v185;
      v90 = 2 * v185;
      if (2 * v185 >= 1024)
        v90 = 1024;
      v91 = v90;
      v92 = 2047 - v90;
      do
      {
        *(_WORD *)((char *)v186 + v88) = (*(_DWORD *)&v74[4 * v92--] + 2048) >> 12;
        v88 += 2;
      }
      while (v88 != 48);
      v93 = v184 + 2 * (24 * v68);
      celt_fir(&v173[-v91], v93, (uint64_t)&v173[-v91], v91, 24, v186);
      if (v89 < 1)
      {
        v114 = 1;
        v113 = 1;
      }
      else
      {
        v94 = 0;
        v95 = 0;
        v96 = 1024 - v91;
        v97 = (__int16 *)v67 + 1024 - (int)v91;
        v98 = v91;
        v99 = v97;
        v100 = v91;
        do
        {
          v102 = *v99++;
          v101 = v102;
          if (v102 >= v95)
            v95 = v101;
          if (v94 >= v101)
            v94 = v101;
          --v100;
        }
        while (v100);
        v103 = 0;
        if (v95 <= -v94)
          v104 = -v94;
        else
          v104 = v95;
        if (v104 >= 0x400)
        {
          v105 = 0;
          v106 = 0;
          do
          {
            v108 = *v97++;
            v107 = v108;
            if (v108 >= v106)
              v106 = v107;
            if (v105 >= v107)
              v105 = v107;
            --v98;
          }
          while (v98);
          if (v106 <= -v105)
            v109 = -v105;
          else
            v109 = v106;
          v110 = ((62 - 2 * __clz(v109)) & 0xFFFE) - 20;
          if (v109)
            v103 = v110;
          else
            v103 = -20;
        }
        LODWORD(v111) = (int)v91 >> 1;
        if ((int)v91 >> 1 <= 1)
          v111 = 1;
        else
          v111 = v111;
        v112 = 1024 - ((int)v91 >> 1);
        v113 = 1;
        v114 = 1;
        do
        {
          v115 = *((__int16 *)v67 + v112);
          v114 += (v115 * v115) >> v103;
          v116 = *((__int16 *)v67 + v96);
          v113 += (v116 * v116) >> v103;
          ++v96;
          ++v112;
          --v111;
        }
        while (v111);
      }
      if (v114 >= v113)
        v117 = v113;
      else
        v117 = v114;
      v118 = frac_div32(v117 >> 1, v113);
      v119 = celt_sqrt(v118);
      memmove(v74, &v74[4 * v177], v172);
      if ((int)v71 < 1)
      {
        v121 = 0;
      }
      else
      {
        v120 = 0;
        v121 = 0;
        v122 = 1024 - v185;
        v123 = (v119 * (_DWORD)v169) >> 15;
        v124 = v183;
        v125 = 1024 - v185 - v182 + 1024;
        v126 = v181;
        do
        {
          v127 = v185;
          if (v120 < v185)
            v127 = 0;
          else
            LOWORD(v123) = (v119 * (__int16)v123) >> 15;
          v128 = v120 - v127;
          *(_DWORD *)&v74[4 * v126] = (((__int16)v123 * *((__int16 *)v67 + v128 + v122)) >> 3) & 0xFFFFF000;
          v129 = (16 * *(_DWORD *)&v74[4 * v125 + 4 * v128] + 0x8000) >> 16;
          v121 += (v129 * v129) >> 8;
          v120 = v128 + 1;
          ++v126;
          --v124;
        }
        while (v124);
      }
      v130 = 0;
      v131 = v171;
      do
      {
        *(_WORD *)((char *)v186 + v130) = (*(_DWORD *)&v74[4 * v131--] + 2048) >> 12;
        v130 += 2;
      }
      while (v130 != 48);
      v132 = (__int16 *)v93;
      v133 = v183;
      celt_iir(&v74[4 * v174 + 0x2000], v132, (uint64_t)&v74[4 * v174 + 0x2000], v183, 24, v186);
      if ((int)v133 < 1)
      {
        v47 = v178;
        if (v121)
        {
          v134 = 0;
LABEL_118:
          if (v121 < v134)
          {
            v139 = frac_div32((v121 >> 1) + 1, v134 + 1);
            v140 = celt_sqrt(v139);
            v141 = 2 * v140;
            if ((int)v179 >= 1)
            {
              v142 = v179;
              v143 = (__int16 *)v69;
              v144 = v181;
              do
              {
                v145 = *v143++;
                *(_DWORD *)&v74[4 * v144] = ((*(int *)&v74[4 * v144] >> 15) & 0xFFFFFFFE)
                                          * ((int)(((v141 ^ 0xFFFE) * v145) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                          + ((((int)(((v141 ^ 0xFFFE) * v145) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                            * (unsigned __int16)*(_DWORD *)&v74[4 * v144]) >> 15);
                ++v144;
                --v142;
              }
              while (v142);
            }
            if ((int)v182 >= 1)
            {
              v146 = v163;
              v147 = v180;
              do
              {
                *(_DWORD *)&v74[4 * v146] = v141 * (*(int *)&v74[4 * v146] >> 16)
                                          + (((unsigned __int16)*(_DWORD *)&v74[4 * v146] * v140) >> 15);
                ++v147;
                ++v146;
              }
              while (v147 < v71);
            }
          }
        }
      }
      else
      {
        v134 = 0;
        v135 = v181;
        do
        {
          v136 = (16 * *(_DWORD *)&v74[4 * v135] + 0x8000) >> 16;
          v134 += (v136 * v136) >> 8;
          ++v135;
          --v133;
        }
        while (v133);
        v47 = v178;
        if (v121 > v134 >> 2)
          goto LABEL_118;
        if ((int)v71 >= 1)
        {
          v137 = v183;
          v138 = v181;
          do
          {
            *(_DWORD *)&v74[4 * v138++] = 0;
            --v137;
          }
          while (v137);
        }
      }
      comb_filter(v65, v74 + 0x2000, v47[14], v47[14], v180, (__int16)-*((_WORD *)v47 + 32), (__int16)-*((_WORD *)v47 + 32), v47[17], v47[17], 0, 0);
      if ((int)v179 > 1)
      {
        v148 = v74 + 0x2000;
        v149 = v168;
        v150 = (__int16 *)v69;
        v151 = (int *)v65;
        v152 = v167;
        do
        {
          v154 = *v150++;
          v153 = v154;
          v155 = (*(int *)&v65[4 * v152] >> 16) * v154;
          v156 = *(__int16 *)(v69 + 2 * v152);
          v157 = *v151++;
          *v148++ = (((unsigned __int16)v157 * v156) >> 15)
                  + (((unsigned __int16)*(_DWORD *)&v65[4 * v152--] * v153) >> 15)
                  + 2 * (v155 + (v157 >> 16) * v156);
          --v149;
        }
        while (v149);
      }
      ++v68;
      v14 = v175;
      v72 = v184;
      if (v68 == v176)
      {
        LODWORD(v4) = v182;
        v9 = v170;
        v62 = v164;
        v53 = v161;
        v49 = v160;
        goto LABEL_130;
      }
    }
  }
  v173 = (__int16 *)(v13 + 48 * v9);
  v22 = v14;
  v23 = (int)a1[7];
  LODWORD(v24) = v164[3];
  if ((int)v23 < (int)v24)
    LODWORD(v24) = a1[7];
  LODWORD(v180) = v24;
  if ((int)v15 <= (int)v24)
    v24 = v24;
  else
    v24 = v15;
  v171 = v24;
  MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v159 - v25;
  bzero((char *)&v159 - v25, v27);
  if (v22 <= 4)
  {
    v28 = (uint64_t)v173;
    v31 = 0;
    if (v22)
      v32 = -512;
    else
      v32 = -1536;
    v33 = (uint64_t)&a1[12 * v9 + 21 + (int)v169] + 2 * v15;
    v34 = 2 * v181;
    do
    {
      if ((int)v15 < (int)v23)
      {
        v35 = v23 - v15;
        v36 = (_WORD *)v33;
        do
        {
          *v36++ += v32;
          --v35;
        }
        while (v35);
      }
      ++v31;
      v33 += v34;
    }
    while (v31 != v11);
  }
  else
  {
    v28 = (uint64_t)&v173[2 * v181 + 2 * v181 + 2 * v181];
  }
  v37 = a1[10];
  v173 = (__int16 *)v28;
  if (v9 >= 1)
  {
    v38 = 0;
    v39 = 0;
    v40 = (int)v171;
    v174 = v15;
    do
    {
      LODWORD(v181) = v39;
      if ((int)v15 < (int)v180)
      {
        v41 = v39 * v4;
        do
        {
          v42 = *(__int16 *)(v183 + 2 * v15);
          v43 = v42 << v184;
          ++v15;
          v44 = (*(__int16 *)(v183 + 2 * v15) - v42) << v184;
          if (v44 >= 1)
          {
            v45 = &v26[2 * v38 + 2 * v43];
            v46 = ((*(__int16 *)(v183 + 2 * v15) - v42) << v184);
            do
            {
              v37 = celt_lcg_rand(v37);
              *(_WORD *)v45 = v37 >> 20;
              v45 += 2;
              --v46;
            }
            while (v46);
          }
          renormalise_vector((__int16 *)&v26[2 * v43 + 2 * v41], v44, 0x7FFF);
        }
        while (v15 != v40);
      }
      v39 = v181 + 1;
      LODWORD(v4) = v182;
      v38 += v182;
      v9 = v170;
      v15 = v174;
    }
    while ((_DWORD)v181 + 1 != v170);
  }
  v47 = v178;
  v178[10] = v37;
  v48 = v184;
  v49 = v160;
  v50 = v171;
  denormalise_bands((uint64_t)v164, (uint64_t)v26, (uint64_t)v160, (uint64_t)v173, v15, v171, v9, 1 << v184);
  v51 = 0;
  v52 = *(__int16 *)(v183 + 2 * v50) << v48;
  v53 = v161;
  v54 = (int)v4 / v161;
  v55 = v176;
  v56 = v172;
  do
  {
    v57 = v52;
    if (v53 != 1)
    {
      if (v52 >= v54)
        v57 = v54;
      else
        v57 = v52;
    }
    if (v57 < (int)v4)
      bzero(&v49[v57 + v51], 4 * (~v57 + v4) + 4);
    v51 += v4;
    --v56;
  }
  while (v56);
  v58 = 4 * (((int)v179 >> 1) - (int)v4 + 2048);
  v59 = (void **)v188;
  v60 = v177;
  do
  {
    v61 = (char *)*v59++;
    memmove(v61, &v61[4 * v60], v58);
    --v55;
  }
  while (v55);
  v62 = v164;
  compute_inv_mdcts(v164, 0, (uint64_t)v49, (uint64_t)v187, v9, v184);
  v14 = v175;
LABEL_130:
  result = deemphasis((uint64_t)v187, v162, v4, v9, v53, (__int16 *)v62 + 8, (uint64_t)(v47 + 19), v49);
  v47[13] = v14 + 1;
  return result;
}

unsigned int *compute_inv_mdcts(unsigned int *result, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unsigned int *v6;
  uint64_t v7;
  signed int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v6 = result;
  v7 = result[1];
  v8 = result[10];
  if (a2)
  {
    v9 = result[8];
  }
  else
  {
    v8 <<= a6;
    v9 = result[8] - a6;
    a2 = 1;
  }
  v20 = 0;
  v10 = 0;
  if (a5 <= 1)
    v11 = 1;
  else
    v11 = a5;
  v19 = v11;
  v12 = 4 * v8;
  v18 = v8 * a2;
  v13 = a2;
  v21 = a4;
  do
  {
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = (int *)(a3 + 4 * v20);
      v16 = v13;
      do
      {
        result = (unsigned int *)clt_mdct_backward((int *)v6 + 18, v15, *(_QWORD *)(a4 + 8 * v10) + v14, *((_QWORD *)v6 + 8), v7, v9, v13);
        a4 = v21;
        v14 += v12;
        ++v15;
        --v16;
      }
      while (v16);
    }
    ++v10;
    v20 += v18;
  }
  while (v10 != v19);
  return result;
}

uint64_t deemphasis(uint64_t result, _WORD *a2, int a3, int a4, int a5, __int16 *a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  _WORD *v27;
  int v28;

  v8 = 0;
  v9 = 0;
  v10 = *a6;
  v11 = 2 * v10;
  if (a4 <= 1)
    v12 = 1;
  else
    v12 = a4;
  v13 = 2 * a4;
  do
  {
    v14 = *(_DWORD *)(a7 + 4 * v8);
    v15 = *(int **)(result + 8 * v8);
    if (a5 <= 1)
    {
      v20 = a3;
      v21 = a2;
      if (a3 >= 1)
      {
        do
        {
          v22 = *v15++;
          v23 = v22 + v14;
          v14 = v11 * ((v22 + v14) >> 16) + (((unsigned __int16)(v22 + v14) * v10) >> 15);
          v24 = (v23 + 2048) >> 12;
          if (v24 <= -32768)
            v24 = -32768;
          if (v24 >= 0x7FFF)
            LOWORD(v24) = 0x7FFF;
          *v21 = v24;
          v21 = (_WORD *)((char *)v21 + v13);
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      if (a3 >= 1)
      {
        v16 = a3;
        v17 = a8;
        do
        {
          v18 = *v15++;
          v19 = v18 + v14;
          v14 = v11 * ((v18 + v14) >> 16) + (((unsigned __int16)(v18 + v14) * v10) >> 15);
          *v17++ = v19;
          --v16;
        }
        while (v16);
      }
      v9 = 1;
    }
    *(_DWORD *)(a7 + 4 * v8) = v14;
    if (v9 && a3 / a5 >= 1)
    {
      v25 = (a3 / a5);
      v26 = a8;
      v27 = a2;
      do
      {
        v28 = (*v26 + 2048) >> 12;
        if (v28 <= -32768)
          v28 = -32768;
        if (v28 >= 0x7FFF)
          LOWORD(v28) = 0x7FFF;
        *v27 = v28;
        v27 = (_WORD *)((char *)v27 + v13);
        v26 += a5;
        --v25;
      }
      while (v25);
    }
    ++v8;
    ++a2;
  }
  while (v8 != v12);
  return result;
}

uint64_t opus_custom_decoder_ctl(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;

  result = 4294967291;
  switch(a2)
  {
    case 10007:
      if (!a9)
        goto LABEL_29;
      result = 0;
      *a9 = a1[11];
      a1[11] = 0;
      break;
    case 10008:
      if (((_DWORD)a9 - 3) < 0xFFFFFFFE)
        goto LABEL_29;
      result = 0;
      a1[4] = (_DWORD)a9;
      break;
    case 10009:
    case 10011:
    case 10013:
    case 10014:
      return result;
    case 10010:
      if ((a9 & 0x80000000) != 0 || (int)a9 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
        goto LABEL_29;
      result = 0;
      a1[6] = (_DWORD)a9;
      break;
    case 10012:
      if ((int)a9 < 1 || (int)a9 > *(_DWORD *)(*(_QWORD *)a1 + 8))
        goto LABEL_29;
      result = 0;
      a1[7] = (_DWORD)a9;
      break;
    case 10015:
      if (a9)
      {
        result = 0;
        *(_QWORD *)a9 = *(_QWORD *)a1;
      }
      else
      {
LABEL_29:
        result = 0xFFFFFFFFLL;
      }
      break;
    case 10016:
      result = 0;
      a1[8] = (_DWORD)a9;
      break;
    default:
      switch(a2)
      {
        case 4027:
          v11 = a9;
          if (!a9)
            goto LABEL_29;
          result = 0;
          v12 = a1[2] / a1[5];
          goto LABEL_28;
        case 4028:
          v14 = a1[2];
          v13 = a1[3];
          v15 = *(_DWORD *)(*(_QWORD *)a1 + 8);
          bzero(a1 + 10, (4 * *(_DWORD *)(*(_QWORD *)a1 + 4) + 8240) * v13 + 16 * v15 + 84 - 40);
          if (v15 >= 1)
          {
            LODWORD(v16) = 2 * v15;
            v17 = &a1[12 * v13 + 21 + (v14 + 2048) * v13 + v15];
            v18 = &v17[2 * v15];
            if (2 * v15 <= 1)
              v16 = 1;
            else
              v16 = v16;
            do
            {
              *v18++ = -28672;
              *v17++ = -28672;
              --v16;
            }
            while (v16);
          }
          return 0;
        case 4031:
          v11 = a9;
          if (!a9)
            goto LABEL_29;
          result = 0;
          v12 = a1[10];
          goto LABEL_28;
        case 4033:
          v11 = a9;
          if (!a9)
            goto LABEL_29;
          result = 0;
          v12 = a1[14];
LABEL_28:
          *v11 = v12;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t unquant_coarse_energy(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD v28[2];

  v10 = a2;
  v27 = result;
  v28[1] = *MEMORY[0x1E0C80C00];
  v28[0] = 0;
  if (a5)
  {
    v25 = 0;
    v26 = 4915;
  }
  else
  {
    v25 = pred_coef[a8];
    v26 = beta_coef[a8];
  }
  if (a2 < a3)
  {
    v11 = (char *)&e_prob_model + 84 * a8 + 42 * a5;
    v12 = 8 * *(_DWORD *)(a6 + 8) + 32;
    if (a7 <= 1)
      v13 = 1;
    else
      v13 = a7;
    do
    {
      v14 = 0;
      if (v10 >= 20)
        v15 = 20;
      else
        v15 = v10;
      v23 = (2 * v15) | 1;
      v24 = 2 * v15;
      do
      {
        v16 = v12 - *(_DWORD *)(a6 + 24) - __clz(*(_DWORD *)(a6 + 32));
        if (v16 < 15)
        {
          if (v16 < 2)
          {
            if (v16 == 1)
              result = -ec_dec_bit_logp(a6, 1);
            else
              result = 0xFFFFFFFFLL;
          }
          else
          {
            v17 = ec_dec_icdf(a6, small_energy_icdf, 2);
            result = -(v17 & 1) ^ (v17 >> 1);
          }
        }
        else
        {
          result = ec_laplace_decode((uint64_t *)a6, v11[v24] << 7, v11[v23] << 6);
        }
        v18 = v10 + *(_DWORD *)(v27 + 8) * v14;
        v19 = *(__int16 *)(a4 + 2 * v18);
        if (v19 <= -9216)
          v19 = -9216;
        v20 = *((_DWORD *)v28 + v14) + ((_DWORD)result << 17);
        v21 = v20 + ((v25 * v19 + 128) >> 8);
        if (v21 <= -3670016)
          v21 = -3670016;
        *(_WORD *)(a4 + 2 * v18) = (v21 + 64) >> 7;
        *((_DWORD *)v28 + v14++) = v20 - v26 * (__int16)(4 * result);
      }
      while (v13 != v14);
      ++v10;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t unquant_fine_energy(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  signed int v14;
  int i;
  uint64_t v16;

  if (a2 < a3)
  {
    v11 = result;
    if (a7 <= 1)
      v12 = 1;
    else
      v12 = a7;
    v13 = a2;
    do
    {
      v14 = *(_DWORD *)(a5 + 4 * v13);
      if (v14 >= 1)
      {
        for (i = 0; i != v12; ++i)
        {
          result = ec_dec_bits(a6, v14);
          v14 = *(_DWORD *)(a5 + 4 * v13);
          v16 = v13 + *(int *)(v11 + 8) * (uint64_t)i;
          *(_WORD *)(a4 + 2 * v16) = *(_WORD *)(a4 + 2 * v16) + ((((_DWORD)result << 10) | 0x200) >> v14) - 512;
        }
      }
      ++v13;
    }
    while ((_DWORD)v13 != a3);
  }
  return result;
}

uint64_t unquant_energy_finalise(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8, int a9)
{
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  char v25;
  uint64_t v26;
  int v27;

  v14 = result;
  v15 = 0;
  if (a9 <= 1)
    v16 = 1;
  else
    v16 = a9;
  v22 = a2;
  v17 = a3;
  v18 = 1;
  v26 = a3;
  do
  {
    v25 = v18;
    if (a2 < a3 && a7 >= a9)
    {
      v19 = v22;
      v27 = v15;
      do
      {
        if (*(int *)(a5 + 4 * v19) <= 7 && *(_DWORD *)(a6 + 4 * v19) == v15)
        {
          for (i = 0; i != v16; ++i)
          {
            result = ec_dec_bits(a8, 1u);
            v21 = v19 + *(int *)(v14 + 8) * (uint64_t)i;
            *(_WORD *)(a4 + 2 * v21) += ((__int16)((_WORD)result << 10) - 512) >> (*(_BYTE *)(a5 + 4 * v19) + 1);
          }
          a7 -= v16;
          v17 = v26;
          v15 = v27;
        }
        ++v19;
      }
      while (v19 < v17 && a7 >= a9);
    }
    v18 = 0;
    v15 = 1;
  }
  while ((v25 & 1) != 0);
  return result;
}

uint64_t alg_quant(__int16 *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  signed int v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 *v31;
  int *v32;
  _WORD *v33;
  int v34;
  int v35;
  int v36;
  int i;
  uint64_t v38;
  int v39;
  __int16 v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t j;
  int v48;
  uint64_t result;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[12];
  int v58;
  uint64_t *v59;
  uint64_t v60;

  v59 = a6;
  v60 = *MEMORY[0x1E0C80C00];
  v11 = 2 * a2;
  MEMORY[0x1E0C80A78](a1);
  v12 = &v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v12, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (int *)&v57[-v14];
  bzero(&v57[-v14], v16);
  MEMORY[0x1E0C80A78](v17);
  bzero(v12, v11);
  exp_rotation((uint64_t)a1, a2, 1, a5, a3, a4);
  v18 = 0;
  if (a2 <= 1)
    v19 = 1;
  else
    v19 = a2;
  do
  {
    v20 = a1[v18];
    if (v20 <= 0)
    {
      a1[v18] = -(__int16)v20;
      v21 = -1;
    }
    else
    {
      v21 = 1;
    }
    *(_WORD *)&v12[2 * v18] = v21;
    v15[v18] = 0;
    *(_WORD *)&v12[2 * v18++] = 0;
  }
  while (v19 != v18);
  if (a3 <= a2 >> 1)
  {
    v27 = 0;
    v28 = 0;
    v34 = a3;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    do
      v23 += a1[v22++];
    while (v19 != v22);
    v58 = a5;
    if (v23 <= a3)
    {
      v23 = 0x4000;
      *a1 = 0x4000;
      if (a2 <= 2)
        v24 = 2;
      else
        v24 = a2;
      bzero(a1 + 1, 2 * (v24 - 1));
    }
    v25 = celt_rcp(v23);
    v26 = celt_rcp(v23);
    v27 = 0;
    LOWORD(v28) = 0;
    v29 = (int)((v25 & 0xFFFF0000 | v26) * (__int16)(a3 - 1)) >> 16;
    v30 = v19;
    v31 = a1;
    v32 = v15;
    v33 = v12;
    v34 = a3;
    do
    {
      v35 = *v31++;
      v36 = (v29 * v35) >> 15;
      *v32++ = v36;
      v28 = (__int16)v36 * (__int16)v36 + (__int16)v28;
      v27 += (__int16)v36 * v35;
      *v33++ = 2 * v36;
      v34 -= v36;
      --v30;
    }
    while (v30);
    a5 = v58;
  }
  if (v34 <= a2 + 3)
  {
    if (v34 >= 1)
    {
      for (i = 0; i != v34; ++i)
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 32 - __clz(a3 - v34 + 1 + i);
        v42 = v28 + 1;
        v43 = -32767;
        do
        {
          v44 = (v27 + a1[v38]) >> v41;
          v45 = (2 * (__int16)v44 * (__int16)v44) >> 16;
          if (v45 * v40 > v43 * (__int16)(*(_WORD *)&v12[2 * v38] + v42))
          {
            v39 = v38;
            v43 = v45;
            v40 = *(_WORD *)&v12[2 * v38] + v42;
          }
          ++v38;
        }
        while (v19 != v38);
        v46 = *(unsigned __int16 *)&v12[2 * v39];
        v27 += a1[v39];
        *(_WORD *)&v12[2 * v39] = v46 + 2;
        v28 = v46 + v42;
        ++v15[v39];
      }
    }
  }
  else
  {
    *v15 += v34;
  }
  for (j = 0; j != v19; ++j)
  {
    v48 = *(__int16 *)&v12[2 * j];
    a1[j] *= *(_WORD *)&v12[2 * j];
    if (v48 < 0)
      v15[j] = -v15[j];
  }
  encode_pulses((uint64_t)v15, a2, a3, v59);
  if (a5 < 2)
    return 1;
  v50 = 0;
  LODWORD(result) = 0;
  v51 = a2 / a5;
  if (a2 / a5 <= 1)
    v52 = 1;
  else
    v52 = v51;
  v53 = 4 * v51;
  do
  {
    v54 = v15;
    v55 = v52;
    do
    {
      v56 = *v54++;
      result = ((v56 != 0) << v50) | result;
      --v55;
    }
    while (v55);
    ++v50;
    v15 = (int *)((char *)v15 + v53);
  }
  while (v50 != a5);
  return result;
}

uint64_t exp_rotation(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  __int16 *v9;
  int v10;
  signed int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  int v25;
  int v26;
  int v27;

  if (a2 > 2 * a5 && a6)
  {
    v9 = (__int16 *)result;
    v10 = (a2 << 16 >> 1) - (__int16)a2;
    v11 = a2 + exp_rotation_SPREAD_FACTOR[a6 - 1] * a5;
    v12 = (v10 >> 16) * (celt_rcp(v11) >> 16);
    v13 = (((unsigned __int16)celt_rcp(v11) * (v10 >> 16)) >> 15) + 2 * v12;
    v14 = (__int16)(v13 + ((((int)celt_rcp(v11) >> 16) * (unsigned __int16)v10) >> 15));
    v15 = (v14 * v14) >> 16;
    v16 = celt_cos_norm(v15);
    result = celt_cos_norm(v15 ^ 0x7FFF);
    v17 = result;
    if (a2 >= 8 * a4)
    {
      v18 = 0;
      v19 = a4;
      do
      {
        v20 = (a4 >> 2) + v19 * (v18 + 2);
        ++v18;
        v19 += a4;
      }
      while (v20 < a2);
    }
    else
    {
      v18 = 0;
    }
    if (a4 >= 1)
    {
      v21 = a2 / a4;
      v22 = a4;
      while ((a3 & 0x80000000) == 0)
      {
        result = (uint64_t)exp_rotation1(v9, v21, 1, v16, (__int16)-(__int16)v17);
        if (v18)
        {
          v23 = v9;
          v24 = v21;
          v25 = v18;
          v26 = v17;
          v27 = (__int16)-(__int16)v16;
LABEL_15:
          result = (uint64_t)exp_rotation1(v23, v24, v25, v26, v27);
        }
        v9 += v21;
        if (!--v22)
          return result;
      }
      if (v18)
        exp_rotation1(v9, v21, v18, v17, v16);
      v23 = v9;
      v24 = v21;
      v25 = 1;
      v26 = v16;
      v27 = v17;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t alg_unquant(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v14;
  int *v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  unsigned int v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  __int16 v27;
  int v28;
  uint64_t i;
  uint64_t result;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  int v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v15 = (int *)((char *)v38 - v14);
  bzero((char *)v38 - v14, v16);
  decode_pulses(v15, a2, a3, a6);
  v17 = 0;
  if (a2 <= 1)
    v18 = 1;
  else
    v18 = a2;
  v19 = v18;
  v20 = v15;
  do
  {
    v21 = *(__int16 *)v20++;
    v17 += v21 * v21;
    --v19;
  }
  while (v19);
  v22 = __clz(v17);
  v23 = (int)(31 - v22) >> 1;
  v24 = (31 - v22) & 0xFE;
  v25 = v17 >> (v24 - 14);
  v26 = v17 << (14 - v24);
  if (v22 >= 0x10)
    v27 = v26;
  else
    v27 = v25;
  v28 = celt_rsqrt_norm(v27);
  for (i = 0; i != v18; ++i)
    *(_WORD *)(a1 + 2 * i) = (int)(((1 << (v23 + 1)) >> 1)
                                 + SLOWORD(v15[i]) * ((2 * a7 * v28 + 0x8000) >> 16)) >> (v23 + 1);
  exp_rotation(a1, a2, -1, a5, a3, a4);
  if (a5 < 2)
    return 1;
  v31 = 0;
  LODWORD(result) = 0;
  v32 = a2 / a5;
  if (a2 / a5 <= 1)
    v33 = 1;
  else
    v33 = v32;
  v34 = 4 * v32;
  do
  {
    v35 = v15;
    v36 = v33;
    do
    {
      v37 = *v35++;
      result = ((v37 != 0) << v31) | result;
      --v36;
    }
    while (v36);
    ++v31;
    v15 = (int *)((char *)v15 + v34);
  }
  while (v31 != a5);
  return result;
}

uint64_t renormalise_vector(__int16 *a1, int a2, int a3)
{
  int v4;
  __int16 *v5;
  unsigned int v6;
  int v7;
  __int16 *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  uint64_t result;

  v4 = a2;
  v5 = a1;
  v6 = 1;
  if (a2 >= 1)
  {
    v7 = a2;
    v8 = a1;
    do
    {
      v9 = *v8++;
      v6 += v9 * v9;
      --v7;
    }
    while (v7);
  }
  v10 = __clz(v6) ^ 0x1F;
  v11 = v10 >> 1;
  v12 = v6 >> (2 * (v10 >> 1) - 14);
  v13 = v6 << (14 - 2 * (v10 >> 1));
  if (v10 <= 0xF)
    v14 = v13;
  else
    v14 = v12;
  result = celt_rsqrt_norm(v14);
  if (v4 >= 1)
  {
    do
    {
      *v5 = (int)(((2 << v11) >> 1) + ((2 * a3 * (int)result + 0x8000) >> 16) * *v5) >> (v11 + 1);
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t stereo_itheta(__int16 *a1, __int16 *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  __int16 v16;
  signed int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  if (a3)
  {
    if (a4 >= 1)
    {
      v4 = a4;
      LODWORD(v5) = 1;
      LODWORD(v6) = 1;
      do
      {
        v8 = *a1++;
        v7 = v8;
        v9 = v8 >> 1;
        v10 = *a2++;
        v6 = (v6 + ((v10 >> 1) + (v7 >> 1)) * ((v10 >> 1) + (v7 >> 1)));
        v5 = (v5 + (v9 - (v10 >> 1)) * (v9 - (v10 >> 1)));
        --v4;
      }
      while (v4);
      goto LABEL_11;
    }
LABEL_10:
    v6 = 1;
    v5 = 1;
    goto LABEL_11;
  }
  if (a4 < 1)
    goto LABEL_10;
  v11 = a4;
  LODWORD(v5) = 1;
  LODWORD(v6) = 1;
  do
  {
    v13 = *a1++;
    v12 = v13;
    v14 = *a2++;
    v6 = (v6 + v12 * v12);
    v5 = (v5 + v14 * v14);
    --v11;
  }
  while (v11);
LABEL_11:
  v15 = celt_sqrt(v6);
  v16 = celt_sqrt(v5);
  v17 = v16;
  if (v16 >= v15)
  {
    v24 = v15 >> 1;
    v25 = v24 * ((int)celt_rcp(v16) >> 16);
    v26 = (((unsigned __int16)celt_rcp(v17) * v24) >> 15) + 2 * v25;
    v27 = v26 + ((((int)celt_rcp(v17) >> 16) * ((v15 & 1) << 15)) >> 15);
    if (v27 >= 0x7FFF)
      LOWORD(v27) = 0x7FFF;
    v23 = 25736
        - ((__int16)((((((((9872 * (__int16)v27 - 782663680) >> 16) * 2 * (__int16)v27 - 1343488) >> 16)
                      * 2
                      * (__int16)v27
                      + 2147450880) >> 16)
                    * (__int16)v27
                    + 0x4000) >> 15) >> 1);
  }
  else
  {
    v18 = v16;
    v19 = v16 >> 1;
    v20 = v19 * ((int)celt_rcp(v15) >> 16);
    v21 = (((unsigned __int16)celt_rcp(v15) * v19) >> 15) + 2 * v20;
    v22 = v21 + ((((int)celt_rcp(v15) >> 16) * ((v18 & 1) << 15)) >> 15);
    if (v22 >= 0x7FFF)
      LOWORD(v22) = 0x7FFF;
    v23 = (int)((((((((9872 * (__int16)v22 - 782663680) >> 16) * 2 * (__int16)v22 - 1343488) >> 16)
                               * 2
                               * (__int16)v22
                               + 2147450880) >> 16)
                             * (__int16)v22
                             + 0x4000) >> 15 << 16) >> 17;
  }
  return ((20861 * (__int16)v23) >> 15);
}

__int16 *exp_rotation1(__int16 *result, int a2, int a3, int a4, int a5)
{
  int v5;
  __int16 *v6;
  int v7;
  int v8;
  int v9;
  __int16 *v10;
  int v11;
  int v12;
  int v13;

  v5 = a2 - a3;
  if (a2 - a3 >= 1)
  {
    v6 = result;
    do
    {
      v7 = *v6;
      v8 = v6[a3];
      v6[a3] = (v7 * a5 + v8 * a4) >> 15;
      *v6++ = (v7 * a4 - v8 * a5) >> 15;
      --v5;
    }
    while (v5);
  }
  v9 = ~(2 * a3) + a2;
  if (v9 >= 0)
  {
    v10 = &result[v9];
    v11 = a2 - 2 * a3;
    do
    {
      v12 = *v10;
      v13 = v10[a3];
      v10[a3] = (v12 * a5 + v13 * a4) >> 15;
      *v10-- = (v12 * a4 - v13 * a5) >> 15;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t isqrt32(unsigned int a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  LODWORD(result) = 0;
  v3 = (int)(31 - __clz(a1)) >> 1;
  v4 = 1 << v3;
  do
  {
    v5 = (v4 + 2 * (_DWORD)result) << v3;
    if (v5 <= a1)
    {
      v6 = v4;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    a1 -= v5;
    result = v6 + result;
    v4 >>= 1;
  }
  while (v3-- > 0);
  return result;
}

uint64_t frac_div32(int a1, unsigned int a2)
{
  char v2;
  char v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  signed int v10;
  int v11;
  int v12;
  unsigned int v13;

  v2 = __clz(a2);
  v3 = v2 - 2;
  v4 = 2 - v2;
  if (a2 >> 30)
    v5 = a1 >> v4;
  else
    v5 = a1 << v3;
  v6 = (int)a2 >> v4;
  v7 = a2 << v3;
  if (a2 >> 30)
    v8 = v6;
  else
    v8 = v7;
  v9 = (int)((celt_rcp((v8 + 0x8000) >> 16) << 13) + 0x8000) >> 16;
  v10 = ((v5 >> 15) & 0xFFFFFFFE) * v9 + ((v9 * (unsigned __int16)v5) >> 15);
  v11 = (unsigned __int16)(((v5 >> 15) & 0xFFFE) * v9 + ((v9 * (unsigned __int16)v5) >> 15)) * (v8 >> 16);
  v12 = v10
      + 8
      * v9
      * ((((v5 + 2) >> 2) - 2 * (v8 >> 16) * (v10 >> 16) - ((((v10 >> 16) * (unsigned __int16)v8) >> 15) + (v11 >> 15))) >> 16)
      + 4
      * (((unsigned __int16)(((v5 + 2) >> 2)
                           - 2 * HIWORD(v8) * HIWORD(v10)
                           - ((((v10 >> 16) * (unsigned __int16)v8) >> 15)
                            + (v11 >> 15)))
        * v9) >> 15);
  v13 = 4 * v12;
  if (v12 < -536870911)
    v13 = -2147483647;
  if (v12 <= 0x1FFFFFFF)
    return v13;
  else
    return 0x7FFFFFFFLL;
}

uint64_t celt_rcp(signed int a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v1 = __clz(a1);
  v2 = a1 >> (16 - v1);
  if (v1 >= 0x10)
    LOWORD(v2) = a1 << (v1 - 16);
  v3 = (__int16)v2 ^ 0xFFFF8000;
  v4 = ((int)(-30840 * v3 + 2021130240) >> 16)
     - (((__int16)((((-30840 * v3 + 2021130240) >> 16) ^ 0x8000)
                               + ((((int)(-30840 * v3 + 2021130240) >> 16) * v3) >> 15))
                     * ((int)(-30840 * v3 + 2021130240) >> 16)) >> 15);
  v5 = (__int16)(v4
               - ((2 * (__int16)v4 * (__int16)((v4 ^ 0x8000) + (((__int16)v4 * v3) >> 15)) + 0x10000) >> 16));
  v6 = v5 << (v1 - 15);
  v7 = v5 >> (15 - v1);
  if (v1 <= 0xE)
    return v7;
  else
    return v6;
}

uint64_t celt_rsqrt_norm(__int16 a1)
{
  unsigned int v1;
  int v2;
  int v3;

  v1 = a1 ^ 0xFFFF8000;
  v2 = 2 * v1 * (((int)(6713 * v1) >> 15) + 2147470158) + 1543831552;
  v3 = (__int16)((2 * ((((__int16)(((v2 >> 16) * (v2 >> 16)) >> 15) * v1) >> 15) + (((v2 >> 16) * (v2 >> 16)) >> 15))) ^ 0x8000);
  return (__int16)(((((((24576 * v3 - 0x40000000) >> 16) * v3) >> 15) * (v2 >> 16)) >> 15)
                               + HIWORD(v2));
}

uint64_t celt_sqrt(uint64_t result)
{
  unsigned int v1;
  int v2;
  int v3;

  if ((_DWORD)result)
  {
    if ((int)result <= 0x3FFFFFFF)
    {
      v1 = __clz(result) ^ 0x1F;
      v2 = (int)result >> (2 * (v1 >> 1) - 14);
      if (v1 <= 0xF)
        LOWORD(v2) = (_DWORD)result << (14 - 2 * (v1 >> 1));
      v3 = (int)(2
               * ((__int16)v2 ^ 0xFFFF8000)
               * (unsigned __int16)(((((int)(2
                                           * ((__int16)v2 ^ 0xFFFF8000)
                                           * (unsigned __int16)(((-1328 * ((__int16)v2 ^ 0xFFFF8000)) >> 16) + 1699)
                                           - 197328896) >> 16)
                                    * ((__int16)v2 ^ 0xFFFF8000)) >> 15)
                                  + 11561)
               + 1518796800) >> 16;
      if (v1 >= 0x1C)
        return (v3 << ((v1 >> 1) - 14));
      else
        return (v3 >> (14 - (v1 >> 1)));
    }
    else
    {
      return 0x7FFFLL;
    }
  }
  return result;
}

uint64_t celt_cos_norm(int a1)
{
  unsigned int v1;
  signed int v2;
  __int16 v4;
  int v5;
  int v6;

  v1 = a1 & 0x1FFFF;
  if ((a1 & 0x1FFFFu) > 0x10000)
    v1 = 0x20000 - (a1 & 0x1FFFF);
  if ((v1 & 0x7FFF) != 0)
  {
    if (v1 >> 15)
    {
      v5 = ((int)(-65536 * v1) >> 15) * -(__int16)v1 + 0x8000;
      v6 = ((((2 * (v5 >> 16) * (unsigned __int16)(((2147483022 * (v5 >> 16) + 0x4000) >> 15) + 8277)
             - 501383168) >> 16)
           * (v5 >> 16)
           + 0x4000) >> 15)
         - (v5 >> 16);
      if (v6 < 0)
        return (__int16)((v6 ^ 0x7FFF) + 1);
      else
        return -32767;
    }
    else
    {
      v2 = ((int)(((int)(2
                       * ((2 * v1 * v1 + 0x8000) >> 16)
                       * (unsigned __int16)(((2147483022 * ((2 * v1 * v1 + 0x8000) >> 16) + 0x4000) >> 15) + 8277)
                       - 501383168) >> 16)
                * ((2 * v1 * v1 + 0x8000) >> 16)
                + 0x4000) >> 15)
         - ((2 * v1 * v1 + 0x8000) >> 16);
      if (v2 < 0)
        return (__int16)(v2 ^ 0x8000);
      else
        return 0x7FFF;
    }
  }
  else
  {
    if ((v1 & 0x1FFFF) != 0)
      v4 = -32767;
    else
      v4 = 0x7FFF;
    if ((_WORD)v1)
      return 0;
    else
      return v4;
  }
}

void _celt_lpc(_WORD *a1, signed int *a2, int a3)
{
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  _DWORD v25[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (a3 >= 1)
    bzero(v25, 4 * a3);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = -4;
    do
    {
      if (v8 == (a3 & ~(a3 >> 31)))
        break;
      v10 = 0;
      if (v8)
      {
        v11 = v25;
        v12 = v7;
        do
        {
          v13 = *v11++;
          v10 += 2 * (v13 >> 16) * (*(signed int *)((char *)a2 + v12) >> 16)
               + (((unsigned __int16)*(signed int *)((char *)a2 + v12) * (v13 >> 16)) >> 15)
               + (((*(signed int *)((char *)a2 + v12) >> 16) * (unsigned __int16)v13) >> 15);
          v12 -= 4;
        }
        while (v12);
      }
      v14 = -(int)frac_div32((a2[(v8 + 1)] + 8 * v10) & 0xFFFFFFF8, v6);
      v25[v8] = v14 >> 3;
      v15 = v14 >> 16;
      if (v8)
      {
        v16 = 0;
        v17 = 2 * v15;
        v14 = (unsigned __int16)v14;
        v18 = v9;
        do
        {
          v19 = v25[v16];
          v20 = *(_DWORD *)((char *)v25 + v18);
          v25[v16] = v19
                   + v17 * (v20 >> 16)
                   + (((unsigned __int16)v20 * v15) >> 15)
                   + (((v20 >> 16) * (unsigned __int16)v14) >> 15);
          *(_DWORD *)((char *)v25 + v18) = v20
                                         + v17 * (v19 >> 16)
                                         + (((unsigned __int16)v19 * v15) >> 15)
                                         + (((v19 >> 16) * (unsigned __int16)v14) >> 15);
          ++v16;
          v18 -= 4;
        }
        while (v16 < (v8 + 1) >> 1);
      }
      else
      {
        v17 = 2 * v15;
        v14 = (unsigned __int16)v14;
      }
      v21 = v17 * v15 + 2 * ((v15 * v14) >> 15);
      v6 = v6
         - 2 * (v6 >> 16) * (v21 >> 16)
         - ((((v21 >> 16) * (unsigned __int16)v6) >> 15)
          + (((v21 & 0xFFFE) * (v6 >> 16)) >> 15));
      v7 += 4;
      v9 += 4;
      ++v8;
    }
    while (v6 >= *a2 >> 10);
  }
  if (a3 >= 1)
  {
    v22 = a3;
    v23 = v25;
    do
    {
      v24 = *v23++;
      *a1++ = (v24 + 0x8000) >> 16;
      --v22;
    }
    while (v22);
  }
}

uint64_t celt_fir(__int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _WORD *a6)
{
  size_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  size_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int32x2_t v21;
  __int16 *v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 *v29;
  _WORD *v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  __int16 *v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v12 = 2 * a5;
  MEMORY[0x1E0C80A78]();
  v14 = (__int16 *)((char *)&v51 - v13);
  bzero((char *)&v51 - v13, v12);
  MEMORY[0x1E0C80A78]();
  v55 = (char *)&v51 - v15;
  bzero((char *)&v51 - v15, v16);
  if (a5 >= 1)
  {
    v22 = v14;
    v23 = a5;
    do
      *v22++ = *(_WORD *)(a2 + 2 * (int)--v23);
    while (v23);
    v24 = v55;
    v25 = a5;
    do
      *v24++ = a6[(int)--v25];
    while (v25);
  }
  v26 = a4 - 1;
  if ((int)a4 >= 1)
    memcpy(&v55[v12], a1, 2 * a4);
  if (a5 >= 1)
  {
    v27 = a5;
    do
    {
      *a6++ = a1[v26--];
      --v27;
    }
    while (v27);
  }
  v52 = a5;
  v53 = a3;
  v54 = a4;
  v28 = 0;
  if ((int)a4 >= 4)
  {
    v29 = a1 + 2;
    v30 = (_WORD *)(a3 + 4);
    v31 = (unsigned __int16 *)v55;
    do
    {
      v56 = 0;
      v57 = 0;
      *(int32x2_t *)&v17 = xcorr_kernel(v14, v31, (int *)&v56, a5, v17, v18, v19, v20, v21);
      v32 = HIDWORD(v56);
      v33 = *(v29 - 2) + (((int)v56 + 2048) >> 12);
      if (v33 <= -32768)
        v33 = -32768;
      if (v33 >= 0x7FFF)
        LOWORD(v33) = 0x7FFF;
      *(v30 - 2) = v33;
      v34 = *(v29 - 1) + ((v32 + 2048) >> 12);
      if (v34 <= -32768)
        v34 = -32768;
      if (v34 >= 0x7FFF)
        LOWORD(v34) = 0x7FFF;
      *(v30 - 1) = v34;
      v35 = HIDWORD(v57);
      v36 = *v29 + (((int)v57 + 2048) >> 12);
      if (v36 <= -32768)
        v36 = -32768;
      if (v36 >= 0x7FFF)
        LOWORD(v36) = 0x7FFF;
      *v30 = v36;
      v37 = v29[1] + ((v35 + 2048) >> 12);
      if (v37 <= -32768)
        v37 = -32768;
      if (v37 >= 0x7FFF)
        LOWORD(v37) = 0x7FFF;
      v30[1] = v37;
      v28 += 4;
      v29 += 4;
      v31 += 4;
      v30 += 4;
    }
    while ((int)a4 - 3 > v28);
  }
  v39 = v53;
  result = v54;
  v40 = v52;
  if (v28 < (int)v54)
  {
    v41 = v28;
    v42 = &v55[2 * v28];
    do
    {
      if (a5 < 1)
      {
        v43 = 0;
      }
      else
      {
        v43 = 0;
        v44 = v40;
        v45 = v14;
        v46 = v42;
        do
        {
          v48 = *v45++;
          v47 = v48;
          v49 = *(__int16 *)v46;
          v46 += 2;
          v43 += v49 * v47;
          --v44;
        }
        while (v44);
      }
      v50 = a1[v41] + ((v43 + 2048) >> 12);
      if (v50 <= -32768)
        v50 = -32768;
      if (v50 >= 0x7FFF)
        LOWORD(v50) = 0x7FFF;
      *(_WORD *)(v39 + 2 * v41++) = v50;
      v42 += 2;
    }
    while ((int)v41 < (int)result);
  }
  return result;
}

int32x2_t xcorr_kernel(__int16 *a1, unsigned __int16 *a2, int *a3, int a4, double a5, double a6, double a7, double a8, int32x2_t a9)
{
  __int32 v9;
  __int16 v10;
  unsigned __int16 *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int16 *v37;
  int v38;
  __int16 *v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int32x2_t result;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int32x2_t v53;
  int32x2_t v54;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2 + 3;
  v12 = a2[2];
  if (a4 < 4)
  {
    v41 = 0;
    v16 = 0;
  }
  else
  {
    v13 = 0;
    v14 = *a3;
    v15 = a3[1];
    v16 = a4 & 0xFFFFFFFC;
    v18 = a3[2];
    v17 = a3[3];
    do
    {
      v19 = *a1;
      v20 = (__int16)*v11;
      v21 = v14 + v19 * (__int16)v9;
      v22 = v15 + v19 * v10;
      v23 = v18 + v19 * (__int16)v12;
      v24 = v17 + v20 * v19;
      v25 = a1[1];
      v26 = (__int16)v11[1];
      v9 = v11[1];
      v27 = v21 + v25 * v10;
      v28 = v22 + v25 * (__int16)v12;
      v29 = v23 + v25 * v20;
      v30 = v24 + v26 * v25;
      v31 = a1[2];
      v32 = (__int16)v11[2];
      v10 = v11[2];
      v33 = v27 + v31 * (__int16)v12;
      v34 = v28 + v31 * v20;
      v35 = v29 + v31 * v26;
      v36 = v30 + v32 * v31;
      v37 = a1 + 4;
      v38 = a1[3];
      v39 = (__int16 *)(v11 + 4);
      v40 = (__int16)v11[3];
      v12 = (unsigned __int16)v40;
      v14 = v33 + v38 * v20;
      v15 = v34 + v38 * v26;
      v18 = v35 + v38 * v32;
      v17 = v36 + v40 * v38;
      v13 += 4;
      a1 = v37;
      v11 = (unsigned __int16 *)v39;
    }
    while (v13 < a4 - 3);
    v41 = (unsigned __int16)v20;
    *a3 = v14;
    a3[1] = v15;
    v11 = (unsigned __int16 *)v39;
    a1 = v37;
    a3[2] = v18;
    a3[3] = v17;
  }
  v42 = v16 | 1;
  if (v16 < a4)
  {
    v44 = *a1++;
    v43 = v44;
    v45 = *a3 + v44 * (__int16)v9;
    v46 = *v11++;
    v41 = v46;
    v47 = a3[1] + v43 * v10;
    *a3 = v45;
    a3[1] = v47;
    result = vmla_s32(*(int32x2_t *)(a3 + 2), vdup_n_s32(v43), vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v46, v12), 0x10uLL), 0x10uLL));
    *((int32x2_t *)a3 + 1) = result;
  }
  v49 = v16 | 2;
  if (v42 < a4)
  {
    v51 = *a1++;
    v50 = v51;
    v52 = (__int16)*v11++;
    v9 = (unsigned __int16)v52;
    *a3 += v50 * v10;
    result = vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v41, v12), 0x10uLL), 0x10uLL);
    *(int32x2_t *)(a3 + 1) = vmla_s32(*(int32x2_t *)(a3 + 1), vdup_n_s32(v50), result);
    a3[3] += v52 * v50;
  }
  if (v49 < a4)
  {
    v53 = vdup_n_s32(*a1);
    a9.i32[0] = v9;
    a9.i16[2] = *v11;
    result = vshr_n_s32(vshl_n_s32(a9, 0x10uLL), 0x10uLL);
    v54 = vmla_s32(*(int32x2_t *)(a3 + 2), v53, result);
    *(int32x2_t *)a3 = vmla_s32(*(int32x2_t *)a3, v53, vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v41, v12), 0x10uLL), 0x10uLL));
    *((int32x2_t *)a3 + 1) = v54;
  }
  return result;
}

void celt_iir(_OWORD *a1, __int16 *a2, uint64_t a3, uint64_t a4, int a5, _WORD *a6)
{
  uint64_t v12;
  __int16 *v13;
  size_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  double v20;
  double v21;
  double v22;
  int32x2_t v23;
  uint64_t v24;
  __int16 *v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  int *v36;
  __int128 *v37;
  unsigned __int16 *v38;
  __int128 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int16 *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned __int16 *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78]();
  v13 = (__int16 *)((char *)&v62 - v12);
  bzero((char *)&v62 - v12, v14);
  v15 = a4;
  v16 = a5 + a4;
  MEMORY[0x1E0C80A78]();
  v18 = (char *)&v62 - v17;
  bzero((char *)&v62 - v17, v19);
  v24 = a5;
  if (a5 < 1)
  {
    v29 = 0;
  }
  else
  {
    v25 = v13;
    v26 = a5;
    do
      *v25++ = a2[(int)--v26];
    while (v26);
    v27 = v18;
    v28 = a5;
    do
      *v27++ = -a6[(int)--v28];
    while (v28);
    v29 = a5;
  }
  if (v29 < v16)
    bzero(&v18[2 * v29], 2 * (v16 + ~v29) + 2);
  v30 = a5;
  v31 = v15;
  if ((int)v15 < 4)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    v32 = 0;
    v65 = v31;
    v66 = a3;
    v33 = (unsigned __int16 *)v18;
    v67 = (v31 - 3);
    v34 = a5;
    v62 = a5;
    v63 = v33;
    v35 = a5;
    v36 = (int *)(a3 + 8);
    v64 = a1;
    v37 = a1;
    v38 = v33;
    do
    {
      v39 = *v37++;
      v68 = v39;
      xcorr_kernel(v13, v38, (int *)&v68, v34, *(double *)&v39, v20, v21, v22, v23);
      v40 = v68;
      v41 = -((16 * v68 + 0x8000) >> 16);
      v42 = &v38[v35];
      *v42 = v41;
      *(v36 - 2) = v40;
      v43 = (__int16)v41;
      v44 = *a2;
      v45 = HIDWORD(v40) + v43 * v44;
      v46 = -((16 * v45 + 0x8000) >> 16);
      v42[1] = v46;
      *(v36 - 1) = v45;
      v47 = (__int16)v46;
      v48 = HIDWORD(v68);
      v49 = a2[1];
      v50 = DWORD2(v68) + (__int16)v46 * v44 + v49 * v43;
      *v36 = v50;
      v51 = -((16 * v50 + 0x8000) >> 16);
      v42[2] = v51;
      v52 = v48 + v47 * v49 + (__int16)v51 * v44 + a2[2] * v43;
      v42[3] = -((16 * v52 + 0x8000) >> 16);
      v36[1] = v52;
      v32 += 4;
      v38 += 4;
      v36 += 4;
    }
    while (v32 < v67);
    LODWORD(v31) = v65;
    a3 = v66;
    a5 = v34;
    v18 = (char *)v63;
    a1 = v64;
    v30 = v62;
  }
  if ((int)v32 < (int)v31)
  {
    v53 = (int)v32;
    do
    {
      v54 = *((_DWORD *)a1 + v53);
      if (a5 >= 1)
      {
        v55 = &v18[2 * v53];
        v56 = v24;
        v57 = v13;
        do
        {
          v59 = *v57++;
          v58 = v59;
          v60 = *(__int16 *)v55;
          v55 += 2;
          v54 -= v60 * v58;
          --v56;
        }
        while (v56);
      }
      *(_WORD *)&v18[2 * v53 + 2 * v30] = (v54 + 2048) >> 12;
      *(_DWORD *)(a3 + 4 * v53++) = v54;
    }
    while (v53 != (int)v31);
  }
  if (a5 >= 1)
  {
    v61 = v31 - 1;
    do
    {
      *a6++ = *(_DWORD *)(a3 + 4 * v61--);
      --v24;
    }
    while (v24);
  }
}

uint64_t _celt_autocorr(char *a1, unsigned int *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78]();
  v13 = (char *)v45 - v12;
  bzero((char *)v45 - v12, v14);
  if (a4)
  {
    v15 = a6 - 1;
    if (a6 >= 1)
      memcpy(v13, a1, 2 * a6);
    v16 = v13;
    if (a4 >= 1)
    {
      v17 = 0;
      do
      {
        v18 = *(__int16 *)(a3 + v17);
        *(_WORD *)&v13[v17] = (v18 * *(__int16 *)&a1[v17]) >> 15;
        *(_WORD *)&v13[2 * v15] = (*(__int16 *)&a1[2 * v15] * v18) >> 15;
        --v15;
        v17 += 2;
      }
      while (2 * a4 != v17);
      v16 = v13;
    }
  }
  else
  {
    v16 = a1;
  }
  v19 = (a6 << 7) | 1;
  if ((a6 & 1) != 0)
    v19 += (*(__int16 *)v16 * *(__int16 *)v16) >> 9;
  v20 = a6 - a5;
  v21 = a6;
  if (a6 >= 2)
  {
    v22 = a6 & 1;
    do
    {
      v19 += ((*(__int16 *)&v16[2 * v22] * *(__int16 *)&v16[2 * v22]) >> 9)
           + ((*(__int16 *)&v16[2 * v22 + 2] * *(__int16 *)&v16[2 * v22 + 2]) >> 9);
      v22 += 2;
    }
    while (v22 < a6);
  }
  if (v19 < 0x400000)
  {
    v28 = 0;
    v13 = v16;
  }
  else
  {
    v23 = __clz(v19);
    v24 = (int)((11 - v23 + (((11 - v23) & 0x80) >> 7)) << 24) >> 25;
    if (a6 >= 1)
    {
      v25 = a6;
      v26 = v13;
      do
      {
        v27 = *(__int16 *)v16;
        v16 += 2;
        *v26++ = (int)(((1 << v24) >> 1) + v27) >> v24;
        --v25;
      }
      while (v25);
    }
    v28 = (2 * v24);
  }
  v29 = (a5 + 1);
  celt_pitch_xcorr_c((__int16 *)v13, (uint64_t)v13, (uint64_t)a2, v20, a5 + 1);
  if ((a5 & 0x80000000) == 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = a5;
    v33 = v21 - v20;
    do
    {
      if (v31 >= v33)
      {
        v34 = 0;
      }
      else
      {
        v34 = 0;
        v35 = &v13[2 * v30 + 2 * v20];
        v36 = &v13[2 * v20];
        v37 = v32;
        do
        {
          v39 = *(__int16 *)v36;
          v36 += 2;
          v38 = v39;
          v40 = *(__int16 *)v35;
          v35 += 2;
          v34 += v40 * v38;
          --v37;
        }
        while (v37);
      }
      a2[v31++] += v34;
      ++v20;
      --v30;
      --v32;
    }
    while (v31 != v29);
  }
  v41 = *a2;
  if (!(_DWORD)v28)
    *a2 = ++v41;
  if ((int)v41 > 0xFFFFFFF)
  {
    if (v41 >> 29)
    {
      if (v41 >> 30)
        v43 = 2;
      else
        v43 = 1;
      if ((a5 & 0x80000000) == 0)
      {
        do
        {
          *a2 = (int)*a2 >> v43;
          ++a2;
          --v29;
        }
        while (v29);
      }
      return (v43 + v28);
    }
  }
  else
  {
    v42 = __clz(v41) - 3;
    if ((a5 & 0x80000000) == 0)
    {
      do
      {
        *a2++ <<= v42;
        --v29;
      }
      while (v29);
    }
    return v28 - v42;
  }
  return v28;
}

void pitch_downsample(int **a1, char *a2, int a3, int a4)
{
  char *v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  signed int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  int *v31;
  uint64_t v32;
  _DWORD *v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  signed int v53;
  int32x4_t v54;
  uint64_t v55;

  v5 = a2;
  v55 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (a3 < 1)
  {
    v14 = 0;
    v16 = 0;
    v15 = 0;
    v20 = 0;
    if (a4 != 2)
      goto LABEL_27;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = a3;
    v10 = *a1;
    v11 = a3;
    do
    {
      v13 = *v10++;
      v12 = v13;
      if (v8 <= v13)
        v8 = v12;
      if (v7 >= v12)
        v7 = v12;
      --v11;
    }
    while (v11);
    if (v8 <= -v7)
      v14 = -v7;
    else
      v14 = v8;
    if (a4 != 2)
    {
      v20 = 0;
      goto LABEL_27;
    }
    v15 = 0;
    v16 = 0;
    v17 = a1[1];
    do
    {
      v19 = *v17++;
      v18 = v19;
      if (v16 <= v19)
        v16 = v18;
      if (v15 >= v18)
        v15 = v18;
      --v9;
    }
    while (v9);
  }
  if (v16 <= -v15)
    v21 = -v15;
  else
    v21 = v16;
  if (v14 <= v21)
    v14 = v21;
  v20 = 1;
LABEL_27:
  if (v14 <= 1)
    v22 = 1;
  else
    v22 = v14;
  v23 = __clz(v22) ^ 0x1F;
  if (v23 <= 10)
    LOBYTE(v23) = 10;
  v24 = v20 + v23 - 10;
  v25 = (a3 >> 1);
  if (a3 >= 4)
  {
    if ((int)v25 <= 2)
      v26 = 2;
    else
      v26 = v25;
    v27 = v6 + 2;
    v28 = a2 + 2;
    v29 = v26 - 1;
    do
    {
      *v28++ = (*v27 + ((v27[1] + *(v27 - 1)) >> 1)) >> 1 >> v24;
      v27 += 2;
      --v29;
    }
    while (v29);
  }
  v30 = (*v6 + (v6[1] >> 1)) >> 1 >> v24;
  *(_WORD *)a2 = v30;
  if (v20)
  {
    v31 = a1[1];
    if (a3 >= 4)
    {
      if ((int)v25 <= 2)
        v32 = 2;
      else
        v32 = v25;
      v33 = v31 + 2;
      v34 = a2 + 2;
      v35 = v32 - 1;
      do
      {
        *v34++ += (*v33 + ((v33[1] + *(v33 - 1)) >> 1)) >> 1 >> v24;
        v33 += 2;
        --v35;
      }
      while (v35);
    }
    *(_WORD *)a2 = ((*v31 + (v31[1] >> 1)) >> 1 >> v24) + v30;
  }
  _celt_autocorr(a2, (unsigned int *)&v53, 0, 0, 4, a3 >> 1);
  v53 += v53 >> 13;
  v54 = vsubq_s32(vmlaq_s32(v54, vshrq_n_s32(v54, 0x10uLL), (int32x4_t)xmmword_1DECD66C0), (int32x4_t)vshrq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(v54), (uint16x4_t)0x20001200080002), 0xFuLL));
  _celt_lpc(&v49, &v53, 4);
  v36 = 0;
  LOWORD(v37) = 0x7FFF;
  do
  {
    v37 = (29491 * (__int16)v37) >> 15;
    *(__int16 *)((char *)&v49 + v36) = (v37 * *(__int16 *)((char *)&v49 + v36)) >> 15;
    v36 += 2;
  }
  while (v36 != 8);
  if (a3 >= 2)
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = (__int16)(v49 + 3277);
    v44 = (__int16)(v50 + ((26214 * v49) >> 15));
    v45 = (__int16)(v51 + ((26214 * v50) >> 15));
    v46 = (__int16)(v52 + ((26214 * v51) >> 15));
    v47 = (52428 * v52) >> 16;
    do
    {
      v48 = v39 * v46 + v38 * v47 + v40 * v45 + v41 * v44;
      v38 = v39;
      v39 = v40;
      v40 = v41;
      v41 = v42;
      v42 = *(_WORD *)v5;
      *(_WORD *)v5 += (v48 + v41 * v43 + 2048) >> 12;
      v5 += 2;
      --v25;
    }
    while (v25);
  }
}

uint64_t celt_pitch_xcorr_c(__int16 *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 v8;
  __int16 v9;
  __int16 *v10;
  __int16 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int16 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int16 *v36;
  int v37;
  __int16 *v38;
  int v39;
  __int16 v40;
  signed int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  __int16 *v51;
  int v52;
  uint64_t v53;
  __int16 *v54;
  __int16 *v55;
  int v56;
  int v57;
  int v58;

  if (a5 < 4)
  {
    LODWORD(v5) = 0;
    v6 = 1;
  }
  else
  {
    v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      v7 = (__int16 *)(a2 + 2 * v5);
      v8 = *v7;
      v9 = v7[1];
      v10 = v7 + 3;
      v11 = v7[2];
      if (a4 < 4)
      {
        v15 = 0;
        v14 = 0;
        v13 = 0;
        v12 = 0;
        v40 = 0;
        v41 = 0;
        v36 = a1;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = a1;
        do
        {
          v18 = *v17;
          v19 = *v10;
          v20 = v15 + v18 * v8;
          v21 = v14 + v18 * v9;
          v22 = v13 + v18 * v11;
          v23 = v12 + v19 * v18;
          v24 = v17[1];
          v25 = v10[1];
          v8 = v10[1];
          v26 = v20 + v24 * v9;
          v27 = v21 + v24 * v11;
          v28 = v22 + v24 * v19;
          v29 = v23 + v25 * v24;
          v30 = v17[2];
          v31 = v10[2];
          v9 = v10[2];
          v32 = v26 + v30 * v11;
          v33 = v27 + v30 * v19;
          v34 = v28 + v30 * v25;
          v35 = v29 + v31 * v30;
          v36 = v17 + 4;
          v37 = v17[3];
          v38 = v10 + 4;
          v39 = v10[3];
          v11 = v39;
          v15 = v32 + v37 * v19;
          v14 = v33 + v37 * v25;
          v13 = v34 + v37 * v31;
          v12 = v35 + v39 * v37;
          v16 += 4;
          v17 = v36;
          v10 = v38;
        }
        while (v16 < a4 - 3);
        v40 = v19;
        v41 = a4 & 0xFFFFFFFC;
        v10 = v38;
      }
      if (v41 < a4)
      {
        v43 = *v36++;
        v42 = v43;
        v44 = *v10++;
        v40 = v44;
        v15 += v42 * v8;
        v14 += v42 * v9;
        v13 += v42 * v11;
        v12 += v44 * v42;
      }
      if ((v41 | 1) < a4)
      {
        v46 = *v36++;
        v45 = v46;
        v47 = *v10++;
        v8 = v47;
        v15 += v45 * v9;
        v14 += v45 * v11;
        v13 += v45 * v40;
        v12 += v47 * v45;
      }
      if ((v41 | 2) < a4)
      {
        v48 = *v36;
        v15 += v48 * v11;
        v14 += v48 * v40;
        v13 += v48 * v8;
        v12 += *v10 * v48;
      }
      *(_DWORD *)(a3 + 4 * v5) = v15;
      *(_DWORD *)(a3 + ((4 * v5) | 4)) = v14;
      *(_DWORD *)(a3 + ((4 * v5) | 8)) = v13;
      *(_DWORD *)(a3 + ((4 * v5) | 0xC)) = v12;
      if (v15 <= v14)
        v49 = v14;
      else
        v49 = v15;
      if (v13 <= v12)
        v13 = v12;
      if (v49 > v13)
        v13 = v49;
      if ((int)v6 <= v13)
        v6 = v13;
      else
        v6 = v6;
      v5 += 4;
    }
    while (v5 < (a5 - 3));
  }
  if ((int)v5 < a5)
  {
    v50 = v5;
    v51 = (__int16 *)(a2 + 2 * v5);
    do
    {
      if (a4 < 1)
      {
        v52 = 0;
      }
      else
      {
        v52 = 0;
        v53 = a4;
        v54 = a1;
        v55 = v51;
        do
        {
          v57 = *v54++;
          v56 = v57;
          v58 = *v55++;
          v52 += v58 * v56;
          --v53;
        }
        while (v53);
      }
      *(_DWORD *)(a3 + 4 * v50) = v52;
      if ((int)v6 <= v52)
        v6 = v52;
      else
        v6 = v6;
      ++v50;
      ++v51;
    }
    while (v50 != a5);
  }
  return v6;
}

uint64_t pitch_search(__int16 *a1, __int16 *a2, int a3, int a4, _DWORD *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  __int16 *v22;
  __int16 *v23;
  __int16 v24;
  uint64_t v25;
  __int16 *v26;
  __int16 *v27;
  __int16 v28;
  int v29;
  unsigned __int16 v30;
  __int16 *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  __int16 *v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  __int16 *v48;
  uint64_t v49;
  __int16 *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  signed int v60;
  __int16 *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  __int16 *v66;
  __int16 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t result;
  int v73;
  int v74;
  int v75;
  int v76;
  _BYTE v77[4];
  int v78;
  uint64_t v79;
  _DWORD *v80;
  __int16 *v81;
  _QWORD v82[2];

  v80 = a5;
  v81 = a2;
  v82[1] = *MEMORY[0x1E0C80C00];
  v82[0] = 0;
  v8 = a4 + a3;
  v9 = (a3 >> 2);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v11 = (__int16 *)&v77[-v10];
  bzero(&v77[-v10], v12);
  v13 = v8 >> 2;
  v14 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v16 = &v77[-v15];
  v78 = a4;
  v79 = (a4 >> 1);
  v17 = 4 * (int)v79;
  MEMORY[0x1E0C80A78](v14);
  v20 = &v77[-v19];
  if (a3 >= 4)
  {
    if ((int)v9 <= 1)
      v21 = 1;
    else
      v21 = v9;
    v22 = v11;
    v23 = a1;
    do
    {
      v24 = *v23;
      v23 += 2;
      *v22++ = v24;
      --v21;
    }
    while (v21);
  }
  bzero(v16, v18);
  if (v8 >= 4)
  {
    if (v13 <= 1)
      v25 = 1;
    else
      v25 = v13;
    v26 = (__int16 *)v16;
    v27 = v81;
    do
    {
      v28 = *v27;
      v27 += 2;
      *v26++ = v28;
      --v25;
    }
    while (v25);
  }
  if (a3 < 4)
  {
    v35 = 0;
    v29 = 0;
  }
  else
  {
    LOWORD(v29) = 0;
    v30 = 0;
    v31 = v11;
    v32 = v9;
    do
    {
      v34 = *v31++;
      v33 = v34;
      if (v34 >= v30)
        v30 = v33;
      if ((__int16)v29 >= v33)
        LOWORD(v29) = v33;
      --v32;
    }
    while (v32);
    v35 = v30;
    v29 = (__int16)v29;
  }
  v36 = 0;
  v37 = 0;
  if (v35 <= -v29)
    v38 = -v29;
  else
    v38 = v35;
  if (v8 >= 4)
  {
    LOWORD(v37) = 0;
    LOWORD(v36) = 0;
    v39 = (__int16 *)v16;
    v40 = (v8 >> 2);
    do
    {
      v42 = *v39++;
      v41 = v42;
      if (v42 >= (unsigned __int16)v36)
        LOWORD(v36) = v41;
      if ((__int16)v37 >= v41)
        LOWORD(v37) = v41;
      --v40;
    }
    while (v40);
    v36 = (unsigned __int16)v36;
    v37 = (__int16)v37;
  }
  v43 = 0;
  if (v36 <= -v37)
    v44 = -v37;
  else
    v44 = v36;
  if (v38 <= v44)
    v38 = v44;
  if (v38 <= 1)
    v38 = 1;
  v45 = __clz(v38);
  if ((v45 ^ 0x1C) >= 0xC)
  {
    v46 = 20 - v45;
    if (a3 >= 4)
    {
      if ((int)v9 <= 1)
        v47 = 1;
      else
        v47 = v9;
      v48 = v11;
      do
      {
        *v48++ >>= v46;
        --v47;
      }
      while (v47);
    }
    if (v8 >= 4)
    {
      if (v13 <= 1)
        v49 = 1;
      else
        v49 = v13;
      v50 = (__int16 *)v16;
      do
      {
        *v50++ >>= v46;
        --v49;
      }
      while (v49);
    }
    v43 = 2 * v46;
  }
  bzero(v20, v17);
  v51 = v78;
  v52 = celt_pitch_xcorr_c(v11, (uint64_t)v16, (uint64_t)v20, v9, v78 >> 2);
  find_best_pitch((uint64_t)v20, (__int16 *)v16, v9, v51 >> 2, (uint64_t)v82, 0, v52);
  if (v51 <= 1)
  {
    v56 = a3 >> 1;
    v60 = 1;
    v58 = v79;
  }
  else
  {
    v53 = 0;
    v54 = 2 * LODWORD(v82[0]);
    v55 = 2 * HIDWORD(v82[0]);
    v56 = a3 >> 1;
    if (a3 >> 1 <= 1)
      v57 = 1;
    else
      v57 = v56;
    v58 = v79;
    if ((int)v79 <= 1)
      v59 = 1;
    else
      v59 = v79;
    v60 = 1;
    v61 = v81;
    do
    {
      *(_DWORD *)&v20[4 * v53] = 0;
      v62 = v53 - v54;
      if ((int)v53 - v54 < 0)
        v62 = v54 - v53;
      if (v62 < 3)
        goto LABEL_68;
      v63 = v53 - v55;
      if ((int)v53 - v55 < 0)
        v63 = v55 - v53;
      if (v63 <= 2)
      {
LABEL_68:
        if (a3 < 2)
        {
          v64 = 0;
        }
        else
        {
          v64 = 0;
          v65 = v57;
          v66 = a1;
          v67 = v61;
          do
          {
            v69 = *v66++;
            v68 = v69;
            v70 = *v67++;
            v64 += (v70 * v68) >> v43;
            --v65;
          }
          while (v65);
        }
        if (v64 < 0)
          v71 = -1;
        else
          v71 = v64;
        *(_DWORD *)&v20[4 * v53] = v71;
        if (v60 <= v64)
          v60 = v64;
      }
      ++v53;
      ++v61;
    }
    while (v53 != v59);
  }
  result = find_best_pitch((uint64_t)v20, v81, v56, v58, (uint64_t)v82, v43 | 1u, v60);
  v73 = 0;
  if (SLODWORD(v82[0]) >= 1 && SLODWORD(v82[0]) < v58 - 1)
  {
    v74 = *(_DWORD *)&v20[4 * (LODWORD(v82[0]) - 1)];
    v75 = *(_DWORD *)&v20[4 * LODWORD(v82[0])];
    v76 = *(_DWORD *)&v20[4 * LODWORD(v82[0]) + 4];
    if (v76 - v74 <= (int)(45876 * ((v75 - v74) >> 16) + ((22938 * (unsigned __int16)(v75 - v74)) >> 15)))
      v73 = v74 - v76 > (int)(45876 * ((v75 - v76) >> 16) + ((22938 * (unsigned __int16)(v75 - v76)) >> 15));
    else
      v73 = -1;
  }
  *v80 = v73 + 2 * LODWORD(v82[0]);
  return result;
}

uint64_t find_best_pitch(uint64_t result, __int16 *a2, int a3, int a4, uint64_t a5, char a6, unsigned int a7)
{
  uint64_t v7;
  signed int v8;
  __int16 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  unsigned int v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  __int16 *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;

  *(_QWORD *)a5 = 0x100000000;
  if (a3 < 1)
  {
    v8 = 1;
  }
  else
  {
    v7 = a3;
    v8 = 1;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v8 += (v10 * v10) >> a6;
      --v7;
    }
    while (v7);
  }
  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = __clz(a7);
    v16 = a7 >> 15;
    v17 = v15 - 17;
    v18 = 17 - v15;
    LOWORD(v19) = -1;
    LOWORD(a7) = -1;
    v20 = a4;
    v21 = &a2[a3];
    do
    {
      v22 = *(_DWORD *)(result + 4 * v12);
      if (v22 >= 1)
      {
        v23 = v22 >> v18;
        v24 = v22 << v17;
        if (v16)
          LOWORD(v24) = v23;
        v25 = (__int16)v24 * (__int16)v24;
        v26 = (__int16)(v25 >> 15);
        v27 = (v8 >> 15) & 0xFFFFFFFE;
        if ((int)(((v14 >> 15) & 0xFFFFFFFE) * v26 + ((v26 * (unsigned __int16)v14) >> 15)) > (int)(v27 * (__int16)a7 + (((unsigned __int16)v8 * (__int16)a7) >> 15)))
        {
          if ((int)(((v13 >> 15) & 0xFFFFFFFE) * v26 + ((v26 * (unsigned __int16)v13) >> 15)) <= (int)(v27 * (__int16)v19 + (((unsigned __int16)v8 * (__int16)v19) >> 15)))
          {
            a7 = v25 >> 15;
            *(_DWORD *)(a5 + 4) = v12;
            v14 = v8;
          }
          else
          {
            LOWORD(a7) = v19;
            v19 = v25 >> 15;
            *(_DWORD *)a5 = v12;
            *(_DWORD *)(a5 + 4) = v11;
            v11 = v12;
            v14 = v13;
            v13 = v8;
          }
        }
      }
      v8 = ((v21[v12] * v21[v12]) >> a6) + v8 - ((a2[v12] * a2[v12]) >> a6);
      if (v8 <= 1)
        v8 = 1;
      ++v12;
    }
    while (v20 != v12);
  }
  return result;
}

uint64_t ec_laplace_decode(uint64_t *a1, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v6 = ec_decode_bin(a1, 15);
  if (v6 >= a2)
  {
    v9 = (0x4000 - a3) * (32736 - a2);
    v10 = (v9 >> 15) + 1;
    if (v9 >= 0x8000)
    {
      v11 = 1;
      v12 = a2;
      while (1)
      {
        a2 = v12 + 2 * v10;
        if (v6 < a2)
          break;
        ++v11;
        v13 = ((2 * v10 - 2) * a3) >> 15;
        v10 = v13 + 1;
        v12 = a2;
        if (!v13)
          goto LABEL_8;
      }
    }
    else
    {
      v11 = 1;
LABEL_8:
      v11 += (v6 - a2) >> 1;
      v12 = ((v6 - a2) & 0xFFFFFFFE) + a2;
    }
    if (v6 >= v12 + v10)
      v7 = v11;
    else
      v7 = -v11;
    if (v6 >= v12 + v10)
      v8 = v12 + v10;
    else
      v8 = v12;
    a2 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (a2 + v8 >= 0x8000)
    v14 = 0x8000;
  else
    v14 = a2 + v8;
  ec_dec_update(a1, v8, v14, 0x8000);
  return v7;
}

uint64_t *ec_encode(uint64_t *result, int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  int v6;

  v4 = *((_DWORD *)result + 8);
  v5 = v4 / a4;
  if (a2)
  {
    *((_DWORD *)result + 9) += v4 + v5 * (a2 - a4);
    v6 = v5 * (a3 - a2);
  }
  else
  {
    v6 = v4 + v5 * (a3 - a4);
  }
  *((_DWORD *)result + 8) = v6;
  return ec_enc_normalize(result);
}

uint64_t *ec_enc_normalize(uint64_t *result)
{
  uint64_t *v1;
  unsigned int v2;
  unsigned int v3;

  if (*((_DWORD *)result + 8) <= 0x800000u)
  {
    v1 = result;
    v2 = *((_DWORD *)result + 9);
    do
    {
      result = ec_enc_carry_out(v1, v2 >> 23);
      v2 = (*((_DWORD *)v1 + 9) & 0x7FFFFF) << 8;
      v3 = *((_DWORD *)v1 + 8) << 8;
      *((_DWORD *)v1 + 8) = v3;
      *((_DWORD *)v1 + 9) = v2;
      *((_DWORD *)v1 + 6) += 8;
    }
    while (v3 < 0x800001);
  }
  return result;
}

uint64_t *ec_enc_bit_logp(uint64_t *result, int a2, char a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_DWORD *)result + 8);
  v4 = v3 >> a3;
  v5 = v3 - (v3 >> a3);
  if (a2)
  {
    *((_DWORD *)result + 9) += v5;
    v5 = v4;
  }
  *((_DWORD *)result + 8) = v5;
  return ec_enc_normalize(result);
}

uint64_t *ec_enc_uint(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;

  v5 = a3 - 1;
  if (a3 - 1 < 0x100)
    return ec_encode(a1, a2, a2 + 1, a3);
  v6 = __clz(v5);
  v7 = 24 - v6;
  ec_encode(a1, a2 >> (24 - v6), (a2 >> (24 - v6)) + 1, (v5 >> (24 - v6)) + 1);
  return ec_enc_bits(a1, a2 & ~(-1 << v7), v7);
}

uint64_t *ec_enc_bits(uint64_t *result, int a2, int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;

  v3 = *((_DWORD *)result + 4);
  v4 = *((_DWORD *)result + 5);
  v5 = v4 + a3;
  if ((v4 + a3) < 0x21)
  {
    v11 = *((_DWORD *)result + 5);
  }
  else
  {
    do
    {
      v7 = *((_DWORD *)result + 2);
      v6 = *((_DWORD *)result + 3);
      if (v6 + *((_DWORD *)result + 7) >= v7)
      {
        v8 = -1;
      }
      else
      {
        v8 = 0;
        v9 = *result;
        v10 = v6 + 1;
        *((_DWORD *)result + 3) = v10;
        *(_BYTE *)(v9 + v7 - v10) = v3;
      }
      *((_DWORD *)result + 12) |= v8;
      v3 >>= 8;
      v11 = v4 - 8;
      v12 = v4 <= 15;
      v4 -= 8;
    }
    while (!v12);
    v5 = a3 + v11;
  }
  *((_DWORD *)result + 4) = (a2 << v11) | v3;
  *((_DWORD *)result + 5) = v5;
  *((_DWORD *)result + 6) += a3;
  return result;
}

uint64_t *ec_enc_carry_out(uint64_t *result, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int i;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (a2 == 255)
  {
    ++*((_DWORD *)result + 10);
  }
  else
  {
    v2 = *((_DWORD *)result + 11);
    if ((v2 & 0x80000000) == 0)
    {
      v3 = *((unsigned int *)result + 7);
      if ((*((_DWORD *)result + 3) + v3) >= *((_DWORD *)result + 2))
      {
        v4 = -1;
      }
      else
      {
        v4 = 0;
        v5 = *result;
        *((_DWORD *)result + 7) = v3 + 1;
        *(_BYTE *)(v5 + v3) = v2 + BYTE1(a2);
      }
      *((_DWORD *)result + 12) |= v4;
    }
    for (i = *((_DWORD *)result + 10); i; *((_DWORD *)result + 10) = i)
    {
      v7 = *((unsigned int *)result + 7);
      if ((*((_DWORD *)result + 3) + v7) >= *((_DWORD *)result + 2))
      {
        v8 = -1;
      }
      else
      {
        v8 = 0;
        v9 = *result;
        *((_DWORD *)result + 7) = v7 + 1;
        *(_BYTE *)(v9 + v7) = BYTE1(a2) - 1;
        i = *((_DWORD *)result + 10);
      }
      *((_DWORD *)result + 12) |= v8;
      --i;
    }
    *((_DWORD *)result + 11) = a2;
  }
  return result;
}

uint64_t *ec_dec_init(uint64_t *result, unsigned __int8 *a2, int a3)
{
  unsigned int v3;

  *result = (uint64_t)a2;
  *((_DWORD *)result + 2) = a3;
  *(_OWORD *)((char *)result + 12) = xmmword_1DECD66D0;
  *(uint64_t *)((char *)result + 28) = 0x8000000000;
  if (a3)
  {
    *((_DWORD *)result + 7) = 1;
    v3 = *a2;
  }
  else
  {
    v3 = 0;
  }
  *((_DWORD *)result + 9) = (v3 >> 1) ^ 0x7F;
  *((_DWORD *)result + 11) = v3;
  *((_DWORD *)result + 12) = 0;
  return ec_dec_normalize(result);
}

uint64_t *ec_dec_normalize(uint64_t *result)
{
  unsigned int v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v1 = *((_DWORD *)result + 8);
  if (v1 <= 0x800000)
  {
    v2 = *((unsigned int *)result + 2);
    v3 = *((_DWORD *)result + 11);
    v4 = *((unsigned int *)result + 7);
    v5 = *((_DWORD *)result + 9);
    v6 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v6;
      *((_DWORD *)result + 8) = v1 << 8;
      if (v4 >= v2)
      {
        v8 = 0;
      }
      else
      {
        v7 = *result;
        *((_DWORD *)result + 7) = v4 + 1;
        v8 = *(unsigned __int8 *)(v7 + v4++);
      }
      v5 = (((v8 | (v3 << 8)) >> 1) | ((v5 & 0x7FFFFF) << 8)) ^ 0xFF;
      *((_DWORD *)result + 11) = v8;
      *((_DWORD *)result + 9) = v5;
      v6 += 8;
      v3 = v8;
      v9 = v1 > 0x8000;
      v1 <<= 8;
    }
    while (!v9);
  }
  return result;
}

uint64_t ec_decode(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = a1[9];
  v3 = a1[8] / a2;
  a1[10] = v3;
  v4 = v2 / v3 + 1;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t ec_decode_bin(_DWORD *a1, char a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = a1[9];
  v3 = a1[8] >> a2;
  a1[10] = v3;
  v4 = v2 / v3 + 1;
  v5 = 1 << a2 >= v4;
  v6 = (1 << a2) - v4;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t *ec_dec_update(uint64_t *result, int a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;

  v4 = *((_DWORD *)result + 10);
  v5 = v4 * (a4 - a3);
  *((_DWORD *)result + 9) -= v5;
  if (a2)
    v6 = v4 * (a3 - a2);
  else
    v6 = *((_DWORD *)result + 8) - v5;
  *((_DWORD *)result + 8) = v6;
  return ec_dec_normalize(result);
}

BOOL ec_dec_bit_logp(uint64_t a1, char a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 v6;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 36);
  v4 = v2 >> a2;
  if (v3 >= v2 >> a2)
    *(_DWORD *)(a1 + 36) = v3 - (v2 >> a2);
  v5 = v2 - v4;
  v6 = v3 < v4;
  if (v3 >= v4)
    v4 = v5;
  *(_DWORD *)(a1 + 32) = v4;
  ec_dec_normalize((uint64_t *)a1);
  return v6;
}

uint64_t ec_dec_icdf(uint64_t a1, unsigned __int8 *a2, char a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  v4 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 36);
  v5 = v4 >> a3;
  LODWORD(v6) = -1;
  do
  {
    v7 = v4;
    v8 = *a2++;
    v4 = v5 * v8;
    v6 = (v6 + 1);
  }
  while (v3 < v5 * v8);
  *(_DWORD *)(a1 + 32) = v7 - v4;
  *(_DWORD *)(a1 + 36) = v3 - v4;
  ec_dec_normalize((uint64_t *)a1);
  return v6;
}

uint64_t ec_dec_uint(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = a2 - 1;
  if (v3 < 0x100)
  {
    v14 = *(_DWORD *)(a1 + 36);
    v15 = *(_DWORD *)(a1 + 32) / a2;
    *(_DWORD *)(a1 + 40) = v15;
    v16 = v14 / v15 + 1;
    v10 = a2 >= v16;
    v17 = a2 - v16;
    if (v10)
      v13 = v17;
    else
      v13 = 0;
    ec_dec_update((uint64_t *)a1, v13, v13 + 1, a2);
  }
  else
  {
    v4 = __clz(v3);
    v5 = 24 - v4;
    v6 = (v3 >> (24 - v4)) + 1;
    v7 = *(_DWORD *)(a1 + 36);
    v8 = *(_DWORD *)(a1 + 32) / v6;
    *(_DWORD *)(a1 + 40) = v8;
    v9 = v7 / v8 + 1;
    v10 = v6 >= v9;
    v11 = v6 - v9;
    if (v10)
      v12 = v11;
    else
      v12 = 0;
    ec_dec_update((uint64_t *)a1, v12, v12 + 1, v6);
    v13 = (v12 << v5) | ec_dec_bits((uint64_t *)a1, v5);
    if (v13 > v3)
    {
      *(_DWORD *)(a1 + 48) = 1;
      return v3;
    }
  }
  return v13;
}

uint64_t ec_dec_bits(uint64_t *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;

  v3 = *((_DWORD *)a1 + 4);
  v2 = *((_DWORD *)a1 + 5);
  if (v2 >= a2)
  {
    v8 = *((_DWORD *)a1 + 5);
  }
  else
  {
    v4 = *((_DWORD *)a1 + 2);
    v5 = *((_DWORD *)a1 + 3);
    do
    {
      if (v5 >= v4)
      {
        v7 = 0;
      }
      else
      {
        v6 = *a1;
        *((_DWORD *)a1 + 3) = ++v5;
        v7 = *(unsigned __int8 *)(v6 + v4 - v5);
      }
      v3 |= v7 << v2;
      v8 = v2 + 8;
      v9 = v2 < 17;
      v2 += 8;
    }
    while (v9);
  }
  *((_DWORD *)a1 + 4) = v3 >> a2;
  *((_DWORD *)a1 + 5) = v8 - a2;
  *((_DWORD *)a1 + 6) += a2;
  return v3 & ~(-1 << a2);
}

uint64_t ec_tell_frac(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int i;
  int v6;

  v1 = *(_DWORD *)(a1 + 32);
  v2 = __clz(v1);
  v3 = 32 - v2;
  v4 = v1 >> (16 - v2);
  for (i = 4; i > 1; --i)
  {
    v6 = v4 * v4;
    v3 = __PAIR64__(v3, v6) >> 31;
    v4 = v6 >> 15 >> (v6 < 0);
  }
  return 8 * *(_DWORD *)(a1 + 24) - v3;
}

uint64_t celt_lcg_rand(int a1)
{
  return (1664525 * a1 + 1013904223);
}

void denormalise_bands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  __int16 *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v48;
  int v49;

  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 40);
  v15 = v14 * a8;
  v39 = a5;
  v38 = *(_WORD *)(v13 + 2 * a5);
  v16 = v38 * a8;
  v37 = a2 + 2 * v16;
  v17 = a6;
  v18 = *(__int16 *)(v13 + 2 * a6);
  v44 = v18 * a8;
  v41 = 4 * v16;
  v45 = v16;
  v40 = a3 + 4 * (v16 - 1) + 4;
  v36 = 4 * ((v14 - v18) * a8 - 1) + 4;
  v19 = v14 * a8;
  if (a7 <= 1)
    v20 = 1;
  else
    v20 = a7;
  v43 = v20;
  v48 = v15;
  do
  {
    v21 = v11 * v19;
    v49 = v12;
    if (v45 < 1)
    {
      v22 = (int *)(a3 + 4 * v21);
    }
    else
    {
      v22 = (int *)(v40 + 4 * v12);
      bzero((void *)(a3 + 4 * (int)v19 * (int)v11), v41);
    }
    if (a5 < a6)
    {
      v23 = (__int16 *)(v37 + 2 * v21);
      LOWORD(v24) = v38;
      v25 = v39;
      v19 = v48;
      while (1)
      {
        v26 = (__int16)v24 * a8;
        v27 = v25 + 1;
        v24 = *(__int16 *)(v13 + 2 * (v25 + 1));
        v28 = v24 * a8;
        v29 = (__int16)(*(_WORD *)(a4 + 2 * (v25 + v11 * *(int *)(a1 + 8))) + (eMeans[v25] << 6));
        if (v29 >= -15360)
        {
          v30 = 16 - (v29 >> 10);
          v31 = ((((((326528 * (v29 & 0x3FFu)) >> 16) + 14819) * 32 * (v29 & 0x3FF) + 1494482944) >> 16)
               * 32
               * (v29 & 0x3FF)
               + 1073676288) >> 16;
          if (v29 > 17407)
          {
            if (v30 == -1)
              v32 = -1;
            else
              v32 = -2;
            if (v30 >= 0xFFFFFFFE)
              v33 = v31;
            else
              v33 = 0x7FFF;
            do
            {
              v34 = *v23++;
              *v22++ = (v33 * v34) << -v32;
              ++v26;
            }
            while (v26 < v28);
            goto LABEL_22;
          }
        }
        else
        {
          LOBYTE(v30) = 0;
          v31 = 0;
        }
        do
        {
          v35 = *v23++;
          *v22++ = (int)(v31 * v35) >> v30;
          ++v26;
        }
        while (v26 < v28);
LABEL_22:
        v25 = v27;
        if (v27 == v17)
          goto LABEL_25;
      }
    }
    v19 = v48;
LABEL_25:
    if (v44 < (int)v19)
    {
      bzero(v22, v36);
      v19 = v48;
    }
    ++v11;
    v12 = v49 + v19;
  }
  while (v11 != v43);
}

__int16 *anti_collapse(__int16 *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  __int16 *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  signed int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  __int16 v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 *v67;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v73;
  int v74;

  if (a7 < a8)
  {
    v15 = result;
    if (1 << a4 <= 1)
      v17 = 1;
    else
      v17 = 1 << a4;
    v71 = a6;
    if (a5 <= 1)
      v18 = 1;
    else
      v18 = a5;
    v66 = v18;
    v19 = a7;
    v63 = a8;
    v64 = a5;
    v67 = result;
    do
    {
      v70 = v19;
      v20 = *(__int16 *)(*((_QWORD *)v15 + 3) + 2 * (v19 + 1)) - *(__int16 *)(*((_QWORD *)v15 + 3) + 2 * v19);
      v69 = v20 << a4;
      v21 = (*(_DWORD *)(a12 + 4 * v19) + 1) / (v20 << a4);
      v22 = (__int16)(-128 * v21);
      v65 = v19 + 1;
      if (v22 <= 15359)
      {
        if (v22 >= -15360)
        {
          v24 = (((((20408 * ((-2048 * v21) & 0x3800u)) >> 16) + 14819) * 2 * ((-2048 * v21) & 0x3800) + 1494482944) >> 16)
              * 2
              * ((-2048 * v21) & 0x3800)
              + 1073676288;
          v25 = -2 - ((__int16)(-128 * v21) >> 10);
          v26 = HIWORD(v24);
          if (v22 > -2049)
            v23 = v26 << -(char)v25;
          else
            v23 = v26 >> v25;
        }
        else
        {
          v23 = 0;
        }
      }
      else
      {
        v23 = 2130706432;
      }
      v27 = v23 >> 1;
      if (v27 >= 0x7FFF)
        v28 = 0x7FFF;
      else
        v28 = v27;
      v29 = 31 - __clz(v69);
      v74 = v29 >> 1;
      result = (__int16 *)celt_rsqrt_norm(v69 << (14 - (v29 & 0xFE)));
      v73 = (int)result;
      v30 = 0;
      v31 = (__int16)(v28 >> 1);
      v32 = v70;
      v15 = v67;
      v33 = a5;
      v34 = v66;
      v35 = a11;
      v37 = a9;
      v36 = a10;
      do
      {
        v38 = *((int *)v15 + 2);
        v39 = v32 + (int)v38 * (uint64_t)(int)v30;
        LOWORD(v40) = *(_WORD *)(v36 + 2 * v39);
        v41 = *(_WORD *)(v35 + 2 * v39);
        if (v33 == 1)
        {
          v42 = v32 + v38;
          if ((__int16)v40 <= *(__int16 *)(v36 + 2 * v42))
            LOWORD(v40) = *(_WORD *)(v36 + 2 * v42);
          v43 = *(__int16 *)(v35 + 2 * v42);
          if (v41 <= v43)
            v41 = v43;
        }
        v44 = *(__int16 *)(v37 + 2 * v39);
        v40 = (__int16)v40;
        if ((__int16)v40 >= v41)
          v40 = v41;
        v45 = (v44 - v40) & ~((v44 - v40) >> 31);
        if (v45 >> 14)
        {
          v47 = 0;
        }
        else
        {
          if ((unsigned __int16)v45 <= 0x3C00u)
          {
            v48 = (unsigned __int16)v45;
            v49 = -v45;
            v50 = (((((326528 * (v49 & 0x3FFu)) >> 16) + 14819) * 32 * (v49 & 0x3FF) + 1494482944) >> 16)
                * 32
                * (v49 & 0x3FF)
                + 1073676288;
            v51 = -2 - ((__int16)v49 >> 10);
            v52 = HIWORD(v50);
            if (v48 < 0x801)
              v46 = v52 << -(char)v51;
            else
              v46 = v52 >> v51;
          }
          else
          {
            v46 = 0;
          }
          v53 = v46 >> 1;
          if (v53 >= 0x3FFF)
            LOWORD(v53) = 0x3FFF;
          v47 = 2 * v53;
        }
        v54 = v47;
        if (v47 >= 23169)
          v54 = 23169;
        v55 = (23170 * v54) >> 14;
        if (a4 == 3)
          v47 = v55;
        v56 = v47;
        if (v31 < v47)
          v56 = v31;
        if (a4 != 31)
        {
          v57 = 0;
          v58 = 0;
          v59 = ((v56 >> 1) * v73) >> 15 >> v74;
          result = (__int16 *)(a2 + 2 * v30 * v71 + 2 * (*(__int16 *)(*((_QWORD *)v15 + 3) + 2 * v32) << a4));
          do
          {
            if (((1 << v58) & *(unsigned __int8 *)(a3 + v30 + v70 * v64)) != 0)
            {
              v60 = 1;
            }
            else
            {
              v57 = 1;
              v60 = v20 < 1;
            }
            if (!v60)
            {
              v61 = 0;
              do
              {
                a13 = 1664525 * a13 + 1013904223;
                if ((a13 & 0x8000) != 0)
                  v62 = v59;
                else
                  v62 = -(__int16)v59;
                result[(v61++ << a4) + v58] = v62;
              }
              while (v20 != v61);
              v57 = 1;
            }
            ++v58;
          }
          while (v58 != v17);
          if (v57)
          {
            result = (__int16 *)renormalise_vector(result, v69, 0x7FFF);
            v37 = a9;
            v36 = a10;
            v32 = v70;
            v34 = v66;
            v35 = a11;
            v15 = v67;
            v33 = a5;
          }
        }
        ++v30;
      }
      while (v30 != v34);
      v19 = v65;
    }
    while (v65 != v63);
  }
  return result;
}

__int16 *haar1(__int16 *result, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  int v13;

  if ((int)a3 >= 1)
  {
    v3 = 0;
    LODWORD(v4) = a2 >> 1;
    v5 = a3;
    if (a2 >> 1 <= 1)
      v4 = 1;
    else
      v4 = v4;
    v6 = 4 * a3;
    v7 = 4 * a3;
    v8 = &result[a3];
    do
    {
      if (a2 >= 2)
      {
        v9 = v4;
        v10 = v8;
        v11 = result;
        do
        {
          v12 = 46340 * *v11;
          v13 = 46340 * *v10;
          *v11 = HIWORD(v13) + HIWORD(v12);
          *v10 = HIWORD(v12) - HIWORD(v13);
          v11 = (__int16 *)((char *)v11 + v6);
          v10 = (__int16 *)((char *)v10 + v7);
          --v9;
        }
        while (v9);
      }
      ++v3;
      ++result;
      ++v8;
    }
    while (v3 != v5);
  }
  return result;
}

void quant_all_bands(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, int a12, unsigned int a13, uint64_t a14, int a15, int a16, uint64_t a17, int a18, unsigned int a19, _DWORD *a20)
{
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  __int16 *v37;
  BOOL v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  __int16 *v45;
  __int16 *v46;
  int v47;
  int v48;
  __int16 *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  __int16 *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __int16 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  __int16 *v74;
  __int16 *v75;
  __int16 *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  __int16 *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  __int16 *v88;
  int v89;
  uint64_t v90;
  int v91;
  __int16 *v92;
  __int16 *v93;
  uint64_t v94;
  int v95;
  _WORD *v96;
  __int16 *v97;
  __int16 *v98;
  char *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t *v107;
  uint64_t *v108;
  int v109;
  int v110;
  __int16 *v111;
  __int16 *v112;
  char *v113;
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  __int16 *v128;
  int v129;
  int v130;
  int v131;
  BOOL v132;
  int v133;
  int v134;
  int v135;
  __int16 *v136;
  __int16 *v137;
  uint64_t v138;
  __int16 v139;
  int v140;
  int v141;
  int v142;
  __int16 v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  __int16 *v153;
  uint64_t v154;
  __int16 v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  __int16 *v160;
  uint64_t v161;
  unsigned int v162;
  __int16 v163;
  uint64_t v164;
  __int16 *v165;
  int v166;
  uint64_t v167;
  _DWORD *v168;
  int v169;
  int v170;
  int v171;
  int v172;
  _BYTE v173[12];
  char *v174;
  __int16 *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  __int16 *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  __int16 *v190;
  __int16 *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;

  v210 = a8;
  v195 = a5;
  v209 = a4;
  v23 = a1;
  v207 = a13;
  v206 = a11;
  v220 = *MEMORY[0x1E0C80C00];
  v24 = *(_QWORD *)(a2 + 24);
  v196 = a6;
  v25 = a6 != 0;
  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  if (a10)
    v26 = 1 << a18;
  else
    v26 = 1;
  v201 = v26;
  v27 = *(__int16 *)(v24 + 2 * a3);
  v28 = *(int *)(a2 + 8);
  v197 = v24;
  v29 = v24 + 2 * v28;
  v194 = v27;
  MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v167 - v30;
  bzero((char *)&v167 - v30, v32);
  v33 = *(__int16 *)(v29 - 2);
  *(_QWORD *)&v214 = v210;
  v192 = a17;
  *(_QWORD *)&v213 = a17;
  v203 = v23;
  LODWORD(v211) = v23;
  v193 = a2;
  *((_QWORD *)&v211 + 1) = a2;
  v168 = a20;
  v34 = *a20;
  DWORD2(v214) = *a20;
  *(_QWORD *)((char *)&v212 + 4) = __PAIR64__(v206, v207);
  if (a3 < (int)v209)
  {
    v208 = 0;
    v35 = v194 << a18;
    v36 = v33 << a18;
    if (v196)
      v37 = (__int16 *)v31;
    else
      v37 = 0;
    v190 = v37;
    v38 = v206 == 3 && v201 <= 1;
    v39 = !v38;
    v189 = v39;
    v188 = ~(-1 << v201);
    v179 = a19;
    v187 = (int)a19;
    v186 = (int)v209;
    v185 = (int)v209 - 1;
    v182 = (int)v207;
    v184 = a15;
    v183 = a14;
    v204 = a12;
    v41 = v197;
    v178 = v197 - 2;
    v177 = v197 + 2;
    v42 = (uint64_t)&v31[2 * (int)v36 + -2 * v35];
    v191 = (__int16 *)v31;
    v176 = &v31[-2 * v35];
    v202 = a9;
    v200 = a3;
    v43 = a3;
    v44 = 1;
    v45 = (__int16 *)(v195 + 2 * v36);
    v180 = v194 << a18;
    v198 = v42;
    v167 = v42 - 2 * v35;
    while (1)
    {
      v210 = v43;
      v46 = v45;
      LODWORD(v212) = v43;
      v47 = *(__int16 *)(v41 + 2 * v43);
      v48 = v47 << a18;
      if (v196)
        v49 = (__int16 *)(v196 + 2 * v48);
      else
        v49 = 0;
      v207 = v43 + 1;
      v50 = *(__int16 *)(v41 + 2 * (v43 + 1));
      v51 = ec_tell_frac(v192);
      v52 = v210;
      v53 = 0;
      if (v210 == v200)
        v54 = 0;
      else
        v54 = v51;
      v55 = a16 - v54;
      v206 = v51;
      v56 = v184 - v51;
      DWORD2(v213) = v184 - v51 - 1;
      if (v210 < v187)
      {
        v57 = v179 - v210;
        if ((int)v179 - (int)v210 >= 3)
          v57 = 3;
        v58 = *(_DWORD *)(v202 + 4 * v210) + v55 / v57;
        if (v56 >= v58)
          v56 = v58;
        v59 = v56 & ~(v56 >> 31);
        if (v59 >= 0x3FFF)
          v53 = 0x3FFF;
        else
          v53 = v59;
      }
      v60 = v50 - v47;
      v205 = v55;
      if (v203)
      {
        v61 = v195;
        v41 = v197;
        v62 = v201;
        v63 = v194;
        v64 = v191;
        v65 = v208;
        v66 = v185;
        v67 = v198;
      }
      else
      {
        v41 = v197;
        v61 = v195;
        v62 = v201;
        v63 = v194;
        v64 = v191;
        v65 = v208;
        v66 = v185;
        v67 = v198;
        if ((*(__int16 *)(v197 + 2 * v210) - v60) << a18 >= *(__int16 *)(v197 + 2 * v200) << a18 && (v44 || v208 == 0))
          v65 = v210;
      }
      v69 = (__int16 *)(v61 + 2 * v48);
      v70 = *(_DWORD *)(v183 + 4 * v210);
      v71 = (v60 << a18);
      HIDWORD(v212) = v70;
      v72 = *(int *)(v193 + 12);
      v73 = v210 < v72;
      if (v210 >= v72)
        v74 = 0;
      else
        v74 = v46;
      if (v73)
        v75 = v69;
      else
        v75 = v64;
      if (v73)
        v76 = v49;
      else
        v76 = v190;
      if (v210 == v66)
        v45 = 0;
      else
        v45 = v74;
      if (v70 < 0)
        v77 = 1;
      else
        v77 = v189;
      v78 = -1;
      if (v65)
      {
        v79 = v188;
        v80 = v188;
        if (v77)
        {
          v81 = (*(__int16 *)(v41 + 2 * v65) - v63 - v60) << a18;
          v78 = v81 & ~(v81 >> 31);
          v82 = v78 + v180;
          v83 = (__int16 *)(v178 + 2 * v65);
          v84 = v65;
          do
          {
            v85 = *v83--;
            --v84;
          }
          while (v85 << a18 > v82);
          v86 = v82 + v71;
          v87 = v65 - 2;
          v88 = (__int16 *)(v177 + 2 * (v65 - 1));
          do
          {
            v89 = *v88++;
            ++v87;
          }
          while (v89 << a18 < v86);
          v80 = 0;
          v79 = 0;
          do
          {
            v80 |= *(unsigned __int8 *)(a7 + (v84 << v25));
            v79 |= *(unsigned __int8 *)(a7 + (v84 << v25) + v25);
            v38 = v84++ < v87;
          }
          while (v38);
        }
      }
      else
      {
        v79 = v188;
        v80 = v188;
      }
      v208 = v65;
      if (v204)
      {
        if (v203 || v210 != v182)
        {
          if (v210 != v182)
          {
            v181 = v45;
            v199 = v53;
            v91 = v53 >> 1;
            *(_QWORD *)&v173[4] = v78;
            if (v78 == -1)
              v92 = 0;
            else
              v92 = &v64[v78];
            LODWORD(v174) = v53 >> 1;
            if (v210 == v66)
            {
              v93 = v75;
              v94 = v71;
              v95 = v62;
              LODWORD(v175) = quant_band((int *)&v211, v93, v71, v91, v62, v92, a18, 0, 0x7FFF, 0, v80);
              v96 = 0;
              if (v78 == -1)
                v97 = 0;
              else
                v97 = (__int16 *)(v198 + 2 * *(_QWORD *)&v173[4]);
            }
            else
            {
              v127 = v210;
              v128 = v75;
              v94 = v71;
              v95 = v62;
              LODWORD(v175) = quant_band((int *)&v211, v128, v71, v91, v62, v92, a18, &v176[2 * (*(__int16 *)(v41 + 2 * v210) << a18)], 0x7FFF, v74, v80);
              if (v78 == -1)
                v97 = 0;
              else
                v97 = (__int16 *)(v198 + 2 * *(_QWORD *)&v173[4]);
              v96 = (_WORD *)(v167 + 2 * (*(__int16 *)(v41 + 2 * v127) << a18));
            }
            v129 = v95;
            v45 = v181;
            v115 = quant_band((int *)&v211, v76, v94, (int)v174, v129, v97, a18, v96, 0x7FFF, v181, v79);
            v104 = v207;
            v105 = v206;
            v106 = v199;
            LODWORD(v101) = v94;
            LOBYTE(v103) = (_BYTE)v175;
            goto LABEL_121;
          }
        }
        else if ((*(__int16 *)(v41 + 2 * v210) - v63) << a18 >= 1)
        {
          v90 = 0;
          do
          {
            v64[v90] = (*(__int16 *)(v67 + 2 * v90) + v64[v90]) >> 1;
            ++v90;
          }
          while (v90 < (*(__int16 *)(v41 + 2 * v52) - v63) << a18);
        }
      }
      if (v78 == -1)
        v98 = 0;
      else
        v98 = &v64[v78];
      v209 = v71;
      if (v76)
      {
        if (v52 == v66)
          v99 = 0;
        else
          v99 = &v176[2 * (*(__int16 *)(v41 + 2 * v52) << a18)];
        v100 = v79 | v80;
        v199 = v53;
        v218 = v79 | v80;
        v219 = v53;
        if ((_DWORD)v71 == 1)
        {
          quant_band_n1((uint64_t)&v211, v75, v76, v99);
          LODWORD(v101) = v209;
          v102 = v210;
          LOBYTE(v103) = 1;
          v104 = v207;
          v105 = v206;
          v106 = v199;
LABEL_159:
          v204 = 0;
          v115 = v103;
          goto LABEL_160;
        }
        v174 = v99;
        v175 = v98;
        v204 = v211;
        v107 = (uint64_t *)v213;
        v215 = 0;
        v216 = 0;
        v217 = 0;
        compute_theta((int *)&v211, (uint64_t)&v215, v75, v76, v209, &v219, v62, v62, a18, 1, &v218);
        *(_QWORD *)v173 = v215;
        if ((_DWORD)v209 == 2)
        {
          v108 = v107;
          v109 = v219;
          if ((v217 & 0xFFFFBFFF) != 0)
            v110 = -8;
          else
            v110 = 0;
          DWORD2(v213) += v110 - HIDWORD(v217);
          if ((int)v217 <= 0x2000)
            v111 = v75;
          else
            v111 = v76;
          if ((int)v217 <= 0x2000)
            v112 = v76;
          else
            v112 = v75;
          v172 = v216;
          if ((v217 & 0xFFFFBFFF) != 0)
          {
            v169 = v110;
            v170 = v219;
            if (v204)
            {
              v171 = v112[1] * *v111 < *v112 * v111[1];
              ec_enc_bits(v108, v171, 1);
            }
            else
            {
              v171 = ec_dec_bits(v108, 1u);
            }
            v109 = v170;
            v110 = v169;
          }
          else
          {
            v171 = 0;
          }
          LOBYTE(v103) = quant_band((int *)&v211, v111, 2, v109 + v110, v201, v175, a18, v174, 0x7FFF, v45, v100);
          v143 = 2 * v171;
          *v112 = (2 * v171 - 1) * v111[1];
          v112[1] = *v111 - *v111 * v143;
          if (v204)
          {
            v104 = v207;
            v105 = v206;
            v106 = v199;
            LODWORD(v101) = v209;
            v102 = v210;
            goto LABEL_159;
          }
          v144 = *(__int16 *)&v173[4];
          *v75 = (*(__int16 *)&v173[4] * *v75) >> 15;
          v75[1] = (v144 * v75[1]) >> 15;
          v145 = (__int16)v172;
          v146 = (__int16)v172 * *v76;
          *v76 = v146 >> 15;
          v76[1] = (v145 * v76[1]) >> 15;
          LOWORD(v145) = *v75;
          *v75 -= v146 >> 15;
          *v76 += v145;
          LOWORD(v145) = v75[1];
          v75[1] = v145 - v76[1];
          v76[1] += v145;
          v106 = v199;
          v101 = v209;
          v102 = v210;
        }
        else
        {
          v171 = v217;
          v116 = v218;
          v117 = v219 - HIDWORD(v216);
          if (v219 < SHIDWORD(v216))
            ++v117;
          if (v219 >= v117 >> 1)
            v118 = v117 >> 1;
          else
            v118 = v219;
          v119 = v118 & ~(v118 >> 31);
          v120 = DWORD2(v213) - HIDWORD(v217);
          DWORD2(v213) -= HIDWORD(v217);
          v181 = v45;
          if (v119 >= v219 - v119)
          {
            v165 = v45;
            v170 = v219 - v119;
            v130 = v201;
            v172 = v216;
            LODWORD(v175) = quant_band((int *)&v211, v75, v209, v118 & ~(v118 >> 31), v201, v175, a18, v174, 0x7FFF, v165, v218);
            v131 = DWORD2(v213) - v120 + v119;
            if (v171)
              v132 = v131 <= 24;
            else
              v132 = 1;
            if (v132)
              v133 = 0;
            else
              v133 = v131 - 24;
            v125 = quant_band((int *)&v211, v76, v209, v133 + v170, v130, 0, a18, 0, v172, 0, v116 >> v130);
            v126 = &v210;
          }
          else
          {
            v121 = v219 - v119;
            v172 = quant_band((int *)&v211, v76, v209, v219 - v119, v201, 0, a18, 0, v216, 0, v218 >> v201);
            v122 = DWORD2(v213) - v120 + v121;
            if (v171 == 0x4000 || v122 <= 24)
              v124 = 0;
            else
              v124 = v122 - 24;
            v125 = quant_band((int *)&v211, v75, v209, v124 + v119, v201, v175, a18, v174, 0x7FFF, v181, v116);
            v126 = &v207;
          }
          v103 = v125 | *((_DWORD *)v126 - 64);
          v106 = v199;
          v102 = v210;
          if (v204)
          {
            v104 = v207;
            v105 = v206;
            LODWORD(v101) = v209;
            v45 = v181;
            goto LABEL_159;
          }
          v101 = v209;
          if ((int)v209 < 1)
          {
            v135 = 0;
            v134 = 0;
            v139 = *(_WORD *)&v173[4];
          }
          else
          {
            v134 = 0;
            v135 = 0;
            v136 = v76;
            v137 = v75;
            v138 = v209;
            v139 = *(_WORD *)&v173[4];
            do
            {
              v141 = *v136++;
              v140 = v141;
              v142 = *v137++;
              v135 += v142 * v140;
              v134 += v140 * v140;
              --v138;
            }
            while (v138);
          }
          v147 = v139;
          v148 = v134 + (v139 >> 1) * (v139 >> 1);
          v149 = (v135 >> 16) * 4 * v139 + 2 * (((unsigned __int16)v135 * v139) >> 15);
          v150 = v148 - v149;
          v151 = v149 + v148;
          if (v149 + v148 < 161061 || (int)v150 < 161061)
          {
            v45 = v181;
            if ((int)v209 < 1)
            {
              v104 = v207;
              v105 = v206;
              goto LABEL_159;
            }
            v153 = v76;
            v154 = v209;
            do
            {
              v155 = *v75++;
              *v153++ = v155;
              --v154;
            }
            while (v154);
          }
          else
          {
            LODWORD(v175) = v103;
            v156 = 31 - __clz(v150);
            v157 = 31 - __clz(v151);
            v158 = celt_rsqrt_norm(v150 >> ((v156 & 0xFE) - 14));
            v159 = celt_rsqrt_norm(v151 >> ((v157 & 0xFE) - 14));
            v101 = v209;
            if ((int)v209 < 1)
            {
              v41 = v197;
              v45 = v181;
              v104 = v207;
              v105 = v206;
              v106 = v199;
              LOBYTE(v103) = (_BYTE)v175;
              v102 = v210;
              goto LABEL_159;
            }
            v160 = v76;
            v161 = v209;
            v45 = v181;
            v106 = v199;
            v102 = v210;
            do
            {
              v162 = v147 * *v75;
              v163 = *v160;
              *v75++ = (int)(((2 << (v156 >> 1)) >> 1) + (__int16)((v162 >> 15) - *v160) * v158) >> ((v156 >> 1) + 1);
              *v160++ = (int)(((2 << (v157 >> 1)) >> 1) + (__int16)(v163 + (v162 >> 15)) * v159) >> ((v157 >> 1) + 1);
              --v161;
            }
            while (v161);
            v41 = v197;
            LOBYTE(v103) = (_BYTE)v175;
          }
        }
        v104 = v207;
        v105 = v206;
        if ((int)v101 >= 1 && *(_DWORD *)v173)
        {
          v164 = v101;
          do
          {
            *v76 = -*v76;
            ++v76;
            --v164;
          }
          while (v164);
        }
        goto LABEL_159;
      }
      if (v52 == v66)
        v113 = 0;
      else
        v113 = &v176[2 * (*(__int16 *)(v41 + 2 * v52) << a18)];
      v166 = v79 | v80;
      v114 = v53;
      v115 = quant_band((int *)&v211, v75, v71, v53, v62, v98, a18, v113, 0x7FFF, v45, v166);
      LODWORD(v101) = v209;
      v106 = v114;
      LOBYTE(v103) = v115;
      v204 = 0;
      v104 = v207;
      v105 = v206;
LABEL_121:
      v102 = v210;
LABEL_160:
      *(_BYTE *)(a7 + (int)((_DWORD)v102 << v25)) = v103;
      *(_BYTE *)(a7 + ((_DWORD)v102 << v25) + v25) = v115;
      a16 = v205 + v105 + *(_DWORD *)(v202 + 4 * v102);
      v44 = v106 > 8 * (int)v101;
      v43 = v104;
      if (v104 >= v186)
      {
        v34 = DWORD2(v214);
        break;
      }
    }
  }
  *v168 = v34;
}

uint64_t quant_band(int *a1, __int16 *a2, uint64_t a3, int a4, int a5, __int16 *a6, int a7, _WORD *a8, __int16 a9, __int16 *a10, int a11)
{
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  BOOL v33;
  _BOOL4 v34;
  int v35;
  _WORD *v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  int v41;
  int v42;
  _BOOL4 v44;
  char v45;
  int v46;
  int v50;
  int v51;

  v11 = a3;
  v12 = a2;
  if ((_DWORD)a3 == 1)
  {
    quant_band_n1((uint64_t)a1, a2, 0, a8);
    return v11;
  }
  v13 = a6;
  v16 = *a1;
  v17 = a1[7] & ~(a1[7] >> 31);
  v18 = (int)a3 / a5;
  v50 = a1[7];
  v51 = v17;
  v44 = a5 == 1;
  if (a6 && a10)
  {
    if (v50 <= 0)
    {
      v33 = (v18 & 1) != 0 || v50 == 0;
      v34 = !v33;
      if (a5 <= 1 && !v34)
      {
        v45 = 1;
        goto LABEL_18;
      }
    }
    if ((int)a3 >= 1)
    {
      v19 = 0;
      do
      {
        a10[v19] = a6[v19];
        ++v19;
      }
      while (a3 != v19);
    }
    v13 = a10;
  }
  v45 = 1;
  if (v50 >= 1)
  {
    v46 = (int)a3 / a5;
    v20 = 0;
    do
    {
      v21 = v11;
      v22 = (int)v11 >> v20;
      if (v16)
        haar1(v12, v22, 1 << v20);
      if (v13)
        haar1(v13, v22, 1 << v20);
      a11 = quant_band_bit_interleave_table[a11 & 0xF] | (4 * quant_band_bit_interleave_table[a11 >> 4]);
      ++v20;
      v11 = v21;
    }
    while (v51 != v20);
    v45 = 0;
    LOBYTE(v17) = v51;
    v18 = v46;
  }
LABEL_18:
  v23 = 0;
  v24 = a5 >> v17;
  v25 = v18 << v17;
  if (((v18 << v17) & 1) != 0 || (v50 & 0x80000000) == 0)
  {
    v27 = v18 << v17;
  }
  else
  {
    v26 = 0;
    do
    {
      if (v16)
        haar1(v12, v25, v24);
      if (v13)
        haar1(v13, v25, v24);
      a11 |= a11 << v24;
      v24 *= 2;
      v27 = v25 >> 1;
      v23 = v26 + 1;
      if ((v25 & 2) != 0)
        break;
      v28 = v50 + v26++;
      v25 >>= 1;
    }
    while (v28 < -1);
  }
  if (v24 < 2)
  {
    v42 = a11;
    v31 = v11;
    v11 = quant_partition((uint64_t)a1, v12, v11, a4, v24, v13, a7, a9, v42);
    if (v16)
      return v11;
    goto LABEL_37;
  }
  v29 = v27 >> v51;
  v30 = v24 << v51;
  if (v16)
    deinterleave_hadamard(v12, v27 >> v51, v24 << v51, v44);
  if (v13)
    deinterleave_hadamard(v13, v29, v30, v44);
  v41 = a11;
  v31 = v11;
  v11 = quant_partition((uint64_t)a1, v12, v11, a4, v24, v13, a7, a9, v41);
  if (!v16)
  {
    interleave_hadamard((char *)v12, v29, v30, v44);
LABEL_37:
    while (v23)
    {
      v24 >>= 1;
      v27 *= 2;
      LODWORD(v11) = (v11 >> v24) | v11;
      haar1(v12, v27, v24);
      --v23;
    }
    if ((v45 & 1) != 0)
    {
      v32 = v51;
    }
    else
    {
      v35 = 0;
      v32 = v51;
      do
      {
        LODWORD(v11) = quant_band_bit_deinterleave_table[v11];
        haar1(v12, v31 >> v35, 1 << v35);
        ++v35;
      }
      while (v51 != v35);
    }
    v36 = a8;
    if (a8)
    {
      v37 = celt_sqrt((v31 << 22));
      if (v31 >= 1)
      {
        v38 = v31;
        do
        {
          v39 = *v12++;
          *v36++ = (v37 * v39) >> 15;
          --v38;
        }
        while (v38);
      }
    }
    return v11 & ~(-1 << (v24 << v32));
  }
  return v11;
}

uint64_t quant_band_n1(uint64_t result, __int16 *a2, __int16 *a3, _WORD *a4)
{
  uint64_t v7;
  int v8;
  uint64_t *v9;
  int v10;
  char v11;
  __int16 *v12;
  int v13;
  __int16 v14;
  char v15;

  v7 = result;
  v8 = *(_DWORD *)result;
  v9 = *(uint64_t **)(result + 32);
  v10 = *(_DWORD *)(result + 40);
  v11 = 1;
  v12 = a2;
  do
  {
    if (v10 < 8)
    {
      v13 = 0;
      if (v8)
        goto LABEL_13;
LABEL_9:
      if (v13)
        v14 = -16384;
      else
        v14 = 0x4000;
      *v12 = v14;
      goto LABEL_13;
    }
    if (v8)
    {
      v13 = (unsigned __int16)*v12 >> 15;
      result = (uint64_t)ec_enc_bits(v9, v13, 1);
    }
    else
    {
      result = ec_dec_bits(v9, 1u);
      v13 = result;
    }
    v10 = *(_DWORD *)(v7 + 40) - 8;
    *(_DWORD *)(v7 + 40) = v10;
    if (!v8)
      goto LABEL_9;
LABEL_13:
    v15 = (a3 != 0) & v11;
    v12 = a3;
    v11 = 0;
  }
  while ((v15 & 1) != 0);
  if (a4)
    *a4 = *a2 >> 4;
  return result;
}

void deinterleave_hadamard(_WORD *a1, int a2, int a3, int a4)
{
  int v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v8 = a3 * a2;
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v23 - v9;
  bzero((char *)v23 - v9, v11);
  if (a4)
  {
    if (a3 >= 1)
    {
      v12 = 0;
      v13 = a1;
      do
      {
        if (a2 >= 1)
        {
          v14 = &v10[2 * ordery_table[a3 - 2 + v12] * a2];
          v15 = a2;
          v16 = v13;
          do
          {
            *(_WORD *)v14 = *v16;
            v14 += 2;
            v16 += a3;
            --v15;
          }
          while (v15);
        }
        ++v12;
        ++v13;
      }
      while (v12 != a3);
    }
  }
  else if (a3 >= 1)
  {
    v17 = 0;
    v18 = a1;
    v19 = v10;
    do
    {
      if (a2 >= 1)
      {
        v20 = a2;
        v21 = v18;
        v22 = v19;
        do
        {
          *v22++ = *v21;
          v21 += a3;
          --v20;
        }
        while (v20);
      }
      ++v17;
      v19 += a2;
      ++v18;
    }
    while (v17 != a3);
  }
  if (v8 >= 1)
    memcpy(a1, v10, 2 * v8);
}

uint64_t quant_partition(uint64_t a1, __int16 *a2, int a3, int a4, int a5, __int16 *a6, int a7, int a8, int a9)
{
  char v9;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int16 *v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int16 *v40;
  int v41;
  int v42;
  int v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  __int16 *v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  int v69;
  __int16 *v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  __int16 *v74;
  int v75;
  unsigned int v76;
  int v78;
  unsigned int v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;

  v9 = a7;
  v14 = a9;
  v84 = a4;
  v15 = *(_DWORD *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_DWORD *)(a1 + 16);
  v18 = *(_DWORD *)(a1 + 24);
  v19 = *(uint64_t **)(a1 + 32);
  v21 = *(_QWORD *)(v16 + 128);
  v20 = *(_QWORD *)(v16 + 136);
  if (a7 == -1)
  {
    v23 = v17;
  }
  else
  {
    v22 = *(_DWORD *)(v16 + 8) + *(_DWORD *)(v16 + 8) * a7 + v17;
    v23 = v22;
    if (a3 >= 3)
    {
      v24 = (unsigned __int8 *)(v20 + *(__int16 *)(v21 + 2 * v22));
      if (v24[*v24] + 12 < a4)
      {
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v25 = a3 >> 1;
        v26 = &a2[v25];
        if (a5 == 1)
          a9 = a9 & 1 | (2 * a9);
        v27 = ((a5 + 1) >> 1);
        v79 = a7 - 1;
        compute_theta((int *)a1, (uint64_t)&v81, a2, &a2[v25], v25, &v84, (a5 + 1) >> 1, a5, a7 - 1, 0, &a9);
        v28 = WORD2(v81);
        v29 = v82;
        v30 = HIDWORD(v82);
        v31 = v83;
        v32 = (HIDWORD(v82) + ((8 * (int)v25) >> (6 - v9))) & ((HIDWORD(v82) + ((8 * (int)v25) >> (6 - v9))) >> 31);
        if ((int)v83 > 0x2000)
          v32 = HIDWORD(v82) - (SHIDWORD(v82) >> (5 - v9));
        if ((v83 & 0x3FFF) != 0)
          v33 = v32;
        else
          v33 = HIDWORD(v82);
        if (a5 >= 2)
          v30 = v33;
        v34 = __OFSUB__(v84, v30);
        v35 = v84 - v30;
        if (v35 < 0 != v34)
          ++v35;
        if (v84 >= v35 >> 1)
          v36 = v35 >> 1;
        else
          v36 = v84;
        v37 = v36 & ~(v36 >> 31);
        v75 = a5;
        v38 = (v84 - v37);
        v39 = *(_DWORD *)(a1 + 40) - HIDWORD(v83);
        *(_DWORD *)(a1 + 40) = v39;
        if (a6)
          v40 = &a6[v25];
        else
          v40 = 0;
        v41 = a9;
        if ((int)v37 >= (int)v38)
        {
          v72 = v29;
          v74 = v40;
          v78 = quant_partition(a1, a2, v25, v37, v27, a6, v79, (__int16)((v28 * a8 + 0x4000) >> 15), a9);
          v60 = *(_DWORD *)(a1 + 40) - v39 + v37;
          if (v31)
            v61 = v60 <= 24;
          else
            v61 = 1;
          if (v61)
            v62 = 0;
          else
            v62 = v60 - 24;
          return (quant_partition(a1, v26, v25, (v62 + v38), v27, v74, v79, (__int16)((v72 * a8 + 0x4000) >> 15), v41 >> v27) << (v75 >> 1)) | v78;
        }
        else
        {
          v73 = v28;
          v76 = quant_partition(a1, v26, v25, v38, v27, v40, v79, (__int16)((v29 * a8 + 0x4000) >> 15), a9 >> v27) << (v75 >> 1);
          v42 = *(_DWORD *)(a1 + 40) - v39 + v38;
          if (v31 == 0x4000 || v42 <= 24)
            v44 = 0;
          else
            v44 = v42 - 24;
          return quant_partition(a1, a2, v25, (v44 + v37), v27, a6, v79, (__int16)((v73 * a8 + 0x4000) >> 15), v41) | v76;
        }
      }
    }
  }
  v46 = 0;
  v47 = (unsigned __int8 *)(v20 + *(__int16 *)(v21 + 2 * v23));
  v48 = *v47;
  v49 = a4 - 1;
  v50 = 6;
  do
  {
    if (v49 <= v47[(v48 + v46 + 1) >> 1])
      v48 = (v48 + v46 + 1) >> 1;
    else
      v46 = (v48 + v46 + 1) >> 1;
    --v50;
  }
  while (v50);
  if (v46)
    v51 = v47[v46];
  else
    v51 = -1;
  if (v49 - v51 <= v47[v48] - v49)
    v52 = v46;
  else
    v52 = v48;
  if (!(_DWORD)v52)
    goto LABEL_55;
  v53 = v47[(int)v52] + 1;
  v54 = *(_DWORD *)(a1 + 40) - v53;
  *(_DWORD *)(a1 + 40) = v54;
  if (v54 < 0 && (int)v52 >= 1)
  {
    v55 = v52 - 1;
    do
    {
      v56 = v53 + v54;
      *(_DWORD *)(a1 + 40) = v56;
      v57 = v55;
      if ((_DWORD)v55)
        v53 = v47[v55] + 1;
      else
        v53 = 0;
      v54 = v56 - v53;
      *(_DWORD *)(a1 + 40) = v54;
      LODWORD(v52) = v52 - 1;
      if ((v54 & 0x80000000) == 0)
        break;
      v58 = v55-- + 1;
    }
    while (v58 > 1);
    if (!v57)
    {
LABEL_55:
      if (!v15)
      {
        v45 = (1 << a5) - 1;
        if ((v45 & v14) != 0)
        {
          if (a6)
          {
            if (a3 >= 1)
            {
              v63 = *(_DWORD *)(a1 + 56);
              v64 = a2;
              v65 = a3;
              do
              {
                v63 = 1664525 * v63 + 1013904223;
                v67 = *a6++;
                v66 = v67;
                if ((v63 & 0x8000) != 0)
                  v68 = 4;
                else
                  v68 = -4;
                *v64++ = v68 + v66;
                --v65;
              }
              while (v65);
              *(_DWORD *)(a1 + 56) = v63;
            }
            v45 = v45 & v14;
          }
          else if (a3 >= 1)
          {
            v69 = *(_DWORD *)(a1 + 56);
            v70 = a2;
            v71 = a3;
            do
            {
              v69 = 1664525 * v69 + 1013904223;
              *v70++ = v69 >> 20;
              --v71;
            }
            while (v71);
            *(_DWORD *)(a1 + 56) = v69;
          }
          renormalise_vector(a2, a3, a8);
          return v45;
        }
        if (a3 >= 1)
          bzero(a2, 2 * a3);
      }
      return 0;
    }
  }
  if ((int)v52 >= 8)
    LODWORD(v52) = (v52 & 7 | 8) << ((v52 >> 3) - 1);
  if (v15)
    return alg_quant(a2, a3, v52, v18, a5, v19);
  else
    return alg_unquant((uint64_t)a2, a3, v52, v18, a5, (uint64_t)v19, a8);
}

void interleave_hadamard(char *a1, int a2, int a3, int a4)
{
  int v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  _WORD *v16;
  __int16 v17;
  uint64_t v18;
  __int16 *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 *v22;
  _WORD *v23;
  __int16 v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v8 = a3 * a2;
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v25 - v9;
  bzero((char *)v25 - v9, v11);
  if (a4)
  {
    if (a3 >= 1)
    {
      v12 = 0;
      v13 = v10;
      do
      {
        if (a2 >= 1)
        {
          v14 = &a1[2 * ordery_table[a3 - 2 + v12] * a2];
          v15 = a2;
          v16 = v13;
          do
          {
            v17 = *(_WORD *)v14;
            v14 += 2;
            *v16 = v17;
            v16 += a3;
            --v15;
          }
          while (v15);
        }
        ++v12;
        ++v13;
      }
      while (v12 != a3);
    }
  }
  else if (a3 >= 1)
  {
    v18 = 0;
    v19 = (__int16 *)a1;
    v20 = v10;
    do
    {
      if (a2 >= 1)
      {
        v21 = a2;
        v22 = v19;
        v23 = v20;
        do
        {
          v24 = *v22++;
          *v23 = v24;
          v23 += a3;
          --v21;
        }
        while (v21);
      }
      ++v18;
      ++v20;
      v19 += a2;
    }
    while (v18 != a3);
  }
  if (v8 >= 1)
    memcpy(a1, v10, 2 * v8);
}

uint64_t compute_theta(int *a1, uint64_t a2, __int16 *a3, __int16 *a4, int a5, int *a6, char a7, int a8, int a9, int a10, _DWORD *a11)
{
  int v11;
  __int16 *v12;
  __int16 *v13;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v28;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int *v34;
  uint64_t v35;
  __int16 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  __int16 v47;
  char v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  _DWORD *v59;
  int v60;
  uint64_t result;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int32x2_t v70;
  int v71;
  int v72;
  int32x2_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  unsigned __int16 v77;
  int32x2_t v78;
  uint32x2_t v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v86;
  int v87;
  uint64_t *v89;

  v11 = a5;
  v12 = a4;
  v13 = a3;
  v15 = a1[4];
  v89 = (uint64_t *)*((_QWORD *)a1 + 4);
  v16 = *(__int16 *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 56) + 2 * v15) + 8 * a9;
  v17 = a10 != 0;
  v18 = a5 == 2;
  v19 = !v18 || !v17;
  if (v18 && v17)
    v20 = -16;
  else
    v20 = -4;
  v21 = v20 + (v16 >> 1);
  v22 = *a6;
  if (v19)
    v23 = -1;
  else
    v23 = -2;
  v24 = v22 - v16 - 32;
  v25 = (v22 + v21 * (v23 + 2 * a5)) / (v23 + 2 * a5);
  if (v24 >= v25)
    v24 = v25;
  if (v24 >= 64)
    v24 = 64;
  v83 = *((_QWORD *)a1 + 1);
  if (v24 >= 4)
    v28 = ((compute_qn_exp2_table8[v24 & 7] >> (14 - (v24 >> 3))) + 1) & 0xFFFFFFFE;
  else
    v28 = 1;
  v82 = *((_QWORD *)a1 + 6);
  v84 = a1[4];
  if ((int)v15 < a1[5] || a10 == 0)
    v30 = v28;
  else
    v30 = 1;
  v31 = *a1;
  if (*a1)
    v32 = stereo_itheta(a3, a4, a10, a5);
  else
    v32 = 0;
  v87 = ec_tell_frac((uint64_t)v89);
  if (v30 == 1)
  {
    if (a10)
    {
      if (v31)
      {
        v33 = v32 <= 0x2000;
        v32 = v32 > 0x2000;
        v34 = a6;
        if (!v33 && v11 >= 1)
        {
          v35 = v11;
          v36 = v12;
          do
          {
            *v36 = -*v36;
            ++v36;
            --v35;
          }
          while (v35);
        }
        intensity_stereo(v83, v13, v12, v82, v84, v11);
        v37 = v31;
      }
      else
      {
        v37 = 0;
        v32 = 0;
        v34 = a6;
      }
      v59 = a11;
      v60 = v87;
      if (*v34 < 17 || a1[10] < 17)
      {
        v32 = 0;
      }
      else if (v37)
      {
        ec_enc_bit_logp(v89, v32, 2);
      }
      else
      {
        v32 = ec_dec_bit_logp((uint64_t)v89, 2);
      }
      goto LABEL_67;
    }
    goto LABEL_59;
  }
  v38 = v32 * v30 + 0x2000;
  v39 = v38 >> 14;
  if (v11 > 2 && a10)
  {
    v80 = v11;
    v81 = a7;
    v86 = a2;
    if (v30 >= 0)
      v40 = v30;
    else
      v40 = v30 + 1;
    v41 = v40 >> 1;
    v42 = (v40 >> 1) + 1;
    v43 = 3 * v42;
    v44 = 3 * v42 + (v40 >> 1);
    if (v31)
    {
      if (v39 <= v41)
        v45 = 3 * v39;
      else
        v45 = v43 + ~v41 + v39;
      if (v39 <= v41)
        v46 = 3 * v39 + 3;
      else
        v46 = v43 - v41 + v39;
      ec_encode(v89, v45, v46, v44);
      a2 = v86;
      v11 = v80;
      a7 = v81;
      goto LABEL_53;
    }
    v63 = 3 * v42 + (v40 >> 1);
    v64 = ec_decode(v89, v44);
    if (v64 < v43)
      v39 = v64 / 3;
    else
      v39 = v64 - 2 * v42;
    if (v39 <= v41)
      v65 = 3 * v39;
    else
      v65 = v43 + ~v41 + v39;
    if (v39 <= v41)
      v66 = 3 * v39 + 3;
    else
      v66 = v43 - v41 + v39;
    ec_dec_update(v89, v65, v66, v63);
    a2 = v86;
    LOWORD(v11) = v80;
    a7 = v81;
LABEL_85:
    v55 = a6;
    v58 = v87;
    v32 = (v39 << 14) / v30;
    goto LABEL_86;
  }
  if (a8 < 2 && !a10)
  {
    v47 = v11;
    v48 = a7;
    v49 = a2;
    v50 = v30 >> 1;
    v11 = (v30 >> 1) + 1;
    v51 = v11 * v11;
    if (v31)
    {
      v52 = v30 - v39 + 1;
      if (v39 > v50)
      {
        v53 = v51 - ((v52 * (v30 - v39 + 2)) >> 1);
      }
      else
      {
        v52 = v39 + 1;
        v53 = ((v39 + 1) * v39) >> 1;
      }
      ec_encode(v89, v53, v53 + v52, v11 * v11);
      a2 = v49;
      a7 = v48;
      LOWORD(v11) = v47;
    }
    else
    {
      v67 = ec_decode(v89, v11 * v11);
      if (v67 >= (v11 * v50) >> 1)
      {
        v39 = (2 * (v30 + 1) - isqrt32((8 * (v51 + ~v67)) | 1u)) >> 1;
        v68 = v30 + 1 - v39;
        v69 = v51 - ((v68 * (v30 - v39 + 2)) >> 1);
      }
      else
      {
        v39 = (isqrt32((8 * v67) | 1u) - 1) >> 1;
        v68 = v39 + 1;
        v69 = ((v39 + 1) * v39) >> 1;
      }
      a7 = v48;
      LOWORD(v11) = v47;
      ec_dec_update(v89, v69, v69 + v68, v51);
      a2 = v49;
    }
    goto LABEL_85;
  }
  if (!v31)
  {
    v39 = ec_dec_uint((uint64_t)v89, v30 + 1);
    goto LABEL_85;
  }
  ec_enc_uint(v89, v38 >> 14, v30 + 1);
LABEL_53:
  v32 = (int)(v38 & 0xFFFFC000) / v30;
  if (a10)
  {
    if (!v32)
    {
      intensity_stereo(v83, v13, v12, v82, v84, v11);
      v34 = a6;
      v59 = a11;
      v60 = v87;
LABEL_67:
      result = ec_tell_frac((uint64_t)v89);
      v62 = result - v60;
      *v34 -= result - v60;
      goto LABEL_89;
    }
    if (v11 >= 1)
    {
      v54 = v11;
      v55 = a6;
      do
      {
        v56 = 46340 * *v13;
        v57 = (46340 * *v12) >> 16;
        *v13++ = ((46340 * *v12) >> 16) + HIWORD(v56);
        *v12++ = v57 - HIWORD(v56);
        --v54;
      }
      while (v54);
      goto LABEL_60;
    }
  }
LABEL_59:
  v55 = a6;
LABEL_60:
  v58 = v87;
LABEL_86:
  result = ec_tell_frac((uint64_t)v89);
  v62 = result - v58;
  *v55 -= result - v58;
  if (v32 == 0x4000)
  {
    v72 = 0;
    *a11 &= ~(-1 << a7) << a7;
    v70 = (int32x2_t)0x7FFF00000000;
    v71 = 0x4000;
    goto LABEL_92;
  }
  if (v32)
  {
    v72 = 0;
    v73.i32[0] = v32 << 16;
    v73.i32[1] = 0x40000000 - (v32 << 16);
    v74 = vshr_n_s32(vmla_s32((int32x2_t)0x800000008000, vshl_s32(v73, (int32x2_t)0xFFFFFFF3FFFFFFF0), vshl_s32(v73, (int32x2_t)0xFFFFFFF0FFFFFFF3)), 0x10uLL);
    v75 = vmul_s32(v74, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)vdup_n_s32(0x2055u), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, v74, vdup_n_s32(0x7FFFFD8Eu)), 0xFuLL) & 0xFFFCFFFFFFFCFFFFLL));
    v70 = (int32x2_t)veor_s8((int8x8_t)vshr_n_s32(vshl_n_s32(vsub_s32((int32x2_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vshr_n_s32(vadd_s32(vadd_s32(v75, v75), vdup_n_s32(0xE21D8000)), 0x10uLL), v74), 0xFuLL), v74), 0x10uLL), 0x10uLL), (int8x8_t)0x7F0000007FLL);
    v76 = vclz_s32(v70);
    v77 = vsub_s32(v76, vdup_lane_s32(v76, 1)).u16[0];
    v78 = vshr_n_s32(vshl_n_s32((int32x2_t)vshl_u32((uint32x2_t)v70, (uint32x2_t)vadd_s32(v76, (int32x2_t)0x1000000010)), 0x10uLL), 0x10uLL);
    v79 = vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x400000004000, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)vdup_n_s32(0x1EFCu), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, v78, vdup_n_s32(0x7FFFF5DBu)), 0xFuLL) & 0xFFFCFFFFFFFCFFFFLL), v78), 0xFuLL);
    v71 = ((__int16)(v79.i16[2] - v79.i16[0] + (v77 << 11)) * (__int16)(((_WORD)v11 << 7) - 128) + 0x4000) >> 15;
    goto LABEL_92;
  }
  v59 = a11;
LABEL_89:
  *v59 &= ~(-1 << a7);
  v70 = (int32x2_t)0x7FFFLL;
  v71 = -16384;
  v72 = v32;
  v32 = 0;
LABEL_92:
  *(_DWORD *)a2 = v72;
  *(int32x2_t *)(a2 + 4) = v70;
  *(_DWORD *)(a2 + 12) = v71;
  *(_DWORD *)(a2 + 16) = v32;
  *(_DWORD *)(a2 + 20) = v62;
  return result;
}

uint64_t intensity_stereo(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4, int a5, int a6)
{
  int v9;
  int v10;
  signed int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;

  v9 = *(_DWORD *)(a4 + 4 * a5);
  v10 = *(_DWORD *)(a4 + 4 * (*(_DWORD *)(a1 + 8) + a5));
  if (v9 <= v10)
    v11 = *(_DWORD *)(a4 + 4 * (*(_DWORD *)(a1 + 8) + a5));
  else
    v11 = *(_DWORD *)(a4 + 4 * a5);
  v12 = 31 - __clz(v11);
  if (v11 >= 1)
    v13 = v12;
  else
    v13 = 0;
  v14 = v9 << (13 - v13);
  v15 = v10 << (13 - v13);
  v16 = v9 >> (v13 - 13);
  v17 = v10 >> (v13 - 13);
  if (v13 >= 0xE)
    v18 = v16;
  else
    v18 = v14;
  if (v13 >= 0xE)
    v19 = v17;
  else
    v19 = v15;
  result = celt_sqrt(((__int16)v19 * (__int16)v19 + (__int16)v18 * (__int16)v18 + 1));
  if (a6 >= 1)
  {
    v21 = (__int16)(result + 1);
    v22 = (__int16)((v18 << 16 >> 2) / v21);
    v23 = (__int16)((v19 << 16 >> 2) / v21);
    v24 = a6;
    do
    {
      v25 = *a3++;
      *a2 = ((v23 * v25) >> 14) + ((v22 * *a2) >> 14);
      ++a2;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t resampling_factor(int a1)
{
  if (a1 <= 15999)
  {
    if (a1 == 8000)
      return 6;
    if (a1 == 12000)
      return 4;
  }
  else
  {
    switch(a1)
    {
      case 16000:
        return 3;
      case 48000:
        return 1;
      case 24000:
        return 2;
    }
  }
  return 0;
}

char *comb_filter(char *result, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 *a10, int a11)
{
  uint64_t v11;
  __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char *v60;
  int v61;
  int v62;
  size_t v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  int v68;
  unsigned int v69;

  if (!(a7 | a6))
  {
    if (a2 == result)
      return result;
    v63 = 4 * a5;
    return (char *)memmove(result, a2, v63);
  }
  v11 = a11;
  v12 = (__int16 *)((char *)&comb_filter_gains + 6 * a9);
  v13 = (*v12 * a7) >> 15;
  v14 = (v12[1] * a7) >> 15;
  v15 = (v12[2] * a7) >> 15;
  v16 = 1 - a4;
  v17 = -a4;
  v18 = ~a4;
  v19 = -2 - a4;
  if (a11 < 1)
  {
    v52 = 0;
    if (a7)
      goto LABEL_6;
    goto LABEL_13;
  }
  v68 = a5;
  v20 = *(_DWORD *)&a2[4 * v19];
  v21 = *(_DWORD *)&a2[4 * v18];
  v22 = *(_DWORD *)&a2[4 * v17];
  v23 = *(_DWORD *)&a2[4 * v16];
  v24 = (__int16 *)((char *)&comb_filter_gains + 6 * a8);
  v69 = ((2 * a6 * *v24) >> 15) & 0xFFFFFFFE;
  v25 = ((2 * a6 * v24[1]) >> 15) & 0xFFFFFFFE;
  v26 = ((2 * a6 * v24[2]) >> 15) & 0xFFFFFFFE;
  v65 = v14;
  v66 = v13;
  v27 = 2 * (__int16)v13;
  v28 = 2 * (__int16)v14;
  v64 = v15;
  v30 = 2 * (__int16)v15;
  v31 = 2 - a4;
  v32 = 0x3FFFFFFFFFFFFFFFLL * a3;
  v33 = result;
  v34 = (int *)a2;
  do
  {
    v35 = *(_DWORD *)&a2[4 * v31];
    v36 = *a10++;
    v37 = (__int16)((v36 * v36) >> 15);
    v38 = (int)((2 * v36 * v36) & 0xFFFF0000 ^ 0x7FFF0000) >> 16;
    v39 = (v27 * v37) >> 16;
    v40 = (v28 * v37) >> 16;
    v41 = (int)(v69 * v38) >> 16;
    v42 = (v30 * v37) >> 16;
    v43 = v35 + v20;
    v44 = v41 * (unsigned __int16)v34[v32];
    v45 = (int)(v25 * v38) >> 16;
    v46 = v39 * (v22 >> 16)
        + v40 * ((v21 + v23) >> 16)
        + v42 * (v43 >> 16)
        + v41 * (v34[v32] >> 16)
        + v45 * ((v34[v32 - 1] + v34[v32 + 1]) >> 16);
    v47 = v45 * (unsigned __int16)(LOWORD(v34[v32 - 1]) + LOWORD(v34[v32 + 1]));
    v48 = (int)(v26 * v38) >> 16;
    v49 = v46 + v48 * ((v34[v32 - 2] + v34[v32 + 2]) >> 16);
    v50 = v48 * (unsigned __int16)(LOWORD(v34[v32 - 2]) + LOWORD(v34[v32 + 2]));
    v51 = *v34++;
    *(_DWORD *)v33 = v51
                   + ((v42 * (unsigned __int16)v43) >> 15)
                   + ((v40 * (unsigned __int16)(v21 + v23)) >> 15)
                   + ((v39 * (unsigned __int16)v22) >> 15)
                   + (v50 >> 15)
                   + (v47 >> 15)
                   + (v44 >> 15)
                   + 2 * v49;
    v33 += 4;
    ++v31;
    v20 = v21;
    v21 = v22;
    v22 = v23;
    v23 = v35;
    --v11;
  }
  while (v11);
  LODWORD(v11) = a11;
  v52 = a11;
  a5 = v68;
  LOWORD(v14) = v65;
  LOWORD(v13) = v66;
  LOWORD(v15) = v64;
  v17 = -a4;
  v16 = 1 - a4;
  v19 = -2 - a4;
  v18 = ~a4;
  if (!a7)
  {
LABEL_13:
    if (a2 == result)
      return result;
    result += 4 * (int)v11;
    a2 += 4 * (int)v11;
    v63 = 4 * (a5 - (int)v11);
    return (char *)memmove(result, a2, v63);
  }
LABEL_6:
  v53 = a5 - v52;
  if ((int)v53 >= 1)
  {
    v54 = &a2[4 * v52];
    v55 = *(_DWORD *)&v54[4 * v16];
    v56 = *(_DWORD *)&v54[4 * v17];
    v57 = *(_DWORD *)&v54[4 * v18];
    v58 = *(_DWORD *)&v54[4 * v19];
    v59 = 2 - a4;
    v60 = v54;
    result += 4 * v52;
    do
    {
      v61 = *(_DWORD *)&v54[4 * v59];
      v62 = *(_DWORD *)v60;
      v60 += 4;
      *(_DWORD *)result = v62
                        + (((unsigned __int16)v56 * (__int16)v13) >> 15)
                        + (((unsigned __int16)(v55 + v57) * (__int16)v14) >> 15)
                        + (((unsigned __int16)(v61 + v58) * (__int16)v15) >> 15)
                        + 2
                        * ((v56 >> 16) * (__int16)v13
                         + ((v55 + v57) >> 16) * (__int16)v14
                         + ((v61 + v58) >> 16) * (__int16)v15);
      result += 4;
      ++v59;
      v58 = v57;
      v57 = v56;
      v56 = v55;
      v55 = v61;
      --v53;
    }
    while (v53);
  }
  return result;
}

uint64_t init_caps(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  _WORD *v8;
  __int16 v9;
  __int16 v10;
  int v11;

  LODWORD(v4) = *(_DWORD *)(result + 8);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(__int16 **)(result + 24);
    v7 = *(_QWORD *)(result + 144);
    v10 = *v6;
    v8 = v6 + 1;
    v9 = v10;
    do
    {
      v11 = (__int16)v8[v5];
      *(_DWORD *)(a2 + 4 * v5) = (((v11 - v9) << a3)
                                * a4
                                * (*(unsigned __int8 *)(v7 + (int)v4 * (a4 + 2 * a3 - 1) + v5) + 64)) >> 2;
      v9 = v11;
      v4 = *(int *)(result + 8);
      ++v5;
    }
    while (v5 < v4);
  }
  return result;
}

const char *opus_strerror(int a1)
{
  if ((a1 - 1) >= 0xFFFFFFF8)
    return opus_strerror_error_strings[-a1];
  else
    return "unknown error";
}

void silk_decode_parameters(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  __int16 *v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22[16];
  __int16 __src[16];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  silk_gains_dequant(a2 + 16, (char *)(a1 + 2760), (_BYTE *)(a1 + 2312), a3 == 2, *(_DWORD *)(a1 + 2324));
  silk_NLSF_decode(__src, (char *)(a1 + 2768), *(_QWORD *)(a1 + 2752));
  silk_NLSF2A((__int16 *)(a2 + 64), __src, *(_DWORD *)(a1 + 2340));
  if (*(_DWORD *)(a1 + 2376) == 1)
  {
    *(_BYTE *)(a1 + 2791) = 4;
LABEL_8:
    memcpy((void *)(a2 + 32), (const void *)(a2 + 64), 2 * *(int *)(a1 + 2340));
    goto LABEL_9;
  }
  v5 = *(char *)(a1 + 2791);
  if (v5 > 3)
    goto LABEL_8;
  v6 = *(_DWORD *)(a1 + 2340);
  if (v6 >= 1)
  {
    v7 = (__int16 *)(a1 + 2344);
    v8 = v22;
    v9 = __src;
    v10 = *(unsigned int *)(a1 + 2340);
    do
    {
      v12 = *v7++;
      v11 = v12;
      v13 = *v9++;
      *v8++ = v11 + (((v13 - v11) * v5) >> 2);
      --v10;
    }
    while (v10);
  }
  silk_NLSF2A((__int16 *)(a2 + 32), v22, v6);
LABEL_9:
  v14 = *(int *)(a1 + 2340);
  memcpy((void *)(a1 + 2344), __src, 2 * v14);
  if (*(_DWORD *)(a1 + 4184))
  {
    silk_bwexpander((__int16 *)(a2 + 32), v14, 63570);
    silk_bwexpander((__int16 *)(a2 + 64), *(_DWORD *)(a1 + 2340), 63570);
  }
  if (*(_BYTE *)(a1 + 2789) == 2)
  {
    silk_decode_pitch(*(__int16 *)(a1 + 2786), *(char *)(a1 + 2788), (int *)a2, *(_DWORD *)(a1 + 2316), *(_DWORD *)(a1 + 2324));
    v15 = *(unsigned int *)(a1 + 2324);
    if ((int)v15 >= 1)
    {
      v16 = 0;
      v17 = (uint64_t)*(&silk_LTP_vq_ptrs_Q7 + *(char *)(a1 + 2792));
      v18 = a2 + 96;
      do
      {
        v19 = 0;
        v20 = v17 + 5 * *(char *)(a1 + v16 + 2764);
        do
        {
          *(_WORD *)(v18 + 2 * v19) = *(char *)(v20 + v19) << 7;
          ++v19;
        }
        while (v19 != 5);
        ++v16;
        v18 += 10;
      }
      while (v16 != v15);
    }
    v21 = silk_LTPScales_table_Q14[*(char *)(a1 + 2793)];
  }
  else
  {
    bzero((void *)a2, 4 * *(int *)(a1 + 2324));
    bzero((void *)(a2 + 96), 10 * *(int *)(a1 + 2324));
    v21 = 0;
    *(_BYTE *)(a1 + 2792) = 0;
  }
  *(_DWORD *)(a2 + 136) = v21;
}

uint64_t silk_gains_dequant(uint64_t result, char *a2, _BYTE *a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if (a5 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = a5;
    do
    {
      if (v9 | a4)
      {
        v11 = a2[v9] - 4;
        if (v11 > (char)*a3 + 8)
          LOBYTE(v11) = 2 * v11 - 8;
        else
          LOBYTE(v11) = *a3 + v11;
      }
      else
      {
        v11 = *a2;
        if (v11 <= (char)*a3 - 16)
          LOBYTE(v11) = *a3 - 16;
      }
      v12 = (char)v11 & ~((char)v11 >> 31);
      if (v12 >= 63)
        v12 = 63;
      *a3 = v12;
      result = silk_log2lin(29 * v12 + ((7281 * v12) >> 16) + 2090);
      *(_DWORD *)(v8 + 4 * v9++) = result;
    }
    while (v10 != v9);
  }
  return result;
}

__int16 *silk_NLSF_decode(__int16 *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  signed int v23;
  int v24;
  int v25;
  _WORD v27[32];
  _BYTE v28[32];
  _BYTE v29[16];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(__int16 *)(a3 + 2) < 1)
  {
    v8 = *a2;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(a3 + 8) + *(__int16 *)(a3 + 2) * (uint64_t)*a2;
    do
    {
      a1[v6] = *(unsigned __int8 *)(v7 + v6) << 7;
      ++v6;
    }
    while (v6 < *(__int16 *)(a3 + 2));
    v8 = *a2;
  }
  silk_NLSF_unpack((uint64_t)v28, (uint64_t)v29, a3, v8);
  v9 = *(unsigned __int16 *)(a3 + 2);
  if (*(__int16 *)(a3 + 2) >= 1)
  {
    LOWORD(v10) = 0;
    v11 = *(__int16 *)(a3 + 4);
    v12 = v9 + 1;
    do
    {
      v13 = a2[(v12 - 2) + 1];
      v14 = (__int16)v10 * v29[(v12 - 2)];
      v15 = (v13 << 10) - 102;
      if (v13 <= 0)
        v15 = ((v13 << 10) | 0x66) & (v13 >> 31);
      v10 = (v15 >> 16) * v11 + (v14 >> 8) + (((v15 & 0xFFFE) * v11) >> 16);
      v27[(v12-- - 2) + 16] = v10;
    }
    while (v12 > 1);
  }
  silk_NLSF_VQ_weights_laroia(v27, a1, (__int16)v9);
  v16 = *(__int16 *)(a3 + 2);
  if (v16 >= 1)
  {
    v17 = 0;
    do
    {
      v18 = (__int16)v27[v17];
      if (v18 < 1)
      {
        v23 = 0;
      }
      else
      {
        v19 = (unsigned __int16)v18 << 16;
        v20 = __clz(v19);
        v21 = (v19 >> (24 - v20)) & 0x7F;
        if ((v20 & 1) != 0)
          v22 = 0x8000;
        else
          v22 = 46214;
        v23 = (v22 >> (v20 >> 1)) + ((213 * (v22 >> (v20 >> 1)) * v21) >> 16);
      }
      v24 = (__int16)v27[v17 + 16] << 14;
      v25 = (v24 / v23 + a1[v17]) & ~((v24 / v23 + a1[v17]) >> 31);
      if (v25 >= 0x7FFF)
        LOWORD(v25) = 0x7FFF;
      a1[v17++] = v25;
    }
    while (v17 < *(__int16 *)(a3 + 2));
    LOWORD(v16) = *(_WORD *)(a3 + 2);
  }
  return silk_NLSF_stabilize(a1, *(__int16 **)(a3 + 56), (__int16)v16);
}

uint64_t silk_resampler_init(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  unsigned int v10;
  signed int v11;
  unsigned int v12;
  signed int v13;

  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!a4)
  {
    if (a2 != 8000 && a2 != 16000 && a2 != 12000)
      return 0xFFFFFFFFLL;
    v4 = 0xFFFFFFFFLL;
    if ((int)a3 <= 15999)
    {
      if (a3 != 8000)
      {
        v6 = 12000;
LABEL_22:
        if (a3 != v6)
          return v4;
      }
    }
    else if (a3 != 16000 && a3 != 48000)
    {
      v6 = 24000;
      goto LABEL_22;
    }
    v7 = (char *)&delay_matrix_dec + 5 * (a2 >> 12) + (((a3 >> 12) - (a3 > 0x3E80)) >> (a3 > 0x5DC0)) - 6;
    goto LABEL_24;
  }
  v4 = 0xFFFFFFFFLL;
  if ((int)a2 <= 15999)
  {
    if (a2 != 8000)
    {
      v5 = 12000;
LABEL_15:
      if (a2 != v5)
        return v4;
    }
  }
  else if (a2 != 16000 && a2 != 48000)
  {
    v5 = 24000;
    goto LABEL_15;
  }
  if (a3 != 8000 && a3 != 16000 && a3 != 12000)
    return 0xFFFFFFFFLL;
  v7 = (char *)&delay_matrix_enc + 3 * (((a2 >> 12) - (a2 > 0x3E80)) >> (a2 > 0x5DC0)) + (a3 >> 12) - 4;
LABEL_24:
  *(_DWORD *)(a1 + 292) = *v7;
  *(_DWORD *)(a1 + 284) = (unsigned __int16)a2 / 0x3E8u;
  *(_DWORD *)(a1 + 288) = (unsigned __int16)a3 / 0x3E8u;
  *(_DWORD *)(a1 + 268) = 10 * ((unsigned __int16)a2 / 0x3E8u);
  if (a3 > a2)
  {
    if (a3 == 2 * a2)
    {
      v8 = 0;
      *(_DWORD *)(a1 + 264) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 264) = 2;
      v8 = 1;
    }
    goto LABEL_43;
  }
  if (a3 >= a2)
  {
    v8 = 0;
    *(_DWORD *)(a1 + 264) = 0;
    goto LABEL_43;
  }
  *(_DWORD *)(a1 + 264) = 3;
  if (4 * a3 != 3 * a2)
  {
    if (3 * a3 == 2 * a2)
    {
      v8 = 0;
      *(_QWORD *)(a1 + 276) = 0x200000012;
      v9 = &silk_Resampler_2_3_COEFS;
      goto LABEL_42;
    }
    if (a2 == 2 * a3)
    {
      v8 = 0;
      *(_QWORD *)(a1 + 276) = 0x100000018;
      v9 = &silk_Resampler_1_2_COEFS;
      goto LABEL_42;
    }
    if (3 * a3 == a2)
    {
      v8 = 0;
      *(_QWORD *)(a1 + 276) = 0x100000024;
      v9 = &silk_Resampler_1_3_COEFS;
      goto LABEL_42;
    }
    if (4 * a3 == a2)
    {
      v8 = 0;
      *(_QWORD *)(a1 + 276) = 0x100000024;
      v9 = &silk_Resampler_1_4_COEFS;
      goto LABEL_42;
    }
    if (6 * a3 == a2)
    {
      v8 = 0;
      *(_QWORD *)(a1 + 276) = 0x100000024;
      v9 = &silk_Resampler_1_6_COEFS;
      goto LABEL_42;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = 0;
  *(_QWORD *)(a1 + 276) = 0x300000012;
  v9 = &silk_Resampler_3_4_COEFS;
LABEL_42:
  *(_QWORD *)(a1 + 296) = v9;
LABEL_43:
  v10 = 4 * ((a2 << (v8 | 0xE)) / a3);
  v11 = a2 << v8;
  do
  {
    v12 = v10;
    v13 = v10 * (((a3 >> 15) + 1) >> 1) + HIWORD(v10) * (__int16)a3 + (((unsigned __int16)v10 * (__int16)a3) >> 16);
    ++v10;
  }
  while (v13 < v11);
  v4 = 0;
  *(_DWORD *)(a1 + 272) = v12;
  return v4;
}

uint64_t silk_resampler(_DWORD *a1, _WORD *a2, char *__src, int a4)
{
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  int v11;

  v8 = (int)a1[73];
  v9 = (__int16 *)(a1 + 42);
  v10 = a1[71] - (int)v8;
  memcpy((char *)a1 + 2 * v8 + 168, __src, 2 * v10);
  v11 = a1[66];
  switch(v11)
  {
    case 3:
      silk_resampler_private_down_FIR((uint64_t)a1, a2, v9, a1[71]);
      silk_resampler_private_down_FIR((uint64_t)a1, &a2[a1[72]], (__int16 *)&__src[2 * v10], a4 - a1[71]);
      break;
    case 2:
      silk_resampler_private_IIR_FIR((uint64_t)a1, a2, v9, a1[71]);
      silk_resampler_private_IIR_FIR((uint64_t)a1, &a2[a1[72]], (__int16 *)&__src[2 * v10], a4 - a1[71]);
      break;
    case 1:
      silk_resampler_private_up2_HQ_wrapper(a1, a2, v9, a1[71]);
      silk_resampler_private_up2_HQ_wrapper(a1, &a2[a1[72]], &__src[2 * v10], (a4 - a1[71]));
      break;
    default:
      memcpy(a2, v9, 2 * (int)a1[71]);
      memcpy(&a2[a1[72]], &__src[2 * v10], 2 * (a4 - a1[71]));
      break;
  }
  memcpy(v9, &__src[2 * (a4 - a1[73])], 2 * (int)a1[73]);
  return 0;
}

void silk_LPC_analysis_filter(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _BYTE v10[32];
  _WORD v11[16];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = a5 - 1;
  if (a5 < 1)
  {
    celt_fir((__int16 *)(a2 + 2 * a5), (uint64_t)v10, (uint64_t)a1 + 2 * a5, (a4 - a5), a5, v11);
  }
  else
  {
    v7 = 0;
    v8 = a5;
    do
    {
      *(_WORD *)&v10[v7] = -*(_WORD *)(a3 + v7);
      v7 += 2;
    }
    while (2 * a5 != v7);
    for (i = 0; i != a5; v11[i++] = *(_WORD *)(a2 + 2 * v6--))
      ;
    celt_fir((__int16 *)(a2 + 2 * a5), (uint64_t)v10, (uint64_t)a1 + 2 * a5, (a4 - a5), a5, v11);
    bzero(a1, 2 * v8);
  }
}

double silk_PLC_Reset(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 4192) = *(_DWORD *)(a1 + 2328) << 7;
  *(_QWORD *)&result = 0x1000000010000;
  *(_QWORD *)(a1 + 4264) = 0x1000000010000;
  *(_QWORD *)(a1 + 4276) = 0x1400000002;
  return result;
}

void silk_PLC(uint64_t a1, int32x4_t *a2, uint64_t a3, int a4)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v6 = *(_DWORD *)(a1 + 2316);
  if (v6 != *(_DWORD *)(a1 + 4272))
  {
    *(_DWORD *)(a1 + 4192) = *(_DWORD *)(a1 + 2328) << 7;
    *(_QWORD *)(a1 + 4264) = 0x1000000010000;
    *(_QWORD *)(a1 + 4276) = 0x1400000002;
    *(_DWORD *)(a1 + 4272) = v6;
  }
  if (a4)
  {
    silk_PLC_conceal(a1, a2, a3);
    ++*(_DWORD *)(a1 + 4184);
  }
  else
  {
    v7 = *(char *)(a1 + 2789);
    *(_DWORD *)(a1 + 4188) = v7;
    if (v7 == 2)
    {
      v8 = 0;
      v9 = *(unsigned int *)(a1 + 2324);
      if ((_DWORD)v9)
      {
        v10 = (int)v9 - 1;
        v11 = a2->i32[v10];
        if (v11 >= 1)
        {
          v12 = 0;
          v8 = 0;
          v13 = *(int *)(a1 + 2332);
          v14 = 5 * v9 - 5;
          do
          {
            v15 = 0;
            v16 = 0;
            v17 = v9 + ~(_DWORD)v12;
            do
              v16 += a2[6].i16[v14 + v15++];
            while (v15 != 5);
            if (v16 > v8)
            {
              v18 = &a2->i8[10 * (__int16)v17];
              v19 = *((_QWORD *)v18 + 12);
              *(_WORD *)(a1 + 4204) = *((_WORD *)v18 + 52);
              *(_QWORD *)(a1 + 4196) = v19;
              *(_DWORD *)(a1 + 4192) = a2->i32[v17] << 8;
              v11 = a2->i32[v10];
              v8 = v16;
            }
            if (++v12 == v9)
              break;
            v14 -= 5;
          }
          while (v12 * v13 < v11);
        }
      }
      *(_QWORD *)(a1 + 4196) = 0;
      *(_WORD *)(a1 + 4204) = 0;
      *(_WORD *)(a1 + 4200) = v8;
      if (v8 > 11468)
      {
        if (v8 >= 0x3CCE)
        {
          v23 = 0;
          v24 = 0xF334000u / v8;
          do
          {
            *(_WORD *)(a1 + 4196 + v23) = (v24 * *(__int16 *)(a1 + 4196 + v23)) >> 14;
            v23 += 2;
          }
          while (v23 != 10);
        }
      }
      else
      {
        v20 = 0;
        if (v8 <= 1)
          v8 = 1;
        v21 = (__int16)(0xB33400u / v8);
        do
        {
          *(_WORD *)(a1 + 4196 + v20) = (v21 * *(__int16 *)(a1 + 4196 + v20)) >> 10;
          v20 += 2;
        }
        while (v20 != 10);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 4192) = 4608 * (__int16)v6;
      *(_WORD *)(a1 + 4204) = 0;
      *(_QWORD *)(a1 + 4196) = 0;
    }
    memcpy((void *)(a1 + 4206), &a2[4], 2 * *(int *)(a1 + 2340));
    *(_WORD *)(a1 + 4260) = a2[8].i32[2];
    v22 = *(_DWORD *)(a1 + 2324);
    *(_QWORD *)(a1 + 4264) = *(uint64_t *)((char *)&a2->i64[1] + 4 * v22);
    *(_DWORD *)(a1 + 4280) = *(_DWORD *)(a1 + 2332);
    *(_DWORD *)(a1 + 4276) = v22;
  }
}

int32x4_t silk_PLC_conceal(uint64_t a1, int32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  size_t v13;
  _DWORD *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  __int16 *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  char v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  char v58;
  int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char *v77;
  int *v78;
  int *v79;
  int v80;
  uint64_t i;
  int v82;
  char *v83;
  int *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int *v106;
  int v107;
  int v108;
  uint64_t v109;
  __int16 *v110;
  int *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  __int16 v118;
  int *v119;
  __int128 v120;
  _OWORD *v121;
  __int128 v122;
  uint64_t v123;
  int32x4_t result;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int32x4_t *v129;
  char *v130;
  char *v131;
  int v132;
  int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int16 *v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD v142[2];
  _WORD v143[10];
  _BYTE v144[28];

  v136 = a3;
  v129 = a2;
  v3 = a1;
  *(_QWORD *)&v144[12] = *MEMORY[0x1E0C80C00];
  v4 = *(int *)(a1 + 4280);
  v5 = *(unsigned int *)(a1 + 4280);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 2 * *(int *)(v6 + 2336);
  v10 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 4 * (*(_DWORD *)(v10 + 2328) + v12);
  v14 = (_DWORD *)MEMORY[0x1E0C80A78](v10);
  v131 = (char *)&v125 - v16;
  LODWORD(v16) = (int)v14[1066] >> 6;
  v127 = v14[1067];
  v142[0] = v16;
  v142[1] = v127 >> 6;
  v126 = v127 >> 6;
  if (v14[594])
  {
    *(_OWORD *)(v3 + 4222) = 0u;
    *(_OWORD *)(v3 + 4206) = 0u;
  }
  bzero(v8, v15);
  v17 = 0;
  v18 = 1;
  v19 = v8;
  do
  {
    v20 = v18;
    if ((int)v4 >= 1)
    {
      v21 = 0;
      v22 = v142[v17];
      v23 = ((v17 | 0xFFFFFFFE) + *(_DWORD *)(v3 + 4276)) * v5;
      v24 = (__int16)v22;
      v25 = ((v22 >> 15) + 1) >> 1;
      v26 = v3 + 4 + 4 * v23;
      do
      {
        v27 = v24 * (*(int *)(v26 + 4 * v21) >> 16)
            + ((v24 * (unsigned __int16)*(_DWORD *)(v26 + 4 * v21)) >> 16)
            + v25 * *(_DWORD *)(v26 + 4 * v21);
        v28 = v27 >> 8;
        if (v27 < -8388608)
          LOWORD(v28) = 0x8000;
        if (v27 < 0x800000)
          v29 = v28;
        else
          v29 = 0x7FFF;
        *(_WORD *)&v19[2 * v21++] = v29;
      }
      while (v5 != v21);
    }
    v18 = 0;
    v19 += 2 * v4;
    v17 = 1;
  }
  while ((v20 & 1) != 0);
  v140 = 0;
  v141 = 0;
  bzero((char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  bzero(v131, v13);
  silk_sum_sqr_shift((unsigned int *)&v140 + 1, (int *)&v141 + 1, (uint64_t)v8, v5);
  silk_sum_sqr_shift((unsigned int *)&v140, (int *)&v141, (uint64_t)&v8[2 * *(int *)(v3 + 4280)], *(_DWORD *)(v3 + 4280));
  v30 = *(_DWORD *)(v3 + 4276);
  if (SHIDWORD(v140) >> v141 >= (int)v140 >> SBYTE4(v141))
  {
    v31 = *(_DWORD *)(v3 + 4280);
  }
  else
  {
    v31 = v30 - 1;
    v30 = *(_DWORD *)(v3 + 4280);
  }
  v32 = v31 * v30;
  if (v32 <= 128)
    v32 = 128;
  LODWORD(v139) = v32;
  v33 = v3 + 4196;
  LOWORD(v34) = *(_WORD *)(v3 + 4248);
  v35 = *(_DWORD *)(v3 + 4184);
  if (v35 >= 1)
    v35 = 1;
  v36 = HARM_ATT_Q15[v35];
  if (*(_DWORD *)(v3 + 4188) == 2)
    v37 = (__int16 *)&PLC_RAND_ATTENUATE_V_Q15;
  else
    v37 = (__int16 *)&PLC_RAND_ATTENUATE_UV_Q15;
  v38 = v37[v35];
  silk_bwexpander((__int16 *)(v3 + 4206), *(_DWORD *)(v3 + 2340), 64881);
  v39 = *(_DWORD *)(v3 + 2340);
  __memcpy_chk();
  if (!*(_DWORD *)(v3 + 4184))
  {
    if (*(_DWORD *)(v3 + 4188) == 2)
    {
      v40 = 0;
      LOWORD(v41) = 0x4000;
      do
      {
        LOWORD(v41) = v41 - *(_WORD *)(v33 + v40);
        v40 += 2;
      }
      while (v40 != 10);
      v41 = (__int16)v41;
      if ((__int16)v41 <= 3277)
        v41 = 3277;
      v34 = (*(__int16 *)(v3 + 4260) * v41) >> 14;
    }
    else
    {
      v42 = silk_LPC_inverse_pred_gain((__int16 *)(v3 + 4206), v39);
      if (v42 >= 0x8000000)
        v43 = 0x8000000;
      else
        v43 = v42;
      if (v43 <= 0x400000)
        v43 = 0x400000;
      v38 = (int)((v43 >> 13) * v38 + ((8 * (v43 & 0x1FFF) * v38) >> 16)) >> 14;
      v39 = *(_DWORD *)(v3 + 2340);
      LOWORD(v34) = 0x4000;
    }
  }
  v44 = *(_DWORD *)(v3 + 4244);
  v45 = ((*(int *)(v3 + 4192) >> 7) + 1) >> 1;
  v46 = *(_DWORD *)(v3 + 2336);
  v47 = v39;
  v48 = v46 - (v39 + v45) - 2;
  silk_LPC_analysis_filter(&v11[2 * v48], v3 + 2 * v48 + 1348, (uint64_t)v143, v46 - v48, v47);
  v49 = *(_DWORD *)(v3 + 4268);
  if (v49 >= 0)
    v50 = *(_DWORD *)(v3 + 4268);
  else
    v50 = -v49;
  v51 = __clz(v50);
  v52 = v49 << (v51 - 1);
  v53 = 0x1FFFFFFF / (v52 >> 16);
  v54 = (v52 >> 16) * (__int16)v53 + (((unsigned __int16)v52 * (__int16)v53) >> 16);
  v55 = (v53 << 16)
      - 8 * v54 * (((v53 >> 15) + 1) >> 1)
      + ((-8 * v54) >> 16) * (__int16)v53
      + ((((-8 * v54) & 0xFFF8) * (__int16)v53) >> 16);
  v56 = HIWORD(v50);
  v57 = v55 >> (16 - v51);
  v58 = v51 - 16;
  v59 = (int)0x80000000 >> v58;
  if (v55 > (int)0x80000000 >> v58)
    v59 = v55;
  if (v55 <= (int)(0x7FFFFFFFu >> v58))
    v60 = v59;
  else
    v60 = 0x7FFFFFFFu >> v58;
  v61 = v60 << v58;
  if (v56)
    v61 = v57;
  v137 = *(unsigned int *)(v3 + 2340);
  LODWORD(v62) = v137 + v48;
  v63 = *(int *)(v3 + 2336);
  v64 = v131;
  if ((int)v137 + v48 < (int)v63)
  {
    if (v61 >= 0x3FFFFFFF)
      v65 = 0x3FFFFFFF;
    else
      v65 = v61;
    v62 = (int)v62;
    do
    {
      *(_DWORD *)&v64[4 * v62] = (v65 >> 16) * *(__int16 *)&v11[2 * v62]
                               + (((unsigned __int16)v65 * *(__int16 *)&v11[2 * v62]) >> 16);
      ++v62;
    }
    while (v62 < v63);
  }
  v128 = v63;
  LODWORD(v135) = *(_DWORD *)(v3 + 2324);
  v138 = v3;
  if ((int)v135 >= 1)
  {
    v66 = 0;
    v67 = v3 + 4 * ((_DWORD)v139 - 128) + 4;
    v68 = *(_DWORD *)(v3 + 2332);
    v132 = 4608 * *(__int16 *)(v3 + 2316);
    v133 = (__int16)v38;
    v69 = *(_DWORD *)(v3 + 4192);
    v130 = v64 - 8;
    v134 = v68;
    do
    {
      LODWORD(v139) = v66;
      v70 = (__int16)v34;
      if (v68 >= 1)
      {
        v71 = v46 - v45 + 2;
        v72 = *(__int16 *)(v3 + 4196);
        v73 = *(__int16 *)(v3 + 4198);
        v74 = *(__int16 *)(v3 + 4200);
        v75 = *(__int16 *)(v3 + 4202);
        v76 = *(__int16 *)(v3 + 4204);
        v77 = &v131[4 * v46];
        v78 = (int *)&v130[4 * v71];
        v79 = v78;
        do
        {
          v80 = v79[1];
          ++v79;
          v44 = 196314165 * v44 + 907633515;
          *(_DWORD *)v77 = 4
                         * ((v78[2] >> 16) * v72
                          + (((unsigned __int16)v78[2] * v72) >> 16)
                          + (v80 >> 16) * v73
                          + (((unsigned __int16)v80 * v73) >> 16)
                          + (*v78 >> 16) * v74
                          + (((unsigned __int16)*v78 * v74) >> 16)
                          + (*(v78 - 1) >> 16) * v75
                          + (((unsigned __int16)*(v78 - 1) * v75) >> 16)
                          + (*(v78 - 2) >> 16) * v76
                          + (((unsigned __int16)*(v78 - 2) * v76) >> 16)
                          + (*(int *)(v67 + 4 * (v44 >> 25)) >> 16) * v70
                          + (((unsigned __int16)*(_DWORD *)(v67 + 4 * (v44 >> 25)) * v70) >> 16))
                         + 8;
          v77 += 4;
          ++v46;
          v78 = v79;
          --v68;
        }
        while (v68);
      }
      for (i = 0; i != 10; i += 2)
        *(_WORD *)(v33 + i) = (*(__int16 *)(v33 + i) * v36) >> 15;
      v34 = (v133 * v70) >> 15;
      if ((int)(v69 + 655 * (v69 >> 16) + ((655 * (unsigned __int16)v69) >> 16)) >= v132)
        v69 = v132;
      else
        v69 += 655 * (v69 >> 16) + ((655 * (unsigned __int16)v69) >> 16);
      v3 = v138;
      *(_DWORD *)(v138 + 4192) = v69;
      v45 = ((v69 >> 7) + 1) >> 1;
      v66 = (_DWORD)v139 + 1;
      v68 = v134;
    }
    while ((_DWORD)v139 + 1 != (_DWORD)v135);
  }
  v82 = v128 - 16;
  v83 = v131;
  v84 = (int *)&v131[4 * (int)v128 - 64];
  v85 = *(_OWORD *)(v3 + 1300);
  *(_OWORD *)v84 = *(_OWORD *)(v3 + 1284);
  *((_OWORD *)v84 + 1) = v85;
  v86 = *(_OWORD *)(v3 + 1316);
  v87 = *(_OWORD *)(v3 + 1332);
  v135 = (_OWORD *)(v3 + 1284);
  *((_OWORD *)v84 + 2) = v86;
  *((_OWORD *)v84 + 3) = v87;
  v88 = *(unsigned int *)(v3 + 2328);
  if ((int)v88 >= 1)
  {
    v89 = 0;
    v90 = v143[0];
    v91 = v143[1];
    v92 = (int)v137 >> 1;
    v93 = v143[2];
    v94 = v143[3];
    v95 = v83;
    v96 = v143[4];
    v97 = v143[5];
    v98 = (__int16)v126;
    v99 = v143[6];
    v100 = v143[7];
    v101 = ((v127 >> 21) + 1) >> 1;
    v102 = (uint64_t)&v95[4 * v82 + 20];
    v139 = (__int16 *)v144;
    v103 = v137 - 10;
    v104 = v143[8];
    v105 = v143[9];
    do
    {
      v106 = &v84[v89];
      v107 = v92
           + (v106[15] >> 16) * v90
           + (((unsigned __int16)v106[15] * v90) >> 16)
           + (v106[14] >> 16) * v91
           + (((unsigned __int16)v106[14] * v91) >> 16)
           + (v106[13] >> 16) * v93
           + (((unsigned __int16)v106[13] * v93) >> 16);
      v108 = v107
           + (v106[12] >> 16) * v94
           + (((unsigned __int16)v106[12] * v94) >> 16)
           + (v106[11] >> 16) * v96
           + (((unsigned __int16)v106[11] * v96) >> 16)
           + (v84[(v89 + 10)] >> 16) * v97
           + (((unsigned __int16)v84[(v89 + 10)] * v97) >> 16)
           + (v84[(v89 + 9)] >> 16) * v99
           + (((unsigned __int16)v84[(v89 + 9)] * v99) >> 16)
           + (v84[(v89 + 8)] >> 16) * v100
           + (((unsigned __int16)v84[(v89 + 8)] * v100) >> 16)
           + (v84[(v89 + 7)] >> 16) * v104
           + (((unsigned __int16)v84[(v89 + 7)] * v104) >> 16)
           + (v84[(v89 + 6)] >> 16) * v105
           + (((unsigned __int16)v84[(v89 + 6)] * v105) >> 16);
      if ((int)v137 >= 11)
      {
        v109 = v103;
        v110 = v139;
        v111 = (int *)v102;
        do
        {
          v113 = *v111--;
          v112 = v113;
          v114 = *v110++;
          v108 += (v112 >> 16) * v114 + (((unsigned __int16)v112 * v114) >> 16);
          --v109;
        }
        while (v109);
      }
      v115 = v84[(v89 + 16)] + 16 * v108;
      v84[(v89 + 16)] = v115;
      v116 = v115 * v101 + (v115 >> 16) * v98 + (((unsigned __int16)v115 * v98) >> 16);
      v117 = ((v116 >> 7) + 1) >> 1;
      if (v116 < -8388736)
        LOWORD(v117) = 0x8000;
      if (v116 <= 8388479)
        v118 = v117;
      else
        v118 = 0x7FFF;
      *(_WORD *)(v136 + 2 * v89++) = v118;
      v102 += 4;
    }
    while (v89 != v88);
  }
  v119 = &v84[(int)v88];
  v120 = *((_OWORD *)v119 + 1);
  v121 = v135;
  *v135 = *(_OWORD *)v119;
  v121[1] = v120;
  v122 = *((_OWORD *)v119 + 3);
  v121[2] = *((_OWORD *)v119 + 2);
  v121[3] = v122;
  v123 = v138;
  *(_DWORD *)(v138 + 4244) = v44;
  *(_WORD *)(v123 + 4248) = v34;
  result = vdupq_n_s32(v45);
  *v129 = result;
  return result;
}

unsigned int *silk_PLC_glue_frames(unsigned int *result, uint64_t a2, int a3)
{
  __int16 *v4;
  unsigned int *v5;
  int v6;
  int v7;
  signed int v8;
  unsigned int v9;
  signed int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  signed int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (__int16 *)a2;
  v5 = result;
  if (result[1046])
  {
    result = silk_sum_sqr_shift(result + 1063, (int *)result + 1064, a2, a3);
    v5[1060] = 1;
  }
  else
  {
    if (result[1060])
    {
      v20 = 0;
      result = silk_sum_sqr_shift((unsigned int *)&v20, (int *)&v20 + 1, a2, a3);
      v6 = v5[1064];
      if (SHIDWORD(v20) <= v6)
      {
        v7 = SHIDWORD(v20) < v6 ? (int)v20 >> (v6 - BYTE4(v20)) : v20;
      }
      else
      {
        v5[1063] = (int)v5[1063] >> (BYTE4(v20) - v6);
        v7 = v20;
      }
      v8 = v5[1063];
      if (v7 > v8)
      {
        v9 = __clz(v8);
        v10 = v8 << (v9 - 1);
        v5[1063] = v10;
        v11 = v7 >> ((25 - v9) & ~((int)(25 - v9) >> 31));
        if (v11 <= 1)
          v11 = 1;
        v12 = v10 / v11;
        if ((int)v12 < 1)
        {
          v16 = 0;
        }
        else
        {
          v13 = __clz(v12);
          if (v13 != 24)
          {
            if (v12 <= 0x7F)
              LOBYTE(v12) = (v12 >> (56 - v13)) | ((_BYTE)v12 << (v13 - 24));
            else
              LOBYTE(v12) = ((_BYTE)v12 << (v13 + 8)) | (v12 >> (24 - v13));
          }
          v14 = v12 & 0x7F;
          if ((v13 & 1) != 0)
            v15 = 0x8000;
          else
            v15 = 46214;
          v16 = 16 * ((v15 >> (v13 >> 1)) + ((213 * (v15 >> (v13 >> 1)) * v14) >> 16));
        }
        if (a3 >= 1)
        {
          v17 = 4 * ((0x10000 - v16) / a3);
          v18 = a3 - 1;
          do
          {
            v19 = v18;
            *v4 = HIWORD(v16) * *v4 + (((v16 & 0xFFFCu) * *v4) >> 16);
            ++v4;
            v16 += v17;
            if (v16 > 0x10000)
              break;
            --v18;
          }
          while (v19);
        }
      }
    }
    v5[1060] = 0;
  }
  return result;
}

uint64_t silk_decode_indices(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  _BYTE v22[16];
  _WORD v23[16];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a4 || *(_DWORD *)(a1 + 4 * a3 + 2416))
    v8 = ec_dec_icdf(a2, silk_type_offset_VAD_iCDF, 8) + 2;
  else
    v8 = ec_dec_icdf(a2, silk_type_offset_no_VAD_iCDF, 8);
  *(_BYTE *)(a1 + 2789) = v8 >> 1;
  *(_BYTE *)(a1 + 2790) = v8 & 1;
  if (a5 == 2)
  {
    v9 = ec_dec_icdf(a2, silk_delta_gain_iCDF, 8);
  }
  else
  {
    *(_BYTE *)(a1 + 2760) = 8 * ec_dec_icdf(a2, &silk_gain_iCDF[8 * (char)(v8 >> 1)], 8);
    v9 = *(_BYTE *)(a1 + 2760) + ec_dec_icdf(a2, silk_uniform8_iCDF, 8);
  }
  *(_BYTE *)(a1 + 2760) = v9;
  if (*(int *)(a1 + 2324) > 1)
  {
    v10 = 2761;
    do
    {
      *(_BYTE *)(a1 + v10) = ec_dec_icdf(a2, silk_delta_gain_iCDF, 8);
      v11 = v10 - 2759;
      ++v10;
    }
    while (v11 < *(int *)(a1 + 2324));
  }
  v12 = ec_dec_icdf(a2, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 2752) + 16)+ **(__int16 **)(a1 + 2752) * (uint64_t)(*(char *)(a1 + 2789) >> 1)), 8);
  *(_BYTE *)(a1 + 2768) = v12;
  silk_NLSF_unpack((uint64_t)v23, (uint64_t)v22, *(_QWORD *)(a1 + 2752), v12);
  v13 = *(_QWORD *)(a1 + 2752);
  if (*(__int16 *)(v13 + 2) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = ec_dec_icdf(a2, (unsigned __int8 *)(*(_QWORD *)(v13 + 40) + (__int16)v23[v14]), 8);
      if (v15 == 8)
      {
        LOBYTE(v15) = ec_dec_icdf(a2, silk_NLSF_EXT_iCDF, 8) + 8;
      }
      else if (!v15)
      {
        v15 = -(int)ec_dec_icdf(a2, silk_NLSF_EXT_iCDF, 8);
      }
      *(_BYTE *)(a1 + 2769 + v14) = v15 - 4;
      v13 = *(_QWORD *)(a1 + 2752);
      ++v14;
    }
    while (v14 < *(__int16 *)(v13 + 2));
  }
  if (*(_DWORD *)(a1 + 2324) == 4)
    v16 = ec_dec_icdf(a2, silk_NLSF_interpolation_factor_iCDF, 8);
  else
    v16 = 4;
  *(_BYTE *)(a1 + 2791) = v16;
  if (*(_BYTE *)(a1 + 2789) == 2)
  {
    if (a5 == 2 && *(_DWORD *)(a1 + 2408) == 2 && (v17 = ec_dec_icdf(a2, silk_pitch_delta_iCDF, 8), v17 << 16 >= 1))
    {
      v18 = v17 + *(_WORD *)(a1 + 2412) - 9;
    }
    else
    {
      *(_WORD *)(a1 + 2786) = (*(_DWORD *)(a1 + 2316) >> 1) * ec_dec_icdf(a2, silk_pitch_lag_iCDF, 8);
      v18 = *(_WORD *)(a1 + 2786) + ec_dec_icdf(a2, *(unsigned __int8 **)(a1 + 2384), 8);
    }
    *(_WORD *)(a1 + 2786) = v18;
    *(_WORD *)(a1 + 2412) = v18;
    *(_BYTE *)(a1 + 2788) = ec_dec_icdf(a2, *(unsigned __int8 **)(a1 + 2392), 8);
    *(_BYTE *)(a1 + 2792) = ec_dec_icdf(a2, silk_LTP_per_index_iCDF, 8);
    if (*(int *)(a1 + 2324) >= 1)
    {
      v19 = 0;
      do
        *(_BYTE *)(a1 + 2764 + v19++) = ec_dec_icdf(a2, (unsigned __int8 *)*(&silk_LTP_gain_iCDF_ptrs + *(char *)(a1 + 2792)), 8);
      while (v19 < *(int *)(a1 + 2324));
    }
    if (a5)
      v20 = 0;
    else
      v20 = ec_dec_icdf(a2, silk_LTPscale_iCDF, 8);
    *(_BYTE *)(a1 + 2793) = v20;
  }
  *(_DWORD *)(a1 + 2408) = *(char *)(a1 + 2789);
  result = ec_dec_icdf(a2, silk_uniform4_iCDF, 8);
  *(_BYTE *)(a1 + 2794) = result;
  return result;
}

uint64_t silk_NLSF_unpack(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  _WORD *v7;
  _BYTE *v8;

  if (*(__int16 *)(a3 + 2) >= 1)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(*(_QWORD *)(a3 + 32) + *(unsigned __int16 *)(a3 + 2) * a4 / 2);
    do
    {
      v6 = *v5++;
      v7 = (_WORD *)(result + 2 * v4);
      *v7 = (v6 >> 1) & 7 | (8 * ((v6 >> 1) & 7));
      v8 = (_BYTE *)(a2 + v4);
      *v8 = *(_BYTE *)(*(_QWORD *)(a3 + 24) + (((int)(v6 << 31) >> 31) & (*(__int16 *)(a3 + 2) - 1)) + (int)v4);
      v7[1] = (v6 >> 5) | (8 * (v6 >> 5));
      v8[1] = *(_BYTE *)(*(_QWORD *)(a3 + 24) + ((*(__int16 *)(a3 + 2) - 1) & ((int)(v6 << 27) >> 31)) + (int)v4 + 1);
      v4 += 2;
    }
    while (v4 < *(__int16 *)(a3 + 2));
  }
  return result;
}

uint64_t silk_shell_decoder(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t result;
  int v42;

  if (a3 < 1)
  {
    v10 = 0;
    v7 = 0u;
  }
  else
  {
    v6 = ec_dec_icdf(a2, &silk_shell_code_table3[silk_shell_code_table_offsets[a3]], 8);
    v7 = a3 - v6;
    if (v6 < 1)
    {
      v10 = 0u;
    }
    else
    {
      v8 = v6;
      v9 = ec_dec_icdf(a2, &silk_shell_code_table2[silk_shell_code_table_offsets[v6]], 8);
      v10 = v8 - v9;
      if (v9 > 0)
      {
        v11 = v9;
        v12 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v9]], 8);
        v13 = v11 - v12;
        if (v12 < 1)
        {
          v15 = 0;
          v16 = 0;
        }
        else
        {
          v14 = v12;
          v15 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v12]], 8);
          v16 = v14 - v15;
        }
        *(_DWORD *)a1 = v15;
        *(_DWORD *)(a1 + 4) = v16;
        if (v13 < 1)
        {
          v17 = 0;
          v18 = 0;
        }
        else
        {
          v17 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v13]], 8);
          v18 = v13 - v17;
        }
        goto LABEL_9;
      }
    }
  }
  v17 = 0;
  v18 = 0;
  *(_QWORD *)a1 = 0;
LABEL_9:
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v18;
  if (v10 <= 0)
  {
    v24 = 0;
    v25 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v19 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v10]], 8);
    v20 = v10 - v19;
    if (v19 < 1)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v21 = v19;
      v22 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v19]], 8);
      v23 = v21 - v22;
    }
    *(_DWORD *)(a1 + 16) = v22;
    *(_DWORD *)(a1 + 20) = v23;
    if (v20 < 1)
    {
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v24 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v20]], 8);
      v25 = v20 - v24;
    }
  }
  *(_DWORD *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 28) = v25;
  if (v7 < 1)
  {
    v27 = 0u;
  }
  else
  {
    v26 = ec_dec_icdf(a2, &silk_shell_code_table2[silk_shell_code_table_offsets[v7]], 8);
    v27 = v7 - v26;
    if (v26 > 0)
    {
      v28 = v26;
      v29 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v26]], 8);
      v30 = v28 - v29;
      if (v29 < 1)
      {
        v32 = 0;
        v33 = 0;
      }
      else
      {
        v31 = v29;
        v32 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v29]], 8);
        v33 = v31 - v32;
      }
      *(_DWORD *)(a1 + 32) = v32;
      *(_DWORD *)(a1 + 36) = v33;
      if (v30 < 1)
      {
        v34 = 0;
        v35 = 0;
      }
      else
      {
        v34 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v30]], 8);
        v35 = v30 - v34;
      }
      goto LABEL_27;
    }
  }
  v34 = 0;
  v35 = 0;
  *(_QWORD *)(a1 + 32) = 0;
LABEL_27:
  *(_DWORD *)(a1 + 40) = v34;
  *(_DWORD *)(a1 + 44) = v35;
  if (v27 <= 0)
  {
    result = 0;
    v42 = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  else
  {
    v36 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v27]], 8);
    v37 = v27 - v36;
    if (v36 < 1)
    {
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v38 = v36;
      v39 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v36]], 8);
      v40 = v38 - v39;
    }
    *(_DWORD *)(a1 + 48) = v39;
    *(_DWORD *)(a1 + 52) = v40;
    if (v37 < 1)
    {
      result = 0;
      v42 = 0;
    }
    else
    {
      result = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v37]], 8);
      v42 = v37 - result;
    }
  }
  *(_DWORD *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = v42;
  return result;
}

__n128 silk_decode_core(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  size_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  __n128 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  signed int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  signed int v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  __int16 *v72;
  int v73;
  int v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  _WORD *v78;
  int v79;
  _BOOL4 v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  char *v99;
  int *v100;
  int *v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  __int16 v136;
  int v137;
  __n128 *v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 *v143;
  __n128 result;
  __n128 v145;
  uint64_t v146;
  __n128 *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  int v152;
  char *v153;
  char *v154;
  int v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  _WORD *v179;
  char *v180;
  __int16 v181;
  __int16 v182;
  __int16 v183;
  __int16 v184;
  __int16 v185;
  __int16 v186;
  __int16 v187;
  __int16 v188;
  __int16 v189;
  __int16 v190;
  __int16 v191;
  __int16 v192;
  __int16 v193;
  __int16 v194;
  __int16 v195;
  __int16 v196;
  uint64_t v197;

  v148 = a3;
  v6 = a1;
  v197 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, v7);
  v9 = *(_DWORD *)(v6 + 2328);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v146 - v11;
  bzero((char *)&v146 - v11, v13);
  v14 = 4 * *(int *)(v6 + 2332);
  MEMORY[0x1E0C80A78](v15);
  v16 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v16, v14);
  MEMORY[0x1E0C80A78](v17);
  v19 = (__n128 *)((char *)&v146 - ((v14 + 79) & 0xFFFFFFFFFFFFFFF0));
  v152 = *(char *)(v6 + 2791);
  if (v9 >= 1)
  {
    v20 = 0;
    v21 = *(char *)(v6 + 2794);
    v22 = 16 * silk_Quantization_Offsets_Q10[2 * (*(char *)(v6 + 2789) >> 1) + *(char *)(v6 + 2790)];
    do
    {
      v23 = 196314165 * v21 + 907633515;
      v24 = *(_DWORD *)(a4 + 4 * v20) << 14;
      v25 = (v24 | 0x500) & (v24 >> 31);
      if (v24 > 0)
        v25 = v24 - 1280;
      v26 = v25 + v22;
      if (v23 < 0)
        v26 = -v26;
      *(_DWORD *)(v6 + 4 + 4 * v20) = v26;
      v21 = *(_DWORD *)(a4 + 4 * v20++) + v23;
    }
    while (v20 < *(int *)(v6 + 2328));
  }
  bzero(v19, v18);
  v27 = *(__n128 *)(v6 + 1300);
  *v19 = *(__n128 *)(v6 + 1284);
  v19[1] = v27;
  v28 = *(__n128 *)(v6 + 1316);
  v29 = *(__n128 *)(v6 + 1332);
  v147 = (__n128 *)(v6 + 1284);
  v19[2] = v28;
  v19[3] = v29;
  if (*(int *)(v6 + 2324) >= 1)
  {
    v30 = a2;
    v31 = 0;
    v32 = (char *)(v6 + 4);
    v155 = *(_DWORD *)(v6 + 2336);
    v149 = v12 - 8;
    v33 = v148;
    v154 = v12;
    v153 = v16;
    v156 = v30;
    v151 = v6;
    v150 = v8;
    do
    {
      v159 = v31;
      v34 = v30 + 32 * (v31 >> 1) + 32;
      __memcpy_chk();
      v30 = v156;
      v35 = v159;
      v36 = *(_DWORD *)(v156 + 4 * v159 + 16);
      if (v36 >= 0)
        v37 = *(_DWORD *)(v156 + 4 * v159 + 16);
      else
        v37 = -v36;
      v38 = __clz(v37);
      v39 = v36 << (v38 - 1);
      v40 = 0x1FFFFFFF / (v39 >> 16);
      v41 = (__int16)v40;
      v42 = (v39 >> 16) * v41 + (((unsigned __int16)v39 * v41) >> 16);
      v43 = (v40 << 16)
          - 8 * v42 * (((v40 >> 15) + 1) >> 1)
          + ((-8 * v42) >> 16) * v41
          + ((((-8 * v42) & 0xFFF8) * v41) >> 16);
      v44 = v37 >> 17;
      v45 = v43 >> (15 - v38);
      v46 = (int)0x80000000 >> (v38 - 15);
      if (v43 > v46)
        v46 = v43;
      if (v43 <= (int)(0x7FFFFFFFu >> (v38 - 15)))
        v47 = v46;
      else
        v47 = 0x7FFFFFFFu >> (v38 - 15);
      v48 = v47 << (v38 - 15);
      if (v44)
        v49 = v45;
      else
        v49 = v48;
      v50 = *(_DWORD *)v6;
      v51 = v33;
      if (v36 == *(_DWORD *)v6)
      {
        v52 = v34;
        v53 = 0x10000;
      }
      else
      {
        v54 = 0;
        if (v50 >= 0)
          v55 = *(_DWORD *)v6;
        else
          v55 = -v50;
        v56 = __clz(v55);
        v57 = v50 << (v56 - 1);
        v58 = (v57 >> 16) * v41 + (((unsigned __int16)v57 * v41) >> 16);
        v59 = v57 - (((unint64_t)(v58 * (uint64_t)v39) >> 29) & 0xFFFFFFF8);
        v60 = v58 + (v59 >> 16) * v41 + (((unsigned __int16)v59 * v41) >> 16);
        v61 = v56 - v38;
        if ((v61 + 29) >= 0x30)
          v62 = 0;
        else
          v62 = v60 >> (v61 + 13);
        v63 = (int)0x80000000 >> (-13 - v61);
        if (v60 > v63)
          v63 = v60;
        if (v60 <= (int)(0x7FFFFFFFu >> (-13 - v61)))
          v64 = v63;
        else
          v64 = 0x7FFFFFFFu >> (-13 - v61);
        v65 = v64 << (-13 - v61);
        if (v61 <= -14)
          v53 = v65;
        else
          v53 = v62;
        v66 = vdupq_n_s32(v53 >> 16);
        v67 = vdupq_n_s32((unsigned __int16)v53);
        v68 = vdupq_n_s32(v53);
        v69.i64[0] = 0x100000001;
        v69.i64[1] = 0x100000001;
        do
        {
          v70 = (int32x4_t)v19[v54];
          v71 = vshrq_n_s32(vshlq_n_s32(v70, 0x10uLL), 0x10uLL);
          v19[v54++] = (__n128)vmlaq_s32(vsraq_n_s32(vmulq_s32(v71, v66), vmulq_s32(v71, v67), 0x10uLL), vhaddq_s32(vshrq_n_s32(v70, 0xFuLL), v69), v68);
        }
        while (v54 != 4);
        v52 = v34;
      }
      v72 = (__int16 *)(v156 + 2 * (5 * v35) + 96);
      v73 = *(unsigned __int8 *)(v6 + 2789);
      *(_DWORD *)v6 = v36;
      v74 = *(_DWORD *)(v6 + 4184);
      v157 = v32;
      if (!v74 || (*(_DWORD *)(v6 + 4188) == 2 ? (v75 = v35 > 1) : (v75 = 1), !v75 ? (v76 = v73 == 2) : (v76 = 1), v76))
      {
        if (v73 != 2)
        {
          v77 = *(unsigned int *)(v6 + 2332);
          v180 = v32;
          v78 = v51;
          goto LABEL_78;
        }
        v179 = v51;
        v79 = *(_DWORD *)(v156 + 4 * v35);
      }
      else
      {
        v179 = v51;
        *(_QWORD *)v72 = 0;
        *(_WORD *)(v156 + 2 * (5 * v35) + 104) = 0;
        *(_WORD *)(v156 + 2 * (5 * v35) + 100) = 4096;
        v79 = *(_DWORD *)(v6 + 2308);
        *(_DWORD *)(v156 + 4 * v35) = v79;
      }
      v81 = v152 < 4 && v35 == 2;
      if (!v35 || v81)
      {
        v84 = *(_DWORD *)(v6 + 2336);
        v85 = *(_DWORD *)(v6 + 2340);
        v86 = *(_DWORD *)(v6 + 2332);
        if (v35 == 2)
        {
          memcpy((void *)(v6 + 2 * v84 + 1348), v148, 4 * v86);
          LODWORD(v35) = v159;
          v86 = *(_DWORD *)(v6 + 2332);
          v87 = *(_DWORD *)(v6 + 2336);
          v88 = *(_DWORD *)(v6 + 2340);
        }
        else
        {
          v88 = *(_DWORD *)(v6 + 2340);
          v87 = *(_DWORD *)(v6 + 2336);
        }
        silk_LPC_analysis_filter(&v8[2 * (v84 - v79 - v85) - 4], v6 + 2 * (v84 - v79 - v85 - 2 + v86 * (int)v35) + 1348, v52, v87 - (v84 - v79 - v85 - 2), v88);
        v35 = v159;
        if (v159)
        {
          v12 = v154;
          v16 = v153;
          v30 = v156;
        }
        else
        {
          v30 = v156;
          v49 = 4
              * (*(__int16 *)(v156 + 136) * (v49 >> 16) + ((*(__int16 *)(v156 + 136) * (unsigned __int16)v49) >> 16));
          v12 = v154;
          v16 = v153;
        }
        if (v79 >= -1)
        {
          v89 = (v79 + 2);
          v90 = v155 - 1;
          v91 = *(_DWORD *)(v6 + 2336) - 1;
          do
          {
            v92 = *(__int16 *)&v8[2 * v91];
            *(_DWORD *)&v12[4 * v90--] = (v49 >> 16) * v92 + (((unsigned __int16)v49 * v92) >> 16);
            --v91;
            --v89;
          }
          while (v89);
        }
      }
      else if (v53 != 0x10000 && v79 >= -1)
      {
        v82 = (v79 + 2);
        v83 = v155 - 1;
        do
        {
          *(_DWORD *)&v12[4 * v83] = (__int16)*(_DWORD *)&v12[4 * v83] * (v53 >> 16)
                                   + (((__int16)*(_DWORD *)&v12[4 * v83] * (unsigned __int16)v53) >> 16)
                                   + (((*(int *)&v12[4 * v83] >> 15) + 1) >> 1) * v53;
          --v83;
          --v82;
        }
        while (v82);
      }
      v158 = *(unsigned int *)(v6 + 2332);
      if ((int)v158 >= 1)
      {
        v93 = 0;
        v94 = *v72;
        v95 = v72[1];
        v96 = v72[2];
        v97 = v72[3];
        v98 = v72[4];
        v99 = &v12[4 * v155];
        v100 = (int *)&v149[4 * (v155 - v79) + 8];
        v101 = v100;
        v32 = v157;
        v77 = v158;
        do
        {
          v102 = v101[1];
          ++v101;
          v103 = *(_DWORD *)&v32[4 * v93]
               + 2
               * ((v100[2] >> 16) * v94
                + (((unsigned __int16)v100[2] * v94) >> 16)
                + (v102 >> 16) * v95
                + (((unsigned __int16)v102 * v95) >> 16)
                + (*v100 >> 16) * v96
                + (((unsigned __int16)*v100 * v96) >> 16)
                + (*(v100 - 1) >> 16) * v97
                + (((unsigned __int16)*(v100 - 1) * v97) >> 16)
                + (*(v100 - 2) >> 16) * v98
                + (((unsigned __int16)*(v100 - 2) * v98) >> 16))
               + 4;
          *(_DWORD *)&v16[4 * v93] = v103;
          *(_DWORD *)&v99[4 * v93++] = 2 * v103;
          v100 = v101;
        }
        while (v77 != v93);
        v155 += v93;
        v180 = v16;
        v35 = v159;
        v78 = v179;
LABEL_78:
        v158 = v77;
        if ((int)v77 >= 1)
        {
          v104 = 0;
          v176 = *(_DWORD *)(v6 + 2340);
          v174 = v182;
          v175 = v181;
          v172 = v184;
          v173 = v183;
          v105 = v185;
          LODWORD(v179) = v186;
          v177 = v176 >> 1;
          v178 = v187;
          v106 = v188;
          v107 = v189;
          v108 = v190;
          v168 = v191;
          v166 = v192;
          v167 = v189;
          v163 = v194;
          v164 = v193;
          v160 = v196;
          v161 = v195;
          v109 = v19[3].n128_i32[3];
          v110 = v19[3].n128_i32[1];
          v111 = v19[2].n128_i32[3];
          v112 = v19[2].n128_i32[1];
          v113 = v19[1].n128_i32[3];
          v169 = v190;
          v165 = v188;
          v162 = v185;
          do
          {
            v114 = v109 >> 16;
            v115 = (unsigned __int16)v109 * v175;
            v116 = (int *)v19 + v104;
            v117 = v116[14];
            v118 = (unsigned __int16)v110 * v173;
            v119 = v177
                 + v114 * v175
                 + (v115 >> 16)
                 + (v117 >> 16) * v174
                 + (((unsigned __int16)v117 * v174) >> 16)
                 + (v110 >> 16) * v173;
            v120 = v116[12];
            v121 = v119 + (v118 >> 16) + (v120 >> 16) * v172 + (((unsigned __int16)v120 * v172) >> 16);
            v122 = (unsigned __int16)v111 * v105;
            v123 = v121 + (v111 >> 16) * v105;
            v124 = v116[10];
            v125 = v123 + (v122 >> 16) + (v124 >> 16) * (_DWORD)v179 + (((unsigned __int16)v124 * (int)v179) >> 16);
            v126 = (unsigned __int16)v112 * v178;
            v127 = v125 + (v112 >> 16) * v178;
            v128 = v116[8];
            v129 = v127
                 + (v126 >> 16)
                 + (v128 >> 16) * v106
                 + (((unsigned __int16)v128 * v106) >> 16)
                 + (v113 >> 16) * v107
                 + (((unsigned __int16)v113 * v107) >> 16)
                 + (v116[6] >> 16) * v108
                 + (((unsigned __int16)v116[6] * v108) >> 16);
            if (v176 == 16)
            {
              v130 = v116[4];
              v131 = v116[5] >> 16;
              v132 = (unsigned __int16)v116[5] * v168;
              v170 = (unsigned __int16)v130 * v166;
              v171 = v130 >> 16;
              v133 = v104 + 1;
              v105 = v162;
              v106 = v165;
              v107 = v167;
              v108 = v169;
              v129 += v131 * v168
                    + (v132 >> 16)
                    + v171 * v166
                    + (v170 >> 16)
                    + (v116[3] >> 16) * v164
                    + (((unsigned __int16)v116[3] * v164) >> 16)
                    + (v116[2] >> 16) * v163
                    + (((unsigned __int16)v116[2] * v163) >> 16)
                    + (v19->n128_i32[v104 + 1] >> 16) * v161
                    + (((unsigned __int16)v19->n128_u32[v104 + 1] * v161) >> 16)
                    + (*v116 >> 16) * v160
                    + (((unsigned __int16)*v116 * v160) >> 16);
            }
            else
            {
              v133 = v104 + 1;
            }
            v109 = *(_DWORD *)&v180[4 * v104] + 16 * v129;
            v19[4].n128_u32[v104] = v109;
            v134 = v109 * (((v36 >> 21) + 1) >> 1)
                 + (v109 >> 16) * (__int16)(v36 >> 6)
                 + (((unsigned __int16)v109 * (__int16)(v36 >> 6)) >> 16);
            v135 = ((v134 >> 7) + 1) >> 1;
            if (v134 < -8388736)
              LOWORD(v135) = 0x8000;
            if (v134 <= 8388479)
              v136 = v135;
            else
              v136 = 0x7FFF;
            v78[v104] = v136;
            v113 = v128;
            v112 = v124;
            v111 = v120;
            v110 = v117;
            v104 = v133;
          }
          while (v133 != v77);
          v30 = v156;
          v32 = v157;
          v6 = v151;
          v8 = v150;
          v12 = v154;
          v16 = v153;
          v35 = v159;
        }
        goto LABEL_91;
      }
      v32 = v157;
      v78 = v179;
LABEL_91:
      v137 = v158;
      v138 = (__n128 *)((char *)v19 + 4 * (int)v158);
      v139 = *v138;
      v140 = v138[1];
      v141 = v138[3];
      v19[2] = v138[2];
      v19[3] = v141;
      *v19 = v139;
      v19[1] = v140;
      v32 += 4 * v137;
      v33 = (char *)&v78[v137];
      v31 = v35 + 1;
    }
    while (v31 < *(int *)(v6 + 2324));
  }
  v142 = v19[1];
  v143 = v147;
  *v147 = *v19;
  v143[1] = v142;
  result = v19[2];
  v145 = v19[3];
  v143[2] = result;
  v143[3] = v145;
  return result;
}

uint64_t silk_insertion_sort_increasing_all_values_int16(uint64_t result, int a2)
{
  uint64_t i;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2 >= 2)
  {
    for (i = 1; i != a2; ++i)
    {
      v3 = *(__int16 *)(result + 2 * i);
      v4 = i;
      while (1)
      {
        v5 = v4 - 1;
        v6 = *(__int16 *)(result + 2 * (v4 - 1));
        if (v3 >= v6)
          break;
        *(_WORD *)(result + 2 * v4--) = v6;
        if (v5 + 1 <= 1)
        {
          LODWORD(v4) = 0;
          break;
        }
      }
      *(_WORD *)(result + 2 * (int)v4) = v3;
    }
  }
  return result;
}

uint64_t silk_decode_pulses(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned __int8 *v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  _OWORD *v22;
  uint64_t i;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v31;
  uint64_t v33;
  _DWORD v34[20];
  _DWORD v35[20];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = ec_dec_icdf(a1, &silk_rate_levels_iCDF[9 * (a3 >> 1)], 8);
  v9 = a5 >> 4;
  v31 = a5;
  if ((int)(a5 & 0xFFFFFFF0) >= a5)
    v10 = v9;
  else
    v10 = v9 + 1;
  if ((int)v10 >= 1)
  {
    v33 = a2;
    v11 = 0;
    v12 = (unsigned __int8 *)&silk_pulses_per_block_iCDF + 18 * v8;
    do
    {
      v34[v11] = 0;
      v13 = ec_dec_icdf(a1, v12, 8);
      if (v13 == 17)
      {
        v14 = 0;
        do
        {
          if (v14++ == 9)
            v16 = (unsigned __int8 *)&unk_1DECD67E3;
          else
            v16 = (unsigned __int8 *)&silk_pulses_per_block_iCDF;
          v13 = ec_dec_icdf(a1, v16 + 162, 8);
        }
        while (v13 == 17);
        v34[v11] = v14;
      }
      v35[v11++] = v13;
    }
    while (v11 != v10);
    v17 = 0;
    v18 = v35;
    v19 = v10;
    a2 = v33;
    do
    {
      v21 = *v18++;
      v20 = v21;
      v22 = (_OWORD *)(v33 + 4 * (v17 >> 12));
      if (v21 < 1)
      {
        v22[2] = 0u;
        v22[3] = 0u;
        *v22 = 0u;
        v22[1] = 0u;
      }
      else
      {
        silk_shell_decoder((uint64_t)v22, a1, v20);
      }
      v17 += 0x10000;
      --v19;
    }
    while (v19);
    for (i = 0; i != v10; ++i)
    {
      v24 = v34[i];
      if (v24 >= 1)
      {
        v25 = 0;
        v26 = a2 + 64 * (__int16)i;
        do
        {
          v27 = *(_DWORD *)(v26 + 4 * v25);
          v28 = v24;
          do
          {
            v27 = ec_dec_icdf(a1, silk_lsb_iCDF, 8) + 2 * v27;
            --v28;
          }
          while (v28);
          *(_DWORD *)(v26 + 4 * v25++) = v27;
        }
        while (v25 != 16);
        v35[i] |= 32 * v24;
        a2 = v33;
      }
    }
  }
  return silk_decode_signs(a1, a2, v31, a3, a4, (uint64_t)v35);
}

__int16 *silk_NLSF_stabilize(__int16 *result, __int16 *a2, int a3)
{
  __int16 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t i;
  __int16 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  __int16 *v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 *v35;
  __int16 *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;

  v5 = result;
  v6 = 0;
  v7 = a3;
  v8 = a3 - 1;
  v9 = a3;
  while (1)
  {
    v10 = *a2;
    v11 = *result - v10;
    if (a3 < 2)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      LODWORD(v12) = 0;
      v13 = *result;
      for (i = 1; i != a3; ++i)
      {
        v15 = result[i];
        v16 = v15 - (a2[i] + v13);
        if (v16 < v11)
        {
          LODWORD(v12) = i;
          v11 = v16;
        }
        v13 = v15;
      }
    }
    v17 = a2[a3];
    v18 = 0x8000 - (result[v8] + v17);
    if (v18 >= v11)
      v12 = v12;
    else
      v12 = a3;
    if (v18 < v11)
      v11 = 0x8000 - (result[v8] + v17);
    if ((v11 & 0x80000000) == 0)
      break;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == a3)
      {
        result[v8] = 0x8000 - v17;
      }
      else
      {
        if ((int)v12 < 1)
        {
          v19 = 0;
        }
        else
        {
          v19 = 0;
          v20 = v12;
          v21 = a2;
          do
          {
            v22 = *v21++;
            v19 += v22;
            --v20;
          }
          while (v20);
        }
        v23 = (int)v12;
        v24 = 0x8000;
        if ((int)v12 < a3)
        {
          v25 = a3;
          do
            v24 -= a2[v25--];
          while (v25 > (int)v12);
        }
        v26 = a2[(int)v12] >> 1;
        v27 = v19 + v26;
        v28 = v24 - v26;
        v29 = &result[v23];
        v30 = *v29 + *(v29 - 1);
        v31 = (v30 & 1) + (v30 >> 1);
        if (v27 <= v28)
          v32 = v28;
        else
          v32 = v27;
        if (v27 >= v28)
          v27 = v28;
        if (v31 > v27)
          LOWORD(v27) = v31;
        if (v31 > v32)
          LOWORD(v27) = v32;
        v33 = v27 - v26;
        *(v29 - 1) = v33;
        *v29 = v33 + a2[v23];
      }
    }
    else
    {
      *result = v10;
    }
    if (++v6 == 20)
    {
      result = (__int16 *)silk_insertion_sort_increasing_all_values_int16((uint64_t)result, a3);
      v34 = *a2;
      if (*v5 > v34)
        LOWORD(v34) = *v5;
      *v5 = v34;
      if (a3 < 2)
      {
        v42 = v5[v8];
        if (v42 >= 0x8000 - a2[v7])
          LOWORD(v42) = 0x8000 - a2[v7];
        v5[v8] = v42;
      }
      else
      {
        v35 = a2 + 1;
        v36 = v5 + 1;
        v37 = v9 - 1;
        do
        {
          v38 = *v35++;
          v34 = v38 + (__int16)v34;
          if (*v36 > v34)
            LOWORD(v34) = *v36;
          *v36++ = v34;
          --v37;
        }
        while (v37);
        v39 = v5[v8];
        if (v39 >= 0x8000 - a2[v7])
          LOWORD(v39) = 0x8000 - a2[v7];
        v5[v8] = v39;
        v40 = (a3 - 2);
        LOWORD(v41) = v5[v40 + 1];
        do
        {
          v41 = (__int16)v41 - a2[v40 + 1];
          if (v5[v40] < v41)
            LOWORD(v41) = v5[v40];
          v5[v40--] = v41;
        }
        while (v40 != -1);
      }
      return result;
    }
  }
  return result;
}

int *silk_resampler_private_AR2(int *result, int *a2, __int16 *a3, __int16 *a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (a5 >= 1)
  {
    v5 = *a4;
    v6 = a4[1];
    v7 = a5;
    v8 = *result;
    do
    {
      v9 = *a3++;
      v10 = v8 + (v9 << 8);
      *a2++ = v10;
      v11 = (__int16)(v10 >> 14);
      v12 = 4 * (v10 & 0x3FFF);
      v8 = result[1] + v11 * v5 + ((v12 * v5) >> 16);
      *result = v8;
      result[1] = v11 * v6 + ((v12 * v6) >> 16);
      --v7;
    }
    while (v7);
  }
  return result;
}

__n128 silk_resampler_private_IIR_FIR(uint64_t a1, _WORD *a2, __int16 *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  size_t v11;
  __int16 *v12;
  unsigned int *v13;
  int v14;
  __int16 *v15;
  int v16;
  int8x16_t v17;
  int v18;
  int v19;
  int v20;
  __n128 result;
  __n128 *v22;
  unsigned int *i;
  _OWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  LODWORD(v8) = *(_DWORD *)(a1 + 268);
  MEMORY[0x1E0C80A78](a1);
  v10 = (_OWORD *)((char *)&v22 - v9);
  bzero((char *)&v22 - v9, v11);
  v12 = a3;
  v13 = (unsigned int *)a1;
  v22 = (__n128 *)(a1 + 24);
  *v10 = *(_OWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 272);
  v24 = v10 + 1;
  for (i = (unsigned int *)a1; ; LODWORD(v8) = i[67])
  {
    if (a4 >= (int)v8)
      v8 = v8;
    else
      v8 = a4;
    v15 = v12;
    silk_resampler_private_up2_HQ(v13, (uint64_t)v24, v12, v8);
    if ((int)((_DWORD)v8 << 17) >= 1)
    {
      v16 = 0;
      do
      {
        v17 = *(int8x16_t *)((char *)v10 + 2 * (v16 >> 16));
        v18 = vaddvq_s32(vmlal_s16(vmull_s16(silk_resampler_frac_FIR_12[(unsigned __int16)((3 * (unsigned __int16)v16) >> 14)], *(int16x4_t *)v17.i8), vrev64_s16(silk_resampler_frac_FIR_12[11 - ((12 * (unsigned __int16)v16) >> 16)]), (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
        if (v18 <= 1073725439)
        {
          v19 = ((v18 >> 14) + 1) >> 1;
          if (v19 <= -32768)
            LOWORD(v19) = 0x8000;
        }
        else
        {
          LOWORD(v19) = 0x7FFF;
        }
        *a2++ = v19;
        v16 += v14;
      }
      while (v16 < (_DWORD)v8 << 17);
    }
    a4 -= v8;
    v20 = 2 * v8;
    if (a4 < 1)
      break;
    v12 = &v15[(int)v8];
    *v10 = *(_OWORD *)((char *)v10 + 2 * v20);
    v13 = i;
  }
  result = *(__n128 *)((char *)v10 + 2 * v20);
  *v22 = result;
  return result;
}

uint64_t silk_Get_Decoder_Size(_DWORD *a1)
{
  *a1 = 8600;
  return 0;
}

uint64_t silk_InitDecoder(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    result = silk_init_decoder((_DWORD *)(a1 + 4288 * v2));
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  *(_DWORD *)(a1 + 8584) = 0;
  *(_QWORD *)(a1 + 8576) = 0;
  *(_DWORD *)(a1 + 8596) = 0;
  return result;
}

uint64_t silk_Decode(uint64_t inited, int *a2, int a3, int a4, uint64_t a5, _WORD *a6, int *a7)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int *v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64x2_t v41;
  int64x2_t v42;
  int32x2_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  _WORD *v68;
  int v69;
  uint64_t v70;
  int v71;
  size_t v72;
  uint64_t v73;
  _WORD *v74;
  __int16 *v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  __int16 *v81;
  _WORD *v82;
  __int16 v83;
  int v84;
  uint64_t v85;
  _WORD *v86;
  __int16 v87;
  uint64_t v88;
  _WORD *v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  __int128 v93;
  int64x2_t v94;
  _BOOL4 v95;
  _WORD *v96;
  int *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  _QWORD v103[3];

  v96 = a6;
  v97 = a7;
  v10 = inited;
  v103[1] = *MEMORY[0x1E0C80C00];
  v100 = 0;
  v103[0] = 0;
  LODWORD(v11) = a2[1];
  if (a4 && (int)v11 >= 1)
  {
    v12 = (_DWORD *)(inited + 2400);
    v13 = a2[1];
    do
    {
      *v12 = 0;
      v12 += 1072;
      --v13;
    }
    while (v13);
  }
  if ((int)v11 <= *(_DWORD *)(inited + 8592))
  {
    v14 = 0;
  }
  else
  {
    inited = silk_init_decoder((_DWORD *)(inited + 4288));
    v14 = inited;
    LODWORD(v11) = a2[1];
  }
  v95 = (_DWORD)v11 == 1 && *(_DWORD *)(v10 + 8592) == 2 && a2[3] == 1000 * *(_DWORD *)(v10 + 2316);
  v15 = *(_DWORD *)(v10 + 2400);
  v99 = a3;
  if (!v15 && (int)v11 >= 1)
  {
    v16 = 0;
    v17 = v10;
    while (1)
    {
      v18 = a2[4];
      result = 4294967093;
      if (v18 <= 19)
      {
        if (v18)
          v21 = v18 == 10;
        else
          v21 = 1;
        if (!v21)
          return result;
        v20 = 2;
      }
      else
      {
        if (v18 == 60)
        {
          v20 = 4;
          v22 = 3;
          goto LABEL_29;
        }
        if (v18 == 40)
        {
          v20 = 4;
          v22 = 2;
          goto LABEL_29;
        }
        if (v18 != 20)
          return result;
        v20 = 4;
      }
      v22 = 1;
LABEL_29:
      *(_DWORD *)(v17 + 2404) = v22;
      *(_DWORD *)(v17 + 2324) = v20;
      v23 = a2[3] >> 10;
      if (v23 > 0xF || ((1 << v23) & 0x8880) == 0)
        return 4294967096;
      inited = silk_decoder_set_fs(v17, v23 + 1, a2[2]);
      v14 = (inited + v14);
      ++v16;
      v11 = a2[1];
      v17 += 4288;
      if (v16 >= v11)
      {
        a3 = v99;
        break;
      }
    }
  }
  v25 = *a2;
  if (*a2 != 2)
    goto LABEL_42;
  if ((_DWORD)v11 != 2)
    goto LABEL_41;
  if (*(_DWORD *)(v10 + 8588) != 1 && *(_DWORD *)(v10 + 8592) != 1)
  {
    LODWORD(v11) = 2;
LABEL_41:
    v25 = 2;
    goto LABEL_42;
  }
  *(_DWORD *)(v10 + 8576) = 0;
  *(_DWORD *)(v10 + 8584) = 0;
  inited = (uint64_t)memcpy((void *)(v10 + 6736), (const void *)(v10 + 2448), 0x130uLL);
  v25 = *a2;
  LODWORD(v11) = a2[1];
LABEL_42:
  *(_DWORD *)(v10 + 8588) = v25;
  *(_DWORD *)(v10 + 8592) = v11;
  if ((a2[2] - 48001) < 0xFFFF63BF)
    return 4294967096;
  v98 = v10;
  if (a3 == 1 || *(_DWORD *)(v10 + 2400))
    goto LABEL_83;
  if ((int)v11 >= 1)
  {
    v26 = 0;
    v27 = v10 + 2416;
    do
    {
      v28 = v10 + 4288 * v26;
      if (*(int *)(v28 + 2404) >= 1)
      {
        v29 = 0;
        v30 = (int *)(v28 + 2404);
        do
          *(_DWORD *)(v27 + 4 * v29++) = ec_dec_bit_logp(a5, 1);
        while (v29 < *v30);
      }
      inited = ec_dec_bit_logp(a5, 1);
      *(_DWORD *)(v10 + 4288 * v26++ + 2428) = inited;
      v11 = a2[1];
      v27 += 4288;
    }
    while (v26 < v11);
    if ((int)v11 >= 1)
    {
      v31 = 0;
      v32 = v10;
      v93 = xmmword_1DEC3D320;
      v94 = vdupq_n_s64(2uLL);
      do
      {
        v33 = v10 + 4288 * v31;
        *(_DWORD *)(v33 + 2440) = 0;
        *(_QWORD *)(v33 + 2432) = 0;
        if (*(_DWORD *)(v33 + 2428))
        {
          v34 = v10 + 4288 * v31;
          v35 = *(_DWORD *)(v34 + 2404);
          if (v35 == 1)
          {
            *(_DWORD *)(v33 + 2432) = 1;
          }
          else
          {
            v36 = (int *)(v34 + 2404);
            inited = ec_dec_icdf(a5, (unsigned __int8 *)*(&silk_LBRR_flags_iCDF_ptr + v35 - 2), 8);
            v37 = v94;
            v38 = *v36;
            v10 = v98;
            if ((int)v38 >= 1)
            {
              v39 = 0;
              v40 = inited + 1;
              v41 = (uint64x2_t)vdupq_n_s64(v38 - 1);
              v42 = (int64x2_t)v93;
              do
              {
                v43 = vmovn_s64((int64x2_t)vcgeq_u64(v41, (uint64x2_t)v42));
                if ((v43.i8[0] & 1) != 0)
                  *(_DWORD *)(v32 + 4 * v39 + 2432) = (v40 >> v39) & 1;
                if ((v43.i8[4] & 1) != 0)
                  *(_DWORD *)(v32 + 4 * v39 + 2436) = (v40 >> (v39 + 1)) & 1;
                v39 += 2;
                v42 = vaddq_s64(v42, v37);
              }
              while (((v38 + 1) & 0xFFFFFFFFFFFFFFFELL) != v39);
            }
          }
        }
        ++v31;
        v11 = a2[1];
        v32 += 4288;
      }
      while (v31 < v11);
    }
  }
  if (v99)
    goto LABEL_83;
  v44 = *(_DWORD *)(v10 + 2404);
  if (v44 < 1)
    goto LABEL_83;
  v45 = 0;
  v46 = 0xFFFFFFFFLL;
  v47 = 2432;
  do
  {
    if ((int)v11 < 1)
      goto LABEL_82;
    v48 = 0;
    v94.i64[0] = v46;
    v49 = 4 * v46 + 2432;
    v50 = (_DWORD *)(v10 + 4 * v45 + 6720);
    do
    {
      if (!*(_DWORD *)(v10 + v47))
        goto LABEL_80;
      if (v48 || (_DWORD)v11 != 2 || (silk_stereo_decode_pred(a5, v103), *v50))
      {
        if (!v45)
          goto LABEL_78;
      }
      else
      {
        silk_stereo_decode_mid_only(a5, (_DWORD *)&v100 + 1);
        if (!v45)
        {
LABEL_78:
          v51 = 0;
          goto LABEL_79;
        }
      }
      if (!*(_DWORD *)(v10 + v49))
        goto LABEL_78;
      v51 = 2;
LABEL_79:
      silk_decode_indices(v10, a5, v45, 1, v51);
      inited = silk_decode_pulses(a5, (uint64_t)&v101, *(char *)(v10 + 2789), *(char *)(v10 + 2790), *(_DWORD *)(v10 + 2328));
      LODWORD(v11) = a2[1];
LABEL_80:
      ++v48;
      v10 += 4288;
    }
    while (v48 < (int)v11);
    v10 = v98;
    v44 = *(_DWORD *)(v98 + 2404);
    LODWORD(v46) = v94.i32[0];
LABEL_82:
    ++v45;
    v47 += 4;
    v46 = (v46 + 1);
  }
  while (v45 < v44);
LABEL_83:
  v52 = v99;
  if ((_DWORD)v11 == 2)
  {
    if (v99)
    {
      if (v99 == 2 && *(_DWORD *)(v10 + 4 * *(int *)(v10 + 2400) + 2432) == 1)
      {
        inited = silk_stereo_decode_pred(a5, v103);
        if (!*(_DWORD *)(v10 + 4 * *(int *)(v10 + 2400) + 6720))
          goto LABEL_88;
LABEL_91:
        HIDWORD(v100) = 0;
      }
      else
      {
        v53 = *(__int16 *)(v10 + 8578);
        LODWORD(v103[0]) = *(__int16 *)(v10 + 8576);
        HIDWORD(v103[0]) = v53;
      }
    }
    else
    {
      inited = silk_stereo_decode_pred(a5, v103);
      if (*(_DWORD *)(v10 + 4 * *(int *)(v10 + 2400) + 6704))
        goto LABEL_91;
LABEL_88:
      inited = silk_stereo_decode_mid_only(a5, (_DWORD *)&v100 + 1);
    }
  }
  v54 = a2[1];
  v55 = HIDWORD(v100) == 0;
  if (v54 == 2 && !HIDWORD(v100))
  {
    if (*(_DWORD *)(v10 + 8596) == 1)
    {
      bzero((void *)(v10 + 5636), 0x3C0uLL);
      *(_OWORD *)(v10 + 5604) = 0u;
      *(_OWORD *)(v10 + 5620) = 0u;
      *(_OWORD *)(v10 + 5572) = 0u;
      *(_OWORD *)(v10 + 5588) = 0u;
      *(_DWORD *)(v10 + 6596) = 100;
      *(_BYTE *)(v10 + 6600) = 10;
      *(_DWORD *)(v10 + 8476) = 0;
      *(_DWORD *)(v10 + 6664) = 1;
      v54 = a2[1];
    }
    else
    {
      v54 = 2;
    }
  }
  v101 = 0;
  v102 = 0;
  v56 = *(int *)(v10 + 2328);
  MEMORY[0x1E0C80A78](inited);
  v58 = (char *)&v93 - v57;
  bzero((char *)&v93 - v57, v59);
  v94.i64[0] = (uint64_t)v58;
  v101 = v58;
  v102 = (uint64_t)&v58[2 * v56 + 4];
  if (!v52)
    goto LABEL_103;
  if (!*(_DWORD *)(v10 + 8596))
  {
    v55 = 1;
LABEL_103:
    if (v54 >= 1)
      goto LABEL_104;
    v68 = v96;
    goto LABEL_125;
  }
  v55 = 0;
  if (v52 != 2 || v54 != 2)
    goto LABEL_103;
  v55 = *(_DWORD *)(v10 + 4 * *(int *)(v10 + 6688) + 6720) == 1;
LABEL_104:
  *(_QWORD *)&v93 = &v58[2 * v56 + 4];
  v61 = 0;
  v62 = v10 + 2432;
  v63 = -1;
  do
  {
    if (v61)
      v64 = v55;
    else
      v64 = 1;
    if (v64 == 1)
    {
      v65 = *(_DWORD *)(v98 + 2400);
      if (v63 + v65 + 1 < 1)
      {
        v66 = 0;
      }
      else if (v99 == 2)
      {
        v66 = 2 * (*(_DWORD *)(v62 + 4 * (v65 + v63)) != 0);
      }
      else if (v61 && *(_DWORD *)(v98 + 8596))
      {
        v66 = 1;
      }
      else
      {
        v66 = 2;
      }
      v60 = silk_decode_frame(v62 - 2432, a5, (&v101)[v61] + 4, (int *)&v100, v99, v66);
      v14 = (v60 + v14);
    }
    else
    {
      bzero((&v101)[v61] + 4, 2 * (int)v100);
    }
    ++*(_DWORD *)(v62 - 32);
    ++v61;
    v67 = a2[1];
    --v63;
    v62 += 4288;
  }
  while (v61 < v67);
  v68 = v96;
  if ((_DWORD)v67 == 2)
  {
    v10 = v98;
    v52 = v99;
    if (*a2 == 2)
    {
      v60 = (uint64_t)silk_stereo_MS_to_LR((unsigned __int16 *)(v98 + 8576), v94.i64[0], (_DWORD *)v93, (int *)v103, *(_DWORD *)(v98 + 2316), v100);
      v69 = v100;
      goto LABEL_126;
    }
  }
  else
  {
    v10 = v98;
    v52 = v99;
  }
LABEL_125:
  v70 = v94.i64[0];
  *(_DWORD *)v94.i64[0] = *(_DWORD *)(v10 + 8580);
  v69 = v100;
  *(_DWORD *)(v10 + 8580) = *(_DWORD *)(v70 + 2 * (int)v100);
LABEL_126:
  *v97 = a2[2] * v69 / (1000 * *(__int16 *)(v10 + 2316));
  v71 = *a2;
  MEMORY[0x1E0C80A78](v60);
  v74 = v68;
  if (v71 == 2)
    v75 = (__int16 *)((char *)&v93 - v73);
  else
    v75 = v68;
  bzero((char *)&v93 - v73, v72);
  v76 = a2[1];
  if (v71 >= v76)
    v77 = a2[1];
  else
    v77 = v71;
  if (v77 >= 1)
  {
    v78 = 0;
    do
    {
      v79 = silk_resampler((_DWORD *)(v10 + 4288 * v78 + 2448), v75, (&v101)[v78] + 2, v100);
      v71 = *a2;
      if (*a2 == 2)
      {
        v80 = *v97;
        if ((int)v80 >= 1)
        {
          v81 = v75;
          v82 = v74;
          do
          {
            v83 = *v81++;
            *v82 = v83;
            v82 += 2;
            --v80;
          }
          while (v80);
        }
      }
      v14 = (v79 + v14);
      ++v78;
      v76 = a2[1];
      if (v71 >= v76)
        v84 = a2[1];
      else
        v84 = v71;
      ++v74;
    }
    while (v78 < v84);
    v52 = v99;
  }
  if (v71 != 2 || v76 != 1)
    goto LABEL_153;
  if (!v95)
  {
    v88 = *v97;
    if ((int)v88 >= 1)
    {
      v89 = v96 + 1;
      do
      {
        *v89 = *(v89 - 1);
        v89 += 2;
        --v88;
      }
      while (v88);
    }
LABEL_153:
    result = v14;
    goto LABEL_154;
  }
  result = silk_resampler((_DWORD *)(v10 + 6736), v75, (char *)(v94.i64[0] + 2), v100) + v14;
  v85 = *v97;
  if ((int)v85 >= 1)
  {
    v86 = v96 + 1;
    do
    {
      v87 = *v75++;
      *v86 = v87;
      v86 += 2;
      --v85;
    }
    while (v85);
  }
LABEL_154:
  if (*(_DWORD *)(v10 + 4188) == 2)
    v90 = dword_1DECD7204[(*(_DWORD *)(v10 + 2316) - 8) >> 2] * *(_DWORD *)(v10 + 2308);
  else
    v90 = 0;
  a2[5] = v90;
  if (v52 == 1)
  {
    v91 = *(unsigned int *)(v10 + 8592);
    if ((int)v91 >= 1)
    {
      v92 = (_BYTE *)(v10 + 2312);
      do
      {
        *v92 = 10;
        v92 += 4288;
        --v91;
      }
      while (v91);
    }
  }
  else
  {
    *(_DWORD *)(v10 + 8596) = HIDWORD(v100);
  }
  return result;
}

unint64_t silk_LPC_inverse_pred_gain(__int16 *a1, int a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  _BYTE v7[128];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return LPC_inverse_pred_gain_QA((uint64_t)v7, a2);
  v2 = 0;
  v3 = &v7[64 * (unint64_t)(a2 & 1)];
  v4 = a2;
  do
  {
    v5 = *a1++;
    v2 += v5;
    *v3++ = v5 << 12;
    --v4;
  }
  while (v4);
  if (v2 <= 4095)
    return LPC_inverse_pred_gain_QA((uint64_t)v7, a2);
  else
    return 0;
}

unint64_t LPC_inverse_pred_gain_QA(uint64_t a1, int a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = (int *)(a1 + ((unint64_t)(a2 & 1) << 6));
  v3 = 0x40000000;
  if (a2 >= 2)
  {
    v4 = a2;
    v5 = ((unint64_t)a2 << 32) - 0x200000000;
    v6 = a2 - 1;
    v7 = 0x40000000;
    while (1)
    {
      v8 = v4 - 1;
      v9 = v2[(v4 - 1)];
      if ((v9 - 16773023) < 0xFE0020C3)
        return 0;
      v10 = (_DWORD *)(a1 + ((unint64_t)(v6 & 1) << 6));
      v11 = 0x40000000 - ((unint64_t)-((v9 << 7) * -128 * v9) >> 32);
      v12 = (unint64_t)(v11 * (uint64_t)v7) >> 30;
      if (v11 >= 0)
        v13 = 0x40000000 - ((unint64_t)-((v9 << 7) * -128 * v9) >> 32);
      else
        v13 = ((unint64_t)-((v9 << 7) * -128 * v9) >> 32) - 0x40000000;
      v14 = __clz(v13);
      v15 = v11 << (v14 - 1);
      v16 = 0x1FFFFFFF / (v15 >> 16);
      v17 = (__int16)v16 * (v15 >> 16) + (((__int16)v16 * (unsigned __int16)v15) >> 16);
      v7 = v12 & 0xFFFFFFFC;
      v18 = (v16 << 16)
          - 8 * v17 * (((v16 >> 15) + 1) >> 1)
          + ((-8 * v17) >> 16) * (__int16)v16
          + ((((-8 * v17) & 0xFFF8) * (__int16)v16) >> 16);
      v19 = v6;
      v20 = v2;
      v21 = v5;
      do
      {
        v22 = *v20++;
        v23 = (v22 - (int)((((unint64_t)(*(int *)((char *)v2 + (v21 >> 30)) * -128 * v9) >> 30) + 1) >> 1)) * v18;
        v24 = ((v23 >> (31 - v14)) + 1) >> 1;
        v25 = (v23 & 1) + (v23 >> 1);
        if (v14 != 31)
          LODWORD(v25) = v24;
        *v10++ = v25;
        v21 -= 0x100000000;
        --v19;
      }
      while (v19);
      v5 -= 0x100000000;
      --v6;
      v2 = (int *)(a1 + ((unint64_t)(v8 & 1) << 6));
      if (v4-- < 3)
      {
        v3 = v7;
        v2 = (int *)(a1 + ((unint64_t)(v8 & 1) << 6));
        break;
      }
    }
  }
  v27 = *v2;
  if ((v27 - 16773023) < 0xFE0020C3)
    return 0;
  return ((unint64_t)((int)((0x4000000000000000 - (-((v27 << 7) * -128 * v27) & 0x7FFFFFFF00000000uLL)) >> 32)
                           * (uint64_t)v3) >> 30) & 0xFFFFFFFC;
}

__int16 *silk_bwexpander(__int16 *result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  __int16 *v5;

  if (a2 >= 2)
  {
    v3 = a3 - 0x10000;
    v4 = (a2 - 1);
    v5 = result;
    do
    {
      *v5 = (((a3 * *v5) >> 15) + 1) >> 1;
      ++v5;
      a3 += (((a3 * v3) >> 15) + 1) >> 1;
      --v4;
    }
    while (v4);
  }
  result[a2 - 1] = (((a3 * result[a2 - 1]) >> 15) + 1) >> 1;
  return result;
}

uint64_t silk_decode_frame(uint64_t a1, uint64_t a2, char *a3, int *a4, int a5, int a6)
{
  int v12;
  uint64_t v13;
  __int8 *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int32x4_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v12 = *(_DWORD *)(a1 + 2328);
  memset(&v20, 0, 128);
  v21 = 0;
  MEMORY[0x1E0C80A78](a1);
  v14 = &v20.i8[-4 * v13];
  bzero(v14, v15);
  v22 = 0;
  if (a5 == 2)
  {
    v16 = *(int *)(a1 + 2400);
    if (*(_DWORD *)(a1 + 4 * v16 + 2432) == 1)
      goto LABEL_5;
LABEL_6:
    silk_PLC(a1, &v20, (uint64_t)a3, 1);
    goto LABEL_7;
  }
  if (a5)
    goto LABEL_6;
  LODWORD(v16) = *(_DWORD *)(a1 + 2400);
LABEL_5:
  silk_decode_indices(a1, a2, v16, a5, a6);
  silk_decode_pulses(a2, (uint64_t)v14, *(char *)(a1 + 2789), *(char *)(a1 + 2790), *(_DWORD *)(a1 + 2328));
  silk_decode_parameters(a1, (uint64_t)&v20, a6);
  silk_decode_core(a1, (uint64_t)&v20, a3, (uint64_t)v14);
  silk_PLC(a1, &v20, (uint64_t)a3, 0);
  *(_DWORD *)(a1 + 4184) = 0;
  *(_DWORD *)(a1 + 4188) = *(char *)(a1 + 2789);
  *(_DWORD *)(a1 + 2376) = 0;
LABEL_7:
  v17 = *(int *)(a1 + 2328);
  v18 = *(_DWORD *)(a1 + 2336) - v17;
  memmove((void *)(a1 + 1348), (const void *)(a1 + 1348 + 2 * v17), 2 * v18);
  memcpy((void *)(a1 + 1348 + 2 * v18), a3, 2 * *(int *)(a1 + 2328));
  silk_PLC_glue_frames((unsigned int *)a1, (uint64_t)a3, v12);
  silk_CNG((char *)a1, (uint64_t)&v20, (uint64_t)a3, v12);
  *(_DWORD *)(a1 + 2308) = v20.i32[*(int *)(a1 + 2324) - 1];
  *a4 = v12;
  return 0;
}

uint64_t silk_stereo_decode_pred(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  int *v9;
  uint64_t v10;
  __int16 *v11;
  int v12;
  uint64_t result;
  _DWORD v14[6];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = ec_dec_icdf(a1, silk_stereo_pred_joint_iCDF, 8);
  v14[2] = v4 / 5;
  v14[5] = v4 % 5;
  v14[0] = ec_dec_icdf(a1, silk_uniform3_iCDF, 8);
  v14[1] = ec_dec_icdf(a1, silk_uniform5_iCDF, 8);
  v14[3] = ec_dec_icdf(a1, silk_uniform3_iCDF, 8);
  v5 = ec_dec_icdf(a1, silk_uniform5_iCDF, 8);
  v6 = 0;
  v14[4] = v5;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = &v14[3 * v6];
    v10 = *v9 + 3 * v9[2];
    *v9 = v10;
    v11 = (__int16 *)((char *)&silk_stereo_pred_quant_Q13 + 2 * v10);
    v12 = *v11;
    LODWORD(v11) = v11[1] - v12;
    result = (6554 * ((int)v11 >> 16));
    a2[v6] = v12
           + (result + ((6554 * (unsigned __int16)v11) >> 16)) * (__int16)((2 * *((_WORD *)v9 + 2)) | 1);
    v6 = 1;
    v7 = 0;
  }
  while ((v8 & 1) != 0);
  *a2 -= a2[1];
  return result;
}

uint64_t silk_stereo_decode_mid_only(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = ec_dec_icdf(a1, silk_stereo_only_code_mid_iCDF, 8);
  *a2 = result;
  return result;
}

uint64_t silk_decode_signs(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14[2];

  v14[1] = 0;
  if (a3 >= 8)
  {
    v8 = result;
    v9 = 0;
    v10 = (char *)&silk_sign_iCDF + 8 * (((a5 << 16) + (a4 << 17)) >> 16) - (((a5 << 16) + (a4 << 17)) >> 16);
    v11 = (a3 + 8) >> 4;
    do
    {
      if (*(int *)(a6 + 4 * v9) >= 1)
      {
        v12 = 0;
        v13 = *(_DWORD *)(a6 + 4 * v9) & 0x1F;
        if (v13 >= 6)
          v13 = 6;
        v14[0] = v10[v13];
        do
        {
          if (*(int *)(a2 + v12) >= 1)
          {
            result = ec_dec_icdf(v8, v14, 8);
            *(_DWORD *)(a2 + v12) *= 2 * (_DWORD)result - 1;
          }
          v12 += 4;
        }
        while (v12 != 64);
      }
      a2 += 64;
      ++v9;
    }
    while (v9 != v11);
  }
  return result;
}

uint64_t silk_log2lin(unsigned int a1)
{
  unsigned int v2;
  int v3;
  int v4;

  if ((a1 & 0x80000000) != 0)
    return 0;
  if (a1 > 0xF7E)
    return 0x7FFFFFFFLL;
  v2 = 1 << (a1 >> 7);
  v3 = (a1 & 0x7F) + ((int)(-174 * (a1 & 0x7F) * (128 - (a1 & 0x7F))) >> 16);
  v4 = v3 << (a1 >> 7) >> 7;
  if (a1 > 0x7FF)
    v4 = v3 * (v2 >> 7);
  return v4 + v2;
}

unsigned int *silk_resampler_private_up2_HQ(unsigned int *result, uint64_t a2, __int16 *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  __int16 *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;

  if ((int)a4 >= 1)
  {
    v4 = *result;
    v5 = result[1];
    v6 = (__int16 *)(a2 + 2);
    v8 = result[2];
    v7 = result[3];
    v10 = result[4];
    v9 = result[5];
    a4 = a4;
    do
    {
      v11 = *a3++;
      v12 = 1746 * ((int)((v11 << 10) - v4) >> 16)
          + ((1746 * (unsigned __int16)(((_WORD)v11 << 10) - v4)) >> 16);
      v13 = v12 + v4;
      v4 = v12 + (v11 << 10);
      v14 = 14986 * ((int)(v13 - v5) >> 16) + ((14986 * (unsigned __int16)(v13 - v5)) >> 16);
      v15 = v14 + v5;
      v5 = v14 + v13;
      v16 = v15 - v8;
      v17 = 6854 * ((int)((v11 << 10) - v7) >> 16)
          + ((6854 * (unsigned __int16)(((_WORD)v11 << 10) - v7)) >> 16);
      v18 = v17 + v7;
      v19 = -26453 * (v16 >> 16) + ((-26453 * (unsigned __int16)v16) >> 16) + v15;
      v7 = v17 + (v11 << 10);
      v8 = v19 + v16;
      v20 = 25769 * ((int)(v18 - v10) >> 16) + ((25769 * (unsigned __int16)(v18 - v10)) >> 16);
      v21 = ((v19 >> 9) + 1) >> 1;
      if (v21 <= -32768)
        LOWORD(v21) = 0x8000;
      v22 = v20 + v10;
      v10 = v20 + v18;
      v23 = v22 - v9;
      v24 = v19 <= 33553919;
      v25 = -9994 * (v23 >> 16) + ((-9994 * (unsigned __int16)v23) >> 16) + v22;
      if (v24)
        v26 = v21;
      else
        v26 = 0x7FFF;
      v9 = v25 + v23;
      *(v6 - 1) = v26;
      if (((v25 >> 9) + 1) >> 1 <= -32768)
        LOWORD(v27) = 0x8000;
      else
        v27 = ((v25 >> 9) + 1) >> 1;
      if (v25 <= 33553919)
        v28 = v27;
      else
        v28 = 0x7FFF;
      *v6 = v28;
      v6 += 2;
      --a4;
    }
    while (a4);
    *result = v4;
    result[1] = v5;
    result[2] = v8;
    result[3] = v7;
    result[4] = v10;
    result[5] = v9;
  }
  return result;
}

int *silk_bwexpander_32(int *result, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int *v6;

  if (a2 >= 2)
  {
    v4 = a3 - 0x10000;
    v5 = (a2 - 1);
    v6 = result;
    do
    {
      *v6 = (__int16)*v6 * (a3 >> 16) + (((__int16)*v6 * (unsigned __int16)a3) >> 16) + (((*v6 >> 15) + 1) >> 1) * a3;
      ++v6;
      a3 += (((a3 * v4) >> 15) + 1) >> 1;
      --v5;
    }
    while (v5);
  }
  v3 = a2 - 1;
  result[v3] = (__int16)result[v3] * (a3 >> 16)
             + (((__int16)result[v3] * (unsigned __int16)a3) >> 16)
             + (((result[v3] >> 15) + 1) >> 1) * a3;
  return result;
}

void *silk_resampler_private_down_FIR(uint64_t a1, _WORD *a2, __int16 *a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 *i;
  int32x4_t v17;
  int32x4_t v18;
  int v19;
  int v20;
  BOOL v21;
  int8x16_t v22;
  int v23;
  char *v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int8x16_t v47;
  char *v48;
  int v49;
  int16x8_t *v50;
  int32x4_t v51;
  uint64_t v52;
  int32x4_t v53;
  int16x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int v63;
  int v64;
  int8x16_t v65;
  int j;
  int32x4_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int v80;
  int v81;
  size_t v82;
  void *v84[2];

  v84[1] = *(void **)MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 268);
  v9 = *(int *)(a1 + 276);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v84 - v10;
  bzero((char *)v84 - v10, v12);
  v84[0] = (void *)(a1 + 24);
  memcpy(v11, (const void *)(a1 + 24), 4 * v9);
  v13 = *(_QWORD *)(a1 + 296);
  v14 = v13 + 4;
  v15 = *(_DWORD *)(a1 + 272);
  for (i = (__int16 *)v13; ; i = *(__int16 **)(a1 + 296))
  {
    if (a4 < v8)
      v8 = a4;
    silk_resampler_private_AR2((int *)a1, (int *)&v11[4 * (int)v9], a3, i, v8);
    v19 = v8 << 16;
    v20 = *(_DWORD *)(a1 + 276);
    if (v20 == 18)
    {
      if (v19 >= 1)
      {
        v45 = 0;
        v46 = *(_DWORD *)(a1 + 280);
        v47.i64[0] = 0xFFFF0000FFFFLL;
        v47.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v48 = &v11[4 * (v45 >> 16)];
          v49 = (unsigned __int16)v45 * (__int16)v46;
          v50 = (int16x8_t *)(v14 + 18 * (v49 >> 16));
          v51 = *((int32x4_t *)v48 + 1);
          v52 = v14 + 18 * (v46 + ~(v49 >> 16));
          v53 = *(int32x4_t *)(v48 + 56);
          v17.i64[0] = *((_QWORD *)v48 + 6);
          v54.i16[0] = v50[1].i16[0];
          v54.i16[1] = *(_WORD *)v52;
          v54.i32[1] = *(_DWORD *)(v52 + 2);
          v55 = vmovl_s16(v54);
          v56 = vmovl_high_s16(*v50);
          v57 = vmovl_s16(*(int16x4_t *)v50->i8);
          v58 = vmovl_s16(*(int16x4_t *)(v52 + 6));
          v18.i32[0] = *((_DWORD *)v48 + 8);
          v59 = (int8x16_t)vrev64q_s32((int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v18, 4uLL));
          v60 = vuzp1q_s32(v53, v17);
          v60.i32[1] = v17.i32[1];
          v60.i32[3] = *((_DWORD *)v48 + 11);
          v61 = (int32x4_t)vextq_s8(v59, v59, 8uLL);
          v62 = vmulq_s32(vshrq_n_s32(v61, 0x10uLL), v55);
          v17 = vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v61, v47), v55);
          v18 = vmlaq_s32(vmulq_s32(vshrq_n_s32(v60, 0x10uLL), v58), vshrq_n_s32(v51, 0x10uLL), v56);
          v63 = vaddvq_s32(vaddq_s32(vaddq_s32(vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8(*(int8x16_t *)v48, v47), v57), 0x10uLL), v17, 0x10uLL), vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v51, v47), v56), 0x10uLL), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v60, v47), v58), 0x10uLL)), vaddq_s32(vmlaq_s32(v62, vshrq_n_s32(*(int32x4_t *)v48, 0x10uLL), v57), v18)))+ (((unsigned __int16)*((_DWORD *)v48 + 10) * *(__int16 *)(v52 + 14)) >> 16)+ (*((int *)v48 + 10) >> 16) * *(__int16 *)(v52 + 14)+ (((unsigned __int16)*((_DWORD *)v48 + 9) * *(__int16 *)(v52 + 16)) >> 16)+ (*((int *)v48 + 9) >> 16) * *(__int16 *)(v52 + 16);
          if (v63 <= 2097119)
          {
            v64 = ((v63 >> 5) + 1) >> 1;
            if (v64 <= -32768)
              LOWORD(v64) = 0x8000;
          }
          else
          {
            LOWORD(v64) = 0x7FFF;
          }
          *a2++ = v64;
          v45 += v15;
        }
        while (v45 < v19);
      }
    }
    else if (v20 == 24)
    {
      v65.i64[0] = 0xFFFF0000FFFFLL;
      v65.i64[1] = 0xFFFF0000FFFFLL;
      if (v19 >= 1)
      {
        for (j = 0; j < v19; j += v15)
        {
          v67 = (int32x4_t *)&v11[4 * (j >> 16)];
          v68 = (int8x16_t)vrev64q_s32(v67[5]);
          v69 = (int8x16_t)vrev64q_s32(v67[4]);
          v70 = vaddq_s32((int32x4_t)vextq_s8(v69, v69, 8uLL), v67[1]);
          v71 = vaddq_s32((int32x4_t)vextq_s8(v68, v68, 8uLL), *v67);
          v72 = *(int16x8_t *)(v13 + 4);
          v73 = vmovl_s16(*(int16x4_t *)v72.i8);
          v74 = vmovl_high_s16(v72);
          v75 = vmulq_s32(vshrq_n_s32(v70, 0x10uLL), v74);
          v76 = vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v70, v65), v74);
          v77 = (int8x16_t)vrev64q_s32(v67[3]);
          v78 = vaddq_s32((int32x4_t)vextq_s8(v77, v77, 8uLL), v67[2]);
          v79 = vmovl_s16(*(int16x4_t *)(v13 + 20));
          v80 = vaddvq_s32(vaddq_s32(vaddq_s32(vsraq_n_s32(vmulq_s32(vshrq_n_s32(v78, 0x10uLL), v79), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v78, v65), v79), 0x10uLL), vmlaq_s32(v75, vshrq_n_s32(v71, 0x10uLL), v73)), vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v71, v65), v73), 0x10uLL), v76, 0x10uLL)));
          if (v80 <= 2097119)
          {
            v81 = ((v80 >> 5) + 1) >> 1;
            if (v81 <= -32768)
              LOWORD(v81) = 0x8000;
          }
          else
          {
            LOWORD(v81) = 0x7FFF;
          }
          *a2++ = v81;
        }
      }
    }
    else
    {
      v21 = v20 != 36 || v19 < 1;
      v22.i64[0] = 0xFFFF0000FFFFLL;
      v22.i64[1] = 0xFFFF0000FFFFLL;
      if (!v21)
      {
        v23 = 0;
        do
        {
          v24 = &v11[4 * (v23 >> 16)];
          v25.i64[0] = *((_QWORD *)v24 + 6);
          v25.i32[2] = *((_DWORD *)v24 + 14);
          v25.i32[3] = *((_DWORD *)v24 + 20);
          v26 = (int8x16_t)vrev64q_s32(*((int32x4_t *)v24 + 8));
          v27 = (int8x16_t)vrev64q_s32(*((int32x4_t *)v24 + 7));
          v28 = (int8x16_t)vrev64q_s32(*((int32x4_t *)v24 + 6));
          *(int32x2_t *)v29.i8 = vrev64_s32(*(int32x2_t *)(v24 + 88));
          v29.i32[2] = *((_DWORD *)v24 + 21);
          v29.i32[3] = *((_DWORD *)v24 + 15);
          v30 = vaddq_s32(v25, v29);
          v31 = vaddq_s32(*((int32x4_t *)v24 + 1), (int32x4_t)vextq_s8(v27, v27, 8uLL));
          v32 = vaddq_s32(*((int32x4_t *)v24 + 2), (int32x4_t)vextq_s8(v28, v28, 8uLL));
          v33 = vaddq_s32(*(int32x4_t *)v24, (int32x4_t)vextq_s8(v26, v26, 8uLL));
          v34 = *(int16x8_t *)(v13 + 20);
          v35 = *(int16x8_t *)(v13 + 4);
          v36 = vmovl_s16(*(int16x4_t *)v35.i8);
          v37 = vmovl_s16(*(int16x4_t *)v34.i8);
          v38 = vmovl_high_s16(v35);
          v39 = vmovl_high_s16(v34);
          v40 = *(__int16 *)(v13 + 36);
          v41 = ((*((_DWORD *)v24 + 19) + *((_DWORD *)v24 + 16)) >> 16) * v40;
          v42 = (unsigned __int16)(*((_WORD *)v24 + 38) + *((_WORD *)v24 + 32)) * v40;
          LODWORD(v24) = *((_DWORD *)v24 + 18) + *((_DWORD *)v24 + 17);
          v43 = vaddvq_s32(vaddq_s32(vaddq_s32(vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v33, v22), v36), 0x10uLL), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v32, v22), v37), 0x10uLL), vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v31, v22), v38), 0x10uLL), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v30, v22), v39), 0x10uLL)), vaddq_s32(vmlaq_s32(vmulq_s32(vshrq_n_s32(v32, 0x10uLL), v37), vshrq_n_s32(v33, 0x10uLL), v36), vmlaq_s32(vmulq_s32(vshrq_n_s32(v30, 0x10uLL), v39), vshrq_n_s32(v31, 0x10uLL), v38))))+ (v42 >> 16)+ v41+ (((unsigned __int16)v24 * *(__int16 *)(v13 + 38)) >> 16)+ ((int)v24 >> 16) * *(__int16 *)(v13 + 38);
          if (v43 <= 2097119)
          {
            v44 = ((v43 >> 5) + 1) >> 1;
            if (v44 <= -32768)
              LOWORD(v44) = 0x8000;
          }
          else
          {
            LOWORD(v44) = 0x7FFF;
          }
          *a2++ = v44;
          v23 += v15;
        }
        while (v23 < v19);
      }
    }
    a4 -= v8;
    v82 = 4 * v20;
    if (a4 <= 1)
      break;
    a3 += v8;
    memcpy(v11, &v11[4 * v8], v82);
    v8 = *(_DWORD *)(a1 + 268);
    LODWORD(v9) = *(_DWORD *)(a1 + 276);
  }
  return memcpy(v84[0], &v11[4 * v8], v82);
}

_WORD *silk_NLSF_VQ_weights_laroia(_WORD *result, __int16 *a2, int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  __int16 *v10;
  _WORD *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v3 = *a2;
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = *a2;
  v5 = 0x20000 / v4;
  v6 = a2[1] - v3;
  if (v6 <= 1)
    v6 = 1;
  v7 = 0x20000u / v6;
  v8 = 0x20000u / v6 + v5;
  if (v8 >= 0x7FFF)
    LOWORD(v8) = 0x7FFF;
  *result = v8;
  v9 = (a3 - 1);
  if (a3 <= 2)
  {
    v9 = (int)v9;
  }
  else
  {
    v10 = a2 + 2;
    v11 = result + 2;
    v12 = 1;
    do
    {
      v13 = *v10 - *(v10 - 1);
      if (v13 <= 1)
        v13 = 1;
      v14 = 0x20000u / v13;
      v15 = v14 + v7;
      if (v15 >= 0x7FFF)
        LOWORD(v15) = 0x7FFF;
      *(v11 - 1) = v15;
      v12 += 2;
      v16 = v10[1] - *v10;
      if (v16 <= 1)
        v16 = 1;
      v7 = 0x20000u / v16;
      v17 = v7 + v14;
      if (v17 >= 0x7FFF)
        LOWORD(v17) = 0x7FFF;
      *v11 = v17;
      v11 += 2;
      v10 += 2;
    }
    while (v12 < v9);
  }
  v18 = 0x20000u / (0x8000 - a2[v9]) + v7;
  if (v18 >= 0x7FFF)
    LOWORD(v18) = 0x7FFF;
  result[v9] = v18;
  return result;
}

uint64_t silk_CNG_Reset(uint64_t result)
{
  uint64_t v1;
  int v2;
  _WORD *v3;
  int v4;

  v1 = *(unsigned int *)(result + 2340);
  if ((int)v1 >= 1)
  {
    v2 = 0x7FFF / ((int)v1 + 1);
    v3 = (_WORD *)(result + 4076);
    v4 = v2;
    do
    {
      *v3++ = v4;
      v4 += v2;
      --v1;
    }
    while (v1);
  }
  *(_QWORD *)(result + 4172) = 0x30788000000000;
  return result;
}

void silk_CNG(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int *v21;
  int v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  int v26;
  unsigned int v27;
  signed int v28;
  unsigned int v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  char *v76;
  __int128 v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  _OWORD *v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  __int16 v100[5];
  __int16 v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  __int16 v110;
  __int16 v111;
  uint64_t v112;

  v99 = a3;
  v6 = a1;
  v112 = *MEMORY[0x1E0C80C00];
  v7 = a1 + 2796;
  v8 = *((_DWORD *)a1 + 579);
  if (v8 != *((_DWORD *)a1 + 1045))
  {
    v9 = *((unsigned int *)a1 + 585);
    if ((int)v9 >= 1)
    {
      v10 = 0x7FFF / ((int)v9 + 1);
      v11 = a1 + 4076;
      v12 = v10;
      do
      {
        *v11++ = v12;
        v12 += v10;
        --v9;
      }
      while (v9);
    }
    *(_QWORD *)(a1 + 4172) = 0x30788000000000;
    *((_DWORD *)a1 + 1045) = v8;
  }
  if (*((_DWORD *)a1 + 1046))
    goto LABEL_22;
  if (!*((_DWORD *)a1 + 1047))
  {
    v13 = *((unsigned int *)a1 + 585);
    if ((int)v13 >= 1)
    {
      v14 = (__int16 *)(a1 + 2344);
      do
      {
        v14[866] += 16348 * ((*v14 - v14[866]) >> 16)
                  + ((16348 * (unsigned __int16)(*v14 - v14[866])) >> 16);
        ++v14;
        --v13;
      }
      while (v13);
    }
    v15 = *((unsigned int *)a1 + 581);
    if ((int)v15 < 1)
    {
      v18 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        if (*(_DWORD *)(a2 + 16 + 4 * v16) > v17)
        {
          v18 = v16;
          v17 = *(_DWORD *)(a2 + 16 + 4 * v16);
        }
        ++v16;
      }
      while (v15 != v16);
    }
    memmove(&v7[4 * *((int *)a1 + 583)], v7, 4 * *((_DWORD *)a1 + 583) * ((int)v15 - 1));
    a1 = (char *)memcpy(v7, &v6[4 * *((_DWORD *)v6 + 583) * v18 + 4], 4 * *((int *)v6 + 583));
    v19 = *((unsigned int *)v6 + 581);
    if ((int)v19 >= 1)
    {
      v20 = *((_DWORD *)v6 + 1043);
      v21 = (int *)(a2 + 16);
      do
      {
        v22 = *v21++;
        v20 += 4634 * ((v22 - v20) >> 16) + ((4634 * (unsigned __int16)(v22 - v20)) >> 16);
        *((_DWORD *)v6 + 1043) = v20;
        --v19;
      }
      while (v19);
    }
  }
  if (*((_DWORD *)v6 + 1046))
  {
LABEL_22:
    MEMORY[0x1E0C80A78](a1);
    v24 = (char *)&v80 - v23;
    bzero((char *)&v80 - v23, v25);
    v26 = *((_DWORD *)v6 + 1043);
    v27 = 255;
    do
    {
      v28 = v27;
      v27 >>= 1;
    }
    while (v28 > a4);
    v29 = *((_DWORD *)v6 + 1044);
    if (a4 >= 1)
    {
      v30 = (int *)(v24 + 64);
      v31 = (__int16)(v26 >> 4);
      v32 = v26 >> 19;
      v33 = a4;
      v34 = (v32 + 1) >> 1;
      do
      {
        v29 = 196314165 * v29 + 907633515;
        v35 = *(_DWORD *)&v7[4 * (v28 & HIBYTE(v29))];
        v36 = v35 * v34 + (v35 >> 16) * v31 + (((unsigned __int16)v35 * v31) >> 16);
        if (v36 <= -32768)
          v36 = -32768;
        if (v36 >= 0x7FFF)
          v36 = 0x7FFF;
        *v30++ = v36;
        --v33;
      }
      while (v33);
    }
    *((_DWORD *)v6 + 1044) = v29;
    silk_NLSF2A(v100, (__int16 *)v6 + 2038, *((_DWORD *)v6 + 585));
    v81 = v6 + 4108;
    v37 = *(_OWORD *)(v6 + 4124);
    *(_OWORD *)v24 = *(_OWORD *)(v6 + 4108);
    *((_OWORD *)v24 + 1) = v37;
    v38 = *(_OWORD *)(v6 + 4156);
    *((_OWORD *)v24 + 2) = *(_OWORD *)(v6 + 4140);
    *((_OWORD *)v24 + 3) = v38;
    v82 = a4;
    if (a4 >= 1)
    {
      v39 = 0;
      v40 = *((_DWORD *)v6 + 585);
      v41 = v100[0];
      v97 = v100[1];
      v98 = v40 >> 1;
      v42 = v100[2];
      v96 = v100[3];
      v43 = v100[4];
      v44 = v101;
      v45 = v102;
      v46 = v103;
      v47 = v104;
      v48 = v105;
      v91 = v106;
      v89 = v107;
      v90 = v103;
      v86 = v109;
      v87 = v108;
      v84 = v111;
      v85 = v110;
      v49 = v82;
      v50 = *((_DWORD *)v24 + 15);
      v51 = *((_DWORD *)v24 + 13);
      v52 = *((_DWORD *)v24 + 11);
      v53 = *((_DWORD *)v24 + 9);
      v54 = *((_DWORD *)v24 + 7);
      v92 = v105;
      v93 = v104;
      v88 = v101;
      v83 = v82;
      do
      {
        v55 = v50 >> 16;
        v56 = (unsigned __int16)v50 * v41;
        v57 = (int *)&v24[4 * v39];
        v58 = v57[14];
        v59 = (unsigned __int16)v51 * v42;
        v60 = v98
            + v55 * v41
            + (v56 >> 16)
            + (v58 >> 16) * v97
            + (((unsigned __int16)v58 * v97) >> 16)
            + (v51 >> 16) * v42;
        v61 = v57[12];
        v62 = (unsigned __int16)v52 * v43;
        v63 = v60 + (v59 >> 16) + (v61 >> 16) * v96 + (((unsigned __int16)v61 * v96) >> 16) + (v52 >> 16) * v43;
        v64 = v57[10];
        v65 = v63 + (v62 >> 16) + (v64 >> 16) * v44 + (((unsigned __int16)v64 * v44) >> 16);
        v66 = (unsigned __int16)v53 * v45;
        v67 = v65 + (v53 >> 16) * v45;
        v68 = v57[8];
        v69 = v67
            + (v66 >> 16)
            + (v68 >> 16) * v46
            + (((unsigned __int16)v68 * v46) >> 16)
            + (v54 >> 16) * v47
            + (((unsigned __int16)v54 * v47) >> 16)
            + (v57[6] >> 16) * v48
            + (((unsigned __int16)v57[6] * v48) >> 16);
        if (v40 == 16)
        {
          v70 = v57[4];
          v71 = v57[5] >> 16;
          v72 = (unsigned __int16)v57[5] * v91;
          v94 = (unsigned __int16)v70 * v89;
          v95 = v70 >> 16;
          v73 = v39 + 1;
          v74 = v69 + v71 * v91 + (v72 >> 16) + (v70 >> 16) * v89;
          v47 = v93;
          v49 = v83;
          v44 = v88;
          v46 = v90;
          v48 = v92;
          v69 = v74
              + (v94 >> 16)
              + (v57[3] >> 16) * v87
              + (((unsigned __int16)v57[3] * v87) >> 16)
              + (v57[2] >> 16) * v86
              + (((unsigned __int16)v57[2] * v86) >> 16)
              + (*(int *)&v24[4 * v39 + 4] >> 16) * v85
              + (((unsigned __int16)*(_DWORD *)&v24[4 * v39 + 4] * v85) >> 16)
              + (*v57 >> 16) * v84
              + (((unsigned __int16)*v57 * v84) >> 16);
        }
        else
        {
          v73 = v39 + 1;
        }
        v50 = *(_DWORD *)&v24[4 * v39 + 64] + 16 * v69;
        *(_DWORD *)&v24[4 * v39 + 64] = v50;
        v75 = *(__int16 *)(v99 + 2 * v39) + (((v69 >> 5) + 1) >> 1);
        if (v75 <= -32768)
          v75 = -32768;
        if (v75 >= 0x7FFF)
          LOWORD(v75) = 0x7FFF;
        *(_WORD *)(v99 + 2 * v39) = v75;
        v54 = v68;
        v53 = v64;
        v52 = v61;
        v51 = v58;
        v39 = v73;
      }
      while (v73 != v49);
    }
    v76 = &v24[4 * v82];
    v77 = *((_OWORD *)v76 + 1);
    v78 = v81;
    *v81 = *(_OWORD *)v76;
    v78[1] = v77;
    v79 = *((_OWORD *)v76 + 3);
    v78[2] = *((_OWORD *)v76 + 2);
    v78[3] = v79;
  }
  else
  {
    bzero(v6 + 4108, 4 * *((int *)v6 + 585));
  }
}

unint64_t silk_NLSF2A(__int16 *a1, __int16 *a2, int a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int *v41;
  uint64_t v42;
  __int16 *v43;
  int v44;
  __int16 v45;
  int *v46;
  uint64_t v47;
  __int16 *v48;
  unsigned int v49;
  int i;
  unint64_t result;
  int *v52;
  uint64_t v53;
  __int16 *v54;
  unsigned int v55;
  int v56[16];
  int v57;
  _DWORD v58[8];
  int v59;
  _DWORD v60[8];
  int v61;
  _QWORD v62[9];

  v5 = (unsigned __int8 *)&silk_NLSF2A_ordering10;
  *(_QWORD *)((char *)&v62[7] + 4) = *MEMORY[0x1E0C80C00];
  if (a3 == 16)
    v5 = (unsigned __int8 *)&silk_NLSF2A_ordering16;
  v6 = a3;
  v7 = (a3 >> 1);
  if (a3 <= 0)
  {
    v59 = 0x10000;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *a2++;
      v10 = ((((silk_LSFCosTab_FIX_Q12[(v9 >> 8) + 1] - silk_LSFCosTab_FIX_Q12[v9 >> 8]) * v9
             + (silk_LSFCosTab_FIX_Q12[v9 >> 8] << 8)) >> 3)
           + 1) >> 1;
      v11 = *v5++;
      *(&v61 + v11) = v10;
      --v8;
    }
    while (v8);
    v59 = 0x10000;
    v60[0] = -v61;
    if (a3 > 3)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = *(&v61 + 2 * v13);
        v15 = v13 + 1;
        v60[v13] = 2 * v60[v13 - 2] - ((((unint64_t)(v60[v13 - 1] * (uint64_t)v14) >> 15) + 1) >> 1);
        if (v13 >= 2)
        {
          v16 = v12;
          do
          {
            v60[v16] = v60[v16]
                     + v60[(v16 - 1) - 1]
                     - ((((unint64_t)(v60[v16 - 1] * (uint64_t)v14) >> 15) + 1) >> 1);
            v17 = v16-- + 1;
          }
          while (v17 > 2);
        }
        v60[0] -= v14;
        ++v12;
        v13 = v15;
      }
      while (v15 != v7);
      v18 = 0;
      v57 = 0x10000;
      v58[0] = -LODWORD(v62[0]);
      v19 = 1;
      do
      {
        v20 = v62[v19];
        v21 = v19 + 1;
        v58[v19] = 2 * v58[v19 - 2] - ((((unint64_t)(v58[v19 - 1] * (uint64_t)v20) >> 15) + 1) >> 1);
        if (v19 >= 2)
        {
          v22 = v18;
          do
          {
            v58[v22] = v58[v22]
                     + v58[(v22 - 1) - 1]
                     - ((((unint64_t)(v58[v22 - 1] * (uint64_t)v20) >> 15) + 1) >> 1);
            v23 = v22-- + 1;
          }
          while (v23 > 2);
        }
        v58[0] -= v20;
        ++v18;
        v19 = v21;
      }
      while (v21 != v7);
      goto LABEL_20;
    }
  }
  v57 = 0x10000;
  v58[0] = -LODWORD(v62[0]);
LABEL_20:
  if (a3 >= 2)
  {
    if ((int)v7 <= 1)
      v7 = 1;
    else
      v7 = v7;
    v24 = v59;
    v25 = v57;
    v26 = a3 - 1;
    v27 = v58;
    v28 = v60;
    v29 = v56;
    do
    {
      v31 = *v28++;
      v30 = v31;
      v32 = v24 + v31;
      v33 = *v27++;
      v34 = v33 - v25;
      *v29++ = -(v32 + v34);
      v56[v26--] = v34 - v32;
      v25 = v33;
      v24 = v30;
      --v7;
    }
    while (v7);
  }
  v35 = 0;
  v36 = 0;
  while (a3 >= 1)
  {
    v37 = 0;
    v38 = 0;
    do
    {
      v39 = v56[v37];
      if (v39 < 0)
        v39 = -v39;
      if (v39 > (int)v38)
      {
        v38 = v39;
        v35 = v37;
      }
      ++v37;
    }
    while (v6 != v37);
    if (v38 <= 0xFFFEF)
    {
      v46 = v56;
      v47 = v6;
      v48 = a1;
      do
      {
        v49 = *v46++;
        *v48++ = ((v49 >> 4) + 1) >> 1;
        --v47;
      }
      while (v47);
      break;
    }
    v40 = ((v38 >> 4) + 1) >> 1;
    if (v40 >= 0x27FFE)
      v40 = 163838;
    silk_bwexpander_32(v56, v6, 65470 - (int)((v40 << 14) - 536854528) / ((int)(v40 + v40 * v35) >> 2));
    if (++v36 == 10)
    {
      v41 = v56;
      v42 = v6;
      v43 = a1;
      do
      {
        v44 = ((*v41 >> 4) + 1) >> 1;
        if (*v41 < -1048592)
          LOWORD(v44) = 0x8000;
        if (*v41 <= 1048559)
          v45 = v44;
        else
          v45 = 0x7FFF;
        *v43++ = v45;
        *v41++ = 32 * v45;
        --v42;
      }
      while (v42);
      break;
    }
  }
  for (i = 0; i != 16; ++i)
  {
    result = silk_LPC_inverse_pred_gain(a1, a3);
    if ((int)result > 107373)
      break;
    result = (unint64_t)silk_bwexpander_32(v56, a3, (-2 << i) + 0x10000);
    if (a3 >= 1)
    {
      v52 = v56;
      v53 = v6;
      v54 = a1;
      do
      {
        v55 = *v52++;
        *v54++ = ((v55 >> 4) + 1) >> 1;
        --v53;
      }
      while (v53);
    }
  }
  return result;
}

unsigned __int16 *silk_stereo_MS_to_LR(unsigned __int16 *result, _DWORD *a2, _DWORD *a3, int *a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int16 *v16;
  __int16 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  __int16 *v30;
  int v31;
  int v32;
  int v33;
  __int16 *v34;
  __int16 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;

  *a2 = *((_DWORD *)result + 1);
  *a3 = *((_DWORD *)result + 2);
  v6 = 2 * a6;
  *((_DWORD *)result + 1) = *(_DWORD *)((char *)a2 + v6);
  *((_DWORD *)result + 2) = *(_DWORD *)((char *)a3 + v6);
  v7 = 8 * a5;
  v8 = *a4;
  v9 = a4[1];
  if (a5 >= 1)
  {
    v10 = *result;
    v11 = result[1];
    v12 = (__int16)(0x10000 / v7);
    v13 = (((v12 * (__int16)(v8 - v10)) >> 15) + 1) >> 1;
    v14 = (((v12 * (__int16)(v9 - v11)) >> 15) + 1) >> 1;
    if (v7 <= 1)
      v15 = 1;
    else
      v15 = v7;
    v16 = (__int16 *)(a2 + 1);
    v17 = (__int16 *)a3 + 1;
    v18 = (v14 + v11) << 16;
    v19 = v14 << 16;
    v20 = (v13 + v10) << 16;
    v21 = v13 << 16;
    do
    {
      v22 = *(v16 - 1);
      v23 = (v22 << 10) + ((*v16 + *(v16 - 2)) << 9);
      v24 = (v22 >> 5) * (v18 >> 16)
          + (*v17 << 8)
          + ((((v22 & 0x1F) << 11) * (v18 >> 16)) >> 16)
          + (v23 >> 16) * (v20 >> 16)
          + (((v23 & 0xFE00) * (v20 >> 16)) >> 16);
      if (v24 <= 8388479)
      {
        v25 = ((v24 >> 7) + 1) >> 1;
        if (v25 <= -32768)
          LOWORD(v25) = 0x8000;
      }
      else
      {
        LOWORD(v25) = 0x7FFF;
      }
      ++v16;
      *v17++ = v25;
      v18 += v19;
      v20 += v21;
      --v15;
    }
    while (v15);
  }
  if (v7 < a6)
  {
    v26 = 2 * v7 + 2;
    v27 = (__int16 *)((char *)a3 + v26);
    v28 = (__int16 *)((char *)a2 + v26);
    v29 = a6 - (uint64_t)v7;
    v30 = (__int16 *)((char *)a2 + v26);
    do
    {
      v31 = v30[1];
      ++v30;
      v32 = (*v28 >> 5) * (__int16)v9
          + (*v27 << 8)
          + ((((*v28 & 0x1F) << 11) * (__int16)v9) >> 16)
          + (((*v28 << 10) + ((v31 + *(v28 - 1)) << 9)) >> 16) * (__int16)v8
          + (((((*v28 << 10) + ((v31 + *(v28 - 1)) << 9)) & 0xFE00) * (__int16)v8) >> 16);
      if (v32 <= 8388479)
      {
        v33 = ((v32 >> 7) + 1) >> 1;
        if (v33 <= -32768)
          LOWORD(v33) = 0x8000;
      }
      else
      {
        LOWORD(v33) = 0x7FFF;
      }
      *v27++ = v33;
      v28 = v30;
      --v29;
    }
    while (v29);
  }
  *result = v8;
  result[1] = v9;
  if (a6 >= 1)
  {
    v34 = (__int16 *)a3 + 1;
    v35 = (__int16 *)a2 + 1;
    v36 = a6;
    do
    {
      v37 = *v35;
      v38 = *v34;
      v39 = v37 + v38;
      if (v37 + v38 >= 0x7FFF)
        v39 = 0x7FFF;
      if (v39 <= -32768)
        LOWORD(v39) = 0x8000;
      *v35++ = v39;
      v40 = v37 - v38;
      if (v40 >= 0x7FFF)
        v40 = 0x7FFF;
      if (v40 <= -32768)
        LOWORD(v40) = 0x8000;
      *v34++ = v40;
      --v36;
    }
    while (v36);
  }
  return result;
}

uint64_t silk_decode_pitch(uint64_t result, int a2, int *a3, int a4, int a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;

  v5 = 3;
  if (a5 == 4)
    v5 = 11;
  v6 = (char *)&silk_CB_lags_stage2_10_ms;
  if (a5 == 4)
    v6 = (char *)&silk_CB_lags_stage2;
  v7 = 12;
  if (a5 == 4)
  {
    v7 = 34;
    v8 = (char *)&silk_CB_lags_stage3;
  }
  else
  {
    v8 = (char *)&silk_CB_lags_stage3_10_ms;
  }
  if (a4 == 8)
  {
    v9 = v6;
  }
  else
  {
    v5 = v7;
    v9 = v8;
  }
  if (a5 >= 1)
  {
    v10 = 2 * (__int16)a4;
    v11 = 18 * (__int16)a4;
    v13 = a5;
    if (v10 <= v11)
      v14 = 18 * (__int16)a4;
    else
      v14 = 2 * (__int16)a4;
    if (v10 >= v11)
      v10 = 18 * (__int16)a4;
    v15 = &v9[a2];
    do
    {
      v12 = result + 2 * (__int16)a4;
      v16 = v12 + *v15;
      if (v16 <= v10)
        v17 = v10;
      else
        v17 = v12 + *v15;
      if (v16 <= v14)
        v18 = v17;
      else
        v18 = v14;
      *a3++ = v18;
      v15 += v5;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t silk_decoder_set_fs(uint64_t a1, int a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  BOOL v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  unsigned __int8 *v16;

  v6 = (__int16)a2;
  *(_DWORD *)(a1 + 2332) = 5 * (__int16)a2;
  v7 = *(__int16 *)(a1 + 2324) * (__int16)(5 * a2);
  if (*(_DWORD *)(a1 + 2316) == a2 && *(_DWORD *)(a1 + 2320) == a3)
  {
    v8 = 0;
  }
  else
  {
    v8 = silk_resampler_init(a1 + 2448, 1000 * (__int16)a2, a3, 0);
    v9 = 0;
    *(_DWORD *)(a1 + 2320) = a3;
    if (*(_DWORD *)(a1 + 2316) != a2)
      goto LABEL_7;
  }
  if (v7 != *(_DWORD *)(a1 + 2328))
  {
    v9 = 1;
LABEL_7:
    v10 = *(_DWORD *)(a1 + 2324);
    v11 = v10 == 4;
    if (v10 == 4)
      v12 = &silk_pitch_contour_NB_iCDF;
    else
      v12 = &silk_pitch_contour_10_ms_NB_iCDF;
    v13 = &silk_pitch_contour_10_ms_iCDF;
    if (v11)
      v13 = &silk_pitch_contour_iCDF;
    if (a2 != 8)
      v12 = v13;
    *(_QWORD *)(a1 + 2392) = v12;
    if ((v9 & 1) != 0)
      goto LABEL_26;
    *(_DWORD *)(a1 + 2336) = 20 * v6;
    if ((a2 | 4) == 0xC)
    {
      v14 = &silk_NLSF_CB_NB_MB;
      v15 = 10;
    }
    else
    {
      v14 = &silk_NLSF_CB_WB;
      v15 = 16;
    }
    *(_DWORD *)(a1 + 2340) = v15;
    *(_QWORD *)(a1 + 2752) = v14;
    switch(a2)
    {
      case 16:
        v16 = silk_uniform8_iCDF;
        break;
      case 12:
        v16 = (unsigned __int8 *)&silk_uniform6_iCDF;
        break;
      case 8:
        v16 = silk_uniform4_iCDF;
        break;
      default:
LABEL_25:
        *(_DWORD *)(a1 + 2376) = 1;
        *(_DWORD *)(a1 + 2308) = 100;
        *(_BYTE *)(a1 + 2312) = 10;
        *(_DWORD *)(a1 + 4188) = 0;
        bzero((void *)(a1 + 1348), 0x3C0uLL);
        *(_OWORD *)(a1 + 1316) = 0u;
        *(_OWORD *)(a1 + 1332) = 0u;
        *(_OWORD *)(a1 + 1284) = 0u;
        *(_OWORD *)(a1 + 1300) = 0u;
LABEL_26:
        *(_DWORD *)(a1 + 2316) = a2;
        *(_DWORD *)(a1 + 2328) = v7;
        return v8;
    }
    *(_QWORD *)(a1 + 2384) = v16;
    goto LABEL_25;
  }
  return v8;
}

uint64_t silk_init_decoder(_DWORD *a1)
{
  bzero(a1, 0x10C0uLL);
  a1[594] = 1;
  *a1 = 0x10000;
  silk_CNG_Reset((uint64_t)a1);
  silk_PLC_Reset((uint64_t)a1);
  return 0;
}

unsigned int *silk_sum_sqr_shift(unsigned int *result, int *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;

  v4 = a4 - 1;
  if (a4 < 2)
  {
    LODWORD(v5) = 0;
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v6 += *(__int16 *)(a3 + 2 * v5) * *(__int16 *)(a3 + 2 * v5)
          + *(__int16 *)(a3 + 2 * v5 + 2) * *(__int16 *)(a3 + 2 * v5 + 2);
      if ((v6 & 0x80000000) != 0)
        break;
      v5 += 2;
      if (v4 <= (int)v5)
      {
        v7 = 0;
        goto LABEL_8;
      }
    }
    v6 >>= 2;
    v7 = 2;
  }
LABEL_8:
  if ((int)v5 < v4)
  {
    v8 = 0;
    v9 = v5;
    v10 = a3 + 2 * v5;
    do
    {
      v11 = *(__int16 *)(a3 + 2 * ((v9 + (_DWORD)v8) & 0xFFFFFFFE) + 2);
      v6 += (*(__int16 *)(v10 + 2 * v8) * *(__int16 *)(v10 + 2 * v8) + v11 * v11) >> v7;
      if ((v6 & 0x80000000) != 0)
      {
        v7 += 2;
        v6 >>= 2;
      }
      v8 += 2;
    }
    while (v4 > v9 + (int)v8);
    LODWORD(v5) = v9 + v8;
  }
  if ((_DWORD)v5 == v4)
  {
    v12 = *(__int16 *)(a3 + 2 * v4);
    v6 += (v12 * v12) >> v7;
  }
  v13 = v6 >> 2;
  if (v6 >> 30)
    v7 += 2;
  else
    v13 = v6;
  *a2 = v7;
  *result = v13;
  return result;
}

uint64_t BET3FLT__InitTreeSet(uint64_t a1, _OWORD *a2)
{
  a2[11] = 0u;
  a2[12] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return 0;
}

double BET3FLT__DeInitTreeSet(uint64_t a1, _OWORD *a2)
{
  uint64_t i;
  uint64_t v5;
  double result;

  if (a2)
  {
    for (i = 104; i != 184; i += 8)
    {
      v5 = *(_QWORD *)((char *)a2 + i);
      if (v5)
        heap_Free(*(_QWORD **)(a1 + 8), v5);
    }
    result = 0.0;
    a2[11] = 0u;
    a2[12] = 0u;
    a2[9] = 0u;
    a2[10] = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t BET3FLT__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int16 v30;

  v8 = a1;
  v30 = 0;
  v9 = *a4;
  if (a4[4] - v9 >= 8 && *(_BYTE *)(*((_QWORD *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    v12 = a3;
    v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      v14 = BET3FLT__xfread2ptr_BET3((_QWORD *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if ((*a4 & 1) != 0)
          ++*a4;
        v15 = heap_Calloc(*(_QWORD **)(v8 + 8), 16, (unsigned __int16)*v13);
        v21 = a2 + 8 * v12;
        *(_QWORD *)(v21 + 104) = v15;
        v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          BET3FLT__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13)
          return 0;
        v23 = 0;
        v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1)
            break;
          v25 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2))
            break;
          v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13)
            return v26;
        }
        v26 = 2229280772;
        v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        v28 = 55015;
      }
      else
      {
        v26 = 2229280772;
        v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        v28 = 55013;
      }
    }
    else
    {
      v26 = 2229280772;
      v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      v28 = 55012;
    }
  }
  else
  {
    v26 = 2229280772;
    v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    v28 = 55011;
  }
  BET3FLT__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t BET3FLT__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;

  LOWORD(v5) = 0;
  v6 = a3 + 8 * a4;
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 16 * a5 + 8);
  v9 = a2 + 2;
  v10 = a2 + 1;
  while (2)
  {
    v11 = -(uint64_t)(__int16)v5;
    v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    v13 = (unsigned __int8 *)(v7 + *v12);
    v14 = *v13;
    v15 = v13[1];
    v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2)
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + (a2 - 2));
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1)
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + (a2 - 1));
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10))
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v10);
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          v16 = -1;
          if (v13[1])
            goto LABEL_24;
        }
        else
        {
          v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v9);
          if (v13[1])
            goto LABEL_24;
        }
        goto LABEL_39;
      default:
        if ((_DWORD)v14 == 3)
        {
          v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1784) + 2 * a2);
          v18 = v17 > 0x19;
          v16 = 10 * v17;
          if (v18)
            v16 = -1;
          if (!v13[1])
            goto LABEL_39;
        }
        else
        {
          v19 = *(_QWORD *)(a1 + 8 * v14 + 16);
          if (!v19)
            goto LABEL_39;
          v16 = *(_BYTE *)(v19 + a2);
          if (!v13[1])
            goto LABEL_39;
        }
LABEL_24:
        v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v20[1] >= v16)
            goto LABEL_30;
        }
        else
        {
          v21 = v15 - 1;
          if (v21)
          {
            v22 = 0;
            while (1)
            {
              v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22))
                ++v23;
              v24 = v23 >> 1;
              v25 = v20[v24];
              if (v25 == v16)
                break;
              if (v16 < v25)
                v21 = v24 - 1;
              else
                v22 = v24 + 1;
              if (v22 > v21)
                goto LABEL_39;
            }
LABEL_30:
            v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16)
            goto LABEL_30;
        }
LABEL_39:
        if ((v5 & 0x8000) != 0)
          continue;
        return v5;
    }
  }
}

uint64_t BET3FLT__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t inited;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  *a5 = 0;
  inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(v16 + 8), 1, 24);
    if (v9)
    {
      *v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t BET3FLT__select_bet3_FeatureExtractObjClose(uint64_t a1)
{
  if (a1)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return 0;
}

uint64_t BET3FLT__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6)
{
  char *__s1;

  __s1 = 0;
  bzero(a5, 0xE48uLL);
  *a5 = a2;
  if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)a5, a6);
}

uint64_t BET3FLT__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int GenericFeatureLayers;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int Index;
  unsigned int v58;
  const char *v59;
  unsigned int v60;
  uint64_t j;
  const char *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t k;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  _DWORD *v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t result;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v108;
  uint64_t *v109;
  char v110;
  char v111;
  unsigned int v112[4];
  uint64_t v113;

  v14 = a1;
  v113 = *MEMORY[0x1E0C80C00];
  v15 = *a1;
  if (a11)
    v16 = a12 == 0;
  else
    v16 = 1;
  v17 = !v16;
  v106 = v17;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  v18 = 0;
  v19 = 0;
  v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(_BYTE *)(*(_QWORD *)a10 + 2748 + v18) == 1)
      ++v19;
    ++v18;
  }
  while (v18 != 218);
  v21 = heap_Calloc(*(_QWORD **)(v15 + 8), (v19 * v20), 1);
  if (!v21)
    goto LABEL_118;
  v26 = v21;
  v108 = a3;
  v109 = v14;
  for (i = 0; i != 218; ++i)
  {
    v28 = *(_QWORD *)a10;
    v29 = *(unsigned __int8 *)(*(_QWORD *)a10 + i + 2748);
    if (*(_BYTE *)(*(_QWORD *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        v30 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 2);
        *(_QWORD *)(a10 + 8 * i + 1760) = v30;
        if (!v30)
          goto LABEL_43;
      }
      else if (v29 == 1)
      {
        *(_QWORD *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            v31 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 9);
            *(_QWORD *)(a10 + 3560) = v31;
            if (!v31)
              goto LABEL_43;
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              v34 = heap_Calloc(*(_QWORD **)(v15 + 8), (v33 * v20), 4);
              *(_QWORD *)(a10 + 3568) = v34;
              if (!v34)
                goto LABEL_43;
            }
            continue;
          case '4':
            v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              v36 = heap_Calloc(*(_QWORD **)(v15 + 8), (v35 * v20), 4);
              *(_QWORD *)(a10 + 3576) = v36;
              if (!v36)
                goto LABEL_43;
            }
            continue;
          case '5':
            v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              v38 = heap_Calloc(*(_QWORD **)(v15 + 8), (v37 * v20), 4);
              *(_QWORD *)(a10 + 3584) = v38;
              if (!v38)
                goto LABEL_43;
            }
            continue;
          case '6':
            v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              v40 = heap_Calloc(*(_QWORD **)(v15 + 8), (v39 * v20), 4);
              *(_QWORD *)(a10 + 3592) = v40;
              if (!v40)
                goto LABEL_43;
            }
            continue;
          case '8':
            v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              v42 = heap_Calloc(*(_QWORD **)(v15 + 8), (v41 * v20), 1);
              *(_QWORD *)(a10 + 3600) = v42;
              if (!v42)
                goto LABEL_43;
            }
            continue;
          default:
            if ((_DWORD)i == 24)
            {
              v32 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 8);
              *(_QWORD *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                v43 = -2065686518;
                log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(_QWORD *)(*v14 + 32), (uint64_t)"SELECT_BET3", 55007, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  v44 = *(unsigned __int16 *)(*(_QWORD *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    v43 = -2065686513;
    goto LABEL_120;
  }
  v45 = (void *)heap_Calloc(*(_QWORD **)(v15 + 8), v44 * v20, 4);
  *(_QWORD *)(a10 + 3608) = v45;
  if (!v45)
  {
    v43 = -2065686518;
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v102);
    goto LABEL_120;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a10 + 3578) * (_DWORD)v20)
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(_QWORD *)a10 + 3578) * v20);
  GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*v14, (uint64_t)"SELECT_BET3", (_QWORD *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    v43 = GenericFeatureLayers;
    goto LABEL_120;
  }
  v43 = usextract_Process(*v14, (uint64_t)"SELECT_BET3", v14[2], a3, a4, a10, v51, v52);
  if ((v43 & 0x80000000) == 0)
  {
    v104 = a4;
    if (*(_QWORD *)(a10 + 3504))
    {
      v53 = *(_QWORD *)a10;
      v54 = **(const char ***)(*(_QWORD *)a10 + 3336);
      if (v54)
      {
        v55 = 0;
        v56 = 1;
        do
        {
          if (!strncmp(v54, "INNO_", 5uLL))
          {
            v58 = atoi(v54 + 5) + 79;
            if (v58 <= 0x5E)
              *(_QWORD *)(a10 + 8 * v58 + 16) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
          }
          else
          {
            Index = usextract_getIndex(*(const char ***)(*(_QWORD *)(v53 + 3344) + 8 * v55), "FEATIDX", (unint64_t)"");
            if (Index == -1)
            {
              v53 = *(_QWORD *)a10;
              v59 = *(const char **)(*(_QWORD *)(*(_QWORD *)a10 + 3336) + 8 * v55);
              if (!strcmp(v59, "POS"))
              {
                *(_QWORD *)(a10 + 504) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
              }
              else if (!strcmp(v59, "PHR"))
              {
                *(_QWORD *)(a10 + 512) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
              }
            }
            else
            {
              v53 = *(_QWORD *)a10;
              *(_QWORD *)(a10
                        + 8
                        * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a10 + 3352) + 8 * v55) + Index)
                        + 16) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
            }
          }
          v55 = v56;
          v54 = *(const char **)(*(_QWORD *)(v53 + 3336) + 8 * v56++);
        }
        while (v54);
      }
    }
    v103 = *(__int16 *)(a10 + 10);
    v60 = v103 & ~(v103 >> 31);
    if (BET3FLT__log_select_GetLogLevel(*(_QWORD *)(v15 + 32)) >= 6)
    {
      LH_itoa(0x4Eu, (char *)v112, 0xAu);
      for (j = 0; j != 218; ++j)
      {
        v62 = "application/x-realspeak-usplosives;version=4.0";
        switch((int)j)
        {
          case 2:
            v111 = 5;
            v110 = 0;
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v111,
              1u,
              0);
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              *(_QWORD *)(a10 + 8 * j + 16),
              v60,
              0);
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v110,
              1u,
              0);
            continue;
          case 3:
            v62 = "application/x-realspeak-usdurs;version=4.0";
            goto LABEL_71;
          case 4:
            goto LABEL_71;
          case 5:
            v62 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_71:
            v63 = *(unsigned __int8 *)(*(_QWORD *)a10 + j + 2748);
            if (v63 == 2)
            {
              log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(_QWORD *)(a10 + 8 * j + 1760), 2 * v60, 0);
            }
            else if (v63 == 1)
            {
              log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(_QWORD *)(a10 + 8 * j + 16), v60, 0);
            }
            break;
          default:
            continue;
        }
      }
    }
    v105 = v103 & ~(v103 >> 31);
    v64 = *(unsigned int *)(a10 + 3520);
    if ((_DWORD)v64)
    {
      v65 = 0;
      for (k = 0; k < v64; ++k)
      {
        if (*(_DWORD *)(*(_QWORD *)(a10 + 3512) + v65) == 25)
        {
          v112[0] = 0;
          paramc_ParamGetUInt(*(_QWORD *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
          v67 = *(_DWORD *)(*(_QWORD *)(a10 + 3512) + v65 + 24);
          *a9 = v67;
          v43 = paramc_ParamSetInt(*(_QWORD *)(v15 + 40), (uint64_t)"waitfactor", v67);
          if (v43 < 0)
          {
            log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v68, v69, v70, v71, "parameter");
            goto LABEL_134;
          }
          v64 = *(unsigned int *)(a10 + 3520);
        }
        v65 += 32;
      }
    }
    featextract_adjustSilAudioOrder(a10);
    a3 = v108;
    v14 = v109;
    LODWORD(v72) = v103 & ~(v103 >> 31);
    if (!v106 || (v73 = *(_DWORD *)(a10 + 3520), v74 = v73 + v105, *a12 = v74, !(v73 + v105)))
    {
LABEL_97:
      if (v103 < 1)
      {
        a4 = v104;
      }
      else
      {
        v90 = 0;
        v91 = (unsigned __int16)v72;
        if (v72 <= 1)
          v72 = 1;
        else
          v72 = v72;
        v92 = v91 - 1;
        v93 = a2;
        do
        {
          v94 = *(_QWORD *)(a10 + 248);
          if (!*(_BYTE *)(v94 + v90))
            *(_BYTE *)(v94 + v90) = -1;
          v95 = *(_QWORD *)(a10 + 192);
          if (*(_BYTE *)(*(_QWORD *)(a10 + 32) + v90) == 35)
            v96 = 1;
          else
            v96 = 2 * *(_BYTE *)(v95 + v90);
          *(_BYTE *)(v95 + v90) = v96;
          v97 = *(_QWORD *)(a10 + 32);
          if (v92 == v90 && *(_BYTE *)(v97 + v90) == 35)
          {
            v112[0] = 0;
            paramc_ParamGetUInt(*(_QWORD *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
            v98 = 0;
            v99 = *(_QWORD *)(a10 + 1784);
            if (v112[0] != 1)
              v98 = *(unsigned __int16 *)(v99 + 2 * v90) + 200 * *a9;
            if (v98 <= 1)
              v98 = 1;
            if (v98 >= 0xFFFF)
              LOWORD(v98) = -1;
            *(_WORD *)(v99 + 2 * v90) = v98;
            v97 = *(_QWORD *)(a10 + 32);
            v93 = a2;
          }
          *(_BYTE *)(v97 + v90) = *(_BYTE *)(v93 + *(unsigned __int8 *)(v97 + v90) + 7356);
          ++v90;
        }
        while (v72 != v90);
LABEL_134:
        a4 = v104;
LABEL_44:
        a3 = v108;
        v14 = v109;
      }
      goto LABEL_120;
    }
    v75 = heap_Calloc(*(_QWORD **)(v15 + 8), v74, 32);
    *a11 = v75;
    a4 = v104;
    if (v75)
    {
      v76 = (void *)heap_Calloc(*(_QWORD **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
      if (v76)
      {
        v77 = (uint64_t)v76;
        memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
        LODWORD(v72) = v103 & ~(v103 >> 31);
        if (*a12)
        {
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v81 = 0;
          while (v81 < *(unsigned int *)(a10 + 3520))
          {
            if (v80 >= v105)
            {
              v87 = (_OWORD *)(*a11 + v78);
              v88 = (_OWORD *)(*(_QWORD *)(a10 + 3512) + 32 * v81);
              v89 = v88[1];
              *v87 = *v88;
              v87[1] = v89;
              ++v81;
              goto LABEL_95;
            }
            v82 = v80;
            if (!*(_WORD *)(v77 + 2 * v80))
              goto LABEL_93;
            v83 = (_OWORD *)(*a11 + v78);
            v84 = (_OWORD *)(*(_QWORD *)(a10 + 3512) + 32 * v81);
            v85 = v84[1];
            *v83 = *v84;
            v83[1] = v85;
            ++v81;
            --*(_WORD *)(v77 + 2 * v80);
LABEL_95:
            ++v79;
            v78 += 32;
            if (v79 >= *a12)
              goto LABEL_96;
          }
          v82 = v80;
LABEL_93:
          v86 = (_DWORD *)(*a11 + v78);
          *v86 = 33;
          v86[6] = *(unsigned __int8 *)(*(_QWORD *)(a10 + 32) + v82);
          ++v80;
          goto LABEL_95;
        }
LABEL_96:
        heap_Free(*(_QWORD **)(v15 + 8), v77);
        goto LABEL_97;
      }
    }
LABEL_118:
    v43 = -2065686518;
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
  }
LABEL_120:
  if (a12 && a11 && v43 < 0 && *a11)
  {
    heap_Free(*(_QWORD **)(v15 + 8), *a11);
    *a11 = 0;
    *a12 = 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(v14[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1)
    return v43;
  else
    return result;
}

uint64_t BET3FLT__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*a2)
    return 0;
  v4 = *a1;
  v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((_QWORD *)*a1, (uint64_t)"SELECT_BET3", a2);
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(_BYTE *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        v14 = a2[v10 + 220];
        if (v14)
LABEL_11:
          heap_Free(*(_QWORD **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          v13 = a2[v10 + 2];
          if (v13)
            heap_Free(*(_QWORD **)(v4 + 8), v13);
          v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            v14 = a2[445];
            if (v14)
              goto LABEL_11;
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            v14 = a2[446];
            if (v14)
              goto LABEL_11;
            break;
          case '4':
            v14 = a2[447];
            if (v14)
              goto LABEL_11;
            break;
          case '5':
            v14 = a2[448];
            if (v14)
              goto LABEL_11;
            break;
          case '6':
            v14 = a2[449];
            if (v14)
              goto LABEL_11;
            break;
          case '8':
            v14 = a2[450];
            if (v14)
              goto LABEL_11;
            break;
          default:
            if ((_DWORD)v10 == 24)
            {
              v14 = a2[444];
              if (v14)
                goto LABEL_11;
            }
            else
            {
LABEL_20:
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, "%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  v15 = a2[451];
  if (v15)
    heap_Free(*(_QWORD **)(v4 + 8), v15);
  *a2 = 0;
  return v5;
}

float BET3FLT__mul_int32_Q8_24_to_int32(float a1, float a2)
{
  return a1 * a2;
}

float BET3FLT__div_int32_int32_to_Q8_24(float a1, float a2)
{
  return a1 / a2;
}

uint64_t BET3FLT__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  int *v29;
  uint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  unsigned int *v47;
  int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v5 = a1;
  v6 = a3;
  if (a2[a3 + 84])
  {
    v7 = &a2[a3];
    v9 = v7[32];
    v8 = (int *)(v7 + 32);
    v10 = heap_Calloc(*(_QWORD **)(a1 + 8), v9, 8);
    *((_QWORD *)a2 + 21) = v10;
    if (!v10)
      return 2229280778;
    if (*v8 >= 1)
    {
      v11 = 0;
      v12 = 0;
      v13 = (int *)(a2 + 11);
      while (1)
      {
        v14 = (unsigned int *)(a4 + 24 * v11);
        if (BET3FLT__xfread_BET3(a2, 4u, 1, v14) != 1 || (*a2 & 0x80000000) != 0)
        {
          v67 = "LoadModelFile: the number of HMM states is illegal for %s %d\n";
          v68 = v5;
          v69 = 55020;
          goto LABEL_67;
        }
        if (BET3FLT__xfread_BET3(a2 + 11, 4u, 1, v14) != 1 || (v20 = *v13, *v13 < 0))
        {
          v67 = "LoadModelFile: the number of PDFs is illegal for %s %d\n";
          v68 = v5;
          v69 = 55021;
          goto LABEL_67;
        }
        if (!v12)
        {
          v21 = heap_Calloc(*(_QWORD **)(v5 + 8), (*v8 * v20), 8);
          if (!v21)
            return 2229280778;
          v12 = v21;
          v20 = *v13;
        }
        v22 = v6;
        *(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) = v12 + 8 * v20 * (int)v11;
        *(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) -= 8;
        if (v20 >= 1)
          break;
LABEL_16:
        ++v11;
        v6 = v22;
        if (v11 >= *v8)
          goto LABEL_17;
      }
      v23 = 0;
      v24 = *a2;
      v25 = 8;
      while (1)
      {
        v26 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) + v25), 4u, (2 * v24), v14);
        v24 = *a2;
        if (v26 != 2 * *a2)
          break;
        v27 = *(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v11) + 8 * v23;
        *(_QWORD *)(v27 + 8) -= 8;
        ++v23;
        v25 += 8;
        if (v23 >= (int)a2[11])
          goto LABEL_16;
      }
      v67 = "LoadModelFile: PDF read failed for %s %d\n";
      v68 = v5;
      v69 = 55022;
      goto LABEL_67;
    }
  }
LABEL_17:
  v28 = &a2[v6];
  if (v28[94])
  {
    v29 = (int *)(v28 + 32);
    v30 = heap_Calloc(*(_QWORD **)(v5 + 8), v28[32], 8);
    v31 = &a2[2 * v6];
    *((_QWORD *)v31 + 22) = v30;
    v32 = v31 + 44;
    v33 = 2229280778;
    if (!v30)
      return v33;
    v73 = heap_Calloc(*(_QWORD **)(v5 + 8), *a2 * *v29, 8);
    if (!v73)
      return v33;
    if (*v29 >= 1)
    {
      v34 = 0;
      v35 = &a2[v6 + 1];
      v36 = &a2[2 * v6 + 12];
      v71 = v5;
      v74 = v6;
      while (1)
      {
        v37 = (unsigned int *)(a4 + 24 * v34);
        if (BET3FLT__xfread_BET3(v35, 4u, 1, v37) != 1 || (*v35 & 0x80000000) != 0)
        {
          v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
          v68 = v5;
          v69 = 55023;
          goto LABEL_67;
        }
        v38 = BET3FLT__xfread2ptr_BET3(v36, 4u, *a2, v37);
        if (v38 != *a2)
        {
          v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
          v68 = v5;
          v69 = 55024;
          goto LABEL_67;
        }
        v39 = *(_QWORD *)v36;
        *(_QWORD *)v36 -= 8;
        if (v38 > 0)
          break;
        *(_QWORD *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
        *(_QWORD *)(*v32 + 8 * v34) -= 16;
LABEL_34:
        ++v34;
        v5 = v71;
        v6 = v74;
        if (v34 >= *v29)
          goto LABEL_35;
      }
      v40 = 0;
      do
      {
        if ((*(_DWORD *)(v39 + 4 * v40) & 0x80000000) != 0)
        {
          v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
          v68 = v5;
          v69 = 55025;
          goto LABEL_67;
        }
        ++v40;
      }
      while ((v38 + 2) - 2 != v40);
      *(_QWORD *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
      *(_QWORD *)(*v32 + 8 * v34) -= 16;
      v41 = *(_QWORD *)v36;
      v42 = *v35;
      v43 = 16;
      v44 = 2;
      while (1)
      {
        v45 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*(_QWORD *)(*v32 + 8 * v34) + v43), 4u, 2 * *(_DWORD *)(v41 + 4 * v44) * v42, v37);
        v41 = *(_QWORD *)v36;
        v42 = *v35;
        if (v45 != 2 * *(_DWORD *)(*(_QWORD *)v36 + 4 * v44) * *v35)
          break;
        v43 += 8;
        v46 = v44++ <= (int)*a2;
        if (!v46)
          goto LABEL_34;
      }
      v67 = "LoadModelFile: PDF read failed for %s %d\n";
      v68 = v71;
      v69 = 55026;
      goto LABEL_67;
    }
  }
LABEL_35:
  if (!v28[104])
    return 0;
  v47 = &a2[v6];
  v49 = v47[32];
  v48 = (int *)(v47 + 32);
  v50 = heap_Calloc(*(_QWORD **)(v5 + 8), v49, 8);
  v75 = v6;
  v51 = &a2[2 * v6];
  *((_QWORD *)v51 + 32) = v50;
  v33 = 2229280778;
  if (v50)
  {
    v52 = heap_Calloc(*(_QWORD **)(v5 + 8), *a2 * *v48, 8);
    if (v52)
    {
      if (*v48 >= 1)
      {
        v53 = v52;
        v54 = 0;
        v55 = v51 + 64;
        v56 = &a2[v75 + 1];
        v57 = &a2[2 * v75 + 12];
        v72 = v5;
        while (1)
        {
          v58 = (unsigned int *)(a4 + 24 * v54);
          if (BET3FLT__xfread_BET3(v56, 4u, 1, v58) != 1 || (*v56 & 0x80000000) != 0)
          {
            v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
            v68 = v5;
            v69 = 55027;
            goto LABEL_67;
          }
          v59 = BET3FLT__xfread2ptr_BET3(v57, 4u, *a2, v58);
          if (v59 != *a2)
          {
            v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
            v68 = v5;
            v69 = 55028;
            goto LABEL_67;
          }
          v60 = *(_QWORD *)v57;
          *(_QWORD *)v57 -= 8;
          if (v59 > 0)
            break;
          *(_QWORD *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
          *(_QWORD *)(*v55 + 8 * v54) -= 16;
LABEL_52:
          v33 = 0;
          ++v54;
          v5 = v72;
          if (v54 >= *v48)
            return v33;
        }
        v61 = 0;
        do
        {
          if ((*(_DWORD *)(v60 + 4 * v61) & 0x80000000) != 0)
          {
            v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
            v68 = v5;
            v69 = 55029;
            goto LABEL_67;
          }
          ++v61;
        }
        while ((v59 + 2) - 2 != v61);
        *(_QWORD *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
        *(_QWORD *)(*v55 + 8 * v54) -= 16;
        v62 = *(_QWORD *)v57;
        v63 = *v56;
        v64 = 16;
        v65 = 2;
        while (1)
        {
          v66 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*(_QWORD *)(*v55 + 8 * v54) + v64), 4u, 4 * *(_DWORD *)(v62 + 4 * v65) * v63, v58);
          v62 = *(_QWORD *)v57;
          v63 = *v56;
          if (v66 != 4 * *(_DWORD *)(*(_QWORD *)v57 + 4 * v65) * *v56)
            break;
          v64 += 8;
          v46 = v65++ <= (int)*a2;
          if (!v46)
            goto LABEL_52;
        }
        v67 = "LoadModelFile: PDF read failed for %s %d\n";
        v68 = v72;
        v69 = 55030;
LABEL_67:
        BET3FLT__log_select_Error(v68, v69, (uint64_t)v67, v15, v16, v17, v18, v19);
        return 2229280772;
      }
      return 0;
    }
  }
  return v33;
}

uint64_t BET3FLT__FindDurPDF(int32x2_t *a1, int *a2, int a3, int a4, int a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float64x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  float64x2_t v30;

  v6 = a1[1].i32[0];
  a1[3] = 0;
  LODWORD(v7) = *a2;
  if (*a2 >= 1)
  {
    v13 = a4;
    v14 = 2;
    __asm { FMOV            V0.2D, #0.5 }
    v30 = _Q0;
    v20 = 0.0;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 21) + 8 * v13) + 8 * v6);
      v22 = *(float *)(v21 + 4 * v14);
      v23 = *(float *)(v21 + 4 * ((int)v14 + (int)v7));
      if (a5)
        v23 = BET3FLT__bet3_finv(v23);
      v24 = v22 + (float)(v23 * a6);
      if (v24 < 0.0)
        v24 = 0.0;
      if (a2[115])
      {
        if (v24 > 4000.0)
          v24 = 4000.0;
      }
      else if (v24 > 4000.0)
      {
        v24 = v20 * 0.5;
      }
      v25.f64[0] = (float)(v24 + (float)a3);
      v26 = a1[2];
      v25.f64[1] = sqrt(v23);
      v27 = vmovn_s64(vcvtq_s64_f64(vaddq_f64(v25, v30)));
      *(_DWORD *)(*(_QWORD *)&v26 + 4 * v14) = v27.i32[0];
      a1[3] = vadd_s32(a1[3], v27);
      a3 += (int)(float)(v24 - (float)*(int *)(*(_QWORD *)&v26 + 4 * v14));
      v7 = *a2;
      v20 = v24;
    }
    while (v14++ <= v7);
  }
  return 0;
}

uint64_t BET3FLT__FindContPDF(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)(a3 + 8 * a1);
  v6 = *(int *)(a4 + 4 * a1 + 4);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * a1 + 176) + 8 * a5) + 8 * a2)
     + 4 * (2 * *(_DWORD *)(v5[9] + 4 * a2) - 2) * (int)v6;
  *(_QWORD *)(v5[19] + 8 * a2) = v7;
  *(_QWORD *)(v5[29] + 8 * a2) = v7 + 4 * v6;
  return 0;
}

uint64_t BET3FLT__FindMsdPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v6 = a4 + 4 * a1;
  v9 = *(_DWORD *)(v6 + 4);
  v7 = (int *)(v6 + 4);
  v8 = v9;
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = a2;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * a1 + 256) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(_QWORD *)(a3 + 8 * a1 + 72) + 4 * a2) - 4) * v8;
    v13 = a3 + 8 * a1;
    v14 = a5 + 4 * a1;
    v15 = (_QWORD *)(v13 + 152);
    v16 = (_QWORD *)(v13 + 232);
    v17 = (int *)(v14 + 224);
    v18 = (float *)(v14 + 2104);
    v19 = 1;
    do
    {
      v20 = v12 + 4 * v10;
      v21 = *(_QWORD *)(*v15 + 8 * v11);
      *(_DWORD *)(v21 + 4 * v19) = *(_DWORD *)v20;
      v22 = *(float *)(v20 + 4);
      *(float *)(*(_QWORD *)(*v16 + 8 * v11) + 4 * v19) = v22;
      v23 = *(float *)(a5 + 44);
      if (v23 != 0.0 && *v17 == 2)
        *(float *)(v21 + 4 * v19) = *(float *)(v21 + 4 * v19) + (float)(v22 * v23);
      if (v19 == 1)
      {
        v24 = *v17;
        if (*v17 == 2)
          *(_DWORD *)(*(_QWORD *)(a3 + 320) + 4 * v11) = *(_DWORD *)(v20 + 8);
        v25 = *(float *)(v20 + 8);
        v26 = 1 << v24;
        v27 = *(_QWORD *)(a3 + 312);
        if (v25 <= *v18)
          v28 = *(_BYTE *)(v27 + v11) & ~(_BYTE)v26;
        else
          v28 = *(_BYTE *)(v27 + v11) | v26;
        *(_BYTE *)(v27 + v11) = v28;
      }
      v10 += 4;
    }
    while (v19++ < *v7);
  }
  return 0;
}

double BET3FLT__DeInitModelSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  double result;

  if (*(int *)(a2 + 456) >= 1)
  {
    v4 = 0;
    v5 = (uint64_t **)(a2 + 256);
    v6 = (_DWORD *)(a2 + 416);
    do
    {
      if (*(v6 - 20))
      {
        v7 = *(_QWORD **)(a2 + 168);
        if (v7)
        {
          if (*v7)
          {
            *v7 += 8;
            heap_Free(*(_QWORD **)(a1 + 8), **(_QWORD **)(a2 + 168));
            v7 = *(_QWORD **)(a2 + 168);
          }
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v7);
          *(_QWORD *)(a2 + 168) = 0;
        }
      }
      if (*(v6 - 10))
      {
        v8 = *(v5 - 10);
        if (v8)
        {
          if (*v8)
          {
            *v8 += 16;
            heap_Free(*(_QWORD **)(a1 + 8), **(v5 - 10));
            v8 = *(v5 - 10);
          }
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v8);
        }
      }
      if (*v6)
      {
        v9 = *v5;
        if (*v5)
        {
          if (*v9)
          {
            *v9 += 16;
            heap_Free(*(_QWORD **)(a1 + 8), **v5);
            v9 = *v5;
          }
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v9);
        }
      }
      ++v4;
      ++v5;
      ++v6;
    }
    while (v4 < *(int *)(a2 + 456));
  }
  result = 0.0;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t BET3FLT__InitUttModel(uint64_t a1, char *a2, int *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = 2229280778;
  bzero(a2, 0x240uLL);
  *(_QWORD *)a2 = a1;
  *((_QWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 138) = a4;
  *((_DWORD *)a2 + 141) = *a3 * a4;
  v9 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 528);
  *((_QWORD *)a2 + 68) = v9;
  if (v9)
  {
    v10 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
    *((_QWORD *)a2 + 4) = v10;
    if (v10)
    {
      v11 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 1);
      *((_QWORD *)a2 + 41) = v11;
      if (v11)
      {
        v12 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
        *((_QWORD *)a2 + 42) = v12;
        if (v12)
        {
          v13 = a3[114];
          if (v13 >= 1)
          {
            v14 = 0;
            v15 = a2 + 168;
            v16 = a3;
            do
            {
              if (!v16[84])
              {
                v17 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
                *(v15 - 10) = v17;
                if (!v17)
                  return v8;
                v18 = *(_QWORD **)(a1 + 8);
                v19 = *((_DWORD *)a2 + 138);
                v20 = v16[104]
                    ? BET3FLT__ddcalloc(v18, 2 * v19 * *a3, v16[1] + 1)
                    : (_QWORD *)heap_Calloc(v18, (2 * v19 * *a3), 8);
                *v15 = v20;
                if (!v20)
                  return v8;
                v15[10] = &v20[*a3 * *((_DWORD *)a2 + 138)];
                v13 = a3[114];
              }
              ++v14;
              ++v16;
              ++v15;
            }
            while (v14 < v13);
          }
          v21 = *((unsigned int *)a2 + 138);
          if ((int)v21 >= 1)
          {
            v22 = 0;
            v23 = *a3;
            v24 = 152;
            do
            {
              v25 = *((_QWORD *)a2 + 68);
              v26 = v25 + 528 * v22;
              *(_DWORD *)v26 = v22;
              v27 = v22 * v23;
              v28 = *((_QWORD *)a2 + 41) + v22 * v23;
              v29 = *((_QWORD *)a2 + 42) + 4 * v22 * v23;
              *(_QWORD *)(v26 + 16) = *((_QWORD *)a2 + 4) + 4 * v22 * v23 - 8;
              *(_QWORD *)(v26 + 312) = v28 - 2;
              *(_QWORD *)(v26 + 320) = v29 - 8;
              if (v13 >= 1)
              {
                v30 = (uint64_t *)(v25 + v24);
                v31 = a2 + 168;
                v32 = v13;
                v33 = a3 + 84;
                do
                {
                  if (!*v33++)
                  {
                    v35 = *(v31 - 10) + 4 * v27;
                    *(v30 - 10) = v35;
                    v36 = *v31 + 8 * v27;
                    *v30 = v36;
                    v37 = v31[10] + 8 * v27;
                    *(v30 - 10) = v35 - 8;
                    *v30 = v36 - 16;
                    v30[10] = v37 - 16;
                  }
                  ++v30;
                  ++v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v24 += 528;
            }
            while (v22 != v21);
          }
          return 0;
        }
      }
    }
  }
  return v8;
}

_QWORD *BET3FLT__DeInitUttModel(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  if (*result && result[68])
  {
    v2 = result[1];
    v3 = result[4];
    if (v3)
    {
      heap_Free(*(_QWORD **)(*result + 8), v3);
      v1[4] = 0;
    }
    v4 = v1[41];
    if (v4)
    {
      heap_Free(*(_QWORD **)(*v1 + 8), v4);
      v1[41] = 0;
    }
    v5 = v1[42];
    if (v5)
    {
      heap_Free(*(_QWORD **)(*v1 + 8), v5);
      v1[42] = 0;
    }
    if (*(int *)(v2 + 456) >= 1)
    {
      v6 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 336 + 4 * v6))
        {
          v7 = &v1[v6];
          v8 = v7[11];
          if (v8)
          {
            heap_Free(*(_QWORD **)(*v1 + 8), v8);
            v7[11] = 0;
          }
          v9 = v7[21];
          if (v9)
          {
            heap_Free(*(_QWORD **)(*v1 + 8), v9);
            v7[21] = 0;
          }
        }
        ++v6;
      }
      while (v6 < *(int *)(v2 + 456));
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v1[68]);
  }
  v1[68] = 0;
  *((_DWORD *)v1 + 138) = 0;
  *v1 = 0;
  return result;
}

_QWORD *BET3FLT__DeInitMSDUttModel(_QWORD *result, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;

  v2 = result[1];
  if (!*(_DWORD *)(v2 + 4 * a2 + 336))
  {
    v3 = result;
    v4 = a2;
    v5 = &result[a2];
    v6 = v5[11];
    if (v6)
    {
      result = heap_Free(*(_QWORD **)(*result + 8), v6);
      v5[11] = 0;
    }
    v9 = (_QWORD *)v5[21];
    v8 = (uint64_t **)(v5 + 21);
    v7 = v9;
    if (v9)
    {
      if (*(_DWORD *)(v2 + 4 * v4 + 416))
      {
        *v7 += 4;
        result = BET3FLT__dd_free(*(_QWORD **)(*v3 + 8), *v8);
      }
      else
      {
        result = heap_Free(*(_QWORD **)(*v3 + 8), (uint64_t)v7);
      }
      *v8 = 0;
    }
  }
  return result;
}

uint64_t BET3FLT__InitModelSet(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = a3[33];
  *(_DWORD *)(a2 + 456) = v3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = (_DWORD *)(a2 + 376);
    v6 = 536;
    do
    {
      *(v5 - 62) = a3[86];
      v7 = (_DWORD *)(a2 + 336);
      if (v6 != 536)
      {
        if (a3[536])
          v7 = (_DWORD *)(a2 + 4 * v4 + 416);
        else
          v7 = v5;
      }
      ++a3;
      *v7 = 1;
      ++v4;
      v8 = v6 - 535;
      ++v6;
      ++v5;
    }
    while (v8 < *(int *)(a2 + 456));
  }
  return 0;
}

uint64_t BET3FLT__meancpy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        v4 = *(uint64_t **)(result + 72);
        v5 = *(uint64_t **)(result + 40);
        v6 = v3;
        do
        {
          v7 = *v4++;
          v8 = *(_DWORD *)(v7 + 4 * v2);
          v9 = *v5++;
          *(_DWORD *)(v9 + 4 * v2) = v8;
          --v6;
        }
        while (v6);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

float BET3FLT__ConstW_Calc_R_and_r(uint64_t a1, int a2)
{
  float *v2;
  float **v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  uint64_t v23;
  float **v24;
  float *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float *v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float *v56;
  float result;

  v3 = *(float ***)(a1 + 96);
  v2 = *(float **)(a1 + 104);
  v4 = *(uint64_t **)(a1 + 72);
  v5 = *(uint64_t **)(a1 + 80);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = a2;
  v9 = *v5;
  v10 = v5[1];
  v11 = *(float *)(*v5 + 4 * a2);
  v12 = *v4;
  v13 = v4[1];
  v14 = v11 * *(float *)(*v4 + 4 * a2);
  *v2 = v14;
  v15 = *(float *)(v10 + 4 * (v6 + a2));
  v16 = v6 + a2;
  v17 = v14 + (float)((float)(v15 * -0.5) * *(float *)(v13 + 4 * v16));
  *v2 = v17;
  v18 = a2 + 2 * v6;
  v19 = *(float *)(v9 + 4 * v18);
  v20 = v17 + (float)((float)(v19 * -2.0) * *(float *)(v12 + 4 * v18));
  *v2 = v20;
  v21 = *(float *)(v10 + 4 * v18);
  *v2 = v20 + (float)(v21 * *(float *)(v13 + 4 * v18));
  v22 = *v3;
  *v22 = v11 + (float)((float)((float)(v19 * 4.0) + (float)(v15 * 0.25)) + v21);
  v22[1] = (float)(v19 * -2.0) + (float)(v21 * -2.0);
  v22[2] = v21 + (float)(v15 * -0.25);
  if (v7 < 3)
  {
    LODWORD(v23) = 1;
  }
  else
  {
    v23 = (v7 - 1);
    v24 = v3 + 1;
    v25 = v2 + 1;
    v26 = v5 + 2;
    v27 = v4 + 2;
    v28 = v23 - 1;
    do
    {
      v29 = *(float *)(v10 + 4 * v8);
      v30 = v29 * *(float *)(v13 + 4 * v8);
      *v25 = v30;
      v31 = *(v26 - 2);
      v32 = *(float *)(v31 + 4 * v16);
      v33 = *(v27 - 2);
      v34 = v30 + (float)((float)(v32 * 0.5) * *(float *)(v33 + 4 * v16));
      *v25 = v34;
      v36 = *v26++;
      v35 = v36;
      v37 = *(float *)(v36 + 4 * v16);
      v39 = *v27++;
      v38 = v39;
      v40 = v34 + (float)((float)(v37 * -0.5) * *(float *)(v39 + 4 * v16));
      *v25 = v40;
      v41 = *(float *)(v31 + 4 * v18);
      v42 = v40 + (float)(v41 * *(float *)(v33 + 4 * v18));
      *v25 = v42;
      v43 = *(float *)(v10 + 4 * v18);
      v44 = v42 + (float)((float)(v43 * -2.0) * *(float *)(v13 + 4 * v18));
      *v25 = v44;
      v45 = *(float *)(v35 + 4 * v18);
      *v25++ = v44 + (float)(v45 * *(float *)(v39 + 4 * v18));
      v46 = *v24++;
      *v46 = (float)((float)((float)((float)(v29 + (float)(v32 * 0.25)) + (float)(v37 * 0.25)) + v41) + v45)
           + (float)(v43 * 4.0);
      v46[1] = (float)(v45 * -2.0) + (float)(v43 * -2.0);
      v46[2] = v45 + (float)(v37 * -0.25);
      v13 = v38;
      v10 = v35;
      --v28;
    }
    while (v28);
    v10 = v5[v23];
    v13 = v4[v23];
  }
  v47 = *(float *)(v10 + 4 * v8);
  v48 = v47 * *(float *)(v13 + 4 * v8);
  v2[v23] = v48;
  v49 = v5[(int)v23 - 1];
  v50 = *(float *)(v49 + 4 * v16);
  v51 = v4[(int)v23 - 1];
  v52 = v48 + (float)((float)(v50 * 0.5) * *(float *)(v51 + 4 * v16));
  v2[v23] = v52;
  v53 = *(float *)(v49 + 4 * v18);
  v54 = v52 + (float)(v53 * *(float *)(v51 + 4 * v18));
  v2[v23] = v54;
  v55 = *(float *)(v10 + 4 * v18);
  v2[v23] = v54 + (float)((float)(v55 * -2.0) * *(float *)(v13 + 4 * v18));
  v56 = v3[v23];
  result = v47 + (float)((float)(v53 + (float)(v50 * 0.25)) + (float)(v55 * 4.0));
  *v56 = result;
  v56[1] = 0.0;
  v56[2] = 0.0;
  return result;
}

float BET3FLT__ConstW_Cholesky(uint64_t a1, double a2)
{
  uint64_t v2;
  float *v3;
  _DWORD *v4;
  float32x2_t v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float **v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *(_DWORD **)v2;
  v3 = *(float **)(v2 + 8);
  LODWORD(a2) = **(_DWORD **)v2;
  v5 = vdiv_f32(*(float32x2_t *)(*(_QWORD *)v2 + 4), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  *(float32x2_t *)(v4 + 1) = v5;
  v6 = v3[1];
  *(float *)&a2 = *v3 + (float)((float)((float)-v5.f32[0] * v5.f32[0]) * *(float *)&a2);
  *v3 = *(float *)&a2;
  v7 = (float)(v6 + (float)((float)-(float)(*((float *)v4 + 1) * *((float *)v4 + 2)) * *(float *)v4)) / *(float *)&a2;
  v8 = v3[2] / *(float *)&a2;
  v3[1] = v7;
  v3[2] = v8;
  v9 = *(unsigned int *)(a1 + 20);
  if ((int)v9 >= 3)
  {
    v10 = (float **)(v2 + 16);
    v11 = v9 - 2;
    do
    {
      v12 = *v10;
      v13 = (*v10)[1];
      v14 = **v10 + (float)((float)-(float)(v7 * v7) * *(float *)&a2);
      *v12 = v14;
      *(float *)&a2 = v14 + (float)((float)-(float)((*(v10 - 2))[2] * (*(v10 - 2))[2]) * **(v10 - 2));
      *v12 = *(float *)&a2;
      v7 = (float)(v13 + (float)((float)-(float)(v3[1] * v3[2]) * *v3)) / *(float *)&a2;
      v15 = v12[2] / *(float *)&a2;
      v12[1] = v7;
      v12[2] = v15;
      ++v10;
      v3 = v12;
      --v11;
    }
    while (v11);
  }
  return *(float *)&a2;
}

float BET3FLT__ConstW_Cholesky_forward(uint64_t a1)
{
  float *v1;
  uint64_t *v2;
  float *v3;
  float v4;
  uint64_t v5;
  float result;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;

  v2 = *(uint64_t **)(a1 + 96);
  v1 = *(float **)(a1 + 104);
  v3 = *(float **)(a1 + 88);
  v4 = *v1;
  *v3 = *v1;
  v5 = *v2;
  result = v1[1] - (float)(*(float *)(*v2 + 4) * v4);
  v3[1] = result;
  v7 = *(unsigned int *)(a1 + 20);
  if ((int)v7 >= 3)
  {
    v8 = v3 + 2;
    v9 = v1 + 2;
    v10 = v2 + 1;
    v11 = v7 - 2;
    do
    {
      v12 = *v9++;
      v13 = v12;
      v14 = *(float *)(v5 + 8);
      v15 = *v10++;
      v5 = v15;
      result = v13 - (float)((float)(v14 * *(v8 - 2)) + (float)(*(float *)(v15 + 4) * result));
      *v8++ = result;
      --v11;
    }
    while (v11);
  }
  return result;
}

float BET3FLT__ConstW_Cholesky_backward(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float *v7;
  float result;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(float *)(v3 + 4 * (v2 - 1)) / **(float **)(v4 + 8 * (v2 - 1));
  *(float *)(*(_QWORD *)(v5 + 8 * (v2 - 1)) + 4 * a2) = v6;
  v7 = *(float **)(v4 + 8 * (v2 - 2));
  result = (float)(*(float *)(v3 + 4 * (v2 - 2)) / *v7) - (float)(v7[1] * v6);
  *(float *)(*(_QWORD *)(v5 + 8 * (v2 - 2)) + 4 * a2) = result;
  v9 = __OFSUB__(v2, 3);
  v10 = (v2 - 3);
  if ((int)v10 < 0 == v9)
  {
    v11 = (_QWORD *)(v5 + 8 * v10 + 16);
    v12 = v11;
    do
    {
      v13 = *--v12;
      result = (float)((float)(*(float *)(v3 + 4 * v10) / **(float **)(v4 + 8 * v10))
                     - (float)(*(float *)(*(_QWORD *)(v4 + 8 * v10) + 4) * *(float *)(v13 + 4 * a2)))
             - (float)(*(float *)(*(_QWORD *)(v4 + 8 * v10) + 8) * *(float *)(*v11 + 4 * a2));
      *(float *)(*(v11 - 2) + 4 * a2) = result;
      --v10;
      v11 = v12;
    }
    while (v10 != -1);
  }
  return result;
}

void BET3FLT__mlpg2(uint64_t a1, int a2)
{
  double v4;

  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

char *BET3FLT__heap_StrDup(_QWORD *a1, char *__s)
{
  int v4;
  char *result;

  if (!__s)
    return 0;
  v4 = strlen(__s);
  result = (char *)heap_Calloc(a1, (v4 + 1), 1);
  if (result)
    return strcpy(result, __s);
  return result;
}

uint64_t BET3FLT__xfread_BET3(void *a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;

  v5 = a3;
  v6 = *a4;
  v7 = a4[4];
  if (v6 + (_DWORD)a3 * a2 > v7)
    v5 = (v7 - v6) / a2;
  if ((_DWORD)v5)
  {
    v8 = v5 * a2;
    memcpy(a1, (const void *)(*((_QWORD *)a4 + 1) + v6), v8);
    *a4 += v8;
  }
  return v5;
}

uint64_t BET3FLT__xfread2ptr_BET3(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *a4;
  if (a2 >= 2 && v4 % a2)
    return 0;
  v5 = a4[4];
  if (v4 + (_DWORD)a3 * a2 > v5)
    a3 = (v5 - v4) / a2;
  if ((_DWORD)a3)
  {
    *a1 = *((_QWORD *)a4 + 1) + v4;
    *a4 = v4 + a3 * a2;
  }
  return a3;
}

uint64_t BET3FLT__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 - 1;
  do
    v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", (a2 + 2), 0, v3);
}

uint64_t BET3FLT__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  return log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t BET3FLT__log_select_GetLogLevel(uint64_t a1)
{
  unsigned int LogLevel;

  LogLevel = log_GetLogLevel(a1);
  if (LogLevel >= 3)
    return LogLevel - 2;
  else
    return 0;
}

float BET3FLT__bet3_finv(float a1)
{
  float v1;

  v1 = 0.0;
  if (a1 < 1.0e19 && a1 > -1.0e19)
  {
    if (a1 > 1.0e-19 || a1 < 0.0)
    {
      if (a1 < -1.0e-19 || a1 >= 0.0)
        return 1.0 / a1;
      else
        return -1.0e38;
    }
    else
    {
      return 1.0e38;
    }
  }
  return v1;
}

_QWORD *BET3FLT__ddcalloc(_QWORD *a1, unsigned int a2, int a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    v7 = a2;
    v3 = (_QWORD *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      v8 = heap_Calloc(a1, a3 * a2, 4);
      *v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          v9 = 1;
          v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

_QWORD *BET3FLT__dd_free(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;

  if (a2)
  {
    v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

uint64_t BET3FLT__InitDWinSet(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  int v7;
  int *v8;

  a2[23] = 0u;
  a2[24] = 0u;
  a2[21] = 0u;
  a2[22] = 0u;
  a2[19] = 0u;
  a2[20] = 0u;
  a2[17] = 0u;
  a2[18] = 0u;
  a2[15] = 0u;
  a2[16] = 0u;
  a2[13] = 0u;
  a2[14] = 0u;
  a2[11] = 0u;
  a2[12] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  v3 = *(unsigned int *)(a3 + 132);
  if ((int)v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a3 + 4 * i;
      v6 = *(_DWORD *)(v5 + 304);
      if (v6 >= 1)
      {
        v7 = 0;
        v8 = (int *)(v5 + 304);
        do
        {
          *((_DWORD *)a2 + 10 * i) = v6 + 1;
          ++v7;
          v6 = *v8;
        }
        while (v7 < *v8);
      }
    }
  }
  return 0;
}

double BET3FLT__DeInitDWinSet(uint64_t a1, _OWORD *a2)
{
  uint64_t i;
  char *v5;
  uint64_t *v6;
  double result;

  if (a2)
  {
    for (i = 0; i != 400; i += 40)
    {
      v5 = (char *)a2 + i;
      BET3FLT__dd_free(*(_QWORD **)(a1 + 8), *(uint64_t **)((char *)a2 + i + 8));
      v6 = *(uint64_t **)((char *)a2 + i + 16);
      if (v6)
      {
        if (!*v6
          || (heap_Free(*(_QWORD **)(a1 + 8), *v6),
              **((_QWORD **)v5 + 2) = 0,
              (v6 = (uint64_t *)*((_QWORD *)v5 + 2)) != 0))
        {
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v6);
          *((_QWORD *)v5 + 2) = 0;
        }
      }
    }
    result = 0.0;
    a2[23] = 0u;
    a2[24] = 0u;
    a2[21] = 0u;
    a2[22] = 0u;
    a2[19] = 0u;
    a2[20] = 0u;
    a2[17] = 0u;
    a2[18] = 0u;
    a2[15] = 0u;
    a2[16] = 0u;
    a2[13] = 0u;
    a2[14] = 0u;
    a2[11] = 0u;
    a2[12] = 0u;
    a2[9] = 0u;
    a2[10] = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t BET3FLT__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  unsigned int *v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int **v31;
  int *v32;
  int v33;
  int v34;

  v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5)
    return 0;
  v9 = 2229280778;
  v10 = BET3FLT__ddcalloc(*(_QWORD **)(a1 + 8), *v5, 2);
  v11 = a2 + 40 * a3;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (int ***)(v11 + 8);
  if (v10)
  {
    v13 = heap_Calloc(*(_QWORD **)(a1 + 8), *v5, 8);
    v14 = a2 + 40 * a3;
    *(_QWORD *)(v14 + 16) = v13;
    v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(_QWORD *)**v12 = 0;
      **v15 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4);
      v16 = (_DWORD *)**v15;
      if (v16)
      {
        *v16 = 1065353216;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            v30 = 0;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v31 = *v12;
            v17 = v17;
            do
            {
              v32 = *v31;
              v33 = **v31;
              if (v30 > v33)
              {
                *v28 = v33;
                v30 = v33;
              }
              v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        v18 = 1;
        v19 = 1;
        while (1)
        {
          v20 = BET3FLT__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20)
            break;
          (*v15)[v19] += 4 * (v20 >> 1);
          v26 = (*v12)[v19];
          *v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17)
            goto LABEL_9;
        }
        BET3FLT__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

double BET3FLT__InitSMatrices(uint64_t a1, _OWORD *a2)
{
  double result;

  result = 0.0;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  *(_QWORD *)a2 = a1;
  return result;
}

double BET3FLT__FreeSMatrices(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  double result;

  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      v2 = *(uint64_t **)(a1 + 24);
      if (v2)
      {
        if (!*(_DWORD *)(a1 + 8))
        {
          BET3FLT__dd_free(*(_QWORD **)(*(_QWORD *)a1 + 8), v2);
          BET3FLT__dd_free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(uint64_t **)(a1 + 48));
          v3 = *(_QWORD *)(a1 + 40);
          if (v3)
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v3);
        }
        *(_DWORD *)(a1 + 60) = 0;
        result = 0.0;
        *(_OWORD *)(a1 + 44) = 0u;
        *(_OWORD *)(a1 + 28) = 0u;
        *(_OWORD *)(a1 + 12) = 0u;
      }
    }
  }
  return result;
}

uint64_t BET3FLT__InitPStreamSM(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a1;
  if (a2
    && *(_QWORD *)(a2 + 24)
    && *((_DWORD *)a1 + 3) == *(_DWORD *)(a2 + 12)
    && *((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 20))
  {
    result = 0;
    v6 = *(_OWORD *)(a2 + 48);
    v8 = *(_OWORD *)a2;
    v7 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a1 + 6) = v6;
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = v7;
LABEL_12:
    *((_DWORD *)a1 + 14) = 1;
    return result;
  }
  a1[6] = v4;
  v9 = (__int128 *)(a1 + 6);
  v10 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 14) = 0;
  *((_DWORD *)a1 + 15) = v10;
  v11 = *(uint64_t *)((char *)a1 + 20);
  a1[8] = v11;
  v12 = BET3FLT__ddcalloc(*(_QWORD **)(v4 + 8), 2 * (int)v11, v10);
  a1[9] = (uint64_t)v12;
  if (v12
    && (v13 = *((_DWORD *)a1 + 6),
        v14 = *((int *)a1 + 5),
        a1[10] = (uint64_t)&v12[v14],
        v15 = BET3FLT__ddcalloc(*(_QWORD **)(v4 + 8), v14, v13),
        (a1[12] = (uint64_t)v15) != 0)
    && (v16 = heap_Calloc(*(_QWORD **)(v4 + 8), (2 * *((_DWORD *)a1 + 5)), 4), (a1[11] = v16) != 0))
  {
    a1[13] = v16 + 4 * *((int *)a1 + 5);
    if (a2)
    {
      BET3FLT__FreeSMatrices(a2);
      result = 0;
      v17 = *v9;
      v18 = *((_OWORD *)a1 + 4);
      v19 = *((_OWORD *)a1 + 6);
      *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 5);
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)a2 = v17;
      *(_OWORD *)(a2 + 16) = v18;
      goto LABEL_12;
    }
    return 0;
  }
  else
  {
    BET3FLT__FreeSMatrices((uint64_t)(a1 + 6));
    return 2229280778;
  }
}

double BET3FLT__FreePStreamSM(uint64_t a1)
{
  return BET3FLT__FreeSMatrices(a1 + 48);
}

uint64_t BET3FLT__InitPStreamParam(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  a1[6] = (2 * *(_DWORD *)(*((_QWORD *)a1 + 4) + 32)) | 1;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (v5)
    {
      if (a1[5] == *(_DWORD *)(a2 + 20) && a1[4] == *(_DWORD *)(a2 + 16))
      {
        *((_QWORD *)a1 + 5) = v5;
        v6 = a1 + 2;
LABEL_12:
        result = 0;
        *v6 = 1;
        return result;
      }
    }
  }
  a1[2] = 0;
  v6 = a1 + 2;
  v7 = BET3FLT__ddcalloc(*(_QWORD **)(v4 + 8), a1[5], a1[4]);
  *((_QWORD *)a1 + 5) = v7;
  if (v7)
    result = 0;
  else
    result = 2229280778;
  if (a2 && v7)
  {
    BET3FLT__FreePStreamParam((_QWORD *)a2);
    memcpy((void *)a2, a1, 0x2D8uLL);
    goto LABEL_12;
  }
  return result;
}

_QWORD *BET3FLT__FreePStreamParam(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;

  if (*result)
  {
    v1 = result;
    v2 = (uint64_t *)result[5];
    if (v2)
    {
      if (!*((_DWORD *)result + 2))
        result = BET3FLT__dd_free(*(_QWORD **)(*result + 8), v2);
      v1[5] = 0;
      *((_DWORD *)v1 + 2) = 0;
    }
  }
  return result;
}

uint64_t select_float_bet3_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2229280769;
  result = 0;
  *a2 = &ISelect_Bet3;
  return result;
}

uint64_t select_bet3_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2229280775;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 25957;
  }
  return result;
}

uint64_t select_bet3_ClassClose()
{
  return 0;
}

uint64_t select_bet3_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t Object;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjOpen;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _OWORD v50[8];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v5 = 2229280775;
  memset(v50, 0, sizeof(v50));
  if (a5)
  {
    inited = InitRsrcFunction(a3, a4, &v48);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else if ((safeh_HandleCheck(a1, a2, 25957, 408) & 0x80000000) != 0)
    {
      return 2229280776;
    }
    else
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      log_OutText(*(_QWORD *)(v48 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjOpen", v12, v13, v14, v43);
      v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v48 + 8), 1, 6584);
      if (v15)
      {
        v20 = v15;
        *v15 = a3;
        v15[1] = a4;
        v21 = v48;
        v15[2] = v48;
        v15[3] = a1;
        Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v47);
        if ((Object & 0x80000000) != 0
          || (v20[4] = *(_QWORD *)(v47 + 8),
              Object = objc_GetObject(*(_QWORD *)(v48 + 48), (uint64_t)"LINGDB", &v47),
              (Object & 0x80000000) != 0))
        {
          v5 = Object;
          log_OutPublic(*(_QWORD *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55001, 0, v23, v24, v25, v26, v44);
        }
        else
        {
          v27 = *(_QWORD *)(v47 + 8);
          v20[5] = v27;
          ObjOpen = BET3FLT__select_bet3_FeatureExtractObjOpen(a3, a4, v20[4], v27, v20 + 7);
          if ((ObjOpen & 0x80000000) != 0)
            goto LABEL_27;
          ObjOpen = select_bet3_loc_CreateDataBrkString(v48, (char *)v50);
          if ((ObjOpen & 0x80000000) != 0)
            goto LABEL_27;
          v29 = v20[3];
          if (!v29 || (v30 = *(_QWORD *)(v29 + 48)) == 0)
            v30 = *(_QWORD *)(v20[2] + 48);
          ObjOpen = objc_GetAddRefCountedObject(v30, (uint64_t)v50, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))select_bet3_loc_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))select_bet3_loc_ObjcVoiceClose, v48, &v47);
          if ((ObjOpen & 0x80000000) != 0
            || (v31 = v48,
                v32 = *(_QWORD *)(v47 + 32),
                v20[6] = v32,
                ObjOpen = select_bet3_loc_SetSynthParams(v31, v32),
                (ObjOpen & 0x80000000) != 0))
          {
LABEL_27:
            v5 = ObjOpen;
          }
          else
          {
            v33 = *(_QWORD *)(v48 + 40);
            v45 = v20;
            v46 = xmmword_1EA948B10;
            v34 = paramc_ListenerAdd(v33, "frequencyhz", &v45);
            if ((v34 & 0x80000000) == 0)
            {
              v39 = 0;
              while (1)
              {
                v40 = off_1EA948AE8[v39];
                if ((paramc_ParamGetInt(*(_QWORD *)(v48 + 40), (uint64_t)v40, (int *)&v49) & 0x80000000) != 0)
                {
                  v49 = dword_1DECD78B8[v39];
                  v34 = paramc_ParamSetInt(*(_QWORD *)(v48 + 40), (uint64_t)v40, v49);
                  if ((v34 & 0x80000000) != 0)
                    break;
                }
                v34 = select_bet3_loc_ParamSet((uint64_t)v20, v40, v49);
                if ((v34 & 0x80000000) != 0)
                  break;
                v41 = *(_QWORD *)(v48 + 40);
                v45 = v20;
                v46 = xmmword_1EA948B10;
                v5 = paramc_ListenerAdd(v41, v40, &v45);
                if ((v5 & 0x80000000) != 0)
                  goto LABEL_32;
                if (++v39 == 3)
                {
                  *(_QWORD *)a5 = v20;
                  *(_DWORD *)(a5 + 8) = 25958;
                  goto LABEL_29;
                }
              }
            }
            v5 = v34;
LABEL_32:
            log_OutPublic(*(_QWORD *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55002, "%s%s", v35, v36, v37, v38, "param");
          }
        }
        *(_QWORD *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 25958;
        select_bet3_ObjClose(v20, *(_QWORD *)(a5 + 8));
        *(_QWORD *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v48 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v16, v17, v18, v19, v44);
        v5 = 2229280778;
      }
LABEL_29:
      log_OutText(*(_QWORD *)(v48 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjOpen: %x", v36, v37, v38, v5);
    }
  }
  return v5;
}

uint64_t select_bet3_ObjClose(_QWORD *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  int ObjClose;
  int v22;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 25958, 6584);
  if (v3 < 0)
    return 2229280776;
  LODWORD(v7) = v3;
  v8 = a1[2];
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjClose", v4, v5, v6, v30);
  for (i = 0; i != 4; ++i)
  {
    v10 = off_1EA948B20[i];
    v11 = *(_QWORD *)(v8 + 40);
    v31 = a1;
    v32 = xmmword_1EA948B10;
    v12 = paramc_ListenerRemove(v11, v10, (__int128 *)&v31);
    if ((int)v7 > -1 && v12 < 0)
      v7 = v12;
    else
      v7 = v7;
  }
  v14 = a1[6];
  if (v14)
  {
    v15 = a1[3];
    if (!v15 || (v16 = *(_QWORD *)(v15 + 48)) == 0)
      v16 = *(_QWORD *)(a1[2] + 48);
    v17 = objc_ReleaseObject(v16, v14);
    a1[6] = 0;
    if ((int)v7 > -1 && v17 < 0)
      v7 = v17;
    else
      v7 = v7;
  }
  v19 = a1[7];
  if (v19)
  {
    ObjClose = BET3FLT__select_bet3_FeatureExtractObjClose(v19);
    if ((int)v7 > -1 && ObjClose < 0)
      v7 = ObjClose;
    else
      v7 = v7;
  }
  if (a1[5])
  {
    v22 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v22 < 0)
      v7 = v22;
    else
      v7 = v7;
  }
  if (a1[4])
  {
    v24 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v24 < 0)
      v7 = v24;
    else
      v7 = v7;
  }
  heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjClose: %x", v26, v27, v28, v7);
  return v7;
}

uint64_t select_bet3_ObjReopen(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t DataBrkString;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v21, 0, sizeof(v21));
  if ((safeh_HandleCheck((uint64_t)a1, a2, 25958, 6584) & 0x80000000) != 0)
    return 2229280776;
  v6 = a1[2];
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjReopen", v3, v4, v5, v19);
  DataBrkString = select_bet3_loc_CreateDataBrkString(v6, (char *)v21);
  if ((DataBrkString & 0x80000000) == 0)
  {
    v11 = a1[3];
    if (!v11 || (v12 = *(_QWORD *)(v11 + 48)) == 0)
      v12 = *(_QWORD *)(a1[2] + 48);
    DataBrkString = objc_GetAddRefCountedObject(v12, (uint64_t)v21, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))select_bet3_loc_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))select_bet3_loc_ObjcVoiceClose, v6, &v20);
    if ((DataBrkString & 0x80000000) == 0)
    {
      v13 = a1[6];
      if (v13)
      {
        v14 = a1[3];
        if (!v14 || (v15 = *(_QWORD *)(v14 + 48)) == 0)
          v15 = *(_QWORD *)(a1[2] + 48);
        objc_ReleaseObject(v15, v13);
      }
      v16 = *(_QWORD *)(v20 + 32);
      a1[6] = v16;
      DataBrkString = select_bet3_loc_SetSynthParams(v6, v16);
    }
  }
  v17 = DataBrkString;
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjReopen: %x", v8, v9, v10, DataBrkString);
  return v17;
}

uint64_t select_bet3_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if ((safeh_HandleCheck(a1, a2, 25958, 6584) & 0x80000000) != 0)
    return 2229280776;
  synstrmaux_InitStreamOpener(a1 + 72, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sptchk;version=4.0",
    1,
    a1 + 928);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sgt;version=4.0", 1, a1 + 944);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-bet3-speech-frames;version=5.0",
    a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(_QWORD *)(a1 + 32), a3, a4);
  if ((v8 & 0x80000000) != 0)
    select_bet3_ProcessEnd(a1, a2);
  *(_DWORD *)(a1 + 6576) = 0;
  return v8;
}

uint64_t select_bet3_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v37;
  int v39;
  int v40;
  uint64_t inited;
  int v43;
  unsigned int v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int ProcessEnd;
  uint64_t v57;
  uint64_t v59;
  int v60;

  v60 = 0;
  if ((safeh_HandleCheck(a1, a2, 25958, 6584) & 0x80000000) != 0)
    return 2229280776;
  *a5 = 1;
  v9 = (_DWORD *)(a1 + 6544);
  v10 = *(_DWORD *)(a1 + 6544);
  if (*(_QWORD *)(a1 + 4616))
  {
    if (!v10)
    {
      v11 = BET3FLT__ParamGenFrames((uint64_t *)(a1 + 4616), (int *)(*(_QWORD *)(a1 + 48) + 8112), (_DWORD *)(a1 + 6544));
      if ((v11 & 0x80000000) != 0)
      {
        v25 = v11;
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 6552);
        if (!v12)
          goto LABEL_65;
        v13 = *(unsigned int *)(a1 + 6564);
        v14 = *(_DWORD *)(a1 + 6560);
        if (v14 <= v13)
          goto LABEL_65;
        v15 = v12 + 32 * v13;
        v16 = *(_DWORD *)(a1 + 5228);
        v17 = *(_DWORD *)(a1 + 5232);
        if (v17 >= v16)
        {
          v23 = 0;
          v20 = (_DWORD *)(v12 + 32 * v13);
        }
        else
        {
          v18 = 0;
          v19 = *(_DWORD *)(a1 + 6576);
          v20 = (_DWORD *)(v12 + 32 * v13);
          do
          {
            if (*v20 == 33)
            {
              v21 = *(_DWORD *)(a1 + 6572);
              v22 = *(_DWORD *)(*(_QWORD *)(a1 + 5216) + 528 * v17 + 24);
              v20[4] = v22;
              *(_DWORD *)(a1 + 6572) = v22 + v21;
              *(_DWORD *)(a1 + 5232) = ++v17;
            }
            else
            {
              if (*v20 == 8)
              {
                v19 = v20[6] / *(_DWORD *)(*(_QWORD *)(a1 + 48) + 152);
                *(_DWORD *)(a1 + 6576) = v19;
              }
              v21 = *(_DWORD *)(a1 + 6572);
              v20[4] = 0;
            }
            if (v19 > v21)
            {
              *(_DWORD *)(a1 + 6576) = v21;
              v19 = v21;
            }
            v20[3] = v21 - v19;
            v20 += 8;
            v23 = v18 + 1;
            if (v17 >= v16)
              break;
            v24 = v13 + 1 + v18++;
          }
          while (v24 < v14);
        }
        if (*v9)
        {
          v44 = v23 + v13;
          if (v23 + (int)v13 < v14)
          {
            v45 = *(_DWORD *)(a1 + 6572);
            v46 = v20 + 4;
            do
            {
              *(v46 - 1) = v45;
              *v46 = 0;
              v46 += 8;
              ++v44;
            }
            while (v44 < v14);
            v23 = v14 - v13;
          }
        }
        if (!v23)
        {
LABEL_65:
          v59 = a1 + 4616;
          v25 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), &v59, 8);
          if ((v25 & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, "%s%s%s%x", v52, v53, v54, v55, "contentType");
          }
          else if (*v9)
          {
            ProcessEnd = BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (_QWORD *)(a1 + 960));
            if (ProcessEnd >= 0)
              v25 = v25;
            else
              v25 = ProcessEnd;
            v57 = *(_QWORD *)(a1 + 6552);
            if (v57)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v57);
              *(_QWORD *)(a1 + 6552) = 0;
              *(_QWORD *)(a1 + 6560) = 0;
              *(_DWORD *)(a1 + 6568) = 0;
            }
            v43 = 1;
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        v47 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), v15, (32 * v23));
        if ((v47 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 6564) += v23;
          goto LABEL_65;
        }
        v25 = v47;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, "%s%s%s%x", v48, v49, v50, v51, "contentType");
        *(_DWORD *)(a1 + 6564) += v23;
      }
LABEL_74:
      v43 = 2;
      goto LABEL_75;
    }
  }
  else if (!v10)
  {
    goto LABEL_22;
  }
  BET3FLT__DeInitVStream((int *)(a1 + 4616));
  *v9 = 0;
LABEL_22:
  v25 = BET3FLT__select_bet3_FeatureExtractProcessStart(*(uint64_t **)(a1 + 56), *(_QWORD *)(a1 + 48) + 9184, a3, a4, (_QWORD *)(a1 + 960), &v60);
  if ((v25 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55005, "%s%x", v26, v27, v28, v29, "lhError");
  }
  else if (*(__int16 *)(a1 + 970) > 1)
  {
    *(_DWORD *)(a1 + 6564) = 0;
    inited = BET3FLT__InitVStream(*(_QWORD *)(a1 + 16), (char *)(a1 + 4616), (_DWORD *)(*(_QWORD *)(a1 + 48) + 128));
    if ((inited & 0x80000000) != 0
      || (*(_QWORD *)(a1 + 4624) = a1 + 960,
          inited = BET3FLT__LoadVStream(a1 + 4616, *(_QWORD *)(a1 + 48) + 8112, *(_QWORD *)(a1 + 48) + 128),
          (inited & 0x80000000) != 0)
      || (inited = BET3FLT__select_bet3_FeatureExtractProcess(*(uint64_t **)(a1 + 56), *(_QWORD *)(a1 + 48) + 128, a3, a4, *(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (unsigned int *)(a1 + 64), a1 + 960, (uint64_t *)(a1 + 6552), (_DWORD *)(a1 + 6560)), (inited & 0x80000000) != 0))
    {
      v25 = inited;
    }
    else
    {
      v25 = BET3FLT__ParamGenStart(a1 + 4616, (int *)(*(_QWORD *)(a1 + 48) + 8112), (int *)(*(_QWORD *)(a1 + 48) + 128));
      if ((v25 & 0x80000000) == 0)
      {
        v43 = 4;
LABEL_75:
        *a5 = v43;
        return v25;
      }
    }
    BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (_QWORD *)(a1 + 960));
    BET3FLT__DeInitVStream((int *)(a1 + 4616));
  }
  else
  {
    v30 = v60;
    if (v60)
    {
      if (*(_QWORD *)(a1 + 912))
      {
        if (*(_DWORD *)(a1 + 4480))
        {
          LODWORD(v25) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 104))();
          if ((v25 & 0x80000000) != 0)
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, "%s%s%s%x", v31, v32, v33, v34, "contentType");
        }
      }
      v35 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 72), *(_QWORD *)(a1 + 32));
      if (v35 < 0 && (int)v25 > -1)
        LODWORD(v25) = v35;
      v30 = 1;
    }
    *a5 = v30;
    v37 = BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (_QWORD *)(a1 + 960));
    if (v37 >= 0 || (int)v25 <= -1)
      v39 = v25;
    else
      v39 = v37;
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a3, a4);
    if (v39 > -1 && v40 < 0)
      return v40;
    else
      return v39;
  }
  return v25;
}

uint64_t select_bet3_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;

  if ((safeh_HandleCheck(a1, a2, 25958, 6584) & 0x80000000) != 0)
    return 2229280776;
  BET3FLT__DeInitVStream((int *)(a1 + 4616));
  *(_DWORD *)(a1 + 6544) = 0;
  BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (_QWORD *)(a1 + 960));
  v3 = *(_QWORD *)(a1 + 6552);
  if (v3)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v3);
    *(_QWORD *)(a1 + 6552) = 0;
    *(_QWORD *)(a1 + 6560) = 0;
    *(_DWORD *)(a1 + 6568) = 0;
  }
  *(_DWORD *)(a1 + 6572) = 0;
  return synstrmaux_CloseStreams((_WORD *)(a1 + 72), *(_QWORD *)(a1 + 32));
}

uint64_t select_bet3_loc_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t VData;
  __int128 v38;
  int v39;
  unsigned int v41;
  _OWORD __dst[26];
  void *__src;
  _QWORD *v44;
  char v45;
  _OWORD v46[5];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  __src = 0;
  memset(__dst, 0, 408);
  inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0)
    return inited;
  memcpy(__dst, __src, 0x198uLL);
  __dst[2] = *(_OWORD *)(a5 + 32);
  v44 = 0;
  *(_QWORD *)(a4 + 32) = 0;
  v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "FLT3", 1031, (uint64_t *)&v44);
  if (v11 < 0)
    return (v11 & 0x1FFFu) - 2065686528;
  v16 = heap_Calloc(*((_QWORD **)&__dst[0] + 1), 1, 37800);
  if (v16)
  {
    __strcpy_chk();
    __strcpy_chk();
    *(_QWORD *)&v17 = -1;
    *((_QWORD *)&v17 + 1) = -1;
    *(_OWORD *)(v16 + 11328) = v17;
    *(_OWORD *)(v16 + 11344) = v17;
    *(_OWORD *)(v16 + 11360) = v17;
    *(_OWORD *)(v16 + 11376) = v17;
    *(_OWORD *)(v16 + 11392) = v17;
    *(_OWORD *)(v16 + 11408) = v17;
    *(_OWORD *)(v16 + 11424) = v17;
    *(_OWORD *)(v16 + 11440) = v17;
    *(_OWORD *)(v16 + 11456) = v17;
    *(_OWORD *)(v16 + 11472) = v17;
    *(_OWORD *)(v16 + 11488) = v17;
    *(_OWORD *)(v16 + 11504) = v17;
    *(_OWORD *)(v16 + 11520) = v17;
    *(_OWORD *)(v16 + 11536) = v17;
    *(_OWORD *)(v16 + 11552) = v17;
    *(_OWORD *)(v16 + 11568) = v17;
    *(_OWORD *)(v16 + 12500) = v17;
    *(_OWORD *)(v16 + 12232) = v17;
    *(_OWORD *)(v16 + 12248) = v17;
    *(_OWORD *)(v16 + 12264) = v17;
    *(_OWORD *)(v16 + 12280) = v17;
    *(_OWORD *)(v16 + 12296) = v17;
    *(_OWORD *)(v16 + 12312) = v17;
    *(_OWORD *)(v16 + 12328) = v17;
    *(_OWORD *)(v16 + 12344) = v17;
    *(_OWORD *)(v16 + 12360) = v17;
    *(_OWORD *)(v16 + 12376) = v17;
    *(_OWORD *)(v16 + 12392) = v17;
    *(_OWORD *)(v16 + 12408) = v17;
    *(_OWORD *)(v16 + 12424) = v17;
    *(_OWORD *)(v16 + 12440) = v17;
    *(_OWORD *)(v16 + 12456) = v17;
    *(_OWORD *)(v16 + 12472) = v17;
    *(_OWORD *)(v16 + 12488) = v17;
    *(_OWORD *)(v16 + 12576) = v17;
    *(_OWORD *)(v16 + 12560) = v17;
    *(_DWORD *)(v16 + 11708) = 1;
    BET3FLT__InitVParam((_DWORD *)(v16 + 128));
    *(_QWORD *)&v18 = -1;
    *((_QWORD *)&v18 + 1) = -1;
    *(_OWORD *)(v16 + 8092) = v18;
    *(_OWORD *)(v16 + 8080) = v18;
    *(_OWORD *)(v16 + 8064) = v18;
    *(_OWORD *)(v16 + 8048) = v18;
    *(_OWORD *)(v16 + 8032) = v18;
    *(_OWORD *)(v16 + 8016) = v18;
    *(_OWORD *)(v16 + 8000) = v18;
    *(_OWORD *)(v16 + 7984) = v18;
    *(_OWORD *)(v16 + 7968) = v18;
    *(_OWORD *)(v16 + 7952) = v18;
    *(_OWORD *)(v16 + 7936) = v18;
    *(_OWORD *)(v16 + 7920) = v18;
    *(_OWORD *)(v16 + 7904) = v18;
    *(_OWORD *)(v16 + 7888) = v18;
    *(_OWORD *)(v16 + 7872) = v18;
    *(_OWORD *)(v16 + 7856) = v18;
    *(_OWORD *)(v16 + 7840) = v18;
    *(_OWORD *)(v16 + 7824) = v18;
    *(_OWORD *)(v16 + 7808) = v18;
    strcpy((char *)(v16 + 7792), "mlsa");
    memset(v46, 0, sizeof(v46));
    v20 = select_bet3_ParseRiff((uint64_t)__dst, v16, (uint64_t)v44, 0, (const char *)v46, 0, 0, v19);
    if ((v20 & 0x80000000) != 0)
    {
      VData = v20;
      v45 = 0;
      if (LOBYTE(v46[0]))
      {
        v39 = 0;
        do
        {
          __strcat_chk();
          __strcat_chk();
          ++v39;
        }
        while (*((_BYTE *)v46 + 5 * (unsigned __int16)v39));
      }
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET3", 55003, "%s%s%s%s%s%x", v21, v22, v23, v24, "file");
    }
    else if (*(_BYTE *)(v16 + 7519) && *(int *)(v16 + 260) > 0)
    {
      v25 = *(uint64_t **)(v16 + 11648);
      if (v25)
      {
        v26 = *v25;
        if (v26)
        {
          v27 = 0;
          v28 = 0;
          do
          {
            *(_QWORD *)(v16 + 8 * v27 + 5432) = v26;
            v27 = (unsigned __int16)++v28;
            v26 = *(_QWORD *)(*(_QWORD *)(v16 + 11648) + 8 * (unsigned __int16)v28);
          }
          while (v26);
        }
      }
      v29 = BET3FLT__InitVData((uint64_t)__dst, (void *)(v16 + 8112), (_DWORD *)(v16 + 128));
      if ((v29 & 0x80000000) != 0)
      {
        VData = v29;
      }
      else
      {
        VData = BET3FLT__LoadVData((uint64_t)__dst, v16 + 8112, v16 + 128);
        if ((VData & 0x80000000) == 0)
        {
          *(_WORD *)(v16 + 12762) = 1;
          *(_QWORD *)&v38 = 0x100000001;
          *((_QWORD *)&v38 + 1) = 0x100000001;
          *(_OWORD *)(v16 + 12352) = v38;
          *(_OWORD *)(v16 + 12368) = v38;
          *(_QWORD *)(v16 + 12384) = 0x100000001;
          *(_DWORD *)(v16 + 12396) = 1;
          *(_OWORD *)(v16 + 12412) = v38;
          *(_OWORD *)(v16 + 12428) = v38;
          *(_OWORD *)(v16 + 12444) = v38;
          *(_OWORD *)(v16 + 12460) = v38;
          *(_OWORD *)(v16 + 12476) = v38;
          *(_DWORD *)(v16 + 12492) = 1;
          *(_QWORD *)(v16 + 12496) = 0x100000001;
          *(_DWORD *)(v16 + 11934) = 33620481;
          *(_BYTE *)(v16 + 11961) = 1;
          *(_QWORD *)(v16 + 11939) = 0x101010101010101;
          *(_DWORD *)(v16 + 11983) = -1;
          *(_WORD *)(v16 + 11987) = -255;
          *(_QWORD *)(v16 + 11997) = 0x101010101010101;
          *(_QWORD *)(v16 + 11947) = 0x101010101010101;
          *(_QWORD *)(v16 + 12002) = 0x101010101010101;
          *(_QWORD *)(v16 + 12105) = 0x101010101010101;
          *(_QWORD *)(v16 + 12113) = 0x101010101010101;
          *(_QWORD *)(v16 + 12121) = 0x101010101010101;
          if ((*(_DWORD *)(v16 + 12288) & 0x80000000) == 0)
            *(_WORD *)(v16 + 11963) = 257;
          if ((*(_DWORD *)(v16 + 12304) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11965) = 1;
          if ((*(_DWORD *)(v16 + 12320) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11966) = 1;
          if ((*(_DWORD *)(v16 + 12324) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11967) = 1;
          if ((*(_DWORD *)(v16 + 12328) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11968) = 1;
          if ((*(_DWORD *)(v16 + 12332) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11969) = 1;
          if ((*(_DWORD *)(v16 + 12252) & 0x80000000) == 0)
            *(_WORD *)(v16 + 11957) = 257;
          if ((*(_DWORD *)(v16 + 12576) & 0x80000000) == 0 || (*(_DWORD *)(v16 + 12580) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11956) = 8;
          if ((*(_DWORD *)(v16 + 12256) & 0x80000000) == 0)
            *(_WORD *)(v16 + 11959) = 257;
          if (*(_DWORD *)(v16 + 11744))
            *(_BYTE *)(v16 + 11978) = 9;
          if ((*(_DWORD *)(v16 + 12352) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11997) = 1;
          if ((*(_DWORD *)(v16 + 12356) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11998) = 1;
          if ((*(_DWORD *)(v16 + 12360) & 0x80000000) == 0)
            *(_BYTE *)(v16 + 11999) = 1;
          *(_WORD *)(v16 + 12008) = 257;
          *(_DWORD *)(v16 + 12000) = 16843009;
          *(_DWORD *)(v16 + 12003) = 16843009;
        }
      }
    }
    else
    {
      VData = 2229280772;
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET3", 55006, "%s%s", v21, v22, v23, v24, "file");
    }
  }
  else
  {
    log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET3", 55000, 0, v12, v13, v14, v15, v41);
    VData = 2229280778;
  }
  if (v44)
  {
    ssftriff_reader_ObjClose(v44, v30, v31, v32, v33, v34, v35, v36);
    v44 = 0;
  }
  if ((VData & 0x80000000) != 0)
  {
    if ((VData & 0x7FF01FFF) == 0xA200014)
      VData = 2229280772;
    else
      VData = VData;
    select_bet3_loc_VoiceClose(__dst, v16);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v16;
  }
  return VData;
}

uint64_t select_bet3_loc_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  _QWORD *v6;

  v6 = 0;
  inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0)
    select_bet3_loc_VoiceClose(v6, *(_QWORD *)(a3 + 32));
  return inited;
}

uint64_t select_bet3_loc_ParamCheckChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t result;

  *a4 = 1;
  if (!strcmp(__s1, "frequencyhz"))
  {
    if (*(_QWORD *)(a1 + 896))
    {
      result = 2229280785;
      goto LABEL_7;
    }
  }
  else if (!strcmp(__s1, "waitfactor") && (LH_atoi(a3) & 0x80000000) != 0)
  {
    result = 2229280783;
LABEL_7:
    *a4 = 0;
    return result;
  }
  return 0;
}

uint64_t select_bet3_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;

  if (strcmp(__s1, "frequencyhz"))
  {
    if (!strcmp(__s1, "rate") || !strcmp(__s1, "waitfactor"))
    {
      v11 = 0;
      if (strcmp(__s1, "waitfactor")
        || (paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v11), v11 != 1))
      {
        v7 = (uint64_t)LH_atoi(a3);
        v8 = a1;
        v9 = __s1;
        return select_bet3_loc_ParamSet(v8, v9, v7);
      }
    }
    else if (!strcmp(__s1, "finalsentencefound"))
    {
      if ((unsigned __int16)LH_atou(a3) == 1)
      {
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", *(_DWORD *)(a1 + 64));
        return select_bet3_loc_ParamSet(a1, "waitfactor", 0);
      }
      v10 = 0;
      paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", &v10);
      v7 = v10;
      v9 = "waitfactor";
      v8 = a1;
      return select_bet3_loc_ParamSet(v8, v9, v7);
    }
    return 0;
  }
  if (*(_QWORD *)(a1 + 896))
    return 2229280785;
  else
    return 0;
}

uint64_t select_bet3_loc_CreateDataBrkString(uint64_t a1, char *a2)
{
  int Str;
  size_t v5;
  uint64_t v6;
  char *__s2;
  int v9;
  char __src[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  __s2 = 0;
  strcpy(a2, "select");
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &__s2);
  if (Str < 0)
    return Str & 0x1FFF | 0x84E02000;
  *(_WORD *)&a2[strlen(a2)] = 47;
  strcat(a2, __s2);
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voicemodel", &__s2);
  if (Str < 0)
    return Str & 0x1FFF | 0x84E02000;
  *(_WORD *)&a2[strlen(a2)] = 47;
  strcat(a2, __s2);
  Str = paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"frequencyhz", &v9);
  if (Str < 0)
    return Str & 0x1FFF | 0x84E02000;
  *(_WORD *)&a2[strlen(a2)] = 102;
  v5 = strlen(a2);
  LH_itoa(v9 / 1000, &a2[v5], 0xAu);
  v6 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &__s2);
  if ((v6 & 0x80000000) == 0)
  {
    if (__s2)
    {
      if (*__s2)
      {
        v6 = brokeraux_ComposeBrokerString(a1, a2, 0, 0, 0, 0, 0, __src, 0x80uLL);
        if ((v6 & 0x80000000) == 0)
          strcpy(a2, __src);
      }
    }
  }
  return v6;
}

uint64_t select_bet3_loc_SetSynthParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = a2 + 7808;
  v4 = paramc_ParamSetStr(*(_QWORD *)(a1 + 40), (uint64_t)"synth_type", (char *)(a2 + 7792));
  if ((v4 & 0x80000000) != 0)
  {
    v10 = v4;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%s%s%x", v5, v6, v7, v8, "parameter");
  }
  else
  {
    v9 = paramc_ParamSetPermanent(*(_QWORD *)(a1 + 40), (uint64_t)"mrcc_synthparam_ref_ptr", &v12, 8uLL);
    if ((v9 & 0x80000000) == 0)
    {
      v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicealpha", *(float *)(a2 + 128));
      if ((v9 & 0x80000000) == 0)
      {
        v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicebeta", *(float *)(a2 + 132));
        if ((v9 & 0x80000000) == 0)
        {
          v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicevol", *(float *)(a2 + 164));
          if ((v9 & 0x80000000) == 0)
          {
            v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicevuvrelamp", *(float *)(a2 + 140));
            if ((v9 & 0x80000000) == 0)
            {
              v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicemvfboost", *(float *)(a2 + 168));
              if ((v9 & 0x80000000) == 0)
              {
                v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicef0std", *(float *)(a2 + 176));
                if ((v9 & 0x80000000) == 0)
                {
                  v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicef0mean", *(float *)(a2 + 180));
                  if ((v9 & 0x80000000) == 0)
                  {
                    v9 = select_bet3_loc_SetSynthParamInt(a1, (uint64_t)"bet2voiceframesize", *(_DWORD *)(a2 + 152));
                    if ((v9 & 0x80000000) == 0)
                    {
                      v9 = select_bet3_loc_SetSynthParamInt(a1, (uint64_t)"bet2voiceorder", *(_DWORD *)(a2 + 144));
                      if ((v9 & 0x80000000) == 0)
                      {
                        v9 = select_bet3_loc_SetSynthParamArrayOfBet3_int32(a1, *(void **)(a2 + 7784), *(_DWORD *)(a2 + 144) + 1);
                        if ((v9 & 0x80000000) == 0)
                          return select_bet3_loc_SetSynthParamInt(a1, (uint64_t)"voicepitchavghz", *(_DWORD *)(a2 + 184));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return v9;
  }
  return v10;
}

uint64_t select_bet3_loc_ParamSet(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (strcmp(__s1, "waitfactor"))
    return 0;
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 64) = a3;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet3_ParseRiff(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t StringZ;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  float v51;
  float v52;
  float v54;
  float v55;
  float v56;
  float v58;
  float v60;
  float v62;
  float v63;
  uint64_t v69;
  char *v70;
  BOOL v155;
  int v156;
  uint64_t Position;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t ChunkData;
  unsigned int v173;
  size_t v174;
  int v175;
  unsigned int v176;
  unsigned __int8 *v177;
  unsigned int v178;
  char *v179;
  unsigned int v180;
  unsigned int v181;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  size_t v187;
  void *v188;
  uint64_t v189;
  unsigned int v190;
  _DWORD *v191;
  uint64_t v192;
  int *v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  int v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  unsigned __int16 v211;
  uint64_t v212;
  char *v213;
  unsigned int v214;
  unsigned __int16 v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  int RiffStringTable;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  _WORD *v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  _BYTE *v242;
  _BYTE *v243;
  _BYTE *v244;
  _BYTE *v245;
  void *v246;
  _BYTE *v247;
  void *v248;
  unsigned int v249;
  _QWORD *v250;
  _WORD *v251;
  char *__s1;
  char *__s;
  int v254;
  unsigned int v256;
  char *__dst;
  int v260[2];
  char *v261;
  unsigned int v262;
  char __src[4];
  unsigned __int8 v264;
  int v265;
  _BYTE v266[253];
  unsigned int v267[18];
  _BYTE v268[60];
  uint64_t v269;

  v254 = a7;
  v11 = a1;
  StringZ = 0;
  v269 = *MEMORY[0x1E0C80C00];
  __s = (char *)(a2 + 9786);
  v265 = 0;
  v264 = 0;
  *(_DWORD *)__src = 0;
  __dst = (char *)&a5[5 * a4];
  v246 = (void *)(a2 + 7484);
  v248 = (void *)(a2 + 11684);
  v250 = (_QWORD *)(a2 + 7784);
  __s1 = (char *)(a5 + 5);
  v237 = (uint64_t *)(a2 + 11656);
  v238 = (uint64_t *)(a2 + 11648);
  v241 = (uint64_t *)(a2 + 12520);
  v240 = (uint64_t *)(a2 + 12528);
  v239 = (uint64_t *)(a2 + 12536);
  v242 = (_BYTE *)(a2 + 11584);
  v243 = (_BYTE *)(a2 + 10557);
  v244 = (_BYTE *)(a2 + 10814);
  v245 = (_BYTE *)(a2 + 10300);
  v247 = (_BYTE *)(a2 + 10043);
  v251 = (_WORD *)(a2 + 37792);
  while ((StringZ & 0x80000000) == 0)
  {
    v13 = a3;
    v14 = ssftriff_reader_OpenChunk(a3, __src, (unsigned int *)&v265, 0, (uint64_t)a5, a6, a7, a8);
    LODWORD(v15) = v14;
    if ((v14 & 0x80000000) != 0)
    {
      StringZ = v14;
      break;
    }
    strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (!strcmp(a5, "FEEX"))
      {
        if (!(*(_DWORD *)__src ^ 0x54414356 | v264))
        {
          *(_QWORD *)v266 = 0;
          if (a6)
          {
            *(_QWORD *)v266 = a6 + ssftriff_reader_GetPosition(a3) - v254;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(a3, v265, v266, v25, v26, v27, v28, v29);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
          }
          v21 = v11;
          v22 = a2;
          v23 = a3;
          v24 = 2;
          goto LABEL_618;
        }
        if (!(*(_DWORD *)__src ^ 0x504F4256 | v264))
        {
          *(_QWORD *)v266 = 0;
          if (a6)
          {
            v41 = (const void *)(a6 + ssftriff_reader_GetPosition(a3) - v254);
            *(_QWORD *)v266 = v41;
          }
          else
          {
            v15 = ssftriff_reader_GetChunkData(a3, v265, v266, v25, v26, v27, v28, v29);
            if ((v15 & 0x80000000) != 0)
              return v15;
            v41 = *(const void **)v266;
          }
          if (v265 >= 0xF8)
            v187 = 248;
          else
            v187 = v265;
          v188 = v248;
          goto LABEL_642;
        }
        if (*(_DWORD *)__src ^ 0x33455250 | v264)
        {
          if (*(_DWORD *)__src ^ 0x33415254 | v264)
          {
            if (*(_DWORD *)__src ^ 0x334D4850 | v264)
              goto LABEL_727;
            *(_QWORD *)v266 = 0;
            if (a6)
            {
              v41 = (const void *)(a6 + ssftriff_reader_GetPosition(a3) - v254);
              *(_QWORD *)v266 = v41;
            }
            else
            {
              v15 = ssftriff_reader_GetChunkData(a3, v265, v266, v25, v26, v27, v28, v29);
              if ((v15 & 0x80000000) != 0)
                return v15;
              v41 = *(const void **)v266;
            }
            if (v265 >= 0x100)
              v187 = 256;
            else
              v187 = v265;
            v188 = v246;
LABEL_642:
            memcpy(v188, v41, v187);
          }
          else
          {
            *(_QWORD *)v266 = 0;
            if (a6)
            {
              *(_QWORD *)v266 = a6 + ssftriff_reader_GetPosition(a3) - v254;
            }
            else
            {
              v15 = ssftriff_reader_GetChunkData(a3, v265, v266, v25, v26, v27, v28, v29);
              if ((v15 & 0x80000000) != 0)
                return v15;
            }
            v214 = v265;
            if (v265 >= 2)
            {
              v215 = 0;
              do
              {
                if (*(unsigned __int16 *)(*(_QWORD *)v266 + 2 * v215) < 8u)
                {
                  *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(_QWORD *)v266 + 2 * v215) + 12560) = 1;
                }
                else
                {
                  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v183, v184, v185, *(unsigned __int16 *)(*(_QWORD *)v266 + 2 * v215));
                  v214 = v265;
                }
                ++v215;
              }
              while (v214 >> 1 > v215);
            }
          }
        }
        else
        {
          *(_QWORD *)v266 = 0;
          if (a6)
          {
            *(_QWORD *)v266 = a6 + ssftriff_reader_GetPosition(a3) - v254;
          }
          else
          {
            v15 = ssftriff_reader_GetChunkData(a3, v265, v266, v25, v26, v27, v28, v29);
            if ((v15 & 0x80000000) != 0)
              return v15;
          }
          v210 = v265;
          if (v265 >= 2)
          {
            v211 = 0;
            do
            {
              if (*(unsigned __int16 *)(*(_QWORD *)v266 + 2 * v211) < 0x47u)
              {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(_QWORD *)v266 + 2 * v211) + 12232) = 1;
              }
              else
              {
                log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v168, v169, v170, *(unsigned __int16 *)(*(_QWORD *)v266 + 2 * v211));
                v210 = v265;
              }
              ++v211;
            }
            while (v210 >> 1 > v211);
          }
        }
LABEL_691:
        v11 = a1;
        goto LABEL_730;
      }
      if (strcmp(a5, "STM3"))
      {
        if (*(_DWORD *)__src ^ 0x434E5953 | v264)
          goto LABEL_727;
        v267[0] = 0;
        *(_QWORD *)v268 = 0;
        if (a6)
        {
          v35 = a6 + ssftriff_reader_GetPosition(a3) - v254;
          *(_QWORD *)v268 = v35;
        }
        else
        {
          v165 = ssftriff_reader_GetChunkData(a3, v265, v268, v30, v31, v32, v33, v34);
          if ((v165 & 0x80000000) != 0)
          {
            StringZ = v165;
            v156 = 1;
            v249 = v165;
            goto LABEL_739;
          }
          v35 = *(_QWORD *)v268;
          v13 = a3;
        }
        v266[0] = 0;
        v267[0] = 256;
        StringZ = ssftriff_reader_ReadStringZ(v13, v35, v265, 0, v266, v267);
        if ((StringZ & 0x80000000) != 0)
          goto LABEL_600;
        if (*(_QWORD *)v266 == 0x59545F48544E5953 && *(_QWORD *)&v266[3] == 0x455059545F4854)
        {
          v167 = v267[0];
          v267[0] = 256;
          StringZ = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v268, v265, v167, v266, v267);
          if ((StringZ & 0x80000000) != 0)
          {
LABEL_600:
            v156 = 3;
            goto LABEL_739;
          }
          __strcpy_chk();
        }
        LODWORD(v15) = StringZ;
        goto LABEL_599;
      }
      v267[0] = 0;
      v42 = *(int *)(a2 + 260);
      if (*(_DWORD *)__src ^ 0x33435453 | v264)
      {
        v43 = a6;
        if (*(_DWORD *)__src ^ 0x33455254 | v264)
        {
          if (*(_DWORD *)__src ^ 0x33464450 | v264)
          {
            if (*(_DWORD *)__src ^ 0x334E4957 | v264)
            {
              if (*(_DWORD *)__src ^ 0x334B4243 | v264)
              {
                v44 = 0;
                goto LABEL_726;
              }
              v171 = a2 + 24 * (int)v42 + 5192;
            }
            else
            {
              v208 = a2 + 128 + 4 * v42;
              v209 = *(_DWORD *)(v208 + 304);
              v171 = a2 + 128 + 120 * (int)v42 + 24 * v209 + 3864;
              *(_DWORD *)(v208 + 304) = v209 + 1;
            }
          }
          else
          {
            *(_QWORD *)v268 = 0;
            if (a6)
            {
              v186 = a6 + ssftriff_reader_GetPosition(a3) - v254;
              *(_QWORD *)v268 = v186;
            }
            else
            {
              v216 = ssftriff_reader_GetChunkData(a3, v265, v268, v30, v31, v32, v33, v34);
              if ((v216 & 0x80000000) != 0)
              {
                StringZ = v216;
                v156 = 1;
                v249 = v216;
                goto LABEL_739;
              }
              v186 = *(_QWORD *)v268;
              v13 = a3;
            }
            v267[0] = 256;
            LODWORD(v15) = ssftriff_reader_ReadStringZ(v13, v186, v265, 0, v266, v267);
            if ((v15 & 0x80000000) != 0)
            {
              v171 = 0;
            }
            else
            {
              v217 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v266);
              v218 = a2 + 128 + 4 * v42;
              v219 = *(int *)(v218 + 344);
              *(_QWORD *)(a2 + 128 + 40 * (int)v42 + 8 * v219 + 1304) = v217;
              if ((v267[0] & 3) != 0)
                v267[0] -= v267[0] | 0xFFFFFFFC;
              v171 = a2 + 120 * (int)v42 + 24 * (int)v219 + 2792;
              *(_DWORD *)(v218 + 344) = v219 + 1;
            }
            v43 = a6;
          }
        }
        else
        {
          v171 = a2 + 24 * (int)v42 + 2552;
        }
        v44 = 1;
        if ((v15 & 0x80000000) == 0 && v171)
        {
          *(_QWORD *)v266 = 0;
          if (v43)
          {
            v220 = v43 + ssftriff_reader_GetPosition(a3) - v254;
            v13 = a3;
          }
          else
          {
            v13 = a3;
            v221 = ssftriff_reader_GetChunkData(a3, v265, v266, v30, v31, v32, v33, v34);
            LODWORD(v15) = v221;
            if ((v221 & 0x80000000) != 0)
            {
              v156 = 1;
              v249 = v221;
              StringZ = v221;
              goto LABEL_739;
            }
            v220 = *(_QWORD *)v266;
          }
          v222 = v267[0];
          *(_QWORD *)(v171 + 8) = v220 + v267[0];
          *(_DWORD *)(v171 + 16) = v265 - v222;
          v44 = 1;
        }
LABEL_726:
        v11 = a1;
        if (!v44)
          goto LABEL_727;
        goto LABEL_730;
      }
      LODWORD(v261) = 0;
      *(_QWORD *)v268 = 0;
      if (a6)
      {
        v164 = a6 + ssftriff_reader_GetPosition(a3) - v254;
        *(_QWORD *)v268 = v164;
      }
      else
      {
        v189 = ssftriff_reader_GetChunkData(a3, v265, v268, v30, v31, v32, v33, v34);
        LODWORD(v15) = v189;
        if ((v189 & 0x80000000) != 0)
        {
          v156 = 1;
          StringZ = v189;
          v249 = v189;
          goto LABEL_739;
        }
        v164 = *(_QWORD *)v268;
      }
      v190 = v267[0];
      v191 = (_DWORD *)(a2 + 4 * v42);
      v191[88] = *(_DWORD *)(v164 + v267[0]);
      v267[0] = v190 + 4;
      v192 = *(unsigned int *)(v164 + v190 + 4);
      v191[98] = v192;
      v267[0] = v190 + 8;
      v193 = v191 + 98;
      v191[568] = *(_BYTE *)(v164 + v190 + 8) != 0;
      v267[0] = v190 + 9;
      v191[558] = *(_DWORD *)(v164 + v190 + 9);
      v194 = v190 + 13;
      v267[0] = v190 + 13;
      if ((int)v192 < 1)
      {
LABEL_651:
        v266[0] = 0;
        LODWORD(v261) = 256;
        LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, v164, v265, v194, v266, (unsigned int *)&v261);
        if ((v15 & 0x80000000) == 0)
        {
          v198 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v266);
          v199 = (_QWORD *)(a2 + 8 * v42);
          v199[34] = v198;
          if (!v198)
          {
            v156 = 3;
            StringZ = 2229280778;
            goto LABEL_739;
          }
          v267[0] += v261;
          if (*v193 >= 1)
          {
            v200 = 0;
            v201 = v199 + 309;
            v202 = v199 + 289;
            while (1)
            {
              v266[0] = 0;
              LODWORD(v261) = 256;
              v203 = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v268, v265, v267[0], v266, (unsigned int *)&v261);
              if (v203 < 0)
                break;
              *(_QWORD *)(*v201 + 8 * v200) = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v266);
              if (!*(_QWORD *)(*v201 + 8 * v200))
                goto LABEL_722;
              v267[0] += v261;
              v266[0] = 0;
              LODWORD(v261) = 256;
              LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v268, v265, v267[0], v266, (unsigned int *)&v261);
              if ((v15 & 0x80000000) != 0)
                goto LABEL_725;
              *(_QWORD *)(*v202 + 8 * v200) = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v266);
              if (!*(_QWORD *)(*v202 + 8 * v200))
              {
LABEL_722:
                LODWORD(v15) = -2065686518;
                goto LABEL_725;
              }
              v267[0] += v261;
              if (++v200 >= *v193)
                goto LABEL_725;
            }
            LODWORD(v15) = v203;
          }
        }
      }
      else
      {
        v195 = heap_Calloc(*(_QWORD **)(a1 + 8), v192, 8);
        v196 = a2 + 8 * v42;
        *(_QWORD *)(v196 + 2472) = v195;
        if (!v195)
          LODWORD(v15) = -2065686518;
        if ((v15 & 0x80000000) == 0)
        {
          v197 = heap_Calloc(*(_QWORD **)(a1 + 8), *v193, 8);
          *(_QWORD *)(v196 + 2312) = v197;
          LODWORD(v15) = -2065686518;
          if (v197)
          {
            v164 = *(_QWORD *)v268;
            v194 = v267[0];
            goto LABEL_651;
          }
        }
      }
LABEL_725:
      v44 = 1;
      v13 = a3;
      goto LABEL_726;
    }
    if (a4)
    {
      if (strcmp(a5, "FEEX") || strcmp(__s1, "VCAT"))
      {
LABEL_727:
        v224 = 0;
        v266[0] = 0;
        do
        {
          __strcat_chk();
          __strcat_chk();
          ++v224;
        }
        while (a4 >= (unsigned __int16)v224);
        v11 = a1;
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown data: %s for %s", v225, v226, v227, (uint64_t)v266);
        goto LABEL_730;
      }
      *(_QWORD *)v266 = 0;
      if (a6)
      {
        *(_QWORD *)v266 = a6 + ssftriff_reader_GetPosition(a3) - v254;
      }
      else
      {
        v15 = ssftriff_reader_GetChunkData(a3, v265, v266, v36, v37, v38, v39, v40);
        if ((v15 & 0x80000000) != 0)
          return v15;
      }
      v11 = a1;
      if (*(_DWORD *)__src ^ 0x48504C41 | v264)
      {
        if (*(_DWORD *)__src ^ 0x43494F56 | v264)
        {
          if (*(_DWORD *)__src ^ 0x4F564F43 | v264)
          {
            if (*(_DWORD *)__src ^ 0x45464153 | v264)
            {
              if (*(_DWORD *)__src ^ 0x534F4C50 | v264)
              {
                if (*(_DWORD *)__src ^ 0x46464944 | v264)
                {
                  if (*(_DWORD *)__src ^ 0x464E4547 | v264)
                  {
                    if (*(_DWORD *)__src ^ 0x41474154 | v264)
                    {
                      if (*(_DWORD *)__src ^ 0x414F5442 | v264)
                        goto LABEL_727;
                      v230 = *(_WORD **)v266;
                      v231 = v265;
                      v232 = a1;
                      v233 = a3;
                      v234 = v237;
                    }
                    else
                    {
                      v230 = *(_WORD **)v266;
                      v231 = v265;
                      v232 = a1;
                      v233 = a3;
                      v234 = v238;
                    }
                    RiffStringTable = uselect_LoadRiffStringTable(v232, v233, v230, v231, v234);
                  }
                  else
                  {
                    RiffStringTable = select_bet3_LoadRiffGenericFeatureMap(a1, a3, *(unsigned __int16 **)v266, v265, v241, v240, v239);
                  }
                  goto LABEL_720;
                }
                *(_DWORD *)v268 = 64;
                v204 = *(_QWORD *)v266;
                v205 = v265;
                v206 = a3;
                v207 = v242;
              }
              else
              {
                *(_DWORD *)v268 = 257;
                v204 = *(_QWORD *)v266;
                v205 = v265;
                v206 = a3;
                v207 = v243;
              }
            }
            else
            {
              *(_DWORD *)v268 = 257;
              v204 = *(_QWORD *)v266;
              v205 = v265;
              v206 = a3;
              v207 = v244;
            }
          }
          else
          {
            *(_DWORD *)v268 = 257;
            v204 = *(_QWORD *)v266;
            v205 = v265;
            v206 = a3;
            v207 = v245;
          }
        }
        else
        {
          *(_DWORD *)v268 = 257;
          v204 = *(_QWORD *)v266;
          v205 = v265;
          v206 = a3;
          v207 = v247;
        }
        RiffStringTable = ssftriff_reader_ReadStringZ(v206, v204, v205, 0, v207, (unsigned int *)v268);
LABEL_720:
        LODWORD(v15) = RiffStringTable;
        goto LABEL_730;
      }
      *(_DWORD *)v268 = 257;
      LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v266, v265, 0, __s, (unsigned int *)v268);
      if ((v15 & 0x80000000) == 0)
      {
        *((_WORD *)__s + 947) = 255;
        if (*__s)
        {
          v173 = 0;
          v174 = 0;
          v175 = 0;
          v176 = 255;
          do
          {
            v177 = (unsigned __int8 *)(a2 + v174 + 9786);
            v178 = *v177;
            if (v178 >= v176)
            {
              v180 = *v177;
              v179 = __s;
            }
            else
            {
              v179 = __s;
              __s[1894] = v178;
              v180 = *v177;
              v176 = v178;
            }
            if (v180 <= v173)
            {
              v181 = v180;
            }
            else
            {
              v179[1895] = v180;
              v181 = *v177;
              v173 = v180;
            }
            *(_BYTE *)(a2 + v181 + 11328) = v175;
            v174 = (v175 + 1);
            v182 = strlen(v179);
            v175 = v174;
          }
          while (v182 > v174);
        }
      }
      v13 = a3;
      v11 = a1;
    }
    else
    {
      if (*(_DWORD *)__src ^ 0x47464356 | v264)
      {
        if (!(*(_DWORD *)__src ^ 0x41555145 | v264))
        {
          LODWORD(v15) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * (unsigned __int16)*v251 + 37584), v250, v16, v17, v18, v19, v20);
          v11 = a1;
          if ((v15 & 0x80000000) == 0)
            ++*v251;
LABEL_599:
          v13 = a3;
          goto LABEL_730;
        }
        v11 = a1;
        if (!(*(_DWORD *)__src ^ 0x58454546 | v264))
          goto LABEL_11;
        if (*(_DWORD *)__src ^ 0x334D5453 | v264)
        {
          if (*(_DWORD *)__src ^ 0x544E5953 | v264)
            goto LABEL_727;
LABEL_11:
          v21 = a1;
          v22 = a2;
          v23 = a3;
          v24 = 1;
LABEL_618:
          LODWORD(v15) = select_bet3_ParseRiff(v21, v22, v23, v24, a5, 0, 0);
          goto LABEL_730;
        }
        Position = ssftriff_reader_GetPosition(a3);
        *(_QWORD *)v266 = 0;
        v163 = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * (unsigned __int16)*v251 + 37584), v266, v158, v159, v160, v161, v162);
        if (v163 < 0)
        {
          LODWORD(v15) = v163;
        }
        else
        {
          ++*v251;
          LODWORD(v15) = select_bet3_ParseRiff(a1, a2, a3, 1, a5, *(_QWORD *)v266, Position);
          ++*(_DWORD *)(a2 + 260);
        }
        v13 = a3;
        goto LABEL_691;
      }
      v262 = 0;
      *(_QWORD *)v260 = 0;
      v261 = 0;
      if (a6)
      {
        *(_QWORD *)v260 = a6 + ssftriff_reader_GetPosition(a3) - v254;
      }
      else
      {
        v45 = ssftriff_reader_GetChunkData(a3, v265, v260, v16, v17, v18, v19, v20);
        LODWORD(v15) = v45;
        if ((v45 & 0x80000000) != 0)
        {
          v156 = 1;
          StringZ = v45;
          goto LABEL_682;
        }
      }
      v11 = a1;
      v46 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), "PHRASE");
      *(_QWORD *)(a2 + 208) = v46;
      if (!v46)
      {
        v156 = 3;
        LODWORD(v15) = v249;
        StringZ = 2229280778;
        goto LABEL_682;
      }
      *(_DWORD *)(a2 + 216) = 1000;
      v47 = v265;
      if (v265)
      {
        v48 = 0;
        do
        {
          v266[0] = 0;
          v268[0] = 0;
          v262 = 64;
          LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v260, v47, v48, v268, &v262);
          if ((v15 & 0x80000000) == 0 && v48 < v265)
          {
            v48 += v262;
            v262 = 256;
            LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v260, v265, v48, v266, &v262);
          }
          if ((v15 & 0x80000000) != 0)
            break;
          v256 = v262;
          strcpy((char *)v267, "bet3voiceoverride.");
          __strcat_chk();
          if ((paramc_ParamGetStr(*(_QWORD *)(v11 + 40), (uint64_t)v267, &v261) & 0x80000000) != 0
            || (v49 = v261) == 0
            || !*v261)
          {
            v49 = v266;
            v261 = v266;
          }
          if (*(_DWORD *)v268 == 1213221953 && *(unsigned __int16 *)&v268[4] == 65)
          {
            v51 = atof(v49);
            *(float *)(a2 + 128) = v51;
          }
          if (!(*(_DWORD *)v268 ^ 0x41544542 | v268[4]))
          {
            v52 = atof(v49);
            *(float *)(a2 + 132) = v52;
          }
          if (*(_QWORD *)v268 == 0x5F4C45525F565556 && *(unsigned int *)&v268[8] == 5262657)
          {
            v54 = atof(v49);
            *(float *)(a2 + 140) = v54;
          }
          if (*(_DWORD *)v268 == 5195858)
          {
            v55 = atof(v49);
            *(float *)(a2 + 160) = v55;
          }
          if (*(_DWORD *)v268 == 5001046)
          {
            v56 = atof(v49);
            *(float *)(a2 + 164) = v56;
          }
          if (*(_QWORD *)v268 == 0x534F4F425F46564DLL && *(unsigned __int16 *)&v268[8] == 84)
          {
            v58 = atof(v49);
            *(float *)(a2 + 168) = v58;
          }
          if (*(_DWORD *)v268 == 1381969990 && *(_DWORD *)&v268[3] == 5195858)
          {
            v60 = atof(v49);
            *(float *)(a2 + 172) = v60;
          }
          if (*(_DWORD *)v268 == 1398747206 && *(_DWORD *)&v268[3] == 4478035)
          {
            v62 = atof(v49);
            *(float *)(a2 + 176) = v62;
          }
          if (*(_QWORD *)v268 == 0x4E41454D5F3046)
          {
            v63 = atof(v49);
            *(float *)(a2 + 180) = v63;
          }
          if (!(*(unsigned __int16 *)v268 ^ 0x5346 | v268[2]))
            *(_DWORD *)(a2 + 136) = LH_atoi(v49);
          if (*(_DWORD *)v268 == 1162105423 && *(unsigned __int16 *)&v268[4] == 82)
            *(_DWORD *)(a2 + 144) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x49535F454D415246 && *(_QWORD *)&v268[3] == 0x455A49535F454DLL)
            *(_DWORD *)(a2 + 152) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x465F484345455053 && *(_QWORD *)&v268[7] == 0x4E41454D5F3046)
            *(_DWORD *)(a2 + 184) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x495241565F464450
            && *(_QWORD *)&v268[8] == 0x5059545F45434E41
            && *(unsigned __int16 *)&v268[16] == 69)
          {
            *(_DWORD *)(a2 + 200) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x52454B41455242)
          {
            v69 = *(_QWORD *)(a2 + 208);
            if (v69)
              heap_Free(*(_QWORD **)(a1 + 8), v69);
            v70 = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v261);
            *(_QWORD *)(a2 + 208) = v70;
            if (!v70)
            {
              LODWORD(v15) = -2065686518;
              v11 = a1;
              break;
            }
          }
          if (*(_QWORD *)v268 == 0x474E454C5F4B5242 && *(_QWORD *)&v268[3] == 0x4854474E454C5FLL)
            *(_DWORD *)(a2 + 216) = LH_atoi(v261);
          if (*(_DWORD *)v268 == 1598771778 && *(_DWORD *)&v268[3] == 4412511)
            *(_DWORD *)(a2 + 220) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x4441505A5F4B5242 | v268[8]))
            *(_DWORD *)(a2 + 224) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x54535F4E474C41)
            *(_DWORD *)(a2 + 240) = LH_atoi(v261) != 0;
          if (*(_QWORD *)v268 == 0x48505F4E474C41)
            *(_DWORD *)(a2 + 244) = LH_atoi(v261) != 0;
          if (*(_DWORD *)v268 == 1314476886 && *(_DWORD *)&v268[3] == 4740174)
            *(_QWORD *)(a2 + 7776) = BET3FLT__heap_StrDup(*(_QWORD **)(a1 + 8), v261);
          if (*(_DWORD *)v268 == 1398031942 && *(unsigned __int16 *)&v268[4] == 90)
            *(_DWORD *)(a2 + 7808) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x4E41454D5F4E45)
            *(_DWORD *)(a2 + 7812) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x5F4E455F44454546
            && *(_QWORD *)&v268[8] == 0x4F4F4C5F4E41454DLL
            && *(_QWORD *)&v268[15] == 0x44414548414B4FLL)
          {
            *(_DWORD *)(a2 + 7820) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x56555F544E554F43
            && *(_QWORD *)&v268[8] == 0x434E41545349445FLL
            && *(unsigned __int16 *)&v268[16] == 69)
          {
            *(_DWORD *)(a2 + 7816) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x525F454C504D4153 && *(unsigned int *)&v268[8] == 4543553)
            *(_DWORD *)(a2 + 7824) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x455F524150504D41 && *(_QWORD *)&v268[6] == 0x594752454E455FLL)
            *(_DWORD *)(a2 + 7828) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x535F524150504D41 && *(unsigned int *)&v268[8] == 4545097)
            *(_DWORD *)(a2 + 7832) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x465F524150435053 && *(_QWORD *)&v268[8] == 0x50524157514552)
            *(_DWORD *)(a2 + 7836) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x455F524150504D41
            && *(_QWORD *)&v268[8] == 0x415F45434E41484ELL
            && *(_QWORD *)&v268[13] == 0x4148504C415F45)
          {
            *(_DWORD *)(a2 + 7840) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x455F524150504D41
            && *(_QWORD *)&v268[8] == 0x415F45434E41484ELL
            && *(_QWORD *)&v268[16] == 0x564E555F4148504CLL
            && *(_QWORD *)&v268[22] == 0x444543494F564ELL)
          {
            *(_DWORD *)(a2 + 7844) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x49535F454D415246 && *(_QWORD *)&v268[8] == 0x4343524D5F455ALL)
            *(_DWORD *)(a2 + 7848) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x5F5348505F4E5953
            && *(_QWORD *)&v268[8] == 0x555F504152545845
            && *(_QWORD *)&v268[11] == 0x4553555F504152)
          {
            *(_DWORD *)(a2 + 7852) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x53494F4E5F4E5953
            && *(_QWORD *)&v268[8] == 0x545F514552465F45
            && *(unsigned __int16 *)&v268[16] == 72)
          {
            *(_DWORD *)(a2 + 7856) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x514552465F4E5953
            && *(_QWORD *)&v268[8] == 0x53555F4553494F4ELL
            && *(unsigned __int16 *)&v268[16] == 69)
          {
            *(_DWORD *)(a2 + 7860) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x514552465F4E5953
            && *(_QWORD *)&v268[8] == 0x564D5F4553494F4ELL
            && *(_QWORD *)&v268[14] == 0x4553555F46564DLL)
          {
            *(_DWORD *)(a2 + 7864) = LH_atoi(v261);
          }
          if (!(*(_QWORD *)v268 ^ 0x514552465F4E5953 | *(_QWORD *)&v268[8] ^ 0x4F4C5F4553494F4ELL | v268[16]))
            *(_DWORD *)(a2 + 7868) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x514552465F4E5953 | *(_QWORD *)&v268[8] ^ 0x49485F4553494F4ELL | v268[16]))
            *(_DWORD *)(a2 + 7872) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x494E555F4553494FLL
            && *(_QWORD *)&v268[13] == 0x4D524F46494E55)
          {
            *(_DWORD *)(a2 + 7876) = LH_atoi(v261);
          }
          if (!(*(_QWORD *)v268 ^ 0x4E5855415F4E5953 | *(_QWORD *)&v268[8] ^ 0x4553555F4553494FLL | v268[16]))
            *(_DWORD *)(a2 + 7880) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x46564D5F4553494FLL
            && *(_QWORD *)&v268[13] == 0x4553555F46564DLL)
          {
            *(_DWORD *)(a2 + 7884) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x58494D5F4553494FLL
            && *(_QWORD *)&v268[16] == 0x4F4C5F4D524148)
          {
            *(_DWORD *)(a2 + 7888) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x58494D5F4553494FLL
            && *(_QWORD *)&v268[16] == 0x49485F4D524148)
          {
            *(_DWORD *)(a2 + 7892) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x5345525F4553494FLL
            && *(_DWORD *)&v268[16] == 5196895)
          {
            *(_DWORD *)(a2 + 7896) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x5345525F4553494FLL
            && *(_DWORD *)&v268[16] == 4802655)
          {
            *(_DWORD *)(a2 + 7900) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x47494C415F4E5953
            && *(_QWORD *)&v268[8] == 0x46464F5455435F4ELL
            && *(_QWORD *)&v268[14] == 0x514552465F4646)
          {
            *(_DWORD *)(a2 + 7904) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x554245445F4E5953
            && *(_QWORD *)&v268[8] == 0x45434F52505F5A5ALL
            && *(_QWORD *)&v268[15] == 0x46564D5F535345)
          {
            *(_DWORD *)(a2 + 7908) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x415F524150504D41
            && *(_QWORD *)&v268[8] == 0x455441554E455454
            && *(_DWORD *)&v268[16] == 5657951)
          {
            *(_DWORD *)(a2 + 7912) = LH_atoi(v261);
          }
          if (!(*(_QWORD *)v268 ^ 0x50494B535F4E5953 | *(_QWORD *)&v268[8] ^ 0x41485F4B4145575FLL | *(_QWORD *)&v268[16] ^ 0x4F495441525F4D52 | v268[24]))
            *(_DWORD *)(a2 + 7916) = LH_atoi(v261);
          if (!strcmp(v268, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN"))
            *(_DWORD *)(a2 + 7940) = LH_atoi(v261);
          if (!strcmp(v268, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR"))
            *(_DWORD *)(a2 + 7944) = LH_atoi(v261);
          if (!strcmp(v268, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR"))
            *(_DWORD *)(a2 + 7948) = LH_atoi(v261);
          if (!strcmp(v268, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR"))
            *(_DWORD *)(a2 + 7952) = LH_atoi(v261);
          if (!strcmp(v268, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN"))
            *(_DWORD *)(a2 + 7956) = LH_atoi(v261);
          if (!strcmp(v268, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN"))
            *(_DWORD *)(a2 + 7960) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x554245445F4E5953 | *(_QWORD *)&v268[8] ^ 0x45434F52505F5A5ALL | *(_QWORD *)&v268[16] ^ 0x305F46564D5F5353 | v268[24]))
            *(_DWORD *)(a2 + 7964) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x554245445F4E5953 | *(_QWORD *)&v268[8] ^ 0x45434F52505F5A5ALL | *(_QWORD *)&v268[16] ^ 0x315F46564D5F5353 | v268[24]))
            *(_DWORD *)(a2 + 7968) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x554245445F4E5953 | *(_QWORD *)&v268[8] ^ 0x45434F52505F5A5ALL | *(_QWORD *)&v268[16] ^ 0x325F46564D5F5353 | v268[24]))
            *(_DWORD *)(a2 + 7972) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x554245445F4E5953 | *(_QWORD *)&v268[8] ^ 0x45434F52505F5A5ALL | *(_QWORD *)&v268[16] ^ 0x335F46564D5F5353 | v268[24]))
            *(_DWORD *)(a2 + 7976) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x425F524150504D41 && *(_DWORD *)&v268[8] == 5461065)
            *(_DWORD *)(a2 + 7980) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x555F524150534850 && *(_QWORD *)&v268[3] == 0x4553555F524150)
            *(_DWORD *)(a2 + 7984) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x555F524150504D41 && *(_QWORD *)&v268[3] == 0x4553555F524150)
            *(_DWORD *)(a2 + 7988) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x32474F4C5F455355 | v268[8]))
            *(_DWORD *)(a2 + 7992) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x455F524150504D41
            && *(_QWORD *)&v268[8] == 0x505F45434E41484ELL
            && *(_QWORD *)&v268[14] == 0x435053574F505FLL)
          {
            *(_DWORD *)(a2 + 7996) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x5454415F4553494FLL
            && *(_QWORD *)&v268[15] == 0x455441554E4554)
          {
            *(_DWORD *)(a2 + 8000) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x5454415F4553494FLL
            && *(_QWORD *)&v268[16] == 0x4C5F455441554E45
            && *(unsigned __int16 *)&v268[24] == 79)
          {
            *(_DWORD *)(a2 + 8004) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4E5855415F4E5953
            && *(_QWORD *)&v268[8] == 0x5454415F4553494FLL
            && *(_QWORD *)&v268[16] == 0x485F455441554E45
            && *(unsigned __int16 *)&v268[24] == 73)
          {
            *(_DWORD *)(a2 + 8008) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4C5050415F4E5953 && *(_QWORD *)&v268[8] == 0x504D4545445F59)
            *(_DWORD *)(a2 + 8012) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x525F49485F4E5953 | *(_QWORD *)&v268[8] ^ 0x4E47494C415F5345 | v268[16]))
            *(_DWORD *)(a2 + 8016) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x545341465F4E5953
            && *(_QWORD *)&v268[8] == 0x5241485F5855415FLL
            && *(unsigned __int16 *)&v268[16] == 77)
          {
            *(_DWORD *)(a2 + 8020) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x5F5849465F4E5953 && *(_DWORD *)&v268[8] == 4279375)
            *(_DWORD *)(a2 + 8024) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x475F43445F4E5953
            && *(_QWORD *)&v268[8] == 0x494F565F44524155
            && *(_DWORD *)&v268[16] == 4474179)
          {
            *(_DWORD *)(a2 + 8028) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x475F43445F4E5953
            && *(_QWORD *)&v268[8] == 0x564E555F44524155
            && *(_QWORD *)&v268[14] == 0x444543494F564ELL)
          {
            *(_DWORD *)(a2 + 8032) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x5551594E5F4E5953
            && *(_QWORD *)&v268[8] == 0x524155475F545349
            && *(unsigned __int16 *)&v268[16] == 68)
          {
            *(_DWORD *)(a2 + 8036) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x535F524150534850 && *(unsigned int *)&v268[8] == 4545097)
            *(_DWORD *)(a2 + 8040) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x465F524150534850 && *(unsigned int *)&v268[8] == 5261644)
            *(_DWORD *)(a2 + 8044) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x455F524150504D41
            && *(_QWORD *)&v268[8] == 0x4F4E5F594752454ELL
            && *(_QWORD *)&v268[14] == 0x48545F4D524F4ELL)
          {
            *(_DWORD *)(a2 + 8048) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x465F524150435053
            && *(_QWORD *)&v268[8] == 0x5F50524157514552
            && *(_QWORD *)&v268[14] == 0x4148504C415F50)
          {
            *(_DWORD *)(a2 + 8052) = LH_atoi(v261);
          }
          if (!(*(_QWORD *)v268 ^ 0x5F5348505F4E5953 | *(_QWORD *)&v268[8] ^ 0x49575F4E47494C41 | *(_QWORD *)&v268[16] ^ 0x54534E4F435F4854 | v268[24]))
            *(_DWORD *)(a2 + 8056) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x4E5855415F4E5953 | *(_QWORD *)&v268[8] ^ 0x524F4E5F4553494FLL | *(_QWORD *)&v268[16] ^ 0x4C41424F4C475F4DLL | v268[24]))
            *(_DWORD *)(a2 + 8060) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x4D4545445F4E5953 && *(_QWORD *)&v268[7] == 0x46454F435F504DLL)
            *(_DWORD *)(a2 + 8064) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x5F4553555F4E5953 | *(_QWORD *)&v268[8] ^ 0x4F4D5F4553494F4ELL | *(_QWORD *)&v268[16] ^ 0x4E4F4954414C5544 | v268[24]))
            *(_DWORD *)(a2 + 8068) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x53494F4E5F4E5953
            && *(_QWORD *)&v268[8] == 0x414C55444F4D5F45
            && *(_QWORD *)&v268[16] == 0x4341465F4E4F4954
            && *(_DWORD *)&v268[24] == 5394260)
          {
            *(_DWORD *)(a2 + 8072) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x4D4152465F58414DLL && *(_QWORD *)&v268[7] == 0x455A49535F454DLL)
            *(_DWORD *)(a2 + 8076) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x4D4152465F4E494DLL && *(_QWORD *)&v268[7] == 0x455A49535F454DLL)
            *(_DWORD *)(a2 + 8080) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x5F5446465F4E494DLL && *(_QWORD *)&v268[5] == 0x455A49535F5446)
            *(_DWORD *)(a2 + 8084) = LH_atoi(v261);
          if (*(_QWORD *)v268 == 0x49535F454D415246
            && *(_QWORD *)&v268[8] == 0x4E5F434E495F455ALL
            && *(_QWORD *)&v268[11] == 0x4D554E5F434E49)
          {
            *(_DWORD *)(a2 + 8088) = LH_atoi(v261);
          }
          if (*(_QWORD *)v268 == 0x49535F454D415246
            && *(_QWORD *)&v268[8] == 0x4E5F4345445F455ALL
            && *(_QWORD *)&v268[11] == 0x4D554E5F434544)
          {
            *(_DWORD *)(a2 + 8092) = LH_atoi(v261);
          }
          v155 = *(_QWORD *)v268 == 0x5446465F4C414E41 && *(_QWORD *)&v268[6] == 0x455A49535F5446;
          v11 = a1;
          if (v155)
            *(_DWORD *)(a2 + 8096) = LH_atoi(v261);
          if (!(*(_QWORD *)v268 ^ 0x455A49535F544646 | v268[8]))
            *(_DWORD *)(a2 + 8100) = LH_atoi(v261);
          v48 += v256;
          v47 = v265;
        }
        while (v48 < v265);
      }
      strcpy((char *)v267, "bet3voiceoverride.");
      __strcat_chk();
      v13 = a3;
      if ((paramc_ParamGetStr(*(_QWORD *)(v11 + 40), (uint64_t)v267, &v261) & 0x80000000) == 0)
      {
        v212 = *(_QWORD *)(a2 + 208);
        if (v212)
        {
          heap_Free(*(_QWORD **)(v11 + 8), v212);
          *(_QWORD *)(a2 + 208) = 0;
        }
        v213 = BET3FLT__heap_StrDup(*(_QWORD **)(v11 + 8), v261);
        *(_QWORD *)(a2 + 208) = v213;
        if (!v213)
        {
          v156 = 3;
          LODWORD(v15) = v249;
          StringZ = 2229280778;
LABEL_682:
          v249 = v15;
LABEL_739:
          if (v156 != 3)
            return v249;
          break;
        }
      }
      strcpy((char *)v267, "bet3voiceoverride.");
      __strcat_chk();
      if ((paramc_ParamGetStr(*(_QWORD *)(v11 + 40), (uint64_t)v267, &v261) & 0x80000000) == 0)
        *(_DWORD *)(a2 + 216) = LH_atoi(v261);
    }
LABEL_730:
    v228 = ssftriff_reader_CloseChunk(v13);
    if ((int)v15 > -1 && v228 < 0)
      StringZ = v228;
    else
      StringZ = v15;
  }
  if ((StringZ & 0x1FFF) == 0x14)
    v235 = 0;
  else
    v235 = StringZ;
  v15 = StringZ;
  if ((v235 & 0x80000000) == 0)
  {
    *__dst = 0;
    return v235;
  }
  return v15;
}

_QWORD *select_bet3_loc_VoiceClose(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  unint64_t v28;

  if (a2)
  {
    v3 = (uint64_t)result;
    v4 = *(uint64_t **)(a2 + 11648);
    if (v4 && *v4)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        *(_QWORD *)(a2 + 8 * v5 + 5432) = 0;
        v4 = *(uint64_t **)(a2 + 11648);
        v5 = v6;
      }
      while (v4[v6++]);
    }
    uselect_FreeRiffStringTable(result, v4);
    uselect_FreeRiffStringTable((_QWORD *)v3, *(uint64_t **)(a2 + 11656));
    v8 = *(uint64_t **)(a2 + 12520);
    v9 = *(uint64_t ***)(a2 + 12528);
    v10 = *(uint64_t **)(a2 + 12536);
    if (v8)
    {
      v11 = *v8;
      if (*v8)
      {
        v12 = 0;
        do
        {
          heap_Free(*(_QWORD **)(v3 + 8), v11);
          v11 = v8[(unsigned __int16)++v12];
        }
        while (v11);
      }
      heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v8);
    }
    if (v9)
    {
      v13 = *v9;
      if (*v9)
      {
        v14 = 0;
        v15 = v9;
        do
        {
          v16 = *v13;
          if (*v13)
          {
            v17 = 0;
            do
            {
              heap_Free(*(_QWORD **)(v3 + 8), v16);
              ++v17;
              v13 = *v15;
              v16 = (*v15)[(unsigned __int16)v17];
            }
            while (v16);
          }
          heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v13);
          v15 = &v9[(unsigned __int16)++v14];
          v13 = *v15;
        }
        while (*v15);
      }
      heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v9);
    }
    if (v10)
    {
      v18 = *v10;
      if (*v10)
      {
        v19 = 0;
        do
        {
          heap_Free(*(_QWORD **)(v3 + 8), v18);
          v18 = v10[(unsigned __int16)++v19];
        }
        while (v18);
      }
      heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v10);
    }
    BET3FLT__DeInitVData(v3, (_OWORD *)(a2 + 8112));
    BET3FLT__DeInitVParam(v3, (_QWORD *)(a2 + 128));
    v27 = (_WORD *)(a2 + 37792);
    if (*(_WORD *)(a2 + 37792))
    {
      v28 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a2 + 37584 + 8 * v28++), v20, v21, v22, v23, v24, v25, v26);
      while (v28 < (unsigned __int16)*v27);
    }
    *v27 = 0;
    *(_BYTE *)a2 = 0;
    return heap_Free(*(_QWORD **)(v3 + 8), a2);
  }
  return result;
}

uint64_t select_bet3_LoadRiffGenericFeatureMap(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t i;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v34;
  char __dst[256];
  uint64_t v36;

  v11 = a1;
  v36 = *MEMORY[0x1E0C80C00];
  v12 = *a3;
  v13 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
  *a5 = v13;
  if (v13)
  {
    v14 = heap_Calloc(*(_QWORD **)(v11 + 8), v12 + 1, 8);
    *a6 = v14;
    if (v14)
    {
      v15 = heap_Calloc(*(_QWORD **)(v11 + 8), v12 + 1, 8);
      *a7 = v15;
      if (v15)
      {
        if (!(_DWORD)v12)
          return 0;
        v16 = 0;
        v17 = 2;
        v28 = a5;
        v29 = a7;
        v30 = v12;
        while (1)
        {
          __dst[0] = 0;
          v34 = 256;
          v18 = ssftriff_reader_ReadStringZ(a2, (uint64_t)a3, a4, v17, __dst, &v34);
          v19 = v34;
          *(_QWORD *)(*a5 + 8 * v16) = BET3FLT__heap_StrDup(*(_QWORD **)(v11 + 8), __dst);
          if (!*(_QWORD *)(*a5 + 8 * v16))
            break;
          v20 = v16;
          v21 = v19 + v17;
          v31 = *(unsigned __int16 *)((char *)a3 + v21);
          *(_QWORD *)(*a6 + 8 * v16) = heap_Calloc(*(_QWORD **)(v11 + 8), v31 + 1, 8);
          if (!*(_QWORD *)(*a6 + 8 * v16))
            break;
          *(_QWORD *)(*a7 + 8 * v16) = heap_Calloc(*(_QWORD **)(v11 + 8), v31 + 1, 1);
          if (!*(_QWORD *)(*a7 + 8 * v16))
            break;
          v17 = v21 + 2;
          if ((_DWORD)v31)
          {
            v22 = v11;
            v23 = 0;
            while (1)
            {
              v24 = v17;
              __dst[0] = 0;
              v34 = 256;
              v18 = ssftriff_reader_ReadStringZ(a2, (uint64_t)a3, a4, v17, __dst, &v34);
              v25 = v34;
              *(_QWORD *)(*(_QWORD *)(*a6 + 8 * v20) + v23) = BET3FLT__heap_StrDup(*(_QWORD **)(v22 + 8), __dst);
              if (!*(_QWORD *)(*(_QWORD *)(*a6 + 8 * v20) + v23))
                return 2229280778;
              v17 += v25;
              v23 += 8;
              if (8 * v31 == v23)
              {
                a5 = v28;
                a7 = v29;
                for (i = 0; i != v31; ++i)
                  *(_BYTE *)(*(_QWORD *)(*v29 + 8 * v20) + i) = *((_BYTE *)a3 + v24 + v25 + i);
                v17 = v24 + v25 + i;
                v11 = v22;
                break;
              }
            }
          }
          v16 = v20 + 1;
          if ((int)v20 + 1 >= v30)
            return v18;
        }
      }
    }
  }
  return 2229280778;
}

uint64_t select_bet3_loc_SetSynthParamFloat(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11[32];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __sprintf_chk(v11, 0, 0x20uLL, "%f", a3);
  v9 = paramc_ParamSetStr(*(_QWORD *)(a1 + 40), a2, v11);
  if ((v9 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%f%s%x", v5, v6, v7, v8, "parameter");
  return v9;
}

uint64_t select_bet3_loc_SetSynthParamInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = paramc_ParamSetInt(*(_QWORD *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v4, v5, v6, v7, "parameter");
  return v8;
}

uint64_t select_bet3_loc_SetSynthParamArrayOfBet3_int32(uint64_t a1, void *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v8 = paramc_ParamSet(*(_QWORD *)(a1 + 40), (uint64_t)"bet3cepstralequalizer", a2, (4 * a3));
  if ((v8 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%p%s%d%s%d", v4, v5, v6, v7, "parameter");
  return v8;
}

uint64_t BET3FLT__ParamGenStart(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  const char **v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  BOOL v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  _DWORD *v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int32x2_t *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int32x2_t *v92;

  v4 = a2;
  v5 = a1;
  v6 = *(_QWORD *)a1;
  result = BET3FLT__InitUttModel(*(_QWORD *)a1, (char *)(a1 + 56), a2, *(__int16 *)(*(_QWORD *)(a1 + 8) + 10));
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(v5 + 16) = a3[8];
    v13 = a3[7];
    if (v13 >= 1 && v13 < *(_DWORD *)(v5 + 620))
    {
      BET3FLT__log_select_Error(v6, 55018, (uint64_t)"Specified length of generated speech is too short (this sentence is composed from %d states), specify more than %d milliseconds\n", v8, v9, v10, v11, v12);
      return 2229280775;
    }
    if (*(int *)(v5 + 608) >= 1)
    {
      v14 = 0;
      v83 = 0;
      v84 = 0;
      v90 = v5;
      v91 = (uint64_t)(v4 + 116);
      v15 = *(_DWORD *)(v5 + 32);
      v79 = a3 + 326;
      v80 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 1784);
      v16 = -0.5;
      v17 = 0.0;
      v18 = 0.0;
      v82 = (uint64_t)a3;
      v87 = (uint64_t)v4;
      v89 = v6;
      while (1)
      {
        v19 = *(_QWORD *)(v5 + 600);
        v20 = (int32x2_t *)(v19 + 528 * v14);
        v85 = v19;
        v92 = v20;
        if (v15 >= 1)
        {
          v21 = 0;
          v22 = v79;
          do
          {
            v23 = a3[v21 + 86];
            if ((int)v23 < 1)
            {
              LODWORD(v24) = 0;
            }
            else
            {
              v24 = 0;
              v25 = (const char **)&a3[2 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 248) + v20->i32[0])
                                     + 1326];
              while (1)
              {
                v26 = *(const char **)&v22[2 * v24];
                if (v26)
                {
                  if (*v25 && !strcmp(v26, *v25))
                    break;
                }
                if (v23 == ++v24)
                {
                  LODWORD(v24) = 0;
                  break;
                }
              }
              v19 = v85;
              v20 = v92;
            }
            *(_DWORD *)(v19 + 528 * v14 + 4 * v21++ + 32) = v24;
            v22 += 10;
          }
          while (v21 < *(int *)(v5 + 32));
        }
        BET3FLT__log_select_Diag(v6, 21, (uint64_t)"[phoneme %d]\n");
        if (!v80)
          goto LABEL_37;
        if (a3[29])
        {
          v32 = v85 + 528 * v14;
          *(_DWORD *)(v32 + 8) = BET3FLT__TreeSearch(*(_QWORD *)(v5 + 8), v14, v91, 0, 0);
          BET3FLT__log_select_Diag(v6, 6, (uint64_t)"DUR pdf id %d\n");
          result = BET3FLT__FindDurPDF(v92, v4, 0, *(_DWORD *)(v32 + 32), 0, *(float *)(v5 + 16));
          if ((result & 0x80000000) != 0)
            return result;
          LOWORD(v33) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 1784) + 2 * v92->i32[0]);
          v34 = BET3FLT__div_int32_int32_to_Q8_24((float)v33, (float)a3[6]);
          if (v34 != 0.0)
          {
            v35 = v34;
            v36 = 0.0;
            if (*v4 >= 1)
            {
              v37 = 2;
              do
              {
                v36 = v36 + kaldi::CuMatrixBase<float>::~CuMatrixBase(result).n128_f32[0];
                v38 = v37++ <= *v4;
              }
              while (v38);
            }
            v39 = v16 + v35;
            v41 = BET3FLT__div_int32_int32_to_Q8_24(v39, v36);
            v42 = v85 + 528 * v14;
            *(_DWORD *)(v42 + 24) = 0;
            v43 = (_DWORD *)(v42 + 24);
            if (*v4 >= 1)
            {
              v44 = v41;
              v45 = v85 + 528 * v14;
              v48 = *(_QWORD *)(v45 + 16);
              v47 = (uint64_t *)(v45 + 16);
              v46 = v48;
              v49 = 2;
              do
              {
                BET3FLT__mul_int32_Q8_24_to_int32((float)*(int *)(v46 + 4 * v49), v44);
                v51 = (int)kaldi::CuMatrixBase<float>::~CuMatrixBase(v50).n128_f32[0];
                if (v51 <= 1)
                  v52 = 1;
                else
                  v52 = v51;
                v46 = *v47;
                *(_DWORD *)(*v47 + 4 * v49) = v52;
                *v43 += v52;
                v38 = v49++ <= *v4;
              }
              while (v38);
            }
            v16 = v39 - kaldi::CuMatrixBase<float>::~CuMatrixBase(v40).n128_f32[0];
          }
          v53 = v85;
          *(_DWORD *)(v5 + 624) += *(_DWORD *)(v85 + 528 * v14 + 24);
          goto LABEL_45;
        }
        if (a3[28])
        {
          result = BET3FLT__log_select_Error(v6, 55017, (uint64_t)"State level segmentation is not currently supported\n", v27, v28, v29, v30, v31);
        }
        else
        {
LABEL_37:
          v54 = v85 + 528 * v14;
          *(_DWORD *)(v54 + 8) = BET3FLT__TreeSearch(*(_QWORD *)(v5 + 8), v14, v91, 0, 0);
          v55 = (int *)(v54 + 8);
          result = BET3FLT__log_select_Diag(v6, 6, (uint64_t)"DUR pdf id %d\n");
          if (!a3[7])
          {
            result = BET3FLT__FindDurPDF(v92, v4, 0, *(_DWORD *)(v85 + 528 * v14 + 32), 0, *(float *)(v5 + 16));
            if ((result & 0x80000000) != 0)
              return result;
            SetSilenceDuration(v5, v4, (uint64_t)a3, (int *)v92);
            *(_DWORD *)(v5 + 624) += *(_DWORD *)(v85 + 528 * v14 + 24);
            v53 = v85;
            goto LABEL_45;
          }
          v56 = *v4;
          if ((int)v56 >= 1)
          {
            v53 = v85;
            v57 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 21) + 8 * *(int *)(v85 + 528 * v14 + 32))
                                      + 8 * *v55)
                          + 8);
            v58 = (v56 + 2) - 2;
            do
            {
              v18 = v18 + *v57;
              v17 = v17 + v57[v56];
              ++v57;
              --v58;
            }
            while (v58);
            goto LABEL_45;
          }
        }
        v53 = v85;
LABEL_45:
        v81 = v14;
        v15 = *(_DWORD *)(v5 + 32);
        if (v15 >= 1)
        {
          for (i = 0; i < v15; ++i)
          {
            v60 = *(_QWORD *)(v5 + 24);
            if (!*(_DWORD *)(v60 + 1528 * i + 1480))
            {
              if (*(_DWORD *)(v60 + 1528 * i + 1488))
              {
                v61 = v5 + 8 * i;
                v62 = *v4 * v81;
                v83 = *(_QWORD *)(*(_QWORD *)(v61 + 304) + 8 * v62);
                v84 = *(_QWORD *)(*(_QWORD *)(v61 + 224) + 8 * v62);
              }
              v63 = (char *)v4 + 2 * i;
              if (*((_WORD *)v63 + 324))
              {
                v64 = 0;
                v65 = 0;
                v88 = (unsigned __int16 *)(v63 + 648);
                v66 = v53 + 528 * v81;
                v67 = (_QWORD *)(v66 + 8 * i);
                v68 = v67 + 9;
                v69 = v67 + 19;
                v70 = v67 + 29;
                v86 = (int *)(v66 + 4 * i + 32);
                do
                {
                  v71 = *(unsigned __int16 *)(*(_QWORD *)&v4[2 * i + 142] + v64);
                  *(_DWORD *)(*v68 + 4 * v71) = BET3FLT__TreeSearch(*(_QWORD *)(v90 + 8), v92->i32[0], v91, i, v65);
                  result = BET3FLT__log_select_Diag(v89, 6, (uint64_t)"%s pdf state %d id %d\n");
                  v72 = *(_QWORD *)(v90 + 24);
                  if (*(_DWORD *)(v72 + 1528 * i + 1488))
                  {
                    v73 = v71 - 2 + (v71 - 2) * v4[i + 1];
                    *(_QWORD *)(*v69 + 8 * v71) = v84 + 4 * v73;
                    *(_QWORD *)(*v69 + 8 * v71) -= 4;
                    *(_QWORD *)(*v70 + 8 * v71) = v83 + 4 * v73;
                    *(_QWORD *)(*v70 + 8 * v71) -= 4;
                    result = BET3FLT__FindMsdPDF(i, v71, (uint64_t)v92, v87, v82, *v86);
                    if ((result & 0x80000000) != 0)
                      return result;
                  }
                  else if (*(_DWORD *)(v72 + 1528 * i + 1484))
                  {
                    result = BET3FLT__FindContPDF(i, v71, (uint64_t)v92, v87, *v86);
                    if ((result & 0x80000000) != 0)
                      return result;
                  }
                  ++v65;
                  v64 += 16;
                }
                while (v65 < *v88);
                v5 = v90;
                v15 = *(_DWORD *)(v90 + 32);
                a3 = (int *)v82;
                v4 = (int *)v87;
                v53 = v85;
              }
            }
          }
        }
        v14 = v81 + 1;
        v6 = v89;
        if (v81 + 1 >= *(int *)(v5 + 608))
        {
          v13 = a3[7];
          goto LABEL_64;
        }
      }
    }
    v18 = 0.0;
    v17 = 0.0;
LABEL_64:
    if (v13 < 1
      || (v74 = kaldi::CuMatrixBase<float>::~CuMatrixBase(result).n128_f32[0],
          BET3FLT__div_int32_int32_to_Q8_24(v74 - v18, v17),
          *(_DWORD *)(v5 + 16) = kaldi::CuMatrixBase<float>::~CuMatrixBase(v75).n128_u32[0],
          *(int *)(v5 + 608) < 1))
    {
LABEL_69:
      if (BET3FLT__log_select_GetLogLevel(*(_QWORD *)(v6 + 32)) >= 0x15)
        OutLabel(v5);
      BET3FLT__log_select_Diag(v6, 2, (uint64_t)">> tree search done\n");
      AddBreakMarks(v5, v4, (uint64_t)a3);
      return ParamGenLT(v5, v4);
    }
    else
    {
      v76 = 0;
      v77 = 0;
      while (1)
      {
        v78 = (int32x2_t *)(*(_QWORD *)(v5 + 600) + v76);
        result = BET3FLT__FindDurPDF(v78, v4, 0, v78[4].i32[0], 0, *(float *)(v5 + 16));
        if ((result & 0x80000000) != 0)
          break;
        SetSilenceDuration(v5, v4, (uint64_t)a3, (int *)v78);
        *(_DWORD *)(v5 + 624) += v78[3].i32[0];
        ++v77;
        v76 += 528;
        if (v77 >= *(int *)(v5 + 608))
          goto LABEL_69;
      }
    }
  }
  return result;
}

void SetSilenceDuration(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  int v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a4;
  if (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v5) == 1)
  {
    v8 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 1784) + 2 * v5) / *(int *)(a3 + 24);
    LODWORD(v4) = *a2;
    if (v8 <= *a2)
    {
      if ((int)v4 >= 1)
      {
        v14 = *((_QWORD *)a4 + 2);
        v15 = 2;
        do
        {
          *(_DWORD *)(v14 + 4 * v15) = 1;
          v11 = v15++ <= *a2;
        }
        while (v11);
        LODWORD(v4) = *a2;
      }
      a4[6] = v4;
    }
    else
    {
      if (v8 >= a4[6])
      {
        if ((int)v4 < 1)
        {
          v12 = 0;
          v13 = 0;
        }
        else
        {
          v13 = 0;
          v12 = 0;
          v16 = *((_QWORD *)a4 + 2);
          v17 = 2;
          do
          {
            v18 = *(_DWORD *)(v16 + 4 * v17);
            if (v18 <= 0)
            {
              v18 = 1;
              *(_DWORD *)(v16 + 4 * v17) = 1;
              LODWORD(v4) = *a2;
            }
            v19 = v17 == 2 || v17 == (_DWORD)v4 + 1;
            if (v19)
              v20 = 0;
            else
              v20 = v18;
            v12 += v20;
            if (!v19)
              v18 = 0;
            v13 += v18;
            v11 = v17++ <= (int)v4;
          }
          while (v11);
        }
      }
      else
      {
        if ((int)v4 >= 1)
        {
          v9 = *((_QWORD *)a4 + 2);
          v10 = 2;
          do
          {
            *(_DWORD *)(v9 + 4 * v10) = 1;
            v4 = *a2;
            v11 = v10++ <= v4;
          }
          while (v11);
        }
        v12 = v4 - 2;
        v13 = 2;
      }
      v21 = BET3FLT__div_int32_int32_to_Q8_24((float)(v8 - v13), (float)v12);
      a4[6] = v13;
      LODWORD(v22) = *a2;
      if (*a2 >= 3)
      {
        v23 = v21;
        v24 = 3;
        do
        {
          if (v24 >= (int)v22)
            v25 = v8 - v13;
          else
            v25 = (int)BET3FLT__mul_int32_Q8_24_to_int32((float)*(int *)(*((_QWORD *)a4 + 2) + 4 * v24), v23);
          if (v25 <= 1)
            v25 = 1;
          *(_DWORD *)(*((_QWORD *)a4 + 2) + 4 * v24) = v25;
          v13 = a4[6] + v25;
          a4[6] = v13;
          v22 = *a2;
          v11 = v24++ < v22;
        }
        while (v11);
      }
    }
  }
}

uint64_t OutLabel(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (*(int *)(result + 608) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v1 + 600) + v2;
      result = BET3FLT__log_select_Diag(*(_QWORD *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 528;
    }
    while (v3 < *(int *)(v1 + 608));
  }
  return result;
}

uint64_t AddBreakMarks(uint64_t a1, int *a2, uint64_t a3)
{
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v6 = *(const char **)(a3 + 80);
  result = strcmp(v6, "PHRASE_TIME");
  if ((_DWORD)result)
  {
    result = strcmp(v6, "PHRASE");
    if ((_DWORD)result)
    {
      result = strcmp(v6, "WORD");
      if ((_DWORD)result)
      {
        result = strcmp(v6, "SYLLABLE");
        if ((_DWORD)result)
        {
          result = strcmp(v6, "TIME");
          if ((_DWORD)result)
          {
            result = strcmp(v6, "NONE");
            if ((_DWORD)result)
              return BET3FLT__log_select_Error(*(_QWORD *)a1, 55036, (uint64_t)"valid breaker is required\n", v8, v9, v10, v11, v12);
          }
          else
          {
            v39 = *(unsigned int *)(a1 + 608);
            if ((int)v39 >= 1)
            {
              v40 = 0;
              v41 = 0;
              v42 = *(_DWORD *)(a3 + 88);
              v43 = *a2;
              v44 = *(_QWORD *)(a1 + 600);
              v45 = v42;
              v46 = 0;
              do
              {
                if (v43 >= 1)
                {
                  result = *(_QWORD *)(v44 + 528 * v40 + 16) + 8;
                  v47 = (v43 + 2) - 2;
                  v46 = v41;
                  do
                  {
                    v48 = *(_DWORD *)result;
                    result += 4;
                    v46 += v48;
                    --v47;
                  }
                  while (v47);
                }
                if (v46 > v45)
                {
                  v45 = v41 + v42;
                  v49 = v44 + 528 * v40;
                  result = *(_DWORD *)(v49 + 4) | 2u;
                  *(_DWORD *)(v49 + 4) = result;
                }
                ++v40;
                v41 = v46;
              }
              while (v40 != v39);
            }
          }
        }
        else
        {
          v35 = *(_DWORD *)(a1 + 608);
          if (v35 >= 3)
          {
            v36 = (v35 - 2);
            v37 = *(int **)(a1 + 600);
            v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
            do
            {
              if (*(_BYTE *)(v38 + *v37))
                v37[133] |= 2u;
              v37 += 132;
              --v36;
            }
            while (v36);
          }
        }
      }
      else
      {
        v31 = *(_DWORD *)(a1 + 608);
        if (v31 >= 3)
        {
          v32 = (v31 - 2);
          v33 = *(int **)(a1 + 600);
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
          do
          {
            if ((*(_BYTE *)(v34 + *v33) & 0xFE) == 2)
              v33[133] |= 2u;
            v33 += 132;
            --v32;
          }
          while (v32);
        }
      }
    }
    else
    {
      v27 = *(_DWORD *)(a1 + 608);
      if (v27 >= 3)
      {
        v28 = (v27 - 2);
        v29 = *(int **)(a1 + 600);
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
        do
        {
          if (*(_BYTE *)(v30 + *v29) == 3)
            v29[133] |= 2u;
          v29 += 132;
          --v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    v13 = *(int *)(a1 + 608);
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 600);
      v17 = *a2;
      v18 = *(_DWORD *)(a3 + 88);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
      v20 = v13 - 2;
      v21 = *(unsigned int *)(a1 + 608);
      do
      {
        if (v17 < 1)
        {
          v22 = 0;
        }
        else
        {
          v22 = 0;
          v23 = (int *)(*(_QWORD *)(v16 + 528 * v14 + 16) + 8);
          v24 = (v17 + 2) - 2;
          do
          {
            v25 = *v23++;
            v22 += v25;
            --v24;
          }
          while (v24);
        }
        v15 += v22;
        if (v15 > v18)
        {
          *(_DWORD *)(v16 + 528 * v14 + 4) |= 2u;
          v15 = v22;
        }
        result = v16 + 528 * v14;
        if (*(_BYTE *)(v19 + *(int *)result) == 3 && v14 < v20)
        {
          v15 = 0;
          *(_DWORD *)(result + 532) |= 2u;
        }
        ++v14;
      }
      while (v14 != v21);
    }
  }
  return result;
}

uint64_t ParamGenLT(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t inited;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  float v65;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[4];
  _OWORD v78[4];
  _QWORD v79[92];

  v3 = *(_QWORD *)a1;
  v4 = 2229280778;
  memset(v78, 0, sizeof(v78));
  memset(v77, 0, sizeof(v77));
  bzero(v79, 0x2D8uLL);
  BET3FLT__InitSMatrices(v3, v78);
  BET3FLT__InitSMatrices(v3, v77);
  v5 = heap_Calloc(*(_QWORD **)(v3 + 8), (*(_DWORD *)(a1 + 624) + 1), 1);
  *(_QWORD *)(a1 + 48) = v5;
  if (!v5)
    return v4;
  v6 = heap_Calloc(*(_QWORD **)(v3 + 8), (*(_DWORD *)(a1 + 624) + 1), 4);
  *(_QWORD *)(a1 + 40) = v6;
  if (!v6)
    return v4;
  v7 = *(_DWORD *)(a1 + 608);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = *a2;
    do
    {
      if ((int)v10 >= 1)
      {
        v11 = *(_QWORD *)(a1 + 600) + 528 * v8;
        v14 = *(_QWORD *)(v11 + 16);
        v12 = (uint64_t *)(v11 + 16);
        v13 = v14;
        v15 = v12 + 37;
        v16 = 2;
        do
        {
          if (*(int *)(v13 + 4 * v16) >= 1)
          {
            v17 = 0;
            v18 = v9;
            do
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 48) + v18) = *(_BYTE *)(*v15 + v16);
              *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v18++) = *(_DWORD *)(v12[38] + 4 * v16);
              v13 = *v12;
              ++v17;
            }
            while (v17 < *(_DWORD *)(*v12 + 4 * v16));
            v9 += v17;
          }
          v19 = *(unsigned int *)(a1 + 32);
          if ((int)v19 >= 1)
          {
            v20 = *(_DWORD **)(a1 + 24);
            do
            {
              if (v20[372] && ((1 << v20[3]) & (unint64_t)*(unsigned __int8 *)(*v15 + v16)) >> v20[3])
                v20[11] += *(_DWORD *)(v13 + 4 * v16);
              v20 += 382;
              --v19;
            }
            while (v19);
          }
          v10 = *a2;
          v21 = v16++ <= v10;
        }
        while (v21);
        v7 = *(_DWORD *)(a1 + 608);
      }
      ++v8;
    }
    while (v8 < v7);
  }
  if (*(int *)(a1 + 32) < 1)
  {
    v4 = 0;
    goto LABEL_65;
  }
  v22 = 0;
  v23 = 0;
  v4 = 0;
  v24 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v25 = *(_QWORD *)(a1 + 24);
    v26 = v25 + 1528 * v22;
    if (*(_DWORD *)(v26 + 1488))
      break;
LABEL_61:
    if (++v22 >= *(int *)(a1 + 32))
      goto LABEL_65;
  }
  if (!*(_DWORD *)(v25 + 1528 * v22 + 44))
  {
LABEL_60:
    BET3FLT__DeInitMSDUttModel(v24, v22);
    goto LABEL_61;
  }
  v27 = (uint64_t *)(v26 + 24);
  inited = BET3FLT__InitPStreamParam((_DWORD *)(v26 + 24), 0);
  if ((inited & 0x80000000) == 0)
  {
    v29 = BET3FLT__InitPStreamSM(v27, (uint64_t)v78);
    v4 = v29;
    if ((v29 & 0x80000000) != 0)
      goto LABEL_65;
    v31 = *(_DWORD *)(a1 + 608);
    if (v31 >= 1)
    {
      v67 = v27;
      v68 = v29;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = v25 + 1528 * v22;
      v36 = v35 + 56;
      v37 = (_QWORD *)(v35 + 96);
      v38 = (_QWORD *)(v35 + 104);
      v39 = *a2;
      v74 = v22;
      do
      {
        if (v39 >= 1)
        {
          v69 = v32;
          v40 = *(_QWORD *)(a1 + 600) + 528 * v32;
          v41 = v40 + 8 * v22;
          v42 = *(_QWORD *)(v40 + 16);
          v71 = (uint64_t *)(v40 + 16);
          v30 = (_QWORD *)(v41 + 152);
          v43 = (_QWORD *)(v41 + 232);
          v44 = 2;
          do
          {
            if (*(int *)(v42 + 4 * v44) >= 1)
            {
              v45 = v34;
              v46 = *(_QWORD *)(a1 + 24);
              v47 = 1;
              v75 = v44;
              do
              {
                if (*(int *)(v46 + 1528 * v22 + 36) >= 1)
                {
                  v72 = v47;
                  v48 = 0;
                  v73 = v33;
                  v49 = v33;
                  v76 = v33;
                  do
                  {
                    v50 = *(_DWORD *)(v46 + 1528 * v22 + 12);
                    v51 = 1 << v50;
                    v52 = (1 << v50);
                    v23 |= v52;
                    v53 = *(int **)(*(_QWORD *)(*(_QWORD *)v36 + 8) + 8 * v48);
                    v55 = *v53;
                    v54 = v53[1];
                    if (v55 <= v54)
                    {
                      v56 = v52 ^ 0xFF;
                      v57 = v54 - v55 + 1;
                      v58 = v34 + v55;
                      do
                      {
                        v59 = v56;
                        if ((v58 & 0x80000000) == 0)
                        {
                          v59 = v56;
                          if (*(_DWORD *)(a1 + 624) >= (signed int)v58)
                            v59 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v58);
                        }
                        v23 &= v59;
                        ++v58;
                        --v57;
                      }
                      while (v57);
                    }
                    if ((unint64_t)(v51 & *(_BYTE *)(*(_QWORD *)(a1 + 48) + v45)) >> v50)
                    {
                      if (!v48 || (v51 & v23) >> v50)
                      {
                        v60 = 4 * v48 + 4;
                        *(_DWORD *)(*(_QWORD *)(*v37 + 8 * v49) + 4 * v48) = *(_DWORD *)(*(_QWORD *)(*v30 + 8 * v44)
                                                                                       + v60);
                        v61 = *(float *)(*(_QWORD *)(*v43 + 8 * v44) + v60);
                        if (*(_DWORD *)(v46 + 1528 * v22 + 1492))
                        {
                          *(float *)(*(_QWORD *)(*v38 + 8 * v49) + 4 * v48) = v61;
                        }
                        else
                        {
                          v62 = v38;
                          v63 = v36;
                          v64 = v30;
                          v65 = BET3FLT__bet3_finv(v61);
                          v30 = v64;
                          v44 = v75;
                          v49 = v76;
                          v36 = v63;
                          v22 = v74;
                          v38 = v62;
                          *(float *)(*(_QWORD *)(*v62 + 8 * v76) + 4 * v48) = v65;
                          v46 = *(_QWORD *)(a1 + 24);
                        }
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)(*v37 + 8 * v49) + 4 * v48) = 0;
                        *(_DWORD *)(*(_QWORD *)(*v38 + 8 * v49) + 4 * v48) = 0;
                      }
                    }
                    ++v48;
                  }
                  while (v48 < *(int *)(v46 + 1528 * v22 + 36));
                  v42 = *v71;
                  v33 = v73;
                  v47 = v72;
                }
                if (((1 << *(_DWORD *)(v46 + 1528 * v22 + 12)) & (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v45)) >> *(_DWORD *)(v46 + 1528 * v22 + 12))
                  ++v33;
                ++v45;
                ++v34;
                v21 = v47++ < *(_DWORD *)(v42 + 4 * v44);
              }
              while (v21);
              v39 = *a2;
              v34 = v45;
            }
            v21 = v44++ <= v39;
          }
          while (v21);
          v31 = *(_DWORD *)(a1 + 608);
          v32 = v69;
        }
        ++v32;
      }
      while (v32 < v31);
      v24 = (_QWORD *)(a1 + 56);
      if (v33 < 1)
      {
        v4 = v68;
        v27 = v67;
      }
      else
      {
        v27 = v67;
        (**(void (***)(uint64_t *, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)(a1 + 24) + 1528 * v22 + 1504))(v67, 0, v36, v30);
        v4 = v68;
      }
    }
    BET3FLT__FreePStreamSM((uint64_t)v27);
    goto LABEL_60;
  }
  v4 = inited;
LABEL_65:
  BET3FLT__FreePStreamParam(v79);
  BET3FLT__FreeSMatrices((uint64_t)v78);
  BET3FLT__FreeSMatrices((uint64_t)v77);
  return v4;
}

uint64_t BET3FLT__ParamGenFrames(uint64_t *a1, int *a2, _DWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  int v34;
  int *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD **v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  int **v94;
  int *v95;
  int v96;
  uint64_t v97;
  signed int v98;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  int *v106;
  _QWORD **v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int inited;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  int v119;
  _OWORD v120[4];
  _OWORD v121[4];
  _QWORD v122[92];

  v4 = a1;
  v5 = *a1;
  memset(v121, 0, sizeof(v121));
  memset(v120, 0, sizeof(v120));
  *a3 = 0;
  bzero(v122, 0x2D8uLL);
  BET3FLT__InitSMatrices(v5, v121);
  v103 = v5;
  BET3FLT__InitSMatrices(v5, v120);
  v6 = *((_DWORD *)v4 + 153);
  v7 = v4[75] + 528 * v6;
  *(_DWORD *)(v7 + 4) &= ~2u;
  v8 = *((_DWORD *)v4 + 152);
  v9 = __OFSUB__(v8, v6);
  v10 = v8 - v6;
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
    LODWORD(v12) = 0;
    v11 = 0;
  }
  else
  {
    v11 = 0;
    LODWORD(v12) = 0;
    while ((*(_BYTE *)(v7 + 4) & 2) == 0)
    {
      v13 = *a2;
      if ((int)v13 >= 1)
      {
        v14 = (int *)(*(_QWORD *)(v7 + 16) + 8);
        do
        {
          v15 = *v14++;
          LODWORD(v12) = v15 + v12;
          --v13;
        }
        while (v13);
      }
      v7 += 528;
      if (++v11 == v10)
      {
        v11 = v10;
        break;
      }
    }
  }
  BET3FLT__log_select_Diag(v5, 2, (uint64_t)"| processing %d models %d frames <=> ");
  if (*((int *)v4 + 8) >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v119 = 0;
    v19 = 0;
    inited = 0;
    v101 = -(uint64_t)v11;
    v102 = v11;
    v115 = v4;
    v106 = a2;
    while (1)
    {
      v20 = v4[3];
      if (*(_DWORD *)(v20 + 1528 * v16 + 1484))
      {
        v21 = v20 + 1528 * v16;
        v107 = (_QWORD **)(v21 + 64);
        v116 = v16;
        v117 = (_DWORD *)(v21 + 24);
        if (*(_QWORD *)(v21 + 64))
        {
          BET3FLT__FreePStreamParam((_QWORD *)(v21 + 24));
          v16 = v116;
        }
        v22 = v4[3] + 1528 * v16;
        v23 = *(_DWORD *)(v22 + 1496);
        v111 = *(unsigned int *)(v22 + 1500);
        v24 = *((_DWORD *)v4 + 153);
        v25 = *((_DWORD *)v4 + 152);
        if ((int)(v17 + v11 + v24) < v25 && v18 < v23)
        {
          v27 = *a2;
          v28 = v7;
          do
          {
            if (v27 >= 1)
            {
              v29 = (int *)(*(_QWORD *)(v28 + 16) + 8);
              v30 = (v27 + 2) - 2;
              do
              {
                v31 = *v29++;
                v18 += v31;
                --v30;
              }
              while (v30);
            }
            v28 += 528;
            v17 = (v17 + 1);
          }
          while ((int)(v17 + v11 + v24) < v25 && v18 < v23);
        }
        if (v24 > v119 && v19 < v23)
        {
          v33 = v7 + 528 * v101;
          v34 = *a2;
          do
          {
            if (v34 >= 1)
            {
              v35 = (int *)(*(_QWORD *)(v33 - 512) + 8);
              v36 = (v34 + 2) - 2;
              do
              {
                v37 = *v35++;
                v19 += v37;
                --v36;
              }
              while (v36);
            }
            if (v24 <= ++v119)
              break;
            v33 -= 528;
          }
          while (v19 < v23);
        }
        v108 = v7;
        v104 = v17;
        BET3FLT__log_select_Diag(v103, 3, (uint64_t)"L: %d %d  R: %d %d\n");
        v38 = v20 + 1528 * v116;
        *(_DWORD *)(v38 + 44) = v12;
        v109 = (unsigned int *)(v38 + 44);
        *(_DWORD *)(v38 + 772) = v111 + v12 + v18 + v19 + v111;
        inited = BET3FLT__InitPStreamParam(v117, 0);
        if ((inited & 0x80000000) != 0)
          goto LABEL_96;
        v39 = v20 + 1528 * v116;
        v42 = *(_DWORD *)(v39 + 40);
        v41 = (int *)(v39 + 40);
        v40 = v42;
        v16 = v116;
        if (v42 >= 1)
        {
          v43 = 0;
          v114 = (uint64_t *)(v107 + 86);
          v112 = (int *)(v109 + 182);
          v44 = v20 + 1528 * v116;
          v45 = (_DWORD **)(v44 + 784);
          v46 = (_QWORD *)(v44 + 824);
          v47 = (_QWORD *)(v44 + 832);
          v118 = v17 + v102 + v119;
          v105 = (_QWORD *)(v44 + 792);
          v48 = 0;
          while (1)
          {
            if (*(_DWORD *)(*(_QWORD *)(v115[3] + 1528 * v116 + 1520) + 4 * v48) == 1)
            {
              v49 = BET3FLT__InitPStreamParam(v114, (uint64_t)v122);
              if ((v49 & 0x80000000) != 0)
              {
                v51 = v49;
                goto LABEL_98;
              }
              v50 = BET3FLT__InitPStreamSM(v114, (uint64_t)v120);
              v51 = v50;
              if ((v50 & 0x80000000) != 0)
                goto LABEL_98;
              inited = v50;
              v113 = v48;
              if ((int)v111 < 1)
              {
                LODWORD(v52) = 0;
              }
              else
              {
                v52 = 0;
                v53 = *v112 & ~(*v112 >> 31);
                do
                {
                  if (v52 == v53)
                    break;
                  v54 = **v45;
                  if ((int)v54 >= 1)
                  {
                    v55 = *(_DWORD **)(*v46 + 8 * v52);
                    v56 = *(_DWORD **)(*v47 + 8 * v52);
                    do
                    {
                      *v55++ = 0;
                      *v56++ = 1065353216;
                      --v54;
                    }
                    while (v54);
                  }
                  ++v52;
                }
                while (v52 != v111);
              }
              LODWORD(v12) = v52;
              if ((int)v118 >= 1)
              {
                v57 = 0;
                v58 = v115[75];
                v59 = *((_DWORD *)v115 + 153);
                v60 = *v106;
                v61 = (*v106 + 2);
                LODWORD(v12) = v52;
                do
                {
                  v62 = v57 - v119 + v59;
                  if (v60 >= 1)
                  {
                    v63 = v58 + 528 * v62;
                    v64 = *(_QWORD *)(v63 + 16);
                    v65 = v63 + 8 * v116;
                    v66 = (_QWORD *)(v65 + 152);
                    v67 = (_QWORD *)(v65 + 232);
                    v68 = 2;
                    do
                    {
                      v69 = *(_DWORD *)(v64 + 4 * v68);
                      if (v69 >= 1)
                      {
                        v70 = **v45;
                        v12 = (int)v12;
                        v71 = 1;
                        do
                        {
                          if ((int)v70 >= 1)
                          {
                            v72 = *(_QWORD *)(*v66 + 8 * v68);
                            v73 = *(_DWORD **)(*v46 + 8 * v12);
                            v74 = *(_QWORD *)(*v67 + 8 * v68);
                            v75 = *(_DWORD **)(*v47 + 8 * v12);
                            v76 = 4 * *v41;
                            v77 = v70;
                            v78 = v43;
                            do
                            {
                              *v73++ = *(_DWORD *)(v72 + v78);
                              *v75++ = *(_DWORD *)(v74 + v78);
                              v78 += v76;
                              --v77;
                            }
                            while (v77);
                          }
                          ++v12;
                        }
                        while (v71++ != v69);
                      }
                      ++v68;
                    }
                    while (v68 != v61);
                  }
                  ++v57;
                }
                while (v57 != v118);
                v108 = v58 + 528 * v62;
              }
              if (*(_DWORD *)(v115[3] + 1528 * v116 + 1492))
                v80 = 0;
              else
                v80 = (int)v52 < (int)v12;
              if (v80)
              {
                v81 = v52;
                LODWORD(v52) = **v45;
                do
                {
                  if ((int)v52 >= 1)
                  {
                    v82 = 0;
                    v83 = *(_QWORD *)(*v47 + 8 * v81);
                    do
                    {
                      v84 = BET3FLT__bet3_finv(*(float *)(v83 + 4 * v82));
                      v83 = *(_QWORD *)(*v47 + 8 * v81);
                      *(float *)(v83 + 4 * v82++) = v84;
                      v52 = (int)**v45;
                    }
                    while (v82 < v52);
                  }
                  ++v81;
                }
                while (v81 != v12);
              }
              v85 = *v112;
              if ((int)v12 >= *v112)
              {
                v91 = v116;
                v48 = v113;
              }
              else
              {
                v86 = **v45;
                v87 = (int)v12;
                v48 = v113;
                do
                {
                  if ((int)v86 >= 1)
                  {
                    v88 = *(_DWORD **)(*v46 + 8 * v87);
                    v89 = *(_DWORD **)(*v47 + 8 * v87);
                    v90 = v86;
                    do
                    {
                      *v88++ = 0;
                      *v89++ = 1065353216;
                      --v90;
                    }
                    while (v90);
                  }
                  ++v87;
                }
                while (v87 != v85);
                LODWORD(v12) = v85;
                v91 = v116;
              }
              (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v115[3] + 1528 * v91 + 1504) + 8 * v48))(v114, 0);
              v92 = *v109;
              if ((int)v92 >= 1)
              {
                v93 = *v107;
                v94 = (int **)(*v105 + 8 * (v19 + (int)v111));
                do
                {
                  v95 = *v94++;
                  v96 = *v95;
                  v97 = *v93++;
                  *(_DWORD *)(v97 + 4 * v48) = v96;
                  --v92;
                }
                while (v92);
              }
              BET3FLT__FreePStreamSM((uint64_t)v114);
              BET3FLT__FreePStreamParam(v114);
              v40 = *v41;
            }
            ++v48;
            v43 += 4;
            if (v48 >= v40)
            {
              v4 = v115;
              a2 = v106;
              v11 = v102;
              v16 = v116;
              goto LABEL_90;
            }
          }
        }
        v11 = v102;
LABEL_90:
        v17 = v104;
        v7 = v108;
      }
      if (++v16 >= *((int *)v4 + 8))
        goto LABEL_94;
    }
  }
  inited = 0;
LABEL_94:
  v98 = *((_DWORD *)v4 + 153) + v11;
  *((_DWORD *)v4 + 153) = v98;
  if (v98 >= *((_DWORD *)v4 + 152))
    *a3 = 1;
LABEL_96:
  v51 = inited;
LABEL_98:
  BET3FLT__FreePStreamParam(v122);
  BET3FLT__FreeSMatrices((uint64_t)v121);
  BET3FLT__FreeSMatrices((uint64_t)v120);
  return v51;
}

uint64_t BET3FLT__InitVData(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result;

  bzero(a2, 0x430uLL);
  result = BET3FLT__InitModelSet(a1, (uint64_t)a2, a3);
  if ((result & 0x80000000) == 0)
  {
    result = BET3FLT__InitTreeSet(a1, (_OWORD *)a2 + 29);
    if ((result & 0x80000000) == 0)
      return BET3FLT__InitDWinSet(a1, (_OWORD *)a2 + 42, (uint64_t)a3);
  }
  return result;
}

void BET3FLT__DeInitVData(uint64_t a1, _OWORD *a2)
{
  BET3FLT__DeInitModelSet(a1, (uint64_t)a2);
  BET3FLT__DeInitTreeSet(a1, a2 + 29);
  BET3FLT__DeInitDWinSet(a1, a2 + 42);
  bzero(a2, 0x430uLL);
}

uint64_t BET3FLT__LoadVData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t ModelFile;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  const char *v33;
  uint64_t v34;
  uint64_t v35;

  if (*(int *)(a2 + 456) < 1)
    return 0;
  v6 = 0;
  v7 = a2 + 464;
  v8 = a2 + 672;
  v9 = a3 + 2664;
  v10 = (unsigned int *)(a3 + 2424);
  do
  {
    ModelFile = BET3FLT__LoadModelFile(a1, (unsigned int *)a2, v6, v9);
    if ((ModelFile & 0x80000000) != 0)
      return ModelFile;
    ModelFile = BET3FLT__LoadTreesFile(a1, v7, v6, v10, a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0)
      return ModelFile;
    ModelFile = BET3FLT__LoadDWinFile(a1, v8, v6, (unsigned int *)(v9 + 1200));
    if ((ModelFile & 0x80000000) != 0)
      return ModelFile;
    ++v6;
    v20 = *(int *)(a2 + 456);
    v9 += 120;
    v10 += 6;
  }
  while (v6 < v20);
  if ((int)v20 < 1)
    return 0;
  v21 = 0;
  while (1)
  {
    if (!*(_QWORD *)(a2 + 8 * v21 + 568))
    {
      v31 = 2229280775;
      v33 = "%s tree is required\n";
      v34 = a1;
      v35 = 55032;
      goto LABEL_37;
    }
    v22 = a2 + 4 * v21;
    if (*(_DWORD *)(v22 + 336) && !*(_QWORD *)(a2 + 168))
    {
LABEL_38:
      v31 = 2229280775;
      v33 = "%s PDF is required\n";
      v34 = a1;
      v35 = 55033;
      goto LABEL_37;
    }
    v23 = *(_DWORD *)(v22 + 376);
    if (v23)
    {
      if (!*(_QWORD *)(a2 + 8 * v21 + 176))
        goto LABEL_38;
      if (!*(_DWORD *)(a2 + 4 * v21 + 416))
      {
        v24 = 1;
        goto LABEL_19;
      }
    }
    else if (!*(_DWORD *)(a2 + 4 * v21 + 416))
    {
      goto LABEL_31;
    }
    if (!*(_QWORD *)(a2 + 8 * v21 + 256))
      goto LABEL_38;
    v24 = 0;
LABEL_19:
    v25 = *(unsigned int *)(a2 + 4 * v21 + 128);
    if ((int)v25 >= 1)
      break;
LABEL_26:
    if (v23)
      v30 = 0;
    else
      v30 = v24;
    if ((v30 & 1) == 0 && *(_DWORD *)(a2 + 4 * v21 + 4) % *(_DWORD *)(v8 + 40 * v21))
    {
      v31 = 2229280775;
      v33 = "The number of dynamic windows for %s is not correct %d %d\n";
      v34 = a1;
      v35 = 55035;
      goto LABEL_37;
    }
LABEL_31:
    v31 = 0;
    if (++v21 == *(_DWORD *)(a2 + 456))
      return v31;
  }
  v26 = 0;
  v27 = a2 + 8 * v21;
  v28 = (_QWORD *)(v27 + 176);
  v29 = (_QWORD *)(v27 + 256);
  while ((!v23 || *(_QWORD *)(*v28 + 8 * v26)) && ((v24 & 1) != 0 || *(_QWORD *)(*v29 + 8 * v26)))
  {
    if (v25 == ++v26)
      goto LABEL_26;
  }
  v31 = 2229280775;
  v33 = "%s PDF layer %d is required\n";
  v34 = a1;
  v35 = 55034;
LABEL_37:
  BET3FLT__log_select_Error(v34, v35, (uint64_t)v33, v15, v16, v17, v18, v19);
  return v31;
}

uint64_t BET3FLT__InitVStream(uint64_t a1, char *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  bzero(a2, 0x788uLL);
  *(_QWORD *)a2 = a1;
  v6 = a3[33];
  *((_DWORD *)a2 + 8) = v6;
  v7 = heap_Calloc(*(_QWORD **)(a1 + 8), v6, 1528);
  *((_QWORD *)a2 + 3) = v7;
  if (!v7)
    return 2229280778;
  if (*((int *)a2 + 8) >= 1)
  {
    v8 = 0;
    v9 = a2 + 648;
    do
    {
      *v9 = 0;
      v10 = *(const char **)&a3[2 * v8 + 36];
      if (*v10)
        v9 = strcpy(v9, v10);
      ++v8;
      v11 = *((int *)a2 + 8);
      v9 += 128;
    }
    while (v8 < v11);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = *((_QWORD *)a2 + 3);
      v14 = a3[18];
      v15 = 1528 * *((unsigned int *)a2 + 8);
      do
      {
        v16 = v13 + v12;
        *(_DWORD *)(v16 + 12) = a3[56];
        *(_QWORD *)(v16 + 24) = a1;
        *(_QWORD *)(v16 + 752) = a1;
        if (v12)
        {
          if (a3[536])
            *(_DWORD *)(v13 + v12 + 1488) = 1;
          else
            *(_DWORD *)(v13 + v12 + 1484) = 1;
        }
        else
        {
          *(_DWORD *)(v13 + 1480) = 1;
        }
        if (v14 == 1)
          *(_DWORD *)(v13 + v12 + 1492) = 1;
        ++a3;
        v12 += 1528;
      }
      while (v15 != v12);
    }
  }
  return 0;
}

uint64_t BET3FLT__LoadVStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v44;

  if (*(int *)(a1 + 32) < 1)
    return 0;
  v3 = a3;
  v4 = a2;
  v6 = 0;
  v7 = 2229280775;
  v8 = a2 + 672;
  v9 = *(_QWORD *)(a1 + 24);
  v44 = a2 + 672;
  while (1)
  {
    v10 = (_DWORD *)(v8 + 40 * v6);
    v11 = v9 + 1528 * v6;
    *(_QWORD *)(v11 + 56) = v10;
    v12 = *(_DWORD *)(v11 + 1484);
    if (v12)
      *(_QWORD *)(v9 + 1528 * v6 + 784) = v10;
    if (*(_DWORD *)(v9 + 1528 * v6 + 1480))
    {
      if (v12)
        goto LABEL_7;
      goto LABEL_8;
    }
    v14 = v4 + 4 * v6;
    v15 = v9 + 1528 * v6;
    *(_DWORD *)(v15 + 36) = *(_DWORD *)(v14 + 4);
    v16 = (*(_DWORD *)(v14 + 4) / *v10);
    *(_DWORD *)(v15 + 40) = v16;
    *(_QWORD *)(v15 + 1496) = *(_QWORD *)(v3 + 92);
    v17 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v16, 8);
    v18 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v18 + 1528 * v6 + 1504) = v17;
    if (!v17)
      return 2229280778;
    LODWORD(v19) = *(_DWORD *)(v18 + 1528 * v6 + 40);
    if ((int)v19 >= 1)
      break;
LABEL_15:
    v27 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v19, 4);
    v28 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v28 + 1528 * v6 + 1520) = v27;
    if (!v27)
      return 2229280778;
    v29 = v28 + 1528 * v6;
    v31 = *(_DWORD *)(v29 + 40);
    v30 = (int *)(v29 + 40);
    if (v31 >= 1)
    {
      v32 = v27;
      v33 = 0;
      v34 = *(_QWORD *)(a3 + 8 * v6 + 2344);
      while (1)
      {
        v35 = *(const char **)(v34 + 8 * v33);
        if (!strcmp(v35, "OFF"))
        {
          v41 = 0;
        }
        else
        {
          if (strcmp(v35, "ON"))
          {
            BET3FLT__log_select_Error(*(_QWORD *)a1, 55036, (uint64_t)"valid breaker setting is required for stream %d\n", v36, v37, v38, v39, v40);
            return 2229280775;
          }
          v41 = 1;
        }
        *(_DWORD *)(v32 + 4 * v33++) = v41;
        if (v33 >= *v30)
        {
          v7 = 2229280775;
          break;
        }
      }
    }
    v3 = a3;
    v4 = a2;
    BET3FLT__log_select_Diag(*(_QWORD *)a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    v9 = *(_QWORD *)(a1 + 24);
    v8 = v44;
    if (*(_DWORD *)(v9 + 1528 * v6 + 1484))
    {
LABEL_7:
      v13 = v9 + 1528 * v6;
      *(_DWORD *)(v13 + 764) = *(_DWORD *)(v4 + 4 * v6 + 4);
      *(_DWORD *)(v13 + 768) = 1;
    }
LABEL_8:
    if (++v6 >= *(int *)(a1 + 32))
      return 0;
  }
  v20 = 0;
  v21 = (_QWORD *)(v3 + 8 * v6 + 2184);
  while (!strcmp(*(const char **)(*v21 + 8 * v20), "MLPG2"))
  {
    *(_QWORD *)(*(_QWORD *)(v18 + 1528 * v6 + 1504) + 8 * v20++) = BET3FLT__mlpg2;
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(int *)(v18 + 1528 * v6 + 40);
    if (v20 >= v19)
      goto LABEL_15;
  }
  BET3FLT__log_select_Error(*(_QWORD *)a1, 55036, (uint64_t)"invalid solver for stream %d: %s\n", v22, v23, v24, v25, v26);
  return v7;
}

void BET3FLT__DeInitVStream(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 && *(_QWORD *)a1)
  {
    if (a1[8] >= 1)
    {
      v2 = 0;
      v3 = *((_QWORD *)a1 + 3);
      v4 = 1520;
      do
      {
        if (!v3)
          break;
        BET3FLT__FreePStreamSM(v3 + v4 - 1496);
        BET3FLT__FreePStreamParam((_QWORD *)(*((_QWORD *)a1 + 3) + v4 - 1496));
        BET3FLT__FreePStreamSM(*((_QWORD *)a1 + 3) + v4 - 768);
        BET3FLT__FreePStreamParam((_QWORD *)(*((_QWORD *)a1 + 3) + v4 - 768));
        v3 = *((_QWORD *)a1 + 3);
        v5 = *(_QWORD *)(v3 + v4 - 16);
        if (v5)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v5);
          v3 = *((_QWORD *)a1 + 3);
          *(_QWORD *)(v3 + v4 - 16) = 0;
        }
        v6 = *(_QWORD *)(v3 + v4);
        if (v6)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v6);
          v3 = *((_QWORD *)a1 + 3);
          *(_QWORD *)(v3 + v4) = 0;
        }
        ++v2;
        v4 += 1528;
      }
      while (v2 < a1[8]);
    }
    v7 = *((_QWORD *)a1 + 6);
    if (v7)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v7);
      *((_QWORD *)a1 + 6) = 0;
    }
    v8 = *((_QWORD *)a1 + 5);
    if (v8)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v8);
      *((_QWORD *)a1 + 5) = 0;
    }
    v9 = *((_QWORD *)a1 + 3);
    if (v9)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v9);
      *((_QWORD *)a1 + 3) = 0;
    }
    BET3FLT__DeInitUttModel((_QWORD *)a1 + 7);
    bzero(a1, 0x788uLL);
  }
}

void BET3FLT__InitVParam(_DWORD *a1)
{
  bzero(a1, 0x1F30uLL);
  a1[32] = 1;
}

void BET3FLT__DeInitVParam(uint64_t a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t m;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unsigned int *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t n;
  uint64_t v44;
  uint64_t ii;
  uint64_t v46;

  if (a2[954])
  {
    for (i = 0; i != 20; ++i)
    {
      if (*(_QWORD *)(a2[954] + 8 * i))
      {
        for (j = 0; j != 800; j += 8)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(a2[954] + 8 * i) + j);
          if (v6)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v6);
            *(_QWORD *)(*(_QWORD *)(a2[954] + 8 * i) + j) = 0;
          }
        }
        v7 = *(_QWORD *)(a2[954] + 8 * i);
        if (v7)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v7);
          *(_QWORD *)(a2[954] + 8 * i) = 0;
        }
      }
      v8 = *(_QWORD *)(a2[955] + 8 * i);
      if (v8)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v8);
        *(_QWORD *)(a2[955] + 8 * i) = 0;
      }
      v9 = *(_QWORD *)(a2[953] + 8 * i);
      if (v9)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v9);
        *(_QWORD *)(a2[953] + 8 * i) = 0;
      }
    }
    v10 = a2[954];
    if (v10)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v10);
      a2[954] = 0;
    }
    v11 = a2[955];
    if (v11)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v11);
      a2[955] = 0;
    }
    v12 = a2[953];
    if (v12)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v12);
      a2[953] = 0;
    }
  }
  v13 = a2[10];
  if (v13)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v13);
    a2[10] = 0;
  }
  v14 = a2[15];
  if (v14)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v14);
    a2[15] = 0;
  }
  v15 = a2[956];
  if (v15)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v15);
    a2[956] = 0;
  }
  v16 = 0;
  v17 = a2;
  do
  {
    v18 = (char *)&a2[v16];
    v19 = *((_QWORD *)v18 + 18);
    if (v19)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v19);
      *((_QWORD *)v18 + 18) = 0;
    }
    v20 = *((_QWORD *)v18 + 53);
    if (v20)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v20);
      *((_QWORD *)v18 + 53) = 0;
    }
    for (k = 0; k != 5; ++k)
    {
      v22 = &v17[k];
      v23 = v17[k + 63];
      if (v23)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v23);
        v22[63] = 0;
      }
      v24 = v22[163];
      if (v24)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v24);
        v22[163] = 0;
      }
    }
    for (m = 213; m != 218; ++m)
    {
      v26 = v17[m];
      if (v26)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v26);
        v17[m] = 0;
      }
    }
    v27 = (char *)a2 + 4 * v16;
    if (*((_DWORD *)v27 + 66))
    {
      v28 = 0;
      v29 = (unsigned int *)(v27 + 264);
      v30 = (char *)&a2[v16];
      v31 = v30 + 2344;
      v32 = v30 + 2184;
      v33 = v30 + 2264;
      do
      {
        if (*v31)
        {
          v34 = *(_QWORD *)(*v31 + 8 * v28);
          if (v34)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v34);
            *(_QWORD *)(*v31 + 8 * v28) = 0;
          }
        }
        if (*v32)
        {
          v35 = *(_QWORD *)(*v32 + 8 * v28);
          if (v35)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v35);
            *(_QWORD *)(*v32 + 8 * v28) = 0;
          }
        }
        if (*v33)
        {
          v36 = *(_QWORD *)(*v33 + 8 * v28);
          if (v36)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v36);
            *(_QWORD *)(*v33 + 8 * v28) = 0;
          }
        }
        ++v28;
      }
      while (v28 < *v29);
    }
    v37 = (char *)&a2[v16];
    v38 = *((_QWORD *)v37 + 293);
    if (v38)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v38);
      *((_QWORD *)v37 + 293) = 0;
    }
    v39 = *((_QWORD *)v37 + 273);
    if (v39)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v39);
      *((_QWORD *)v37 + 273) = 0;
    }
    v40 = (char *)&a2[v16];
    v41 = *((_QWORD *)v40 + 283);
    if (v41)
    {
      v42 = v40 + 2264;
      heap_Free(*(_QWORD **)(a1 + 8), v41);
      *v42 = 0;
    }
    ++v16;
    v17 += 5;
  }
  while (v16 != 10);
  for (n = 663; n != 919; ++n)
  {
    v44 = a2[n];
    if (v44)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v44);
      a2[n] = 0;
    }
  }
  if (a2[952])
  {
    for (ii = 0; ii != 2048; ii += 8)
    {
      v46 = *(_QWORD *)(a2[952] + ii);
      if (v46)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v46);
        *(_QWORD *)(a2[952] + ii) = 0;
      }
    }
    heap_Free(*(_QWORD **)(a1 + 8), a2[952]);
  }
  bzero(a2, 0x1F30uLL);
}

uint64_t synth_float_bet3_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ISynth_Bet3;
  return result;
}

uint64_t synth_bet3_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Listen;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  __int128 v38;
  uint64_t (*v39)(uint64_t, char *, const char *);
  char *__s1;
  int v41;
  uint64_t v42;
  uint64_t v43;

  Object = 2164269063;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  __s1 = 0;
  v38 = xmmword_1EA948B48;
  v39 = synth_bet3_loc_ParamLearnChange;
  if (a5)
  {
    inited = InitRsrcFunction(a3, a4, &v43);
    if ((inited & 0x80000000) != 0)
      return inited;
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    log_OutText(*(_QWORD *)(v43 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjOpen", v10, v11, v12, v35);
    v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v43 + 8), 1, 1904);
    if (v13)
    {
      v18 = (uint64_t)v13;
      *v13 = a3;
      v13[1] = a4;
      v19 = v43;
      v13[2] = v43;
      Listen = critsec_ObjOpen(*(_QWORD *)(v19 + 16), *(_QWORD **)(v19 + 8), v13 + 3);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      *(_QWORD *)&v38 = v18;
      Listen = synth_bet3_loc_ParamGetListen(v18, "volume", 0, 100, 0x50u, &v38, &v41);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      Listen = synth_bet3_loc_ParamGetListen(v18, "rate", 50, 400, 0x64u, &v38, &v41);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      Listen = synth_bet3_loc_ParamGetListen(v18, "pitch", 50, 200, 0x64u, &v38, &v41);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      Listen = synth_bet3_loc_ParamGetListen(v18, "rate_baseline", 50, 400, 0x64u, &v38, &v41);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      Listen = synth_bet3_loc_ParamGetListen(v18, "pitch_baseline", 50, 200, 0x64u, &v38, &v41);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      Listen = synth_bet3_loc_ParamGetListen(v18, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v38, &v41);
      if ((Listen & 0x80000000) != 0)
        goto LABEL_21;
      *(_DWORD *)(v18 + 40) = v41;
      if ((paramc_ParamGetStr(*(_QWORD *)(v43 + 40), (uint64_t)"synth_type", &__s1) & 0x80000000) == 0)
      {
        v21 = __s1;
        if (strcmp(__s1, "mlsa") && strcmp(v21, "mfs"))
        {
          log_OutText(*(_QWORD *)(v43 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Unknown synthesizer: %s", v22, v23, v24, (uint64_t)v21);
          return 7;
        }
        log_OutText(*(_QWORD *)(v43 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MLSA synthesizer", v22, v23, v24, v36);
      }
      *(_DWORD *)(v18 + 1896) = 0;
      Listen = synth_bet3_loc_SynthInit_MLSA(v18);
      if ((Listen & 0x80000000) != 0)
      {
LABEL_21:
        Object = Listen;
      }
      else
      {
        Object = objc_GetObject(*(_QWORD *)(v43 + 48), (uint64_t)"SYNTHSTREAM", &v42);
        if ((Object & 0x80000000) == 0)
        {
          *(_QWORD *)(v18 + 32) = *(_QWORD *)(v42 + 8);
          *(_QWORD *)a5 = v18;
          *(_DWORD *)(a5 + 8) = 9346;
          goto LABEL_23;
        }
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(v18 + 16) + 32), (uint64_t)"SYNTH_BET3", 56001, 0, v28, v25, v26, v27, v36);
      }
      *(_QWORD *)a5 = v18;
      *(_DWORD *)(a5 + 8) = 9346;
      synth_bet3_ObjClose(v18, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      goto LABEL_23;
    }
    log_OutPublic(*(_QWORD *)(v43 + 32), (uint64_t)"SYNTH_BET3", 56000, 0, v14, v15, v16, v17, v36);
    Object = 2164269066;
LABEL_23:
    log_OutText(*(_QWORD *)(v43 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjOpen: %x", v25, v26, v27, Object);
    log_OutEvent(*(uint64_t ***)(v43 + 32), 22, &byte_1DEBD87CE, v29, v30, v31, v32, v33, v37);
  }
  return Object;
}

uint64_t synth_bet3_ObjClose(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  int v24;
  int v26;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v3 = safeh_HandleCheck(a1, a2, 9346, 1904);
  if (v3 < 0)
    return 2164269064;
  LODWORD(v7) = v3;
  v8 = *(_QWORD *)(a1 + 16);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjClose", v4, v5, v6, v35);
  v9 = *(_QWORD *)(v8 + 40);
  v36 = a1;
  v37 = *(__int128 *)((char *)&xmmword_1EA948B48 + 8);
  v10 = paramc_ListenerRemove(v9, "volume", (__int128 *)&v36);
  v11 = *(_QWORD *)(v8 + 40);
  if (v10 < 0)
    LODWORD(v7) = v10;
  v36 = a1;
  v37 = *(__int128 *)((char *)&xmmword_1EA948B48 + 8);
  v12 = paramc_ListenerRemove(v11, "rate", (__int128 *)&v36);
  v13 = *(_QWORD *)(v8 + 40);
  if (v12 < 0 && (int)v7 > -1)
    LODWORD(v7) = v12;
  v36 = a1;
  v37 = *(__int128 *)((char *)&xmmword_1EA948B48 + 8);
  v15 = paramc_ListenerRemove(v13, "pitch", (__int128 *)&v36);
  v16 = *(_QWORD *)(v8 + 40);
  if (v15 < 0 && (int)v7 > -1)
    LODWORD(v7) = v15;
  v36 = a1;
  v37 = *(__int128 *)((char *)&xmmword_1EA948B48 + 8);
  v18 = paramc_ListenerRemove(v16, "rate_baseline", (__int128 *)&v36);
  v19 = *(_QWORD *)(v8 + 40);
  if (v18 < 0 && (int)v7 > -1)
    LODWORD(v7) = v18;
  v36 = a1;
  v37 = *(__int128 *)((char *)&xmmword_1EA948B48 + 8);
  v21 = paramc_ListenerRemove(v19, "pitch_baseline", (__int128 *)&v36);
  v22 = *(_QWORD *)(v8 + 40);
  if (v21 < 0 && (int)v7 > -1)
    LODWORD(v7) = v21;
  v36 = a1;
  v37 = *(__int128 *)((char *)&xmmword_1EA948B48 + 8);
  v24 = paramc_ListenerRemove(v22, "audiooutputbufsamples", (__int128 *)&v36);
  if (v24 >= 0 || (int)v7 <= -1)
    v7 = v7;
  else
    v7 = v24;
  if (*(_QWORD *)(a1 + 32))
  {
    v26 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if (v26 >= 0 || (int)v7 <= -1)
      v7 = v7;
    else
      v7 = v26;
  }
  if (!*(_DWORD *)(a1 + 1896))
    MFVSyn__deinit__MVF_Synthesis((_QWORD *)(a1 + 72));
  v28 = *(_QWORD *)(a1 + 24);
  if (v28)
  {
    v29 = critsec_ObjClose(v28);
    if ((int)v7 > -1 && v29 < 0)
      v7 = v29;
    else
      v7 = v7;
  }
  heap_Free(*(_QWORD **)(v8 + 8), a1);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjClose: %x", v31, v32, v33, v7);
  return v7;
}

uint64_t synth_bet3_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((safeh_HandleCheck(a1, a2, 9346, 1904) & 0x80000000) != 0)
    return 2164269064;
  v6 = *(_QWORD *)(a1 + 16);
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjReopen", v3, v4, v5, v12);
  inited = synth_bet3_loc_SynthInit_MLSA(a1);
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjReopen: %x", v8, v9, v10, inited);
  return inited;
}

uint64_t synth_bet3_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char __s[72];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((safeh_HandleCheck(a1, a2, 9346, 1904) & 0x80000000) != 0)
    return 2164269064;
  strcpy(__s, "audio/L16;rate=");
  v8 = strlen(__s);
  LH_itoa(*(_DWORD *)(a1 + 48), &__s[v8], 0xAu);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-bet3-speech-frames;version=5.0",
         0,
         0,
         a1 + 1792);
  if ((v9 & 0x80000000) != 0
    || (v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
               0,
               0,
               a1 + 1808),
        (v9 & 0x80000000) != 0))
  {
    v22 = v9;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56002, "%s%s", v10, v11, v12, v13, "contentType");
LABEL_12:
    *(_DWORD *)(a1 + 1856) = 0;
LABEL_13:
    synth_bet3_ProcessEnd((_QWORD *)a1, a2);
    return v22;
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32)
                                                                                               + 64))(a3, a4, 16, __s, 0, 1, a1 + 1824);
  if ((v14 & 0x80000000) != 0)
  {
    v22 = v14;
    goto LABEL_11;
  }
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v19 + 64);
  v21 = (*(uint64_t (**)(void))(v19 + 152))();
  v22 = v20(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0", v21, 1, a1 + 1840);
  if ((v22 & 0x80000000) != 0)
  {
LABEL_11:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56003, "%s%s", v15, v16, v17, v18, "contentType");
    goto LABEL_12;
  }
  if (!*(_DWORD *)(a1 + 1896))
  {
    v22 = BET3FLT__MFVSyn__reset__MVF_Synthesis(a1 + 72);
    *(_DWORD *)(a1 + 1856) = 0;
    if ((v22 & 0x80000000) == 0)
      return v22;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 1856) = 0;
  return v22;
}

uint64_t synth_bet3_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int *v36;
  int *v37;
  int *v38;
  int v39;
  int *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t i;
  int v49;
  _DWORD *v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  const char *v57;
  int v58;
  unsigned int v59;
  int v60;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unsigned int v66;
  char *v67;
  unsigned int v68;
  char *v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  float *v82;
  float *v83;
  float v84;
  int v85;
  int v86;
  unsigned int v87;
  _BOOL4 v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  void *__dst;
  void *__src;
  uint64_t *v148;
  int v149;
  size_t __n;
  _BYTE v151[200];
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v8 = -2130698234;
  v9 = safeh_HandleCheck(a1, a2, 9346, 1904);
  if (v9 < 0)
    return 2164269064;
  v10 = 1;
  if (v9 || !a1)
    return v10;
  __n = 0;
  v149 = 0;
  __src = 0;
  v148 = 0;
  v145 = 0;
  __dst = 0;
  if ((safeh_HandleCheck(a1, a2, 9346, 1904) & 0x80000000) != 0)
    return 2164269064;
  *a5 = 1;
  v11 = *(_DWORD *)(a1 + 40);
  v12 = *(_DWORD *)(a1 + 44);
  if (v11 >= v12)
  {
    if (v12)
      v12 *= v11 / v12;
    else
      v12 = *(_DWORD *)(a1 + 40);
  }
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, int *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 1792), *(_QWORD *)(a1 + 1800), (char *)&__n + 4, &v149);
  if ((v10 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56004, "%s%x", v14, v15, v16, v17, "lhError");
    return v10;
  }
  if (HIDWORD(__n))
  {
    v18 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t **, char *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 1792), *(_QWORD *)(a1 + 1800), &v148, (char *)&__n + 4);
    if ((v18 & 0x80000000) != 0)
    {
      v10 = v18;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v19, v20, v21, v22, "contentType");
      return v10;
    }
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 1808), *(_QWORD *)(a1 + 1816), &__src, &__n);
    if ((v10 & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v23, v24, v25, v26, "contentType");
      return v10;
    }
    if (HIDWORD(__n) >= 8)
    {
      v27 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(a1 + 1824), *(_QWORD *)(a1 + 1832), &v145, 2 * v12);
      if ((v27 & 0x80000000) != 0)
      {
        v10 = v27;
        v116 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_184:
        log_OutPublic(v116, (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v28, v29, v30, v31, "stream");
        return v10;
      }
      if (!(_DWORD)__n
        || (v32 = (*(uint64_t (**)(_QWORD, _QWORD, void **))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(a1 + 1840), *(_QWORD *)(a1 + 1848), &__dst), (v32 & 0x80000000) == 0))
      {
        v10 = critsec_Enter(*(_QWORD **)(a1 + 24));
        if ((v10 & 0x80000000) != 0)
          return v10;
        v33 = *v148;
        v144 = 0;
        v143 = 0;
        v139 = *(_QWORD *)(v33 + 40);
        v140 = *(_QWORD *)(v33 + 48);
        if ((_DWORD)__n && __src && __dst)
        {
          memcpy(__dst, __src, __n);
          LODWORD(__n) = __n >> 5;
        }
        v34 = *(unsigned int *)(v33 + 32);
        if ((int)v34 < 1)
          goto LABEL_201;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = *(int **)(v33 + 24);
        do
        {
          v39 = v38[3];
          if (v39 == 1)
            v40 = v38;
          else
            v40 = v37;
          if (v39 == 2)
          {
            v40 = v37;
            v41 = v38;
          }
          else
          {
            v41 = v36;
          }
          if (v39 == 3)
            v35 = v38;
          v38 += 382;
          if (v39 != 3)
          {
            v37 = v40;
            v36 = v41;
          }
          --v34;
        }
        while (v34);
        if (!v37 || !v36)
          goto LABEL_201;
        v42 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v37[11], 1);
        if (!v42)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56000, 0, v43, v44, v45, v46, v137);
          v8 = -2130698230;
          goto LABEL_201;
        }
        v47 = v42;
        v141 = 0;
        v142 = 0;
        LODWORD(i) = 0;
        v138 = v42;
        v49 = *(_DWORD *)(a1 + 1856);
        v8 = v10;
        while (1)
        {
          if (v49 >= v37[11] || *(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 44) + HIDWORD(v141) > v12)
          {
LABEL_149:
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v47);
            if (HIDWORD(v141)
              && (v8 & 0x80000000) == 0
              && (v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 1824), *(_QWORD *)(a1 + 1832), (2 * HIDWORD(v141))), v8 < 0))
            {
              v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_198:
              log_OutPublic(v105, (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v101, v102, v103, v104, "stream");
            }
            else if (v8 < 0 || !(_DWORD)i)
            {
              if ((v8 & 0x80000000) == 0)
                goto LABEL_188;
            }
            else
            {
              v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 1840), *(_QWORD *)(a1 + 1848), (32 * i));
              if (v8 < 0)
              {
                v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                goto LABEL_198;
              }
LABEL_188:
              if (*(_DWORD *)(a1 + 1856) < v37[11])
              {
                v129 = 2;
                goto LABEL_194;
              }
              v8 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 1792), *(_QWORD *)(a1 + 1800), 8);
              if (v8 < 0)
              {
                v134 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_200:
                log_OutPublic(v134, (uint64_t)"SYNTH_BET3", 56006, "%s%s%s%x", v130, v131, v132, v133, "contentType");
              }
              else
              {
                *(_DWORD *)(a1 + 1856) = 0;
                if (HIDWORD(__n) <= 8)
                  v129 = 1;
                else
                  v129 = 2;
LABEL_194:
                *a5 = v129;
                if ((_DWORD)i)
                {
                  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 1808), *(_QWORD *)(a1 + 1816), (32 * i));
                  if (v8 < 0)
                  {
                    v134 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                    goto LABEL_200;
                  }
                }
              }
            }
LABEL_201:
            v135 = critsec_Leave(*(_QWORD **)(a1 + 24));
            if (v135 >= 0 || v8 <= -1)
              return v8;
            else
              return v135;
          }
          v50 = __dst;
          if (__dst)
            v51 = i >= __n;
          else
            v51 = 1;
          if (!v51)
          {
            for (i = i; v50 && i < __n; ++i)
            {
              v52 = v50[8 * i + 3];
              v53 = *(_DWORD *)(a1 + 52);
              if (v52 > *(_DWORD *)(a1 + 1860))
              {
                if (v53)
                  break;
LABEL_57:
                v58 = v50[3];
                v59 = v52 - v58;
                v60 = v50[8 * i];
                if (v60 == 8 || v60 == 26)
                {
                  if (v59 < v37[11])
                  {
                    *(_BYTE *)(v47 + v59) = 1;
                    v50 = __dst;
                  }
                }
                else if (v60 == 33)
                {
                  v62 = v50[8 * v142 + 3] - v58;
                  if (v50[8 * i + 6] == 35)
                  {
                    if ((v52 == v58 || v59 < v37[11] && *(_BYTE *)(v47 + v59) || v50[8 * v142 + 4] + v62 == v59)
                      && v50[8 * i + 4])
                    {
                      v63 = 0;
                      do
                      {
                        if (v59 + v63 < v37[11])
                        {
                          *(_BYTE *)(v47 + v59 + v63) = 2;
                          v50 = __dst;
                        }
                        ++v63;
                      }
                      while (v63 < v50[8 * i + 4]);
                    }
                    v142 = i;
                  }
                  else if (v59 < v37[11] && !*(_BYTE *)(v47 + v59))
                  {
                    v64 = v50[8 * v142 + 4];
                    if (v64)
                    {
                      if (v64 + v62 == v59)
                      {
                        v65 = 0;
                        do
                        {
                          if (v62 + (int)v65 < v37[11])
                          {
                            *(_BYTE *)(v47 + (v62 + v65)) = 0;
                            v50 = __dst;
                          }
                          ++v65;
                        }
                        while (v65 < v50[8 * v142 + 4]);
                      }
                    }
                  }
                }
                continue;
              }
              if (!v53)
                goto LABEL_57;
              if (!i)
                LODWORD(v141) = v50[3];
              HIDWORD(v54) = 0;
              *(_QWORD *)(a1 + 1880) = 0;
              switch(v50[8 * i])
              {
                case 0x10:
                  critsec_Leave(*(_QWORD **)(a1 + 24));
                  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
                  v56 = *((_DWORD *)__dst + 8 * i + 6);
                  v57 = "pitch";
                  goto LABEL_88;
                case 0x11:
                  critsec_Leave(*(_QWORD **)(a1 + 24));
                  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
                  v56 = *((_DWORD *)__dst + 8 * i + 6);
                  v57 = "timbre";
                  goto LABEL_88;
                case 0x12:
                  critsec_Leave(*(_QWORD **)(a1 + 24));
                  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
                  v56 = *((_DWORD *)__dst + 8 * i + 6);
                  v57 = "rate";
                  goto LABEL_88;
                case 0x18:
                  critsec_Leave(*(_QWORD **)(a1 + 24));
                  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
                  v56 = *((_DWORD *)__dst + 8 * i + 6);
                  v57 = "volume";
LABEL_88:
                  paramc_ParamSetUInt(v55, (uint64_t)v57, v56);
                  critsec_Enter(*(_QWORD **)(a1 + 24));
                  break;
                default:
                  break;
              }
              v50 = __dst;
              *((_DWORD *)__dst + 8 * i + 3) = *(_DWORD *)(a1 + 1864);
              if (i + 1 >= __n)
              {
                v66 = *(_DWORD *)(a1 + 44);
              }
              else
              {
                v66 = *(_DWORD *)(a1 + 44);
                if (v50[8 * i + 8] == 8)
                {
                  *(_DWORD *)(a1 + 1880) = v52 - v141;
                  v67 = (char *)&v50[8 * i];
                  v68 = *((_DWORD *)v67 + 4);
                  *(_DWORD *)(a1 + 1884) = v68 + v52 - v141;
                  *((_DWORD *)v67 + 4) = ((double)v68 * (double)v66 + 0.5);
                  continue;
                }
              }
              v69 = (char *)&v50[8 * i];
              LODWORD(v54) = *((_DWORD *)v69 + 4);
              *((_DWORD *)v69 + 4) = ((double)v54 * ceil((double)v66 * *(float *)(a1 + 132)) + 0.5);
            }
          }
          v70 = 0.0;
          v71 = 0.0;
          if ((*(_BYTE *)(v140 + *v37) & 4) != 0)
          {
            v72 = *(float *)(a1 + 64);
            v73 = *v36;
            v74 = exp(**(float **)(*((_QWORD *)v36 + 8) + 8 * v73));
            v71 = *(float *)(a1 + 68) + (float)(v72 * v74);
            *v36 = v73 + 1;
          }
          if (v35 && ((1 << v35[3]) & (unint64_t)*(unsigned __int8 *)(v140 + *v37)) >> v35[3])
          {
            v75 = *v35;
            v70 = exp(**(float **)(*((_QWORD *)v35 + 8) + 8 * v75));
            *v35 = v75 + 1;
          }
          v76 = *(unsigned int *)(a1 + 272);
          v49 = *(_DWORD *)(a1 + 1856);
          if ((v76 & 0x80000000) == 0)
          {
            v77 = *(int **)(*((_QWORD *)v37 + 8) + 8 * v49);
            v78 = v76 + 1;
            v79 = v151;
            v80 = v78;
            do
            {
              v81 = *v77++;
              *v79++ = v81;
              --v80;
            }
            while (v80);
            v82 = *(float **)(a1 + 1872);
            if (v82)
            {
              v83 = (float *)v151;
              do
              {
                v84 = *v82++;
                *v83 = *v83 + v84;
                ++v83;
                --v78;
              }
              while (v78);
            }
          }
          v144 = 0;
          v85 = *(_DWORD *)(a1 + 52);
          if (!v85
            && (**(float **)(*((_QWORD *)v37 + 8) + 8 * v49) == 0.0 || v49 >= v37[11] || *(_BYTE *)(v47 + v49) == 2))
          {
            v143 = vcvtps_u32_f32(*(float *)(a1 + 132) * (float)*(int *)(a1 + 552));
          }
          else
          {
            v86 = *(_DWORD *)(a1 + 132);
            v87 = *(_DWORD *)(a1 + 1880);
            if (v87 <= v49 && *(_DWORD *)(a1 + 1884) > v49)
              *(_DWORD *)(a1 + 132) = 1065353216;
            if (v85 || !v49 || !*(_DWORD *)(a1 + 56))
            {
              v8 = BET3FLT__MFVSyn__SynthesisOneFrame(a1 + 72, v151, (int *)&v143, &v144, v71, 0.0, *(float *)(v139 + 4 * *v37), v70);
              v87 = *(_DWORD *)(a1 + 1880);
              v49 = *(_DWORD *)(a1 + 1856);
            }
            if (v87 <= v49 && *(_DWORD *)(a1 + 1884) > v49)
              *(_DWORD *)(a1 + 132) = v86;
          }
          v88 = 0;
          if ((v8 & 0x80000000) == 0)
          {
            v89 = v143;
            if (v143)
              break;
          }
LABEL_147:
          if (v88 || v8 < 0)
            goto LABEL_149;
        }
        ++*(_DWORD *)(a1 + 1860);
        *(_DWORD *)(a1 + 1864) += v89;
        if (v89 + HIDWORD(v141) <= v12)
        {
          v88 = 0;
          goto LABEL_137;
        }
        if (HIDWORD(v141))
        {
          v90 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 1824), *(_QWORD *)(a1 + 1832), (2 * HIDWORD(v141)));
          if (v90 < 0)
          {
            v8 = v90;
            goto LABEL_145;
          }
          v89 = v143;
        }
        if (v89 <= v12)
          v95 = v12;
        else
          v95 = v89;
        if (!*(_DWORD *)(a1 + 52))
          v89 = v95;
        v8 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(a1 + 1824), *(_QWORD *)(a1 + 1832), &v145, 2 * v89);
        if ((v8 & 0x80000000) == 0)
        {
          HIDWORD(v141) = 0;
          v88 = *(_DWORD *)(a1 + 52) != 0;
LABEL_137:
          v96 = v144;
          if (v144)
          {
            v97 = v143;
            if (v143)
            {
              v98 = 0;
              v99 = v145;
              do
              {
                *(_WORD *)(v99 + 2 * (HIDWORD(v141) + v98)) = (int)*(float *)(v96 + 4 * v98);
                ++v98;
              }
              while (v97 != v98);
            }
            v100 = HIDWORD(v141);
          }
          else
          {
            v100 = HIDWORD(v141);
            bzero((void *)(v145 + 2 * HIDWORD(v141)), v143 + 2);
            LODWORD(v97) = v143;
          }
          HIDWORD(v141) = v97 + v100;
          v47 = v138;
          goto LABEL_146;
        }
LABEL_145:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v91, v92, v93, v94, "stream");
        HIDWORD(v141) = 0;
        v88 = *(_DWORD *)(a1 + 52) != 0;
LABEL_146:
        ++*v37;
        v49 = *(_DWORD *)(a1 + 1856) + 1;
        *(_DWORD *)(a1 + 1856) = v49;
        goto LABEL_147;
      }
LABEL_183:
      v10 = v32;
      v116 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      goto LABEL_184;
    }
  }
  else
  {
    if (!v149)
    {
      *a5 = 0;
      return v10;
    }
    v106 = *(_QWORD *)(a1 + 1824);
    if (!v106
      || (v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v106, *(_QWORD *)(a1 + 1832)),
          *(_QWORD *)(a1 + 1824) = safeh_GetNullHandle(),
          *(_QWORD *)(a1 + 1832) = v107,
          (v10 & 0x80000000) == 0))
    {
      if (*(_QWORD *)(a1 + 1840))
      {
        v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 1808), *(_QWORD *)(a1 + 1816), &__src, &__n);
        if ((v10 & 0x80000000) != 0)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v108, v109, v110, v111, "contentType");
        }
        else if ((_DWORD)__n)
        {
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(a1 + 1840), *(_QWORD *)(a1 + 1848), &__dst);
          if ((v10 & 0x80000000) != 0)
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v112, v113, v114, v115, "stream");
        }
        if ((v10 & 0x80000000) == 0 && (_DWORD)__n && __src && __dst)
        {
          memcpy(__dst, __src, __n);
          v117 = __n;
          LODWORD(__n) = __n >> 5;
          if (v117 >= 0x20)
          {
            v118 = 0;
            v119 = 0;
            v120 = *(_DWORD *)(a1 + 1864);
            v121 = (char *)__dst;
            do
            {
              v122 = &v121[v118];
              *((_DWORD *)v122 + 3) = v120;
              *((_DWORD *)v122 + 4) = 0;
              ++v119;
              v118 += 32;
            }
            while (v119 < __n);
          }
          else
          {
            v118 = 0;
          }
          v32 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 1840), *(_QWORD *)(a1 + 1848), v118);
          if ((v32 & 0x80000000) != 0)
            goto LABEL_183;
          v123 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 1808), *(_QWORD *)(a1 + 1816), v118);
          if ((v123 & 0x80000000) != 0)
          {
            v10 = v123;
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56006, "%s%s%s%x", v124, v125, v126, v127, "contentType");
            return v10;
          }
        }
        else if ((v10 & 0x80000000) != 0)
        {
          return v10;
        }
        v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 1840), *(_QWORD *)(a1 + 1848));
        *(_QWORD *)(a1 + 1840) = safeh_GetNullHandle();
        *(_QWORD *)(a1 + 1848) = v128;
      }
    }
  }
  return v10;
}

uint64_t synth_bet3_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 9346, 1904);
  if ((v3 & 0x80000000) != 0)
    return 2164269064;
  v4 = v3;
  *(_QWORD *)((char *)a1 + 1860) = 0;
  v5 = a1[224];
  if (v5)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(a1[4] + 72))(v5, a1[225]);
    a1[224] = safeh_GetNullHandle();
    a1[225] = v6;
  }
  v7 = a1[226];
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(a1[4] + 72))(v7, a1[227]);
    if ((int)v4 > -1 && v8 < 0)
      v4 = v8;
    else
      v4 = v4;
    a1[226] = safeh_GetNullHandle();
    a1[227] = v10;
  }
  v11 = a1[228];
  if (v11)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD))(a1[4] + 72))(v11, a1[229]);
    if ((int)v4 > -1 && v12 < 0)
      v4 = v12;
    else
      v4 = v4;
    a1[228] = safeh_GetNullHandle();
    a1[229] = v14;
  }
  v15 = a1[230];
  if (v15)
  {
    v16 = (*(uint64_t (**)(uint64_t, _QWORD))(a1[4] + 72))(v15, a1[231]);
    if ((int)v4 > -1 && v16 < 0)
      v4 = v16;
    else
      v4 = v4;
    a1[230] = safeh_GetNullHandle();
    a1[231] = v18;
  }
  return v4;
}

uint64_t synth_bet3_loc_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t result;

  if (!strcmp(__s1, "audiooutputbufsamples"))
  {
    if ((int)LH_atoi(a3) <= 0)
      result = 2164269071;
    else
      result = 0;
  }
  else if (!strcmp(__s1, "volume"))
  {
    if (LH_atoi(a3) <= 0x64)
      result = 0;
    else
      result = 2164269071;
  }
  else if (!strcmp(__s1, "rate") || !strcmp(__s1, "rate_baseline"))
  {
    if (LH_atoi(a3) - 401 >= 0xFFFFFEA1)
      result = 0;
    else
      result = 2164269071;
  }
  else if (!strcmp(__s1, "ratewpm"))
  {
    result = 2164269057;
  }
  else if (!strcmp(__s1, "pitch") || !strcmp(__s1, "pitch_baseline"))
  {
    if (LH_atoi(a3) - 201 >= 0xFFFFFF69)
      result = 0;
    else
      result = 2164269071;
  }
  else
  {
    result = 0;
  }
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet3_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  const char *v7;

  if (strcmp(__s1, "audiooutputbufsamples")
    && strcmp(__s1, "volume")
    && strcmp(__s1, "rate")
    && strcmp(__s1, "rate_baseline")
    && strcmp(__s1, "ratewpm")
    && strcmp(__s1, "pitch")
    && strcmp(__s1, "pitch_baseline"))
  {
    return 0;
  }
  v7 = LH_atoi(a3);
  return synth_bet3_loc_ParamSet(a1, __s1, (uint64_t)v7);
}

uint64_t synth_bet3_loc_ParamGetListen(uint64_t a1, _BYTE *a2, signed int a3, signed int a4, unsigned int a5, __int128 *a6, int *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  const char *v25;
  __int128 v26;
  uint64_t v27;

  if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, *a7 < a3)
    || (a5 = a4, *a7 > a4))
  {
    v14 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      v20 = v14;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v25 = "parameter";
      v23 = "%s%s";
      v22 = 56009;
      goto LABEL_8;
    }
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v26 = *a6;
  v27 = *((_QWORD *)a6 + 2);
  v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v22 = 56010;
    v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET3", v22, v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet3_loc_SynthInit_MLSA(uint64_t a1)
{
  uint64_t v2;
  uint64_t Int;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t Str;
  uint64_t v10;
  _BOOL4 v11;
  double v12;
  double v13;
  uint64_t v14;
  float v15;
  float v16;
  double v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t inited;
  float v26;
  unsigned int v28;
  _DWORD v29[2];
  float v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *__s1;

  v36 = 0;
  __s1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  v35 = 0;
  v28 = 0;
  Int = paramc_ParamGetInt(*(_QWORD *)(v2 + 40), (uint64_t)"frequencyhz", (int *)&v36 + 1);
  if ((Int & 0x80000000) != 0)
  {
    Str = Int;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_55:
    log_OutPublic(v10, (uint64_t)"SYNTH_BET3", 56008, "%s%s", v4, v5, v6, v7, "parameter");
    return Str;
  }
  MFVSyn__deinit__MVF_Synthesis((_QWORD *)(a1 + 72));
  *(_DWORD *)(a1 + 48) = HIDWORD(v36);
  v8 = (paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && strcmp(__s1, "bet3") == 0;
  *(_DWORD *)(a1 + 52) = v8;
  v11 = (paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
     && !strcmp(__s1, "bet4")
     && (paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet4suppressbet3pcm", &__s1) & 0x80000000) == 0
     && strcmp(__s1, "yes") == 0;
  *(_DWORD *)(a1 + 56) = v11;
  v30 = 0.0;
  v33 = 0x100000000;
  v34 = 0;
  v31 = xmmword_1DECD7910;
  v32 = 1065353216;
  BYTE5(v33) = *(_DWORD *)(a1 + 52) != 0;
  LODWORD(v34) = 4;
  v29[0] = vcvtps_s32_f32(wave_t__convertFromF0ToTp__SR((float)SHIDWORD(v36), 700.0));
  v29[1] = vcvtms_s32_f32(wave_t__convertFromF0ToTp__SR((float)SHIDWORD(v36), 40.0));
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicealpha", &__s1);
  if ((Str & 0x80000000) != 0
    || !__s1
    || !*__s1
    || (v12 = atof(__s1),
        paramc_ParamRelease(*(_QWORD *)(v2 + 40)),
        Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicebeta", &__s1),
        (Str & 0x80000000) != 0)
    || !__s1
    || !*__s1)
  {
LABEL_54:
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    goto LABEL_55;
  }
  v13 = atof(__s1);
  paramc_ParamRelease(*(_QWORD *)(v2 + 40));
  v14 = paramc_ParamGetInt(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voiceframesize", (int *)&v35 + 1);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_53;
  *(_DWORD *)(a1 + 44) = HIDWORD(v35) * *(_DWORD *)(a1 + 48) / 0x3E8u;
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicevol", &__s1);
  if ((Str & 0x80000000) != 0)
    goto LABEL_54;
  if (!__s1)
    goto LABEL_54;
  if (!*__s1)
    goto LABEL_54;
  v15 = atof(__s1);
  *(float *)(a1 + 60) = v15;
  paramc_ParamRelease(*(_QWORD *)(v2 + 40));
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicevuvrelamp", &__s1);
  if ((Str & 0x80000000) != 0)
    goto LABEL_54;
  if (!__s1)
    goto LABEL_54;
  if (!*__s1)
    goto LABEL_54;
  v16 = atof(__s1);
  v30 = v16;
  paramc_ParamRelease(*(_QWORD *)(v2 + 40));
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicemvfboost", &__s1);
  if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
    goto LABEL_54;
  v17 = atof(__s1);
  paramc_ParamRelease(*(_QWORD *)(v2 + 40));
  v14 = paramc_ParamGetInt(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voiceorder", (int *)&v35);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_53:
    Str = v14;
    goto LABEL_54;
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicef0std", &__s1);
  if ((Str & 0x80000000) != 0)
    goto LABEL_54;
  if (!__s1)
    goto LABEL_54;
  if (!*__s1)
    goto LABEL_54;
  v18 = atof(__s1);
  *(float *)(a1 + 64) = v18;
  paramc_ParamRelease(*(_QWORD *)(v2 + 40));
  Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"bet2voicef0mean", &__s1);
  if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
    goto LABEL_54;
  v19 = atof(__s1);
  *(float *)(a1 + 68) = v19;
  paramc_ParamRelease(*(_QWORD *)(v2 + 40));
  if ((paramc_ParamGetInt(*(_QWORD *)(v2 + 40), (uint64_t)"bet2cpupower", (int *)&v36) & 0x80000000) == 0
    && (int)v36 >= 1
    && (int)v36 < 5)
  {
    LODWORD(v34) = v36;
  }
  if (paramc_ParamGet(*(_QWORD *)(v2 + 40), (uint64_t)"bet3cepstralequalizer", (_QWORD *)(a1 + 1872), &v28)|| (_DWORD)v35 + 1 == v28 >> 2)
  {
    v23 = v12;
    v24 = v13;
    inited = BET3FLT__MFVSyn__init__MVF_Synthesis(*(_QWORD *)(a1 + 16), a1 + 72, (__int128 *)v29, 0, SHIDWORD(v35), v35, v23, v24, (float)SHIDWORD(v36));
    if ((inited & 0x80000000) == 0)
    {
      v26 = v17;
      inited = BET3FLT__MFVSyn__setMVFBoost(a1 + 72, v26);
      if ((inited & 0x80000000) == 0)
      {
        inited = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"volume", (int *)&v36);
        if ((inited & 0x80000000) == 0)
        {
          inited = synth_bet3_loc_ParamSet(a1, "volume", v36);
          if ((inited & 0x80000000) == 0)
          {
            inited = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v36);
            if ((inited & 0x80000000) == 0)
            {
              inited = synth_bet3_loc_ParamSet(a1, "rate_baseline", v36);
              if ((inited & 0x80000000) == 0)
              {
                inited = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v36);
                if ((inited & 0x80000000) == 0)
                {
                  inited = synth_bet3_loc_ParamSet(a1, "pitch_baseline", v36);
                  if ((inited & 0x80000000) == 0)
                  {
                    inited = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v36);
                    if ((inited & 0x80000000) == 0)
                    {
                      inited = synth_bet3_loc_ParamSet(a1, "rate", v36);
                      if ((inited & 0x80000000) == 0)
                      {
                        inited = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v36);
                        if ((inited & 0x80000000) == 0)
                          return synth_bet3_loc_ParamSet(a1, "pitch", v36);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return inited;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56008, "%s%s", v20, v35, v21, v22, "parameter");
    return 0;
  }
}

uint64_t synth_bet3_loc_ParamSet(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  float v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (!strcmp(a2, "audiooutputbufsamples"))
  {
    v6 = 0;
    if (a3 <= 1)
      v16 = 1;
    else
      v16 = a3;
    *(_DWORD *)(a1 + 40) = v16;
  }
  else
  {
    v6 = critsec_Enter(*(_QWORD **)(a1 + 24));
    if ((v6 & 0x80000000) == 0)
    {
      if (!strcmp(a2, "volume"))
      {
        if (a3 <= 0x64)
        {
          v10 = v6;
          if (!*(_DWORD *)(a1 + 1896))
          {
            if (a3 > 0x50)
              v17 = *(float *)(a1 + 60) + (float)((float)((float)(2.0 - *(float *)(a1 + 60)) * (float)(a3 - 80)) / 20.0);
            else
              v17 = (float)(*(float *)(a1 + 60) * (float)(int)a3) / 80.0;
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set volume %d (synth %f)", v7, v8, v9, a3);
            v10 = BET3FLT__MFVSyn__setVolumeBoost(a1 + 72, v17);
          }
          goto LABEL_38;
        }
      }
      else
      {
        if (strcmp(a2, "rate_baseline"))
        {
          if (!strcmp(a2, "rate"))
          {
            v18 = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1892), a3);
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set rate %d", v19, v20, v21, a3);
            if (!*(_DWORD *)(a1 + 1896))
            {
              v10 = v6;
              if (*(_DWORD *)(a1 + 52))
              {
                if (MFVSyn__setRateTtsEg(a1 + 72, v18))
                  v10 = 2164269071;
                else
                  v10 = v6;
              }
              goto LABEL_38;
            }
            goto LABEL_26;
          }
          if (!strcmp(a2, "ratewpm"))
          {
            v10 = 2164269057;
            goto LABEL_38;
          }
          if (strcmp(a2, "pitch_baseline"))
          {
            if (!strcmp(a2, "pitch"))
            {
              v10 = 2164269071;
              if ((a3 - 201) >= 0xFFFFFF69)
              {
                if (*(_DWORD *)(a1 + 52))
                {
                  v11 = (float)(int)MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1888), a3);
                  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set pitch %d (synth %f)", v12, v13, v14, a3);
                  v10 = v6;
                  if (!*(_DWORD *)(a1 + 1896))
                  {
                    BET3FLT__MFVSyn__setPitchLevelPercent(a1 + 72, v11);
                    if (v15)
                      v10 = 2164269071;
                    else
                      v10 = v6;
                  }
                  goto LABEL_38;
                }
                goto LABEL_26;
              }
LABEL_38:
              critsec_Leave(*(_QWORD **)(a1 + 24));
              return v10;
            }
LABEL_26:
            v10 = v6;
            goto LABEL_38;
          }
          v10 = 2164269071;
          if ((a3 - 201) < 0xFFFFFF69)
            goto LABEL_38;
          v26 = 0;
          *(_DWORD *)(a1 + 1888) = a3;
          v22 = "pitch";
          paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v26);
          v23 = v26;
LABEL_28:
          synth_bet3_loc_ParamSet(a1, v22, v23);
          v10 = 0;
          goto LABEL_38;
        }
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          v25 = 0;
          *(_DWORD *)(a1 + 1892) = a3;
          v22 = "rate";
          paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v25);
          v23 = v25;
          goto LABEL_28;
        }
      }
      v10 = 2164269071;
      goto LABEL_38;
    }
  }
  return v6;
}

void rand_num(unint64_t *a1, float *a2, int a3, float a4)
{
  float v6;
  uint64_t v7;

  if (a3 >= 1)
  {
    v6 = a4 + a4;
    v7 = a3;
    do
    {
      *a2++ = v6 * (float)((float)(rand31pmc_ranf(a1) * 4.6566e-10) + -0.5);
      --v7;
    }
    while (v7);
  }
}

uint64_t *BET3FLT__rand_num_init(uint64_t *a1)
{
  return BET3FLT__rand31pmc_seedi(a1, 0);
}

void BET3FLT__MFVSyn__constructExcitationShapingFilter(uint64_t a1, float a2)
{
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  unsigned int v15;
  float v16;
  float v17;

  v2 = a2;
  if (a2 <= 0.0)
  {
    vect_t__fillZero(a1 + 576);
  }
  else
  {
    v17 = 0.0;
    rand_num((unint64_t *)(a1 + 88), &v17, 1, 1.0);
    v4 = *(_QWORD *)(a1 + 584);
    v5 = *(int *)(a1 + 592);
    *(float *)(v4 + 4 * (v5 - 1)) = (float)((float)(v17 * 25.0) + 25.0) + v2;
    v_equ((void *)v4, (const void *)(v4 + 4), v5 - 1);
    v17 = 0.0;
    v6 = *(_QWORD *)(a1 + 584);
    v7 = *(_DWORD *)(a1 + 592);
    v8 = *(float *)(v6 + 4 * (v7 - 2));
    if (v8 <= 0.0)
    {
      v10 = 0;
      v9 = 0.0;
    }
    else
    {
      v9 = (float)(v8 * 4.0) + 0.0;
      v17 = v9;
      v10 = 4;
    }
    v11 = *(float *)(v6 + 4 * (v7 - 3));
    if (v11 > 0.0)
    {
      v10 |= 2u;
      v9 = v9 + (float)(v11 * 2.0);
      v17 = v9;
    }
    v12 = *(float *)(v6 + 4 * (v7 - 4));
    v13 = v12 <= 0.0;
    if (v12 <= 0.0)
      v12 = -0.0;
    v14 = v9 + v12;
    if (v13)
      v15 = v10;
    else
      v15 = v10 + 1;
    v2 = v14 * invDiv[v15];
  }
  v16 = (float)*(int *)(a1 + 168) * 0.5;
  if (v16 >= (float)(v2 * *(float *)(a1 + 52)))
    v16 = v2 * *(float *)(a1 + 52);
  *(float *)(a1 + 552) = v16;
}

float MFVSyn__filterExcitationWithShapingFilterFast(uint64_t a1, int a2, uint64_t a3, float a4)
{
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  unsigned int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v7 = *(float *)(a1 + 552);
  if (v7 > 0.0)
  {
    v8 = *(float *)(a1 + 556);
    if (v8 > 0.0)
      v7 = (float)((float)(1.0 - a4) * v8) + (float)(a4 * v7);
  }
  v9 = *(unsigned int *)(a1 + 792);
  v10 = a1 + 808;
  if ((int)v9 < 1)
  {
LABEL_8:
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = 0;
    v12 = (float *)(a1 + 824);
    while (*v12 < (float)(v7 / (float)*(int *)(a1 + 168)))
    {
      ++v11;
      v12 += 6;
      if (v9 == v11)
        goto LABEL_8;
    }
  }
  v13 = v11;
  v_equ(*(void **)(a3 + 8), *(const void **)(v10 + 24 * v11), *(unsigned __int16 *)(a1 + 796));
  v14 = sqrt((double)a2);
  v_scale(*(float **)(a3 + 8), *(unsigned __int16 *)(a1 + 796), *(float *)(a1 + 56) * v14);
  v15 = *(_DWORD *)(a1 + 672);
  if (v15 >= 1)
  {
    if (v15 >= a2)
      v15 = a2;
    if (*(_DWORD *)(a3 + 16) >= v15)
      v16 = v15;
    else
      v16 = *(_DWORD *)(a3 + 16);
    v_add(*(float **)(a3 + 8), *(float **)(a1 + 664), v16);
    v17 = *(_DWORD *)(a1 + 672);
    if (v17 > v16)
    {
      v_equ(*(void **)(a1 + 664), (const void *)(*(_QWORD *)(a1 + 664) + 4 * v16), v17 - v16);
      *(_DWORD *)(a1 + 672) = (*(_DWORD *)(a1 + 672) - v16) & ~((*(_DWORD *)(a1 + 672) - v16) >> 31);
    }
  }
  vect_t__fillZero(a1 + 656);
  v18 = *(unsigned __int16 *)(a1 + 796);
  if (v18 <= a2)
  {
    v19 = a2;
  }
  else
  {
    v19 = a2;
    v_equ(*(void **)(a1 + 664), (const void *)(*(_QWORD *)(a3 + 8) + 4 * a2), v18 - a2);
    v20 = *(unsigned __int16 *)(a1 + 796) - a2;
    if (v20 <= *(_DWORD *)(a1 + 672))
      v20 = *(_DWORD *)(a1 + 672);
    *(_DWORD *)(a1 + 672) = v20;
  }
  v21 = *(unsigned __int16 *)(a1 + 800);
  rand_num((unint64_t *)(a1 + 88), (float *)(*(_QWORD *)(a1 + 464) + 4 * v21), a2, (float)(*(float *)(a1 + 44) * 1.15) * *(float *)(a1 + 56));
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 688), v21);
  v_equ(*(void **)(a1 + 688), (const void *)(*(_QWORD *)(a1 + 464) + 4 * v19), v21);
  zerflt(*(_QWORD *)(a1 + 464) + 4 * v21, *(float **)(v10 + 24 * v13 + 8), *(_QWORD *)(a1 + 464) + 4 * v21, *(unsigned __int16 *)(a1 + 800), a2);
  v_equ(*(void **)(a1 + 464), (const void *)(*(_QWORD *)(a1 + 464) + 4 * v21), a2);
  return v_add(*(float **)(a3 + 8), *(float **)(a1 + 464), a2);
}

uint64_t BET3FLT__vect_t__createVect(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *v6;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a1;
  v5 = 4 * a3;
  v6 = (void *)heap_Alloc(a1, v5);
  *(_QWORD *)(a2 + 8) = v6;
  if (!v6)
    return 2164269066;
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  if (a3 >= 1)
    bzero(v6, v5);
  return 0;
}

_QWORD *BET3FLT__vect_t__deleteVect(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  if (result)
  {
    v2 = result + 1;
    v1 = result[1];
    if (v1)
      result = heap_Free((_QWORD *)*result, v1);
    *v2 = 0;
    v2[1] = 0;
  }
  return result;
}

void vect_t__fillZero(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 20);
  if ((int)v1 >= 1)
    bzero(*(void **)(a1 + 8), 4 * v1);
}

void vect_t__mulByHanning(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 8);
    do
    {
      v4 = cos((float)((float)(6.2832 / (float)(v1 - 1)) * (float)(int)v2));
      *(float *)(v3 + 4 * v2) = (float)((float)(1.0 - v4) * 0.5) * *(float *)(v3 + 4 * v2);
      ++v2;
    }
    while (v1 != v2);
  }
}

uint64_t BET3FLT__MFVSyn__SynthesisOneFrame(uint64_t a1, const void *a2, int *a3, _QWORD *a4, float a5, float a6, float a7, float a8)
{
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  float v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  signed int v48;
  void *v49;
  const void *v50;
  int i;
  float v52;
  float v53;
  float v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  float v61;

  *a3 = 0;
  v15 = *(_DWORD *)(a1 + 604);
  v16 = a5 == 0.0;
  if (v15 != 1)
    v16 = 0;
  if (v15)
    v17 = 0;
  else
    v17 = a5 > 0.0;
  *a4 = 0;
  *(_DWORD *)(a1 + 600) = v17 || v16;
  if (a5 != 0.0)
  {
    a5 = *(float *)(a1 + 64) * a5;
    if (a5 < 40.0)
      a5 = 40.0;
  }
  *(_DWORD *)(a1 + 604) = a5 > 0.0;
  v18 = (float)*(int *)(a1 + 480);
  v19 = *(float *)(a1 + 60);
  v20 = BET3FLT__wave_t__convertFromF0ToTp((float *)(a1 + 32), a5);
  *(float *)(a1 + 704) = v20;
  if (v20 == 0.0)
  {
    v21 = *(_DWORD *)(a1 + 544);
    *(_DWORD *)(a1 + 544) = v21 + 1;
    v22 = *(_DWORD *)(a1 + 536);
    v23 = *(_QWORD *)(a1 + 528);
    if (v21 >= v22)
    {
      v_equ((void *)v23, (const void *)(v23 + 4), v22 - 1);
      v23 = *(_QWORD *)(a1 + 528);
      v22 = *(_DWORD *)(a1 + 536);
      *(float *)(v23 + 4 * (v22 - 1)) = (float)*(int *)(a1 + 512);
    }
    *(float *)(a1 + 704) = v_sum((float *)v23, v22) / (float)*(int *)(a1 + 536);
  }
  else
  {
    *(_DWORD *)(a1 + 544) = 0;
    v_equ(*(void **)(a1 + 528), (const void *)(*(_QWORD *)(a1 + 528) + 4), *(_DWORD *)(a1 + 536) - 1);
    *(_DWORD *)(*(_QWORD *)(a1 + 528) + 4 * *(int *)(a1 + 536) - 4) = *(_DWORD *)(a1 + 704);
  }
  v24 = v19 * v18;
  v_equ(*(void **)(a1 + 728), a2, *(_DWORD *)(a1 + 200) + 1);
  v25 = 0.0;
  if (a6 > 0.0)
    v25 = 0.25;
  *(float *)(a1 + 708) = v25;
  *(float *)(a1 + 712) = a8;
  v26 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 560) = 1065353216;
  *(_DWORD *)(a1 + 568) = v26;
  BET3FLT__MFVSyn__mc2mlsa(a1, *(_QWORD *)(a1 + 728), *(_QWORD *)(a1 + 384));
  MFVSyn__postFilter(a1, *(float **)(a1 + 728), *(float **)(a1 + 384));
  v_equ(*(void **)(a1 + 728), *(const void **)(a1 + 384), *(_DWORD *)(a1 + 200) + 1);
  BET3FLT__MFVSyn__constructExcitationShapingFilter(a1, *(float *)(a1 + 712));
  if (*(_DWORD *)(a1 + 600)
    || (v27 = vabds_f32(*(float *)(a1 + 704), *(float *)(a1 + 744)),
        v27 >= BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), 60.0)))
  {
    *(_DWORD *)(a1 + 744) = *(_DWORD *)(a1 + 704);
  }
  v28 = vcvtps_s32_f32(v24);
  v29 = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a1 + 84) = (v29 + 1) >> 1;
  if (*(_BYTE *)(a1 + 244))
  {
    v30 = *(unsigned int *)(a1 + 240);
    if ((v30 & 0x80000000) == 0)
    {
      v31 = 1.0 / (float)(1 << *(_BYTE *)(a1 + 244));
      v32 = *(float **)(a1 + 728);
      v33 = *(float **)(a1 + 768);
      v34 = *(float **)(a1 + 224);
      v35 = v30 + 1;
      do
      {
        v36 = *v32++;
        v37 = v36;
        v38 = *v33++;
        *v34++ = v31 * (float)(v37 - v38);
        --v35;
      }
      while (v35);
    }
  }
  else
  {
    v39 = *(unsigned int *)(a1 + 240);
    if ((v39 & 0x80000000) == 0)
    {
      v40 = (float)v29 / (float)v28;
      v41 = *(float **)(a1 + 728);
      v42 = *(float **)(a1 + 768);
      v43 = *(float **)(a1 + 224);
      v44 = v39 + 1;
      do
      {
        v45 = *v41++;
        v46 = v45;
        v47 = *v42++;
        *v43++ = v40 * (float)(v46 - v47);
        --v44;
      }
      while (v44);
    }
  }
  v_equ(*(void **)(a1 + 184), *(const void **)(a1 + 768), *(_DWORD *)(a1 + 200) + 1);
  v48 = *(_DWORD *)(a1 + 784);
  if (v48 >= 1)
  {
    v49 = *(void **)(a1 + 440);
    v50 = *(const void **)(a1 + 416);
    if (v48 <= v28)
    {
      v_equ(v49, v50, v48);
      BET3FLT__MFVSyn__mlsa_filter(a1, *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 496), *(_DWORD *)(a1 + 784));
    }
    else
    {
      v_equ(v49, v50, v28);
      BET3FLT__MFVSyn__mlsa_filter(a1, *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 496), v28);
      v_equ(*(void **)(a1 + 416), (const void *)(*(_QWORD *)(a1 + 416) + 4 * v28), *(_DWORD *)(a1 + 784) - v28);
    }
  }
  for (i = *(_DWORD *)(a1 + 784); i < v28; *(_DWORD *)(a1 + 784) = i)
  {
    v52 = (float)i / (float)v28;
    v53 = *(float *)(a1 + 704);
    if (*(_DWORD *)(a1 + 76) < 4u)
    {
      v54 = *(float *)(a1 + 708);
    }
    else
    {
      v53 = (float)((float)(1.0 - v52) * *(float *)(a1 + 744)) + (float)(v52 * v53);
      v54 = (float)((float)(1.0 - v52) * *(float *)(a1 + 748)) + (float)(v52 * *(float *)(a1 + 708));
    }
    v61 = 0.0;
    rand_num((unint64_t *)(a1 + 88), &v61, 1, 1.0);
    v55 = (int)(v53 * (1.0 - (float)(v54 * v61)) + 0.5);
    if (*(_DWORD *)(a1 + 36) > v55)
      v55 = *(_DWORD *)(a1 + 36);
    if (v55 >= *(_DWORD *)(a1 + 40))
      v56 = *(_DWORD *)(a1 + 40);
    else
      v56 = v55;
    if (*(_BYTE *)(a1 + 74))
      MFVSyn__filterExcitationWithShapingFilterFast(a1, v56, a1 + 432, v52);
    else
      MFVSyn__filterExcitationWithShapingFilterHQ(a1, v56, *(_DWORD *)(a1 + 604), a1 + 432, v53, v52, a7);
    v57 = *(int *)(a1 + 784);
    v58 = v57 + v56;
    if ((int)v57 + v56 >= v28)
      v58 = v28;
    BET3FLT__MFVSyn__mlsa_filter(a1, *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 496) + 4 * v57, v58 - v57);
    v59 = *(_DWORD *)(a1 + 784);
    i = v59 + v56;
    if (v59 + v56 > v28)
    {
      v_equ(*(void **)(a1 + 416), (const void *)(*(_QWORD *)(a1 + 440) + 4 * (v28 - v59)), v56 - (v28 - v59));
      i = *(_DWORD *)(a1 + 784) + v56;
    }
  }
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 552);
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a1 + 704);
  v_equ(*(void **)(a1 + 768), *(const void **)(a1 + 728), *(_DWORD *)(a1 + 200) + 1);
  if (*(_BYTE *)(a1 + 73))
    MFVSyn__disperse(a1, a1 + 488, 0, v28);
  *(_DWORD *)(a1 + 784) -= v28;
  *a3 = v28;
  *a4 = *(_QWORD *)(a1 + 496);
  return 0;
}

uint64_t *BET3FLT__rand31pmc_seedi(uint64_t *result, unint64_t a2)
{
  uint64_t v2;

  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  *result = v2;
  return result;
}

float rand31pmc_ranf(unint64_t *a1)
{
  unint64_t v1;

  v1 = ((1101463552 * (*a1 >> 16)) & 0x7FFF0000)
     + 16807 * (unsigned __int16)*a1
     + ((16807 * (*a1 >> 16)) >> 15);
  if (v1 >> 31)
    v1 -= 0x7FFFFFFFLL;
  *a1 = v1;
  return (float)v1;
}

uint64_t BET3FLT__MFVSyn__setVolumeBoost(uint64_t a1, float a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t result;

  if (a2 >= 0.0)
  {
    v3 = a2 == 2.0;
    v2 = a2 >= 2.0;
  }
  else
  {
    v2 = 1;
    v3 = 0;
  }
  if (!v3 && v2)
    return 2164269071;
  result = 0;
  *(float *)(a1 + 56) = a2;
  return result;
}

uint64_t BET3FLT__MFVSyn__setMVFBoost(uint64_t a1, float a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t result;

  if (a2 >= 0.0)
  {
    v3 = a2 == 2.0;
    v2 = a2 >= 2.0;
  }
  else
  {
    v2 = 1;
    v3 = 0;
  }
  if (!v3 && v2)
    return 2164269071;
  result = 0;
  *(float *)(a1 + 52) = a2;
  return result;
}

uint64_t MFVSyn__setRateTtsEg(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  float v6;
  float v7;

  v2 = 2164269071;
  if (a2 >= 400)
    v3 = 400;
  else
    v3 = a2;
  if (v3 <= 50)
    v4 = 50;
  else
    v4 = v3;
  if ((a2 - 401) >= 0xFFFFFEA1)
    v5 = 0;
  else
    v5 = 2164269071;
  v6 = 100.0 / (float)v4;
  v7 = 0.01;
  if (v6 >= 0.01)
  {
    v7 = 100.0 / (float)v4;
    if (v6 > 4.0)
      v7 = 4.0;
  }
  if (v7 > 0.0 && v7 <= 4.0)
  {
    *(float *)(a1 + 60) = v7;
    return v5;
  }
  return v2;
}

float BET3FLT__MFVSyn__setPitchLevelPercent(uint64_t a1, float result)
{
  if (result >= 50.0 && result <= 200.0)
  {
    result = result / 100.0;
    *(float *)(a1 + 64) = result;
  }
  return result;
}

uint64_t *BET3FLT__MFVSyn__construct(uint64_t a1)
{
  uint64_t *result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  result = BET3FLT__rand_num_init((uint64_t *)(a1 + 88));
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_BYTE *)(a1 + 74))
  {
    *(_QWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 616) = 0;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  return result;
}

_QWORD *BET3FLT__MFVSyn__deconstruct(uint64_t a1)
{
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 760));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 720));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 520));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 576));
  BET3FLT__MFVSyn__mlsa_filter_deinit(a1);
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 176));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 216));
  if (!*(_BYTE *)(a1 + 74))
  {
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 608));
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 632));
  }
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 656));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 680));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 144));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 96));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 120));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 408));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 432));
  BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 456));
  return BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 488));
}

uint64_t BET3FLT__MFVSyn__init__MVF_Synthesis(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, int a5, int a6, float a7, float a8, float a9)
{
  __int128 v14;
  __int128 v15;
  float *v16;
  uint64_t ExcTable;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  float v32;
  uint64_t Vect;

  *(_QWORD *)a2 = a1;
  v14 = *a3;
  v15 = a3[1];
  *(_OWORD *)(a2 + 68) = a3[2];
  *(_OWORD *)(a2 + 52) = v15;
  *(_OWORD *)(a2 + 36) = v14;
  *(_DWORD *)(a2 + 200) = a6;
  *(_DWORD *)(a2 + 204) = a6;
  v16 = (float *)(a2 + 32);
  BET3FLT__wave_t__setSampleRateHz((float *)(a2 + 32), a9);
  BET3FLT__MFVSyn__construct(a2);
  *(float *)(a2 + 68) = BET3FLT__wave_t__convertFromMsecToTp(v16, (float)a5);
  if (*(_BYTE *)(a2 + 74))
  {
    ExcTable = BET3FLT__MFVSyn__loadExcTable(a2, a4);
    if ((ExcTable & 0x80000000) != 0)
      return ExcTable;
  }
  *(_DWORD *)(a2 + 600) = 0;
  *(_DWORD *)(a2 + 512) = (int)BET3FLT__wave_t__convertFromF0ToTp(v16, 250.0);
  ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 520, 4);
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  v_set(*(float **)(a2 + 528), *(_DWORD *)(a2 + 540), 1.0);
  v_scale(*(float **)(a2 + 528), *(_DWORD *)(a2 + 540), (float)*(int *)(a2 + 512));
  *(_DWORD *)(a2 + 544) = 0;
  *(_DWORD *)(a2 + 168) = (int)BET3FLT__wave_t__sampleRateHz((uint64_t)v16);
  ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 576, 5);
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  if (*(_BYTE *)(a2 + 74))
  {
    v18 = *(unsigned __int16 *)(a2 + 796);
    if (v18 <= *(unsigned __int16 *)(a2 + 800))
      v18 = *(unsigned __int16 *)(a2 + 800);
  }
  else
  {
    *(_QWORD *)(a2 + 808) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    v18 = 89;
  }
  *(_DWORD *)(a2 + 172) = v18;
  ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 176, *(_DWORD *)(a2 + 200) + 1);
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  v19 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v20 = *(_DWORD *)(a2 + 172);
  if (*(_BYTE *)(a2 + 74))
  {
    ExcTable = BET3FLT__vect_t__createVect(v19, a2 + 656, v20);
    if ((ExcTable & 0x80000000) == 0)
    {
      *(_DWORD *)(a2 + 672) = 0;
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 680, *(_DWORD *)(a2 + 172));
      if ((ExcTable & 0x80000000) == 0)
      {
        *(_DWORD *)(a2 + 136) = 0;
        goto LABEL_14;
      }
    }
    return ExcTable;
  }
  ExcTable = BET3FLT__vect_t__createVect(v19, a2 + 608, v20);
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 632, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 656, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 680, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
  ExcTable = MFVSyn__setDispersion(a2, *(_DWORD *)(a2 + 168));
  if ((ExcTable & 0x80000000) != 0)
    return ExcTable;
LABEL_14:
  *(_DWORD *)(a2 + 556) = 0;
  *(_DWORD *)(a2 + 564) = 0;
  *(_DWORD *)(a2 + 572) = 0;
  *(_DWORD *)(a2 + 784) = 0;
  v21 = (int)*(float *)(a2 + 68);
  *(_DWORD *)(a2 + 480) = v21;
  switch(*(_DWORD *)(a2 + 76))
  {
    case 1:
      v22 = *(_DWORD *)(a2 + 200);
      if (v22 < 4)
        v23 = 1;
      else
        v23 = v22 >> 2;
      *(_DWORD *)(a2 + 240) = v23;
      *(_BYTE *)(a2 + 244) = 1;
      *(_DWORD *)(a2 + 208) = v21 >> 1;
      *(_DWORD *)(a2 + 80) = 0;
      goto LABEL_32;
    case 2:
      v24 = *(_DWORD *)(a2 + 200);
      if (v24 <= 24)
        v24 = 24;
      v23 = v24 >> 1;
      *(_DWORD *)(a2 + 240) = v23;
      *(_BYTE *)(a2 + 244) = 0;
      if (v21 <= 67)
        v25 = v21 >> 2;
      else
        v25 = 16;
      *(_DWORD *)(a2 + 208) = v25;
      *(_DWORD *)(a2 + 80) = 1;
LABEL_32:
      v26 = 3;
      goto LABEL_36;
    case 3:
      v23 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 240) = v23;
      *(_BYTE *)(a2 + 244) = 0;
      *(_DWORD *)(a2 + 208) = 1;
      *(_DWORD *)(a2 + 80) = 2;
      v26 = 4;
      goto LABEL_36;
    case 4:
      v23 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 240) = v23;
      *(_BYTE *)(a2 + 244) = 0;
      *(_DWORD *)(a2 + 208) = 1;
      *(_DWORD *)(a2 + 80) = 3;
      goto LABEL_35;
    default:
      v23 = *(_DWORD *)(a2 + 240);
LABEL_35:
      v26 = 5;
LABEL_36:
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 216, v23 + 1);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      ExcTable = BET3FLT__MFVSyn__mlsa_filter_init(a2, v26, a7, a8);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      if (*(float *)(a2 + 1628) == 0.0)
        *(_DWORD *)(a2 + 80) = 0;
      ExcTable = MFVSyn__init__postFilter((_DWORD *)a2);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      v27 = *(_DWORD *)(a2 + 172);
      if (v27 <= 2 * *(_DWORD *)(a2 + 40))
        v27 = 2 * *(_DWORD *)(a2 + 40);
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 432, 2 * v27);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      v28 = *(_DWORD *)(a2 + 172);
      if (v28 <= *(_DWORD *)(a2 + 40))
        v28 = *(_DWORD *)(a2 + 40);
      v29 = *(_DWORD *)(a2 + 480) <= v28 ? v28 : *(_DWORD *)(a2 + 480);
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 408, v29);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      v30 = *(_DWORD *)(a2 + 172);
      if (v30 <= 2 * *(_DWORD *)(a2 + 40))
        v30 = 2 * *(_DWORD *)(a2 + 40);
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 456, 2 * v30);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      v31 = *(_DWORD *)(a2 + 40);
      if (v31 <= *(_DWORD *)(a2 + 480))
        v31 = *(_DWORD *)(a2 + 480);
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 488, *(_DWORD *)(a2 + 136) + v31 + 1);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      v32 = (float)*(int *)(a2 + 512);
      *(float *)(a2 + 744) = v32;
      *(float *)(a2 + 752) = v32;
      ExcTable = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 760, *(_DWORD *)(a2 + 200) + 1);
      if ((ExcTable & 0x80000000) != 0)
        return ExcTable;
      Vect = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a2 + 8), a2 + 720, *(_DWORD *)(a2 + 200) + 1);
      if ((Vect & 0x80000000) == 0)
      {
        BET3FLT__MFVSyn__mc2mlsa(a2, *(_QWORD *)(a2 + 768), *(_QWORD *)(a2 + 768));
        *(_DWORD *)(a2 + 748) = 0;
      }
      break;
  }
  return Vect;
}

uint64_t BET3FLT__MFVSyn__reset__MVF_Synthesis(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2164269063;
  BET3FLT__rand_num_init((uint64_t *)(a1 + 88));
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  v_zap(*(void **)(a1 + 128), *(_DWORD *)(a1 + 140));
  v_zap(*(void **)(a1 + 1656), *(_DWORD *)(a1 + 1668));
  v_zap(*(void **)(a1 + 384), *(_DWORD *)(a1 + 396));
  *(float *)(a1 + 744) = (float)*(int *)(a1 + 512);
  *(_DWORD *)(a1 + 752) = 0;
  v_zap(*(void **)(a1 + 768), *(_DWORD *)(a1 + 776));
  BET3FLT__MFVSyn__mc2mlsa(a1, *(_QWORD *)(a1 + 768), *(_QWORD *)(a1 + 768));
  v_zap(*(void **)(a1 + 440), *(_DWORD *)(a1 + 452));
  v_zap(*(void **)(a1 + 416), *(_DWORD *)(a1 + 428));
  v_zap(*(void **)(a1 + 664), *(_DWORD *)(a1 + 676));
  v_zap(*(void **)(a1 + 688), *(_DWORD *)(a1 + 700));
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  v_zap(*(void **)(a1 + 224), *(_DWORD *)(a1 + 236));
  v_set(*(float **)(a1 + 528), *(_DWORD *)(a1 + 540), 1.0);
  v_scale(*(float **)(a1 + 528), *(_DWORD *)(a1 + 540), (float)*(int *)(a1 + 512));
  *(_DWORD *)(a1 + 544) = 0;
  v_zap(*(void **)(a1 + 584), *(_DWORD *)(a1 + 596));
  result = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  return result;
}

void MFVSyn__deinit__MVF_Synthesis(_QWORD *a1)
{
  BET3FLT__MFVSyn__releaseExcTable(a1);
  MFVSyn__deinit__postFilter((uint64_t)a1);
  BET3FLT__MFVSyn__deconstruct((uint64_t)a1);
  bzero(a1, 0x6B8uLL);
}

uint64_t MFVSyn__disperse(uint64_t a1, uint64_t a2, int a3, signed int a4)
{
  uint64_t v8;

  v8 = *(int *)(a1 + 160);
  v_equ((void *)(*(_QWORD *)(a1 + 104) + 4 * v8), (const void *)(*(_QWORD *)(a2 + 8) + 4 * a3), a4);
  v_equ(*(void **)(a1 + 104), *(const void **)(a1 + 128), v8);
  v_equ(*(void **)(a1 + 128), (const void *)(*(_QWORD *)(a1 + 104) + 4 * a4), v8);
  return zerflt(*(_QWORD *)(a1 + 104) + 4 * v8, *(float **)(a1 + 152), *(_QWORD *)(a2 + 8) + 4 * a3, v8, a4);
}

uint64_t MFVSyn__setDispersion(uint64_t a1, int a2)
{
  void *v3;
  int v4;
  void *v5;
  const void *v6;
  int v7;
  uint64_t result;
  int v9;

  v3 = &dispersion_22kHz;
  if (a2 == 22050)
  {
    v4 = 179;
  }
  else
  {
    v3 = &dispersion_16kHz;
    v4 = 129;
  }
  if (a2 == 11025)
    v5 = &dispersion_8kHz;
  else
    v5 = v3;
  if (a2 == 11025)
    v4 = 65;
  if (a2 == 8000)
    v6 = &dispersion_8kHz;
  else
    v6 = v5;
  if (a2 == 8000)
    v7 = 65;
  else
    v7 = v4;
  result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), a1 + 144, v7);
  if ((result & 0x80000000) == 0)
  {
    v_equ(*(void **)(a1 + 152), v6, v7);
    v9 = *(_DWORD *)(a1 + 40);
    if (v9 <= v7)
      v9 = v7;
    result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), a1 + 96, v9 + 5 * v7);
    if ((result & 0x80000000) == 0)
      return BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), a1 + 120, v7);
  }
  return result;
}

void *MFVSyn__pickLowPassFilter(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  int v7;
  void **v8;
  int v9;
  void **v10;
  void *v11;
  void *result;
  float v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float *v26;
  float v27;

  v7 = *(_DWORD *)(a1 + 24);
  v8 = (void **)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v_zap(*(void **)(a2 + 8), *(_DWORD *)(a2 + 20));
  v11 = *(void **)(a3 + 8);
  v10 = (void **)(a3 + 8);
  result = v_zap(v11, *((_DWORD *)v10 + 3));
  v13 = ceilf(a4 / 250.0) * 250.0;
  if (v13 < 1000.0)
    goto LABEL_4;
  v14 = *(_DWORD *)(a1 + 168);
  if ((double)v14 * 0.5 + -1000.0 < v13)
  {
    v10 = v8;
LABEL_4:
    *((_DWORD *)*v10 + (v9 >> 1)) = 1065353216;
    return result;
  }
  v15 = v7 - 1;
  v16 = *(unsigned int *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 16);
  if ((int)v16 < 1)
  {
LABEL_10:
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = 0;
    v19 = v13 / (float)v14;
    v20 = (float *)(v17 + 20);
    while (*v20 < v19)
    {
      ++v18;
      v20 += 10;
      if (v16 == v18)
        goto LABEL_10;
    }
  }
  v_equ(*v8, *(const void **)(v17 + 40 * v18), *(_DWORD *)(v17 + 40 * v18 + 16));
  v21 = *(unsigned int *)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 16);
  if ((int)v21 >= 1)
  {
    v23 = 0;
    v24 = (float *)(v22 + 20);
    while (*v24 < (float)(0.5 - (float)(v13 / (float)*(int *)(a1 + 168))))
    {
      ++v23;
      v24 += 10;
      if (v21 == v23)
        goto LABEL_17;
    }
    v15 = v23;
  }
LABEL_17:
  result = v_equ(*v10, *(const void **)(v22 + 40 * v15), *(_DWORD *)(v22 + 40 * v15 + 16));
  v25 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 40 * v15 + 16);
  if ((int)v25 >= 1)
  {
    v26 = (float *)*v10;
    v27 = 1.0;
    do
    {
      *v26 = v27 * *v26;
      ++v26;
      if (v27 == 1.0)
        v27 = -1.0;
      else
        v27 = 1.0;
      --v25;
    }
    while (v25);
  }
  return result;
}

void MFVSyn__lowPassFilterCoeffGenerator(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  float v25;
  uint64_t v26;
  float v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  long double v34;

  v11 = (_QWORD *)(a2 + 8);
  v12 = *(unsigned int *)(a2 + 16);
  v13 = ((int)v12 >> 1);
  v_zap(*(void **)(a2 + 8), *(_DWORD *)(a2 + 20));
  v15 = *(void **)(a3 + 8);
  v14 = (_QWORD *)(a3 + 8);
  v_zap(v15, *((_DWORD *)v14 + 3));
  if (a4 <= 600.0)
    goto LABEL_17;
  v16 = *(_DWORD *)(a1 + 168);
  if (v16 >= 0)
    v17 = *(_DWORD *)(a1 + 168);
  else
    v17 = v16 + 1;
  if ((float)((v17 >> 1) - 600) <= a4)
  {
    v14 = v11;
LABEL_17:
    *(_DWORD *)(*v14 + 4 * (int)v13) = 1065353216;
    return;
  }
  if ((int)v12 >= 1)
  {
    v18 = 0;
    v19 = a4 / (float)v16;
    v20 = a5;
    v21 = (float)(v19 * 6.2832);
    v22 = *v11;
    do
    {
      v23 = ((int)v12 >> 1);
      v24 = v21 / 3.14159265 * v20;
      if (v13 != v18)
      {
        v24 = sin(v21 * (double)((int)v18 - (int)v13)) * (1.0 / ((double)((int)v18 - (int)v13) * 3.14159265) * v20);
        v23 = v18;
      }
      v25 = v24;
      *(float *)(v22 + 4 * v23) = v25;
      ++v18;
    }
    while (v12 != v18);
    v26 = 0;
    v27 = v19 * -6.28318531 + 3.14159265;
    v28 = a6;
    v29 = v27;
    v30 = (float)(v27 / 3.1416) * a6;
    v31 = *v14;
    do
    {
      v32 = ((int)v12 >> 1);
      v33 = v30;
      if (v13 != v26)
      {
        v34 = pow(-1.0, (double)(int)v26) * v28;
        v33 = v34 * (sin(v29 * (double)((int)v26 - (int)v13)) * (1.0 / (float)((float)(v26 - v13) * 3.1416)));
        v32 = v26;
      }
      *(float *)(v31 + 4 * v32) = v33;
      ++v26;
    }
    while (v12 != v26);
  }
}

void MFVSyn__fillExcPulse(uint64_t a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  int v11;
  double v12;
  float v13;
  float *v14;
  float v15;
  unint64_t *v16;
  float v17;
  uint64_t v18;
  double v19;
  float v20;
  float v21;
  double v23;
  double v24;
  float v25;
  unint64_t *v26;
  float *v27;
  float v28;
  double v29;
  float v30;
  float *v31;
  float v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;

  v11 = *(unsigned __int8 *)(a1 + 72);
  if (*(_BYTE *)(a1 + 72))
  {
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        vect_t__fillZero(a2);
        **(float **)(a2 + 8) = sqrtf(a5);
      }
      return;
    }
    v23 = a6;
    if (a6 > 1.0)
      v23 = 1.0;
    if (v23 >= 0.0)
      v24 = 1.0 - v23;
    else
      v24 = 1.0;
    vect_t__fillZero(a2);
    if (a4)
    {
      v25 = v24;
      if (v25 >= 0.1)
      {
        if (v25 > 0.8)
          v25 = 0.8;
      }
      else
      {
        v25 = 0.3;
      }
      v29 = sqrt(a5);
      v30 = v29;
      v31 = *(float **)(a2 + 8);
      *v31 = v30;
      v32 = v30 + 0.0;
      if (a3 >= 2)
      {
        v33 = v31 + 1;
        v34 = a3 - 1;
        do
        {
          v30 = v25 * v30;
          *v33++ = v30;
          v32 = v32 + v30;
          --v34;
        }
        while (v34);
      }
      v35 = v29 / v32;
      v_scale(v31, a3, v35);
      return;
    }
    v26 = (unint64_t *)(a1 + 88);
    v27 = *(float **)(a2 + 8);
    v28 = *(float *)(a1 + 44) * 1.25 + *(float *)(a1 + 44) * 1.25;
LABEL_21:
    rand_num(v26, v27, a3, v28);
    return;
  }
  vect_t__fillZero(a2);
  if (a6 <= 0.3)
  {
    v26 = (unint64_t *)(a1 + 88);
    v27 = *(float **)(a2 + 8);
    v28 = 2.25;
    goto LABEL_21;
  }
  v12 = sqrt(a5);
  v13 = v12;
  v14 = *(float **)(a2 + 8);
  *v14 = v13;
  v15 = v13 + 0.0;
  if (a3 >= 2)
  {
    v16 = (unint64_t *)(a1 + 88);
    v17 = fmin((float)(1.0 - a6) * 10.0, 1.0);
    v18 = 1;
    do
    {
      v36 = 0.0;
      rand_num(v16, &v36, 1, 2.0);
      v19 = v13 * 0.4;
      v20 = v19 * (v36 * 0.1 + 1.0);
      *(float *)(*(_QWORD *)(a2 + 8) + v18 * 4) = v20;
      rand_num(v16, &v36, 1, 2.0);
      v13 = v19 * (float)((float)(v17 * v36) + 1.0);
      v14 = *(float **)(a2 + 8);
      v15 = v15 + v14[v18++];
    }
    while (a3 != v18);
  }
  v21 = v12 / v15;
  v_scale(v14, a3, v21);
}

float *MFVSyn__filterExcitationWithShapingFilterHQ(uint64_t a1, signed int a2, int a3, uint64_t a4, float a5, float a6, float a7)
{
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;

  v13 = *(float *)(a1 + 552);
  if (v13 > 0.0)
  {
    v14 = *(float *)(a1 + 556);
    if (v14 > 0.0)
      v13 = (float)((float)(1.0 - a6) * v14) + (float)(a6 * v13);
  }
  if (*(_DWORD *)(a1 + 8))
  {
    MFVSyn__pickLowPassFilter(a1, a1 + 608, a1 + 632, v13);
  }
  else
  {
    v15 = (float)((float)(1.0 - a6) * *(float *)(a1 + 564)) + (float)(a6 * *(float *)(a1 + 560));
    v16 = (float)((float)(1.0 - a6) * *(float *)(a1 + 572)) + (float)(a6 * *(float *)(a1 + 568));
    if (v13 > 0.0)
    {
      v17 = (float)(int)(float)(v13 / BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5));
      v18 = BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5) * v17;
      v13 = v18 + (float)(BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5) * 0.5);
    }
    MFVSyn__lowPassFilterCoeffGenerator(a1, a1 + 608, a1 + 632, v13, v15, v16);
  }
  vect_t__mulByHanning(a1 + 608);
  vect_t__mulByHanning(a1 + 632);
  v_zap(*(void **)(a4 + 8), *(_DWORD *)(a4 + 20));
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  MFVSyn__fillExcPulse(a1, a4, a2, a3, a5, a7);
  v_equ((void *)(*(_QWORD *)(a1 + 464) + 4 * *(int *)(a1 + 172)), *(const void **)(a4 + 8), a2);
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 664), *(_DWORD *)(a1 + 172));
  v_equ(*(void **)(a1 + 664), (const void *)(*(_QWORD *)(a1 + 464) + 4 * a2), *(_DWORD *)(a1 + 172));
  v19 = *(_QWORD *)(a1 + 464) + 4 * *(int *)(a1 + 172);
  zerflt(v19, *(float **)(a1 + 616), v19, *(_DWORD *)(a1 + 624), a2);
  v_equ(*(void **)(a4 + 8), (const void *)(*(_QWORD *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2);
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  rand_num((unint64_t *)(a1 + 88), (float *)(*(_QWORD *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2, *(float *)(a1 + 44) * 1.15);
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 688), *(_DWORD *)(a1 + 172));
  v_equ(*(void **)(a1 + 688), (const void *)(*(_QWORD *)(a1 + 464) + 4 * a2), *(_DWORD *)(a1 + 172));
  v20 = *(_QWORD *)(a1 + 464) + 4 * *(int *)(a1 + 172);
  zerflt(v20, *(float **)(a1 + 640), v20, *(_DWORD *)(a1 + 648), a2);
  v_equ(*(void **)(a1 + 464), (const void *)(*(_QWORD *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2);
  v_add(*(float **)(a4 + 8), *(float **)(a1 + 464), a2);
  return v_scale(*(float **)(a4 + 8), a2, *(float *)(a1 + 56));
}

uint64_t BET3FLT__MFVSyn__mc2mlsa(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  BOOL v7;

  v3 = *(int *)(result + 200);
  v4 = *(float *)(result + 1624);
  *(_DWORD *)(a3 + 4 * v3) = *(_DWORD *)(a2 + 4 * v3);
  if ((int)v3 >= 1)
  {
    v3 = v3;
    v5 = -v4;
    do
    {
      v6 = *(float *)(a3 + 4 * v3);
      v7 = v3-- > 1;
      *(float *)(a3 + 4 * v3) = *(float *)(a2 + 4 * v3) + (float)(v5 * v6);
    }
    while (v7);
  }
  return result;
}

void MFVSyn__postFilter(uint64_t a1, float *a2, float *a3)
{
  int v3;
  double v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  double v24;
  float v25;
  float v26;
  float v27;

  v3 = *(_DWORD *)(a1 + 80);
  if (v3)
  {
    v7 = 1.0;
    if (v3 != 1)
    {
      v_equ(*(void **)(a1 + 264), a2, *(_DWORD *)(a1 + 200) + 1);
      MFVSyn__freqt__postFilter(a1);
      MFVSyn__c2ir__postFilter(a1);
      v8 = *(unsigned int *)(a1 + 400);
      if ((int)v8 < 1)
      {
        v7 = 0.0;
      }
      else
      {
        v9 = *(float **)(a1 + 312);
        v10 = 0.0;
        do
        {
          v11 = *v9++;
          v10 = v10 + (float)(v11 * v11);
          --v8;
        }
        while (v8);
        v7 = v10;
      }
    }
    a3[1] = a3[1] - (float)(*(float *)(a1 + 1632) * a2[2]);
    v12 = *(unsigned int *)(a1 + 200);
    if ((int)v12 > 1)
    {
      v13 = a3 + 2;
      v14 = v12 - 1;
      do
      {
        *v13 = *v13 * (float)(*(float *)(a1 + 1628) + 1.0);
        ++v13;
        --v14;
      }
      while (v14);
    }
    if (*(_DWORD *)(a1 + 80) >= 2u)
    {
      v15 = *(float *)(a1 + 1624);
      v16 = *(_QWORD *)(a1 + 264);
      v17 = a3[(int)v12];
      *(float *)(v16 + 4 * (int)v12) = v17;
      if ((int)v12 >= 1)
      {
        v18 = v12 + 1;
        do
        {
          v19 = a3[(v18 - 2)];
          *(float *)(v16 + 4 * (v18-- - 2)) = v19 + (float)(v15 * v17);
          v17 = v19;
        }
        while (v18 > 1);
      }
      MFVSyn__freqt__postFilter(a1);
      MFVSyn__c2ir__postFilter(a1);
      v20 = *(unsigned int *)(a1 + 400);
      if ((int)v20 < 1)
      {
        v24 = 0.0;
      }
      else
      {
        v21 = *(float **)(a1 + 312);
        v22 = 0.0;
        do
        {
          v23 = *v21++;
          v22 = v22 + (float)(v23 * v23);
          --v20;
        }
        while (v20);
        v24 = v22;
      }
      v25 = *a3;
      v26 = log(v7);
      v27 = log(v24);
      *a3 = v25 + (float)((float)(v26 - v27) * 0.5);
    }
  }
}

uint64_t MFVSyn__init__postFilter(_DWORD *a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;

  result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)(a1 + 94), a1[50] + 1);
  if ((result & 0x80000000) == 0)
  {
    v3 = a1[20];
    if (v3 >= 2)
    {
      if (v3 == 2)
        v4 = 32;
      else
        v4 = 64;
      a1[100] = v4;
      result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)(a1 + 70), v4);
      if ((result & 0x80000000) == 0)
      {
        result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)(a1 + 64), a1[50] + 1);
        if ((result & 0x80000000) == 0)
        {
          result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)(a1 + 76), a1[100]);
          if ((result & 0x80000000) == 0)
          {
            result = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)(a1 + 82), a1[100]);
            if ((result & 0x80000000) == 0)
              return BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)(a1 + 88), a1[100]);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *MFVSyn__deinit__postFilter(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) >= 2u)
  {
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 280));
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 256));
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 304));
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 328));
    BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 352));
  }
  return BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 376));
}

void BET3FLT__MFVSyn__mlsa_filter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  float *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float *v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  uint64_t v40;
  float *v41;
  float v42;
  float v43;
  _DWORD *v44;
  int v45;
  int *v46;
  int v47;
  float v48;
  float v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v61;
  uint64_t v63;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(float **)(a1 + 184);
    v61 = *(float **)(a1 + 224);
    v6 = *(unsigned int *)(a1 + 1644);
    v7 = *(_QWORD *)(a1 + 1656);
    v8 = (int)v6 + 1;
    v9 = (float *)(v7 + 4 * v8);
    v57 = v8;
    LODWORD(v8) = 2 * v8;
    v10 = *(unsigned int *)(a1 + 200);
    v11 = v7 + 4 * (int)v8;
    v12 = a1 + 1688;
    v13 = (v10 + 1);
    v58 = a4;
    v14 = v7 + 4 * (int)v8 + 4 * v13;
    v15 = v7 + 4 * v10 + 4 * (int)v8;
    v56 = v13 - 2;
    do
    {
      v63 = v4;
      v16 = *(float *)(a2 + 4 * v4);
      v17 = exp(*v5);
      v18 = fminf(fmaxf(v16 * v17, -32768.0), 32767.0);
      if ((int)v6 <= 0)
      {
        *v9 = v18;
        v31 = 0.0;
        v29 = v18 + 0.0;
        v30 = (float *)(v11 + 4 * *(int *)(v12 + 4 * v57));
      }
      else
      {
        v19 = *(float *)(a1 + 1624);
        v20 = *(float *)(a1 + 1672);
        v21 = 0.0;
        v22 = v6;
        v23 = *(_QWORD *)(a1 + 1680);
        do
        {
          v24 = (float)(v19 * *(float *)(v7 + 4 * v22)) + (float)(v20 * v9[(v22 - 1)]);
          *(float *)(v7 + 4 * v22) = v24;
          v25 = v24 * v5[1];
          v9[v22] = v25;
          v26 = v25 * *(float *)(v23 + 4 * v22);
          v27 = -v26;
          if ((v22 & 1) != 0)
            v27 = v26;
          v18 = v18 + v27;
          v21 = v21 + v26;
          v28 = v22-- > 1;
        }
        while (v28);
        *v9 = v18;
        v29 = v21 + v18;
        v30 = (float *)(v11 + 4 * *(int *)(v12 + 4 * v57));
        v31 = 0.0;
        v32 = v6;
        do
        {
          v33 = v30[(v32 - 1)];
          v34 = *(int *)(v12 + 4 * v32);
          v35 = (float *)(v11 + 4 * v34);
          v36 = (float)(v19 * v35[1]) + (float)(v20 * v33);
          *v35 = v33;
          v35[1] = v36;
          v37 = 0.0;
          if ((int)v10 > 1)
          {
            v38 = v35[2];
            v39 = (float *)(v11 + 12 + 4 * v34);
            v40 = v56;
            v41 = v5 + 2;
            do
            {
              v42 = *v39;
              v36 = v38 + (float)(v19 * (float)(*v39 - v36));
              *(v39 - 1) = v36;
              v43 = *v41++;
              v37 = v37 + (float)(v36 * v43);
              ++v39;
              v38 = v42;
              --v40;
            }
            while (v40);
          }
          if ((int)v10 >= 1)
          {
            v44 = (_DWORD *)(v14 + 4 * v34);
            v45 = v10 + 2;
            v46 = (int *)(v15 + 4 * v34);
            do
            {
              v47 = *v46--;
              *v44-- = v47;
              --v45;
            }
            while (v45 > 2);
          }
          v30[v32] = v37;
          v48 = v37 * *(float *)(v23 + 4 * v32);
          v49 = -v48;
          if ((v32 & 1) != 0)
            v49 = v48;
          v29 = v29 + v49;
          v31 = v31 + v48;
          v28 = v32-- <= 1;
        }
        while (!v28);
      }
      *v30 = v29;
      *(float *)(a3 + 4 * v63) = fminf(fmaxf(v31 + v29, -32768.0), 32767.0);
      if (v61)
      {
        v50 = *(_DWORD *)(a1 + 84) - 1;
        *(_DWORD *)(a1 + 84) = v50;
        if (!v50)
        {
          v51 = *(unsigned int *)(a1 + 240);
          if ((v51 & 0x80000000) == 0)
          {
            v52 = v51 + 1;
            v53 = v5;
            v54 = v61;
            do
            {
              v55 = *v54++;
              *v53 = *v53 + v55;
              ++v53;
              --v52;
            }
            while (v52);
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 208);
        }
      }
      v4 = v63 + 1;
    }
    while (v63 + 1 != v58);
  }
}

uint64_t BET3FLT__MFVSyn__mlsa_filter_init(uint64_t a1, int a2, float a3, float a4)
{
  int v4;
  uint64_t Vect;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int v14;

  *(float *)(a1 + 1624) = a3;
  *(float *)(a1 + 1628) = a4;
  v4 = *(_DWORD *)(a1 + 200);
  if (v4 < 4)
    return 0;
  *(_DWORD *)(a1 + 1644) = a2;
  Vect = BET3FLT__vect_t__createVect(*(_QWORD *)(*(_QWORD *)a1 + 8), a1 + 1648, (v4 + 5) * a2 + 3);
  if ((Vect & 0x80000000) == 0)
  {
    v_zap(*(void **)(a1 + 1656), *(_DWORD *)(a1 + 1668));
    v7 = *(float *)(a1 + 1624);
    *(float *)(a1 + 1636) = -v7;
    *(float *)(a1 + 1632) = v7 * *(float *)(a1 + 1628);
    v8 = 1.0 - (float)(v7 * v7);
    *(float *)(a1 + 1672) = v8;
    *(float *)(a1 + 1676) = v8;
    v9 = *(_DWORD *)(a1 + 1644);
    *(_QWORD *)(a1 + 1680) = (char *)&g_pade + 24 * v9;
    if (v9 >= -1)
    {
      v10 = *(_DWORD *)(a1 + 200);
      v11 = v9 + 2;
      v12 = (int *)(a1 + 4 * (v9 + 1) + 1688);
      v13 = v9 * (v10 + 2);
      v14 = -2 - v10;
      do
      {
        *v12-- = v13;
        --v11;
        v13 += v14;
      }
      while (v11 > 0);
    }
  }
  return Vect;
}

_QWORD *BET3FLT__MFVSyn__mlsa_filter_deinit(uint64_t a1)
{
  return BET3FLT__vect_t__deleteVect((_QWORD *)(a1 + 1648));
}

void *MFVSyn__freqt__postFilter(uint64_t a1)
{
  float v2;
  float v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  float *v9;
  float *v10;
  int v11;
  int v12;
  uint64_t v13;
  float *v14;
  float *v15;

  v2 = *(float *)(a1 + 1636);
  v3 = *(float *)(a1 + 1676);
  v4 = *(_DWORD *)(a1 + 200);
  v5 = *(unsigned int *)(a1 + 400);
  v6 = *(_QWORD *)(a1 + 264);
  v7 = *(void **)(a1 + 288);
  if ((int)v5 >= 1)
    bzero(*(void **)(a1 + 360), 4 * v5);
  if (v4 < 0)
  {
    v9 = *(float **)(a1 + 360);
  }
  else
  {
    v8 = -v4;
    v9 = *(float **)(a1 + 360);
    v10 = *(float **)(a1 + 336);
    do
    {
      v11 = v8;
      *v10 = *v9;
      v12 = *((_DWORD *)v9 + 1);
      *v9 = *(float *)(v6 + 4 * -v8) + (float)(v2 * *v9);
      *((_DWORD *)v10 + 1) = v12;
      v9[1] = (float)(v2 * v9[1]) + (float)(v3 * *v10);
      if ((int)v5 >= 3)
      {
        v13 = v5 - 2;
        v14 = v9 + 2;
        v15 = v10 + 2;
        do
        {
          *v15 = *v14;
          *v14 = *(v15 - 1) + (float)(v2 * (float)(*v14 - *(v14 - 1)));
          ++v14;
          ++v15;
          --v13;
        }
        while (v13);
      }
      v8 = v11 + 1;
    }
    while (v11);
  }
  return v_equ(v7, v9, v5);
}

float MFVSyn__c2ir__postFilter(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  float *v3;
  float result;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float v8;
  float *v9;
  float v10;

  v1 = *(unsigned int *)(a1 + 400);
  v2 = *(float **)(a1 + 288);
  v3 = *(float **)(a1 + 312);
  result = exp(*v2);
  *v3 = result;
  if ((int)v1 >= 2)
  {
    v5 = 1;
    v6 = v3;
    do
    {
      v7 = 0;
      v8 = 0.0;
      v9 = v6;
      do
      {
        v10 = *v9--;
        v8 = v8 + (float)((float)(v2[v7 + 1] * (float)(v7 + 1)) * v10);
        ++v7;
      }
      while (v5 != v7);
      result = v8 * g_oneOver[v5];
      v3[v5++] = result;
      ++v6;
    }
    while (v5 != v1);
  }
  return result;
}

float v_add(float *a1, float *a2, int a3)
{
  uint64_t v3;
  float v5;
  float result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *a2++;
      result = v5 + *a1;
      *a1++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_equ(void *a1, const void *a2, unsigned int a3)
{
  return memcpy(a1, a2, 4 * a3);
}

float v_sum(float *a1, int a2)
{
  uint64_t v2;
  float result;
  float v4;

  if (a2 < 1)
    return 0.0;
  v2 = a2;
  result = 0.0;
  do
  {
    v4 = *a1++;
    result = result + v4;
    --v2;
  }
  while (v2);
  return result;
}

float *v_scale(float *result, int a2, float a3)
{
  uint64_t v4;
  float *v5;

  if (a3 != 1.0 && a2 >= 1)
  {
    v4 = a2;
    v5 = result;
    do
    {
      *v5 = *v5 * a3;
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

float *v_set(float *result, int a2, float a3)
{
  uint64_t v3;
  float *v4;

  if (a2 >= 1)
  {
    v3 = a2;
    v4 = result;
    do
    {
      *v4++ = a3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap(void *a1, int a2)
{
  if (a2 >= 1)
    bzero(a1, 4 * a2);
  return a1;
}

uint64_t zerflt(uint64_t result, float *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;

  if (a5 >= 1)
  {
    v5 = a5;
    v6 = result + 4 * a5 - 4;
    do
    {
      v7 = 0.0;
      if (a4 >= 1)
      {
        v8 = a4;
        v9 = a2;
        v10 = (float *)v6;
        do
        {
          v11 = *v10--;
          v12 = v11;
          v13 = *v9++;
          v7 = v7 + (float)(v12 * v13);
          --v8;
        }
        while (v8);
      }
      *(float *)(a3 + 4 * (v5 - 1)) = v7;
      v6 -= 4;
    }
    while (v5-- > 1);
  }
  return result;
}

float BET3FLT__wave_t__convertFromF0ToTp(float *a1, float a2)
{
  if (a2 == 0.0)
    return 0.0;
  else
    return (float)(1.0 / a2) * *a1;
}

float BET3FLT__wave_t__convertFromTpToF0(float *a1, float a2)
{
  return (float)(1.0 / a2) * *a1;
}

float BET3FLT__wave_t__convertFromMsecToTp(float *a1, float a2)
{
  return (float)(a2 * 0.001) * *a1;
}

float BET3FLT__wave_t__sampleRateHz(uint64_t a1)
{
  return *(float *)a1;
}

float *BET3FLT__wave_t__setSampleRateHz(float *result, float a2)
{
  if (result)
  {
    if (a2 > 0.0)
      *result = a2;
  }
  return result;
}

float wave_t__convertFromF0ToTp__SR(float a1, float a2)
{
  if (a2 == 0.0)
    return 0.0;
  else
    return 1.0 / a2 * a1;
}

uint64_t BET3FLT__MFVSyn__loadExcTable(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  float v23;
  double *v24;
  uint64_t v25;
  uint64_t j;
  float v27;
  double *v28;
  double v29;
  float v30;
  _QWORD v32[302];

  v32[300] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 792) = v4;
  v5 = *(unsigned __int16 *)(a2 + 52);
  *(_WORD *)(a1 + 796) = v5;
  *(_WORD *)(a1 + 798) = *(_WORD *)(a2 + 54);
  v6 = *(unsigned __int16 *)(a2 + 56);
  *(_WORD *)(a1 + 800) = v6;
  *(_WORD *)(a1 + 802) = *(_WORD *)(a2 + 58);
  *(_WORD *)(a1 + 804) = *(_WORD *)(a2 + 60);
  *(_WORD *)(a1 + 806) = *(_WORD *)(a2 + 62);
  v7 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 4 * ((v6 + v5) * v4));
  *(_QWORD *)(a1 + 808) = v7;
  v8 = *(unsigned int *)(a1 + 792);
  if ((int)v8 > 1)
  {
    v9 = *(unsigned __int16 *)(a1 + 796);
    v10 = (_QWORD *)(a1 + 832);
    v11 = v8 - 1;
    v12 = v9;
    do
    {
      *v10 = v7 + 4 * v12;
      v10 += 3;
      v12 += v9;
      --v11;
    }
    while (v11);
  }
  if ((int)v8 >= 1)
  {
    v13 = 0;
    v14 = (double *)(a2 + 64);
    v15 = a1 + 808;
    v16 = *(unsigned __int16 *)(a1 + 800);
    v17 = *(unsigned __int16 *)(a1 + 796);
    v18 = (_QWORD *)(a1 + 816);
    v19 = v8;
    do
    {
      *v18 = *(_QWORD *)(a1 + 808 + 24 * (v8 - 1)) + 4 * v13 + 4 * v17;
      v18 += 3;
      v13 += v16;
      --v19;
    }
    while (v19);
    v20 = 0;
    v21 = *(unsigned __int16 *)(a1 + 796);
    do
    {
      __memcpy_chk();
      if ((_DWORD)v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v23 = *(double *)&v32[i];
          *(float *)(*(_QWORD *)(v15 + 24 * v20) + 4 * i) = v23;
        }
      }
      v24 = &v14[v21];
      v25 = *(unsigned __int16 *)(a1 + 800);
      __memcpy_chk();
      if (v25)
      {
        for (j = 0; j != v25; ++j)
        {
          v27 = *(double *)&v32[j];
          *(float *)(*(_QWORD *)(v15 + 24 * v20 + 8) + 4 * j) = v27;
        }
      }
      v28 = &v24[v25];
      v29 = *v28;
      v14 = v28 + 1;
      v30 = v29;
      *(float *)(v15 + 24 * v20++ + 16) = v30;
    }
    while (v20 != v8);
  }
  return 0;
}

_QWORD *BET3FLT__MFVSyn__releaseExcTable(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[101];
  if (v1)
  {
    v2 = result;
    result = heap_Free(*(_QWORD **)(*result + 8), v1);
    v2[101] = 0;
  }
  return result;
}

uint64_t BET3FXD__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int16 v30;

  v8 = a1;
  v30 = 0;
  v9 = *a4;
  if (a4[4] - v9 >= 8 && *(_BYTE *)(*((_QWORD *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    v12 = a3;
    v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      v14 = BET3FLT__xfread2ptr_BET3((_QWORD *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if ((*a4 & 1) != 0)
          ++*a4;
        v15 = heap_Calloc(*(_QWORD **)(v8 + 8), 16, (unsigned __int16)*v13);
        v21 = a2 + 8 * v12;
        *(_QWORD *)(v21 + 104) = v15;
        v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          BET3FXD__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13)
          return 0;
        v23 = 0;
        v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1)
            break;
          v25 = BET3FLT__xfread2ptr_BET3((_QWORD *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2))
            break;
          v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13)
            return v26;
        }
        v26 = 2229280772;
        v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        v28 = 55015;
      }
      else
      {
        v26 = 2229280772;
        v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        v28 = 55013;
      }
    }
    else
    {
      v26 = 2229280772;
      v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      v28 = 55012;
    }
  }
  else
  {
    v26 = 2229280772;
    v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    v28 = 55011;
  }
  BET3FXD__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t BET3FXD__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;

  LOWORD(v5) = 0;
  v6 = a3 + 8 * a4;
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 16 * a5 + 8);
  v9 = a2 + 2;
  v10 = a2 + 1;
  while (2)
  {
    v11 = -(uint64_t)(__int16)v5;
    v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    v13 = (unsigned __int8 *)(v7 + *v12);
    v14 = *v13;
    v15 = v13[1];
    v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2)
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + (a2 - 2));
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1)
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + (a2 - 1));
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10))
          goto LABEL_20;
        v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v10);
        if (v13[1])
          goto LABEL_24;
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          v16 = -1;
          if (v13[1])
            goto LABEL_24;
        }
        else
        {
          v16 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v9);
          if (v13[1])
            goto LABEL_24;
        }
        goto LABEL_39;
      default:
        if ((_DWORD)v14 == 3)
        {
          v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1784) + 2 * a2);
          v18 = v17 > 0x19;
          v16 = 10 * v17;
          if (v18)
            v16 = -1;
          if (!v13[1])
            goto LABEL_39;
        }
        else
        {
          v19 = *(_QWORD *)(a1 + 8 * v14 + 16);
          if (!v19)
            goto LABEL_39;
          v16 = *(_BYTE *)(v19 + a2);
          if (!v13[1])
            goto LABEL_39;
        }
LABEL_24:
        v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v20[1] >= v16)
            goto LABEL_30;
        }
        else
        {
          v21 = v15 - 1;
          if (v21)
          {
            v22 = 0;
            while (1)
            {
              v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22))
                ++v23;
              v24 = v23 >> 1;
              v25 = v20[v24];
              if (v25 == v16)
                break;
              if (v16 < v25)
                v21 = v24 - 1;
              else
                v22 = v24 + 1;
              if (v22 > v21)
                goto LABEL_39;
            }
LABEL_30:
            v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16)
            goto LABEL_30;
        }
LABEL_39:
        if ((v5 & 0x8000) != 0)
          continue;
        return v5;
    }
  }
}

uint64_t BET3FXD__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t inited;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  *a5 = 0;
  inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(v16 + 8), 1, 24);
    if (v9)
    {
      *v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6)
{
  char *__s1;

  __s1 = 0;
  bzero(a5, 0xE48uLL);
  *a5 = a2;
  if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)a5, a6);
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int GenericFeatureLayers;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int Index;
  unsigned int v58;
  const char *v59;
  unsigned int v60;
  uint64_t j;
  const char *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t k;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  _DWORD *v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t result;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v108;
  uint64_t *v109;
  char v110;
  char v111;
  unsigned int v112[4];
  uint64_t v113;

  v14 = a1;
  v113 = *MEMORY[0x1E0C80C00];
  v15 = *a1;
  if (a11)
    v16 = a12 == 0;
  else
    v16 = 1;
  v17 = !v16;
  v106 = v17;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  v18 = 0;
  v19 = 0;
  v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(_BYTE *)(*(_QWORD *)a10 + 2748 + v18) == 1)
      ++v19;
    ++v18;
  }
  while (v18 != 218);
  v21 = heap_Calloc(*(_QWORD **)(v15 + 8), (v19 * v20), 1);
  if (!v21)
    goto LABEL_118;
  v26 = v21;
  v108 = a3;
  v109 = v14;
  for (i = 0; i != 218; ++i)
  {
    v28 = *(_QWORD *)a10;
    v29 = *(unsigned __int8 *)(*(_QWORD *)a10 + i + 2748);
    if (*(_BYTE *)(*(_QWORD *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        v30 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 2);
        *(_QWORD *)(a10 + 8 * i + 1760) = v30;
        if (!v30)
          goto LABEL_43;
      }
      else if (v29 == 1)
      {
        *(_QWORD *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            v31 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 9);
            *(_QWORD *)(a10 + 3560) = v31;
            if (!v31)
              goto LABEL_43;
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              v34 = heap_Calloc(*(_QWORD **)(v15 + 8), (v33 * v20), 4);
              *(_QWORD *)(a10 + 3568) = v34;
              if (!v34)
                goto LABEL_43;
            }
            continue;
          case '4':
            v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              v36 = heap_Calloc(*(_QWORD **)(v15 + 8), (v35 * v20), 4);
              *(_QWORD *)(a10 + 3576) = v36;
              if (!v36)
                goto LABEL_43;
            }
            continue;
          case '5':
            v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              v38 = heap_Calloc(*(_QWORD **)(v15 + 8), (v37 * v20), 4);
              *(_QWORD *)(a10 + 3584) = v38;
              if (!v38)
                goto LABEL_43;
            }
            continue;
          case '6':
            v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              v40 = heap_Calloc(*(_QWORD **)(v15 + 8), (v39 * v20), 4);
              *(_QWORD *)(a10 + 3592) = v40;
              if (!v40)
                goto LABEL_43;
            }
            continue;
          case '8':
            v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              v42 = heap_Calloc(*(_QWORD **)(v15 + 8), (v41 * v20), 1);
              *(_QWORD *)(a10 + 3600) = v42;
              if (!v42)
                goto LABEL_43;
            }
            continue;
          default:
            if ((_DWORD)i == 24)
            {
              v32 = heap_Calloc(*(_QWORD **)(v15 + 8), v20, 8);
              *(_QWORD *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                v43 = -2065686518;
                log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(_QWORD *)(*v14 + 32), (uint64_t)"SELECT_BET3", 55007, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  v44 = *(unsigned __int16 *)(*(_QWORD *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    v43 = -2065686513;
    goto LABEL_120;
  }
  v45 = (void *)heap_Calloc(*(_QWORD **)(v15 + 8), v44 * v20, 4);
  *(_QWORD *)(a10 + 3608) = v45;
  if (!v45)
  {
    v43 = -2065686518;
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v102);
    goto LABEL_120;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a10 + 3578) * (_DWORD)v20)
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(_QWORD *)a10 + 3578) * v20);
  GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*v14, (uint64_t)"SELECT_BET3", (_QWORD *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    v43 = GenericFeatureLayers;
    goto LABEL_120;
  }
  v43 = usextract_Process(*v14, (uint64_t)"SELECT_BET3", v14[2], a3, a4, a10, v51, v52);
  if ((v43 & 0x80000000) == 0)
  {
    v104 = a4;
    if (*(_QWORD *)(a10 + 3504))
    {
      v53 = *(_QWORD *)a10;
      v54 = **(const char ***)(*(_QWORD *)a10 + 3336);
      if (v54)
      {
        v55 = 0;
        v56 = 1;
        do
        {
          if (!strncmp(v54, "INNO_", 5uLL))
          {
            v58 = atoi(v54 + 5) + 79;
            if (v58 <= 0x5E)
              *(_QWORD *)(a10 + 8 * v58 + 16) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
          }
          else
          {
            Index = usextract_getIndex(*(const char ***)(*(_QWORD *)(v53 + 3344) + 8 * v55), "FEATIDX", (unint64_t)"");
            if (Index == -1)
            {
              v53 = *(_QWORD *)a10;
              v59 = *(const char **)(*(_QWORD *)(*(_QWORD *)a10 + 3336) + 8 * v55);
              if (!strcmp(v59, "POS"))
              {
                *(_QWORD *)(a10 + 504) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
              }
              else if (!strcmp(v59, "PHR"))
              {
                *(_QWORD *)(a10 + 512) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
              }
            }
            else
            {
              v53 = *(_QWORD *)a10;
              *(_QWORD *)(a10
                        + 8
                        * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a10 + 3352) + 8 * v55) + Index)
                        + 16) = *(_QWORD *)(*(_QWORD *)(a10 + 3504) + 8 * v55);
            }
          }
          v55 = v56;
          v54 = *(const char **)(*(_QWORD *)(v53 + 3336) + 8 * v56++);
        }
        while (v54);
      }
    }
    v103 = *(__int16 *)(a10 + 10);
    v60 = v103 & ~(v103 >> 31);
    if (BET3FLT__log_select_GetLogLevel(*(_QWORD *)(v15 + 32)) >= 6)
    {
      LH_itoa(0x4Eu, (char *)v112, 0xAu);
      for (j = 0; j != 218; ++j)
      {
        v62 = "application/x-realspeak-usplosives;version=4.0";
        switch((int)j)
        {
          case 2:
            v111 = 5;
            v110 = 0;
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v111,
              1u,
              0);
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              *(_QWORD *)(a10 + 8 * j + 16),
              v60,
              0);
            log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v110,
              1u,
              0);
            continue;
          case 3:
            v62 = "application/x-realspeak-usdurs;version=4.0";
            goto LABEL_71;
          case 4:
            goto LABEL_71;
          case 5:
            v62 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_71:
            v63 = *(unsigned __int8 *)(*(_QWORD *)a10 + j + 2748);
            if (v63 == 2)
            {
              log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(_QWORD *)(a10 + 8 * j + 1760), 2 * v60, 0);
            }
            else if (v63 == 1)
            {
              log_OutBinary(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(_QWORD *)(a10 + 8 * j + 16), v60, 0);
            }
            break;
          default:
            continue;
        }
      }
    }
    v105 = v103 & ~(v103 >> 31);
    v64 = *(unsigned int *)(a10 + 3520);
    if ((_DWORD)v64)
    {
      v65 = 0;
      for (k = 0; k < v64; ++k)
      {
        if (*(_DWORD *)(*(_QWORD *)(a10 + 3512) + v65) == 25)
        {
          v112[0] = 0;
          paramc_ParamGetUInt(*(_QWORD *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
          v67 = *(_DWORD *)(*(_QWORD *)(a10 + 3512) + v65 + 24);
          *a9 = v67;
          v43 = paramc_ParamSetInt(*(_QWORD *)(v15 + 40), (uint64_t)"waitfactor", v67);
          if (v43 < 0)
          {
            log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v68, v69, v70, v71, "parameter");
            goto LABEL_134;
          }
          v64 = *(unsigned int *)(a10 + 3520);
        }
        v65 += 32;
      }
    }
    featextract_adjustSilAudioOrder(a10);
    a3 = v108;
    v14 = v109;
    LODWORD(v72) = v103 & ~(v103 >> 31);
    if (!v106 || (v73 = *(_DWORD *)(a10 + 3520), v74 = v73 + v105, *a12 = v74, !(v73 + v105)))
    {
LABEL_97:
      if (v103 < 1)
      {
        a4 = v104;
      }
      else
      {
        v90 = 0;
        v91 = (unsigned __int16)v72;
        if (v72 <= 1)
          v72 = 1;
        else
          v72 = v72;
        v92 = v91 - 1;
        v93 = a2;
        do
        {
          v94 = *(_QWORD *)(a10 + 248);
          if (!*(_BYTE *)(v94 + v90))
            *(_BYTE *)(v94 + v90) = -1;
          v95 = *(_QWORD *)(a10 + 192);
          if (*(_BYTE *)(*(_QWORD *)(a10 + 32) + v90) == 35)
            v96 = 1;
          else
            v96 = 2 * *(_BYTE *)(v95 + v90);
          *(_BYTE *)(v95 + v90) = v96;
          v97 = *(_QWORD *)(a10 + 32);
          if (v92 == v90 && *(_BYTE *)(v97 + v90) == 35)
          {
            v112[0] = 0;
            paramc_ParamGetUInt(*(_QWORD *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
            v98 = 0;
            v99 = *(_QWORD *)(a10 + 1784);
            if (v112[0] != 1)
              v98 = *(unsigned __int16 *)(v99 + 2 * v90) + 200 * *a9;
            if (v98 <= 1)
              v98 = 1;
            if (v98 >= 0xFFFF)
              LOWORD(v98) = -1;
            *(_WORD *)(v99 + 2 * v90) = v98;
            v97 = *(_QWORD *)(a10 + 32);
            v93 = a2;
          }
          *(_BYTE *)(v97 + v90) = *(_BYTE *)(v93 + *(unsigned __int8 *)(v97 + v90) + 7356);
          ++v90;
        }
        while (v72 != v90);
LABEL_134:
        a4 = v104;
LABEL_44:
        a3 = v108;
        v14 = v109;
      }
      goto LABEL_120;
    }
    v75 = heap_Calloc(*(_QWORD **)(v15 + 8), v74, 32);
    *a11 = v75;
    a4 = v104;
    if (v75)
    {
      v76 = (void *)heap_Calloc(*(_QWORD **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
      if (v76)
      {
        v77 = (uint64_t)v76;
        memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
        LODWORD(v72) = v103 & ~(v103 >> 31);
        if (*a12)
        {
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v81 = 0;
          while (v81 < *(unsigned int *)(a10 + 3520))
          {
            if (v80 >= v105)
            {
              v87 = (_OWORD *)(*a11 + v78);
              v88 = (_OWORD *)(*(_QWORD *)(a10 + 3512) + 32 * v81);
              v89 = v88[1];
              *v87 = *v88;
              v87[1] = v89;
              ++v81;
              goto LABEL_95;
            }
            v82 = v80;
            if (!*(_WORD *)(v77 + 2 * v80))
              goto LABEL_93;
            v83 = (_OWORD *)(*a11 + v78);
            v84 = (_OWORD *)(*(_QWORD *)(a10 + 3512) + 32 * v81);
            v85 = v84[1];
            *v83 = *v84;
            v83[1] = v85;
            ++v81;
            --*(_WORD *)(v77 + 2 * v80);
LABEL_95:
            ++v79;
            v78 += 32;
            if (v79 >= *a12)
              goto LABEL_96;
          }
          v82 = v80;
LABEL_93:
          v86 = (_DWORD *)(*a11 + v78);
          *v86 = 33;
          v86[6] = *(unsigned __int8 *)(*(_QWORD *)(a10 + 32) + v82);
          ++v80;
          goto LABEL_95;
        }
LABEL_96:
        heap_Free(*(_QWORD **)(v15 + 8), v77);
        goto LABEL_97;
      }
    }
LABEL_118:
    v43 = -2065686518;
    log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
  }
LABEL_120:
  if (a12 && a11 && v43 < 0 && *a11)
  {
    heap_Free(*(_QWORD **)(v15 + 8), *a11);
    *a11 = 0;
    *a12 = 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(v14[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1)
    return v43;
  else
    return result;
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*a2)
    return 0;
  v4 = *a1;
  v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((_QWORD *)*a1, (uint64_t)"SELECT_BET3", a2);
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(_BYTE *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        v14 = a2[v10 + 220];
        if (v14)
LABEL_11:
          heap_Free(*(_QWORD **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          v13 = a2[v10 + 2];
          if (v13)
            heap_Free(*(_QWORD **)(v4 + 8), v13);
          v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            v14 = a2[445];
            if (v14)
              goto LABEL_11;
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            v14 = a2[446];
            if (v14)
              goto LABEL_11;
            break;
          case '4':
            v14 = a2[447];
            if (v14)
              goto LABEL_11;
            break;
          case '5':
            v14 = a2[448];
            if (v14)
              goto LABEL_11;
            break;
          case '6':
            v14 = a2[449];
            if (v14)
              goto LABEL_11;
            break;
          case '8':
            v14 = a2[450];
            if (v14)
              goto LABEL_11;
            break;
          default:
            if ((_DWORD)v10 == 24)
            {
              v14 = a2[444];
              if (v14)
                goto LABEL_11;
            }
            else
            {
LABEL_20:
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, "%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  v15 = a2[451];
  if (v15)
    heap_Free(*(_QWORD **)(v4 + 8), v15);
  *a2 = 0;
  return v5;
}

uint64_t BET3FXD__mul_int32_Q8_24_to_int32(int a1, int a2)
{
  return ((a2 * a1) >> 24);
}

uint64_t BET3FXD__mul_int32_Q8_24_to_Q8_24(int a1, int a2)
{
  return (a2 * a1);
}

uint64_t BET3FXD__mul_Q18_14_Q1_15_to_Q18_14(uint64_t result, int a2)
{
  if (a2 == 0x7FFF)
    return result;
  else
    return ((unint64_t)(a2 * (uint64_t)(int)result) >> 15);
}

uint64_t BET3FXD__div_int32_int32_to_Q8_24(int a1, int a2)
{
  return (((a1 << 16) / a2) << 8);
}

uint64_t BET3FXD__div_Q8_24_Q12_20_to_Q8_24(int a1, int a2)
{
  return ((a1 / (a2 >> 8)) << 12);
}

uint64_t BET3FXD__div_Q18_14_Q18_14_to_Q18_14(int a1, int a2)
{
  return ((16 * a1 / (a2 >> 4)) << 6);
}

uint64_t BET3FXD__Q8_24_to_int32(int a1)
{
  return (a1 >> 24);
}

uint64_t BET3FXD__Q10_22_to_Q8_24(int a1)
{
  return (4 * a1);
}

uint64_t BET3FXD__int32_to_Q8_24(int a1)
{
  return (a1 << 24);
}

uint64_t BET3FXD__int32_to_Q12_20(int a1)
{
  return (a1 << 20);
}

uint64_t BET3FXD__int32_to_Q18_14(int a1)
{
  return (a1 << 14);
}

uint64_t BET3FXD__Q18_14_to_Q1_15(__int16 a1)
{
  return (__int16)(2 * a1);
}

uint64_t BET3FXD__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;

  if (a2[a3 + 120])
  {
    result = loadQuantizedDurFile(a1, (uint64_t)(a2 + 42), a4, 0xFu);
    if ((_DWORD)result)
      return result;
    *a2 = a2[43];
  }
  v13 = &a2[a3];
  if (v13[130])
  {
    v14 = heap_Calloc(*(_QWORD **)(a1 + 8), (*(_DWORD *)(a6 + 268) - 1), 4);
    *((_QWORD *)a2 + 53) = v14;
    if (!v14)
      return 2229280778;
    result = loadVQQuantizedCepFile(a1, (unsigned __int16 *)a2 + 196, a4);
    if ((_DWORD)result)
      return result;
    *a2 = *((unsigned __int16 *)a2 + 199);
    a2[a3 + 1] = *((unsigned __int16 *)a2 + 198) + *((unsigned __int16 *)a2 + 198) * *((unsigned __int16 *)a2 + 201);
    result = loadCodebookSet(a1, (uint64_t)(a2 + 116), a5, 0x10u);
    if ((_DWORD)result)
      return result;
  }
  if (!v13[140])
    return 0;
  v15 = (uint64_t *)&a2[2 * a3 + 78];
  if (*v15)
    heap_Free(*(_QWORD **)(a1 + 8), *v15);
  v16 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 128);
  *v15 = v16;
  if (!v16)
    return 2229280778;
  v17 = *(_DWORD *)(a6 + 4 * a3 + 224);
  if (v17 == 2)
  {
    v18 = 3774880;
    v19 = 20;
  }
  else if (v17 == 3)
  {
    v18 = 1310720;
    v19 = 18;
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  result = loadQuantizedMsdFile(a1, v16, *a2, a4, v19, v18);
  if (!(_DWORD)result)
    a2[a3 + 1] = *(_DWORD *)(*v15 + 8);
  return result;
}

uint64_t BET3FXD__FindDurPDF(uint64_t a1, int *a2, int a3, int a4)
{
  int v4;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if (*a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = (uint64_t)(a2 + 42);
  v12 = v4 - 1;
  while (1)
  {
    v20 = 0;
    result = dequantDur(v11, v12, v9, (_DWORD *)&v20 + 1, &v20, 15);
    if ((result & 0x80000000) != 0)
      break;
    v14 = HIDWORD(v20);
    v15 = BET3FXD__mul_Q18_14_Q1_15_to_Q18_14(((int)v20 >> 1), a3);
    v16 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    if (a2[151])
    {
      if (v16 >= 0x3E7F060)
        v10 = 65532000;
      else
        v10 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    }
    else if (v16 <= 0x3E7F060)
    {
      v10 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    }
    else
    {
      v10 >>= 1;
    }
    v17 = a4 + ((v10 + 0x2000) >> 14);
    v18 = *(_QWORD *)(a1 + 16) + 4 * v9;
    *(_DWORD *)(v18 + 8) = v17;
    *(_DWORD *)(a1 + 24) += v17;
    a4 = (v10 + 0x2000 - (*(_DWORD *)(v18 + 8) << 14)) >> 14;
    v19 = v9 + 2;
    ++v9;
    if (v19 > *a2)
      return 0;
  }
  return result;
}

uint64_t BET3FXD__FindContPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v35;

  v35 = 0;
  v10 = a1;
  v11 = *a8;
  v12 = *a8 * *(unsigned __int16 *)(a4 + 396);
  LODWORD(v13) = *(unsigned __int16 *)(a4 + 402);
  v14 = v12 + v12 * v13;
  if (*(_WORD *)(a4 + 396))
  {
    v31 = a3;
    v32 = a8;
    v16 = 0;
    v17 = *(_DWORD *)(*(_QWORD *)(a3 + 8 * a1 + 72) + 4 * a2);
    v18 = (unsigned __int16 *)(a4 + 392);
    v19 = a4 + 464;
    v20 = v14 + 1;
    v33 = v12 + v12 * v13;
    while (1)
    {
      result = dequantEnergy(v18, a2, (unsigned __int16)v17, v16, (_DWORD *)&v35 + 1, &v35, 0x10u);
      if ((result & 0x80000000) != 0)
        break;
      v22 = v16 + v16 * v13 + v14;
      LODWORD(v35) = (int)v35 >> 4;
      v23 = v35;
      HIDWORD(v35) <<= 8;
      *(_DWORD *)(a6 + 4 * v22) = HIDWORD(v35);
      *(_DWORD *)(a7 + 4 * v22) = v23;
      LODWORD(v13) = *(unsigned __int16 *)(a4 + 402);
      if (*(_WORD *)(a4 + 402))
      {
        v24 = 0;
        do
        {
          v25 = *(int *)(*(_QWORD *)(a4 + 424) + 4 * v24);
          result = deVQSpectrum(v18, v19, a2, (unsigned __int16)v17, v25, v24 - *(unsigned __int16 *)(*(_QWORD *)(a4 + 416) + 2 * v25), v16, (_DWORD *)&v35 + 1, &v35, 0x10u);
          if ((result & 0x80000000) != 0)
            return result;
          v26 = v20 + v24 + v16 + v16 * v13;
          v27 = HIDWORD(v35) << 8;
          v28 = (int)v35 >> 4;
          *(_DWORD *)(a6 + 4 * v26) = HIDWORD(v35) << 8;
          v35 = __PAIR64__(v27, v28);
          *(_DWORD *)(a7 + 4 * v26) = v28;
          ++v24;
          v13 = *(unsigned __int16 *)(a4 + 402);
        }
        while (v24 < v13);
      }
      ++v16;
      v14 = v33;
      if (v16 >= *(unsigned __int16 *)(a4 + 396))
      {
        a3 = v31;
        a8 = v32;
        v11 = *v32;
        v10 = a1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    result = 0;
LABEL_11:
    v29 = a3 + 8 * v10;
    *(_QWORD *)(*(_QWORD *)(v29 + 152) + 8 * a2) = a6 + 4 * v14;
    *(_QWORD *)(*(_QWORD *)(v29 + 232) + 8 * a2) = a7 + 4 * v14;
    *a8 = v11 + 1;
  }
  return result;
}

uint64_t BET3FXD__FindMsdPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int *v32;
  int *v33;
  _QWORD *v34;
  char v35;
  _QWORD *v36;
  int v37;
  int v38;
  uint64_t v39;

  v39 = 0;
  v38 = 0;
  v5 = a5 + 4 * a1;
  v8 = *(_DWORD *)(v5 + 224);
  v7 = (_DWORD *)(v5 + 224);
  v6 = v8;
  if (v8 == 3)
    v9 = 18;
  else
    v9 = 0;
  if (v6 == 2)
    v10 = 20;
  else
    v10 = v9;
  v11 = a4 + 4 * a1;
  v13 = *(_DWORD *)(v11 + 4);
  v12 = (int *)(v11 + 4);
  if (v13 < 1)
    return 0;
  v14 = a3;
  v15 = 0;
  v16 = a2;
  v17 = (uint64_t *)(a4 + 8 * a1 + 312);
  v18 = (_QWORD *)(a3 + 8 * a1);
  v19 = (a2 - 2);
  v37 = *(_DWORD *)(v18[9] + 4 * a2) - 1;
  v20 = 24 - v10;
  v36 = v18 + 19;
  v35 = v10 - 12;
  v33 = (int *)(a5 + 4 * a1 + 2104);
  v34 = v18 + 29;
  v32 = v12;
  do
  {
    v21 = dequantMsd(*v17, v19, v37, v15, (_DWORD *)&v39 + 1, &v39, &v38, v10);
    if ((v21 & 0x80000000) != 0)
      break;
    v38 <<= v20;
    *(_DWORD *)(*(_QWORD *)(*v36 + 8 * v16) + 4 * v15 + 4) = HIDWORD(v39) << v20;
    if ((*v7 & 0xFFFFFFFE) == 2)
      *(_DWORD *)(*(_QWORD *)(*v34 + 8 * v16) + 4 * v15 + 4) = (int)v39 >> v35;
    if (!v15)
    {
      v22 = v10;
      v23 = v19;
      v24 = v17;
      if (*v7 == 2)
        *(_DWORD *)(*(_QWORD *)(v14 + 320) + 4 * v16) = v38;
      v25 = v14;
      v26 = v38;
      v27 = BET3FXD__Q10_22_to_Q8_24(*v33);
      v28 = 1 << *v7;
      if (v26 <= v27)
      {
        v14 = v25;
        v29 = *(_QWORD *)(v25 + 312);
        v30 = *(_BYTE *)(v29 + v16) & ~(_BYTE)v28;
      }
      else
      {
        v14 = v25;
        v29 = *(_QWORD *)(v25 + 312);
        v30 = *(_BYTE *)(v29 + v16) | v28;
      }
      *(_BYTE *)(v29 + v16) = v30;
      v17 = v24;
      v19 = v23;
      v10 = v22;
      v12 = v32;
    }
    ++v15;
  }
  while (v15 < *v12);
  return v21;
}

void BET3FXD__DeInitModelSet(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[59];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v4);
    a2[59] = 0;
  }
  for (i = 39; i != 49; ++i)
  {
    v6 = a2[i];
    if (v6)
    {
      if (*(_QWORD *)(v6 + 120))
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v6 + 120));
        *(_QWORD *)(a2[i] + 120) = 0;
        v6 = a2[i];
      }
      heap_Free(*(_QWORD **)(a1 + 8), v6);
      a2[i] = 0;
    }
  }
  if (*((_WORD *)a2 + 198))
  {
    v7 = 0;
    v8 = 0;
    v9 = a2[54];
    v10 = v9;
    do
    {
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + v7 + 8);
        if (v11)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v11);
          v9 = a2[54];
          *(_QWORD *)(v9 + v7 + 8) = 0;
        }
        v12 = *(_QWORD *)(v9 + v7 + 24);
        if (v12)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v12);
          v9 = a2[54];
          *(_QWORD *)(v9 + v7 + 24) = 0;
        }
        v13 = *(_QWORD *)(v9 + v7 + 32);
        v10 = v9;
        if (v13)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v13);
          v9 = a2[54];
          *(_QWORD *)(v9 + v7 + 32) = 0;
          v10 = v9;
        }
      }
      ++v8;
      v7 += 40;
    }
    while (v8 < 2 * (unint64_t)*((unsigned __int16 *)a2 + 198));
  }
  v14 = a2[52];
  if (v14)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v14);
    a2[52] = 0;
  }
  v15 = a2[53];
  if (v15)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v15);
    a2[53] = 0;
  }
  v16 = a2[54];
  if (v16)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v16);
    a2[54] = 0;
  }
  v17 = a2[56];
  if (v17)
  {
    a2[56] = v17 + 32;
    heap_Free(*(_QWORD **)(a1 + 8), v17 + 32);
  }
  bzero(a2, 0x260uLL);
}

uint64_t BET3FXD__InitUttModel(uint64_t a1, char *a2, int *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = 2229280778;
  bzero(a2, 0x240uLL);
  *(_QWORD *)a2 = a1;
  *((_QWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 138) = a4;
  *((_DWORD *)a2 + 141) = *a3 * a4;
  v9 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 528);
  *((_QWORD *)a2 + 68) = v9;
  if (v9)
  {
    v10 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
    *((_QWORD *)a2 + 4) = v10;
    if (v10)
    {
      v11 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 1);
      *((_QWORD *)a2 + 41) = v11;
      if (v11)
      {
        v12 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
        *((_QWORD *)a2 + 42) = v12;
        if (v12)
        {
          v13 = a3[150];
          if (v13 >= 1)
          {
            v14 = 0;
            v15 = a2 + 168;
            v16 = a3;
            do
            {
              if (!v16[120])
              {
                v17 = heap_Calloc(*(_QWORD **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
                *(v15 - 10) = v17;
                if (!v17)
                  return v8;
                v18 = *(_QWORD **)(a1 + 8);
                v19 = *((_DWORD *)a2 + 138);
                v20 = v16[140]
                    ? BET3FLT__ddcalloc(v18, 2 * v19 * *a3, v16[1] + 1)
                    : (_QWORD *)heap_Calloc(v18, (2 * v19 * *a3), 8);
                *v15 = v20;
                if (!v20)
                  return v8;
                v15[10] = &v20[*a3 * *((_DWORD *)a2 + 138)];
                v13 = a3[150];
              }
              ++v14;
              ++v16;
              ++v15;
            }
            while (v14 < v13);
          }
          v21 = *((unsigned int *)a2 + 138);
          if ((int)v21 >= 1)
          {
            v22 = 0;
            v23 = *a3;
            v24 = 152;
            do
            {
              v25 = *((_QWORD *)a2 + 68);
              v26 = v25 + 528 * v22;
              *(_DWORD *)v26 = v22;
              v27 = v22 * v23;
              v28 = *((_QWORD *)a2 + 41) + v22 * v23;
              v29 = *((_QWORD *)a2 + 42) + 4 * v22 * v23;
              *(_QWORD *)(v26 + 16) = *((_QWORD *)a2 + 4) + 4 * v22 * v23 - 8;
              *(_QWORD *)(v26 + 312) = v28 - 2;
              *(_QWORD *)(v26 + 320) = v29 - 8;
              if (v13 >= 1)
              {
                v30 = (uint64_t *)(v25 + v24);
                v31 = a2 + 168;
                v32 = v13;
                v33 = a3 + 120;
                do
                {
                  if (!*v33++)
                  {
                    v35 = *(v31 - 10) + 4 * v27;
                    *(v30 - 10) = v35;
                    v36 = *v31 + 8 * v27;
                    *v30 = v36;
                    v37 = v31[10] + 8 * v27;
                    *(v30 - 10) = v35 - 8;
                    *v30 = v36 - 16;
                    v30[10] = v37 - 16;
                  }
                  ++v30;
                  ++v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v24 += 528;
            }
            while (v22 != v21);
          }
          return 0;
        }
      }
    }
  }
  return v8;
}

